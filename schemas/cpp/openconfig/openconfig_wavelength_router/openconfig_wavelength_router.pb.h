// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openconfig/openconfig_wavelength_router/openconfig_wavelength_router.proto

#ifndef PROTOBUF_openconfig_2fopenconfig_5fwavelength_5frouter_2fopenconfig_5fwavelength_5frouter_2eproto__INCLUDED
#define PROTOBUF_openconfig_2fopenconfig_5fwavelength_5frouter_2fopenconfig_5fwavelength_5frouter_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "github.com/openconfig/ygot/proto/ywrapper/ywrapper.pb.h"
#include "github.com/openconfig/ygot/proto/yext/yext.pb.h"
#include "openconfig/enums/enums.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_openconfig_2fopenconfig_5fwavelength_5frouter_2fopenconfig_5fwavelength_5frouter_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[17];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsWavelengthRouter_MediaChannels_Channel_ConfigImpl();
void InitDefaultsWavelengthRouter_MediaChannels_Channel_Config();
void InitDefaultsWavelengthRouter_MediaChannels_Channel_Dest_ConfigImpl();
void InitDefaultsWavelengthRouter_MediaChannels_Channel_Dest_Config();
void InitDefaultsWavelengthRouter_MediaChannels_Channel_Dest_StateImpl();
void InitDefaultsWavelengthRouter_MediaChannels_Channel_Dest_State();
void InitDefaultsWavelengthRouter_MediaChannels_Channel_DestImpl();
void InitDefaultsWavelengthRouter_MediaChannels_Channel_Dest();
void InitDefaultsWavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_ConfigImpl();
void InitDefaultsWavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config();
void InitDefaultsWavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_StateImpl();
void InitDefaultsWavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State();
void InitDefaultsWavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueImpl();
void InitDefaultsWavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue();
void InitDefaultsWavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKeyImpl();
void InitDefaultsWavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey();
void InitDefaultsWavelengthRouter_MediaChannels_Channel_PsdDistributionImpl();
void InitDefaultsWavelengthRouter_MediaChannels_Channel_PsdDistribution();
void InitDefaultsWavelengthRouter_MediaChannels_Channel_Source_ConfigImpl();
void InitDefaultsWavelengthRouter_MediaChannels_Channel_Source_Config();
void InitDefaultsWavelengthRouter_MediaChannels_Channel_Source_StateImpl();
void InitDefaultsWavelengthRouter_MediaChannels_Channel_Source_State();
void InitDefaultsWavelengthRouter_MediaChannels_Channel_SourceImpl();
void InitDefaultsWavelengthRouter_MediaChannels_Channel_Source();
void InitDefaultsWavelengthRouter_MediaChannels_Channel_StateImpl();
void InitDefaultsWavelengthRouter_MediaChannels_Channel_State();
void InitDefaultsWavelengthRouter_MediaChannels_ChannelImpl();
void InitDefaultsWavelengthRouter_MediaChannels_Channel();
void InitDefaultsWavelengthRouter_MediaChannels_ChannelKeyImpl();
void InitDefaultsWavelengthRouter_MediaChannels_ChannelKey();
void InitDefaultsWavelengthRouter_MediaChannelsImpl();
void InitDefaultsWavelengthRouter_MediaChannels();
void InitDefaultsWavelengthRouterImpl();
void InitDefaultsWavelengthRouter();
inline void InitDefaults() {
  InitDefaultsWavelengthRouter_MediaChannels_Channel_Config();
  InitDefaultsWavelengthRouter_MediaChannels_Channel_Dest_Config();
  InitDefaultsWavelengthRouter_MediaChannels_Channel_Dest_State();
  InitDefaultsWavelengthRouter_MediaChannels_Channel_Dest();
  InitDefaultsWavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config();
  InitDefaultsWavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State();
  InitDefaultsWavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue();
  InitDefaultsWavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey();
  InitDefaultsWavelengthRouter_MediaChannels_Channel_PsdDistribution();
  InitDefaultsWavelengthRouter_MediaChannels_Channel_Source_Config();
  InitDefaultsWavelengthRouter_MediaChannels_Channel_Source_State();
  InitDefaultsWavelengthRouter_MediaChannels_Channel_Source();
  InitDefaultsWavelengthRouter_MediaChannels_Channel_State();
  InitDefaultsWavelengthRouter_MediaChannels_Channel();
  InitDefaultsWavelengthRouter_MediaChannels_ChannelKey();
  InitDefaultsWavelengthRouter_MediaChannels();
  InitDefaultsWavelengthRouter();
}
}  // namespace protobuf_openconfig_2fopenconfig_5fwavelength_5frouter_2fopenconfig_5fwavelength_5frouter_2eproto
namespace openconfig {
namespace openconfig_wavelength_router {
class WavelengthRouter;
class WavelengthRouterDefaultTypeInternal;
extern WavelengthRouterDefaultTypeInternal _WavelengthRouter_default_instance_;
class WavelengthRouter_MediaChannels;
class WavelengthRouter_MediaChannelsDefaultTypeInternal;
extern WavelengthRouter_MediaChannelsDefaultTypeInternal _WavelengthRouter_MediaChannels_default_instance_;
class WavelengthRouter_MediaChannels_Channel;
class WavelengthRouter_MediaChannels_ChannelDefaultTypeInternal;
extern WavelengthRouter_MediaChannels_ChannelDefaultTypeInternal _WavelengthRouter_MediaChannels_Channel_default_instance_;
class WavelengthRouter_MediaChannels_ChannelKey;
class WavelengthRouter_MediaChannels_ChannelKeyDefaultTypeInternal;
extern WavelengthRouter_MediaChannels_ChannelKeyDefaultTypeInternal _WavelengthRouter_MediaChannels_ChannelKey_default_instance_;
class WavelengthRouter_MediaChannels_Channel_Config;
class WavelengthRouter_MediaChannels_Channel_ConfigDefaultTypeInternal;
extern WavelengthRouter_MediaChannels_Channel_ConfigDefaultTypeInternal _WavelengthRouter_MediaChannels_Channel_Config_default_instance_;
class WavelengthRouter_MediaChannels_Channel_Dest;
class WavelengthRouter_MediaChannels_Channel_DestDefaultTypeInternal;
extern WavelengthRouter_MediaChannels_Channel_DestDefaultTypeInternal _WavelengthRouter_MediaChannels_Channel_Dest_default_instance_;
class WavelengthRouter_MediaChannels_Channel_Dest_Config;
class WavelengthRouter_MediaChannels_Channel_Dest_ConfigDefaultTypeInternal;
extern WavelengthRouter_MediaChannels_Channel_Dest_ConfigDefaultTypeInternal _WavelengthRouter_MediaChannels_Channel_Dest_Config_default_instance_;
class WavelengthRouter_MediaChannels_Channel_Dest_State;
class WavelengthRouter_MediaChannels_Channel_Dest_StateDefaultTypeInternal;
extern WavelengthRouter_MediaChannels_Channel_Dest_StateDefaultTypeInternal _WavelengthRouter_MediaChannels_Channel_Dest_State_default_instance_;
class WavelengthRouter_MediaChannels_Channel_PsdDistribution;
class WavelengthRouter_MediaChannels_Channel_PsdDistributionDefaultTypeInternal;
extern WavelengthRouter_MediaChannels_Channel_PsdDistributionDefaultTypeInternal _WavelengthRouter_MediaChannels_Channel_PsdDistribution_default_instance_;
class WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue;
class WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueDefaultTypeInternal;
extern WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueDefaultTypeInternal _WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_default_instance_;
class WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey;
class WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKeyDefaultTypeInternal;
extern WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKeyDefaultTypeInternal _WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey_default_instance_;
class WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config;
class WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_ConfigDefaultTypeInternal;
extern WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_ConfigDefaultTypeInternal _WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config_default_instance_;
class WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State;
class WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_StateDefaultTypeInternal;
extern WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_StateDefaultTypeInternal _WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State_default_instance_;
class WavelengthRouter_MediaChannels_Channel_Source;
class WavelengthRouter_MediaChannels_Channel_SourceDefaultTypeInternal;
extern WavelengthRouter_MediaChannels_Channel_SourceDefaultTypeInternal _WavelengthRouter_MediaChannels_Channel_Source_default_instance_;
class WavelengthRouter_MediaChannels_Channel_Source_Config;
class WavelengthRouter_MediaChannels_Channel_Source_ConfigDefaultTypeInternal;
extern WavelengthRouter_MediaChannels_Channel_Source_ConfigDefaultTypeInternal _WavelengthRouter_MediaChannels_Channel_Source_Config_default_instance_;
class WavelengthRouter_MediaChannels_Channel_Source_State;
class WavelengthRouter_MediaChannels_Channel_Source_StateDefaultTypeInternal;
extern WavelengthRouter_MediaChannels_Channel_Source_StateDefaultTypeInternal _WavelengthRouter_MediaChannels_Channel_Source_State_default_instance_;
class WavelengthRouter_MediaChannels_Channel_State;
class WavelengthRouter_MediaChannels_Channel_StateDefaultTypeInternal;
extern WavelengthRouter_MediaChannels_Channel_StateDefaultTypeInternal _WavelengthRouter_MediaChannels_Channel_State_default_instance_;
}  // namespace openconfig_wavelength_router
}  // namespace openconfig
namespace openconfig {
namespace openconfig_wavelength_router {

enum WavelengthRouter_MediaChannels_Channel_State_OperStatus {
  WavelengthRouter_MediaChannels_Channel_State_OperStatus_OPERSTATUS_UNSET = 0,
  WavelengthRouter_MediaChannels_Channel_State_OperStatus_OPERSTATUS_UP = 1,
  WavelengthRouter_MediaChannels_Channel_State_OperStatus_OPERSTATUS_DOWN = 2,
  WavelengthRouter_MediaChannels_Channel_State_OperStatus_WavelengthRouter_MediaChannels_Channel_State_OperStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  WavelengthRouter_MediaChannels_Channel_State_OperStatus_WavelengthRouter_MediaChannels_Channel_State_OperStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool WavelengthRouter_MediaChannels_Channel_State_OperStatus_IsValid(int value);
const WavelengthRouter_MediaChannels_Channel_State_OperStatus WavelengthRouter_MediaChannels_Channel_State_OperStatus_OperStatus_MIN = WavelengthRouter_MediaChannels_Channel_State_OperStatus_OPERSTATUS_UNSET;
const WavelengthRouter_MediaChannels_Channel_State_OperStatus WavelengthRouter_MediaChannels_Channel_State_OperStatus_OperStatus_MAX = WavelengthRouter_MediaChannels_Channel_State_OperStatus_OPERSTATUS_DOWN;
const int WavelengthRouter_MediaChannels_Channel_State_OperStatus_OperStatus_ARRAYSIZE = WavelengthRouter_MediaChannels_Channel_State_OperStatus_OperStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* WavelengthRouter_MediaChannels_Channel_State_OperStatus_descriptor();
inline const ::std::string& WavelengthRouter_MediaChannels_Channel_State_OperStatus_Name(WavelengthRouter_MediaChannels_Channel_State_OperStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    WavelengthRouter_MediaChannels_Channel_State_OperStatus_descriptor(), value);
}
inline bool WavelengthRouter_MediaChannels_Channel_State_OperStatus_Parse(
    const ::std::string& name, WavelengthRouter_MediaChannels_Channel_State_OperStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WavelengthRouter_MediaChannels_Channel_State_OperStatus>(
    WavelengthRouter_MediaChannels_Channel_State_OperStatus_descriptor(), name, value);
}
// ===================================================================

class WavelengthRouter_MediaChannels_Channel_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Config) */ {
 public:
  WavelengthRouter_MediaChannels_Channel_Config();
  virtual ~WavelengthRouter_MediaChannels_Channel_Config();

  WavelengthRouter_MediaChannels_Channel_Config(const WavelengthRouter_MediaChannels_Channel_Config& from);

  inline WavelengthRouter_MediaChannels_Channel_Config& operator=(const WavelengthRouter_MediaChannels_Channel_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WavelengthRouter_MediaChannels_Channel_Config(WavelengthRouter_MediaChannels_Channel_Config&& from) noexcept
    : WavelengthRouter_MediaChannels_Channel_Config() {
    *this = ::std::move(from);
  }

  inline WavelengthRouter_MediaChannels_Channel_Config& operator=(WavelengthRouter_MediaChannels_Channel_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WavelengthRouter_MediaChannels_Channel_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WavelengthRouter_MediaChannels_Channel_Config* internal_default_instance() {
    return reinterpret_cast<const WavelengthRouter_MediaChannels_Channel_Config*>(
               &_WavelengthRouter_MediaChannels_Channel_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(WavelengthRouter_MediaChannels_Channel_Config* other);
  friend void swap(WavelengthRouter_MediaChannels_Channel_Config& a, WavelengthRouter_MediaChannels_Channel_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WavelengthRouter_MediaChannels_Channel_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  WavelengthRouter_MediaChannels_Channel_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WavelengthRouter_MediaChannels_Channel_Config& from);
  void MergeFrom(const WavelengthRouter_MediaChannels_Channel_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WavelengthRouter_MediaChannels_Channel_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue index = 301463906 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/config/index"];
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 301463906;
  const ::ywrapper::UintValue& index() const;
  ::ywrapper::UintValue* release_index();
  ::ywrapper::UintValue* mutable_index();
  void set_allocated_index(::ywrapper::UintValue* index);

  // .ywrapper.StringValue name = 351086787 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/config/name"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 351086787;
  const ::ywrapper::StringValue& name() const;
  ::ywrapper::StringValue* release_name();
  ::ywrapper::StringValue* mutable_name();
  void set_allocated_name(::ywrapper::StringValue* name);

  // .ywrapper.UintValue upper_frequency = 431960071 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/config/upper-frequency"];
  bool has_upper_frequency() const;
  void clear_upper_frequency();
  static const int kUpperFrequencyFieldNumber = 431960071;
  const ::ywrapper::UintValue& upper_frequency() const;
  ::ywrapper::UintValue* release_upper_frequency();
  ::ywrapper::UintValue* mutable_upper_frequency();
  void set_allocated_upper_frequency(::ywrapper::UintValue* upper_frequency);

  // .ywrapper.UintValue lower_frequency = 534173960 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/config/lower-frequency"];
  bool has_lower_frequency() const;
  void clear_lower_frequency();
  static const int kLowerFrequencyFieldNumber = 534173960;
  const ::ywrapper::UintValue& lower_frequency() const;
  ::ywrapper::UintValue* release_lower_frequency();
  ::ywrapper::UintValue* mutable_lower_frequency();
  void set_allocated_lower_frequency(::ywrapper::UintValue* lower_frequency);

  // .openconfig.enums.OpenconfigWavelengthRouterAdminStateType admin_status = 148137994 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/config/admin-status"];
  void clear_admin_status();
  static const int kAdminStatusFieldNumber = 148137994;
  ::openconfig::enums::OpenconfigWavelengthRouterAdminStateType admin_status() const;
  void set_admin_status(::openconfig::enums::OpenconfigWavelengthRouterAdminStateType value);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* index_;
  ::ywrapper::StringValue* name_;
  ::ywrapper::UintValue* upper_frequency_;
  ::ywrapper::UintValue* lower_frequency_;
  int admin_status_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwavelength_5frouter_2fopenconfig_5fwavelength_5frouter_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwavelength_5frouter_2fopenconfig_5fwavelength_5frouter_2eproto::InitDefaultsWavelengthRouter_MediaChannels_Channel_ConfigImpl();
};
// -------------------------------------------------------------------

class WavelengthRouter_MediaChannels_Channel_Dest_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Dest.Config) */ {
 public:
  WavelengthRouter_MediaChannels_Channel_Dest_Config();
  virtual ~WavelengthRouter_MediaChannels_Channel_Dest_Config();

  WavelengthRouter_MediaChannels_Channel_Dest_Config(const WavelengthRouter_MediaChannels_Channel_Dest_Config& from);

  inline WavelengthRouter_MediaChannels_Channel_Dest_Config& operator=(const WavelengthRouter_MediaChannels_Channel_Dest_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WavelengthRouter_MediaChannels_Channel_Dest_Config(WavelengthRouter_MediaChannels_Channel_Dest_Config&& from) noexcept
    : WavelengthRouter_MediaChannels_Channel_Dest_Config() {
    *this = ::std::move(from);
  }

  inline WavelengthRouter_MediaChannels_Channel_Dest_Config& operator=(WavelengthRouter_MediaChannels_Channel_Dest_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WavelengthRouter_MediaChannels_Channel_Dest_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WavelengthRouter_MediaChannels_Channel_Dest_Config* internal_default_instance() {
    return reinterpret_cast<const WavelengthRouter_MediaChannels_Channel_Dest_Config*>(
               &_WavelengthRouter_MediaChannels_Channel_Dest_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(WavelengthRouter_MediaChannels_Channel_Dest_Config* other);
  friend void swap(WavelengthRouter_MediaChannels_Channel_Dest_Config& a, WavelengthRouter_MediaChannels_Channel_Dest_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WavelengthRouter_MediaChannels_Channel_Dest_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  WavelengthRouter_MediaChannels_Channel_Dest_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WavelengthRouter_MediaChannels_Channel_Dest_Config& from);
  void MergeFrom(const WavelengthRouter_MediaChannels_Channel_Dest_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WavelengthRouter_MediaChannels_Channel_Dest_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue port_name = 24904376 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/dest/config/port-name"];
  bool has_port_name() const;
  void clear_port_name();
  static const int kPortNameFieldNumber = 24904376;
  const ::ywrapper::StringValue& port_name() const;
  ::ywrapper::StringValue* release_port_name();
  ::ywrapper::StringValue* mutable_port_name();
  void set_allocated_port_name(::ywrapper::StringValue* port_name);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Dest.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* port_name_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwavelength_5frouter_2fopenconfig_5fwavelength_5frouter_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwavelength_5frouter_2fopenconfig_5fwavelength_5frouter_2eproto::InitDefaultsWavelengthRouter_MediaChannels_Channel_Dest_ConfigImpl();
};
// -------------------------------------------------------------------

class WavelengthRouter_MediaChannels_Channel_Dest_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Dest.State) */ {
 public:
  WavelengthRouter_MediaChannels_Channel_Dest_State();
  virtual ~WavelengthRouter_MediaChannels_Channel_Dest_State();

  WavelengthRouter_MediaChannels_Channel_Dest_State(const WavelengthRouter_MediaChannels_Channel_Dest_State& from);

  inline WavelengthRouter_MediaChannels_Channel_Dest_State& operator=(const WavelengthRouter_MediaChannels_Channel_Dest_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WavelengthRouter_MediaChannels_Channel_Dest_State(WavelengthRouter_MediaChannels_Channel_Dest_State&& from) noexcept
    : WavelengthRouter_MediaChannels_Channel_Dest_State() {
    *this = ::std::move(from);
  }

  inline WavelengthRouter_MediaChannels_Channel_Dest_State& operator=(WavelengthRouter_MediaChannels_Channel_Dest_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WavelengthRouter_MediaChannels_Channel_Dest_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WavelengthRouter_MediaChannels_Channel_Dest_State* internal_default_instance() {
    return reinterpret_cast<const WavelengthRouter_MediaChannels_Channel_Dest_State*>(
               &_WavelengthRouter_MediaChannels_Channel_Dest_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(WavelengthRouter_MediaChannels_Channel_Dest_State* other);
  friend void swap(WavelengthRouter_MediaChannels_Channel_Dest_State& a, WavelengthRouter_MediaChannels_Channel_Dest_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WavelengthRouter_MediaChannels_Channel_Dest_State* New() const PROTOBUF_FINAL { return New(NULL); }

  WavelengthRouter_MediaChannels_Channel_Dest_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WavelengthRouter_MediaChannels_Channel_Dest_State& from);
  void MergeFrom(const WavelengthRouter_MediaChannels_Channel_Dest_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WavelengthRouter_MediaChannels_Channel_Dest_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue port_name = 353653293 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/dest/state/port-name"];
  bool has_port_name() const;
  void clear_port_name();
  static const int kPortNameFieldNumber = 353653293;
  const ::ywrapper::StringValue& port_name() const;
  ::ywrapper::StringValue* release_port_name();
  ::ywrapper::StringValue* mutable_port_name();
  void set_allocated_port_name(::ywrapper::StringValue* port_name);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Dest.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* port_name_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwavelength_5frouter_2fopenconfig_5fwavelength_5frouter_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwavelength_5frouter_2fopenconfig_5fwavelength_5frouter_2eproto::InitDefaultsWavelengthRouter_MediaChannels_Channel_Dest_StateImpl();
};
// -------------------------------------------------------------------

class WavelengthRouter_MediaChannels_Channel_Dest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Dest) */ {
 public:
  WavelengthRouter_MediaChannels_Channel_Dest();
  virtual ~WavelengthRouter_MediaChannels_Channel_Dest();

  WavelengthRouter_MediaChannels_Channel_Dest(const WavelengthRouter_MediaChannels_Channel_Dest& from);

  inline WavelengthRouter_MediaChannels_Channel_Dest& operator=(const WavelengthRouter_MediaChannels_Channel_Dest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WavelengthRouter_MediaChannels_Channel_Dest(WavelengthRouter_MediaChannels_Channel_Dest&& from) noexcept
    : WavelengthRouter_MediaChannels_Channel_Dest() {
    *this = ::std::move(from);
  }

  inline WavelengthRouter_MediaChannels_Channel_Dest& operator=(WavelengthRouter_MediaChannels_Channel_Dest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WavelengthRouter_MediaChannels_Channel_Dest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WavelengthRouter_MediaChannels_Channel_Dest* internal_default_instance() {
    return reinterpret_cast<const WavelengthRouter_MediaChannels_Channel_Dest*>(
               &_WavelengthRouter_MediaChannels_Channel_Dest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(WavelengthRouter_MediaChannels_Channel_Dest* other);
  friend void swap(WavelengthRouter_MediaChannels_Channel_Dest& a, WavelengthRouter_MediaChannels_Channel_Dest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WavelengthRouter_MediaChannels_Channel_Dest* New() const PROTOBUF_FINAL { return New(NULL); }

  WavelengthRouter_MediaChannels_Channel_Dest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WavelengthRouter_MediaChannels_Channel_Dest& from);
  void MergeFrom(const WavelengthRouter_MediaChannels_Channel_Dest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WavelengthRouter_MediaChannels_Channel_Dest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef WavelengthRouter_MediaChannels_Channel_Dest_Config Config;
  typedef WavelengthRouter_MediaChannels_Channel_Dest_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Dest.State state = 10749255 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/dest/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 10749255;
  const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Dest_State& state() const;
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Dest_State* release_state();
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Dest_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Dest_State* state);

  // .openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Dest.Config config = 290197290 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/dest/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 290197290;
  const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Dest_Config& config() const;
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Dest_Config* release_config();
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Dest_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Dest_Config* config);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Dest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Dest_State* state_;
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Dest_Config* config_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwavelength_5frouter_2fopenconfig_5fwavelength_5frouter_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwavelength_5frouter_2fopenconfig_5fwavelength_5frouter_2eproto::InitDefaultsWavelengthRouter_MediaChannels_Channel_DestImpl();
};
// -------------------------------------------------------------------

class WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue.Config) */ {
 public:
  WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config();
  virtual ~WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config();

  WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config(const WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config& from);

  inline WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config& operator=(const WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config(WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config&& from) noexcept
    : WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config() {
    *this = ::std::move(from);
  }

  inline WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config& operator=(WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config* internal_default_instance() {
    return reinterpret_cast<const WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config*>(
               &_WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config* other);
  friend void swap(WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config& a, WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config& from);
  void MergeFrom(const WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.BytesValue psd = 5500354 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/psd-distribution/psd-value/config/psd"];
  bool has_psd() const;
  void clear_psd();
  static const int kPsdFieldNumber = 5500354;
  const ::ywrapper::BytesValue& psd() const;
  ::ywrapper::BytesValue* release_psd();
  ::ywrapper::BytesValue* mutable_psd();
  void set_allocated_psd(::ywrapper::BytesValue* psd);

  // .ywrapper.UintValue lower_frequency = 104941357 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/psd-distribution/psd-value/config/lower-frequency"];
  bool has_lower_frequency() const;
  void clear_lower_frequency();
  static const int kLowerFrequencyFieldNumber = 104941357;
  const ::ywrapper::UintValue& lower_frequency() const;
  ::ywrapper::UintValue* release_lower_frequency();
  ::ywrapper::UintValue* mutable_lower_frequency();
  void set_allocated_lower_frequency(::ywrapper::UintValue* lower_frequency);

  // .ywrapper.UintValue upper_frequency = 494951658 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/psd-distribution/psd-value/config/upper-frequency"];
  bool has_upper_frequency() const;
  void clear_upper_frequency();
  static const int kUpperFrequencyFieldNumber = 494951658;
  const ::ywrapper::UintValue& upper_frequency() const;
  ::ywrapper::UintValue* release_upper_frequency();
  ::ywrapper::UintValue* mutable_upper_frequency();
  void set_allocated_upper_frequency(::ywrapper::UintValue* upper_frequency);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::BytesValue* psd_;
  ::ywrapper::UintValue* lower_frequency_;
  ::ywrapper::UintValue* upper_frequency_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwavelength_5frouter_2fopenconfig_5fwavelength_5frouter_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwavelength_5frouter_2fopenconfig_5fwavelength_5frouter_2eproto::InitDefaultsWavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_ConfigImpl();
};
// -------------------------------------------------------------------

class WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue.State) */ {
 public:
  WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State();
  virtual ~WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State();

  WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State(const WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State& from);

  inline WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State& operator=(const WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State(WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State&& from) noexcept
    : WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State() {
    *this = ::std::move(from);
  }

  inline WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State& operator=(WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State* internal_default_instance() {
    return reinterpret_cast<const WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State*>(
               &_WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State* other);
  friend void swap(WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State& a, WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State* New() const PROTOBUF_FINAL { return New(NULL); }

  WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State& from);
  void MergeFrom(const WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue lower_frequency = 156152700 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/psd-distribution/psd-value/state/lower-frequency"];
  bool has_lower_frequency() const;
  void clear_lower_frequency();
  static const int kLowerFrequencyFieldNumber = 156152700;
  const ::ywrapper::UintValue& lower_frequency() const;
  ::ywrapper::UintValue* release_lower_frequency();
  ::ywrapper::UintValue* mutable_lower_frequency();
  void set_allocated_lower_frequency(::ywrapper::UintValue* lower_frequency);

  // .ywrapper.UintValue upper_frequency = 329030827 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/psd-distribution/psd-value/state/upper-frequency"];
  bool has_upper_frequency() const;
  void clear_upper_frequency();
  static const int kUpperFrequencyFieldNumber = 329030827;
  const ::ywrapper::UintValue& upper_frequency() const;
  ::ywrapper::UintValue* release_upper_frequency();
  ::ywrapper::UintValue* mutable_upper_frequency();
  void set_allocated_upper_frequency(::ywrapper::UintValue* upper_frequency);

  // .ywrapper.BytesValue psd = 404818967 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/psd-distribution/psd-value/state/psd"];
  bool has_psd() const;
  void clear_psd();
  static const int kPsdFieldNumber = 404818967;
  const ::ywrapper::BytesValue& psd() const;
  ::ywrapper::BytesValue* release_psd();
  ::ywrapper::BytesValue* mutable_psd();
  void set_allocated_psd(::ywrapper::BytesValue* psd);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* lower_frequency_;
  ::ywrapper::UintValue* upper_frequency_;
  ::ywrapper::BytesValue* psd_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwavelength_5frouter_2fopenconfig_5fwavelength_5frouter_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwavelength_5frouter_2fopenconfig_5fwavelength_5frouter_2eproto::InitDefaultsWavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_StateImpl();
};
// -------------------------------------------------------------------

class WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue) */ {
 public:
  WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue();
  virtual ~WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue();

  WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue(const WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue& from);

  inline WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue& operator=(const WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue(WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue&& from) noexcept
    : WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue() {
    *this = ::std::move(from);
  }

  inline WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue& operator=(WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue* internal_default_instance() {
    return reinterpret_cast<const WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue*>(
               &_WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue* other);
  friend void swap(WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue& a, WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue* New() const PROTOBUF_FINAL { return New(NULL); }

  WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue& from);
  void MergeFrom(const WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config Config;
  typedef WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue.State state = 19196655 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/psd-distribution/psd-value/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 19196655;
  const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State& state() const;
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State* release_state();
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State* state);

  // .openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue.Config config = 141966834 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/psd-distribution/psd-value/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 141966834;
  const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config& config() const;
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config* release_config();
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config* config);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State* state_;
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config* config_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwavelength_5frouter_2fopenconfig_5fwavelength_5frouter_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwavelength_5frouter_2fopenconfig_5fwavelength_5frouter_2eproto::InitDefaultsWavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueImpl();
};
// -------------------------------------------------------------------

class WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValueKey) */ {
 public:
  WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey();
  virtual ~WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey();

  WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey(const WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey& from);

  inline WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey& operator=(const WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey(WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey&& from) noexcept
    : WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey() {
    *this = ::std::move(from);
  }

  inline WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey& operator=(WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey* internal_default_instance() {
    return reinterpret_cast<const WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey*>(
               &_WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey* other);
  friend void swap(WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey& a, WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey* New() const PROTOBUF_FINAL { return New(NULL); }

  WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey& from);
  void MergeFrom(const WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue psd_value = 3;
  bool has_psd_value() const;
  void clear_psd_value();
  static const int kPsdValueFieldNumber = 3;
  const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue& psd_value() const;
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue* release_psd_value();
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue* mutable_psd_value();
  void set_allocated_psd_value(::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue* psd_value);

  // uint64 lower_frequency = 1 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/psd-distribution/psd-value/lower-frequency"];
  void clear_lower_frequency();
  static const int kLowerFrequencyFieldNumber = 1;
  ::google::protobuf::uint64 lower_frequency() const;
  void set_lower_frequency(::google::protobuf::uint64 value);

  // uint64 upper_frequency = 2 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/psd-distribution/psd-value/upper-frequency"];
  void clear_upper_frequency();
  static const int kUpperFrequencyFieldNumber = 2;
  ::google::protobuf::uint64 upper_frequency() const;
  void set_upper_frequency(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValueKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue* psd_value_;
  ::google::protobuf::uint64 lower_frequency_;
  ::google::protobuf::uint64 upper_frequency_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwavelength_5frouter_2fopenconfig_5fwavelength_5frouter_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwavelength_5frouter_2fopenconfig_5fwavelength_5frouter_2eproto::InitDefaultsWavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKeyImpl();
};
// -------------------------------------------------------------------

class WavelengthRouter_MediaChannels_Channel_PsdDistribution : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution) */ {
 public:
  WavelengthRouter_MediaChannels_Channel_PsdDistribution();
  virtual ~WavelengthRouter_MediaChannels_Channel_PsdDistribution();

  WavelengthRouter_MediaChannels_Channel_PsdDistribution(const WavelengthRouter_MediaChannels_Channel_PsdDistribution& from);

  inline WavelengthRouter_MediaChannels_Channel_PsdDistribution& operator=(const WavelengthRouter_MediaChannels_Channel_PsdDistribution& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WavelengthRouter_MediaChannels_Channel_PsdDistribution(WavelengthRouter_MediaChannels_Channel_PsdDistribution&& from) noexcept
    : WavelengthRouter_MediaChannels_Channel_PsdDistribution() {
    *this = ::std::move(from);
  }

  inline WavelengthRouter_MediaChannels_Channel_PsdDistribution& operator=(WavelengthRouter_MediaChannels_Channel_PsdDistribution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WavelengthRouter_MediaChannels_Channel_PsdDistribution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WavelengthRouter_MediaChannels_Channel_PsdDistribution* internal_default_instance() {
    return reinterpret_cast<const WavelengthRouter_MediaChannels_Channel_PsdDistribution*>(
               &_WavelengthRouter_MediaChannels_Channel_PsdDistribution_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(WavelengthRouter_MediaChannels_Channel_PsdDistribution* other);
  friend void swap(WavelengthRouter_MediaChannels_Channel_PsdDistribution& a, WavelengthRouter_MediaChannels_Channel_PsdDistribution& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WavelengthRouter_MediaChannels_Channel_PsdDistribution* New() const PROTOBUF_FINAL { return New(NULL); }

  WavelengthRouter_MediaChannels_Channel_PsdDistribution* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WavelengthRouter_MediaChannels_Channel_PsdDistribution& from);
  void MergeFrom(const WavelengthRouter_MediaChannels_Channel_PsdDistribution& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WavelengthRouter_MediaChannels_Channel_PsdDistribution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue PsdValue;
  typedef WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey PsdValueKey;

  // accessors -------------------------------------------------------

  // repeated .openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValueKey psd_value = 350841533 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/psd-distribution/psd-value"];
  int psd_value_size() const;
  void clear_psd_value();
  static const int kPsdValueFieldNumber = 350841533;
  const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey& psd_value(int index) const;
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey* mutable_psd_value(int index);
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey* add_psd_value();
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey >*
      mutable_psd_value();
  const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey >&
      psd_value() const;

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey > psd_value_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwavelength_5frouter_2fopenconfig_5fwavelength_5frouter_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwavelength_5frouter_2fopenconfig_5fwavelength_5frouter_2eproto::InitDefaultsWavelengthRouter_MediaChannels_Channel_PsdDistributionImpl();
};
// -------------------------------------------------------------------

class WavelengthRouter_MediaChannels_Channel_Source_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Source.Config) */ {
 public:
  WavelengthRouter_MediaChannels_Channel_Source_Config();
  virtual ~WavelengthRouter_MediaChannels_Channel_Source_Config();

  WavelengthRouter_MediaChannels_Channel_Source_Config(const WavelengthRouter_MediaChannels_Channel_Source_Config& from);

  inline WavelengthRouter_MediaChannels_Channel_Source_Config& operator=(const WavelengthRouter_MediaChannels_Channel_Source_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WavelengthRouter_MediaChannels_Channel_Source_Config(WavelengthRouter_MediaChannels_Channel_Source_Config&& from) noexcept
    : WavelengthRouter_MediaChannels_Channel_Source_Config() {
    *this = ::std::move(from);
  }

  inline WavelengthRouter_MediaChannels_Channel_Source_Config& operator=(WavelengthRouter_MediaChannels_Channel_Source_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WavelengthRouter_MediaChannels_Channel_Source_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WavelengthRouter_MediaChannels_Channel_Source_Config* internal_default_instance() {
    return reinterpret_cast<const WavelengthRouter_MediaChannels_Channel_Source_Config*>(
               &_WavelengthRouter_MediaChannels_Channel_Source_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(WavelengthRouter_MediaChannels_Channel_Source_Config* other);
  friend void swap(WavelengthRouter_MediaChannels_Channel_Source_Config& a, WavelengthRouter_MediaChannels_Channel_Source_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WavelengthRouter_MediaChannels_Channel_Source_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  WavelengthRouter_MediaChannels_Channel_Source_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WavelengthRouter_MediaChannels_Channel_Source_Config& from);
  void MergeFrom(const WavelengthRouter_MediaChannels_Channel_Source_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WavelengthRouter_MediaChannels_Channel_Source_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue port_name = 362853209 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/source/config/port-name"];
  bool has_port_name() const;
  void clear_port_name();
  static const int kPortNameFieldNumber = 362853209;
  const ::ywrapper::StringValue& port_name() const;
  ::ywrapper::StringValue* release_port_name();
  ::ywrapper::StringValue* mutable_port_name();
  void set_allocated_port_name(::ywrapper::StringValue* port_name);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Source.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* port_name_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwavelength_5frouter_2fopenconfig_5fwavelength_5frouter_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwavelength_5frouter_2fopenconfig_5fwavelength_5frouter_2eproto::InitDefaultsWavelengthRouter_MediaChannels_Channel_Source_ConfigImpl();
};
// -------------------------------------------------------------------

class WavelengthRouter_MediaChannels_Channel_Source_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Source.State) */ {
 public:
  WavelengthRouter_MediaChannels_Channel_Source_State();
  virtual ~WavelengthRouter_MediaChannels_Channel_Source_State();

  WavelengthRouter_MediaChannels_Channel_Source_State(const WavelengthRouter_MediaChannels_Channel_Source_State& from);

  inline WavelengthRouter_MediaChannels_Channel_Source_State& operator=(const WavelengthRouter_MediaChannels_Channel_Source_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WavelengthRouter_MediaChannels_Channel_Source_State(WavelengthRouter_MediaChannels_Channel_Source_State&& from) noexcept
    : WavelengthRouter_MediaChannels_Channel_Source_State() {
    *this = ::std::move(from);
  }

  inline WavelengthRouter_MediaChannels_Channel_Source_State& operator=(WavelengthRouter_MediaChannels_Channel_Source_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WavelengthRouter_MediaChannels_Channel_Source_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WavelengthRouter_MediaChannels_Channel_Source_State* internal_default_instance() {
    return reinterpret_cast<const WavelengthRouter_MediaChannels_Channel_Source_State*>(
               &_WavelengthRouter_MediaChannels_Channel_Source_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(WavelengthRouter_MediaChannels_Channel_Source_State* other);
  friend void swap(WavelengthRouter_MediaChannels_Channel_Source_State& a, WavelengthRouter_MediaChannels_Channel_Source_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WavelengthRouter_MediaChannels_Channel_Source_State* New() const PROTOBUF_FINAL { return New(NULL); }

  WavelengthRouter_MediaChannels_Channel_Source_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WavelengthRouter_MediaChannels_Channel_Source_State& from);
  void MergeFrom(const WavelengthRouter_MediaChannels_Channel_Source_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WavelengthRouter_MediaChannels_Channel_Source_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue port_name = 9862154 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/source/state/port-name"];
  bool has_port_name() const;
  void clear_port_name();
  static const int kPortNameFieldNumber = 9862154;
  const ::ywrapper::StringValue& port_name() const;
  ::ywrapper::StringValue* release_port_name();
  ::ywrapper::StringValue* mutable_port_name();
  void set_allocated_port_name(::ywrapper::StringValue* port_name);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Source.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* port_name_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwavelength_5frouter_2fopenconfig_5fwavelength_5frouter_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwavelength_5frouter_2fopenconfig_5fwavelength_5frouter_2eproto::InitDefaultsWavelengthRouter_MediaChannels_Channel_Source_StateImpl();
};
// -------------------------------------------------------------------

class WavelengthRouter_MediaChannels_Channel_Source : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Source) */ {
 public:
  WavelengthRouter_MediaChannels_Channel_Source();
  virtual ~WavelengthRouter_MediaChannels_Channel_Source();

  WavelengthRouter_MediaChannels_Channel_Source(const WavelengthRouter_MediaChannels_Channel_Source& from);

  inline WavelengthRouter_MediaChannels_Channel_Source& operator=(const WavelengthRouter_MediaChannels_Channel_Source& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WavelengthRouter_MediaChannels_Channel_Source(WavelengthRouter_MediaChannels_Channel_Source&& from) noexcept
    : WavelengthRouter_MediaChannels_Channel_Source() {
    *this = ::std::move(from);
  }

  inline WavelengthRouter_MediaChannels_Channel_Source& operator=(WavelengthRouter_MediaChannels_Channel_Source&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WavelengthRouter_MediaChannels_Channel_Source& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WavelengthRouter_MediaChannels_Channel_Source* internal_default_instance() {
    return reinterpret_cast<const WavelengthRouter_MediaChannels_Channel_Source*>(
               &_WavelengthRouter_MediaChannels_Channel_Source_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(WavelengthRouter_MediaChannels_Channel_Source* other);
  friend void swap(WavelengthRouter_MediaChannels_Channel_Source& a, WavelengthRouter_MediaChannels_Channel_Source& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WavelengthRouter_MediaChannels_Channel_Source* New() const PROTOBUF_FINAL { return New(NULL); }

  WavelengthRouter_MediaChannels_Channel_Source* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WavelengthRouter_MediaChannels_Channel_Source& from);
  void MergeFrom(const WavelengthRouter_MediaChannels_Channel_Source& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WavelengthRouter_MediaChannels_Channel_Source* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef WavelengthRouter_MediaChannels_Channel_Source_Config Config;
  typedef WavelengthRouter_MediaChannels_Channel_Source_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Source.State state = 176255644 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/source/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 176255644;
  const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Source_State& state() const;
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Source_State* release_state();
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Source_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Source_State* state);

  // .openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Source.Config config = 488150171 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/source/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 488150171;
  const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Source_Config& config() const;
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Source_Config* release_config();
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Source_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Source_Config* config);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Source)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Source_State* state_;
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Source_Config* config_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwavelength_5frouter_2fopenconfig_5fwavelength_5frouter_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwavelength_5frouter_2fopenconfig_5fwavelength_5frouter_2eproto::InitDefaultsWavelengthRouter_MediaChannels_Channel_SourceImpl();
};
// -------------------------------------------------------------------

class WavelengthRouter_MediaChannels_Channel_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.State) */ {
 public:
  WavelengthRouter_MediaChannels_Channel_State();
  virtual ~WavelengthRouter_MediaChannels_Channel_State();

  WavelengthRouter_MediaChannels_Channel_State(const WavelengthRouter_MediaChannels_Channel_State& from);

  inline WavelengthRouter_MediaChannels_Channel_State& operator=(const WavelengthRouter_MediaChannels_Channel_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WavelengthRouter_MediaChannels_Channel_State(WavelengthRouter_MediaChannels_Channel_State&& from) noexcept
    : WavelengthRouter_MediaChannels_Channel_State() {
    *this = ::std::move(from);
  }

  inline WavelengthRouter_MediaChannels_Channel_State& operator=(WavelengthRouter_MediaChannels_Channel_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WavelengthRouter_MediaChannels_Channel_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WavelengthRouter_MediaChannels_Channel_State* internal_default_instance() {
    return reinterpret_cast<const WavelengthRouter_MediaChannels_Channel_State*>(
               &_WavelengthRouter_MediaChannels_Channel_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(WavelengthRouter_MediaChannels_Channel_State* other);
  friend void swap(WavelengthRouter_MediaChannels_Channel_State& a, WavelengthRouter_MediaChannels_Channel_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WavelengthRouter_MediaChannels_Channel_State* New() const PROTOBUF_FINAL { return New(NULL); }

  WavelengthRouter_MediaChannels_Channel_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WavelengthRouter_MediaChannels_Channel_State& from);
  void MergeFrom(const WavelengthRouter_MediaChannels_Channel_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WavelengthRouter_MediaChannels_Channel_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef WavelengthRouter_MediaChannels_Channel_State_OperStatus OperStatus;
  static const OperStatus OPERSTATUS_UNSET =
    WavelengthRouter_MediaChannels_Channel_State_OperStatus_OPERSTATUS_UNSET;
  static const OperStatus OPERSTATUS_UP =
    WavelengthRouter_MediaChannels_Channel_State_OperStatus_OPERSTATUS_UP;
  static const OperStatus OPERSTATUS_DOWN =
    WavelengthRouter_MediaChannels_Channel_State_OperStatus_OPERSTATUS_DOWN;
  static inline bool OperStatus_IsValid(int value) {
    return WavelengthRouter_MediaChannels_Channel_State_OperStatus_IsValid(value);
  }
  static const OperStatus OperStatus_MIN =
    WavelengthRouter_MediaChannels_Channel_State_OperStatus_OperStatus_MIN;
  static const OperStatus OperStatus_MAX =
    WavelengthRouter_MediaChannels_Channel_State_OperStatus_OperStatus_MAX;
  static const int OperStatus_ARRAYSIZE =
    WavelengthRouter_MediaChannels_Channel_State_OperStatus_OperStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OperStatus_descriptor() {
    return WavelengthRouter_MediaChannels_Channel_State_OperStatus_descriptor();
  }
  static inline const ::std::string& OperStatus_Name(OperStatus value) {
    return WavelengthRouter_MediaChannels_Channel_State_OperStatus_Name(value);
  }
  static inline bool OperStatus_Parse(const ::std::string& name,
      OperStatus* value) {
    return WavelengthRouter_MediaChannels_Channel_State_OperStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue lower_frequency = 62283199 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/state/lower-frequency"];
  bool has_lower_frequency() const;
  void clear_lower_frequency();
  static const int kLowerFrequencyFieldNumber = 62283199;
  const ::ywrapper::UintValue& lower_frequency() const;
  ::ywrapper::UintValue* release_lower_frequency();
  ::ywrapper::UintValue* mutable_lower_frequency();
  void set_allocated_lower_frequency(::ywrapper::UintValue* lower_frequency);

  // .ywrapper.UintValue index = 221912741 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/state/index"];
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 221912741;
  const ::ywrapper::UintValue& index() const;
  ::ywrapper::UintValue* release_index();
  ::ywrapper::UintValue* mutable_index();
  void set_allocated_index(::ywrapper::UintValue* index);

  // .ywrapper.StringValue name = 288898326 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/state/name"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 288898326;
  const ::ywrapper::StringValue& name() const;
  ::ywrapper::StringValue* release_name();
  ::ywrapper::StringValue* mutable_name();
  void set_allocated_name(::ywrapper::StringValue* name);

  // .ywrapper.UintValue upper_frequency = 422717604 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/state/upper-frequency"];
  bool has_upper_frequency() const;
  void clear_upper_frequency();
  static const int kUpperFrequencyFieldNumber = 422717604;
  const ::ywrapper::UintValue& upper_frequency() const;
  ::ywrapper::UintValue* release_upper_frequency();
  ::ywrapper::UintValue* mutable_upper_frequency();
  void set_allocated_upper_frequency(::ywrapper::UintValue* upper_frequency);

  // .openconfig.enums.OpenconfigWavelengthRouterAdminStateType admin_status = 320367411 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/state/admin-status"];
  void clear_admin_status();
  static const int kAdminStatusFieldNumber = 320367411;
  ::openconfig::enums::OpenconfigWavelengthRouterAdminStateType admin_status() const;
  void set_admin_status(::openconfig::enums::OpenconfigWavelengthRouterAdminStateType value);

  // .openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.State.OperStatus oper_status = 526805130 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/state/oper-status"];
  void clear_oper_status();
  static const int kOperStatusFieldNumber = 526805130;
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_State_OperStatus oper_status() const;
  void set_oper_status(::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_State_OperStatus value);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* lower_frequency_;
  ::ywrapper::UintValue* index_;
  ::ywrapper::StringValue* name_;
  ::ywrapper::UintValue* upper_frequency_;
  int admin_status_;
  int oper_status_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwavelength_5frouter_2fopenconfig_5fwavelength_5frouter_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwavelength_5frouter_2fopenconfig_5fwavelength_5frouter_2eproto::InitDefaultsWavelengthRouter_MediaChannels_Channel_StateImpl();
};
// -------------------------------------------------------------------

class WavelengthRouter_MediaChannels_Channel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel) */ {
 public:
  WavelengthRouter_MediaChannels_Channel();
  virtual ~WavelengthRouter_MediaChannels_Channel();

  WavelengthRouter_MediaChannels_Channel(const WavelengthRouter_MediaChannels_Channel& from);

  inline WavelengthRouter_MediaChannels_Channel& operator=(const WavelengthRouter_MediaChannels_Channel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WavelengthRouter_MediaChannels_Channel(WavelengthRouter_MediaChannels_Channel&& from) noexcept
    : WavelengthRouter_MediaChannels_Channel() {
    *this = ::std::move(from);
  }

  inline WavelengthRouter_MediaChannels_Channel& operator=(WavelengthRouter_MediaChannels_Channel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WavelengthRouter_MediaChannels_Channel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WavelengthRouter_MediaChannels_Channel* internal_default_instance() {
    return reinterpret_cast<const WavelengthRouter_MediaChannels_Channel*>(
               &_WavelengthRouter_MediaChannels_Channel_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(WavelengthRouter_MediaChannels_Channel* other);
  friend void swap(WavelengthRouter_MediaChannels_Channel& a, WavelengthRouter_MediaChannels_Channel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WavelengthRouter_MediaChannels_Channel* New() const PROTOBUF_FINAL { return New(NULL); }

  WavelengthRouter_MediaChannels_Channel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WavelengthRouter_MediaChannels_Channel& from);
  void MergeFrom(const WavelengthRouter_MediaChannels_Channel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WavelengthRouter_MediaChannels_Channel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef WavelengthRouter_MediaChannels_Channel_Config Config;
  typedef WavelengthRouter_MediaChannels_Channel_Dest Dest;
  typedef WavelengthRouter_MediaChannels_Channel_PsdDistribution PsdDistribution;
  typedef WavelengthRouter_MediaChannels_Channel_Source Source;
  typedef WavelengthRouter_MediaChannels_Channel_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution psd_distribution = 48462813 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/psd-distribution"];
  bool has_psd_distribution() const;
  void clear_psd_distribution();
  static const int kPsdDistributionFieldNumber = 48462813;
  const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution& psd_distribution() const;
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution* release_psd_distribution();
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution* mutable_psd_distribution();
  void set_allocated_psd_distribution(::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution* psd_distribution);

  // .openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Dest dest = 145566309 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/dest"];
  bool has_dest() const;
  void clear_dest();
  static const int kDestFieldNumber = 145566309;
  const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Dest& dest() const;
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Dest* release_dest();
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Dest* mutable_dest();
  void set_allocated_dest(::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Dest* dest);

  // .openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Source source = 246551242 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/source"];
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 246551242;
  const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Source& source() const;
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Source* release_source();
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Source* mutable_source();
  void set_allocated_source(::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Source* source);

  // .openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Config config = 409882003 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 409882003;
  const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Config& config() const;
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Config* release_config();
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Config* config);

  // .openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.State state = 427502708 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 427502708;
  const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_State& state() const;
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_State* release_state();
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_State* state);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution* psd_distribution_;
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Dest* dest_;
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Source* source_;
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Config* config_;
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_State* state_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwavelength_5frouter_2fopenconfig_5fwavelength_5frouter_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwavelength_5frouter_2fopenconfig_5fwavelength_5frouter_2eproto::InitDefaultsWavelengthRouter_MediaChannels_ChannelImpl();
};
// -------------------------------------------------------------------

class WavelengthRouter_MediaChannels_ChannelKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.ChannelKey) */ {
 public:
  WavelengthRouter_MediaChannels_ChannelKey();
  virtual ~WavelengthRouter_MediaChannels_ChannelKey();

  WavelengthRouter_MediaChannels_ChannelKey(const WavelengthRouter_MediaChannels_ChannelKey& from);

  inline WavelengthRouter_MediaChannels_ChannelKey& operator=(const WavelengthRouter_MediaChannels_ChannelKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WavelengthRouter_MediaChannels_ChannelKey(WavelengthRouter_MediaChannels_ChannelKey&& from) noexcept
    : WavelengthRouter_MediaChannels_ChannelKey() {
    *this = ::std::move(from);
  }

  inline WavelengthRouter_MediaChannels_ChannelKey& operator=(WavelengthRouter_MediaChannels_ChannelKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WavelengthRouter_MediaChannels_ChannelKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WavelengthRouter_MediaChannels_ChannelKey* internal_default_instance() {
    return reinterpret_cast<const WavelengthRouter_MediaChannels_ChannelKey*>(
               &_WavelengthRouter_MediaChannels_ChannelKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(WavelengthRouter_MediaChannels_ChannelKey* other);
  friend void swap(WavelengthRouter_MediaChannels_ChannelKey& a, WavelengthRouter_MediaChannels_ChannelKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WavelengthRouter_MediaChannels_ChannelKey* New() const PROTOBUF_FINAL { return New(NULL); }

  WavelengthRouter_MediaChannels_ChannelKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WavelengthRouter_MediaChannels_ChannelKey& from);
  void MergeFrom(const WavelengthRouter_MediaChannels_ChannelKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WavelengthRouter_MediaChannels_ChannelKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel channel = 2;
  bool has_channel() const;
  void clear_channel();
  static const int kChannelFieldNumber = 2;
  const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel& channel() const;
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel* release_channel();
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel* mutable_channel();
  void set_allocated_channel(::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel* channel);

  // uint64 index = 1 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/index"];
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::uint64 index() const;
  void set_index(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.ChannelKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel* channel_;
  ::google::protobuf::uint64 index_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwavelength_5frouter_2fopenconfig_5fwavelength_5frouter_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwavelength_5frouter_2fopenconfig_5fwavelength_5frouter_2eproto::InitDefaultsWavelengthRouter_MediaChannels_ChannelKeyImpl();
};
// -------------------------------------------------------------------

class WavelengthRouter_MediaChannels : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels) */ {
 public:
  WavelengthRouter_MediaChannels();
  virtual ~WavelengthRouter_MediaChannels();

  WavelengthRouter_MediaChannels(const WavelengthRouter_MediaChannels& from);

  inline WavelengthRouter_MediaChannels& operator=(const WavelengthRouter_MediaChannels& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WavelengthRouter_MediaChannels(WavelengthRouter_MediaChannels&& from) noexcept
    : WavelengthRouter_MediaChannels() {
    *this = ::std::move(from);
  }

  inline WavelengthRouter_MediaChannels& operator=(WavelengthRouter_MediaChannels&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WavelengthRouter_MediaChannels& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WavelengthRouter_MediaChannels* internal_default_instance() {
    return reinterpret_cast<const WavelengthRouter_MediaChannels*>(
               &_WavelengthRouter_MediaChannels_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(WavelengthRouter_MediaChannels* other);
  friend void swap(WavelengthRouter_MediaChannels& a, WavelengthRouter_MediaChannels& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WavelengthRouter_MediaChannels* New() const PROTOBUF_FINAL { return New(NULL); }

  WavelengthRouter_MediaChannels* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WavelengthRouter_MediaChannels& from);
  void MergeFrom(const WavelengthRouter_MediaChannels& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WavelengthRouter_MediaChannels* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef WavelengthRouter_MediaChannels_Channel Channel;
  typedef WavelengthRouter_MediaChannels_ChannelKey ChannelKey;

  // accessors -------------------------------------------------------

  // repeated .openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.ChannelKey channel = 536840146 [(.yext.schemapath) = "/wavelength-router/media-channels/channel"];
  int channel_size() const;
  void clear_channel();
  static const int kChannelFieldNumber = 536840146;
  const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_ChannelKey& channel(int index) const;
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_ChannelKey* mutable_channel(int index);
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_ChannelKey* add_channel();
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_ChannelKey >*
      mutable_channel();
  const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_ChannelKey >&
      channel() const;

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_ChannelKey > channel_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwavelength_5frouter_2fopenconfig_5fwavelength_5frouter_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwavelength_5frouter_2fopenconfig_5fwavelength_5frouter_2eproto::InitDefaultsWavelengthRouter_MediaChannelsImpl();
};
// -------------------------------------------------------------------

class WavelengthRouter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wavelength_router.WavelengthRouter) */ {
 public:
  WavelengthRouter();
  virtual ~WavelengthRouter();

  WavelengthRouter(const WavelengthRouter& from);

  inline WavelengthRouter& operator=(const WavelengthRouter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WavelengthRouter(WavelengthRouter&& from) noexcept
    : WavelengthRouter() {
    *this = ::std::move(from);
  }

  inline WavelengthRouter& operator=(WavelengthRouter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WavelengthRouter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WavelengthRouter* internal_default_instance() {
    return reinterpret_cast<const WavelengthRouter*>(
               &_WavelengthRouter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(WavelengthRouter* other);
  friend void swap(WavelengthRouter& a, WavelengthRouter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WavelengthRouter* New() const PROTOBUF_FINAL { return New(NULL); }

  WavelengthRouter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WavelengthRouter& from);
  void MergeFrom(const WavelengthRouter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WavelengthRouter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef WavelengthRouter_MediaChannels MediaChannels;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels media_channels = 127507142 [(.yext.schemapath) = "/wavelength-router/media-channels"];
  bool has_media_channels() const;
  void clear_media_channels();
  static const int kMediaChannelsFieldNumber = 127507142;
  const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels& media_channels() const;
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels* release_media_channels();
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels* mutable_media_channels();
  void set_allocated_media_channels(::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels* media_channels);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wavelength_router.WavelengthRouter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels* media_channels_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwavelength_5frouter_2fopenconfig_5fwavelength_5frouter_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwavelength_5frouter_2fopenconfig_5fwavelength_5frouter_2eproto::InitDefaultsWavelengthRouterImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WavelengthRouter_MediaChannels_Channel_Config

// .openconfig.enums.OpenconfigWavelengthRouterAdminStateType admin_status = 148137994 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/config/admin-status"];
inline void WavelengthRouter_MediaChannels_Channel_Config::clear_admin_status() {
  admin_status_ = 0;
}
inline ::openconfig::enums::OpenconfigWavelengthRouterAdminStateType WavelengthRouter_MediaChannels_Channel_Config::admin_status() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Config.admin_status)
  return static_cast< ::openconfig::enums::OpenconfigWavelengthRouterAdminStateType >(admin_status_);
}
inline void WavelengthRouter_MediaChannels_Channel_Config::set_admin_status(::openconfig::enums::OpenconfigWavelengthRouterAdminStateType value) {
  
  admin_status_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Config.admin_status)
}

// .ywrapper.UintValue index = 301463906 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/config/index"];
inline bool WavelengthRouter_MediaChannels_Channel_Config::has_index() const {
  return this != internal_default_instance() && index_ != NULL;
}
inline const ::ywrapper::UintValue& WavelengthRouter_MediaChannels_Channel_Config::index() const {
  const ::ywrapper::UintValue* p = index_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Config.index)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* WavelengthRouter_MediaChannels_Channel_Config::release_index() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Config.index)
  
  ::ywrapper::UintValue* temp = index_;
  index_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* WavelengthRouter_MediaChannels_Channel_Config::mutable_index() {
  
  if (index_ == NULL) {
    index_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Config.index)
  return index_;
}
inline void WavelengthRouter_MediaChannels_Channel_Config::set_allocated_index(::ywrapper::UintValue* index) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(index_);
  }
  if (index) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      index = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, index, submessage_arena);
    }
    
  } else {
    
  }
  index_ = index;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Config.index)
}

// .ywrapper.UintValue lower_frequency = 534173960 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/config/lower-frequency"];
inline bool WavelengthRouter_MediaChannels_Channel_Config::has_lower_frequency() const {
  return this != internal_default_instance() && lower_frequency_ != NULL;
}
inline const ::ywrapper::UintValue& WavelengthRouter_MediaChannels_Channel_Config::lower_frequency() const {
  const ::ywrapper::UintValue* p = lower_frequency_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Config.lower_frequency)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* WavelengthRouter_MediaChannels_Channel_Config::release_lower_frequency() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Config.lower_frequency)
  
  ::ywrapper::UintValue* temp = lower_frequency_;
  lower_frequency_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* WavelengthRouter_MediaChannels_Channel_Config::mutable_lower_frequency() {
  
  if (lower_frequency_ == NULL) {
    lower_frequency_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Config.lower_frequency)
  return lower_frequency_;
}
inline void WavelengthRouter_MediaChannels_Channel_Config::set_allocated_lower_frequency(::ywrapper::UintValue* lower_frequency) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lower_frequency_);
  }
  if (lower_frequency) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lower_frequency = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lower_frequency, submessage_arena);
    }
    
  } else {
    
  }
  lower_frequency_ = lower_frequency;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Config.lower_frequency)
}

// .ywrapper.StringValue name = 351086787 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/config/name"];
inline bool WavelengthRouter_MediaChannels_Channel_Config::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::ywrapper::StringValue& WavelengthRouter_MediaChannels_Channel_Config::name() const {
  const ::ywrapper::StringValue* p = name_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Config.name)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* WavelengthRouter_MediaChannels_Channel_Config::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Config.name)
  
  ::ywrapper::StringValue* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* WavelengthRouter_MediaChannels_Channel_Config::mutable_name() {
  
  if (name_ == NULL) {
    name_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Config.name)
  return name_;
}
inline void WavelengthRouter_MediaChannels_Channel_Config::set_allocated_name(::ywrapper::StringValue* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Config.name)
}

// .ywrapper.UintValue upper_frequency = 431960071 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/config/upper-frequency"];
inline bool WavelengthRouter_MediaChannels_Channel_Config::has_upper_frequency() const {
  return this != internal_default_instance() && upper_frequency_ != NULL;
}
inline const ::ywrapper::UintValue& WavelengthRouter_MediaChannels_Channel_Config::upper_frequency() const {
  const ::ywrapper::UintValue* p = upper_frequency_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Config.upper_frequency)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* WavelengthRouter_MediaChannels_Channel_Config::release_upper_frequency() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Config.upper_frequency)
  
  ::ywrapper::UintValue* temp = upper_frequency_;
  upper_frequency_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* WavelengthRouter_MediaChannels_Channel_Config::mutable_upper_frequency() {
  
  if (upper_frequency_ == NULL) {
    upper_frequency_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Config.upper_frequency)
  return upper_frequency_;
}
inline void WavelengthRouter_MediaChannels_Channel_Config::set_allocated_upper_frequency(::ywrapper::UintValue* upper_frequency) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(upper_frequency_);
  }
  if (upper_frequency) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      upper_frequency = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, upper_frequency, submessage_arena);
    }
    
  } else {
    
  }
  upper_frequency_ = upper_frequency;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Config.upper_frequency)
}

// -------------------------------------------------------------------

// WavelengthRouter_MediaChannels_Channel_Dest_Config

// .ywrapper.StringValue port_name = 24904376 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/dest/config/port-name"];
inline bool WavelengthRouter_MediaChannels_Channel_Dest_Config::has_port_name() const {
  return this != internal_default_instance() && port_name_ != NULL;
}
inline const ::ywrapper::StringValue& WavelengthRouter_MediaChannels_Channel_Dest_Config::port_name() const {
  const ::ywrapper::StringValue* p = port_name_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Dest.Config.port_name)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* WavelengthRouter_MediaChannels_Channel_Dest_Config::release_port_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Dest.Config.port_name)
  
  ::ywrapper::StringValue* temp = port_name_;
  port_name_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* WavelengthRouter_MediaChannels_Channel_Dest_Config::mutable_port_name() {
  
  if (port_name_ == NULL) {
    port_name_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Dest.Config.port_name)
  return port_name_;
}
inline void WavelengthRouter_MediaChannels_Channel_Dest_Config::set_allocated_port_name(::ywrapper::StringValue* port_name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(port_name_);
  }
  if (port_name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      port_name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, port_name, submessage_arena);
    }
    
  } else {
    
  }
  port_name_ = port_name;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Dest.Config.port_name)
}

// -------------------------------------------------------------------

// WavelengthRouter_MediaChannels_Channel_Dest_State

// .ywrapper.StringValue port_name = 353653293 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/dest/state/port-name"];
inline bool WavelengthRouter_MediaChannels_Channel_Dest_State::has_port_name() const {
  return this != internal_default_instance() && port_name_ != NULL;
}
inline const ::ywrapper::StringValue& WavelengthRouter_MediaChannels_Channel_Dest_State::port_name() const {
  const ::ywrapper::StringValue* p = port_name_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Dest.State.port_name)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* WavelengthRouter_MediaChannels_Channel_Dest_State::release_port_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Dest.State.port_name)
  
  ::ywrapper::StringValue* temp = port_name_;
  port_name_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* WavelengthRouter_MediaChannels_Channel_Dest_State::mutable_port_name() {
  
  if (port_name_ == NULL) {
    port_name_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Dest.State.port_name)
  return port_name_;
}
inline void WavelengthRouter_MediaChannels_Channel_Dest_State::set_allocated_port_name(::ywrapper::StringValue* port_name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(port_name_);
  }
  if (port_name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      port_name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, port_name, submessage_arena);
    }
    
  } else {
    
  }
  port_name_ = port_name;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Dest.State.port_name)
}

// -------------------------------------------------------------------

// WavelengthRouter_MediaChannels_Channel_Dest

// .openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Dest.Config config = 290197290 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/dest/config"];
inline bool WavelengthRouter_MediaChannels_Channel_Dest::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void WavelengthRouter_MediaChannels_Channel_Dest::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Dest_Config& WavelengthRouter_MediaChannels_Channel_Dest::config() const {
  const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Dest_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Dest.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Dest_Config*>(
      &::openconfig::openconfig_wavelength_router::_WavelengthRouter_MediaChannels_Channel_Dest_Config_default_instance_);
}
inline ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Dest_Config* WavelengthRouter_MediaChannels_Channel_Dest::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Dest.config)
  
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Dest_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Dest_Config* WavelengthRouter_MediaChannels_Channel_Dest::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Dest_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Dest.config)
  return config_;
}
inline void WavelengthRouter_MediaChannels_Channel_Dest::set_allocated_config(::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Dest_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Dest.config)
}

// .openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Dest.State state = 10749255 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/dest/state"];
inline bool WavelengthRouter_MediaChannels_Channel_Dest::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void WavelengthRouter_MediaChannels_Channel_Dest::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Dest_State& WavelengthRouter_MediaChannels_Channel_Dest::state() const {
  const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Dest_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Dest.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Dest_State*>(
      &::openconfig::openconfig_wavelength_router::_WavelengthRouter_MediaChannels_Channel_Dest_State_default_instance_);
}
inline ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Dest_State* WavelengthRouter_MediaChannels_Channel_Dest::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Dest.state)
  
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Dest_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Dest_State* WavelengthRouter_MediaChannels_Channel_Dest::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Dest_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Dest.state)
  return state_;
}
inline void WavelengthRouter_MediaChannels_Channel_Dest::set_allocated_state(::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Dest_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Dest.state)
}

// -------------------------------------------------------------------

// WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config

// .ywrapper.UintValue lower_frequency = 104941357 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/psd-distribution/psd-value/config/lower-frequency"];
inline bool WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config::has_lower_frequency() const {
  return this != internal_default_instance() && lower_frequency_ != NULL;
}
inline const ::ywrapper::UintValue& WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config::lower_frequency() const {
  const ::ywrapper::UintValue* p = lower_frequency_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue.Config.lower_frequency)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config::release_lower_frequency() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue.Config.lower_frequency)
  
  ::ywrapper::UintValue* temp = lower_frequency_;
  lower_frequency_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config::mutable_lower_frequency() {
  
  if (lower_frequency_ == NULL) {
    lower_frequency_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue.Config.lower_frequency)
  return lower_frequency_;
}
inline void WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config::set_allocated_lower_frequency(::ywrapper::UintValue* lower_frequency) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lower_frequency_);
  }
  if (lower_frequency) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lower_frequency = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lower_frequency, submessage_arena);
    }
    
  } else {
    
  }
  lower_frequency_ = lower_frequency;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue.Config.lower_frequency)
}

// .ywrapper.BytesValue psd = 5500354 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/psd-distribution/psd-value/config/psd"];
inline bool WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config::has_psd() const {
  return this != internal_default_instance() && psd_ != NULL;
}
inline const ::ywrapper::BytesValue& WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config::psd() const {
  const ::ywrapper::BytesValue* p = psd_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue.Config.psd)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BytesValue*>(
      &::ywrapper::_BytesValue_default_instance_);
}
inline ::ywrapper::BytesValue* WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config::release_psd() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue.Config.psd)
  
  ::ywrapper::BytesValue* temp = psd_;
  psd_ = NULL;
  return temp;
}
inline ::ywrapper::BytesValue* WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config::mutable_psd() {
  
  if (psd_ == NULL) {
    psd_ = new ::ywrapper::BytesValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue.Config.psd)
  return psd_;
}
inline void WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config::set_allocated_psd(::ywrapper::BytesValue* psd) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(psd_);
  }
  if (psd) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      psd = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, psd, submessage_arena);
    }
    
  } else {
    
  }
  psd_ = psd;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue.Config.psd)
}

// .ywrapper.UintValue upper_frequency = 494951658 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/psd-distribution/psd-value/config/upper-frequency"];
inline bool WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config::has_upper_frequency() const {
  return this != internal_default_instance() && upper_frequency_ != NULL;
}
inline const ::ywrapper::UintValue& WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config::upper_frequency() const {
  const ::ywrapper::UintValue* p = upper_frequency_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue.Config.upper_frequency)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config::release_upper_frequency() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue.Config.upper_frequency)
  
  ::ywrapper::UintValue* temp = upper_frequency_;
  upper_frequency_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config::mutable_upper_frequency() {
  
  if (upper_frequency_ == NULL) {
    upper_frequency_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue.Config.upper_frequency)
  return upper_frequency_;
}
inline void WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config::set_allocated_upper_frequency(::ywrapper::UintValue* upper_frequency) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(upper_frequency_);
  }
  if (upper_frequency) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      upper_frequency = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, upper_frequency, submessage_arena);
    }
    
  } else {
    
  }
  upper_frequency_ = upper_frequency;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue.Config.upper_frequency)
}

// -------------------------------------------------------------------

// WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State

// .ywrapper.UintValue lower_frequency = 156152700 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/psd-distribution/psd-value/state/lower-frequency"];
inline bool WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State::has_lower_frequency() const {
  return this != internal_default_instance() && lower_frequency_ != NULL;
}
inline const ::ywrapper::UintValue& WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State::lower_frequency() const {
  const ::ywrapper::UintValue* p = lower_frequency_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue.State.lower_frequency)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State::release_lower_frequency() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue.State.lower_frequency)
  
  ::ywrapper::UintValue* temp = lower_frequency_;
  lower_frequency_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State::mutable_lower_frequency() {
  
  if (lower_frequency_ == NULL) {
    lower_frequency_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue.State.lower_frequency)
  return lower_frequency_;
}
inline void WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State::set_allocated_lower_frequency(::ywrapper::UintValue* lower_frequency) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lower_frequency_);
  }
  if (lower_frequency) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lower_frequency = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lower_frequency, submessage_arena);
    }
    
  } else {
    
  }
  lower_frequency_ = lower_frequency;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue.State.lower_frequency)
}

// .ywrapper.BytesValue psd = 404818967 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/psd-distribution/psd-value/state/psd"];
inline bool WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State::has_psd() const {
  return this != internal_default_instance() && psd_ != NULL;
}
inline const ::ywrapper::BytesValue& WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State::psd() const {
  const ::ywrapper::BytesValue* p = psd_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue.State.psd)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BytesValue*>(
      &::ywrapper::_BytesValue_default_instance_);
}
inline ::ywrapper::BytesValue* WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State::release_psd() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue.State.psd)
  
  ::ywrapper::BytesValue* temp = psd_;
  psd_ = NULL;
  return temp;
}
inline ::ywrapper::BytesValue* WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State::mutable_psd() {
  
  if (psd_ == NULL) {
    psd_ = new ::ywrapper::BytesValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue.State.psd)
  return psd_;
}
inline void WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State::set_allocated_psd(::ywrapper::BytesValue* psd) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(psd_);
  }
  if (psd) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      psd = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, psd, submessage_arena);
    }
    
  } else {
    
  }
  psd_ = psd;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue.State.psd)
}

// .ywrapper.UintValue upper_frequency = 329030827 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/psd-distribution/psd-value/state/upper-frequency"];
inline bool WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State::has_upper_frequency() const {
  return this != internal_default_instance() && upper_frequency_ != NULL;
}
inline const ::ywrapper::UintValue& WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State::upper_frequency() const {
  const ::ywrapper::UintValue* p = upper_frequency_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue.State.upper_frequency)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State::release_upper_frequency() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue.State.upper_frequency)
  
  ::ywrapper::UintValue* temp = upper_frequency_;
  upper_frequency_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State::mutable_upper_frequency() {
  
  if (upper_frequency_ == NULL) {
    upper_frequency_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue.State.upper_frequency)
  return upper_frequency_;
}
inline void WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State::set_allocated_upper_frequency(::ywrapper::UintValue* upper_frequency) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(upper_frequency_);
  }
  if (upper_frequency) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      upper_frequency = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, upper_frequency, submessage_arena);
    }
    
  } else {
    
  }
  upper_frequency_ = upper_frequency;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue.State.upper_frequency)
}

// -------------------------------------------------------------------

// WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue

// .openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue.Config config = 141966834 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/psd-distribution/psd-value/config"];
inline bool WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config& WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue::config() const {
  const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config*>(
      &::openconfig::openconfig_wavelength_router::_WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config_default_instance_);
}
inline ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config* WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue.config)
  
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config* WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue.config)
  return config_;
}
inline void WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue::set_allocated_config(::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue.config)
}

// .openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue.State state = 19196655 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/psd-distribution/psd-value/state"];
inline bool WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State& WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue::state() const {
  const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State*>(
      &::openconfig::openconfig_wavelength_router::_WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State_default_instance_);
}
inline ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State* WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue.state)
  
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State* WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue.state)
  return state_;
}
inline void WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue::set_allocated_state(::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue.state)
}

// -------------------------------------------------------------------

// WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey

// uint64 lower_frequency = 1 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/psd-distribution/psd-value/lower-frequency"];
inline void WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey::clear_lower_frequency() {
  lower_frequency_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey::lower_frequency() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValueKey.lower_frequency)
  return lower_frequency_;
}
inline void WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey::set_lower_frequency(::google::protobuf::uint64 value) {
  
  lower_frequency_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValueKey.lower_frequency)
}

// uint64 upper_frequency = 2 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/psd-distribution/psd-value/upper-frequency"];
inline void WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey::clear_upper_frequency() {
  upper_frequency_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey::upper_frequency() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValueKey.upper_frequency)
  return upper_frequency_;
}
inline void WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey::set_upper_frequency(::google::protobuf::uint64 value) {
  
  upper_frequency_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValueKey.upper_frequency)
}

// .openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValue psd_value = 3;
inline bool WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey::has_psd_value() const {
  return this != internal_default_instance() && psd_value_ != NULL;
}
inline void WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey::clear_psd_value() {
  if (GetArenaNoVirtual() == NULL && psd_value_ != NULL) {
    delete psd_value_;
  }
  psd_value_ = NULL;
}
inline const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue& WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey::psd_value() const {
  const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue* p = psd_value_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValueKey.psd_value)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue*>(
      &::openconfig::openconfig_wavelength_router::_WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue_default_instance_);
}
inline ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue* WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey::release_psd_value() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValueKey.psd_value)
  
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue* temp = psd_value_;
  psd_value_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue* WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey::mutable_psd_value() {
  
  if (psd_value_ == NULL) {
    psd_value_ = new ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValueKey.psd_value)
  return psd_value_;
}
inline void WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey::set_allocated_psd_value(::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValue* psd_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete psd_value_;
  }
  if (psd_value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      psd_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, psd_value, submessage_arena);
    }
    
  } else {
    
  }
  psd_value_ = psd_value;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValueKey.psd_value)
}

// -------------------------------------------------------------------

// WavelengthRouter_MediaChannels_Channel_PsdDistribution

// repeated .openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.PsdValueKey psd_value = 350841533 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/psd-distribution/psd-value"];
inline int WavelengthRouter_MediaChannels_Channel_PsdDistribution::psd_value_size() const {
  return psd_value_.size();
}
inline void WavelengthRouter_MediaChannels_Channel_PsdDistribution::clear_psd_value() {
  psd_value_.Clear();
}
inline const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey& WavelengthRouter_MediaChannels_Channel_PsdDistribution::psd_value(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.psd_value)
  return psd_value_.Get(index);
}
inline ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey* WavelengthRouter_MediaChannels_Channel_PsdDistribution::mutable_psd_value(int index) {
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.psd_value)
  return psd_value_.Mutable(index);
}
inline ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey* WavelengthRouter_MediaChannels_Channel_PsdDistribution::add_psd_value() {
  // @@protoc_insertion_point(field_add:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.psd_value)
  return psd_value_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey >*
WavelengthRouter_MediaChannels_Channel_PsdDistribution::mutable_psd_value() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.psd_value)
  return &psd_value_;
}
inline const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution_PsdValueKey >&
WavelengthRouter_MediaChannels_Channel_PsdDistribution::psd_value() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution.psd_value)
  return psd_value_;
}

// -------------------------------------------------------------------

// WavelengthRouter_MediaChannels_Channel_Source_Config

// .ywrapper.StringValue port_name = 362853209 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/source/config/port-name"];
inline bool WavelengthRouter_MediaChannels_Channel_Source_Config::has_port_name() const {
  return this != internal_default_instance() && port_name_ != NULL;
}
inline const ::ywrapper::StringValue& WavelengthRouter_MediaChannels_Channel_Source_Config::port_name() const {
  const ::ywrapper::StringValue* p = port_name_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Source.Config.port_name)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* WavelengthRouter_MediaChannels_Channel_Source_Config::release_port_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Source.Config.port_name)
  
  ::ywrapper::StringValue* temp = port_name_;
  port_name_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* WavelengthRouter_MediaChannels_Channel_Source_Config::mutable_port_name() {
  
  if (port_name_ == NULL) {
    port_name_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Source.Config.port_name)
  return port_name_;
}
inline void WavelengthRouter_MediaChannels_Channel_Source_Config::set_allocated_port_name(::ywrapper::StringValue* port_name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(port_name_);
  }
  if (port_name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      port_name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, port_name, submessage_arena);
    }
    
  } else {
    
  }
  port_name_ = port_name;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Source.Config.port_name)
}

// -------------------------------------------------------------------

// WavelengthRouter_MediaChannels_Channel_Source_State

// .ywrapper.StringValue port_name = 9862154 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/source/state/port-name"];
inline bool WavelengthRouter_MediaChannels_Channel_Source_State::has_port_name() const {
  return this != internal_default_instance() && port_name_ != NULL;
}
inline const ::ywrapper::StringValue& WavelengthRouter_MediaChannels_Channel_Source_State::port_name() const {
  const ::ywrapper::StringValue* p = port_name_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Source.State.port_name)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* WavelengthRouter_MediaChannels_Channel_Source_State::release_port_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Source.State.port_name)
  
  ::ywrapper::StringValue* temp = port_name_;
  port_name_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* WavelengthRouter_MediaChannels_Channel_Source_State::mutable_port_name() {
  
  if (port_name_ == NULL) {
    port_name_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Source.State.port_name)
  return port_name_;
}
inline void WavelengthRouter_MediaChannels_Channel_Source_State::set_allocated_port_name(::ywrapper::StringValue* port_name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(port_name_);
  }
  if (port_name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      port_name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, port_name, submessage_arena);
    }
    
  } else {
    
  }
  port_name_ = port_name;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Source.State.port_name)
}

// -------------------------------------------------------------------

// WavelengthRouter_MediaChannels_Channel_Source

// .openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Source.Config config = 488150171 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/source/config"];
inline bool WavelengthRouter_MediaChannels_Channel_Source::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void WavelengthRouter_MediaChannels_Channel_Source::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Source_Config& WavelengthRouter_MediaChannels_Channel_Source::config() const {
  const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Source_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Source.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Source_Config*>(
      &::openconfig::openconfig_wavelength_router::_WavelengthRouter_MediaChannels_Channel_Source_Config_default_instance_);
}
inline ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Source_Config* WavelengthRouter_MediaChannels_Channel_Source::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Source.config)
  
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Source_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Source_Config* WavelengthRouter_MediaChannels_Channel_Source::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Source_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Source.config)
  return config_;
}
inline void WavelengthRouter_MediaChannels_Channel_Source::set_allocated_config(::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Source_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Source.config)
}

// .openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Source.State state = 176255644 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/source/state"];
inline bool WavelengthRouter_MediaChannels_Channel_Source::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void WavelengthRouter_MediaChannels_Channel_Source::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Source_State& WavelengthRouter_MediaChannels_Channel_Source::state() const {
  const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Source_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Source.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Source_State*>(
      &::openconfig::openconfig_wavelength_router::_WavelengthRouter_MediaChannels_Channel_Source_State_default_instance_);
}
inline ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Source_State* WavelengthRouter_MediaChannels_Channel_Source::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Source.state)
  
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Source_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Source_State* WavelengthRouter_MediaChannels_Channel_Source::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Source_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Source.state)
  return state_;
}
inline void WavelengthRouter_MediaChannels_Channel_Source::set_allocated_state(::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Source_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Source.state)
}

// -------------------------------------------------------------------

// WavelengthRouter_MediaChannels_Channel_State

// .openconfig.enums.OpenconfigWavelengthRouterAdminStateType admin_status = 320367411 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/state/admin-status"];
inline void WavelengthRouter_MediaChannels_Channel_State::clear_admin_status() {
  admin_status_ = 0;
}
inline ::openconfig::enums::OpenconfigWavelengthRouterAdminStateType WavelengthRouter_MediaChannels_Channel_State::admin_status() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.State.admin_status)
  return static_cast< ::openconfig::enums::OpenconfigWavelengthRouterAdminStateType >(admin_status_);
}
inline void WavelengthRouter_MediaChannels_Channel_State::set_admin_status(::openconfig::enums::OpenconfigWavelengthRouterAdminStateType value) {
  
  admin_status_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.State.admin_status)
}

// .ywrapper.UintValue index = 221912741 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/state/index"];
inline bool WavelengthRouter_MediaChannels_Channel_State::has_index() const {
  return this != internal_default_instance() && index_ != NULL;
}
inline const ::ywrapper::UintValue& WavelengthRouter_MediaChannels_Channel_State::index() const {
  const ::ywrapper::UintValue* p = index_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.State.index)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* WavelengthRouter_MediaChannels_Channel_State::release_index() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.State.index)
  
  ::ywrapper::UintValue* temp = index_;
  index_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* WavelengthRouter_MediaChannels_Channel_State::mutable_index() {
  
  if (index_ == NULL) {
    index_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.State.index)
  return index_;
}
inline void WavelengthRouter_MediaChannels_Channel_State::set_allocated_index(::ywrapper::UintValue* index) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(index_);
  }
  if (index) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      index = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, index, submessage_arena);
    }
    
  } else {
    
  }
  index_ = index;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.State.index)
}

// .ywrapper.UintValue lower_frequency = 62283199 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/state/lower-frequency"];
inline bool WavelengthRouter_MediaChannels_Channel_State::has_lower_frequency() const {
  return this != internal_default_instance() && lower_frequency_ != NULL;
}
inline const ::ywrapper::UintValue& WavelengthRouter_MediaChannels_Channel_State::lower_frequency() const {
  const ::ywrapper::UintValue* p = lower_frequency_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.State.lower_frequency)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* WavelengthRouter_MediaChannels_Channel_State::release_lower_frequency() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.State.lower_frequency)
  
  ::ywrapper::UintValue* temp = lower_frequency_;
  lower_frequency_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* WavelengthRouter_MediaChannels_Channel_State::mutable_lower_frequency() {
  
  if (lower_frequency_ == NULL) {
    lower_frequency_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.State.lower_frequency)
  return lower_frequency_;
}
inline void WavelengthRouter_MediaChannels_Channel_State::set_allocated_lower_frequency(::ywrapper::UintValue* lower_frequency) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lower_frequency_);
  }
  if (lower_frequency) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lower_frequency = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lower_frequency, submessage_arena);
    }
    
  } else {
    
  }
  lower_frequency_ = lower_frequency;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.State.lower_frequency)
}

// .ywrapper.StringValue name = 288898326 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/state/name"];
inline bool WavelengthRouter_MediaChannels_Channel_State::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::ywrapper::StringValue& WavelengthRouter_MediaChannels_Channel_State::name() const {
  const ::ywrapper::StringValue* p = name_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.State.name)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* WavelengthRouter_MediaChannels_Channel_State::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.State.name)
  
  ::ywrapper::StringValue* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* WavelengthRouter_MediaChannels_Channel_State::mutable_name() {
  
  if (name_ == NULL) {
    name_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.State.name)
  return name_;
}
inline void WavelengthRouter_MediaChannels_Channel_State::set_allocated_name(::ywrapper::StringValue* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.State.name)
}

// .openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.State.OperStatus oper_status = 526805130 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/state/oper-status"];
inline void WavelengthRouter_MediaChannels_Channel_State::clear_oper_status() {
  oper_status_ = 0;
}
inline ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_State_OperStatus WavelengthRouter_MediaChannels_Channel_State::oper_status() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.State.oper_status)
  return static_cast< ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_State_OperStatus >(oper_status_);
}
inline void WavelengthRouter_MediaChannels_Channel_State::set_oper_status(::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_State_OperStatus value) {
  
  oper_status_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.State.oper_status)
}

// .ywrapper.UintValue upper_frequency = 422717604 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/state/upper-frequency"];
inline bool WavelengthRouter_MediaChannels_Channel_State::has_upper_frequency() const {
  return this != internal_default_instance() && upper_frequency_ != NULL;
}
inline const ::ywrapper::UintValue& WavelengthRouter_MediaChannels_Channel_State::upper_frequency() const {
  const ::ywrapper::UintValue* p = upper_frequency_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.State.upper_frequency)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* WavelengthRouter_MediaChannels_Channel_State::release_upper_frequency() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.State.upper_frequency)
  
  ::ywrapper::UintValue* temp = upper_frequency_;
  upper_frequency_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* WavelengthRouter_MediaChannels_Channel_State::mutable_upper_frequency() {
  
  if (upper_frequency_ == NULL) {
    upper_frequency_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.State.upper_frequency)
  return upper_frequency_;
}
inline void WavelengthRouter_MediaChannels_Channel_State::set_allocated_upper_frequency(::ywrapper::UintValue* upper_frequency) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(upper_frequency_);
  }
  if (upper_frequency) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      upper_frequency = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, upper_frequency, submessage_arena);
    }
    
  } else {
    
  }
  upper_frequency_ = upper_frequency;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.State.upper_frequency)
}

// -------------------------------------------------------------------

// WavelengthRouter_MediaChannels_Channel

// .openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Config config = 409882003 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/config"];
inline bool WavelengthRouter_MediaChannels_Channel::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void WavelengthRouter_MediaChannels_Channel::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Config& WavelengthRouter_MediaChannels_Channel::config() const {
  const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Config*>(
      &::openconfig::openconfig_wavelength_router::_WavelengthRouter_MediaChannels_Channel_Config_default_instance_);
}
inline ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Config* WavelengthRouter_MediaChannels_Channel::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.config)
  
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Config* WavelengthRouter_MediaChannels_Channel::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.config)
  return config_;
}
inline void WavelengthRouter_MediaChannels_Channel::set_allocated_config(::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.config)
}

// .openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Dest dest = 145566309 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/dest"];
inline bool WavelengthRouter_MediaChannels_Channel::has_dest() const {
  return this != internal_default_instance() && dest_ != NULL;
}
inline void WavelengthRouter_MediaChannels_Channel::clear_dest() {
  if (GetArenaNoVirtual() == NULL && dest_ != NULL) {
    delete dest_;
  }
  dest_ = NULL;
}
inline const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Dest& WavelengthRouter_MediaChannels_Channel::dest() const {
  const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Dest* p = dest_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.dest)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Dest*>(
      &::openconfig::openconfig_wavelength_router::_WavelengthRouter_MediaChannels_Channel_Dest_default_instance_);
}
inline ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Dest* WavelengthRouter_MediaChannels_Channel::release_dest() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.dest)
  
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Dest* temp = dest_;
  dest_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Dest* WavelengthRouter_MediaChannels_Channel::mutable_dest() {
  
  if (dest_ == NULL) {
    dest_ = new ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Dest;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.dest)
  return dest_;
}
inline void WavelengthRouter_MediaChannels_Channel::set_allocated_dest(::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Dest* dest) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dest_;
  }
  if (dest) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dest = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dest, submessage_arena);
    }
    
  } else {
    
  }
  dest_ = dest;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.dest)
}

// .openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.PsdDistribution psd_distribution = 48462813 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/psd-distribution"];
inline bool WavelengthRouter_MediaChannels_Channel::has_psd_distribution() const {
  return this != internal_default_instance() && psd_distribution_ != NULL;
}
inline void WavelengthRouter_MediaChannels_Channel::clear_psd_distribution() {
  if (GetArenaNoVirtual() == NULL && psd_distribution_ != NULL) {
    delete psd_distribution_;
  }
  psd_distribution_ = NULL;
}
inline const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution& WavelengthRouter_MediaChannels_Channel::psd_distribution() const {
  const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution* p = psd_distribution_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.psd_distribution)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution*>(
      &::openconfig::openconfig_wavelength_router::_WavelengthRouter_MediaChannels_Channel_PsdDistribution_default_instance_);
}
inline ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution* WavelengthRouter_MediaChannels_Channel::release_psd_distribution() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.psd_distribution)
  
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution* temp = psd_distribution_;
  psd_distribution_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution* WavelengthRouter_MediaChannels_Channel::mutable_psd_distribution() {
  
  if (psd_distribution_ == NULL) {
    psd_distribution_ = new ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.psd_distribution)
  return psd_distribution_;
}
inline void WavelengthRouter_MediaChannels_Channel::set_allocated_psd_distribution(::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_PsdDistribution* psd_distribution) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete psd_distribution_;
  }
  if (psd_distribution) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      psd_distribution = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, psd_distribution, submessage_arena);
    }
    
  } else {
    
  }
  psd_distribution_ = psd_distribution;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.psd_distribution)
}

// .openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.Source source = 246551242 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/source"];
inline bool WavelengthRouter_MediaChannels_Channel::has_source() const {
  return this != internal_default_instance() && source_ != NULL;
}
inline void WavelengthRouter_MediaChannels_Channel::clear_source() {
  if (GetArenaNoVirtual() == NULL && source_ != NULL) {
    delete source_;
  }
  source_ = NULL;
}
inline const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Source& WavelengthRouter_MediaChannels_Channel::source() const {
  const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Source* p = source_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.source)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Source*>(
      &::openconfig::openconfig_wavelength_router::_WavelengthRouter_MediaChannels_Channel_Source_default_instance_);
}
inline ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Source* WavelengthRouter_MediaChannels_Channel::release_source() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.source)
  
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Source* temp = source_;
  source_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Source* WavelengthRouter_MediaChannels_Channel::mutable_source() {
  
  if (source_ == NULL) {
    source_ = new ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Source;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.source)
  return source_;
}
inline void WavelengthRouter_MediaChannels_Channel::set_allocated_source(::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_Source* source) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete source_;
  }
  if (source) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      source = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.source)
}

// .openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.State state = 427502708 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/state"];
inline bool WavelengthRouter_MediaChannels_Channel::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void WavelengthRouter_MediaChannels_Channel::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_State& WavelengthRouter_MediaChannels_Channel::state() const {
  const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_State*>(
      &::openconfig::openconfig_wavelength_router::_WavelengthRouter_MediaChannels_Channel_State_default_instance_);
}
inline ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_State* WavelengthRouter_MediaChannels_Channel::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.state)
  
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_State* WavelengthRouter_MediaChannels_Channel::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.state)
  return state_;
}
inline void WavelengthRouter_MediaChannels_Channel::set_allocated_state(::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel.state)
}

// -------------------------------------------------------------------

// WavelengthRouter_MediaChannels_ChannelKey

// uint64 index = 1 [(.yext.schemapath) = "/wavelength-router/media-channels/channel/index"];
inline void WavelengthRouter_MediaChannels_ChannelKey::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 WavelengthRouter_MediaChannels_ChannelKey::index() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.ChannelKey.index)
  return index_;
}
inline void WavelengthRouter_MediaChannels_ChannelKey::set_index(::google::protobuf::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.ChannelKey.index)
}

// .openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.Channel channel = 2;
inline bool WavelengthRouter_MediaChannels_ChannelKey::has_channel() const {
  return this != internal_default_instance() && channel_ != NULL;
}
inline void WavelengthRouter_MediaChannels_ChannelKey::clear_channel() {
  if (GetArenaNoVirtual() == NULL && channel_ != NULL) {
    delete channel_;
  }
  channel_ = NULL;
}
inline const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel& WavelengthRouter_MediaChannels_ChannelKey::channel() const {
  const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel* p = channel_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.ChannelKey.channel)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel*>(
      &::openconfig::openconfig_wavelength_router::_WavelengthRouter_MediaChannels_Channel_default_instance_);
}
inline ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel* WavelengthRouter_MediaChannels_ChannelKey::release_channel() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.ChannelKey.channel)
  
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel* temp = channel_;
  channel_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel* WavelengthRouter_MediaChannels_ChannelKey::mutable_channel() {
  
  if (channel_ == NULL) {
    channel_ = new ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.ChannelKey.channel)
  return channel_;
}
inline void WavelengthRouter_MediaChannels_ChannelKey::set_allocated_channel(::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel* channel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete channel_;
  }
  if (channel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      channel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, channel, submessage_arena);
    }
    
  } else {
    
  }
  channel_ = channel;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.ChannelKey.channel)
}

// -------------------------------------------------------------------

// WavelengthRouter_MediaChannels

// repeated .openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.ChannelKey channel = 536840146 [(.yext.schemapath) = "/wavelength-router/media-channels/channel"];
inline int WavelengthRouter_MediaChannels::channel_size() const {
  return channel_.size();
}
inline void WavelengthRouter_MediaChannels::clear_channel() {
  channel_.Clear();
}
inline const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_ChannelKey& WavelengthRouter_MediaChannels::channel(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.channel)
  return channel_.Get(index);
}
inline ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_ChannelKey* WavelengthRouter_MediaChannels::mutable_channel(int index) {
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.channel)
  return channel_.Mutable(index);
}
inline ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_ChannelKey* WavelengthRouter_MediaChannels::add_channel() {
  // @@protoc_insertion_point(field_add:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.channel)
  return channel_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_ChannelKey >*
WavelengthRouter_MediaChannels::mutable_channel() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.channel)
  return &channel_;
}
inline const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_ChannelKey >&
WavelengthRouter_MediaChannels::channel() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels.channel)
  return channel_;
}

// -------------------------------------------------------------------

// WavelengthRouter

// .openconfig.openconfig_wavelength_router.WavelengthRouter.MediaChannels media_channels = 127507142 [(.yext.schemapath) = "/wavelength-router/media-channels"];
inline bool WavelengthRouter::has_media_channels() const {
  return this != internal_default_instance() && media_channels_ != NULL;
}
inline void WavelengthRouter::clear_media_channels() {
  if (GetArenaNoVirtual() == NULL && media_channels_ != NULL) {
    delete media_channels_;
  }
  media_channels_ = NULL;
}
inline const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels& WavelengthRouter::media_channels() const {
  const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels* p = media_channels_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wavelength_router.WavelengthRouter.media_channels)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels*>(
      &::openconfig::openconfig_wavelength_router::_WavelengthRouter_MediaChannels_default_instance_);
}
inline ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels* WavelengthRouter::release_media_channels() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wavelength_router.WavelengthRouter.media_channels)
  
  ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels* temp = media_channels_;
  media_channels_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels* WavelengthRouter::mutable_media_channels() {
  
  if (media_channels_ == NULL) {
    media_channels_ = new ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wavelength_router.WavelengthRouter.media_channels)
  return media_channels_;
}
inline void WavelengthRouter::set_allocated_media_channels(::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels* media_channels) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete media_channels_;
  }
  if (media_channels) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      media_channels = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, media_channels, submessage_arena);
    }
    
  } else {
    
  }
  media_channels_ = media_channels;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wavelength_router.WavelengthRouter.media_channels)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace openconfig_wavelength_router
}  // namespace openconfig

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_State_OperStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_State_OperStatus>() {
  return ::openconfig::openconfig_wavelength_router::WavelengthRouter_MediaChannels_Channel_State_OperStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_openconfig_2fopenconfig_5fwavelength_5frouter_2fopenconfig_5fwavelength_5frouter_2eproto__INCLUDED
