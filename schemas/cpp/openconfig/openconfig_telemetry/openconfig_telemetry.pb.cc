// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openconfig/openconfig_telemetry/openconfig_telemetry.proto

#include "openconfig/openconfig_telemetry/openconfig_telemetry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace openconfig {
namespace openconfig_telemetry {
class TelemetrySystem_DestinationGroups_DestinationGroup_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_DestinationGroups_DestinationGroup_Config>
      _instance;
} _TelemetrySystem_DestinationGroups_DestinationGroup_Config_default_instance_;
class TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config>
      _instance;
} _TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config_default_instance_;
class TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State>
      _instance;
} _TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State_default_instance_;
class TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination>
      _instance;
} _TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_default_instance_;
class TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey>
      _instance;
} _TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey_default_instance_;
class TelemetrySystem_DestinationGroups_DestinationGroup_DestinationsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_DestinationGroups_DestinationGroup_Destinations>
      _instance;
} _TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_default_instance_;
class TelemetrySystem_DestinationGroups_DestinationGroup_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_DestinationGroups_DestinationGroup_State>
      _instance;
} _TelemetrySystem_DestinationGroups_DestinationGroup_State_default_instance_;
class TelemetrySystem_DestinationGroups_DestinationGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_DestinationGroups_DestinationGroup>
      _instance;
} _TelemetrySystem_DestinationGroups_DestinationGroup_default_instance_;
class TelemetrySystem_DestinationGroups_DestinationGroupKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_DestinationGroups_DestinationGroupKey>
      _instance;
} _TelemetrySystem_DestinationGroups_DestinationGroupKey_default_instance_;
class TelemetrySystem_DestinationGroupsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_DestinationGroups>
      _instance;
} _TelemetrySystem_DestinationGroups_default_instance_;
class TelemetrySystem_SensorGroups_SensorGroup_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_SensorGroups_SensorGroup_Config>
      _instance;
} _TelemetrySystem_SensorGroups_SensorGroup_Config_default_instance_;
class TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config>
      _instance;
} _TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config_default_instance_;
class TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State>
      _instance;
} _TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State_default_instance_;
class TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath>
      _instance;
} _TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_default_instance_;
class TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey>
      _instance;
} _TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey_default_instance_;
class TelemetrySystem_SensorGroups_SensorGroup_SensorPathsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_SensorGroups_SensorGroup_SensorPaths>
      _instance;
} _TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_default_instance_;
class TelemetrySystem_SensorGroups_SensorGroup_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_SensorGroups_SensorGroup_State>
      _instance;
} _TelemetrySystem_SensorGroups_SensorGroup_State_default_instance_;
class TelemetrySystem_SensorGroups_SensorGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_SensorGroups_SensorGroup>
      _instance;
} _TelemetrySystem_SensorGroups_SensorGroup_default_instance_;
class TelemetrySystem_SensorGroups_SensorGroupKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_SensorGroups_SensorGroupKey>
      _instance;
} _TelemetrySystem_SensorGroups_SensorGroupKey_default_instance_;
class TelemetrySystem_SensorGroupsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_SensorGroups>
      _instance;
} _TelemetrySystem_SensorGroups_default_instance_;
class TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State>
      _instance;
} _TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State_default_instance_;
class TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath>
      _instance;
} _TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_default_instance_;
class TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey>
      _instance;
} _TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey_default_instance_;
class TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPathsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths>
      _instance;
} _TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_default_instance_;
class TelemetrySystem_Subscriptions_Dynamic_Subscription_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_Subscriptions_Dynamic_Subscription_State>
      _instance;
} _TelemetrySystem_Subscriptions_Dynamic_Subscription_State_default_instance_;
class TelemetrySystem_Subscriptions_Dynamic_SubscriptionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_Subscriptions_Dynamic_Subscription>
      _instance;
} _TelemetrySystem_Subscriptions_Dynamic_Subscription_default_instance_;
class TelemetrySystem_Subscriptions_Dynamic_SubscriptionKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey>
      _instance;
} _TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey_default_instance_;
class TelemetrySystem_Subscriptions_DynamicDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_Subscriptions_Dynamic>
      _instance;
} _TelemetrySystem_Subscriptions_Dynamic_default_instance_;
class TelemetrySystem_Subscriptions_Persistent_Subscription_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_Subscriptions_Persistent_Subscription_Config>
      _instance;
} _TelemetrySystem_Subscriptions_Persistent_Subscription_Config_default_instance_;
class TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config>
      _instance;
} _TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config_default_instance_;
class TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State>
      _instance;
} _TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State_default_instance_;
class TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup>
      _instance;
} _TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_default_instance_;
class TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey>
      _instance;
} _TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey_default_instance_;
class TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroupsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups>
      _instance;
} _TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_default_instance_;
class TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config>
      _instance;
} _TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config_default_instance_;
class TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State>
      _instance;
} _TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State_default_instance_;
class TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile>
      _instance;
} _TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_default_instance_;
class TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey>
      _instance;
} _TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey_default_instance_;
class TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfilesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles>
      _instance;
} _TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_default_instance_;
class TelemetrySystem_Subscriptions_Persistent_Subscription_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_Subscriptions_Persistent_Subscription_State>
      _instance;
} _TelemetrySystem_Subscriptions_Persistent_Subscription_State_default_instance_;
class TelemetrySystem_Subscriptions_Persistent_SubscriptionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_Subscriptions_Persistent_Subscription>
      _instance;
} _TelemetrySystem_Subscriptions_Persistent_Subscription_default_instance_;
class TelemetrySystem_Subscriptions_Persistent_SubscriptionKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_Subscriptions_Persistent_SubscriptionKey>
      _instance;
} _TelemetrySystem_Subscriptions_Persistent_SubscriptionKey_default_instance_;
class TelemetrySystem_Subscriptions_PersistentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_Subscriptions_Persistent>
      _instance;
} _TelemetrySystem_Subscriptions_Persistent_default_instance_;
class TelemetrySystem_SubscriptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem_Subscriptions>
      _instance;
} _TelemetrySystem_Subscriptions_default_instance_;
class TelemetrySystemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetrySystem>
      _instance;
} _TelemetrySystem_default_instance_;
}  // namespace openconfig_telemetry
}  // namespace openconfig
namespace protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto {
void InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_DestinationGroups_DestinationGroup_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Config::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_ConfigImpl);
}

void InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_ConfigImpl);
}

void InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_StateImpl);
}

void InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config();
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationImpl);
}

void InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKeyImpl);
}

void InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_DestinationsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_Destinations() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_DestinationsImpl);
}

void InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_DestinationGroups_DestinationGroup_State_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_State::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_StateImpl);
}

void InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroupImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_Config();
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_Destinations();
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_State();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_DestinationGroups_DestinationGroup_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroupImpl);
}

void InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroupKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_DestinationGroups_DestinationGroupKey_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroupKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroupKey::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroupKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroupKeyImpl);
}

void InitDefaultsTelemetrySystem_DestinationGroupsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroupKey();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_DestinationGroups_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_DestinationGroups() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_DestinationGroupsImpl);
}

void InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_SensorGroups_SensorGroup_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_Config::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_ConfigImpl);
}

void InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_ConfigImpl);
}

void InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_StateImpl);
}

void InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config();
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathImpl);
}

void InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKeyImpl);
}

void InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_SensorPathsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_SensorPaths() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_SensorPathsImpl);
}

void InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_SensorGroups_SensorGroup_State_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_State::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_StateImpl);
}

void InitDefaultsTelemetrySystem_SensorGroups_SensorGroupImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_Config();
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_SensorPaths();
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_State();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_SensorGroups_SensorGroup_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_SensorGroups_SensorGroup() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_SensorGroups_SensorGroupImpl);
}

void InitDefaultsTelemetrySystem_SensorGroups_SensorGroupKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_SensorGroups_SensorGroup();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_SensorGroups_SensorGroupKey_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroupKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroupKey::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_SensorGroups_SensorGroupKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_SensorGroups_SensorGroupKeyImpl);
}

void InitDefaultsTelemetrySystem_SensorGroupsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_SensorGroups_SensorGroupKey();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_SensorGroups_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_SensorGroups() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_SensorGroupsImpl);
}

void InitDefaultsTelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_StateImpl);
}

void InitDefaultsTelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathImpl);
}

void InitDefaultsTelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKeyImpl);
}

void InitDefaultsTelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPathsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPathsImpl);
}

void InitDefaultsTelemetrySystem_Subscriptions_Dynamic_Subscription_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsBoolValue();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Dynamic_Subscription_State_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_State::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_Subscriptions_Dynamic_Subscription_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_Subscriptions_Dynamic_Subscription_StateImpl);
}

void InitDefaultsTelemetrySystem_Subscriptions_Dynamic_SubscriptionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths();
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Dynamic_Subscription_State();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Dynamic_Subscription_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_Subscriptions_Dynamic_Subscription() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_Subscriptions_Dynamic_SubscriptionImpl);
}

void InitDefaultsTelemetrySystem_Subscriptions_Dynamic_SubscriptionKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Dynamic_Subscription();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_Subscriptions_Dynamic_SubscriptionKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_Subscriptions_Dynamic_SubscriptionKeyImpl);
}

void InitDefaultsTelemetrySystem_Subscriptions_DynamicImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Dynamic_SubscriptionKey();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Dynamic_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_Subscriptions_Dynamic() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_Subscriptions_DynamicImpl);
}

void InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_Config::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_ConfigImpl);
}

void InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_ConfigImpl);
}

void InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_StateImpl);
}

void InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config();
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupImpl);
}

void InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKeyImpl);
}

void InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroupsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroupsImpl);
}

void InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsBoolValue();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_ConfigImpl);
}

void InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsBoolValue();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_StateImpl);
}

void InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config();
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileImpl);
}

void InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKeyImpl);
}

void InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfilesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfilesImpl);
}

void InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_State_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_State::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_StateImpl);
}

void InitDefaultsTelemetrySystem_Subscriptions_Persistent_SubscriptionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_Config();
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups();
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles();
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_State();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_Subscriptions_Persistent_SubscriptionImpl);
}

void InitDefaultsTelemetrySystem_Subscriptions_Persistent_SubscriptionKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_SubscriptionKey_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_SubscriptionKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_SubscriptionKey::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_Subscriptions_Persistent_SubscriptionKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_Subscriptions_Persistent_SubscriptionKeyImpl);
}

void InitDefaultsTelemetrySystem_Subscriptions_PersistentImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_SubscriptionKey();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_Subscriptions_Persistent() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_Subscriptions_PersistentImpl);
}

void InitDefaultsTelemetrySystem_SubscriptionsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Dynamic();
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem_Subscriptions() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystem_SubscriptionsImpl);
}

void InitDefaultsTelemetrySystemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_DestinationGroups();
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_SensorGroups();
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions();
  {
    void* ptr = &::openconfig::openconfig_telemetry::_TelemetrySystem_default_instance_;
    new (ptr) ::openconfig::openconfig_telemetry::TelemetrySystem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_telemetry::TelemetrySystem::InitAsDefaultInstance();
}

void InitDefaultsTelemetrySystem() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetrySystemImpl);
}

::google::protobuf::Metadata file_level_metadata[45];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Config, group_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config, destination_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config, destination_port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State, destination_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State, destination_port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey, destination_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey, destination_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey, destination_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations, destination_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_State, group_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup, destinations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroupKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroupKey, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroupKey, destination_group_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups, destination_group_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_Config, sensor_group_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config, exclude_filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config, path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State, exclude_filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State, path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey, sensor_path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths, sensor_path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_State, sensor_group_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup, sensor_paths_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroupKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroupKey, sensor_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroupKey, sensor_group_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups, sensor_group_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State, exclude_filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State, path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey, sensor_path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths, sensor_path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_State, destination_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_State, destination_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_State, encoding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_State, heartbeat_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_State, originated_qos_marking_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_State, protocol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_State, sample_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_State, subscription_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_State, suppress_redundant_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription, sensor_paths_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey, subscription_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey, subscription_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic, subscription_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_Config, encoding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_Config, local_source_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_Config, originated_qos_marking_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_Config, protocol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_Config, subscription_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config, group_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State, group_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey, destination_group_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups, destination_group_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config, heartbeat_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config, sample_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config, sensor_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config, suppress_redundant_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State, heartbeat_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State, sample_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State, sensor_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State, suppress_redundant_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey, sensor_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey, sensor_profile_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles, sensor_profile_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_State, encoding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_State, local_source_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_State, originated_qos_marking_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_State, protocol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_State, subscription_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_State, subscription_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription, destination_groups_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription, sensor_profiles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_SubscriptionKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_SubscriptionKey, subscription_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_SubscriptionKey, subscription_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent, subscription_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions, dynamic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions, persistent_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem, destination_groups_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem, sensor_groups_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_telemetry::TelemetrySystem, subscriptions_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Config)},
  { 6, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config)},
  { 13, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State)},
  { 20, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination)},
  { 27, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey)},
  { 35, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations)},
  { 41, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_State)},
  { 47, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup)},
  { 55, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroupKey)},
  { 62, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups)},
  { 68, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_Config)},
  { 74, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config)},
  { 81, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State)},
  { 88, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath)},
  { 95, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey)},
  { 102, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths)},
  { 108, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_State)},
  { 114, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup)},
  { 122, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroupKey)},
  { 129, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups)},
  { 135, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State)},
  { 142, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath)},
  { 148, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey)},
  { 155, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths)},
  { 161, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_State)},
  { 175, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription)},
  { 182, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey)},
  { 189, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic)},
  { 195, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_Config)},
  { 205, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config)},
  { 211, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State)},
  { 217, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup)},
  { 224, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey)},
  { 231, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups)},
  { 237, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config)},
  { 246, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State)},
  { 255, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile)},
  { 262, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey)},
  { 269, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles)},
  { 275, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_State)},
  { 286, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription)},
  { 295, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_SubscriptionKey)},
  { 302, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent)},
  { 308, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions)},
  { 315, -1, sizeof(::openconfig::openconfig_telemetry::TelemetrySystem)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_DestinationGroups_DestinationGroup_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_DestinationGroups_DestinationGroup_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_DestinationGroups_DestinationGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_DestinationGroups_DestinationGroupKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_DestinationGroups_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_SensorGroups_SensorGroup_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_SensorGroups_SensorGroup_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_SensorGroups_SensorGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_SensorGroups_SensorGroupKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_SensorGroups_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Dynamic_Subscription_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Dynamic_Subscription_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Dynamic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_SubscriptionKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_telemetry::_TelemetrySystem_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "openconfig/openconfig_telemetry/openconfig_telemetry.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 45);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n:openconfig/openconfig_telemetry/openco"
      "nfig_telemetry.proto\022\037openconfig.opencon"
      "fig_telemetry\0328github.com/openconfig/ygo"
      "t/proto/ywrapper/ywrapper.proto\0320github."
      "com/openconfig/ygot/proto/yext/yext.prot"
      "o\032\034openconfig/enums/enums.proto\"\203~\n\017Tele"
      "metrySystem\022\212\001\n\022destination_groups\030\240\306\345u "
      "\001(\0132B.openconfig.openconfig_telemetry.Te"
      "lemetrySystem.DestinationGroupsB\'\202A$/tel"
      "emetry-system/destination-groups\022{\n\rsens"
      "or_groups\030\314\327\365\006 \001(\0132=.openconfig.openconf"
      "ig_telemetry.TelemetrySystem.SensorGroup"
      "sB\"\202A\037/telemetry-system/sensor-groups\022|\n"
      "\rsubscriptions\030\371\202\3316 \001(\0132>.openconfig.ope"
      "nconfig_telemetry.TelemetrySystem.Subscr"
      "iptionsB\"\202A\037/telemetry-system/subscripti"
      "ons\032\337\027\n\021DestinationGroups\022\257\001\n\021destinatio"
      "n_group\030\233\226\307\033 \003(\0132V.openconfig.openconfig"
      "_telemetry.TelemetrySystem.DestinationGr"
      "oups.DestinationGroupKeyB9\202A6/telemetry-"
      "system/destination-groups/destination-gr"
      "oup\032\271\024\n\020DestinationGroup\022\257\001\n\006config\030\314\331\323\r"
      " \001(\0132Z.openconfig.openconfig_telemetry.T"
      "elemetrySystem.DestinationGroups.Destina"
      "tionGroup.ConfigB@\202A=/telemetry-system/d"
      "estination-groups/destination-group/conf"
      "ig\022\301\001\n\014destinations\030\335\347\212\004 \001(\0132`.openconfi"
      "g.openconfig_telemetry.TelemetrySystem.D"
      "estinationGroups.DestinationGroup.Destin"
      "ationsBF\202AC/telemetry-system/destination"
      "-groups/destination-group/destinations\022\254"
      "\001\n\005state\030\305\220\266[ \001(\0132Y.openconfig.openconfi"
      "g_telemetry.TelemetrySystem.DestinationG"
      "roups.DestinationGroup.StateB\?\202A</teleme"
      "try-system/destination-groups/destinatio"
      "n-group/state\032\177\n\006Config\022u\n\010group_id\030\246\226\271x"
      " \001(\0132\025.ywrapper.StringValueBI\202AF/telemet"
      "ry-system/destination-groups/destination"
      "-group/config/group-id\032\376\r\n\014Destinations\022"
      "\333\001\n\013destination\030\210\272\354} \003(\0132o.openconfig.op"
      "enconfig_telemetry.TelemetrySystem.Desti"
      "nationGroups.DestinationGroup.Destinatio"
      "ns.DestinationKeyBR\202AO/telemetry-system/"
      "destination-groups/destination-group/des"
      "tinations/destination\032\363\010\n\013Destination\022\341\001"
      "\n\006config\030\355\253\204\030 \001(\0132s.openconfig.openconfi"
      "g_telemetry.TelemetrySystem.DestinationG"
      "roups.DestinationGroup.Destinations.Dest"
      "ination.ConfigBY\202AV/telemetry-system/des"
      "tination-groups/destination-group/destin"
      "ations/destination/config\022\336\001\n\005state\030\242\215\276$"
      " \001(\0132r.openconfig.openconfig_telemetry.T"
      "elemetrySystem.DestinationGroups.Destina"
      "tionGroup.Destinations.Destination.State"
      "BX\202AU/telemetry-system/destination-group"
      "s/destination-group/destinations/destina"
      "tion/state\032\317\002\n\006Config\022\245\001\n\023destination_ad"
      "dress\030\217\343\313\300\001 \001(\0132\025.ywrapper.StringValueBm"
      "\202Aj/telemetry-system/destination-groups/"
      "destination-group/destinations/destinati"
      "on/config/destination-address\022\234\001\n\020destin"
      "ation_port\030\330\220\330\177 \001(\0132\023.ywrapper.UintValue"
      "Bj\202Ag/telemetry-system/destination-group"
      "s/destination-group/destinations/destina"
      "tion/config/destination-port\032\314\002\n\005State\022\244"
      "\001\n\023destination_address\030\354\242\337\313\001 \001(\0132\025.ywrap"
      "per.StringValueBl\202Ai/telemetry-system/de"
      "stination-groups/destination-group/desti"
      "nations/destination/state/destination-ad"
      "dress\022\233\001\n\020destination_port\030\365\372\322K \001(\0132\023.yw"
      "rapper.UintValueBi\202Af/telemetry-system/d"
      "estination-groups/destination-group/dest"
      "inations/destination/state/destination-p"
      "ort\032\231\003\n\016DestinationKey\022\203\001\n\023destination_a"
      "ddress\030\001 \001(\tBf\202Ac/telemetry-system/desti"
      "nation-groups/destination-group/destinat"
      "ions/destination/destination-address\022}\n\020"
      "destination_port\030\002 \001(\004Bc\202A`/telemetry-sy"
      "stem/destination-groups/destination-grou"
      "p/destinations/destination/destination-p"
      "ort\022\201\001\n\013destination\030\003 \001(\0132l.openconfig.o"
      "penconfig_telemetry.TelemetrySystem.Dest"
      "inationGroups.DestinationGroup.Destinati"
      "ons.Destination\032~\n\005State\022u\n\010group_id\030\315\265\370"
      "\314\001 \001(\0132\025.ywrapper.StringValueBH\202AE/telem"
      "etry-system/destination-groups/destinati"
      "on-group/state/group-id\032\333\001\n\023DestinationG"
      "roupKey\022T\n\010group_id\030\001 \001(\tBB\202A\?/telemetry"
      "-system/destination-groups/destination-g"
      "roup/group-id\022n\n\021destination_group\030\002 \001(\013"
      "2S.openconfig.openconfig_telemetry.Telem"
      "etrySystem.DestinationGroups.Destination"
      "Group\032\231\024\n\014SensorGroups\022\227\001\n\014sensor_group\030"
      "\203\240\250\220\001 \003(\0132L.openconfig.openconfig_teleme"
      "try.TelemetrySystem.SensorGroups.SensorG"
      "roupKeyB/\202A,/telemetry-system/sensor-gro"
      "ups/sensor-group\032\240\021\n\013SensorGroup\022\233\001\n\006con"
      "fig\030\204\307\266` \001(\0132P.openconfig.openconfig_tel"
      "emetry.TelemetrySystem.SensorGroups.Sens"
      "orGroup.ConfigB6\202A3/telemetry-system/sen"
      "sor-groups/sensor-group/config\022\255\001\n\014senso"
      "r_paths\030\257\304\354\360\001 \001(\0132U.openconfig.openconfi"
      "g_telemetry.TelemetrySystem.SensorGroups"
      ".SensorGroup.SensorPathsB<\202A9/telemetry-"
      "system/sensor-groups/sensor-group/sensor"
      "-paths\022\231\001\n\005state\030\235\301\315\335\001 \001(\0132O.openconfig."
      "openconfig_telemetry.TelemetrySystem.Sen"
      "sorGroups.SensorGroup.StateB5\202A2/telemet"
      "ry-system/sensor-groups/sensor-group/sta"
      "te\032\204\001\n\006Config\022z\n\017sensor_group_id\030\263\205\342\212\001 \001"
      "(\0132\025.ywrapper.StringValueBF\202AC/telemetry"
      "-system/sensor-groups/sensor-group/confi"
      "g/sensor-group-id\032\232\013\n\013SensorPaths\022\305\001\n\013se"
      "nsor_path\030\240\241\347% \003(\0132c.openconfig.openconf"
      "ig_telemetry.TelemetrySystem.SensorGroup"
      "s.SensorGroup.SensorPaths.SensorPathKeyB"
      "H\202AE/telemetry-system/sensor-groups/sens"
      "or-group/sensor-paths/sensor-path\032\334\007\n\nSe"
      "nsorPath\022\313\001\n\006config\030\225\332\347g \001(\0132g.openconfi"
      "g.openconfig_telemetry.TelemetrySystem.S"
      "ensorGroups.SensorGroup.SensorPaths.Sens"
      "orPath.ConfigBO\202AL/telemetry-system/sens"
      "or-groups/sensor-group/sensor-paths/sens"
      "or-path/config\022\310\001\n\005state\030\212\333\375U \001(\0132f.open"
      "config.openconfig_telemetry.TelemetrySys"
      "tem.SensorGroups.SensorGroup.SensorPaths"
      ".SensorPath.StateBN\202AK/telemetry-system/"
      "sensor-groups/sensor-group/sensor-paths/"
      "sensor-path/state\032\232\002\n\006Config\022\220\001\n\016exclude"
      "_filter\030\235\325\306x \001(\0132\025.ywrapper.StringValueB"
      "^\202A[/telemetry-system/sensor-groups/sens"
      "or-group/sensor-paths/sensor-path/config"
      "/exclude-filter\022}\n\004path\030\275\241\370\367\001 \001(\0132\025.ywra"
      "pper.StringValueBT\202AQ/telemetry-system/s"
      "ensor-groups/sensor-group/sensor-paths/s"
      "ensor-path/config/path\032\227\002\n\005State\022\217\001\n\016exc"
      "lude_filter\030\210\330\220N \001(\0132\025.ywrapper.StringVa"
      "lueB]\202AZ/telemetry-system/sensor-groups/"
      "sensor-group/sensor-paths/sensor-path/st"
      "ate/exclude-filter\022|\n\004path\030\214\363\313\375\001 \001(\0132\025.y"
      "wrapper.StringValueBS\202AP/telemetry-syste"
      "m/sensor-groups/sensor-group/sensor-path"
      "s/sensor-path/state/path\032\343\001\n\rSensorPathK"
      "ey\022[\n\004path\030\001 \001(\tBM\202AJ/telemetry-system/s"
      "ensor-groups/sensor-group/sensor-paths/s"
      "ensor-path/path\022u\n\013sensor_path\030\002 \001(\0132`.o"
      "penconfig.openconfig_telemetry.Telemetry"
      "System.SensorGroups.SensorGroup.SensorPa"
      "ths.SensorPath\032\202\001\n\005State\022y\n\017sensor_group"
      "_id\030\246\350\375\334\001 \001(\0132\025.ywrapper.StringValueBE\202A"
      "B/telemetry-system/sensor-groups/sensor-"
      "group/state/sensor-group-id\032\313\001\n\016SensorGr"
      "oupKey\022X\n\017sensor_group_id\030\001 \001(\tB\?\202A</tel"
      "emetry-system/sensor-groups/sensor-group"
      "/sensor-group-id\022_\n\014sensor_group\030\002 \001(\0132I"
      ".openconfig.openconfig_telemetry.Telemet"
      "rySystem.SensorGroups.SensorGroup\032\351N\n\rSu"
      "bscriptions\022\206\001\n\007dynamic\030\277\300\267\037 \001(\0132F.openc"
      "onfig.openconfig_telemetry.TelemetrySyst"
      "em.Subscriptions.DynamicB*\202A\'/telemetry-"
      "system/subscriptions/dynamic\022\220\001\n\npersist"
      "ent\030\303\257\226\343\001 \001(\0132I.openconfig.openconfig_te"
      "lemetry.TelemetrySystem.Subscriptions.Pe"
      "rsistentB-\202A*/telemetry-system/subscript"
      "ions/persistent\032\377\027\n\007Dynamic\022\250\001\n\014subscrip"
      "tion\030\231\216\374\021 \003(\0132V.openconfig.openconfig_te"
      "lemetry.TelemetrySystem.Subscriptions.Dy"
      "namic.SubscriptionKeyB7\202A4/telemetry-sys"
      "tem/subscriptions/dynamic/subscription\032\347"
      "\024\n\014Subscription\022\277\001\n\014sensor_paths\030\335\330\222\350\001 \001"
      "(\0132_.openconfig.openconfig_telemetry.Tel"
      "emetrySystem.Subscriptions.Dynamic.Subsc"
      "ription.SensorPathsBD\202AA/telemetry-syste"
      "m/subscriptions/dynamic/subscription/sen"
      "sor-paths\022\253\001\n\005state\030\233\246\212\230\001 \001(\0132Y.openconf"
      "ig.openconfig_telemetry.TelemetrySystem."
      "Subscriptions.Dynamic.Subscription.State"
      "B=\202A:/telemetry-system/subscriptions/dyn"
      "amic/subscription/state\032\367\007\n\013SensorPaths\022"
      "\327\001\n\013sensor_path\030\256\272\375- \003(\0132m.openconfig.op"
      "enconfig_telemetry.TelemetrySystem.Subsc"
      "riptions.Dynamic.Subscription.SensorPath"
      "s.SensorPathKeyBP\202AM/telemetry-system/su"
      "bscriptions/dynamic/subscription/sensor-"
      "paths/sensor-path\032\225\004\n\nSensorPath\022\333\001\n\005sta"
      "te\030\220\376\336\343\001 \001(\0132p.openconfig.openconfig_tel"
      "emetry.TelemetrySystem.Subscriptions.Dyn"
      "amic.Subscription.SensorPaths.SensorPath"
      ".StateBV\202AS/telemetry-system/subscriptio"
      "ns/dynamic/subscription/sensor-paths/sen"
      "sor-path/state\032\250\002\n\005State\022\227\001\n\016exclude_fil"
      "ter\030\242\326\263v \001(\0132\025.ywrapper.StringValueBe\202Ab"
      "/telemetry-system/subscriptions/dynamic/"
      "subscription/sensor-paths/sensor-path/st"
      "ate/exclude-filter\022\204\001\n\004path\030\372\213\322\261\001 \001(\0132\025."
      "ywrapper.StringValueB[\202AX/telemetry-syst"
      "em/subscriptions/dynamic/subscription/se"
      "nsor-paths/sensor-path/state/path\032\365\001\n\rSe"
      "nsorPathKey\022c\n\004path\030\001 \001(\tBU\202AR/telemetry"
      "-system/subscriptions/dynamic/subscripti"
      "on/sensor-paths/sensor-path/path\022\177\n\013sens"
      "or_path\030\002 \001(\0132j.openconfig.openconfig_te"
      "lemetry.TelemetrySystem.Subscriptions.Dy"
      "namic.Subscription.SensorPaths.SensorPat"
      "h\032\354\t\n\005State\022\211\001\n\023destination_address\030\375\213\365\253"
      "\001 \001(\0132\025.ywrapper.StringValueBQ\202AN/teleme"
      "try-system/subscriptions/dynamic/subscri"
      "ption/state/destination-address\022\201\001\n\020dest"
      "ination_port\030\356\276\357\300\001 \001(\0132\023.ywrapper.UintVa"
      "lueBN\202AK/telemetry-system/subscriptions/"
      "dynamic/subscription/state/destination-p"
      "ort\022\232\001\n\010encoding\030\371\240\314\366\001 \001(\0162<.openconfig."
      "enums.OpenconfigTelemetryTypesDATAENCODI"
      "NGMETHODBF\202AC/telemetry-system/subscript"
      "ions/dynamic/subscription/state/encoding"
      "\022\204\001\n\022heartbeat_interval\030\364\232\232\033 \001(\0132\023.ywrap"
      "per.UintValueBP\202AM/telemetry-system/subs"
      "criptions/dynamic/subscription/state/hea"
      "rtbeat-interval\022\215\001\n\026originated_qos_marki"
      "ng\030\316\202\220\247\001 \001(\0132\023.ywrapper.UintValueBT\202AQ/t"
      "elemetry-system/subscriptions/dynamic/su"
      "bscription/state/originated-qos-marking\022"
      "\225\001\n\010protocol\030\216\261\272B \001(\01628.openconfig.enums"
      ".OpenconfigTelemetryTypesSTREAMPROTOCOLB"
      "F\202AC/telemetry-system/subscriptions/dyna"
      "mic/subscription/state/protocol\022\177\n\017sampl"
      "e_interval\030\202\232\216\204\001 \001(\0132\023.ywrapper.UintValu"
      "eBM\202AJ/telemetry-system/subscriptions/dy"
      "namic/subscription/state/sample-interval"
      "\022~\n\017subscription_id\030\251\241\213\003 \001(\0132\023.ywrapper."
      "UintValueBM\202AJ/telemetry-system/subscrip"
      "tions/dynamic/subscription/state/subscri"
      "ption-id\022\205\001\n\022suppress_redundant\030\227\257\252\265\001 \001("
      "\0132\023.ywrapper.BoolValueBP\202AM/telemetry-sy"
      "stem/subscriptions/dynamic/subscription/"
      "state/suppress-redundant\032\336\001\n\017Subscriptio"
      "nKey\022`\n\017subscription_id\030\001 \001(\004BG\202AD/telem"
      "etry-system/subscriptions/dynamic/subscr"
      "iption/subscription-id\022i\n\014subscription\030\002"
      " \001(\0132S.openconfig.openconfig_telemetry.T"
      "elemetrySystem.Subscriptions.Dynamic.Sub"
      "scription\032\2714\n\nPersistent\022\256\001\n\014subscriptio"
      "n\030\355\341\325Q \003(\0132Y.openconfig.openconfig_telem"
      "etry.TelemetrySystem.Subscriptions.Persi"
      "stent.SubscriptionKeyB:\202A7/telemetry-sys"
      "tem/subscriptions/persistent/subscriptio"
      "n\032\2161\n\014Subscription\022\263\001\n\006config\030\202\321\215\027 \001(\0132]"
      ".openconfig.openconfig_telemetry.Telemet"
      "rySystem.Subscriptions.Persistent.Subscr"
      "iption.ConfigBA\202A>/telemetry-system/subs"
      "criptions/persistent/subscription/config"
      "\022\326\001\n\022destination_groups\030\365\343\363| \001(\0132h.openc"
      "onfig.openconfig_telemetry.TelemetrySyst"
      "em.Subscriptions.Persistent.Subscription"
      ".DestinationGroupsBM\202AJ/telemetry-system"
      "/subscriptions/persistent/subscription/d"
      "estination-groups\022\316\001\n\017sensor_profiles\030\201\360"
      "\254\320\001 \001(\0132e.openconfig.openconfig_telemetr"
      "y.TelemetrySystem.Subscriptions.Persiste"
      "nt.Subscription.SensorProfilesBJ\202AG/tele"
      "metry-system/subscriptions/persistent/su"
      "bscription/sensor-profiles\022\261\001\n\005state\030\277\376\204"
      "\272\001 \001(\0132\\.openconfig.openconfig_telemetry"
      ".TelemetrySystem.Subscriptions.Persisten"
      "t.Subscription.StateB@\202A=/telemetry-syst"
      "em/subscriptions/persistent/subscription"
      "/state\032\366\005\n\006Config\022\236\001\n\010encoding\030\336\354\370\212\001 \001(\016"
      "2<.openconfig.enums.OpenconfigTelemetryT"
      "ypesDATAENCODINGMETHODBJ\202AG/telemetry-sy"
      "stem/subscriptions/persistent/subscripti"
      "on/config/encoding\022\217\001\n\024local_source_addr"
      "ess\030\257\312\360\306\001 \001(\0132\025.ywrapper.StringValueBV\202A"
      "S/telemetry-system/subscriptions/persist"
      "ent/subscription/config/local-source-add"
      "ress\022\221\001\n\026originated_qos_marking\030\361\274\214\371\001 \001("
      "\0132\023.ywrapper.UintValueBX\202AU/telemetry-sy"
      "stem/subscriptions/persistent/subscripti"
      "on/config/originated-qos-marking\022\231\001\n\010pro"
      "tocol\030\325\206\315t \001(\01628.openconfig.enums.Openco"
      "nfigTelemetryTypesSTREAMPROTOCOLBJ\202AG/te"
      "lemetry-system/subscriptions/persistent/"
      "subscription/config/protocol\022\210\001\n\021subscri"
      "ption_name\030\246\242\311\005 \001(\0132\025.ywrapper.StringVal"
      "ueBS\202AP/telemetry-system/subscriptions/p"
      "ersistent/subscription/config/subscripti"
      "on-name\032\235\013\n\021DestinationGroups\022\374\001\n\021destin"
      "ation_group\030\252\312\246\272\001 \003(\0132|.openconfig.openc"
      "onfig_telemetry.TelemetrySystem.Subscrip"
      "tions.Persistent.Subscription.Destinatio"
      "nGroups.DestinationGroupKeyB_\202A\\/telemet"
      "ry-system/subscriptions/persistent/subsc"
      "ription/destination-groups/destination-g"
      "roup\032\335\006\n\020DestinationGroup\022\374\001\n\006config\030\373\307\206"
      "\024 \001(\0132\200\001.openconfig.openconfig_telemetry"
      ".TelemetrySystem.Subscriptions.Persisten"
      "t.Subscription.DestinationGroups.Destina"
      "tionGroup.ConfigBf\202Ac/telemetry-system/s"
      "ubscriptions/persistent/subscription/des"
      "tination-groups/destination-group/config"
      "\022\370\001\n\005state\030\374\232\377\023 \001(\0132\177.openconfig.opencon"
      "fig_telemetry.TelemetrySystem.Subscripti"
      "ons.Persistent.Subscription.DestinationG"
      "roups.DestinationGroup.StateBe\202Ab/teleme"
      "try-system/subscriptions/persistent/subs"
      "cription/destination-groups/destination-"
      "group/state\032\247\001\n\006Config\022\234\001\n\010group_id\030\377\332\374\322"
      "\001 \001(\0132\025.ywrapper.StringValueBo\202Al/teleme"
      "try-system/subscriptions/persistent/subs"
      "cription/destination-groups/destination-"
      "group/config/group-id\032\244\001\n\005State\022\232\001\n\010grou"
      "p_id\030\226\312\277L \001(\0132\025.ywrapper.StringValueBn\202A"
      "k/telemetry-system/subscriptions/persist"
      "ent/subscription/destination-groups/dest"
      "ination-group/state/group-id\032\250\002\n\023Destina"
      "tionGroupKey\022z\n\010group_id\030\001 \001(\tBh\202Ae/tele"
      "metry-system/subscriptions/persistent/su"
      "bscription/destination-groups/destinatio"
      "n-group/group-id\022\224\001\n\021destination_group\030\002"
      " \001(\0132y.openconfig.openconfig_telemetry.T"
      "elemetrySystem.Subscriptions.Persistent."
      "Subscription.DestinationGroups.Destinati"
      "onGroup\032\331\022\n\016SensorProfiles\022\355\001\n\016sensor_pr"
      "ofile\030\272\205\330\361\001 \003(\0132v.openconfig.openconfig_"
      "telemetry.TelemetrySystem.Subscriptions."
      "Persistent.Subscription.SensorProfiles.S"
      "ensorProfileKeyBY\202AV/telemetry-system/su"
      "bscriptions/persistent/subscription/sens"
      "or-profiles/sensor-profile\032\265\016\n\rSensorPro"
      "file\022\360\001\n\006config\030\253\235\243\371\001 \001(\0132z.openconfig.o"
      "penconfig_telemetry.TelemetrySystem.Subs"
      "criptions.Persistent.Subscription.Sensor"
      "Profiles.SensorProfile.ConfigB`\202A]/telem"
      "etry-system/subscriptions/persistent/sub"
      "scription/sensor-profiles/sensor-profile"
      "/config\022\354\001\n\005state\030\354\250\344s \001(\0132y.openconfig."
      "openconfig_telemetry.TelemetrySystem.Sub"
      "scriptions.Persistent.Subscription.Senso"
      "rProfiles.SensorProfile.StateB_\202A\\/telem"
      "etry-system/subscriptions/persistent/sub"
      "scription/sensor-profiles/sensor-profile"
      "/state\032\241\005\n\006Config\022\247\001\n\022heartbeat_interval"
      "\030\244\323\327u \001(\0132\023.ywrapper.UintValueBs\202Ap/tele"
      "metry-system/subscriptions/persistent/su"
      "bscription/sensor-profiles/sensor-profil"
      "e/config/heartbeat-interval\022\242\001\n\017sample_i"
      "nterval\030\262\202\204\241\001 \001(\0132\023.ywrapper.UintValueBp"
      "\202Am/telemetry-system/subscriptions/persi"
      "stent/subscription/sensor-profiles/senso"
      "r-profile/config/sample-interval\022\235\001\n\014sen"
      "sor_group\030\236\223\206  \001(\0132\025.ywrapper.StringValu"
      "eBm\202Aj/telemetry-system/subscriptions/pe"
      "rsistent/subscription/sensor-profiles/se"
      "nsor-profile/config/sensor-group\022\247\001\n\022sup"
      "press_redundant\030\307\376\372\035 \001(\0132\023.ywrapper.Bool"
      "ValueBs\202Ap/telemetry-system/subscription"
      "s/persistent/subscription/sensor-profile"
      "s/sensor-profile/config/suppress-redunda"
      "nt\032\235\005\n\005State\022\247\001\n\022heartbeat_interval\030\355\201\334\240"
      "\001 \001(\0132\023.ywrapper.UintValueBr\202Ao/telemetr"
      "y-system/subscriptions/persistent/subscr"
      "iption/sensor-profiles/sensor-profile/st"
      "ate/heartbeat-interval\022\241\001\n\017sample_interv"
      "al\030\335\245\265\217\001 \001(\0132\023.ywrapper.UintValueBo\202Al/t"
      "elemetry-system/subscriptions/persistent"
      "/subscription/sensor-profiles/sensor-pro"
      "file/state/sample-interval\022\234\001\n\014sensor_gr"
      "oup\030\243\340\204\017 \001(\0132\025.ywrapper.StringValueBl\202Ai"
      "/telemetry-system/subscriptions/persiste"
      "nt/subscription/sensor-profiles/sensor-p"
      "rofile/state/sensor-group\022\246\001\n\022suppress_r"
      "edundant\030\366\373\327\021 \001(\0132\023.ywrapper.BoolValueBr"
      "\202Ao/telemetry-system/subscriptions/persi"
      "stent/subscription/sensor-profiles/senso"
      "r-profile/state/suppress-redundant\032\236\002\n\020S"
      "ensorProfileKey\022|\n\014sensor_group\030\001 \001(\tBf\202"
      "Ac/telemetry-system/subscriptions/persis"
      "tent/subscription/sensor-profiles/sensor"
      "-profile/sensor-group\022\213\001\n\016sensor_profile"
      "\030\002 \001(\0132s.openconfig.openconfig_telemetry"
      ".TelemetrySystem.Subscriptions.Persisten"
      "t.Subscription.SensorProfiles.SensorProf"
      "ile\032\364\006\n\005State\022\235\001\n\010encoding\030\315\317\356\221\001 \001(\0162<.o"
      "penconfig.enums.OpenconfigTelemetryTypes"
      "DATAENCODINGMETHODBI\202AF/telemetry-system"
      "/subscriptions/persistent/subscription/s"
      "tate/encoding\022\215\001\n\024local_source_address\030\270"
      "\274\322$ \001(\0132\025.ywrapper.StringValueBU\202AR/tele"
      "metry-system/subscriptions/persistent/su"
      "bscription/state/local-source-address\022\217\001"
      "\n\026originated_qos_marking\030\242\352\340W \001(\0132\023.ywra"
      "pper.UintValueBW\202AT/telemetry-system/sub"
      "scriptions/persistent/subscription/state"
      "/originated-qos-marking\022\231\001\n\010protocol\030\352\361\354"
      "\326\001 \001(\01628.openconfig.enums.OpenconfigTele"
      "metryTypesSTREAMPROTOCOLBI\202AF/telemetry-"
      "system/subscriptions/persistent/subscrip"
      "tion/state/protocol\022\202\001\n\017subscription_id\030"
      "\325\346\275\274\001 \001(\0132\023.ywrapper.UintValueBP\202AM/tele"
      "metry-system/subscriptions/persistent/su"
      "bscription/state/subscription-id\022\207\001\n\021sub"
      "scription_name\030\363\257\336U \001(\0132\025.ywrapper.Strin"
      "gValueBR\202AO/telemetry-system/subscriptio"
      "ns/persistent/subscription/state/subscri"
      "ption-name\032\350\001\n\017SubscriptionKey\022g\n\021subscr"
      "iption_name\030\001 \001(\tBL\202AI/telemetry-system/"
      "subscriptions/persistent/subscription/su"
      "bscription-name\022l\n\014subscription\030\002 \001(\0132V."
      "openconfig.openconfig_telemetry.Telemetr"
      "ySystem.Subscriptions.Persistent.Subscri"
      "ptionb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 16373);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "openconfig/openconfig_telemetry/openconfig_telemetry.proto", &protobuf_RegisterTypes);
  ::protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::AddDescriptors();
  ::protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fyext_2fyext_2eproto::AddDescriptors();
  ::protobuf_openconfig_2fenums_2fenums_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto
namespace openconfig {
namespace openconfig_telemetry {

// ===================================================================

void TelemetrySystem_DestinationGroups_DestinationGroup_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_telemetry::_TelemetrySystem_DestinationGroups_DestinationGroup_Config_default_instance_._instance.get_mutable()->group_id_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void TelemetrySystem_DestinationGroups_DestinationGroup_Config::clear_group_id() {
  if (GetArenaNoVirtual() == NULL && group_id_ != NULL) {
    delete group_id_;
  }
  group_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_DestinationGroups_DestinationGroup_Config::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_DestinationGroups_DestinationGroup_Config::TelemetrySystem_DestinationGroups_DestinationGroup_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Config)
}
TelemetrySystem_DestinationGroups_DestinationGroup_Config::TelemetrySystem_DestinationGroups_DestinationGroup_Config(const TelemetrySystem_DestinationGroups_DestinationGroup_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_group_id()) {
    group_id_ = new ::ywrapper::StringValue(*from.group_id_);
  } else {
    group_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Config)
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Config::SharedCtor() {
  group_id_ = NULL;
  _cached_size_ = 0;
}

TelemetrySystem_DestinationGroups_DestinationGroup_Config::~TelemetrySystem_DestinationGroups_DestinationGroup_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Config)
  SharedDtor();
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Config::SharedDtor() {
  if (this != internal_default_instance()) delete group_id_;
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_DestinationGroups_DestinationGroup_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_DestinationGroups_DestinationGroup_Config& TelemetrySystem_DestinationGroups_DestinationGroup_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_Config();
  return *internal_default_instance();
}

TelemetrySystem_DestinationGroups_DestinationGroup_Config* TelemetrySystem_DestinationGroups_DestinationGroup_Config::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_DestinationGroups_DestinationGroup_Config* n = new TelemetrySystem_DestinationGroups_DestinationGroup_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && group_id_ != NULL) {
    delete group_id_;
  }
  group_id_ = NULL;
  _internal_metadata_.Clear();
}

bool TelemetrySystem_DestinationGroups_DestinationGroup_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2020759858u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue group_id = 252594982 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/config/group-id"];
      case 252594982: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 2020759858 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_group_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Config)
  return false;
#undef DO_
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue group_id = 252594982 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/config/group-id"];
  if (this->has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      252594982, *this->group_id_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Config)
}

::google::protobuf::uint8* TelemetrySystem_DestinationGroups_DestinationGroup_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue group_id = 252594982 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/config/group-id"];
  if (this->has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        252594982, *this->group_id_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Config)
  return target;
}

size_t TelemetrySystem_DestinationGroups_DestinationGroup_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue group_id = 252594982 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/config/group-id"];
  if (this->has_group_id()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->group_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_DestinationGroups_DestinationGroup_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_DestinationGroups_DestinationGroup_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Config)
    MergeFrom(*source);
  }
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Config::MergeFrom(const TelemetrySystem_DestinationGroups_DestinationGroup_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_group_id()) {
    mutable_group_id()->::ywrapper::StringValue::MergeFrom(from.group_id());
  }
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Config::CopyFrom(const TelemetrySystem_DestinationGroups_DestinationGroup_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_DestinationGroups_DestinationGroup_Config::IsInitialized() const {
  return true;
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Config::Swap(TelemetrySystem_DestinationGroups_DestinationGroup_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_DestinationGroups_DestinationGroup_Config::InternalSwap(TelemetrySystem_DestinationGroups_DestinationGroup_Config* other) {
  using std::swap;
  swap(group_id_, other->group_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_DestinationGroups_DestinationGroup_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_telemetry::_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config_default_instance_._instance.get_mutable()->destination_address_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_telemetry::_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config_default_instance_._instance.get_mutable()->destination_port_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config::clear_destination_address() {
  if (GetArenaNoVirtual() == NULL && destination_address_ != NULL) {
    delete destination_address_;
  }
  destination_address_ = NULL;
}
void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config::clear_destination_port() {
  if (GetArenaNoVirtual() == NULL && destination_port_ != NULL) {
    delete destination_port_;
  }
  destination_port_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config::kDestinationAddressFieldNumber;
const int TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config::kDestinationPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.Config)
}
TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config(const TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_destination_port()) {
    destination_port_ = new ::ywrapper::UintValue(*from.destination_port_);
  } else {
    destination_port_ = NULL;
  }
  if (from.has_destination_address()) {
    destination_address_ = new ::ywrapper::StringValue(*from.destination_address_);
  } else {
    destination_address_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.Config)
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config::SharedCtor() {
  ::memset(&destination_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&destination_address_) -
      reinterpret_cast<char*>(&destination_port_)) + sizeof(destination_address_));
  _cached_size_ = 0;
}

TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config::~TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.Config)
  SharedDtor();
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config::SharedDtor() {
  if (this != internal_default_instance()) delete destination_port_;
  if (this != internal_default_instance()) delete destination_address_;
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config& TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config();
  return *internal_default_instance();
}

TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config* TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config* n = new TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && destination_port_ != NULL) {
    delete destination_port_;
  }
  destination_port_ = NULL;
  if (GetArenaNoVirtual() == NULL && destination_address_ != NULL) {
    delete destination_address_;
  }
  destination_address_ = NULL;
  _internal_metadata_.Clear();
}

bool TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3231157370u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue destination_port = 267782232 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/destinations/destination/config/destination-port"];
      case 267782232: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 2142257858 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_port()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue destination_address = 403894671 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/destinations/destination/config/destination-address"];
      case 403894671: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 3231157370 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.Config)
  return false;
#undef DO_
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue destination_port = 267782232 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/destinations/destination/config/destination-port"];
  if (this->has_destination_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      267782232, *this->destination_port_, output);
  }

  // .ywrapper.StringValue destination_address = 403894671 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/destinations/destination/config/destination-address"];
  if (this->has_destination_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      403894671, *this->destination_address_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.Config)
}

::google::protobuf::uint8* TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue destination_port = 267782232 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/destinations/destination/config/destination-port"];
  if (this->has_destination_port()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        267782232, *this->destination_port_, deterministic, target);
  }

  // .ywrapper.StringValue destination_address = 403894671 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/destinations/destination/config/destination-address"];
  if (this->has_destination_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        403894671, *this->destination_address_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.Config)
  return target;
}

size_t TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue destination_port = 267782232 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/destinations/destination/config/destination-port"];
  if (this->has_destination_port()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->destination_port_);
  }

  // .ywrapper.StringValue destination_address = 403894671 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/destinations/destination/config/destination-address"];
  if (this->has_destination_address()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->destination_address_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.Config)
    MergeFrom(*source);
  }
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config::MergeFrom(const TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_destination_port()) {
    mutable_destination_port()->::ywrapper::UintValue::MergeFrom(from.destination_port());
  }
  if (from.has_destination_address()) {
    mutable_destination_address()->::ywrapper::StringValue::MergeFrom(from.destination_address());
  }
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config::CopyFrom(const TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config::IsInitialized() const {
  return true;
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config::Swap(TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config::InternalSwap(TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config* other) {
  using std::swap;
  swap(destination_port_, other->destination_port_);
  swap(destination_address_, other->destination_address_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_telemetry::_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State_default_instance_._instance.get_mutable()->destination_address_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_telemetry::_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State_default_instance_._instance.get_mutable()->destination_port_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State::clear_destination_address() {
  if (GetArenaNoVirtual() == NULL && destination_address_ != NULL) {
    delete destination_address_;
  }
  destination_address_ = NULL;
}
void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State::clear_destination_port() {
  if (GetArenaNoVirtual() == NULL && destination_port_ != NULL) {
    delete destination_port_;
  }
  destination_port_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State::kDestinationAddressFieldNumber;
const int TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State::kDestinationPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.State)
}
TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State(const TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_destination_port()) {
    destination_port_ = new ::ywrapper::UintValue(*from.destination_port_);
  } else {
    destination_port_ = NULL;
  }
  if (from.has_destination_address()) {
    destination_address_ = new ::ywrapper::StringValue(*from.destination_address_);
  } else {
    destination_address_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.State)
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State::SharedCtor() {
  ::memset(&destination_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&destination_address_) -
      reinterpret_cast<char*>(&destination_port_)) + sizeof(destination_address_));
  _cached_size_ = 0;
}

TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State::~TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.State)
  SharedDtor();
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State::SharedDtor() {
  if (this != internal_default_instance()) delete destination_port_;
  if (this != internal_default_instance()) delete destination_address_;
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State& TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State();
  return *internal_default_instance();
}

TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State* TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State* n = new TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && destination_port_ != NULL) {
    delete destination_port_;
  }
  destination_port_ = NULL;
  if (GetArenaNoVirtual() == NULL && destination_address_ != NULL) {
    delete destination_address_;
  }
  destination_address_ = NULL;
  _internal_metadata_.Clear();
}

bool TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3418262370u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue destination_port = 158645621 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/destinations/destination/state/destination-port"];
      case 158645621: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 1269164970 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_port()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue destination_address = 427282796 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/destinations/destination/state/destination-address"];
      case 427282796: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 3418262370 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.State)
  return false;
#undef DO_
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue destination_port = 158645621 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/destinations/destination/state/destination-port"];
  if (this->has_destination_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      158645621, *this->destination_port_, output);
  }

  // .ywrapper.StringValue destination_address = 427282796 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/destinations/destination/state/destination-address"];
  if (this->has_destination_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      427282796, *this->destination_address_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.State)
}

::google::protobuf::uint8* TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue destination_port = 158645621 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/destinations/destination/state/destination-port"];
  if (this->has_destination_port()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        158645621, *this->destination_port_, deterministic, target);
  }

  // .ywrapper.StringValue destination_address = 427282796 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/destinations/destination/state/destination-address"];
  if (this->has_destination_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        427282796, *this->destination_address_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.State)
  return target;
}

size_t TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue destination_port = 158645621 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/destinations/destination/state/destination-port"];
  if (this->has_destination_port()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->destination_port_);
  }

  // .ywrapper.StringValue destination_address = 427282796 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/destinations/destination/state/destination-address"];
  if (this->has_destination_address()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->destination_address_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.State)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.State)
    MergeFrom(*source);
  }
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State::MergeFrom(const TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_destination_port()) {
    mutable_destination_port()->::ywrapper::UintValue::MergeFrom(from.destination_port());
  }
  if (from.has_destination_address()) {
    mutable_destination_address()->::ywrapper::StringValue::MergeFrom(from.destination_address());
  }
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State::CopyFrom(const TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State::IsInitialized() const {
  return true;
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State::Swap(TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State::InternalSwap(TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State* other) {
  using std::swap;
  swap(destination_port_, other->destination_port_);
  swap(destination_address_, other->destination_address_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination::InitAsDefaultInstance() {
  ::openconfig::openconfig_telemetry::_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config*>(
      ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config::internal_default_instance());
  ::openconfig::openconfig_telemetry::_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State*>(
      ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination::kConfigFieldNumber;
const int TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination)
}
TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination(const TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination)
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination::SharedCtor() {
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&config_)) + sizeof(state_));
  _cached_size_ = 0;
}

TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination::~TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination)
  SharedDtor();
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination& TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination();
  return *internal_default_instance();
}

TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination* TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination* n = new TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(612119826u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.Config config = 50402797 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/destinations/destination/config"];
      case 50402797: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 403222378 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.State state = 76514978 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/destinations/destination/state"];
      case 76514978: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 612119826 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination)
  return false;
#undef DO_
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.Config config = 50402797 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/destinations/destination/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50402797, *this->config_, output);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.State state = 76514978 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/destinations/destination/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      76514978, *this->state_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination)
}

::google::protobuf::uint8* TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.Config config = 50402797 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/destinations/destination/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        50402797, *this->config_, deterministic, target);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.State state = 76514978 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/destinations/destination/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        76514978, *this->state_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination)
  return target;
}

size_t TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.Config config = 50402797 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/destinations/destination/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination.State state = 76514978 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/destinations/destination/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination)
    MergeFrom(*source);
  }
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination::MergeFrom(const TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_Config::MergeFrom(from.config());
  }
  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination_State::MergeFrom(from.state());
  }
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination::CopyFrom(const TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination::IsInitialized() const {
  return true;
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination::Swap(TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination::InternalSwap(TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination* other) {
  using std::swap;
  swap(config_, other->config_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey::InitAsDefaultInstance() {
  ::openconfig::openconfig_telemetry::_TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey_default_instance_._instance.get_mutable()->destination_ = const_cast< ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination*>(
      ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey::kDestinationAddressFieldNumber;
const int TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey::kDestinationPortFieldNumber;
const int TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey::kDestinationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.DestinationKey)
}
TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey(const TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  destination_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.destination_address().size() > 0) {
    destination_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_address_);
  }
  if (from.has_destination()) {
    destination_ = new ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination(*from.destination_);
  } else {
    destination_ = NULL;
  }
  destination_port_ = from.destination_port_;
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.DestinationKey)
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey::SharedCtor() {
  destination_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&destination_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&destination_port_) -
      reinterpret_cast<char*>(&destination_)) + sizeof(destination_port_));
  _cached_size_ = 0;
}

TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey::~TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.DestinationKey)
  SharedDtor();
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey::SharedDtor() {
  destination_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete destination_;
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey& TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey();
  return *internal_default_instance();
}

TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey* TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey* n = new TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.DestinationKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  destination_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && destination_ != NULL) {
    delete destination_;
  }
  destination_ = NULL;
  destination_port_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.DestinationKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string destination_address = 1 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/destinations/destination/destination-address"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->destination_address().data(), static_cast<int>(this->destination_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.DestinationKey.destination_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 destination_port = 2 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/destinations/destination/destination-port"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &destination_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination destination = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_destination()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.DestinationKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.DestinationKey)
  return false;
#undef DO_
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.DestinationKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string destination_address = 1 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/destinations/destination/destination-address"];
  if (this->destination_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination_address().data(), static_cast<int>(this->destination_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.DestinationKey.destination_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->destination_address(), output);
  }

  // uint64 destination_port = 2 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/destinations/destination/destination-port"];
  if (this->destination_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->destination_port(), output);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination destination = 3;
  if (this->has_destination()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->destination_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.DestinationKey)
}

::google::protobuf::uint8* TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.DestinationKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string destination_address = 1 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/destinations/destination/destination-address"];
  if (this->destination_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination_address().data(), static_cast<int>(this->destination_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.DestinationKey.destination_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->destination_address(), target);
  }

  // uint64 destination_port = 2 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/destinations/destination/destination-port"];
  if (this->destination_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->destination_port(), target);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination destination = 3;
  if (this->has_destination()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->destination_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.DestinationKey)
  return target;
}

size_t TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.DestinationKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string destination_address = 1 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/destinations/destination/destination-address"];
  if (this->destination_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destination_address());
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.Destination destination = 3;
  if (this->has_destination()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->destination_);
  }

  // uint64 destination_port = 2 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/destinations/destination/destination-port"];
  if (this->destination_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->destination_port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.DestinationKey)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.DestinationKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.DestinationKey)
    MergeFrom(*source);
  }
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey::MergeFrom(const TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.DestinationKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.destination_address().size() > 0) {

    destination_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_address_);
  }
  if (from.has_destination()) {
    mutable_destination()->::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_Destination::MergeFrom(from.destination());
  }
  if (from.destination_port() != 0) {
    set_destination_port(from.destination_port());
  }
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.DestinationKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey::CopyFrom(const TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.DestinationKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey::IsInitialized() const {
  return true;
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey::Swap(TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey::InternalSwap(TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey* other) {
  using std::swap;
  destination_address_.Swap(&other->destination_address_);
  swap(destination_, other->destination_);
  swap(destination_port_, other->destination_port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_DestinationGroups_DestinationGroup_Destinations_DestinationKey::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_DestinationGroups_DestinationGroup_Destinations::kDestinationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_DestinationGroups_DestinationGroup_Destinations::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_Destinations();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations)
}
TelemetrySystem_DestinationGroups_DestinationGroup_Destinations::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations(const TelemetrySystem_DestinationGroups_DestinationGroup_Destinations& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      destination_(from.destination_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations)
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations::SharedCtor() {
  _cached_size_ = 0;
}

TelemetrySystem_DestinationGroups_DestinationGroup_Destinations::~TelemetrySystem_DestinationGroups_DestinationGroup_Destinations() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations)
  SharedDtor();
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations::SharedDtor() {
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_DestinationGroups_DestinationGroup_Destinations::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_DestinationGroups_DestinationGroup_Destinations& TelemetrySystem_DestinationGroups_DestinationGroup_Destinations::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_Destinations();
  return *internal_default_instance();
}

TelemetrySystem_DestinationGroups_DestinationGroup_Destinations* TelemetrySystem_DestinationGroups_DestinationGroup_Destinations::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_DestinationGroups_DestinationGroup_Destinations* n = new TelemetrySystem_DestinationGroups_DestinationGroup_Destinations;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  destination_.Clear();
  _internal_metadata_.Clear();
}

bool TelemetrySystem_DestinationGroups_DestinationGroup_Destinations::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2111367234u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.DestinationKey destination = 263920904 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/destinations/destination"];
      case 263920904: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 2111367234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_destination()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations)
  return false;
#undef DO_
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.DestinationKey destination = 263920904 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/destinations/destination"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->destination_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      263920904, this->destination(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations)
}

::google::protobuf::uint8* TelemetrySystem_DestinationGroups_DestinationGroup_Destinations::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.DestinationKey destination = 263920904 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/destinations/destination"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->destination_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        263920904, this->destination(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations)
  return target;
}

size_t TelemetrySystem_DestinationGroups_DestinationGroup_Destinations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations.DestinationKey destination = 263920904 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/destinations/destination"];
  {
    unsigned int count = static_cast<unsigned int>(this->destination_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->destination(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_DestinationGroups_DestinationGroup_Destinations* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_DestinationGroups_DestinationGroup_Destinations>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations)
    MergeFrom(*source);
  }
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations::MergeFrom(const TelemetrySystem_DestinationGroups_DestinationGroup_Destinations& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  destination_.MergeFrom(from.destination_);
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations::CopyFrom(const TelemetrySystem_DestinationGroups_DestinationGroup_Destinations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_DestinationGroups_DestinationGroup_Destinations::IsInitialized() const {
  return true;
}

void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations::Swap(TelemetrySystem_DestinationGroups_DestinationGroup_Destinations* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_DestinationGroups_DestinationGroup_Destinations::InternalSwap(TelemetrySystem_DestinationGroups_DestinationGroup_Destinations* other) {
  using std::swap;
  destination_.InternalSwap(&other->destination_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_DestinationGroups_DestinationGroup_Destinations::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_DestinationGroups_DestinationGroup_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_telemetry::_TelemetrySystem_DestinationGroups_DestinationGroup_State_default_instance_._instance.get_mutable()->group_id_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void TelemetrySystem_DestinationGroups_DestinationGroup_State::clear_group_id() {
  if (GetArenaNoVirtual() == NULL && group_id_ != NULL) {
    delete group_id_;
  }
  group_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_DestinationGroups_DestinationGroup_State::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_DestinationGroups_DestinationGroup_State::TelemetrySystem_DestinationGroups_DestinationGroup_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.State)
}
TelemetrySystem_DestinationGroups_DestinationGroup_State::TelemetrySystem_DestinationGroups_DestinationGroup_State(const TelemetrySystem_DestinationGroups_DestinationGroup_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_group_id()) {
    group_id_ = new ::ywrapper::StringValue(*from.group_id_);
  } else {
    group_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.State)
}

void TelemetrySystem_DestinationGroups_DestinationGroup_State::SharedCtor() {
  group_id_ = NULL;
  _cached_size_ = 0;
}

TelemetrySystem_DestinationGroups_DestinationGroup_State::~TelemetrySystem_DestinationGroups_DestinationGroup_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.State)
  SharedDtor();
}

void TelemetrySystem_DestinationGroups_DestinationGroup_State::SharedDtor() {
  if (this != internal_default_instance()) delete group_id_;
}

void TelemetrySystem_DestinationGroups_DestinationGroup_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_DestinationGroups_DestinationGroup_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_DestinationGroups_DestinationGroup_State& TelemetrySystem_DestinationGroups_DestinationGroup_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup_State();
  return *internal_default_instance();
}

TelemetrySystem_DestinationGroups_DestinationGroup_State* TelemetrySystem_DestinationGroups_DestinationGroup_State::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_DestinationGroups_DestinationGroup_State* n = new TelemetrySystem_DestinationGroups_DestinationGroup_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_DestinationGroups_DestinationGroup_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && group_id_ != NULL) {
    delete group_id_;
  }
  group_id_ = NULL;
  _internal_metadata_.Clear();
}

bool TelemetrySystem_DestinationGroups_DestinationGroup_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3438335594u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue group_id = 429791949 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/state/group-id"];
      case 429791949: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 3438335594 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_group_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.State)
  return false;
#undef DO_
}

void TelemetrySystem_DestinationGroups_DestinationGroup_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue group_id = 429791949 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/state/group-id"];
  if (this->has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      429791949, *this->group_id_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.State)
}

::google::protobuf::uint8* TelemetrySystem_DestinationGroups_DestinationGroup_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue group_id = 429791949 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/state/group-id"];
  if (this->has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        429791949, *this->group_id_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.State)
  return target;
}

size_t TelemetrySystem_DestinationGroups_DestinationGroup_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue group_id = 429791949 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/state/group-id"];
  if (this->has_group_id()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->group_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_DestinationGroups_DestinationGroup_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.State)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_DestinationGroups_DestinationGroup_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_DestinationGroups_DestinationGroup_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.State)
    MergeFrom(*source);
  }
}

void TelemetrySystem_DestinationGroups_DestinationGroup_State::MergeFrom(const TelemetrySystem_DestinationGroups_DestinationGroup_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_group_id()) {
    mutable_group_id()->::ywrapper::StringValue::MergeFrom(from.group_id());
  }
}

void TelemetrySystem_DestinationGroups_DestinationGroup_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_DestinationGroups_DestinationGroup_State::CopyFrom(const TelemetrySystem_DestinationGroups_DestinationGroup_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_DestinationGroups_DestinationGroup_State::IsInitialized() const {
  return true;
}

void TelemetrySystem_DestinationGroups_DestinationGroup_State::Swap(TelemetrySystem_DestinationGroups_DestinationGroup_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_DestinationGroups_DestinationGroup_State::InternalSwap(TelemetrySystem_DestinationGroups_DestinationGroup_State* other) {
  using std::swap;
  swap(group_id_, other->group_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_DestinationGroups_DestinationGroup_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_DestinationGroups_DestinationGroup::InitAsDefaultInstance() {
  ::openconfig::openconfig_telemetry::_TelemetrySystem_DestinationGroups_DestinationGroup_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Config*>(
      ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Config::internal_default_instance());
  ::openconfig::openconfig_telemetry::_TelemetrySystem_DestinationGroups_DestinationGroup_default_instance_._instance.get_mutable()->destinations_ = const_cast< ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations*>(
      ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations::internal_default_instance());
  ::openconfig::openconfig_telemetry::_TelemetrySystem_DestinationGroups_DestinationGroup_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_State*>(
      ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_DestinationGroups_DestinationGroup::kConfigFieldNumber;
const int TelemetrySystem_DestinationGroups_DestinationGroup::kDestinationsFieldNumber;
const int TelemetrySystem_DestinationGroups_DestinationGroup::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_DestinationGroups_DestinationGroup::TelemetrySystem_DestinationGroups_DestinationGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup)
}
TelemetrySystem_DestinationGroups_DestinationGroup::TelemetrySystem_DestinationGroups_DestinationGroup(const TelemetrySystem_DestinationGroups_DestinationGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_destinations()) {
    destinations_ = new ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations(*from.destinations_);
  } else {
    destinations_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_State(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup)
}

void TelemetrySystem_DestinationGroups_DestinationGroup::SharedCtor() {
  ::memset(&destinations_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&destinations_)) + sizeof(state_));
  _cached_size_ = 0;
}

TelemetrySystem_DestinationGroups_DestinationGroup::~TelemetrySystem_DestinationGroups_DestinationGroup() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup)
  SharedDtor();
}

void TelemetrySystem_DestinationGroups_DestinationGroup::SharedDtor() {
  if (this != internal_default_instance()) delete destinations_;
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void TelemetrySystem_DestinationGroups_DestinationGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_DestinationGroups_DestinationGroup::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_DestinationGroups_DestinationGroup& TelemetrySystem_DestinationGroups_DestinationGroup::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroup();
  return *internal_default_instance();
}

TelemetrySystem_DestinationGroups_DestinationGroup* TelemetrySystem_DestinationGroups_DestinationGroup::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_DestinationGroups_DestinationGroup* n = new TelemetrySystem_DestinationGroups_DestinationGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_DestinationGroups_DestinationGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && destinations_ != NULL) {
    delete destinations_;
  }
  destinations_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool TelemetrySystem_DestinationGroups_DestinationGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(1533821482u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations destinations = 8565725 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/destinations"];
      case 8565725: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 68525802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_destinations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Config config = 28634316 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/config"];
      case 28634316: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 229074530 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.State state = 191727685 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/state"];
      case 191727685: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 1533821482 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup)
  return false;
#undef DO_
}

void TelemetrySystem_DestinationGroups_DestinationGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations destinations = 8565725 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/destinations"];
  if (this->has_destinations()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8565725, *this->destinations_, output);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Config config = 28634316 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28634316, *this->config_, output);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.State state = 191727685 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      191727685, *this->state_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup)
}

::google::protobuf::uint8* TelemetrySystem_DestinationGroups_DestinationGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations destinations = 8565725 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/destinations"];
  if (this->has_destinations()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8565725, *this->destinations_, deterministic, target);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Config config = 28634316 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        28634316, *this->config_, deterministic, target);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.State state = 191727685 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        191727685, *this->state_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup)
  return target;
}

size_t TelemetrySystem_DestinationGroups_DestinationGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Destinations destinations = 8565725 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/destinations"];
  if (this->has_destinations()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->destinations_);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.Config config = 28634316 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/config"];
  if (this->has_config()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup.State state = 191727685 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_DestinationGroups_DestinationGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_DestinationGroups_DestinationGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_DestinationGroups_DestinationGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup)
    MergeFrom(*source);
  }
}

void TelemetrySystem_DestinationGroups_DestinationGroup::MergeFrom(const TelemetrySystem_DestinationGroups_DestinationGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_destinations()) {
    mutable_destinations()->::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Destinations::MergeFrom(from.destinations());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_Config::MergeFrom(from.config());
  }
  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup_State::MergeFrom(from.state());
  }
}

void TelemetrySystem_DestinationGroups_DestinationGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_DestinationGroups_DestinationGroup::CopyFrom(const TelemetrySystem_DestinationGroups_DestinationGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_DestinationGroups_DestinationGroup::IsInitialized() const {
  return true;
}

void TelemetrySystem_DestinationGroups_DestinationGroup::Swap(TelemetrySystem_DestinationGroups_DestinationGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_DestinationGroups_DestinationGroup::InternalSwap(TelemetrySystem_DestinationGroups_DestinationGroup* other) {
  using std::swap;
  swap(destinations_, other->destinations_);
  swap(config_, other->config_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_DestinationGroups_DestinationGroup::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_DestinationGroups_DestinationGroupKey::InitAsDefaultInstance() {
  ::openconfig::openconfig_telemetry::_TelemetrySystem_DestinationGroups_DestinationGroupKey_default_instance_._instance.get_mutable()->destination_group_ = const_cast< ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup*>(
      ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_DestinationGroups_DestinationGroupKey::kGroupIdFieldNumber;
const int TelemetrySystem_DestinationGroups_DestinationGroupKey::kDestinationGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_DestinationGroups_DestinationGroupKey::TelemetrySystem_DestinationGroups_DestinationGroupKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroupKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroupKey)
}
TelemetrySystem_DestinationGroups_DestinationGroupKey::TelemetrySystem_DestinationGroups_DestinationGroupKey(const TelemetrySystem_DestinationGroups_DestinationGroupKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_id().size() > 0) {
    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  if (from.has_destination_group()) {
    destination_group_ = new ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup(*from.destination_group_);
  } else {
    destination_group_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroupKey)
}

void TelemetrySystem_DestinationGroups_DestinationGroupKey::SharedCtor() {
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_group_ = NULL;
  _cached_size_ = 0;
}

TelemetrySystem_DestinationGroups_DestinationGroupKey::~TelemetrySystem_DestinationGroups_DestinationGroupKey() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroupKey)
  SharedDtor();
}

void TelemetrySystem_DestinationGroups_DestinationGroupKey::SharedDtor() {
  group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete destination_group_;
}

void TelemetrySystem_DestinationGroups_DestinationGroupKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_DestinationGroups_DestinationGroupKey::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_DestinationGroups_DestinationGroupKey& TelemetrySystem_DestinationGroups_DestinationGroupKey::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_DestinationGroups_DestinationGroupKey();
  return *internal_default_instance();
}

TelemetrySystem_DestinationGroups_DestinationGroupKey* TelemetrySystem_DestinationGroups_DestinationGroupKey::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_DestinationGroups_DestinationGroupKey* n = new TelemetrySystem_DestinationGroups_DestinationGroupKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_DestinationGroups_DestinationGroupKey::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroupKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && destination_group_ != NULL) {
    delete destination_group_;
  }
  destination_group_ = NULL;
  _internal_metadata_.Clear();
}

bool TelemetrySystem_DestinationGroups_DestinationGroupKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroupKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string group_id = 1 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/group-id"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), static_cast<int>(this->group_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroupKey.group_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup destination_group = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroupKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroupKey)
  return false;
#undef DO_
}

void TelemetrySystem_DestinationGroups_DestinationGroupKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroupKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/group-id"];
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroupKey.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup destination_group = 2;
  if (this->has_destination_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->destination_group_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroupKey)
}

::google::protobuf::uint8* TelemetrySystem_DestinationGroups_DestinationGroupKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroupKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/group-id"];
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroupKey.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup destination_group = 2;
  if (this->has_destination_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->destination_group_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroupKey)
  return target;
}

size_t TelemetrySystem_DestinationGroups_DestinationGroupKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroupKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string group_id = 1 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group/group-id"];
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroup destination_group = 2;
  if (this->has_destination_group()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->destination_group_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_DestinationGroups_DestinationGroupKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroupKey)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_DestinationGroups_DestinationGroupKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_DestinationGroups_DestinationGroupKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroupKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroupKey)
    MergeFrom(*source);
  }
}

void TelemetrySystem_DestinationGroups_DestinationGroupKey::MergeFrom(const TelemetrySystem_DestinationGroups_DestinationGroupKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroupKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.group_id().size() > 0) {

    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  if (from.has_destination_group()) {
    mutable_destination_group()->::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups_DestinationGroup::MergeFrom(from.destination_group());
  }
}

void TelemetrySystem_DestinationGroups_DestinationGroupKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroupKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_DestinationGroups_DestinationGroupKey::CopyFrom(const TelemetrySystem_DestinationGroups_DestinationGroupKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroupKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_DestinationGroups_DestinationGroupKey::IsInitialized() const {
  return true;
}

void TelemetrySystem_DestinationGroups_DestinationGroupKey::Swap(TelemetrySystem_DestinationGroups_DestinationGroupKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_DestinationGroups_DestinationGroupKey::InternalSwap(TelemetrySystem_DestinationGroups_DestinationGroupKey* other) {
  using std::swap;
  group_id_.Swap(&other->group_id_);
  swap(destination_group_, other->destination_group_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_DestinationGroups_DestinationGroupKey::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_DestinationGroups::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_DestinationGroups::kDestinationGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_DestinationGroups::TelemetrySystem_DestinationGroups()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_DestinationGroups();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups)
}
TelemetrySystem_DestinationGroups::TelemetrySystem_DestinationGroups(const TelemetrySystem_DestinationGroups& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      destination_group_(from.destination_group_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups)
}

void TelemetrySystem_DestinationGroups::SharedCtor() {
  _cached_size_ = 0;
}

TelemetrySystem_DestinationGroups::~TelemetrySystem_DestinationGroups() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups)
  SharedDtor();
}

void TelemetrySystem_DestinationGroups::SharedDtor() {
}

void TelemetrySystem_DestinationGroups::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_DestinationGroups::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_DestinationGroups& TelemetrySystem_DestinationGroups::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_DestinationGroups();
  return *internal_default_instance();
}

TelemetrySystem_DestinationGroups* TelemetrySystem_DestinationGroups::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_DestinationGroups* n = new TelemetrySystem_DestinationGroups;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_DestinationGroups::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  destination_group_.Clear();
  _internal_metadata_.Clear();
}

bool TelemetrySystem_DestinationGroups::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(462313690u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroupKey destination_group = 57789211 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group"];
      case 57789211: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 462313690 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_destination_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups)
  return false;
#undef DO_
}

void TelemetrySystem_DestinationGroups::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroupKey destination_group = 57789211 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->destination_group_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      57789211, this->destination_group(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups)
}

::google::protobuf::uint8* TelemetrySystem_DestinationGroups::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroupKey destination_group = 57789211 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->destination_group_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        57789211, this->destination_group(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups)
  return target;
}

size_t TelemetrySystem_DestinationGroups::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups.DestinationGroupKey destination_group = 57789211 [(.yext.schemapath) = "/telemetry-system/destination-groups/destination-group"];
  {
    unsigned int count = static_cast<unsigned int>(this->destination_group_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->destination_group(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_DestinationGroups::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_DestinationGroups* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_DestinationGroups>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups)
    MergeFrom(*source);
  }
}

void TelemetrySystem_DestinationGroups::MergeFrom(const TelemetrySystem_DestinationGroups& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  destination_group_.MergeFrom(from.destination_group_);
}

void TelemetrySystem_DestinationGroups::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_DestinationGroups::CopyFrom(const TelemetrySystem_DestinationGroups& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_DestinationGroups::IsInitialized() const {
  return true;
}

void TelemetrySystem_DestinationGroups::Swap(TelemetrySystem_DestinationGroups* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_DestinationGroups::InternalSwap(TelemetrySystem_DestinationGroups* other) {
  using std::swap;
  destination_group_.InternalSwap(&other->destination_group_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_DestinationGroups::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_SensorGroups_SensorGroup_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_telemetry::_TelemetrySystem_SensorGroups_SensorGroup_Config_default_instance_._instance.get_mutable()->sensor_group_id_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void TelemetrySystem_SensorGroups_SensorGroup_Config::clear_sensor_group_id() {
  if (GetArenaNoVirtual() == NULL && sensor_group_id_ != NULL) {
    delete sensor_group_id_;
  }
  sensor_group_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_SensorGroups_SensorGroup_Config::kSensorGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_SensorGroups_SensorGroup_Config::TelemetrySystem_SensorGroups_SensorGroup_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.Config)
}
TelemetrySystem_SensorGroups_SensorGroup_Config::TelemetrySystem_SensorGroups_SensorGroup_Config(const TelemetrySystem_SensorGroups_SensorGroup_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sensor_group_id()) {
    sensor_group_id_ = new ::ywrapper::StringValue(*from.sensor_group_id_);
  } else {
    sensor_group_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.Config)
}

void TelemetrySystem_SensorGroups_SensorGroup_Config::SharedCtor() {
  sensor_group_id_ = NULL;
  _cached_size_ = 0;
}

TelemetrySystem_SensorGroups_SensorGroup_Config::~TelemetrySystem_SensorGroups_SensorGroup_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.Config)
  SharedDtor();
}

void TelemetrySystem_SensorGroups_SensorGroup_Config::SharedDtor() {
  if (this != internal_default_instance()) delete sensor_group_id_;
}

void TelemetrySystem_SensorGroups_SensorGroup_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_SensorGroups_SensorGroup_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_SensorGroups_SensorGroup_Config& TelemetrySystem_SensorGroups_SensorGroup_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_Config();
  return *internal_default_instance();
}

TelemetrySystem_SensorGroups_SensorGroup_Config* TelemetrySystem_SensorGroups_SensorGroup_Config::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_SensorGroups_SensorGroup_Config* n = new TelemetrySystem_SensorGroups_SensorGroup_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_SensorGroups_SensorGroup_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sensor_group_id_ != NULL) {
    delete sensor_group_id_;
  }
  sensor_group_id_ = NULL;
  _internal_metadata_.Clear();
}

bool TelemetrySystem_SensorGroups_SensorGroup_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2328106394u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue sensor_group_id = 291013299 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/config/sensor-group-id"];
      case 291013299: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 2328106394 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_group_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.Config)
  return false;
#undef DO_
}

void TelemetrySystem_SensorGroups_SensorGroup_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue sensor_group_id = 291013299 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/config/sensor-group-id"];
  if (this->has_sensor_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      291013299, *this->sensor_group_id_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.Config)
}

::google::protobuf::uint8* TelemetrySystem_SensorGroups_SensorGroup_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue sensor_group_id = 291013299 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/config/sensor-group-id"];
  if (this->has_sensor_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        291013299, *this->sensor_group_id_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.Config)
  return target;
}

size_t TelemetrySystem_SensorGroups_SensorGroup_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue sensor_group_id = 291013299 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/config/sensor-group-id"];
  if (this->has_sensor_group_id()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sensor_group_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_SensorGroups_SensorGroup_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_SensorGroups_SensorGroup_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_SensorGroups_SensorGroup_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.Config)
    MergeFrom(*source);
  }
}

void TelemetrySystem_SensorGroups_SensorGroup_Config::MergeFrom(const TelemetrySystem_SensorGroups_SensorGroup_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sensor_group_id()) {
    mutable_sensor_group_id()->::ywrapper::StringValue::MergeFrom(from.sensor_group_id());
  }
}

void TelemetrySystem_SensorGroups_SensorGroup_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_SensorGroups_SensorGroup_Config::CopyFrom(const TelemetrySystem_SensorGroups_SensorGroup_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_SensorGroups_SensorGroup_Config::IsInitialized() const {
  return true;
}

void TelemetrySystem_SensorGroups_SensorGroup_Config::Swap(TelemetrySystem_SensorGroups_SensorGroup_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_SensorGroups_SensorGroup_Config::InternalSwap(TelemetrySystem_SensorGroups_SensorGroup_Config* other) {
  using std::swap;
  swap(sensor_group_id_, other->sensor_group_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_SensorGroups_SensorGroup_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_telemetry::_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config_default_instance_._instance.get_mutable()->exclude_filter_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_telemetry::_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config_default_instance_._instance.get_mutable()->path_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config::clear_exclude_filter() {
  if (GetArenaNoVirtual() == NULL && exclude_filter_ != NULL) {
    delete exclude_filter_;
  }
  exclude_filter_ = NULL;
}
void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config::clear_path() {
  if (GetArenaNoVirtual() == NULL && path_ != NULL) {
    delete path_;
  }
  path_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config::kExcludeFilterFieldNumber;
const int TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Config)
}
TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config(const TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_exclude_filter()) {
    exclude_filter_ = new ::ywrapper::StringValue(*from.exclude_filter_);
  } else {
    exclude_filter_ = NULL;
  }
  if (from.has_path()) {
    path_ = new ::ywrapper::StringValue(*from.path_);
  } else {
    path_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Config)
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config::SharedCtor() {
  ::memset(&exclude_filter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&path_) -
      reinterpret_cast<char*>(&exclude_filter_)) + sizeof(path_));
  _cached_size_ = 0;
}

TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config::~TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Config)
  SharedDtor();
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config::SharedDtor() {
  if (this != internal_default_instance()) delete exclude_filter_;
  if (this != internal_default_instance()) delete path_;
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config& TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config();
  return *internal_default_instance();
}

TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config* TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config* n = new TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && exclude_filter_ != NULL) {
    delete exclude_filter_;
  }
  exclude_filter_ = NULL;
  if (GetArenaNoVirtual() == NULL && path_ != NULL) {
    delete path_;
  }
  path_ = NULL;
  _internal_metadata_.Clear();
}

bool TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4159735274u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue exclude_filter = 252816029 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path/config/exclude-filter"];
      case 252816029: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 2022528234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_exclude_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue path = 519966909 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path/config/path"];
      case 519966909: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 4159735274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Config)
  return false;
#undef DO_
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue exclude_filter = 252816029 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path/config/exclude-filter"];
  if (this->has_exclude_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      252816029, *this->exclude_filter_, output);
  }

  // .ywrapper.StringValue path = 519966909 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path/config/path"];
  if (this->has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      519966909, *this->path_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Config)
}

::google::protobuf::uint8* TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue exclude_filter = 252816029 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path/config/exclude-filter"];
  if (this->has_exclude_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        252816029, *this->exclude_filter_, deterministic, target);
  }

  // .ywrapper.StringValue path = 519966909 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path/config/path"];
  if (this->has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        519966909, *this->path_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Config)
  return target;
}

size_t TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue exclude_filter = 252816029 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path/config/exclude-filter"];
  if (this->has_exclude_filter()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->exclude_filter_);
  }

  // .ywrapper.StringValue path = 519966909 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path/config/path"];
  if (this->has_path()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->path_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Config)
    MergeFrom(*source);
  }
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config::MergeFrom(const TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_exclude_filter()) {
    mutable_exclude_filter()->::ywrapper::StringValue::MergeFrom(from.exclude_filter());
  }
  if (from.has_path()) {
    mutable_path()->::ywrapper::StringValue::MergeFrom(from.path());
  }
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config::CopyFrom(const TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config::IsInitialized() const {
  return true;
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config::Swap(TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config::InternalSwap(TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config* other) {
  using std::swap;
  swap(exclude_filter_, other->exclude_filter_);
  swap(path_, other->path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_telemetry::_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State_default_instance_._instance.get_mutable()->exclude_filter_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_telemetry::_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State_default_instance_._instance.get_mutable()->path_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State::clear_exclude_filter() {
  if (GetArenaNoVirtual() == NULL && exclude_filter_ != NULL) {
    delete exclude_filter_;
  }
  exclude_filter_ = NULL;
}
void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State::clear_path() {
  if (GetArenaNoVirtual() == NULL && path_ != NULL) {
    delete path_;
  }
  path_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State::kExcludeFilterFieldNumber;
const int TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.State)
}
TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State(const TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_exclude_filter()) {
    exclude_filter_ = new ::ywrapper::StringValue(*from.exclude_filter_);
  } else {
    exclude_filter_ = NULL;
  }
  if (from.has_path()) {
    path_ = new ::ywrapper::StringValue(*from.path_);
  } else {
    path_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.State)
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State::SharedCtor() {
  ::memset(&exclude_filter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&path_) -
      reinterpret_cast<char*>(&exclude_filter_)) + sizeof(path_));
  _cached_size_ = 0;
}

TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State::~TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.State)
  SharedDtor();
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State::SharedDtor() {
  if (this != internal_default_instance()) delete exclude_filter_;
  if (this != internal_default_instance()) delete path_;
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State& TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State();
  return *internal_default_instance();
}

TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State* TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State* n = new TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && exclude_filter_ != NULL) {
    delete exclude_filter_;
  }
  exclude_filter_ = NULL;
  if (GetArenaNoVirtual() == NULL && path_ != NULL) {
    delete path_;
  }
  path_ = NULL;
  _internal_metadata_.Clear();
}

bool TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4254583906u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue exclude_filter = 163851272 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path/state/exclude-filter"];
      case 163851272: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 1310810178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_exclude_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue path = 531822988 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path/state/path"];
      case 531822988: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 4254583906 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.State)
  return false;
#undef DO_
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue exclude_filter = 163851272 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path/state/exclude-filter"];
  if (this->has_exclude_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      163851272, *this->exclude_filter_, output);
  }

  // .ywrapper.StringValue path = 531822988 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path/state/path"];
  if (this->has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      531822988, *this->path_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.State)
}

::google::protobuf::uint8* TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue exclude_filter = 163851272 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path/state/exclude-filter"];
  if (this->has_exclude_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        163851272, *this->exclude_filter_, deterministic, target);
  }

  // .ywrapper.StringValue path = 531822988 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path/state/path"];
  if (this->has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        531822988, *this->path_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.State)
  return target;
}

size_t TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue exclude_filter = 163851272 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path/state/exclude-filter"];
  if (this->has_exclude_filter()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->exclude_filter_);
  }

  // .ywrapper.StringValue path = 531822988 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path/state/path"];
  if (this->has_path()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->path_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.State)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.State)
    MergeFrom(*source);
  }
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State::MergeFrom(const TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_exclude_filter()) {
    mutable_exclude_filter()->::ywrapper::StringValue::MergeFrom(from.exclude_filter());
  }
  if (from.has_path()) {
    mutable_path()->::ywrapper::StringValue::MergeFrom(from.path());
  }
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State::CopyFrom(const TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State::IsInitialized() const {
  return true;
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State::Swap(TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State::InternalSwap(TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State* other) {
  using std::swap;
  swap(exclude_filter_, other->exclude_filter_);
  swap(path_, other->path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath::InitAsDefaultInstance() {
  ::openconfig::openconfig_telemetry::_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config*>(
      ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config::internal_default_instance());
  ::openconfig::openconfig_telemetry::_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State*>(
      ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath::kConfigFieldNumber;
const int TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath)
}
TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath(const TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath)
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&state_)) + sizeof(config_));
  _cached_size_ = 0;
}

TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath::~TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath)
  SharedDtor();
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete config_;
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath& TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath();
  return *internal_default_instance();
}

TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath* TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath* n = new TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  _internal_metadata_.Clear();
}

bool TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(1741645994u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.State state = 180317578 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path/state"];
      case 180317578: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 1442540626 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Config config = 217705749 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path/config"];
      case 217705749: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 1741645994 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath)
  return false;
#undef DO_
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.State state = 180317578 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      180317578, *this->state_, output);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Config config = 217705749 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      217705749, *this->config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath)
}

::google::protobuf::uint8* TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.State state = 180317578 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        180317578, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Config config = 217705749 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        217705749, *this->config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath)
  return target;
}

size_t TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.State state = 180317578 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath.Config config = 217705749 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath)
    MergeFrom(*source);
  }
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath::MergeFrom(const TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_State::MergeFrom(from.state());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath_Config::MergeFrom(from.config());
  }
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath::CopyFrom(const TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath::IsInitialized() const {
  return true;
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath::Swap(TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath::InternalSwap(TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(config_, other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey::InitAsDefaultInstance() {
  ::openconfig::openconfig_telemetry::_TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey_default_instance_._instance.get_mutable()->sensor_path_ = const_cast< ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath*>(
      ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey::kPathFieldNumber;
const int TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey::kSensorPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPathKey)
}
TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey(const TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.has_sensor_path()) {
    sensor_path_ = new ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath(*from.sensor_path_);
  } else {
    sensor_path_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPathKey)
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sensor_path_ = NULL;
  _cached_size_ = 0;
}

TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey::~TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPathKey)
  SharedDtor();
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sensor_path_;
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey& TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey();
  return *internal_default_instance();
}

TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey* TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey* n = new TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPathKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && sensor_path_ != NULL) {
    delete sensor_path_;
  }
  sensor_path_ = NULL;
  _internal_metadata_.Clear();
}

bool TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPathKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path/path"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPathKey.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath sensor_path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPathKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPathKey)
  return false;
#undef DO_
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPathKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path/path"];
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPathKey.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath sensor_path = 2;
  if (this->has_sensor_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->sensor_path_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPathKey)
}

::google::protobuf::uint8* TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPathKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path/path"];
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPathKey.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath sensor_path = 2;
  if (this->has_sensor_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->sensor_path_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPathKey)
  return target;
}

size_t TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPathKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string path = 1 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path/path"];
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPath sensor_path = 2;
  if (this->has_sensor_path()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sensor_path_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPathKey)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPathKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPathKey)
    MergeFrom(*source);
  }
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey::MergeFrom(const TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPathKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.has_sensor_path()) {
    mutable_sensor_path()->::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPath::MergeFrom(from.sensor_path());
  }
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPathKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey::CopyFrom(const TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPathKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey::IsInitialized() const {
  return true;
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey::Swap(TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey::InternalSwap(TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey* other) {
  using std::swap;
  path_.Swap(&other->path_);
  swap(sensor_path_, other->sensor_path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_SensorGroups_SensorGroup_SensorPaths_SensorPathKey::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_SensorGroups_SensorGroup_SensorPaths::kSensorPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_SensorGroups_SensorGroup_SensorPaths::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_SensorPaths();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths)
}
TelemetrySystem_SensorGroups_SensorGroup_SensorPaths::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths(const TelemetrySystem_SensorGroups_SensorGroup_SensorPaths& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sensor_path_(from.sensor_path_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths)
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths::SharedCtor() {
  _cached_size_ = 0;
}

TelemetrySystem_SensorGroups_SensorGroup_SensorPaths::~TelemetrySystem_SensorGroups_SensorGroup_SensorPaths() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths)
  SharedDtor();
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths::SharedDtor() {
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_SensorGroups_SensorGroup_SensorPaths::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_SensorGroups_SensorGroup_SensorPaths& TelemetrySystem_SensorGroups_SensorGroup_SensorPaths::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_SensorPaths();
  return *internal_default_instance();
}

TelemetrySystem_SensorGroups_SensorGroup_SensorPaths* TelemetrySystem_SensorGroups_SensorGroup_SensorPaths::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_SensorGroups_SensorGroup_SensorPaths* n = new TelemetrySystem_SensorGroups_SensorGroup_SensorPaths;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensor_path_.Clear();
  _internal_metadata_.Clear();
}

bool TelemetrySystem_SensorGroups_SensorGroup_SensorPaths::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(634291458u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPathKey sensor_path = 79286432 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path"];
      case 79286432: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 634291458 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_sensor_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths)
  return false;
#undef DO_
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPathKey sensor_path = 79286432 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_path_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      79286432, this->sensor_path(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths)
}

::google::protobuf::uint8* TelemetrySystem_SensorGroups_SensorGroup_SensorPaths::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPathKey sensor_path = 79286432 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_path_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        79286432, this->sensor_path(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths)
  return target;
}

size_t TelemetrySystem_SensorGroups_SensorGroup_SensorPaths::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths.SensorPathKey sensor_path = 79286432 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path"];
  {
    unsigned int count = static_cast<unsigned int>(this->sensor_path_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sensor_path(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_SensorGroups_SensorGroup_SensorPaths* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_SensorGroups_SensorGroup_SensorPaths>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths)
    MergeFrom(*source);
  }
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths::MergeFrom(const TelemetrySystem_SensorGroups_SensorGroup_SensorPaths& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensor_path_.MergeFrom(from.sensor_path_);
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths::CopyFrom(const TelemetrySystem_SensorGroups_SensorGroup_SensorPaths& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_SensorGroups_SensorGroup_SensorPaths::IsInitialized() const {
  return true;
}

void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths::Swap(TelemetrySystem_SensorGroups_SensorGroup_SensorPaths* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_SensorGroups_SensorGroup_SensorPaths::InternalSwap(TelemetrySystem_SensorGroups_SensorGroup_SensorPaths* other) {
  using std::swap;
  sensor_path_.InternalSwap(&other->sensor_path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_SensorGroups_SensorGroup_SensorPaths::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_SensorGroups_SensorGroup_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_telemetry::_TelemetrySystem_SensorGroups_SensorGroup_State_default_instance_._instance.get_mutable()->sensor_group_id_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void TelemetrySystem_SensorGroups_SensorGroup_State::clear_sensor_group_id() {
  if (GetArenaNoVirtual() == NULL && sensor_group_id_ != NULL) {
    delete sensor_group_id_;
  }
  sensor_group_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_SensorGroups_SensorGroup_State::kSensorGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_SensorGroups_SensorGroup_State::TelemetrySystem_SensorGroups_SensorGroup_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.State)
}
TelemetrySystem_SensorGroups_SensorGroup_State::TelemetrySystem_SensorGroups_SensorGroup_State(const TelemetrySystem_SensorGroups_SensorGroup_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sensor_group_id()) {
    sensor_group_id_ = new ::ywrapper::StringValue(*from.sensor_group_id_);
  } else {
    sensor_group_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.State)
}

void TelemetrySystem_SensorGroups_SensorGroup_State::SharedCtor() {
  sensor_group_id_ = NULL;
  _cached_size_ = 0;
}

TelemetrySystem_SensorGroups_SensorGroup_State::~TelemetrySystem_SensorGroups_SensorGroup_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.State)
  SharedDtor();
}

void TelemetrySystem_SensorGroups_SensorGroup_State::SharedDtor() {
  if (this != internal_default_instance()) delete sensor_group_id_;
}

void TelemetrySystem_SensorGroups_SensorGroup_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_SensorGroups_SensorGroup_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_SensorGroups_SensorGroup_State& TelemetrySystem_SensorGroups_SensorGroup_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_SensorGroups_SensorGroup_State();
  return *internal_default_instance();
}

TelemetrySystem_SensorGroups_SensorGroup_State* TelemetrySystem_SensorGroups_SensorGroup_State::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_SensorGroups_SensorGroup_State* n = new TelemetrySystem_SensorGroups_SensorGroup_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_SensorGroups_SensorGroup_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sensor_group_id_ != NULL) {
    delete sensor_group_id_;
  }
  sensor_group_id_ = NULL;
  _internal_metadata_.Clear();
}

bool TelemetrySystem_SensorGroups_SensorGroup_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3707478322u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue sensor_group_id = 463434790 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/state/sensor-group-id"];
      case 463434790: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 3707478322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_group_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.State)
  return false;
#undef DO_
}

void TelemetrySystem_SensorGroups_SensorGroup_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue sensor_group_id = 463434790 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/state/sensor-group-id"];
  if (this->has_sensor_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      463434790, *this->sensor_group_id_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.State)
}

::google::protobuf::uint8* TelemetrySystem_SensorGroups_SensorGroup_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue sensor_group_id = 463434790 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/state/sensor-group-id"];
  if (this->has_sensor_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        463434790, *this->sensor_group_id_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.State)
  return target;
}

size_t TelemetrySystem_SensorGroups_SensorGroup_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue sensor_group_id = 463434790 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/state/sensor-group-id"];
  if (this->has_sensor_group_id()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sensor_group_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_SensorGroups_SensorGroup_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.State)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_SensorGroups_SensorGroup_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_SensorGroups_SensorGroup_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.State)
    MergeFrom(*source);
  }
}

void TelemetrySystem_SensorGroups_SensorGroup_State::MergeFrom(const TelemetrySystem_SensorGroups_SensorGroup_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sensor_group_id()) {
    mutable_sensor_group_id()->::ywrapper::StringValue::MergeFrom(from.sensor_group_id());
  }
}

void TelemetrySystem_SensorGroups_SensorGroup_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_SensorGroups_SensorGroup_State::CopyFrom(const TelemetrySystem_SensorGroups_SensorGroup_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_SensorGroups_SensorGroup_State::IsInitialized() const {
  return true;
}

void TelemetrySystem_SensorGroups_SensorGroup_State::Swap(TelemetrySystem_SensorGroups_SensorGroup_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_SensorGroups_SensorGroup_State::InternalSwap(TelemetrySystem_SensorGroups_SensorGroup_State* other) {
  using std::swap;
  swap(sensor_group_id_, other->sensor_group_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_SensorGroups_SensorGroup_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_SensorGroups_SensorGroup::InitAsDefaultInstance() {
  ::openconfig::openconfig_telemetry::_TelemetrySystem_SensorGroups_SensorGroup_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_Config*>(
      ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_Config::internal_default_instance());
  ::openconfig::openconfig_telemetry::_TelemetrySystem_SensorGroups_SensorGroup_default_instance_._instance.get_mutable()->sensor_paths_ = const_cast< ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths*>(
      ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths::internal_default_instance());
  ::openconfig::openconfig_telemetry::_TelemetrySystem_SensorGroups_SensorGroup_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_State*>(
      ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_SensorGroups_SensorGroup::kConfigFieldNumber;
const int TelemetrySystem_SensorGroups_SensorGroup::kSensorPathsFieldNumber;
const int TelemetrySystem_SensorGroups_SensorGroup::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_SensorGroups_SensorGroup::TelemetrySystem_SensorGroups_SensorGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_SensorGroups_SensorGroup();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup)
}
TelemetrySystem_SensorGroups_SensorGroup::TelemetrySystem_SensorGroups_SensorGroup(const TelemetrySystem_SensorGroups_SensorGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_sensor_paths()) {
    sensor_paths_ = new ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths(*from.sensor_paths_);
  } else {
    sensor_paths_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup)
}

void TelemetrySystem_SensorGroups_SensorGroup::SharedCtor() {
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sensor_paths_) -
      reinterpret_cast<char*>(&config_)) + sizeof(sensor_paths_));
  _cached_size_ = 0;
}

TelemetrySystem_SensorGroups_SensorGroup::~TelemetrySystem_SensorGroups_SensorGroup() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup)
  SharedDtor();
}

void TelemetrySystem_SensorGroups_SensorGroup::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete sensor_paths_;
}

void TelemetrySystem_SensorGroups_SensorGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_SensorGroups_SensorGroup::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_SensorGroups_SensorGroup& TelemetrySystem_SensorGroups_SensorGroup::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_SensorGroups_SensorGroup();
  return *internal_default_instance();
}

TelemetrySystem_SensorGroups_SensorGroup* TelemetrySystem_SensorGroups_SensorGroup::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_SensorGroups_SensorGroup* n = new TelemetrySystem_SensorGroups_SensorGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_SensorGroups_SensorGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && sensor_paths_ != NULL) {
    delete sensor_paths_;
  }
  sensor_paths_ = NULL;
  _internal_metadata_.Clear();
}

bool TelemetrySystem_SensorGroups_SensorGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4040757626u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.Config config = 202220420 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/config"];
      case 202220420: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 1617763362 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.State state = 464740509 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/state"];
      case 464740509: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 3717924074 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths sensor_paths = 505094703 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/sensor-paths"];
      case 505094703: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 4040757626 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_paths()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup)
  return false;
#undef DO_
}

void TelemetrySystem_SensorGroups_SensorGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.Config config = 202220420 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      202220420, *this->config_, output);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.State state = 464740509 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      464740509, *this->state_, output);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths sensor_paths = 505094703 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/sensor-paths"];
  if (this->has_sensor_paths()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      505094703, *this->sensor_paths_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup)
}

::google::protobuf::uint8* TelemetrySystem_SensorGroups_SensorGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.Config config = 202220420 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        202220420, *this->config_, deterministic, target);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.State state = 464740509 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        464740509, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths sensor_paths = 505094703 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/sensor-paths"];
  if (this->has_sensor_paths()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        505094703, *this->sensor_paths_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup)
  return target;
}

size_t TelemetrySystem_SensorGroups_SensorGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.Config config = 202220420 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.State state = 464740509 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup.SensorPaths sensor_paths = 505094703 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/sensor-paths"];
  if (this->has_sensor_paths()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sensor_paths_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_SensorGroups_SensorGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_SensorGroups_SensorGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_SensorGroups_SensorGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup)
    MergeFrom(*source);
  }
}

void TelemetrySystem_SensorGroups_SensorGroup::MergeFrom(const TelemetrySystem_SensorGroups_SensorGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_Config::MergeFrom(from.config());
  }
  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_State::MergeFrom(from.state());
  }
  if (from.has_sensor_paths()) {
    mutable_sensor_paths()->::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup_SensorPaths::MergeFrom(from.sensor_paths());
  }
}

void TelemetrySystem_SensorGroups_SensorGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_SensorGroups_SensorGroup::CopyFrom(const TelemetrySystem_SensorGroups_SensorGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_SensorGroups_SensorGroup::IsInitialized() const {
  return true;
}

void TelemetrySystem_SensorGroups_SensorGroup::Swap(TelemetrySystem_SensorGroups_SensorGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_SensorGroups_SensorGroup::InternalSwap(TelemetrySystem_SensorGroups_SensorGroup* other) {
  using std::swap;
  swap(config_, other->config_);
  swap(state_, other->state_);
  swap(sensor_paths_, other->sensor_paths_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_SensorGroups_SensorGroup::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_SensorGroups_SensorGroupKey::InitAsDefaultInstance() {
  ::openconfig::openconfig_telemetry::_TelemetrySystem_SensorGroups_SensorGroupKey_default_instance_._instance.get_mutable()->sensor_group_ = const_cast< ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup*>(
      ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_SensorGroups_SensorGroupKey::kSensorGroupIdFieldNumber;
const int TelemetrySystem_SensorGroups_SensorGroupKey::kSensorGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_SensorGroups_SensorGroupKey::TelemetrySystem_SensorGroups_SensorGroupKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_SensorGroups_SensorGroupKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroupKey)
}
TelemetrySystem_SensorGroups_SensorGroupKey::TelemetrySystem_SensorGroups_SensorGroupKey(const TelemetrySystem_SensorGroups_SensorGroupKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sensor_group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sensor_group_id().size() > 0) {
    sensor_group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensor_group_id_);
  }
  if (from.has_sensor_group()) {
    sensor_group_ = new ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup(*from.sensor_group_);
  } else {
    sensor_group_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroupKey)
}

void TelemetrySystem_SensorGroups_SensorGroupKey::SharedCtor() {
  sensor_group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sensor_group_ = NULL;
  _cached_size_ = 0;
}

TelemetrySystem_SensorGroups_SensorGroupKey::~TelemetrySystem_SensorGroups_SensorGroupKey() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroupKey)
  SharedDtor();
}

void TelemetrySystem_SensorGroups_SensorGroupKey::SharedDtor() {
  sensor_group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sensor_group_;
}

void TelemetrySystem_SensorGroups_SensorGroupKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_SensorGroups_SensorGroupKey::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_SensorGroups_SensorGroupKey& TelemetrySystem_SensorGroups_SensorGroupKey::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_SensorGroups_SensorGroupKey();
  return *internal_default_instance();
}

TelemetrySystem_SensorGroups_SensorGroupKey* TelemetrySystem_SensorGroups_SensorGroupKey::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_SensorGroups_SensorGroupKey* n = new TelemetrySystem_SensorGroups_SensorGroupKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_SensorGroups_SensorGroupKey::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroupKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensor_group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && sensor_group_ != NULL) {
    delete sensor_group_;
  }
  sensor_group_ = NULL;
  _internal_metadata_.Clear();
}

bool TelemetrySystem_SensorGroups_SensorGroupKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroupKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sensor_group_id = 1 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/sensor-group-id"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensor_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sensor_group_id().data(), static_cast<int>(this->sensor_group_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroupKey.sensor_group_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup sensor_group = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroupKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroupKey)
  return false;
#undef DO_
}

void TelemetrySystem_SensorGroups_SensorGroupKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroupKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sensor_group_id = 1 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/sensor-group-id"];
  if (this->sensor_group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sensor_group_id().data(), static_cast<int>(this->sensor_group_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroupKey.sensor_group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sensor_group_id(), output);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup sensor_group = 2;
  if (this->has_sensor_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->sensor_group_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroupKey)
}

::google::protobuf::uint8* TelemetrySystem_SensorGroups_SensorGroupKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroupKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sensor_group_id = 1 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/sensor-group-id"];
  if (this->sensor_group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sensor_group_id().data(), static_cast<int>(this->sensor_group_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroupKey.sensor_group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sensor_group_id(), target);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup sensor_group = 2;
  if (this->has_sensor_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->sensor_group_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroupKey)
  return target;
}

size_t TelemetrySystem_SensorGroups_SensorGroupKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroupKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sensor_group_id = 1 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group/sensor-group-id"];
  if (this->sensor_group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sensor_group_id());
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroup sensor_group = 2;
  if (this->has_sensor_group()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sensor_group_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_SensorGroups_SensorGroupKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroupKey)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_SensorGroups_SensorGroupKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_SensorGroups_SensorGroupKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroupKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroupKey)
    MergeFrom(*source);
  }
}

void TelemetrySystem_SensorGroups_SensorGroupKey::MergeFrom(const TelemetrySystem_SensorGroups_SensorGroupKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroupKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sensor_group_id().size() > 0) {

    sensor_group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensor_group_id_);
  }
  if (from.has_sensor_group()) {
    mutable_sensor_group()->::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups_SensorGroup::MergeFrom(from.sensor_group());
  }
}

void TelemetrySystem_SensorGroups_SensorGroupKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroupKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_SensorGroups_SensorGroupKey::CopyFrom(const TelemetrySystem_SensorGroups_SensorGroupKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroupKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_SensorGroups_SensorGroupKey::IsInitialized() const {
  return true;
}

void TelemetrySystem_SensorGroups_SensorGroupKey::Swap(TelemetrySystem_SensorGroups_SensorGroupKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_SensorGroups_SensorGroupKey::InternalSwap(TelemetrySystem_SensorGroups_SensorGroupKey* other) {
  using std::swap;
  sensor_group_id_.Swap(&other->sensor_group_id_);
  swap(sensor_group_, other->sensor_group_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_SensorGroups_SensorGroupKey::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_SensorGroups::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_SensorGroups::kSensorGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_SensorGroups::TelemetrySystem_SensorGroups()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_SensorGroups();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups)
}
TelemetrySystem_SensorGroups::TelemetrySystem_SensorGroups(const TelemetrySystem_SensorGroups& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sensor_group_(from.sensor_group_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups)
}

void TelemetrySystem_SensorGroups::SharedCtor() {
  _cached_size_ = 0;
}

TelemetrySystem_SensorGroups::~TelemetrySystem_SensorGroups() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups)
  SharedDtor();
}

void TelemetrySystem_SensorGroups::SharedDtor() {
}

void TelemetrySystem_SensorGroups::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_SensorGroups::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_SensorGroups& TelemetrySystem_SensorGroups::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_SensorGroups();
  return *internal_default_instance();
}

TelemetrySystem_SensorGroups* TelemetrySystem_SensorGroups::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_SensorGroups* n = new TelemetrySystem_SensorGroups;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_SensorGroups::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensor_group_.Clear();
  _internal_metadata_.Clear();
}

bool TelemetrySystem_SensorGroups::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2421194778u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroupKey sensor_group = 302649347 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group"];
      case 302649347: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 2421194778 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_sensor_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups)
  return false;
#undef DO_
}

void TelemetrySystem_SensorGroups::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroupKey sensor_group = 302649347 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_group_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      302649347, this->sensor_group(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups)
}

::google::protobuf::uint8* TelemetrySystem_SensorGroups::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroupKey sensor_group = 302649347 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_group_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        302649347, this->sensor_group(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups)
  return target;
}

size_t TelemetrySystem_SensorGroups::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups.SensorGroupKey sensor_group = 302649347 [(.yext.schemapath) = "/telemetry-system/sensor-groups/sensor-group"];
  {
    unsigned int count = static_cast<unsigned int>(this->sensor_group_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sensor_group(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_SensorGroups::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_SensorGroups* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_SensorGroups>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups)
    MergeFrom(*source);
  }
}

void TelemetrySystem_SensorGroups::MergeFrom(const TelemetrySystem_SensorGroups& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensor_group_.MergeFrom(from.sensor_group_);
}

void TelemetrySystem_SensorGroups::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_SensorGroups::CopyFrom(const TelemetrySystem_SensorGroups& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_SensorGroups::IsInitialized() const {
  return true;
}

void TelemetrySystem_SensorGroups::Swap(TelemetrySystem_SensorGroups* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_SensorGroups::InternalSwap(TelemetrySystem_SensorGroups* other) {
  using std::swap;
  sensor_group_.InternalSwap(&other->sensor_group_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_SensorGroups::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State_default_instance_._instance.get_mutable()->exclude_filter_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State_default_instance_._instance.get_mutable()->path_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State::clear_exclude_filter() {
  if (GetArenaNoVirtual() == NULL && exclude_filter_ != NULL) {
    delete exclude_filter_;
  }
  exclude_filter_ = NULL;
}
void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State::clear_path() {
  if (GetArenaNoVirtual() == NULL && path_ != NULL) {
    delete path_;
  }
  path_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State::kExcludeFilterFieldNumber;
const int TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath.State)
}
TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State(const TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_exclude_filter()) {
    exclude_filter_ = new ::ywrapper::StringValue(*from.exclude_filter_);
  } else {
    exclude_filter_ = NULL;
  }
  if (from.has_path()) {
    path_ = new ::ywrapper::StringValue(*from.path_);
  } else {
    path_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath.State)
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State::SharedCtor() {
  ::memset(&exclude_filter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&path_) -
      reinterpret_cast<char*>(&exclude_filter_)) + sizeof(path_));
  _cached_size_ = 0;
}

TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State::~TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath.State)
  SharedDtor();
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State::SharedDtor() {
  if (this != internal_default_instance()) delete exclude_filter_;
  if (this != internal_default_instance()) delete path_;
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State& TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State();
  return *internal_default_instance();
}

TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State* TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State* n = new TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && exclude_filter_ != NULL) {
    delete exclude_filter_;
  }
  exclude_filter_ = NULL;
  if (GetArenaNoVirtual() == NULL && path_ != NULL) {
    delete path_;
  }
  path_ = NULL;
  _internal_metadata_.Clear();
}

bool TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2980327378u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue exclude_filter = 248310562 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/sensor-paths/sensor-path/state/exclude-filter"];
      case 248310562: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 1986484498 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_exclude_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue path = 372540922 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/sensor-paths/sensor-path/state/path"];
      case 372540922: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 2980327378 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath.State)
  return false;
#undef DO_
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue exclude_filter = 248310562 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/sensor-paths/sensor-path/state/exclude-filter"];
  if (this->has_exclude_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      248310562, *this->exclude_filter_, output);
  }

  // .ywrapper.StringValue path = 372540922 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/sensor-paths/sensor-path/state/path"];
  if (this->has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      372540922, *this->path_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath.State)
}

::google::protobuf::uint8* TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue exclude_filter = 248310562 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/sensor-paths/sensor-path/state/exclude-filter"];
  if (this->has_exclude_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        248310562, *this->exclude_filter_, deterministic, target);
  }

  // .ywrapper.StringValue path = 372540922 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/sensor-paths/sensor-path/state/path"];
  if (this->has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        372540922, *this->path_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath.State)
  return target;
}

size_t TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue exclude_filter = 248310562 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/sensor-paths/sensor-path/state/exclude-filter"];
  if (this->has_exclude_filter()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->exclude_filter_);
  }

  // .ywrapper.StringValue path = 372540922 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/sensor-paths/sensor-path/state/path"];
  if (this->has_path()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->path_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath.State)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath.State)
    MergeFrom(*source);
  }
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State::MergeFrom(const TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_exclude_filter()) {
    mutable_exclude_filter()->::ywrapper::StringValue::MergeFrom(from.exclude_filter());
  }
  if (from.has_path()) {
    mutable_path()->::ywrapper::StringValue::MergeFrom(from.path());
  }
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State::CopyFrom(const TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State::IsInitialized() const {
  return true;
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State::Swap(TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State::InternalSwap(TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State* other) {
  using std::swap;
  swap(exclude_filter_, other->exclude_filter_);
  swap(path_, other->path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath::InitAsDefaultInstance() {
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State*>(
      ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath)
}
TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath(const TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath)
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath::SharedCtor() {
  state_ = NULL;
  _cached_size_ = 0;
}

TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath::~TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath)
  SharedDtor();
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath& TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath();
  return *internal_default_instance();
}

TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath* TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath* n = new TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3820877954u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath.State state = 477609744 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/sensor-paths/sensor-path/state"];
      case 477609744: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 3820877954 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath)
  return false;
#undef DO_
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath.State state = 477609744 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/sensor-paths/sensor-path/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      477609744, *this->state_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath)
}

::google::protobuf::uint8* TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath.State state = 477609744 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/sensor-paths/sensor-path/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        477609744, *this->state_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath)
  return target;
}

size_t TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath.State state = 477609744 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/sensor-paths/sensor-path/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath)
    MergeFrom(*source);
  }
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath::MergeFrom(const TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath_State::MergeFrom(from.state());
  }
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath::CopyFrom(const TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath::IsInitialized() const {
  return true;
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath::Swap(TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath::InternalSwap(TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath* other) {
  using std::swap;
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey::InitAsDefaultInstance() {
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey_default_instance_._instance.get_mutable()->sensor_path_ = const_cast< ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath*>(
      ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey::kPathFieldNumber;
const int TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey::kSensorPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPathKey)
}
TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey(const TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.has_sensor_path()) {
    sensor_path_ = new ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath(*from.sensor_path_);
  } else {
    sensor_path_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPathKey)
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sensor_path_ = NULL;
  _cached_size_ = 0;
}

TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey::~TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPathKey)
  SharedDtor();
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sensor_path_;
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey& TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey();
  return *internal_default_instance();
}

TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey* TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey* n = new TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPathKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && sensor_path_ != NULL) {
    delete sensor_path_;
  }
  sensor_path_ = NULL;
  _internal_metadata_.Clear();
}

bool TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPathKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/sensor-paths/sensor-path/path"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPathKey.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath sensor_path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPathKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPathKey)
  return false;
#undef DO_
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPathKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/sensor-paths/sensor-path/path"];
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPathKey.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath sensor_path = 2;
  if (this->has_sensor_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->sensor_path_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPathKey)
}

::google::protobuf::uint8* TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPathKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/sensor-paths/sensor-path/path"];
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPathKey.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath sensor_path = 2;
  if (this->has_sensor_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->sensor_path_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPathKey)
  return target;
}

size_t TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPathKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string path = 1 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/sensor-paths/sensor-path/path"];
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPath sensor_path = 2;
  if (this->has_sensor_path()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sensor_path_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPathKey)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPathKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPathKey)
    MergeFrom(*source);
  }
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey::MergeFrom(const TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPathKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.has_sensor_path()) {
    mutable_sensor_path()->::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPath::MergeFrom(from.sensor_path());
  }
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPathKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey::CopyFrom(const TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPathKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey::IsInitialized() const {
  return true;
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey::Swap(TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey::InternalSwap(TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey* other) {
  using std::swap;
  path_.Swap(&other->path_);
  swap(sensor_path_, other->sensor_path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths_SensorPathKey::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths::kSensorPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths)
}
TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths(const TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sensor_path_(from.sensor_path_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths)
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths::SharedCtor() {
  _cached_size_ = 0;
}

TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths::~TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths)
  SharedDtor();
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths::SharedDtor() {
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths& TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths();
  return *internal_default_instance();
}

TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths* TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths* n = new TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensor_path_.Clear();
  _internal_metadata_.Clear();
}

bool TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(771418482u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPathKey sensor_path = 96427310 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/sensor-paths/sensor-path"];
      case 96427310: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 771418482 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_sensor_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths)
  return false;
#undef DO_
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPathKey sensor_path = 96427310 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/sensor-paths/sensor-path"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_path_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      96427310, this->sensor_path(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths)
}

::google::protobuf::uint8* TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPathKey sensor_path = 96427310 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/sensor-paths/sensor-path"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_path_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        96427310, this->sensor_path(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths)
  return target;
}

size_t TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths.SensorPathKey sensor_path = 96427310 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/sensor-paths/sensor-path"];
  {
    unsigned int count = static_cast<unsigned int>(this->sensor_path_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sensor_path(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths)
    MergeFrom(*source);
  }
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths::MergeFrom(const TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensor_path_.MergeFrom(from.sensor_path_);
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths::CopyFrom(const TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths::IsInitialized() const {
  return true;
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths::Swap(TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths::InternalSwap(TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths* other) {
  using std::swap;
  sensor_path_.InternalSwap(&other->sensor_path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_Subscriptions_Dynamic_Subscription_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Dynamic_Subscription_State_default_instance_._instance.get_mutable()->destination_address_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Dynamic_Subscription_State_default_instance_._instance.get_mutable()->destination_port_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Dynamic_Subscription_State_default_instance_._instance.get_mutable()->heartbeat_interval_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Dynamic_Subscription_State_default_instance_._instance.get_mutable()->originated_qos_marking_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Dynamic_Subscription_State_default_instance_._instance.get_mutable()->sample_interval_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Dynamic_Subscription_State_default_instance_._instance.get_mutable()->subscription_id_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Dynamic_Subscription_State_default_instance_._instance.get_mutable()->suppress_redundant_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
}
void TelemetrySystem_Subscriptions_Dynamic_Subscription_State::clear_destination_address() {
  if (GetArenaNoVirtual() == NULL && destination_address_ != NULL) {
    delete destination_address_;
  }
  destination_address_ = NULL;
}
void TelemetrySystem_Subscriptions_Dynamic_Subscription_State::clear_destination_port() {
  if (GetArenaNoVirtual() == NULL && destination_port_ != NULL) {
    delete destination_port_;
  }
  destination_port_ = NULL;
}
void TelemetrySystem_Subscriptions_Dynamic_Subscription_State::clear_heartbeat_interval() {
  if (GetArenaNoVirtual() == NULL && heartbeat_interval_ != NULL) {
    delete heartbeat_interval_;
  }
  heartbeat_interval_ = NULL;
}
void TelemetrySystem_Subscriptions_Dynamic_Subscription_State::clear_originated_qos_marking() {
  if (GetArenaNoVirtual() == NULL && originated_qos_marking_ != NULL) {
    delete originated_qos_marking_;
  }
  originated_qos_marking_ = NULL;
}
void TelemetrySystem_Subscriptions_Dynamic_Subscription_State::clear_sample_interval() {
  if (GetArenaNoVirtual() == NULL && sample_interval_ != NULL) {
    delete sample_interval_;
  }
  sample_interval_ = NULL;
}
void TelemetrySystem_Subscriptions_Dynamic_Subscription_State::clear_subscription_id() {
  if (GetArenaNoVirtual() == NULL && subscription_id_ != NULL) {
    delete subscription_id_;
  }
  subscription_id_ = NULL;
}
void TelemetrySystem_Subscriptions_Dynamic_Subscription_State::clear_suppress_redundant() {
  if (GetArenaNoVirtual() == NULL && suppress_redundant_ != NULL) {
    delete suppress_redundant_;
  }
  suppress_redundant_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_Subscriptions_Dynamic_Subscription_State::kDestinationAddressFieldNumber;
const int TelemetrySystem_Subscriptions_Dynamic_Subscription_State::kDestinationPortFieldNumber;
const int TelemetrySystem_Subscriptions_Dynamic_Subscription_State::kEncodingFieldNumber;
const int TelemetrySystem_Subscriptions_Dynamic_Subscription_State::kHeartbeatIntervalFieldNumber;
const int TelemetrySystem_Subscriptions_Dynamic_Subscription_State::kOriginatedQosMarkingFieldNumber;
const int TelemetrySystem_Subscriptions_Dynamic_Subscription_State::kProtocolFieldNumber;
const int TelemetrySystem_Subscriptions_Dynamic_Subscription_State::kSampleIntervalFieldNumber;
const int TelemetrySystem_Subscriptions_Dynamic_Subscription_State::kSubscriptionIdFieldNumber;
const int TelemetrySystem_Subscriptions_Dynamic_Subscription_State::kSuppressRedundantFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_Subscriptions_Dynamic_Subscription_State::TelemetrySystem_Subscriptions_Dynamic_Subscription_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Dynamic_Subscription_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.State)
}
TelemetrySystem_Subscriptions_Dynamic_Subscription_State::TelemetrySystem_Subscriptions_Dynamic_Subscription_State(const TelemetrySystem_Subscriptions_Dynamic_Subscription_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_subscription_id()) {
    subscription_id_ = new ::ywrapper::UintValue(*from.subscription_id_);
  } else {
    subscription_id_ = NULL;
  }
  if (from.has_heartbeat_interval()) {
    heartbeat_interval_ = new ::ywrapper::UintValue(*from.heartbeat_interval_);
  } else {
    heartbeat_interval_ = NULL;
  }
  if (from.has_sample_interval()) {
    sample_interval_ = new ::ywrapper::UintValue(*from.sample_interval_);
  } else {
    sample_interval_ = NULL;
  }
  if (from.has_originated_qos_marking()) {
    originated_qos_marking_ = new ::ywrapper::UintValue(*from.originated_qos_marking_);
  } else {
    originated_qos_marking_ = NULL;
  }
  if (from.has_destination_address()) {
    destination_address_ = new ::ywrapper::StringValue(*from.destination_address_);
  } else {
    destination_address_ = NULL;
  }
  if (from.has_suppress_redundant()) {
    suppress_redundant_ = new ::ywrapper::BoolValue(*from.suppress_redundant_);
  } else {
    suppress_redundant_ = NULL;
  }
  if (from.has_destination_port()) {
    destination_port_ = new ::ywrapper::UintValue(*from.destination_port_);
  } else {
    destination_port_ = NULL;
  }
  ::memcpy(&protocol_, &from.protocol_,
    static_cast<size_t>(reinterpret_cast<char*>(&encoding_) -
    reinterpret_cast<char*>(&protocol_)) + sizeof(encoding_));
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.State)
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_State::SharedCtor() {
  ::memset(&subscription_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encoding_) -
      reinterpret_cast<char*>(&subscription_id_)) + sizeof(encoding_));
  _cached_size_ = 0;
}

TelemetrySystem_Subscriptions_Dynamic_Subscription_State::~TelemetrySystem_Subscriptions_Dynamic_Subscription_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.State)
  SharedDtor();
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_State::SharedDtor() {
  if (this != internal_default_instance()) delete subscription_id_;
  if (this != internal_default_instance()) delete heartbeat_interval_;
  if (this != internal_default_instance()) delete sample_interval_;
  if (this != internal_default_instance()) delete originated_qos_marking_;
  if (this != internal_default_instance()) delete destination_address_;
  if (this != internal_default_instance()) delete suppress_redundant_;
  if (this != internal_default_instance()) delete destination_port_;
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_Subscriptions_Dynamic_Subscription_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_Subscriptions_Dynamic_Subscription_State& TelemetrySystem_Subscriptions_Dynamic_Subscription_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Dynamic_Subscription_State();
  return *internal_default_instance();
}

TelemetrySystem_Subscriptions_Dynamic_Subscription_State* TelemetrySystem_Subscriptions_Dynamic_Subscription_State::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_Subscriptions_Dynamic_Subscription_State* n = new TelemetrySystem_Subscriptions_Dynamic_Subscription_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && subscription_id_ != NULL) {
    delete subscription_id_;
  }
  subscription_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && heartbeat_interval_ != NULL) {
    delete heartbeat_interval_;
  }
  heartbeat_interval_ = NULL;
  if (GetArenaNoVirtual() == NULL && sample_interval_ != NULL) {
    delete sample_interval_;
  }
  sample_interval_ = NULL;
  if (GetArenaNoVirtual() == NULL && originated_qos_marking_ != NULL) {
    delete originated_qos_marking_;
  }
  originated_qos_marking_ = NULL;
  if (GetArenaNoVirtual() == NULL && destination_address_ != NULL) {
    delete destination_address_;
  }
  destination_address_ = NULL;
  if (GetArenaNoVirtual() == NULL && suppress_redundant_ != NULL) {
    delete suppress_redundant_;
  }
  suppress_redundant_ = NULL;
  if (GetArenaNoVirtual() == NULL && destination_port_ != NULL) {
    delete destination_port_;
  }
  destination_port_ = NULL;
  ::memset(&protocol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encoding_) -
      reinterpret_cast<char*>(&protocol_)) + sizeof(encoding_));
  _internal_metadata_.Clear();
}

bool TelemetrySystem_Subscriptions_Dynamic_Subscription_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4137190344u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue subscription_id = 6475945 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/state/subscription-id"];
      case 6475945: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 51807562 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_subscription_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue heartbeat_interval = 57052532 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/state/heartbeat-interval"];
      case 57052532: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 456420258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_heartbeat_interval()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.enums.OpenconfigTelemetryTypesSTREAMPROTOCOL protocol = 139368590 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/state/protocol"];
      case 139368590: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 1114948720 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_protocol(static_cast< ::openconfig::enums::OpenconfigTelemetryTypesSTREAMPROTOCOL >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue sample_interval = 277056770 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/state/sample-interval"];
      case 277056770: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 2216454162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sample_interval()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue originated_qos_marking = 350486862 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/state/originated-qos-marking"];
      case 350486862: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 2803894898 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_originated_qos_marking()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue destination_address = 360531453 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/state/destination-address"];
      case 360531453: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 2884251626 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue suppress_redundant = 380278679 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/state/suppress-redundant"];
      case 380278679: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 3042229434 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_suppress_redundant()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue destination_port = 404479854 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/state/destination-port"];
      case 404479854: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 3235838834 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_port()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.enums.OpenconfigTelemetryTypesDATAENCODINGMETHOD encoding = 517148793 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/state/encoding"];
      case 517148793: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 4137190344 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encoding(static_cast< ::openconfig::enums::OpenconfigTelemetryTypesDATAENCODINGMETHOD >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.State)
  return false;
#undef DO_
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue subscription_id = 6475945 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/state/subscription-id"];
  if (this->has_subscription_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6475945, *this->subscription_id_, output);
  }

  // .ywrapper.UintValue heartbeat_interval = 57052532 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/state/heartbeat-interval"];
  if (this->has_heartbeat_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      57052532, *this->heartbeat_interval_, output);
  }

  // .openconfig.enums.OpenconfigTelemetryTypesSTREAMPROTOCOL protocol = 139368590 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/state/protocol"];
  if (this->protocol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      139368590, this->protocol(), output);
  }

  // .ywrapper.UintValue sample_interval = 277056770 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/state/sample-interval"];
  if (this->has_sample_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      277056770, *this->sample_interval_, output);
  }

  // .ywrapper.UintValue originated_qos_marking = 350486862 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/state/originated-qos-marking"];
  if (this->has_originated_qos_marking()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      350486862, *this->originated_qos_marking_, output);
  }

  // .ywrapper.StringValue destination_address = 360531453 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/state/destination-address"];
  if (this->has_destination_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      360531453, *this->destination_address_, output);
  }

  // .ywrapper.BoolValue suppress_redundant = 380278679 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/state/suppress-redundant"];
  if (this->has_suppress_redundant()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      380278679, *this->suppress_redundant_, output);
  }

  // .ywrapper.UintValue destination_port = 404479854 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/state/destination-port"];
  if (this->has_destination_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      404479854, *this->destination_port_, output);
  }

  // .openconfig.enums.OpenconfigTelemetryTypesDATAENCODINGMETHOD encoding = 517148793 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/state/encoding"];
  if (this->encoding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      517148793, this->encoding(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.State)
}

::google::protobuf::uint8* TelemetrySystem_Subscriptions_Dynamic_Subscription_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue subscription_id = 6475945 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/state/subscription-id"];
  if (this->has_subscription_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6475945, *this->subscription_id_, deterministic, target);
  }

  // .ywrapper.UintValue heartbeat_interval = 57052532 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/state/heartbeat-interval"];
  if (this->has_heartbeat_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        57052532, *this->heartbeat_interval_, deterministic, target);
  }

  // .openconfig.enums.OpenconfigTelemetryTypesSTREAMPROTOCOL protocol = 139368590 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/state/protocol"];
  if (this->protocol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      139368590, this->protocol(), target);
  }

  // .ywrapper.UintValue sample_interval = 277056770 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/state/sample-interval"];
  if (this->has_sample_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        277056770, *this->sample_interval_, deterministic, target);
  }

  // .ywrapper.UintValue originated_qos_marking = 350486862 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/state/originated-qos-marking"];
  if (this->has_originated_qos_marking()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        350486862, *this->originated_qos_marking_, deterministic, target);
  }

  // .ywrapper.StringValue destination_address = 360531453 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/state/destination-address"];
  if (this->has_destination_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        360531453, *this->destination_address_, deterministic, target);
  }

  // .ywrapper.BoolValue suppress_redundant = 380278679 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/state/suppress-redundant"];
  if (this->has_suppress_redundant()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        380278679, *this->suppress_redundant_, deterministic, target);
  }

  // .ywrapper.UintValue destination_port = 404479854 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/state/destination-port"];
  if (this->has_destination_port()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        404479854, *this->destination_port_, deterministic, target);
  }

  // .openconfig.enums.OpenconfigTelemetryTypesDATAENCODINGMETHOD encoding = 517148793 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/state/encoding"];
  if (this->encoding() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      517148793, this->encoding(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.State)
  return target;
}

size_t TelemetrySystem_Subscriptions_Dynamic_Subscription_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue subscription_id = 6475945 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/state/subscription-id"];
  if (this->has_subscription_id()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->subscription_id_);
  }

  // .ywrapper.UintValue heartbeat_interval = 57052532 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/state/heartbeat-interval"];
  if (this->has_heartbeat_interval()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->heartbeat_interval_);
  }

  // .ywrapper.UintValue sample_interval = 277056770 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/state/sample-interval"];
  if (this->has_sample_interval()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sample_interval_);
  }

  // .ywrapper.UintValue originated_qos_marking = 350486862 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/state/originated-qos-marking"];
  if (this->has_originated_qos_marking()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->originated_qos_marking_);
  }

  // .ywrapper.StringValue destination_address = 360531453 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/state/destination-address"];
  if (this->has_destination_address()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->destination_address_);
  }

  // .ywrapper.BoolValue suppress_redundant = 380278679 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/state/suppress-redundant"];
  if (this->has_suppress_redundant()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->suppress_redundant_);
  }

  // .ywrapper.UintValue destination_port = 404479854 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/state/destination-port"];
  if (this->has_destination_port()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->destination_port_);
  }

  // .openconfig.enums.OpenconfigTelemetryTypesSTREAMPROTOCOL protocol = 139368590 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/state/protocol"];
  if (this->protocol() != 0) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->protocol());
  }

  // .openconfig.enums.OpenconfigTelemetryTypesDATAENCODINGMETHOD encoding = 517148793 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/state/encoding"];
  if (this->encoding() != 0) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.State)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_Subscriptions_Dynamic_Subscription_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_Subscriptions_Dynamic_Subscription_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.State)
    MergeFrom(*source);
  }
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_State::MergeFrom(const TelemetrySystem_Subscriptions_Dynamic_Subscription_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_subscription_id()) {
    mutable_subscription_id()->::ywrapper::UintValue::MergeFrom(from.subscription_id());
  }
  if (from.has_heartbeat_interval()) {
    mutable_heartbeat_interval()->::ywrapper::UintValue::MergeFrom(from.heartbeat_interval());
  }
  if (from.has_sample_interval()) {
    mutable_sample_interval()->::ywrapper::UintValue::MergeFrom(from.sample_interval());
  }
  if (from.has_originated_qos_marking()) {
    mutable_originated_qos_marking()->::ywrapper::UintValue::MergeFrom(from.originated_qos_marking());
  }
  if (from.has_destination_address()) {
    mutable_destination_address()->::ywrapper::StringValue::MergeFrom(from.destination_address());
  }
  if (from.has_suppress_redundant()) {
    mutable_suppress_redundant()->::ywrapper::BoolValue::MergeFrom(from.suppress_redundant());
  }
  if (from.has_destination_port()) {
    mutable_destination_port()->::ywrapper::UintValue::MergeFrom(from.destination_port());
  }
  if (from.protocol() != 0) {
    set_protocol(from.protocol());
  }
  if (from.encoding() != 0) {
    set_encoding(from.encoding());
  }
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_State::CopyFrom(const TelemetrySystem_Subscriptions_Dynamic_Subscription_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_Subscriptions_Dynamic_Subscription_State::IsInitialized() const {
  return true;
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription_State::Swap(TelemetrySystem_Subscriptions_Dynamic_Subscription_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_Subscriptions_Dynamic_Subscription_State::InternalSwap(TelemetrySystem_Subscriptions_Dynamic_Subscription_State* other) {
  using std::swap;
  swap(subscription_id_, other->subscription_id_);
  swap(heartbeat_interval_, other->heartbeat_interval_);
  swap(sample_interval_, other->sample_interval_);
  swap(originated_qos_marking_, other->originated_qos_marking_);
  swap(destination_address_, other->destination_address_);
  swap(suppress_redundant_, other->suppress_redundant_);
  swap(destination_port_, other->destination_port_);
  swap(protocol_, other->protocol_);
  swap(encoding_, other->encoding_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_Subscriptions_Dynamic_Subscription_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_Subscriptions_Dynamic_Subscription::InitAsDefaultInstance() {
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Dynamic_Subscription_default_instance_._instance.get_mutable()->sensor_paths_ = const_cast< ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths*>(
      ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths::internal_default_instance());
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Dynamic_Subscription_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_State*>(
      ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_Subscriptions_Dynamic_Subscription::kSensorPathsFieldNumber;
const int TelemetrySystem_Subscriptions_Dynamic_Subscription::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_Subscriptions_Dynamic_Subscription::TelemetrySystem_Subscriptions_Dynamic_Subscription()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Dynamic_Subscription();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription)
}
TelemetrySystem_Subscriptions_Dynamic_Subscription::TelemetrySystem_Subscriptions_Dynamic_Subscription(const TelemetrySystem_Subscriptions_Dynamic_Subscription& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_sensor_paths()) {
    sensor_paths_ = new ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths(*from.sensor_paths_);
  } else {
    sensor_paths_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription)
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sensor_paths_) -
      reinterpret_cast<char*>(&state_)) + sizeof(sensor_paths_));
  _cached_size_ = 0;
}

TelemetrySystem_Subscriptions_Dynamic_Subscription::~TelemetrySystem_Subscriptions_Dynamic_Subscription() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription)
  SharedDtor();
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete sensor_paths_;
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_Subscriptions_Dynamic_Subscription::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_Subscriptions_Dynamic_Subscription& TelemetrySystem_Subscriptions_Dynamic_Subscription::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Dynamic_Subscription();
  return *internal_default_instance();
}

TelemetrySystem_Subscriptions_Dynamic_Subscription* TelemetrySystem_Subscriptions_Dynamic_Subscription::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_Subscriptions_Dynamic_Subscription* n = new TelemetrySystem_Subscriptions_Dynamic_Subscription;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && sensor_paths_ != NULL) {
    delete sensor_paths_;
  }
  sensor_paths_ = NULL;
  _internal_metadata_.Clear();
}

bool TelemetrySystem_Subscriptions_Dynamic_Subscription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3894764266u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.State state = 318935835 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/state"];
      case 318935835: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 2551486682 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths sensor_paths = 486845533 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/sensor-paths"];
      case 486845533: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 3894764266 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_paths()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription)
  return false;
#undef DO_
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.State state = 318935835 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      318935835, *this->state_, output);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths sensor_paths = 486845533 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/sensor-paths"];
  if (this->has_sensor_paths()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      486845533, *this->sensor_paths_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription)
}

::google::protobuf::uint8* TelemetrySystem_Subscriptions_Dynamic_Subscription::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.State state = 318935835 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        318935835, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths sensor_paths = 486845533 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/sensor-paths"];
  if (this->has_sensor_paths()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        486845533, *this->sensor_paths_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription)
  return target;
}

size_t TelemetrySystem_Subscriptions_Dynamic_Subscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.State state = 318935835 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription.SensorPaths sensor_paths = 486845533 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/sensor-paths"];
  if (this->has_sensor_paths()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sensor_paths_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_Subscriptions_Dynamic_Subscription* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_Subscriptions_Dynamic_Subscription>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription)
    MergeFrom(*source);
  }
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription::MergeFrom(const TelemetrySystem_Subscriptions_Dynamic_Subscription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_State::MergeFrom(from.state());
  }
  if (from.has_sensor_paths()) {
    mutable_sensor_paths()->::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription_SensorPaths::MergeFrom(from.sensor_paths());
  }
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription::CopyFrom(const TelemetrySystem_Subscriptions_Dynamic_Subscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_Subscriptions_Dynamic_Subscription::IsInitialized() const {
  return true;
}

void TelemetrySystem_Subscriptions_Dynamic_Subscription::Swap(TelemetrySystem_Subscriptions_Dynamic_Subscription* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_Subscriptions_Dynamic_Subscription::InternalSwap(TelemetrySystem_Subscriptions_Dynamic_Subscription* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(sensor_paths_, other->sensor_paths_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_Subscriptions_Dynamic_Subscription::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey::InitAsDefaultInstance() {
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey_default_instance_._instance.get_mutable()->subscription_ = const_cast< ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription*>(
      ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey::kSubscriptionIdFieldNumber;
const int TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey::kSubscriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey::TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Dynamic_SubscriptionKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.SubscriptionKey)
}
TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey::TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey(const TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_subscription()) {
    subscription_ = new ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription(*from.subscription_);
  } else {
    subscription_ = NULL;
  }
  subscription_id_ = from.subscription_id_;
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.SubscriptionKey)
}

void TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey::SharedCtor() {
  ::memset(&subscription_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subscription_id_) -
      reinterpret_cast<char*>(&subscription_)) + sizeof(subscription_id_));
  _cached_size_ = 0;
}

TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey::~TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.SubscriptionKey)
  SharedDtor();
}

void TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey::SharedDtor() {
  if (this != internal_default_instance()) delete subscription_;
}

void TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey& TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Dynamic_SubscriptionKey();
  return *internal_default_instance();
}

TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey* TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey* n = new TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.SubscriptionKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && subscription_ != NULL) {
    delete subscription_;
  }
  subscription_ = NULL;
  subscription_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.SubscriptionKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 subscription_id = 1 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/subscription-id"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &subscription_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription subscription = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_subscription()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.SubscriptionKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.SubscriptionKey)
  return false;
#undef DO_
}

void TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.SubscriptionKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 subscription_id = 1 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/subscription-id"];
  if (this->subscription_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->subscription_id(), output);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription subscription = 2;
  if (this->has_subscription()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->subscription_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.SubscriptionKey)
}

::google::protobuf::uint8* TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.SubscriptionKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 subscription_id = 1 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/subscription-id"];
  if (this->subscription_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->subscription_id(), target);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription subscription = 2;
  if (this->has_subscription()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->subscription_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.SubscriptionKey)
  return target;
}

size_t TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.SubscriptionKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.Subscription subscription = 2;
  if (this->has_subscription()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->subscription_);
  }

  // uint64 subscription_id = 1 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription/subscription-id"];
  if (this->subscription_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->subscription_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.SubscriptionKey)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.SubscriptionKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.SubscriptionKey)
    MergeFrom(*source);
  }
}

void TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey::MergeFrom(const TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.SubscriptionKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_subscription()) {
    mutable_subscription()->::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic_Subscription::MergeFrom(from.subscription());
  }
  if (from.subscription_id() != 0) {
    set_subscription_id(from.subscription_id());
  }
}

void TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.SubscriptionKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey::CopyFrom(const TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.SubscriptionKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey::IsInitialized() const {
  return true;
}

void TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey::Swap(TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey::InternalSwap(TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey* other) {
  using std::swap;
  swap(subscription_, other->subscription_);
  swap(subscription_id_, other->subscription_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_Subscriptions_Dynamic_SubscriptionKey::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_Subscriptions_Dynamic::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_Subscriptions_Dynamic::kSubscriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_Subscriptions_Dynamic::TelemetrySystem_Subscriptions_Dynamic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Dynamic();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic)
}
TelemetrySystem_Subscriptions_Dynamic::TelemetrySystem_Subscriptions_Dynamic(const TelemetrySystem_Subscriptions_Dynamic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      subscription_(from.subscription_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic)
}

void TelemetrySystem_Subscriptions_Dynamic::SharedCtor() {
  _cached_size_ = 0;
}

TelemetrySystem_Subscriptions_Dynamic::~TelemetrySystem_Subscriptions_Dynamic() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic)
  SharedDtor();
}

void TelemetrySystem_Subscriptions_Dynamic::SharedDtor() {
}

void TelemetrySystem_Subscriptions_Dynamic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_Subscriptions_Dynamic::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_Subscriptions_Dynamic& TelemetrySystem_Subscriptions_Dynamic::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Dynamic();
  return *internal_default_instance();
}

TelemetrySystem_Subscriptions_Dynamic* TelemetrySystem_Subscriptions_Dynamic::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_Subscriptions_Dynamic* n = new TelemetrySystem_Subscriptions_Dynamic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_Subscriptions_Dynamic::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscription_.Clear();
  _internal_metadata_.Clear();
}

bool TelemetrySystem_Subscriptions_Dynamic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(301480138u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.SubscriptionKey subscription = 37685017 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription"];
      case 37685017: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 301480138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_subscription()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic)
  return false;
#undef DO_
}

void TelemetrySystem_Subscriptions_Dynamic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.SubscriptionKey subscription = 37685017 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subscription_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37685017, this->subscription(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic)
}

::google::protobuf::uint8* TelemetrySystem_Subscriptions_Dynamic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.SubscriptionKey subscription = 37685017 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subscription_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        37685017, this->subscription(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic)
  return target;
}

size_t TelemetrySystem_Subscriptions_Dynamic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic.SubscriptionKey subscription = 37685017 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic/subscription"];
  {
    unsigned int count = static_cast<unsigned int>(this->subscription_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->subscription(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_Subscriptions_Dynamic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_Subscriptions_Dynamic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_Subscriptions_Dynamic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic)
    MergeFrom(*source);
  }
}

void TelemetrySystem_Subscriptions_Dynamic::MergeFrom(const TelemetrySystem_Subscriptions_Dynamic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subscription_.MergeFrom(from.subscription_);
}

void TelemetrySystem_Subscriptions_Dynamic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_Subscriptions_Dynamic::CopyFrom(const TelemetrySystem_Subscriptions_Dynamic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_Subscriptions_Dynamic::IsInitialized() const {
  return true;
}

void TelemetrySystem_Subscriptions_Dynamic::Swap(TelemetrySystem_Subscriptions_Dynamic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_Subscriptions_Dynamic::InternalSwap(TelemetrySystem_Subscriptions_Dynamic* other) {
  using std::swap;
  subscription_.InternalSwap(&other->subscription_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_Subscriptions_Dynamic::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_Subscriptions_Persistent_Subscription_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_Config_default_instance_._instance.get_mutable()->local_source_address_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_Config_default_instance_._instance.get_mutable()->originated_qos_marking_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_Config_default_instance_._instance.get_mutable()->subscription_name_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void TelemetrySystem_Subscriptions_Persistent_Subscription_Config::clear_local_source_address() {
  if (GetArenaNoVirtual() == NULL && local_source_address_ != NULL) {
    delete local_source_address_;
  }
  local_source_address_ = NULL;
}
void TelemetrySystem_Subscriptions_Persistent_Subscription_Config::clear_originated_qos_marking() {
  if (GetArenaNoVirtual() == NULL && originated_qos_marking_ != NULL) {
    delete originated_qos_marking_;
  }
  originated_qos_marking_ = NULL;
}
void TelemetrySystem_Subscriptions_Persistent_Subscription_Config::clear_subscription_name() {
  if (GetArenaNoVirtual() == NULL && subscription_name_ != NULL) {
    delete subscription_name_;
  }
  subscription_name_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_Subscriptions_Persistent_Subscription_Config::kEncodingFieldNumber;
const int TelemetrySystem_Subscriptions_Persistent_Subscription_Config::kLocalSourceAddressFieldNumber;
const int TelemetrySystem_Subscriptions_Persistent_Subscription_Config::kOriginatedQosMarkingFieldNumber;
const int TelemetrySystem_Subscriptions_Persistent_Subscription_Config::kProtocolFieldNumber;
const int TelemetrySystem_Subscriptions_Persistent_Subscription_Config::kSubscriptionNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_Subscriptions_Persistent_Subscription_Config::TelemetrySystem_Subscriptions_Persistent_Subscription_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.Config)
}
TelemetrySystem_Subscriptions_Persistent_Subscription_Config::TelemetrySystem_Subscriptions_Persistent_Subscription_Config(const TelemetrySystem_Subscriptions_Persistent_Subscription_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_subscription_name()) {
    subscription_name_ = new ::ywrapper::StringValue(*from.subscription_name_);
  } else {
    subscription_name_ = NULL;
  }
  if (from.has_local_source_address()) {
    local_source_address_ = new ::ywrapper::StringValue(*from.local_source_address_);
  } else {
    local_source_address_ = NULL;
  }
  if (from.has_originated_qos_marking()) {
    originated_qos_marking_ = new ::ywrapper::UintValue(*from.originated_qos_marking_);
  } else {
    originated_qos_marking_ = NULL;
  }
  ::memcpy(&protocol_, &from.protocol_,
    static_cast<size_t>(reinterpret_cast<char*>(&encoding_) -
    reinterpret_cast<char*>(&protocol_)) + sizeof(encoding_));
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.Config)
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_Config::SharedCtor() {
  ::memset(&subscription_name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encoding_) -
      reinterpret_cast<char*>(&subscription_name_)) + sizeof(encoding_));
  _cached_size_ = 0;
}

TelemetrySystem_Subscriptions_Persistent_Subscription_Config::~TelemetrySystem_Subscriptions_Persistent_Subscription_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.Config)
  SharedDtor();
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_Config::SharedDtor() {
  if (this != internal_default_instance()) delete subscription_name_;
  if (this != internal_default_instance()) delete local_source_address_;
  if (this != internal_default_instance()) delete originated_qos_marking_;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_Subscriptions_Persistent_Subscription_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_Subscriptions_Persistent_Subscription_Config& TelemetrySystem_Subscriptions_Persistent_Subscription_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_Config();
  return *internal_default_instance();
}

TelemetrySystem_Subscriptions_Persistent_Subscription_Config* TelemetrySystem_Subscriptions_Persistent_Subscription_Config::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_Subscriptions_Persistent_Subscription_Config* n = new TelemetrySystem_Subscriptions_Persistent_Subscription_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && subscription_name_ != NULL) {
    delete subscription_name_;
  }
  subscription_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && local_source_address_ != NULL) {
    delete local_source_address_;
  }
  local_source_address_ = NULL;
  if (GetArenaNoVirtual() == NULL && originated_qos_marking_ != NULL) {
    delete originated_qos_marking_;
  }
  originated_qos_marking_ = NULL;
  ::memset(&protocol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encoding_) -
      reinterpret_cast<char*>(&protocol_)) + sizeof(encoding_));
  _internal_metadata_.Clear();
}

bool TelemetrySystem_Subscriptions_Persistent_Subscription_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4179161994u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue subscription_name = 11686182 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/config/subscription-name"];
      case 11686182: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 93489458 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_subscription_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.enums.OpenconfigTelemetryTypesSTREAMPROTOCOL protocol = 244532053 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/config/protocol"];
      case 244532053: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 1956256424 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_protocol(static_cast< ::openconfig::enums::OpenconfigTelemetryTypesSTREAMPROTOCOL >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.enums.OpenconfigTelemetryTypesDATAENCODINGMETHOD encoding = 291386974 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/config/encoding"];
      case 291386974: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 2331095792 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encoding(static_cast< ::openconfig::enums::OpenconfigTelemetryTypesDATAENCODINGMETHOD >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue local_source_address = 417080623 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/config/local-source-address"];
      case 417080623: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 3336644986 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_local_source_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue originated_qos_marking = 522395249 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/config/originated-qos-marking"];
      case 522395249: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 4179161994 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_originated_qos_marking()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.Config)
  return false;
#undef DO_
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue subscription_name = 11686182 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/config/subscription-name"];
  if (this->has_subscription_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11686182, *this->subscription_name_, output);
  }

  // .openconfig.enums.OpenconfigTelemetryTypesSTREAMPROTOCOL protocol = 244532053 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/config/protocol"];
  if (this->protocol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      244532053, this->protocol(), output);
  }

  // .openconfig.enums.OpenconfigTelemetryTypesDATAENCODINGMETHOD encoding = 291386974 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/config/encoding"];
  if (this->encoding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      291386974, this->encoding(), output);
  }

  // .ywrapper.StringValue local_source_address = 417080623 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/config/local-source-address"];
  if (this->has_local_source_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      417080623, *this->local_source_address_, output);
  }

  // .ywrapper.UintValue originated_qos_marking = 522395249 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/config/originated-qos-marking"];
  if (this->has_originated_qos_marking()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      522395249, *this->originated_qos_marking_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.Config)
}

::google::protobuf::uint8* TelemetrySystem_Subscriptions_Persistent_Subscription_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue subscription_name = 11686182 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/config/subscription-name"];
  if (this->has_subscription_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11686182, *this->subscription_name_, deterministic, target);
  }

  // .openconfig.enums.OpenconfigTelemetryTypesSTREAMPROTOCOL protocol = 244532053 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/config/protocol"];
  if (this->protocol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      244532053, this->protocol(), target);
  }

  // .openconfig.enums.OpenconfigTelemetryTypesDATAENCODINGMETHOD encoding = 291386974 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/config/encoding"];
  if (this->encoding() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      291386974, this->encoding(), target);
  }

  // .ywrapper.StringValue local_source_address = 417080623 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/config/local-source-address"];
  if (this->has_local_source_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        417080623, *this->local_source_address_, deterministic, target);
  }

  // .ywrapper.UintValue originated_qos_marking = 522395249 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/config/originated-qos-marking"];
  if (this->has_originated_qos_marking()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        522395249, *this->originated_qos_marking_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.Config)
  return target;
}

size_t TelemetrySystem_Subscriptions_Persistent_Subscription_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue subscription_name = 11686182 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/config/subscription-name"];
  if (this->has_subscription_name()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->subscription_name_);
  }

  // .ywrapper.StringValue local_source_address = 417080623 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/config/local-source-address"];
  if (this->has_local_source_address()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->local_source_address_);
  }

  // .ywrapper.UintValue originated_qos_marking = 522395249 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/config/originated-qos-marking"];
  if (this->has_originated_qos_marking()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->originated_qos_marking_);
  }

  // .openconfig.enums.OpenconfigTelemetryTypesSTREAMPROTOCOL protocol = 244532053 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/config/protocol"];
  if (this->protocol() != 0) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->protocol());
  }

  // .openconfig.enums.OpenconfigTelemetryTypesDATAENCODINGMETHOD encoding = 291386974 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/config/encoding"];
  if (this->encoding() != 0) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_Subscriptions_Persistent_Subscription_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_Subscriptions_Persistent_Subscription_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.Config)
    MergeFrom(*source);
  }
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_Config::MergeFrom(const TelemetrySystem_Subscriptions_Persistent_Subscription_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_subscription_name()) {
    mutable_subscription_name()->::ywrapper::StringValue::MergeFrom(from.subscription_name());
  }
  if (from.has_local_source_address()) {
    mutable_local_source_address()->::ywrapper::StringValue::MergeFrom(from.local_source_address());
  }
  if (from.has_originated_qos_marking()) {
    mutable_originated_qos_marking()->::ywrapper::UintValue::MergeFrom(from.originated_qos_marking());
  }
  if (from.protocol() != 0) {
    set_protocol(from.protocol());
  }
  if (from.encoding() != 0) {
    set_encoding(from.encoding());
  }
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_Config::CopyFrom(const TelemetrySystem_Subscriptions_Persistent_Subscription_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_Subscriptions_Persistent_Subscription_Config::IsInitialized() const {
  return true;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_Config::Swap(TelemetrySystem_Subscriptions_Persistent_Subscription_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_Subscriptions_Persistent_Subscription_Config::InternalSwap(TelemetrySystem_Subscriptions_Persistent_Subscription_Config* other) {
  using std::swap;
  swap(subscription_name_, other->subscription_name_);
  swap(local_source_address_, other->local_source_address_);
  swap(originated_qos_marking_, other->originated_qos_marking_);
  swap(protocol_, other->protocol_);
  swap(encoding_, other->encoding_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_Subscriptions_Persistent_Subscription_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config_default_instance_._instance.get_mutable()->group_id_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config::clear_group_id() {
  if (GetArenaNoVirtual() == NULL && group_id_ != NULL) {
    delete group_id_;
  }
  group_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.Config)
}
TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config(const TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_group_id()) {
    group_id_ = new ::ywrapper::StringValue(*from.group_id_);
  } else {
    group_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.Config)
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config::SharedCtor() {
  group_id_ = NULL;
  _cached_size_ = 0;
}

TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config::~TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.Config)
  SharedDtor();
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config::SharedDtor() {
  if (this != internal_default_instance()) delete group_id_;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config& TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config();
  return *internal_default_instance();
}

TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config* TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config* n = new TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && group_id_ != NULL) {
    delete group_id_;
  }
  group_id_ = NULL;
  _internal_metadata_.Clear();
}

bool TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3539561466u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue group_id = 442445183 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/destination-groups/destination-group/config/group-id"];
      case 442445183: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 3539561466 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_group_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.Config)
  return false;
#undef DO_
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue group_id = 442445183 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/destination-groups/destination-group/config/group-id"];
  if (this->has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      442445183, *this->group_id_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.Config)
}

::google::protobuf::uint8* TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue group_id = 442445183 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/destination-groups/destination-group/config/group-id"];
  if (this->has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        442445183, *this->group_id_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.Config)
  return target;
}

size_t TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue group_id = 442445183 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/destination-groups/destination-group/config/group-id"];
  if (this->has_group_id()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->group_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.Config)
    MergeFrom(*source);
  }
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config::MergeFrom(const TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_group_id()) {
    mutable_group_id()->::ywrapper::StringValue::MergeFrom(from.group_id());
  }
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config::CopyFrom(const TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config::IsInitialized() const {
  return true;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config::Swap(TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config::InternalSwap(TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config* other) {
  using std::swap;
  swap(group_id_, other->group_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State_default_instance_._instance.get_mutable()->group_id_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State::clear_group_id() {
  if (GetArenaNoVirtual() == NULL && group_id_ != NULL) {
    delete group_id_;
  }
  group_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.State)
}
TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State(const TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_group_id()) {
    group_id_ = new ::ywrapper::StringValue(*from.group_id_);
  } else {
    group_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.State)
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State::SharedCtor() {
  group_id_ = NULL;
  _cached_size_ = 0;
}

TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State::~TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.State)
  SharedDtor();
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State::SharedDtor() {
  if (this != internal_default_instance()) delete group_id_;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State& TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State();
  return *internal_default_instance();
}

TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State* TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State* n = new TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && group_id_ != NULL) {
    delete group_id_;
  }
  group_id_ = NULL;
  _internal_metadata_.Clear();
}

bool TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(1283401906u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue group_id = 160425238 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/destination-groups/destination-group/state/group-id"];
      case 160425238: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 1283401906 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_group_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.State)
  return false;
#undef DO_
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue group_id = 160425238 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/destination-groups/destination-group/state/group-id"];
  if (this->has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      160425238, *this->group_id_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.State)
}

::google::protobuf::uint8* TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue group_id = 160425238 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/destination-groups/destination-group/state/group-id"];
  if (this->has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        160425238, *this->group_id_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.State)
  return target;
}

size_t TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue group_id = 160425238 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/destination-groups/destination-group/state/group-id"];
  if (this->has_group_id()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->group_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.State)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.State)
    MergeFrom(*source);
  }
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State::MergeFrom(const TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_group_id()) {
    mutable_group_id()->::ywrapper::StringValue::MergeFrom(from.group_id());
  }
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State::CopyFrom(const TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State::IsInitialized() const {
  return true;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State::Swap(TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State::InternalSwap(TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State* other) {
  using std::swap;
  swap(group_id_, other->group_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup::InitAsDefaultInstance() {
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config*>(
      ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config::internal_default_instance());
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State*>(
      ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup::kConfigFieldNumber;
const int TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup)
}
TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup(const TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup)
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&state_)) + sizeof(config_));
  _cached_size_ = 0;
}

TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup::~TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup)
  SharedDtor();
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete config_;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup& TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup();
  return *internal_default_instance();
}

TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup* TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup* n = new TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  _internal_metadata_.Clear();
}

bool TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(336404442u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.State state = 41930108 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/destination-groups/destination-group/state"];
      case 41930108: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 335440866 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.Config config = 42050555 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/destination-groups/destination-group/config"];
      case 42050555: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 336404442 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup)
  return false;
#undef DO_
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.State state = 41930108 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/destination-groups/destination-group/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41930108, *this->state_, output);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.Config config = 42050555 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/destination-groups/destination-group/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42050555, *this->config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup)
}

::google::protobuf::uint8* TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.State state = 41930108 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/destination-groups/destination-group/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        41930108, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.Config config = 42050555 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/destination-groups/destination-group/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        42050555, *this->config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup)
  return target;
}

size_t TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.State state = 41930108 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/destination-groups/destination-group/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup.Config config = 42050555 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/destination-groups/destination-group/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup)
    MergeFrom(*source);
  }
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup::MergeFrom(const TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_State::MergeFrom(from.state());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup_Config::MergeFrom(from.config());
  }
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup::CopyFrom(const TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup::IsInitialized() const {
  return true;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup::Swap(TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup::InternalSwap(TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(config_, other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey::InitAsDefaultInstance() {
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey_default_instance_._instance.get_mutable()->destination_group_ = const_cast< ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup*>(
      ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey::kGroupIdFieldNumber;
const int TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey::kDestinationGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroupKey)
}
TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey(const TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_id().size() > 0) {
    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  if (from.has_destination_group()) {
    destination_group_ = new ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup(*from.destination_group_);
  } else {
    destination_group_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroupKey)
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey::SharedCtor() {
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_group_ = NULL;
  _cached_size_ = 0;
}

TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey::~TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroupKey)
  SharedDtor();
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey::SharedDtor() {
  group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete destination_group_;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey& TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey();
  return *internal_default_instance();
}

TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey* TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey* n = new TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroupKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && destination_group_ != NULL) {
    delete destination_group_;
  }
  destination_group_ = NULL;
  _internal_metadata_.Clear();
}

bool TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroupKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string group_id = 1 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/destination-groups/destination-group/group-id"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), static_cast<int>(this->group_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroupKey.group_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup destination_group = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroupKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroupKey)
  return false;
#undef DO_
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroupKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/destination-groups/destination-group/group-id"];
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroupKey.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup destination_group = 2;
  if (this->has_destination_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->destination_group_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroupKey)
}

::google::protobuf::uint8* TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroupKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/destination-groups/destination-group/group-id"];
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroupKey.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup destination_group = 2;
  if (this->has_destination_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->destination_group_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroupKey)
  return target;
}

size_t TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroupKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string group_id = 1 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/destination-groups/destination-group/group-id"];
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroup destination_group = 2;
  if (this->has_destination_group()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->destination_group_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroupKey)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroupKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroupKey)
    MergeFrom(*source);
  }
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey::MergeFrom(const TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroupKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.group_id().size() > 0) {

    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  if (from.has_destination_group()) {
    mutable_destination_group()->::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroup::MergeFrom(from.destination_group());
  }
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroupKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey::CopyFrom(const TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroupKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey::IsInitialized() const {
  return true;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey::Swap(TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey::InternalSwap(TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey* other) {
  using std::swap;
  group_id_.Swap(&other->group_id_);
  swap(destination_group_, other->destination_group_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups_DestinationGroupKey::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups::kDestinationGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups)
}
TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups(const TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      destination_group_(from.destination_group_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups)
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups::SharedCtor() {
  _cached_size_ = 0;
}

TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups::~TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups)
  SharedDtor();
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups::SharedDtor() {
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups& TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups();
  return *internal_default_instance();
}

TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups* TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups* n = new TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  destination_group_.Clear();
  _internal_metadata_.Clear();
}

bool TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3125619026u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroupKey destination_group = 390702378 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/destination-groups/destination-group"];
      case 390702378: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 3125619026 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_destination_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups)
  return false;
#undef DO_
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroupKey destination_group = 390702378 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/destination-groups/destination-group"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->destination_group_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      390702378, this->destination_group(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups)
}

::google::protobuf::uint8* TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroupKey destination_group = 390702378 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/destination-groups/destination-group"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->destination_group_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        390702378, this->destination_group(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups)
  return target;
}

size_t TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups.DestinationGroupKey destination_group = 390702378 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/destination-groups/destination-group"];
  {
    unsigned int count = static_cast<unsigned int>(this->destination_group_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->destination_group(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups)
    MergeFrom(*source);
  }
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups::MergeFrom(const TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  destination_group_.MergeFrom(from.destination_group_);
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups::CopyFrom(const TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups::IsInitialized() const {
  return true;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups::Swap(TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups::InternalSwap(TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups* other) {
  using std::swap;
  destination_group_.InternalSwap(&other->destination_group_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config_default_instance_._instance.get_mutable()->heartbeat_interval_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config_default_instance_._instance.get_mutable()->sample_interval_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config_default_instance_._instance.get_mutable()->sensor_group_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config_default_instance_._instance.get_mutable()->suppress_redundant_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
}
void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config::clear_heartbeat_interval() {
  if (GetArenaNoVirtual() == NULL && heartbeat_interval_ != NULL) {
    delete heartbeat_interval_;
  }
  heartbeat_interval_ = NULL;
}
void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config::clear_sample_interval() {
  if (GetArenaNoVirtual() == NULL && sample_interval_ != NULL) {
    delete sample_interval_;
  }
  sample_interval_ = NULL;
}
void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config::clear_sensor_group() {
  if (GetArenaNoVirtual() == NULL && sensor_group_ != NULL) {
    delete sensor_group_;
  }
  sensor_group_ = NULL;
}
void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config::clear_suppress_redundant() {
  if (GetArenaNoVirtual() == NULL && suppress_redundant_ != NULL) {
    delete suppress_redundant_;
  }
  suppress_redundant_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config::kHeartbeatIntervalFieldNumber;
const int TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config::kSampleIntervalFieldNumber;
const int TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config::kSensorGroupFieldNumber;
const int TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config::kSuppressRedundantFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.Config)
}
TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config(const TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_suppress_redundant()) {
    suppress_redundant_ = new ::ywrapper::BoolValue(*from.suppress_redundant_);
  } else {
    suppress_redundant_ = NULL;
  }
  if (from.has_sensor_group()) {
    sensor_group_ = new ::ywrapper::StringValue(*from.sensor_group_);
  } else {
    sensor_group_ = NULL;
  }
  if (from.has_heartbeat_interval()) {
    heartbeat_interval_ = new ::ywrapper::UintValue(*from.heartbeat_interval_);
  } else {
    heartbeat_interval_ = NULL;
  }
  if (from.has_sample_interval()) {
    sample_interval_ = new ::ywrapper::UintValue(*from.sample_interval_);
  } else {
    sample_interval_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.Config)
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config::SharedCtor() {
  ::memset(&suppress_redundant_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sample_interval_) -
      reinterpret_cast<char*>(&suppress_redundant_)) + sizeof(sample_interval_));
  _cached_size_ = 0;
}

TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config::~TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.Config)
  SharedDtor();
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config::SharedDtor() {
  if (this != internal_default_instance()) delete suppress_redundant_;
  if (this != internal_default_instance()) delete sensor_group_;
  if (this != internal_default_instance()) delete heartbeat_interval_;
  if (this != internal_default_instance()) delete sample_interval_;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config& TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config();
  return *internal_default_instance();
}

TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config* TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config* n = new TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && suppress_redundant_ != NULL) {
    delete suppress_redundant_;
  }
  suppress_redundant_ = NULL;
  if (GetArenaNoVirtual() == NULL && sensor_group_ != NULL) {
    delete sensor_group_;
  }
  sensor_group_ = NULL;
  if (GetArenaNoVirtual() == NULL && heartbeat_interval_ != NULL) {
    delete heartbeat_interval_;
  }
  heartbeat_interval_ = NULL;
  if (GetArenaNoVirtual() == NULL && sample_interval_ != NULL) {
    delete sample_interval_;
  }
  sample_interval_ = NULL;
  _internal_metadata_.Clear();
}

bool TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2701658514u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.BoolValue suppress_redundant = 62832455 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/config/suppress-redundant"];
      case 62832455: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 502659642 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_suppress_redundant()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue sensor_group = 67209630 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/config/sensor-group"];
      case 67209630: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 537677042 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue heartbeat_interval = 246802852 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/config/heartbeat-interval"];
      case 246802852: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 1974422818 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_heartbeat_interval()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue sample_interval = 337707314 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/config/sample-interval"];
      case 337707314: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 2701658514 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sample_interval()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.Config)
  return false;
#undef DO_
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.BoolValue suppress_redundant = 62832455 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/config/suppress-redundant"];
  if (this->has_suppress_redundant()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62832455, *this->suppress_redundant_, output);
  }

  // .ywrapper.StringValue sensor_group = 67209630 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/config/sensor-group"];
  if (this->has_sensor_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      67209630, *this->sensor_group_, output);
  }

  // .ywrapper.UintValue heartbeat_interval = 246802852 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/config/heartbeat-interval"];
  if (this->has_heartbeat_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      246802852, *this->heartbeat_interval_, output);
  }

  // .ywrapper.UintValue sample_interval = 337707314 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/config/sample-interval"];
  if (this->has_sample_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      337707314, *this->sample_interval_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.Config)
}

::google::protobuf::uint8* TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.BoolValue suppress_redundant = 62832455 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/config/suppress-redundant"];
  if (this->has_suppress_redundant()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        62832455, *this->suppress_redundant_, deterministic, target);
  }

  // .ywrapper.StringValue sensor_group = 67209630 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/config/sensor-group"];
  if (this->has_sensor_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        67209630, *this->sensor_group_, deterministic, target);
  }

  // .ywrapper.UintValue heartbeat_interval = 246802852 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/config/heartbeat-interval"];
  if (this->has_heartbeat_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        246802852, *this->heartbeat_interval_, deterministic, target);
  }

  // .ywrapper.UintValue sample_interval = 337707314 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/config/sample-interval"];
  if (this->has_sample_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        337707314, *this->sample_interval_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.Config)
  return target;
}

size_t TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.BoolValue suppress_redundant = 62832455 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/config/suppress-redundant"];
  if (this->has_suppress_redundant()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->suppress_redundant_);
  }

  // .ywrapper.StringValue sensor_group = 67209630 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/config/sensor-group"];
  if (this->has_sensor_group()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sensor_group_);
  }

  // .ywrapper.UintValue heartbeat_interval = 246802852 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/config/heartbeat-interval"];
  if (this->has_heartbeat_interval()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->heartbeat_interval_);
  }

  // .ywrapper.UintValue sample_interval = 337707314 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/config/sample-interval"];
  if (this->has_sample_interval()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sample_interval_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.Config)
    MergeFrom(*source);
  }
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config::MergeFrom(const TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_suppress_redundant()) {
    mutable_suppress_redundant()->::ywrapper::BoolValue::MergeFrom(from.suppress_redundant());
  }
  if (from.has_sensor_group()) {
    mutable_sensor_group()->::ywrapper::StringValue::MergeFrom(from.sensor_group());
  }
  if (from.has_heartbeat_interval()) {
    mutable_heartbeat_interval()->::ywrapper::UintValue::MergeFrom(from.heartbeat_interval());
  }
  if (from.has_sample_interval()) {
    mutable_sample_interval()->::ywrapper::UintValue::MergeFrom(from.sample_interval());
  }
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config::CopyFrom(const TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config::IsInitialized() const {
  return true;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config::Swap(TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config::InternalSwap(TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config* other) {
  using std::swap;
  swap(suppress_redundant_, other->suppress_redundant_);
  swap(sensor_group_, other->sensor_group_);
  swap(heartbeat_interval_, other->heartbeat_interval_);
  swap(sample_interval_, other->sample_interval_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State_default_instance_._instance.get_mutable()->heartbeat_interval_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State_default_instance_._instance.get_mutable()->sample_interval_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State_default_instance_._instance.get_mutable()->sensor_group_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State_default_instance_._instance.get_mutable()->suppress_redundant_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
}
void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State::clear_heartbeat_interval() {
  if (GetArenaNoVirtual() == NULL && heartbeat_interval_ != NULL) {
    delete heartbeat_interval_;
  }
  heartbeat_interval_ = NULL;
}
void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State::clear_sample_interval() {
  if (GetArenaNoVirtual() == NULL && sample_interval_ != NULL) {
    delete sample_interval_;
  }
  sample_interval_ = NULL;
}
void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State::clear_sensor_group() {
  if (GetArenaNoVirtual() == NULL && sensor_group_ != NULL) {
    delete sensor_group_;
  }
  sensor_group_ = NULL;
}
void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State::clear_suppress_redundant() {
  if (GetArenaNoVirtual() == NULL && suppress_redundant_ != NULL) {
    delete suppress_redundant_;
  }
  suppress_redundant_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State::kHeartbeatIntervalFieldNumber;
const int TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State::kSampleIntervalFieldNumber;
const int TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State::kSensorGroupFieldNumber;
const int TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State::kSuppressRedundantFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.State)
}
TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State(const TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sensor_group()) {
    sensor_group_ = new ::ywrapper::StringValue(*from.sensor_group_);
  } else {
    sensor_group_ = NULL;
  }
  if (from.has_suppress_redundant()) {
    suppress_redundant_ = new ::ywrapper::BoolValue(*from.suppress_redundant_);
  } else {
    suppress_redundant_ = NULL;
  }
  if (from.has_sample_interval()) {
    sample_interval_ = new ::ywrapper::UintValue(*from.sample_interval_);
  } else {
    sample_interval_ = NULL;
  }
  if (from.has_heartbeat_interval()) {
    heartbeat_interval_ = new ::ywrapper::UintValue(*from.heartbeat_interval_);
  } else {
    heartbeat_interval_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.State)
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State::SharedCtor() {
  ::memset(&sensor_group_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heartbeat_interval_) -
      reinterpret_cast<char*>(&sensor_group_)) + sizeof(heartbeat_interval_));
  _cached_size_ = 0;
}

TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State::~TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.State)
  SharedDtor();
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State::SharedDtor() {
  if (this != internal_default_instance()) delete sensor_group_;
  if (this != internal_default_instance()) delete suppress_redundant_;
  if (this != internal_default_instance()) delete sample_interval_;
  if (this != internal_default_instance()) delete heartbeat_interval_;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State& TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State();
  return *internal_default_instance();
}

TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State* TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State* n = new TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sensor_group_ != NULL) {
    delete sensor_group_;
  }
  sensor_group_ = NULL;
  if (GetArenaNoVirtual() == NULL && suppress_redundant_ != NULL) {
    delete suppress_redundant_;
  }
  suppress_redundant_ = NULL;
  if (GetArenaNoVirtual() == NULL && sample_interval_ != NULL) {
    delete sample_interval_;
  }
  sample_interval_ = NULL;
  if (GetArenaNoVirtual() == NULL && heartbeat_interval_ != NULL) {
    delete heartbeat_interval_;
  }
  heartbeat_interval_ = NULL;
  _internal_metadata_.Clear();
}

bool TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2696415082u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue sensor_group = 31535139 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/state/sensor-group"];
      case 31535139: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 252281114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue suppress_redundant = 37092854 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/state/suppress-redundant"];
      case 37092854: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 296742834 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_suppress_redundant()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue sample_interval = 300765917 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/state/sample-interval"];
      case 300765917: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 2406127338 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sample_interval()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue heartbeat_interval = 337051885 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/state/heartbeat-interval"];
      case 337051885: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 2696415082 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_heartbeat_interval()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.State)
  return false;
#undef DO_
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue sensor_group = 31535139 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/state/sensor-group"];
  if (this->has_sensor_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31535139, *this->sensor_group_, output);
  }

  // .ywrapper.BoolValue suppress_redundant = 37092854 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/state/suppress-redundant"];
  if (this->has_suppress_redundant()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37092854, *this->suppress_redundant_, output);
  }

  // .ywrapper.UintValue sample_interval = 300765917 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/state/sample-interval"];
  if (this->has_sample_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      300765917, *this->sample_interval_, output);
  }

  // .ywrapper.UintValue heartbeat_interval = 337051885 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/state/heartbeat-interval"];
  if (this->has_heartbeat_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      337051885, *this->heartbeat_interval_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.State)
}

::google::protobuf::uint8* TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue sensor_group = 31535139 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/state/sensor-group"];
  if (this->has_sensor_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        31535139, *this->sensor_group_, deterministic, target);
  }

  // .ywrapper.BoolValue suppress_redundant = 37092854 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/state/suppress-redundant"];
  if (this->has_suppress_redundant()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        37092854, *this->suppress_redundant_, deterministic, target);
  }

  // .ywrapper.UintValue sample_interval = 300765917 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/state/sample-interval"];
  if (this->has_sample_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        300765917, *this->sample_interval_, deterministic, target);
  }

  // .ywrapper.UintValue heartbeat_interval = 337051885 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/state/heartbeat-interval"];
  if (this->has_heartbeat_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        337051885, *this->heartbeat_interval_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.State)
  return target;
}

size_t TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue sensor_group = 31535139 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/state/sensor-group"];
  if (this->has_sensor_group()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sensor_group_);
  }

  // .ywrapper.BoolValue suppress_redundant = 37092854 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/state/suppress-redundant"];
  if (this->has_suppress_redundant()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->suppress_redundant_);
  }

  // .ywrapper.UintValue sample_interval = 300765917 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/state/sample-interval"];
  if (this->has_sample_interval()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sample_interval_);
  }

  // .ywrapper.UintValue heartbeat_interval = 337051885 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/state/heartbeat-interval"];
  if (this->has_heartbeat_interval()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->heartbeat_interval_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.State)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.State)
    MergeFrom(*source);
  }
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State::MergeFrom(const TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sensor_group()) {
    mutable_sensor_group()->::ywrapper::StringValue::MergeFrom(from.sensor_group());
  }
  if (from.has_suppress_redundant()) {
    mutable_suppress_redundant()->::ywrapper::BoolValue::MergeFrom(from.suppress_redundant());
  }
  if (from.has_sample_interval()) {
    mutable_sample_interval()->::ywrapper::UintValue::MergeFrom(from.sample_interval());
  }
  if (from.has_heartbeat_interval()) {
    mutable_heartbeat_interval()->::ywrapper::UintValue::MergeFrom(from.heartbeat_interval());
  }
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State::CopyFrom(const TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State::IsInitialized() const {
  return true;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State::Swap(TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State::InternalSwap(TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State* other) {
  using std::swap;
  swap(sensor_group_, other->sensor_group_);
  swap(suppress_redundant_, other->suppress_redundant_);
  swap(sample_interval_, other->sample_interval_);
  swap(heartbeat_interval_, other->heartbeat_interval_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile::InitAsDefaultInstance() {
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config*>(
      ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config::internal_default_instance());
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State*>(
      ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile::kConfigFieldNumber;
const int TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile)
}
TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile(const TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile)
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&state_)) + sizeof(config_));
  _cached_size_ = 0;
}

TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile::~TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile)
  SharedDtor();
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete config_;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile& TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile();
  return *internal_default_instance();
}

TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile* TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile* n = new TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  _internal_metadata_.Clear();
}

bool TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4182144346u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.State state = 242816108 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/state"];
      case 242816108: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 1942528866 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.Config config = 522768043 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/config"];
      case 522768043: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 4182144346 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile)
  return false;
#undef DO_
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.State state = 242816108 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      242816108, *this->state_, output);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.Config config = 522768043 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      522768043, *this->config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile)
}

::google::protobuf::uint8* TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.State state = 242816108 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        242816108, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.Config config = 522768043 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        522768043, *this->config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile)
  return target;
}

size_t TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.State state = 242816108 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile.Config config = 522768043 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile)
    MergeFrom(*source);
  }
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile::MergeFrom(const TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_State::MergeFrom(from.state());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile_Config::MergeFrom(from.config());
  }
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile::CopyFrom(const TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile::IsInitialized() const {
  return true;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile::Swap(TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile::InternalSwap(TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(config_, other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey::InitAsDefaultInstance() {
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey_default_instance_._instance.get_mutable()->sensor_profile_ = const_cast< ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile*>(
      ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey::kSensorGroupFieldNumber;
const int TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey::kSensorProfileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfileKey)
}
TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey(const TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sensor_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sensor_group().size() > 0) {
    sensor_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensor_group_);
  }
  if (from.has_sensor_profile()) {
    sensor_profile_ = new ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile(*from.sensor_profile_);
  } else {
    sensor_profile_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfileKey)
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey::SharedCtor() {
  sensor_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sensor_profile_ = NULL;
  _cached_size_ = 0;
}

TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey::~TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfileKey)
  SharedDtor();
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey::SharedDtor() {
  sensor_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sensor_profile_;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey& TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey();
  return *internal_default_instance();
}

TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey* TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey* n = new TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfileKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensor_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && sensor_profile_ != NULL) {
    delete sensor_profile_;
  }
  sensor_profile_ = NULL;
  _internal_metadata_.Clear();
}

bool TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfileKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sensor_group = 1 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/sensor-group"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensor_group()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sensor_group().data(), static_cast<int>(this->sensor_group().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfileKey.sensor_group"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile sensor_profile = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_profile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfileKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfileKey)
  return false;
#undef DO_
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfileKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sensor_group = 1 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/sensor-group"];
  if (this->sensor_group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sensor_group().data(), static_cast<int>(this->sensor_group().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfileKey.sensor_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sensor_group(), output);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile sensor_profile = 2;
  if (this->has_sensor_profile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->sensor_profile_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfileKey)
}

::google::protobuf::uint8* TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfileKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sensor_group = 1 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/sensor-group"];
  if (this->sensor_group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sensor_group().data(), static_cast<int>(this->sensor_group().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfileKey.sensor_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sensor_group(), target);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile sensor_profile = 2;
  if (this->has_sensor_profile()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->sensor_profile_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfileKey)
  return target;
}

size_t TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfileKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sensor_group = 1 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile/sensor-group"];
  if (this->sensor_group().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sensor_group());
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfile sensor_profile = 2;
  if (this->has_sensor_profile()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sensor_profile_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfileKey)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfileKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfileKey)
    MergeFrom(*source);
  }
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey::MergeFrom(const TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfileKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sensor_group().size() > 0) {

    sensor_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensor_group_);
  }
  if (from.has_sensor_profile()) {
    mutable_sensor_profile()->::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfile::MergeFrom(from.sensor_profile());
  }
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfileKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey::CopyFrom(const TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfileKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey::IsInitialized() const {
  return true;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey::Swap(TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey::InternalSwap(TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey* other) {
  using std::swap;
  sensor_group_.Swap(&other->sensor_group_);
  swap(sensor_profile_, other->sensor_profile_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles_SensorProfileKey::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles::kSensorProfileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles)
}
TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles(const TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sensor_profile_(from.sensor_profile_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles)
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles::SharedCtor() {
  _cached_size_ = 0;
}

TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles::~TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles)
  SharedDtor();
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles::SharedDtor() {
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles& TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles();
  return *internal_default_instance();
}

TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles* TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles* n = new TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensor_profile_.Clear();
  _internal_metadata_.Clear();
}

bool TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4054848978u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfileKey sensor_profile = 506856122 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile"];
      case 506856122: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 4054848978 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_sensor_profile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles)
  return false;
#undef DO_
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfileKey sensor_profile = 506856122 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_profile_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      506856122, this->sensor_profile(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles)
}

::google::protobuf::uint8* TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfileKey sensor_profile = 506856122 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_profile_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        506856122, this->sensor_profile(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles)
  return target;
}

size_t TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles.SensorProfileKey sensor_profile = 506856122 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile"];
  {
    unsigned int count = static_cast<unsigned int>(this->sensor_profile_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sensor_profile(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles)
    MergeFrom(*source);
  }
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles::MergeFrom(const TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensor_profile_.MergeFrom(from.sensor_profile_);
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles::CopyFrom(const TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles::IsInitialized() const {
  return true;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles::Swap(TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles::InternalSwap(TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles* other) {
  using std::swap;
  sensor_profile_.InternalSwap(&other->sensor_profile_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_Subscriptions_Persistent_Subscription_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_State_default_instance_._instance.get_mutable()->local_source_address_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_State_default_instance_._instance.get_mutable()->originated_qos_marking_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_State_default_instance_._instance.get_mutable()->subscription_id_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_State_default_instance_._instance.get_mutable()->subscription_name_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void TelemetrySystem_Subscriptions_Persistent_Subscription_State::clear_local_source_address() {
  if (GetArenaNoVirtual() == NULL && local_source_address_ != NULL) {
    delete local_source_address_;
  }
  local_source_address_ = NULL;
}
void TelemetrySystem_Subscriptions_Persistent_Subscription_State::clear_originated_qos_marking() {
  if (GetArenaNoVirtual() == NULL && originated_qos_marking_ != NULL) {
    delete originated_qos_marking_;
  }
  originated_qos_marking_ = NULL;
}
void TelemetrySystem_Subscriptions_Persistent_Subscription_State::clear_subscription_id() {
  if (GetArenaNoVirtual() == NULL && subscription_id_ != NULL) {
    delete subscription_id_;
  }
  subscription_id_ = NULL;
}
void TelemetrySystem_Subscriptions_Persistent_Subscription_State::clear_subscription_name() {
  if (GetArenaNoVirtual() == NULL && subscription_name_ != NULL) {
    delete subscription_name_;
  }
  subscription_name_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_Subscriptions_Persistent_Subscription_State::kEncodingFieldNumber;
const int TelemetrySystem_Subscriptions_Persistent_Subscription_State::kLocalSourceAddressFieldNumber;
const int TelemetrySystem_Subscriptions_Persistent_Subscription_State::kOriginatedQosMarkingFieldNumber;
const int TelemetrySystem_Subscriptions_Persistent_Subscription_State::kProtocolFieldNumber;
const int TelemetrySystem_Subscriptions_Persistent_Subscription_State::kSubscriptionIdFieldNumber;
const int TelemetrySystem_Subscriptions_Persistent_Subscription_State::kSubscriptionNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_Subscriptions_Persistent_Subscription_State::TelemetrySystem_Subscriptions_Persistent_Subscription_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.State)
}
TelemetrySystem_Subscriptions_Persistent_Subscription_State::TelemetrySystem_Subscriptions_Persistent_Subscription_State(const TelemetrySystem_Subscriptions_Persistent_Subscription_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_local_source_address()) {
    local_source_address_ = new ::ywrapper::StringValue(*from.local_source_address_);
  } else {
    local_source_address_ = NULL;
  }
  if (from.has_subscription_name()) {
    subscription_name_ = new ::ywrapper::StringValue(*from.subscription_name_);
  } else {
    subscription_name_ = NULL;
  }
  if (from.has_originated_qos_marking()) {
    originated_qos_marking_ = new ::ywrapper::UintValue(*from.originated_qos_marking_);
  } else {
    originated_qos_marking_ = NULL;
  }
  if (from.has_subscription_id()) {
    subscription_id_ = new ::ywrapper::UintValue(*from.subscription_id_);
  } else {
    subscription_id_ = NULL;
  }
  ::memcpy(&encoding_, &from.encoding_,
    static_cast<size_t>(reinterpret_cast<char*>(&protocol_) -
    reinterpret_cast<char*>(&encoding_)) + sizeof(protocol_));
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.State)
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_State::SharedCtor() {
  ::memset(&local_source_address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&protocol_) -
      reinterpret_cast<char*>(&local_source_address_)) + sizeof(protocol_));
  _cached_size_ = 0;
}

TelemetrySystem_Subscriptions_Persistent_Subscription_State::~TelemetrySystem_Subscriptions_Persistent_Subscription_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.State)
  SharedDtor();
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_State::SharedDtor() {
  if (this != internal_default_instance()) delete local_source_address_;
  if (this != internal_default_instance()) delete subscription_name_;
  if (this != internal_default_instance()) delete originated_qos_marking_;
  if (this != internal_default_instance()) delete subscription_id_;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_Subscriptions_Persistent_Subscription_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_Subscriptions_Persistent_Subscription_State& TelemetrySystem_Subscriptions_Persistent_Subscription_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription_State();
  return *internal_default_instance();
}

TelemetrySystem_Subscriptions_Persistent_Subscription_State* TelemetrySystem_Subscriptions_Persistent_Subscription_State::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_Subscriptions_Persistent_Subscription_State* n = new TelemetrySystem_Subscriptions_Persistent_Subscription_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && local_source_address_ != NULL) {
    delete local_source_address_;
  }
  local_source_address_ = NULL;
  if (GetArenaNoVirtual() == NULL && subscription_name_ != NULL) {
    delete subscription_name_;
  }
  subscription_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && originated_qos_marking_ != NULL) {
    delete originated_qos_marking_;
  }
  originated_qos_marking_ = NULL;
  if (GetArenaNoVirtual() == NULL && subscription_id_ != NULL) {
    delete subscription_id_;
  }
  subscription_id_ = NULL;
  ::memset(&encoding_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&protocol_) -
      reinterpret_cast<char*>(&encoding_)) + sizeof(protocol_));
  _internal_metadata_.Clear();
}

bool TelemetrySystem_Subscriptions_Persistent_Subscription_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3604596560u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue local_source_address = 76848696 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/state/local-source-address"];
      case 76848696: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 614789570 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_local_source_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue subscription_name = 179804147 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/state/subscription-name"];
      case 179804147: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 1438433178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_subscription_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue originated_qos_marking = 184038690 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/state/originated-qos-marking"];
      case 184038690: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 1472309522 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_originated_qos_marking()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.enums.OpenconfigTelemetryTypesDATAENCODINGMETHOD encoding = 305899469 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/state/encoding"];
      case 305899469: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 2447195752 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encoding(static_cast< ::openconfig::enums::OpenconfigTelemetryTypesDATAENCODINGMETHOD >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue subscription_id = 395277141 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/state/subscription-id"];
      case 395277141: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 3162217130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_subscription_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.enums.OpenconfigTelemetryTypesSTREAMPROTOCOL protocol = 450574570 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/state/protocol"];
      case 450574570: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 3604596560 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_protocol(static_cast< ::openconfig::enums::OpenconfigTelemetryTypesSTREAMPROTOCOL >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.State)
  return false;
#undef DO_
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue local_source_address = 76848696 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/state/local-source-address"];
  if (this->has_local_source_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      76848696, *this->local_source_address_, output);
  }

  // .ywrapper.StringValue subscription_name = 179804147 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/state/subscription-name"];
  if (this->has_subscription_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      179804147, *this->subscription_name_, output);
  }

  // .ywrapper.UintValue originated_qos_marking = 184038690 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/state/originated-qos-marking"];
  if (this->has_originated_qos_marking()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      184038690, *this->originated_qos_marking_, output);
  }

  // .openconfig.enums.OpenconfigTelemetryTypesDATAENCODINGMETHOD encoding = 305899469 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/state/encoding"];
  if (this->encoding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      305899469, this->encoding(), output);
  }

  // .ywrapper.UintValue subscription_id = 395277141 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/state/subscription-id"];
  if (this->has_subscription_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      395277141, *this->subscription_id_, output);
  }

  // .openconfig.enums.OpenconfigTelemetryTypesSTREAMPROTOCOL protocol = 450574570 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/state/protocol"];
  if (this->protocol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      450574570, this->protocol(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.State)
}

::google::protobuf::uint8* TelemetrySystem_Subscriptions_Persistent_Subscription_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue local_source_address = 76848696 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/state/local-source-address"];
  if (this->has_local_source_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        76848696, *this->local_source_address_, deterministic, target);
  }

  // .ywrapper.StringValue subscription_name = 179804147 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/state/subscription-name"];
  if (this->has_subscription_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        179804147, *this->subscription_name_, deterministic, target);
  }

  // .ywrapper.UintValue originated_qos_marking = 184038690 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/state/originated-qos-marking"];
  if (this->has_originated_qos_marking()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        184038690, *this->originated_qos_marking_, deterministic, target);
  }

  // .openconfig.enums.OpenconfigTelemetryTypesDATAENCODINGMETHOD encoding = 305899469 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/state/encoding"];
  if (this->encoding() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      305899469, this->encoding(), target);
  }

  // .ywrapper.UintValue subscription_id = 395277141 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/state/subscription-id"];
  if (this->has_subscription_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        395277141, *this->subscription_id_, deterministic, target);
  }

  // .openconfig.enums.OpenconfigTelemetryTypesSTREAMPROTOCOL protocol = 450574570 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/state/protocol"];
  if (this->protocol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      450574570, this->protocol(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.State)
  return target;
}

size_t TelemetrySystem_Subscriptions_Persistent_Subscription_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue local_source_address = 76848696 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/state/local-source-address"];
  if (this->has_local_source_address()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->local_source_address_);
  }

  // .ywrapper.StringValue subscription_name = 179804147 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/state/subscription-name"];
  if (this->has_subscription_name()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->subscription_name_);
  }

  // .ywrapper.UintValue originated_qos_marking = 184038690 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/state/originated-qos-marking"];
  if (this->has_originated_qos_marking()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->originated_qos_marking_);
  }

  // .ywrapper.UintValue subscription_id = 395277141 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/state/subscription-id"];
  if (this->has_subscription_id()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->subscription_id_);
  }

  // .openconfig.enums.OpenconfigTelemetryTypesDATAENCODINGMETHOD encoding = 305899469 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/state/encoding"];
  if (this->encoding() != 0) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
  }

  // .openconfig.enums.OpenconfigTelemetryTypesSTREAMPROTOCOL protocol = 450574570 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/state/protocol"];
  if (this->protocol() != 0) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->protocol());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.State)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_Subscriptions_Persistent_Subscription_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_Subscriptions_Persistent_Subscription_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.State)
    MergeFrom(*source);
  }
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_State::MergeFrom(const TelemetrySystem_Subscriptions_Persistent_Subscription_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_local_source_address()) {
    mutable_local_source_address()->::ywrapper::StringValue::MergeFrom(from.local_source_address());
  }
  if (from.has_subscription_name()) {
    mutable_subscription_name()->::ywrapper::StringValue::MergeFrom(from.subscription_name());
  }
  if (from.has_originated_qos_marking()) {
    mutable_originated_qos_marking()->::ywrapper::UintValue::MergeFrom(from.originated_qos_marking());
  }
  if (from.has_subscription_id()) {
    mutable_subscription_id()->::ywrapper::UintValue::MergeFrom(from.subscription_id());
  }
  if (from.encoding() != 0) {
    set_encoding(from.encoding());
  }
  if (from.protocol() != 0) {
    set_protocol(from.protocol());
  }
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_State::CopyFrom(const TelemetrySystem_Subscriptions_Persistent_Subscription_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_Subscriptions_Persistent_Subscription_State::IsInitialized() const {
  return true;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription_State::Swap(TelemetrySystem_Subscriptions_Persistent_Subscription_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_Subscriptions_Persistent_Subscription_State::InternalSwap(TelemetrySystem_Subscriptions_Persistent_Subscription_State* other) {
  using std::swap;
  swap(local_source_address_, other->local_source_address_);
  swap(subscription_name_, other->subscription_name_);
  swap(originated_qos_marking_, other->originated_qos_marking_);
  swap(subscription_id_, other->subscription_id_);
  swap(encoding_, other->encoding_);
  swap(protocol_, other->protocol_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_Subscriptions_Persistent_Subscription_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_Subscriptions_Persistent_Subscription::InitAsDefaultInstance() {
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_Config*>(
      ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_Config::internal_default_instance());
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_default_instance_._instance.get_mutable()->destination_groups_ = const_cast< ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups*>(
      ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups::internal_default_instance());
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_default_instance_._instance.get_mutable()->sensor_profiles_ = const_cast< ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles*>(
      ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles::internal_default_instance());
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_Subscription_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_State*>(
      ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_Subscriptions_Persistent_Subscription::kConfigFieldNumber;
const int TelemetrySystem_Subscriptions_Persistent_Subscription::kDestinationGroupsFieldNumber;
const int TelemetrySystem_Subscriptions_Persistent_Subscription::kSensorProfilesFieldNumber;
const int TelemetrySystem_Subscriptions_Persistent_Subscription::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_Subscriptions_Persistent_Subscription::TelemetrySystem_Subscriptions_Persistent_Subscription()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription)
}
TelemetrySystem_Subscriptions_Persistent_Subscription::TelemetrySystem_Subscriptions_Persistent_Subscription(const TelemetrySystem_Subscriptions_Persistent_Subscription& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_destination_groups()) {
    destination_groups_ = new ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups(*from.destination_groups_);
  } else {
    destination_groups_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_sensor_profiles()) {
    sensor_profiles_ = new ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles(*from.sensor_profiles_);
  } else {
    sensor_profiles_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription)
}

void TelemetrySystem_Subscriptions_Persistent_Subscription::SharedCtor() {
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sensor_profiles_) -
      reinterpret_cast<char*>(&config_)) + sizeof(sensor_profiles_));
  _cached_size_ = 0;
}

TelemetrySystem_Subscriptions_Persistent_Subscription::~TelemetrySystem_Subscriptions_Persistent_Subscription() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription)
  SharedDtor();
}

void TelemetrySystem_Subscriptions_Persistent_Subscription::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete destination_groups_;
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete sensor_profiles_;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_Subscriptions_Persistent_Subscription::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_Subscriptions_Persistent_Subscription& TelemetrySystem_Subscriptions_Persistent_Subscription::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_Subscription();
  return *internal_default_instance();
}

TelemetrySystem_Subscriptions_Persistent_Subscription* TelemetrySystem_Subscriptions_Persistent_Subscription::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_Subscriptions_Persistent_Subscription* n = new TelemetrySystem_Subscriptions_Persistent_Subscription;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && destination_groups_ != NULL) {
    delete destination_groups_;
  }
  destination_groups_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && sensor_profiles_ != NULL) {
    delete sensor_profiles_;
  }
  sensor_profiles_ = NULL;
  _internal_metadata_.Clear();
}

bool TelemetrySystem_Subscriptions_Persistent_Subscription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3495542794u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.Config config = 48457858 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/config"];
      case 48457858: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 387662866 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups destination_groups = 261943797 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/destination-groups"];
      case 261943797: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 2095550378 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_groups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.State state = 390151999 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/state"];
      case 390151999: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 3121215994 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles sensor_profiles = 436942849 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles"];
      case 436942849: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 3495542794 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_profiles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription)
  return false;
#undef DO_
}

void TelemetrySystem_Subscriptions_Persistent_Subscription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.Config config = 48457858 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48457858, *this->config_, output);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups destination_groups = 261943797 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/destination-groups"];
  if (this->has_destination_groups()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      261943797, *this->destination_groups_, output);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.State state = 390151999 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      390151999, *this->state_, output);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles sensor_profiles = 436942849 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles"];
  if (this->has_sensor_profiles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      436942849, *this->sensor_profiles_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription)
}

::google::protobuf::uint8* TelemetrySystem_Subscriptions_Persistent_Subscription::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.Config config = 48457858 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        48457858, *this->config_, deterministic, target);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups destination_groups = 261943797 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/destination-groups"];
  if (this->has_destination_groups()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        261943797, *this->destination_groups_, deterministic, target);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.State state = 390151999 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        390151999, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles sensor_profiles = 436942849 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles"];
  if (this->has_sensor_profiles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        436942849, *this->sensor_profiles_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription)
  return target;
}

size_t TelemetrySystem_Subscriptions_Persistent_Subscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.Config config = 48457858 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.DestinationGroups destination_groups = 261943797 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/destination-groups"];
  if (this->has_destination_groups()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->destination_groups_);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.State state = 390151999 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription.SensorProfiles sensor_profiles = 436942849 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/sensor-profiles"];
  if (this->has_sensor_profiles()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sensor_profiles_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_Subscriptions_Persistent_Subscription* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_Subscriptions_Persistent_Subscription>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription)
    MergeFrom(*source);
  }
}

void TelemetrySystem_Subscriptions_Persistent_Subscription::MergeFrom(const TelemetrySystem_Subscriptions_Persistent_Subscription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_Config::MergeFrom(from.config());
  }
  if (from.has_destination_groups()) {
    mutable_destination_groups()->::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_DestinationGroups::MergeFrom(from.destination_groups());
  }
  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_State::MergeFrom(from.state());
  }
  if (from.has_sensor_profiles()) {
    mutable_sensor_profiles()->::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription_SensorProfiles::MergeFrom(from.sensor_profiles());
  }
}

void TelemetrySystem_Subscriptions_Persistent_Subscription::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_Subscriptions_Persistent_Subscription::CopyFrom(const TelemetrySystem_Subscriptions_Persistent_Subscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_Subscriptions_Persistent_Subscription::IsInitialized() const {
  return true;
}

void TelemetrySystem_Subscriptions_Persistent_Subscription::Swap(TelemetrySystem_Subscriptions_Persistent_Subscription* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_Subscriptions_Persistent_Subscription::InternalSwap(TelemetrySystem_Subscriptions_Persistent_Subscription* other) {
  using std::swap;
  swap(config_, other->config_);
  swap(destination_groups_, other->destination_groups_);
  swap(state_, other->state_);
  swap(sensor_profiles_, other->sensor_profiles_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_Subscriptions_Persistent_Subscription::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_Subscriptions_Persistent_SubscriptionKey::InitAsDefaultInstance() {
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_Persistent_SubscriptionKey_default_instance_._instance.get_mutable()->subscription_ = const_cast< ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription*>(
      ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_Subscriptions_Persistent_SubscriptionKey::kSubscriptionNameFieldNumber;
const int TelemetrySystem_Subscriptions_Persistent_SubscriptionKey::kSubscriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_Subscriptions_Persistent_SubscriptionKey::TelemetrySystem_Subscriptions_Persistent_SubscriptionKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_SubscriptionKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.SubscriptionKey)
}
TelemetrySystem_Subscriptions_Persistent_SubscriptionKey::TelemetrySystem_Subscriptions_Persistent_SubscriptionKey(const TelemetrySystem_Subscriptions_Persistent_SubscriptionKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscription_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.subscription_name().size() > 0) {
    subscription_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subscription_name_);
  }
  if (from.has_subscription()) {
    subscription_ = new ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription(*from.subscription_);
  } else {
    subscription_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.SubscriptionKey)
}

void TelemetrySystem_Subscriptions_Persistent_SubscriptionKey::SharedCtor() {
  subscription_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subscription_ = NULL;
  _cached_size_ = 0;
}

TelemetrySystem_Subscriptions_Persistent_SubscriptionKey::~TelemetrySystem_Subscriptions_Persistent_SubscriptionKey() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.SubscriptionKey)
  SharedDtor();
}

void TelemetrySystem_Subscriptions_Persistent_SubscriptionKey::SharedDtor() {
  subscription_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete subscription_;
}

void TelemetrySystem_Subscriptions_Persistent_SubscriptionKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_Subscriptions_Persistent_SubscriptionKey::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_Subscriptions_Persistent_SubscriptionKey& TelemetrySystem_Subscriptions_Persistent_SubscriptionKey::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent_SubscriptionKey();
  return *internal_default_instance();
}

TelemetrySystem_Subscriptions_Persistent_SubscriptionKey* TelemetrySystem_Subscriptions_Persistent_SubscriptionKey::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_Subscriptions_Persistent_SubscriptionKey* n = new TelemetrySystem_Subscriptions_Persistent_SubscriptionKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_Subscriptions_Persistent_SubscriptionKey::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.SubscriptionKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscription_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && subscription_ != NULL) {
    delete subscription_;
  }
  subscription_ = NULL;
  _internal_metadata_.Clear();
}

bool TelemetrySystem_Subscriptions_Persistent_SubscriptionKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.SubscriptionKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string subscription_name = 1 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/subscription-name"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subscription_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subscription_name().data(), static_cast<int>(this->subscription_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.SubscriptionKey.subscription_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription subscription = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_subscription()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.SubscriptionKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.SubscriptionKey)
  return false;
#undef DO_
}

void TelemetrySystem_Subscriptions_Persistent_SubscriptionKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.SubscriptionKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription_name = 1 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/subscription-name"];
  if (this->subscription_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription_name().data(), static_cast<int>(this->subscription_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.SubscriptionKey.subscription_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->subscription_name(), output);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription subscription = 2;
  if (this->has_subscription()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->subscription_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.SubscriptionKey)
}

::google::protobuf::uint8* TelemetrySystem_Subscriptions_Persistent_SubscriptionKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.SubscriptionKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription_name = 1 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/subscription-name"];
  if (this->subscription_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription_name().data(), static_cast<int>(this->subscription_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.SubscriptionKey.subscription_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->subscription_name(), target);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription subscription = 2;
  if (this->has_subscription()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->subscription_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.SubscriptionKey)
  return target;
}

size_t TelemetrySystem_Subscriptions_Persistent_SubscriptionKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.SubscriptionKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string subscription_name = 1 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription/subscription-name"];
  if (this->subscription_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subscription_name());
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.Subscription subscription = 2;
  if (this->has_subscription()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->subscription_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_Subscriptions_Persistent_SubscriptionKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.SubscriptionKey)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_Subscriptions_Persistent_SubscriptionKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_Subscriptions_Persistent_SubscriptionKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.SubscriptionKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.SubscriptionKey)
    MergeFrom(*source);
  }
}

void TelemetrySystem_Subscriptions_Persistent_SubscriptionKey::MergeFrom(const TelemetrySystem_Subscriptions_Persistent_SubscriptionKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.SubscriptionKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.subscription_name().size() > 0) {

    subscription_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subscription_name_);
  }
  if (from.has_subscription()) {
    mutable_subscription()->::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent_Subscription::MergeFrom(from.subscription());
  }
}

void TelemetrySystem_Subscriptions_Persistent_SubscriptionKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.SubscriptionKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_Subscriptions_Persistent_SubscriptionKey::CopyFrom(const TelemetrySystem_Subscriptions_Persistent_SubscriptionKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.SubscriptionKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_Subscriptions_Persistent_SubscriptionKey::IsInitialized() const {
  return true;
}

void TelemetrySystem_Subscriptions_Persistent_SubscriptionKey::Swap(TelemetrySystem_Subscriptions_Persistent_SubscriptionKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_Subscriptions_Persistent_SubscriptionKey::InternalSwap(TelemetrySystem_Subscriptions_Persistent_SubscriptionKey* other) {
  using std::swap;
  subscription_name_.Swap(&other->subscription_name_);
  swap(subscription_, other->subscription_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_Subscriptions_Persistent_SubscriptionKey::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_Subscriptions_Persistent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_Subscriptions_Persistent::kSubscriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_Subscriptions_Persistent::TelemetrySystem_Subscriptions_Persistent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent)
}
TelemetrySystem_Subscriptions_Persistent::TelemetrySystem_Subscriptions_Persistent(const TelemetrySystem_Subscriptions_Persistent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      subscription_(from.subscription_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent)
}

void TelemetrySystem_Subscriptions_Persistent::SharedCtor() {
  _cached_size_ = 0;
}

TelemetrySystem_Subscriptions_Persistent::~TelemetrySystem_Subscriptions_Persistent() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent)
  SharedDtor();
}

void TelemetrySystem_Subscriptions_Persistent::SharedDtor() {
}

void TelemetrySystem_Subscriptions_Persistent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_Subscriptions_Persistent::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_Subscriptions_Persistent& TelemetrySystem_Subscriptions_Persistent::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions_Persistent();
  return *internal_default_instance();
}

TelemetrySystem_Subscriptions_Persistent* TelemetrySystem_Subscriptions_Persistent::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_Subscriptions_Persistent* n = new TelemetrySystem_Subscriptions_Persistent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_Subscriptions_Persistent::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscription_.Clear();
  _internal_metadata_.Clear();
}

bool TelemetrySystem_Subscriptions_Persistent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(1370195818u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.SubscriptionKey subscription = 171274477 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription"];
      case 171274477: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 1370195818 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_subscription()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent)
  return false;
#undef DO_
}

void TelemetrySystem_Subscriptions_Persistent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.SubscriptionKey subscription = 171274477 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subscription_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      171274477, this->subscription(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent)
}

::google::protobuf::uint8* TelemetrySystem_Subscriptions_Persistent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.SubscriptionKey subscription = 171274477 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subscription_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        171274477, this->subscription(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent)
  return target;
}

size_t TelemetrySystem_Subscriptions_Persistent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent.SubscriptionKey subscription = 171274477 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent/subscription"];
  {
    unsigned int count = static_cast<unsigned int>(this->subscription_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->subscription(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_Subscriptions_Persistent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_Subscriptions_Persistent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_Subscriptions_Persistent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent)
    MergeFrom(*source);
  }
}

void TelemetrySystem_Subscriptions_Persistent::MergeFrom(const TelemetrySystem_Subscriptions_Persistent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subscription_.MergeFrom(from.subscription_);
}

void TelemetrySystem_Subscriptions_Persistent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_Subscriptions_Persistent::CopyFrom(const TelemetrySystem_Subscriptions_Persistent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_Subscriptions_Persistent::IsInitialized() const {
  return true;
}

void TelemetrySystem_Subscriptions_Persistent::Swap(TelemetrySystem_Subscriptions_Persistent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_Subscriptions_Persistent::InternalSwap(TelemetrySystem_Subscriptions_Persistent* other) {
  using std::swap;
  subscription_.InternalSwap(&other->subscription_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_Subscriptions_Persistent::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem_Subscriptions::InitAsDefaultInstance() {
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_default_instance_._instance.get_mutable()->dynamic_ = const_cast< ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic*>(
      ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic::internal_default_instance());
  ::openconfig::openconfig_telemetry::_TelemetrySystem_Subscriptions_default_instance_._instance.get_mutable()->persistent_ = const_cast< ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent*>(
      ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem_Subscriptions::kDynamicFieldNumber;
const int TelemetrySystem_Subscriptions::kPersistentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem_Subscriptions::TelemetrySystem_Subscriptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions)
}
TelemetrySystem_Subscriptions::TelemetrySystem_Subscriptions(const TelemetrySystem_Subscriptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dynamic()) {
    dynamic_ = new ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic(*from.dynamic_);
  } else {
    dynamic_ = NULL;
  }
  if (from.has_persistent()) {
    persistent_ = new ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent(*from.persistent_);
  } else {
    persistent_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions)
}

void TelemetrySystem_Subscriptions::SharedCtor() {
  ::memset(&dynamic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&persistent_) -
      reinterpret_cast<char*>(&dynamic_)) + sizeof(persistent_));
  _cached_size_ = 0;
}

TelemetrySystem_Subscriptions::~TelemetrySystem_Subscriptions() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions)
  SharedDtor();
}

void TelemetrySystem_Subscriptions::SharedDtor() {
  if (this != internal_default_instance()) delete dynamic_;
  if (this != internal_default_instance()) delete persistent_;
}

void TelemetrySystem_Subscriptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem_Subscriptions::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem_Subscriptions& TelemetrySystem_Subscriptions::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem_Subscriptions();
  return *internal_default_instance();
}

TelemetrySystem_Subscriptions* TelemetrySystem_Subscriptions::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem_Subscriptions* n = new TelemetrySystem_Subscriptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem_Subscriptions::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && dynamic_ != NULL) {
    delete dynamic_;
  }
  dynamic_ = NULL;
  if (GetArenaNoVirtual() == NULL && persistent_ != NULL) {
    delete persistent_;
  }
  persistent_ = NULL;
  _internal_metadata_.Clear();
}

bool TelemetrySystem_Subscriptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3811360282u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic dynamic = 65921087 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic"];
      case 65921087: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 527368698 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dynamic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent persistent = 476420035 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent"];
      case 476420035: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 3811360282 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_persistent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions)
  return false;
#undef DO_
}

void TelemetrySystem_Subscriptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic dynamic = 65921087 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic"];
  if (this->has_dynamic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      65921087, *this->dynamic_, output);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent persistent = 476420035 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent"];
  if (this->has_persistent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      476420035, *this->persistent_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions)
}

::google::protobuf::uint8* TelemetrySystem_Subscriptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic dynamic = 65921087 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic"];
  if (this->has_dynamic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        65921087, *this->dynamic_, deterministic, target);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent persistent = 476420035 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent"];
  if (this->has_persistent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        476420035, *this->persistent_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions)
  return target;
}

size_t TelemetrySystem_Subscriptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Dynamic dynamic = 65921087 [(.yext.schemapath) = "/telemetry-system/subscriptions/dynamic"];
  if (this->has_dynamic()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dynamic_);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions.Persistent persistent = 476420035 [(.yext.schemapath) = "/telemetry-system/subscriptions/persistent"];
  if (this->has_persistent()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->persistent_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem_Subscriptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem_Subscriptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem_Subscriptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions)
    MergeFrom(*source);
  }
}

void TelemetrySystem_Subscriptions::MergeFrom(const TelemetrySystem_Subscriptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dynamic()) {
    mutable_dynamic()->::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Dynamic::MergeFrom(from.dynamic());
  }
  if (from.has_persistent()) {
    mutable_persistent()->::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions_Persistent::MergeFrom(from.persistent());
  }
}

void TelemetrySystem_Subscriptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem_Subscriptions::CopyFrom(const TelemetrySystem_Subscriptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem_Subscriptions::IsInitialized() const {
  return true;
}

void TelemetrySystem_Subscriptions::Swap(TelemetrySystem_Subscriptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem_Subscriptions::InternalSwap(TelemetrySystem_Subscriptions* other) {
  using std::swap;
  swap(dynamic_, other->dynamic_);
  swap(persistent_, other->persistent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem_Subscriptions::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetrySystem::InitAsDefaultInstance() {
  ::openconfig::openconfig_telemetry::_TelemetrySystem_default_instance_._instance.get_mutable()->destination_groups_ = const_cast< ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups*>(
      ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups::internal_default_instance());
  ::openconfig::openconfig_telemetry::_TelemetrySystem_default_instance_._instance.get_mutable()->sensor_groups_ = const_cast< ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups*>(
      ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups::internal_default_instance());
  ::openconfig::openconfig_telemetry::_TelemetrySystem_default_instance_._instance.get_mutable()->subscriptions_ = const_cast< ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions*>(
      ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetrySystem::kDestinationGroupsFieldNumber;
const int TelemetrySystem::kSensorGroupsFieldNumber;
const int TelemetrySystem::kSubscriptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetrySystem::TelemetrySystem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_telemetry.TelemetrySystem)
}
TelemetrySystem::TelemetrySystem(const TelemetrySystem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sensor_groups()) {
    sensor_groups_ = new ::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups(*from.sensor_groups_);
  } else {
    sensor_groups_ = NULL;
  }
  if (from.has_subscriptions()) {
    subscriptions_ = new ::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions(*from.subscriptions_);
  } else {
    subscriptions_ = NULL;
  }
  if (from.has_destination_groups()) {
    destination_groups_ = new ::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups(*from.destination_groups_);
  } else {
    destination_groups_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_telemetry.TelemetrySystem)
}

void TelemetrySystem::SharedCtor() {
  ::memset(&sensor_groups_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&destination_groups_) -
      reinterpret_cast<char*>(&sensor_groups_)) + sizeof(destination_groups_));
  _cached_size_ = 0;
}

TelemetrySystem::~TelemetrySystem() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_telemetry.TelemetrySystem)
  SharedDtor();
}

void TelemetrySystem::SharedDtor() {
  if (this != internal_default_instance()) delete sensor_groups_;
  if (this != internal_default_instance()) delete subscriptions_;
  if (this != internal_default_instance()) delete destination_groups_;
}

void TelemetrySystem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetrySystem::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetrySystem& TelemetrySystem::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::InitDefaultsTelemetrySystem();
  return *internal_default_instance();
}

TelemetrySystem* TelemetrySystem::New(::google::protobuf::Arena* arena) const {
  TelemetrySystem* n = new TelemetrySystem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetrySystem::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_telemetry.TelemetrySystem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sensor_groups_ != NULL) {
    delete sensor_groups_;
  }
  sensor_groups_ = NULL;
  if (GetArenaNoVirtual() == NULL && subscriptions_ != NULL) {
    delete subscriptions_;
  }
  subscriptions_ = NULL;
  if (GetArenaNoVirtual() == NULL && destination_groups_ != NULL) {
    delete destination_groups_;
  }
  destination_groups_ = NULL;
  _internal_metadata_.Clear();
}

bool TelemetrySystem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_telemetry.TelemetrySystem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(1976244482u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups sensor_groups = 14511052 [(.yext.schemapath) = "/telemetry-system/sensor-groups"];
      case 14511052: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 116088418 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_groups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions subscriptions = 114704761 [(.yext.schemapath) = "/telemetry-system/subscriptions"];
      case 114704761: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 917638090 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_subscriptions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups destination_groups = 247030560 [(.yext.schemapath) = "/telemetry-system/destination-groups"];
      case 247030560: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 1976244482 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_groups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_telemetry.TelemetrySystem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_telemetry.TelemetrySystem)
  return false;
#undef DO_
}

void TelemetrySystem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_telemetry.TelemetrySystem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups sensor_groups = 14511052 [(.yext.schemapath) = "/telemetry-system/sensor-groups"];
  if (this->has_sensor_groups()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14511052, *this->sensor_groups_, output);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions subscriptions = 114704761 [(.yext.schemapath) = "/telemetry-system/subscriptions"];
  if (this->has_subscriptions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      114704761, *this->subscriptions_, output);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups destination_groups = 247030560 [(.yext.schemapath) = "/telemetry-system/destination-groups"];
  if (this->has_destination_groups()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      247030560, *this->destination_groups_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_telemetry.TelemetrySystem)
}

::google::protobuf::uint8* TelemetrySystem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_telemetry.TelemetrySystem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups sensor_groups = 14511052 [(.yext.schemapath) = "/telemetry-system/sensor-groups"];
  if (this->has_sensor_groups()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14511052, *this->sensor_groups_, deterministic, target);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions subscriptions = 114704761 [(.yext.schemapath) = "/telemetry-system/subscriptions"];
  if (this->has_subscriptions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        114704761, *this->subscriptions_, deterministic, target);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups destination_groups = 247030560 [(.yext.schemapath) = "/telemetry-system/destination-groups"];
  if (this->has_destination_groups()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        247030560, *this->destination_groups_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_telemetry.TelemetrySystem)
  return target;
}

size_t TelemetrySystem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_telemetry.TelemetrySystem)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_telemetry.TelemetrySystem.SensorGroups sensor_groups = 14511052 [(.yext.schemapath) = "/telemetry-system/sensor-groups"];
  if (this->has_sensor_groups()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sensor_groups_);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.Subscriptions subscriptions = 114704761 [(.yext.schemapath) = "/telemetry-system/subscriptions"];
  if (this->has_subscriptions()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->subscriptions_);
  }

  // .openconfig.openconfig_telemetry.TelemetrySystem.DestinationGroups destination_groups = 247030560 [(.yext.schemapath) = "/telemetry-system/destination-groups"];
  if (this->has_destination_groups()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->destination_groups_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetrySystem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetrySystem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetrySystem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_telemetry.TelemetrySystem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_telemetry.TelemetrySystem)
    MergeFrom(*source);
  }
}

void TelemetrySystem::MergeFrom(const TelemetrySystem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_telemetry.TelemetrySystem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sensor_groups()) {
    mutable_sensor_groups()->::openconfig::openconfig_telemetry::TelemetrySystem_SensorGroups::MergeFrom(from.sensor_groups());
  }
  if (from.has_subscriptions()) {
    mutable_subscriptions()->::openconfig::openconfig_telemetry::TelemetrySystem_Subscriptions::MergeFrom(from.subscriptions());
  }
  if (from.has_destination_groups()) {
    mutable_destination_groups()->::openconfig::openconfig_telemetry::TelemetrySystem_DestinationGroups::MergeFrom(from.destination_groups());
  }
}

void TelemetrySystem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetrySystem::CopyFrom(const TelemetrySystem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_telemetry.TelemetrySystem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySystem::IsInitialized() const {
  return true;
}

void TelemetrySystem::Swap(TelemetrySystem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetrySystem::InternalSwap(TelemetrySystem* other) {
  using std::swap;
  swap(sensor_groups_, other->sensor_groups_);
  swap(subscriptions_, other->subscriptions_);
  swap(destination_groups_, other->destination_groups_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetrySystem::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5ftelemetry_2fopenconfig_5ftelemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace openconfig_telemetry
}  // namespace openconfig

// @@protoc_insertion_point(global_scope)
