// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openconfig/openconfig_qos/openconfig_qos.proto

#include "openconfig/openconfig_qos/openconfig_qos.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace openconfig {
namespace openconfig_qos {
class Qos_Classifiers_Classifier_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Classifiers_Classifier_Config>
      _instance;
} _Qos_Classifiers_Classifier_Config_default_instance_;
class Qos_Classifiers_Classifier_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Classifiers_Classifier_State>
      _instance;
} _Qos_Classifiers_Classifier_State_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Actions_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Classifiers_Classifier_Terms_Term_Actions_Config>
      _instance;
} _Qos_Classifiers_Classifier_Terms_Term_Actions_Config_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config>
      _instance;
} _Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State>
      _instance;
} _Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Actions_RemarkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Classifiers_Classifier_Terms_Term_Actions_Remark>
      _instance;
} _Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Actions_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Classifiers_Classifier_Terms_Term_Actions_State>
      _instance;
} _Qos_Classifiers_Classifier_Terms_Term_Actions_State_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_ActionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Classifiers_Classifier_Terms_Term_Actions>
      _instance;
} _Qos_Classifiers_Classifier_Terms_Term_Actions_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config>
      _instance;
  int protocol_openconfigpacketmatchtypesipprotocol_;
  ::google::protobuf::uint64 protocol_uint64_;
} _Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State>
      _instance;
  int protocol_openconfigpacketmatchtypesipprotocol_;
  ::google::protobuf::uint64 protocol_uint64_;
} _Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4>
      _instance;
} _Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config>
      _instance;
  int protocol_openconfigpacketmatchtypesipprotocol_;
  ::google::protobuf::uint64 protocol_uint64_;
} _Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State>
      _instance;
  int protocol_openconfigpacketmatchtypesipprotocol_;
  ::google::protobuf::uint64 protocol_uint64_;
} _Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6>
      _instance;
} _Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config>
      _instance;
  int ethertype_openconfigpacketmatchtypesethertype_;
  ::google::protobuf::uint64 ethertype_uint64_;
} _Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State>
      _instance;
  int ethertype_openconfigpacketmatchtypesethertype_;
  ::google::protobuf::uint64 ethertype_uint64_;
} _Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_L2DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Classifiers_Classifier_Terms_Term_Conditions_L2>
      _instance;
} _Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config>
      _instance;
} _Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State>
      _instance;
} _Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_MplsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls>
      _instance;
} _Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config>
      _instance;
  int destination_port_destinationport_;
  ::google::protobuf::internal::ArenaStringPtr destination_port_string_;
  ::google::protobuf::uint64 destination_port_uint64_;
  int source_port_sourceport_;
  ::google::protobuf::internal::ArenaStringPtr source_port_string_;
  ::google::protobuf::uint64 source_port_uint64_;
} _Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State>
      _instance;
  int destination_port_destinationport_;
  ::google::protobuf::internal::ArenaStringPtr destination_port_string_;
  ::google::protobuf::uint64 destination_port_uint64_;
  int source_port_sourceport_;
  ::google::protobuf::internal::ArenaStringPtr source_port_string_;
  ::google::protobuf::uint64 source_port_uint64_;
} _Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_TransportDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport>
      _instance;
} _Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_ConditionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Classifiers_Classifier_Terms_Term_Conditions>
      _instance;
} _Qos_Classifiers_Classifier_Terms_Term_Conditions_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Classifiers_Classifier_Terms_Term_Config>
      _instance;
} _Qos_Classifiers_Classifier_Terms_Term_Config_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Classifiers_Classifier_Terms_Term_State>
      _instance;
} _Qos_Classifiers_Classifier_Terms_Term_State_default_instance_;
class Qos_Classifiers_Classifier_Terms_TermDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Classifiers_Classifier_Terms_Term>
      _instance;
} _Qos_Classifiers_Classifier_Terms_Term_default_instance_;
class Qos_Classifiers_Classifier_Terms_TermKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Classifiers_Classifier_Terms_TermKey>
      _instance;
} _Qos_Classifiers_Classifier_Terms_TermKey_default_instance_;
class Qos_Classifiers_Classifier_TermsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Classifiers_Classifier_Terms>
      _instance;
} _Qos_Classifiers_Classifier_Terms_default_instance_;
class Qos_Classifiers_ClassifierDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Classifiers_Classifier>
      _instance;
} _Qos_Classifiers_Classifier_default_instance_;
class Qos_Classifiers_ClassifierKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Classifiers_ClassifierKey>
      _instance;
} _Qos_Classifiers_ClassifierKey_default_instance_;
class Qos_ClassifiersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Classifiers>
      _instance;
} _Qos_Classifiers_default_instance_;
class Qos_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Config>
      _instance;
} _Qos_Config_default_instance_;
class Qos_ForwardingGroups_ForwardingGroup_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_ForwardingGroups_ForwardingGroup_Config>
      _instance;
} _Qos_ForwardingGroups_ForwardingGroup_Config_default_instance_;
class Qos_ForwardingGroups_ForwardingGroup_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_ForwardingGroups_ForwardingGroup_State>
      _instance;
} _Qos_ForwardingGroups_ForwardingGroup_State_default_instance_;
class Qos_ForwardingGroups_ForwardingGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_ForwardingGroups_ForwardingGroup>
      _instance;
} _Qos_ForwardingGroups_ForwardingGroup_default_instance_;
class Qos_ForwardingGroups_ForwardingGroupKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_ForwardingGroups_ForwardingGroupKey>
      _instance;
} _Qos_ForwardingGroups_ForwardingGroupKey_default_instance_;
class Qos_ForwardingGroupsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_ForwardingGroups>
      _instance;
} _Qos_ForwardingGroups_default_instance_;
class Qos_Interfaces_Interface_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Config>
      _instance;
} _Qos_Interfaces_Interface_Config_default_instance_;
class Qos_Interfaces_Interface_Input_Classifers_Classifier_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Input_Classifers_Classifier_Config>
      _instance;
} _Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_default_instance_;
class Qos_Interfaces_Interface_Input_Classifers_Classifier_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Input_Classifers_Classifier_State>
      _instance;
} _Qos_Interfaces_Interface_Input_Classifers_Classifier_State_default_instance_;
class Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config>
      _instance;
} _Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config_default_instance_;
class Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State>
      _instance;
} _Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State_default_instance_;
class Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term>
      _instance;
} _Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_default_instance_;
class Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey>
      _instance;
} _Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey_default_instance_;
class Qos_Interfaces_Interface_Input_Classifers_Classifier_TermsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms>
      _instance;
} _Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_default_instance_;
class Qos_Interfaces_Interface_Input_Classifers_ClassifierDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Input_Classifers_Classifier>
      _instance;
} _Qos_Interfaces_Interface_Input_Classifers_Classifier_default_instance_;
class Qos_Interfaces_Interface_Input_Classifers_ClassifierKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Input_Classifers_ClassifierKey>
      _instance;
} _Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_default_instance_;
class Qos_Interfaces_Interface_Input_ClassifersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Input_Classifers>
      _instance;
} _Qos_Interfaces_Interface_Input_Classifers_default_instance_;
class Qos_Interfaces_Interface_Input_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Input_Config>
      _instance;
} _Qos_Interfaces_Interface_Input_Config_default_instance_;
class Qos_Interfaces_Interface_Input_Queues_Queue_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Input_Queues_Queue_Config>
      _instance;
} _Qos_Interfaces_Interface_Input_Queues_Queue_Config_default_instance_;
class Qos_Interfaces_Interface_Input_Queues_Queue_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Input_Queues_Queue_State>
      _instance;
} _Qos_Interfaces_Interface_Input_Queues_Queue_State_default_instance_;
class Qos_Interfaces_Interface_Input_Queues_QueueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Input_Queues_Queue>
      _instance;
} _Qos_Interfaces_Interface_Input_Queues_Queue_default_instance_;
class Qos_Interfaces_Interface_Input_Queues_QueueKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Input_Queues_QueueKey>
      _instance;
} _Qos_Interfaces_Interface_Input_Queues_QueueKey_default_instance_;
class Qos_Interfaces_Interface_Input_QueuesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Input_Queues>
      _instance;
} _Qos_Interfaces_Interface_Input_Queues_default_instance_;
class Qos_Interfaces_Interface_Input_SchedulerPolicy_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Input_SchedulerPolicy_Config>
      _instance;
} _Qos_Interfaces_Interface_Input_SchedulerPolicy_Config_default_instance_;
class Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State>
      _instance;
} _Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State_default_instance_;
class Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler>
      _instance;
} _Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_default_instance_;
class Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey>
      _instance;
} _Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey_default_instance_;
class Qos_Interfaces_Interface_Input_SchedulerPolicy_SchedulersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers>
      _instance;
} _Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_default_instance_;
class Qos_Interfaces_Interface_Input_SchedulerPolicy_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Input_SchedulerPolicy_State>
      _instance;
} _Qos_Interfaces_Interface_Input_SchedulerPolicy_State_default_instance_;
class Qos_Interfaces_Interface_Input_SchedulerPolicyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Input_SchedulerPolicy>
      _instance;
} _Qos_Interfaces_Interface_Input_SchedulerPolicy_default_instance_;
class Qos_Interfaces_Interface_Input_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Input_State>
      _instance;
} _Qos_Interfaces_Interface_Input_State_default_instance_;
class Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config>
      _instance;
} _Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config_default_instance_;
class Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config>
      _instance;
} _Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config_default_instance_;
class Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State>
      _instance;
} _Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State_default_instance_;
class Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue>
      _instance;
} _Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_default_instance_;
class Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey>
      _instance;
} _Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey_default_instance_;
class Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_QueuesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues>
      _instance;
} _Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_default_instance_;
class Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State>
      _instance;
} _Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State_default_instance_;
class Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface>
      _instance;
} _Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_default_instance_;
class Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey>
      _instance;
} _Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey_default_instance_;
class Qos_Interfaces_Interface_Input_VirtualOutputQueuesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Input_VirtualOutputQueues>
      _instance;
} _Qos_Interfaces_Interface_Input_VirtualOutputQueues_default_instance_;
class Qos_Interfaces_Interface_InputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Input>
      _instance;
} _Qos_Interfaces_Interface_Input_default_instance_;
class Qos_Interfaces_Interface_InterfaceRef_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_InterfaceRef_Config>
      _instance;
} _Qos_Interfaces_Interface_InterfaceRef_Config_default_instance_;
class Qos_Interfaces_Interface_InterfaceRef_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_InterfaceRef_State>
      _instance;
} _Qos_Interfaces_Interface_InterfaceRef_State_default_instance_;
class Qos_Interfaces_Interface_InterfaceRefDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_InterfaceRef>
      _instance;
} _Qos_Interfaces_Interface_InterfaceRef_default_instance_;
class Qos_Interfaces_Interface_Output_Classifers_Classifier_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Output_Classifers_Classifier_Config>
      _instance;
} _Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_default_instance_;
class Qos_Interfaces_Interface_Output_Classifers_Classifier_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Output_Classifers_Classifier_State>
      _instance;
} _Qos_Interfaces_Interface_Output_Classifers_Classifier_State_default_instance_;
class Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config>
      _instance;
} _Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config_default_instance_;
class Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State>
      _instance;
} _Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State_default_instance_;
class Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term>
      _instance;
} _Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_default_instance_;
class Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey>
      _instance;
} _Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey_default_instance_;
class Qos_Interfaces_Interface_Output_Classifers_Classifier_TermsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms>
      _instance;
} _Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_default_instance_;
class Qos_Interfaces_Interface_Output_Classifers_ClassifierDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Output_Classifers_Classifier>
      _instance;
} _Qos_Interfaces_Interface_Output_Classifers_Classifier_default_instance_;
class Qos_Interfaces_Interface_Output_Classifers_ClassifierKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Output_Classifers_ClassifierKey>
      _instance;
} _Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_default_instance_;
class Qos_Interfaces_Interface_Output_ClassifersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Output_Classifers>
      _instance;
} _Qos_Interfaces_Interface_Output_Classifers_default_instance_;
class Qos_Interfaces_Interface_Output_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Output_Config>
      _instance;
} _Qos_Interfaces_Interface_Output_Config_default_instance_;
class Qos_Interfaces_Interface_Output_InterfaceRef_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Output_InterfaceRef_Config>
      _instance;
} _Qos_Interfaces_Interface_Output_InterfaceRef_Config_default_instance_;
class Qos_Interfaces_Interface_Output_InterfaceRef_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Output_InterfaceRef_State>
      _instance;
} _Qos_Interfaces_Interface_Output_InterfaceRef_State_default_instance_;
class Qos_Interfaces_Interface_Output_InterfaceRefDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Output_InterfaceRef>
      _instance;
} _Qos_Interfaces_Interface_Output_InterfaceRef_default_instance_;
class Qos_Interfaces_Interface_Output_Queues_Queue_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Output_Queues_Queue_Config>
      _instance;
} _Qos_Interfaces_Interface_Output_Queues_Queue_Config_default_instance_;
class Qos_Interfaces_Interface_Output_Queues_Queue_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Output_Queues_Queue_State>
      _instance;
} _Qos_Interfaces_Interface_Output_Queues_Queue_State_default_instance_;
class Qos_Interfaces_Interface_Output_Queues_QueueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Output_Queues_Queue>
      _instance;
} _Qos_Interfaces_Interface_Output_Queues_Queue_default_instance_;
class Qos_Interfaces_Interface_Output_Queues_QueueKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Output_Queues_QueueKey>
      _instance;
} _Qos_Interfaces_Interface_Output_Queues_QueueKey_default_instance_;
class Qos_Interfaces_Interface_Output_QueuesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Output_Queues>
      _instance;
} _Qos_Interfaces_Interface_Output_Queues_default_instance_;
class Qos_Interfaces_Interface_Output_SchedulerPolicy_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Output_SchedulerPolicy_Config>
      _instance;
} _Qos_Interfaces_Interface_Output_SchedulerPolicy_Config_default_instance_;
class Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State>
      _instance;
} _Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State_default_instance_;
class Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler>
      _instance;
} _Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_default_instance_;
class Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey>
      _instance;
} _Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey_default_instance_;
class Qos_Interfaces_Interface_Output_SchedulerPolicy_SchedulersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers>
      _instance;
} _Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_default_instance_;
class Qos_Interfaces_Interface_Output_SchedulerPolicy_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Output_SchedulerPolicy_State>
      _instance;
} _Qos_Interfaces_Interface_Output_SchedulerPolicy_State_default_instance_;
class Qos_Interfaces_Interface_Output_SchedulerPolicyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Output_SchedulerPolicy>
      _instance;
} _Qos_Interfaces_Interface_Output_SchedulerPolicy_default_instance_;
class Qos_Interfaces_Interface_Output_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Output_State>
      _instance;
} _Qos_Interfaces_Interface_Output_State_default_instance_;
class Qos_Interfaces_Interface_OutputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_Output>
      _instance;
} _Qos_Interfaces_Interface_Output_default_instance_;
class Qos_Interfaces_Interface_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface_State>
      _instance;
} _Qos_Interfaces_Interface_State_default_instance_;
class Qos_Interfaces_InterfaceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_Interface>
      _instance;
} _Qos_Interfaces_Interface_default_instance_;
class Qos_Interfaces_InterfaceKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces_InterfaceKey>
      _instance;
} _Qos_Interfaces_InterfaceKey_default_instance_;
class Qos_InterfacesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Interfaces>
      _instance;
} _Qos_Interfaces_default_instance_;
class Qos_Queues_Queue_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Queues_Queue_Config>
      _instance;
} _Qos_Queues_Queue_Config_default_instance_;
class Qos_Queues_Queue_Red_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Queues_Queue_Red_Config>
      _instance;
} _Qos_Queues_Queue_Red_Config_default_instance_;
class Qos_Queues_Queue_Red_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Queues_Queue_Red_State>
      _instance;
} _Qos_Queues_Queue_Red_State_default_instance_;
class Qos_Queues_Queue_RedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Queues_Queue_Red>
      _instance;
} _Qos_Queues_Queue_Red_default_instance_;
class Qos_Queues_Queue_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Queues_Queue_State>
      _instance;
} _Qos_Queues_Queue_State_default_instance_;
class Qos_Queues_Queue_Wred_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Queues_Queue_Wred_Config>
      _instance;
} _Qos_Queues_Queue_Wred_Config_default_instance_;
class Qos_Queues_Queue_Wred_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Queues_Queue_Wred_State>
      _instance;
} _Qos_Queues_Queue_Wred_State_default_instance_;
class Qos_Queues_Queue_WredDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Queues_Queue_Wred>
      _instance;
} _Qos_Queues_Queue_Wred_default_instance_;
class Qos_Queues_QueueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Queues_Queue>
      _instance;
} _Qos_Queues_Queue_default_instance_;
class Qos_Queues_QueueKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Queues_QueueKey>
      _instance;
} _Qos_Queues_QueueKey_default_instance_;
class Qos_QueuesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_Queues>
      _instance;
} _Qos_Queues_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_SchedulerPolicies_SchedulerPolicy_Config>
      _instance;
} _Qos_SchedulerPolicies_SchedulerPolicy_Config_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config>
      _instance;
} _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config>
      _instance;
} _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State>
      _instance;
} _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input>
      _instance;
} _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey>
      _instance;
} _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_InputsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs>
      _instance;
} _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config>
      _instance;
} _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config>
      _instance;
} _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State>
      _instance;
} _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformActionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction>
      _instance;
} _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config>
      _instance;
} _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State>
      _instance;
} _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedActionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction>
      _instance;
} _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State>
      _instance;
} _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor>
      _instance;
} _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config>
      _instance;
} _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State>
      _instance;
} _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OutputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output>
      _instance;
} _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State>
      _instance;
} _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config>
      _instance;
} _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config>
      _instance;
} _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State>
      _instance;
} _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformActionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction>
      _instance;
} _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config>
      _instance;
} _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State>
      _instance;
} _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedActionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction>
      _instance;
} _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State>
      _instance;
} _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config>
      _instance;
} _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State>
      _instance;
} _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateActionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction>
      _instance;
} _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor>
      _instance;
} _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler>
      _instance;
} _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey>
      _instance;
} _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_SchedulersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_SchedulerPolicies_SchedulerPolicy_Schedulers>
      _instance;
} _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_SchedulerPolicies_SchedulerPolicy_State>
      _instance;
} _Qos_SchedulerPolicies_SchedulerPolicy_State_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_SchedulerPolicies_SchedulerPolicy>
      _instance;
} _Qos_SchedulerPolicies_SchedulerPolicy_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicyKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_SchedulerPolicies_SchedulerPolicyKey>
      _instance;
} _Qos_SchedulerPolicies_SchedulerPolicyKey_default_instance_;
class Qos_SchedulerPoliciesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_SchedulerPolicies>
      _instance;
} _Qos_SchedulerPolicies_default_instance_;
class Qos_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos_State>
      _instance;
} _Qos_State_default_instance_;
class QosDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Qos>
      _instance;
} _Qos_default_instance_;
}  // namespace openconfig_qos
}  // namespace openconfig
namespace protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto {
void InitDefaultsQos_Classifiers_Classifier_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Config::InitAsDefaultInstance();
}

void InitDefaultsQos_Classifiers_Classifier_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Classifiers_Classifier_ConfigImpl);
}

void InitDefaultsQos_Classifiers_Classifier_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_State::InitAsDefaultInstance();
}

void InitDefaultsQos_Classifiers_Classifier_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Classifiers_Classifier_StateImpl);
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Actions_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Config::InitAsDefaultInstance();
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_ConfigImpl);
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_Remark_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::InitAsDefaultInstance();
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_Remark_ConfigImpl);
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_Remark_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::InitAsDefaultInstance();
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_Remark_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_Remark_StateImpl);
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_RemarkImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_Remark_State();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark::InitAsDefaultInstance();
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_Remark() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_RemarkImpl);
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Actions_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_State::InitAsDefaultInstance();
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_StateImpl);
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_ActionsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_Config();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_Remark();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_State();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Actions_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions::InitAsDefaultInstance();
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Classifiers_Classifier_Terms_Term_ActionsImpl);
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::InitAsDefaultInstance();
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_ConfigImpl);
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::InitAsDefaultInstance();
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_StateImpl);
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4Impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4::InitAsDefaultInstance();
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4Impl);
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::InitAsDefaultInstance();
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_ConfigImpl);
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::InitAsDefaultInstance();
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_StateImpl);
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6Impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6::InitAsDefaultInstance();
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6Impl);
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_L2_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::InitAsDefaultInstance();
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_L2_ConfigImpl);
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_L2_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::InitAsDefaultInstance();
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_L2_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_L2_StateImpl);
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_L2Impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_L2_State();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2::InitAsDefaultInstance();
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_L2() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_L2Impl);
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config::InitAsDefaultInstance();
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_ConfigImpl);
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State::InitAsDefaultInstance();
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_StateImpl);
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_MplsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls::InitAsDefaultInstance();
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Mpls() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_MplsImpl);
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::InitAsDefaultInstance();
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_ConfigImpl);
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::InitAsDefaultInstance();
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_StateImpl);
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_TransportImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport::InitAsDefaultInstance();
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Transport() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_TransportImpl);
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_ConditionsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_L2();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Mpls();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Transport();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions::InitAsDefaultInstance();
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Classifiers_Classifier_Terms_Term_ConditionsImpl);
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Config::InitAsDefaultInstance();
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Classifiers_Classifier_Terms_Term_ConfigImpl);
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_State::InitAsDefaultInstance();
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Classifiers_Classifier_Terms_Term_StateImpl);
}

void InitDefaultsQos_Classifiers_Classifier_Terms_TermImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Config();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_State();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term::InitAsDefaultInstance();
}

void InitDefaultsQos_Classifiers_Classifier_Terms_Term() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Classifiers_Classifier_Terms_TermImpl);
}

void InitDefaultsQos_Classifiers_Classifier_Terms_TermKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_TermKey_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_TermKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_TermKey::InitAsDefaultInstance();
}

void InitDefaultsQos_Classifiers_Classifier_Terms_TermKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Classifiers_Classifier_Terms_TermKeyImpl);
}

void InitDefaultsQos_Classifiers_Classifier_TermsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_TermKey();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms::InitAsDefaultInstance();
}

void InitDefaultsQos_Classifiers_Classifier_Terms() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Classifiers_Classifier_TermsImpl);
}

void InitDefaultsQos_Classifiers_ClassifierImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Config();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_State();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Classifiers_Classifier();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier::InitAsDefaultInstance();
}

void InitDefaultsQos_Classifiers_Classifier() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Classifiers_ClassifierImpl);
}

void InitDefaultsQos_Classifiers_ClassifierKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Classifiers_ClassifierKey_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Classifiers_ClassifierKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Classifiers_ClassifierKey::InitAsDefaultInstance();
}

void InitDefaultsQos_Classifiers_ClassifierKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Classifiers_ClassifierKeyImpl);
}

void InitDefaultsQos_ClassifiersImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_ClassifierKey();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Classifiers_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Classifiers();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Classifiers::InitAsDefaultInstance();
}

void InitDefaultsQos_Classifiers() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_ClassifiersImpl);
}

void InitDefaultsQos_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Config::InitAsDefaultInstance();
}

void InitDefaultsQos_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_ConfigImpl);
}

void InitDefaultsQos_ForwardingGroups_ForwardingGroup_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_ForwardingGroups_ForwardingGroup_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_Config::InitAsDefaultInstance();
}

void InitDefaultsQos_ForwardingGroups_ForwardingGroup_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_ForwardingGroups_ForwardingGroup_ConfigImpl);
}

void InitDefaultsQos_ForwardingGroups_ForwardingGroup_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_ForwardingGroups_ForwardingGroup_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_State::InitAsDefaultInstance();
}

void InitDefaultsQos_ForwardingGroups_ForwardingGroup_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_ForwardingGroups_ForwardingGroup_StateImpl);
}

void InitDefaultsQos_ForwardingGroups_ForwardingGroupImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_ForwardingGroups_ForwardingGroup_Config();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_ForwardingGroups_ForwardingGroup_State();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_ForwardingGroups_ForwardingGroup_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup::InitAsDefaultInstance();
}

void InitDefaultsQos_ForwardingGroups_ForwardingGroup() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_ForwardingGroups_ForwardingGroupImpl);
}

void InitDefaultsQos_ForwardingGroups_ForwardingGroupKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_ForwardingGroups_ForwardingGroup();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_ForwardingGroups_ForwardingGroupKey_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroupKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroupKey::InitAsDefaultInstance();
}

void InitDefaultsQos_ForwardingGroups_ForwardingGroupKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_ForwardingGroups_ForwardingGroupKeyImpl);
}

void InitDefaultsQos_ForwardingGroupsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_ForwardingGroups_ForwardingGroupKey();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_ForwardingGroups_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_ForwardingGroups();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_ForwardingGroups::InitAsDefaultInstance();
}

void InitDefaultsQos_ForwardingGroups() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_ForwardingGroupsImpl);
}

void InitDefaultsQos_Interfaces_Interface_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Config::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_ConfigImpl);
}

void InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_ConfigImpl);
}

void InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_Classifier_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_State::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_StateImpl);
}

void InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_ConfigImpl);
}

void InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_StateImpl);
}

void InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermImpl);
}

void InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKeyImpl);
}

void InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_TermsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_TermsImpl);
}

void InitDefaultsQos_Interfaces_Interface_Input_Classifers_ClassifierImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Config();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_State();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_Classifier_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Input_Classifers_ClassifierImpl);
}

void InitDefaultsQos_Interfaces_Interface_Input_Classifers_ClassifierKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_ClassifierKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Input_Classifers_ClassifierKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Input_Classifers_ClassifierKeyImpl);
}

void InitDefaultsQos_Interfaces_Interface_Input_ClassifersImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Classifers_ClassifierKey();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Input_Classifers() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Input_ClassifersImpl);
}

void InitDefaultsQos_Interfaces_Interface_Input_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Config::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Input_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Input_ConfigImpl);
}

void InitDefaultsQos_Interfaces_Interface_Input_Queues_Queue_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Queues_Queue_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_Config::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Input_Queues_Queue_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Input_Queues_Queue_ConfigImpl);
}

void InitDefaultsQos_Interfaces_Interface_Input_Queues_Queue_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Queues_Queue_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_State::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Input_Queues_Queue_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Input_Queues_Queue_StateImpl);
}

void InitDefaultsQos_Interfaces_Interface_Input_Queues_QueueImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Queues_Queue_Config();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Queues_Queue_State();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Queues_Queue_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Input_Queues_Queue() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Input_Queues_QueueImpl);
}

void InitDefaultsQos_Interfaces_Interface_Input_Queues_QueueKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Queues_Queue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Queues_QueueKey_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_QueueKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_QueueKey::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Input_Queues_QueueKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Input_Queues_QueueKeyImpl);
}

void InitDefaultsQos_Interfaces_Interface_Input_QueuesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Queues_QueueKey();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Queues_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Input_Queues() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Input_QueuesImpl);
}

void InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_SchedulerPolicy_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Config::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_ConfigImpl);
}

void InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_StateImpl);
}

void InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerImpl);
}

void InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKeyImpl);
}

void InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_SchedulersImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_SchedulersImpl);
}

void InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_SchedulerPolicy_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_State::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_StateImpl);
}

void InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Config();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_State();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_SchedulerPolicy_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicyImpl);
}

void InitDefaultsQos_Interfaces_Interface_Input_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_State::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Input_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Input_StateImpl);
}

void InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_ConfigImpl);
}

void InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_ConfigImpl);
}

void InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_StateImpl);
}

void InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueImpl);
}

void InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKeyImpl);
}

void InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_QueuesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_QueuesImpl);
}

void InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_StateImpl);
}

void InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceImpl);
}

void InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKeyImpl);
}

void InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueuesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueuesImpl);
}

void InitDefaultsQos_Interfaces_Interface_InputImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Classifers();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Config();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Queues();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_State();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Input() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_InputImpl);
}

void InitDefaultsQos_Interfaces_Interface_InterfaceRef_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_InterfaceRef_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_Config::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_InterfaceRef_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_InterfaceRef_ConfigImpl);
}

void InitDefaultsQos_Interfaces_Interface_InterfaceRef_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_InterfaceRef_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_State::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_InterfaceRef_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_InterfaceRef_StateImpl);
}

void InitDefaultsQos_Interfaces_Interface_InterfaceRefImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_InterfaceRef_Config();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_InterfaceRef_State();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_InterfaceRef_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_InterfaceRef() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_InterfaceRefImpl);
}

void InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_ConfigImpl);
}

void InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_Classifier_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_State::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_StateImpl);
}

void InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_ConfigImpl);
}

void InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_StateImpl);
}

void InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermImpl);
}

void InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKeyImpl);
}

void InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_TermsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_TermsImpl);
}

void InitDefaultsQos_Interfaces_Interface_Output_Classifers_ClassifierImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Config();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_State();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_Classifier_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Output_Classifers_ClassifierImpl);
}

void InitDefaultsQos_Interfaces_Interface_Output_Classifers_ClassifierKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_ClassifierKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Output_Classifers_ClassifierKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Output_Classifers_ClassifierKeyImpl);
}

void InitDefaultsQos_Interfaces_Interface_Output_ClassifersImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Classifers_ClassifierKey();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Output_Classifers() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Output_ClassifersImpl);
}

void InitDefaultsQos_Interfaces_Interface_Output_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Config::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Output_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Output_ConfigImpl);
}

void InitDefaultsQos_Interfaces_Interface_Output_InterfaceRef_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_InterfaceRef_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_Config::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Output_InterfaceRef_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Output_InterfaceRef_ConfigImpl);
}

void InitDefaultsQos_Interfaces_Interface_Output_InterfaceRef_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_InterfaceRef_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_State::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Output_InterfaceRef_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Output_InterfaceRef_StateImpl);
}

void InitDefaultsQos_Interfaces_Interface_Output_InterfaceRefImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_InterfaceRef_Config();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_InterfaceRef_State();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_InterfaceRef_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Output_InterfaceRef() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Output_InterfaceRefImpl);
}

void InitDefaultsQos_Interfaces_Interface_Output_Queues_Queue_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Queues_Queue_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_Config::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Output_Queues_Queue_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Output_Queues_Queue_ConfigImpl);
}

void InitDefaultsQos_Interfaces_Interface_Output_Queues_Queue_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Queues_Queue_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_State::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Output_Queues_Queue_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Output_Queues_Queue_StateImpl);
}

void InitDefaultsQos_Interfaces_Interface_Output_Queues_QueueImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Queues_Queue_Config();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Queues_Queue_State();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Queues_Queue_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Output_Queues_Queue() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Output_Queues_QueueImpl);
}

void InitDefaultsQos_Interfaces_Interface_Output_Queues_QueueKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Queues_Queue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Queues_QueueKey_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_QueueKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_QueueKey::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Output_Queues_QueueKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Output_Queues_QueueKeyImpl);
}

void InitDefaultsQos_Interfaces_Interface_Output_QueuesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Queues_QueueKey();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Queues_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Output_Queues() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Output_QueuesImpl);
}

void InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_SchedulerPolicy_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Config::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_ConfigImpl);
}

void InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_StateImpl);
}

void InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerImpl);
}

void InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKeyImpl);
}

void InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_SchedulersImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_SchedulersImpl);
}

void InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_SchedulerPolicy_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_State::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_StateImpl);
}

void InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Config();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_State();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_SchedulerPolicy_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicyImpl);
}

void InitDefaultsQos_Interfaces_Interface_Output_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_State::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Output_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_Output_StateImpl);
}

void InitDefaultsQos_Interfaces_Interface_OutputImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Classifers();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Config();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_InterfaceRef();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Queues();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_State();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_Output() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_OutputImpl);
}

void InitDefaultsQos_Interfaces_Interface_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_State::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_Interface_StateImpl);
}

void InitDefaultsQos_Interfaces_InterfaceImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Config();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_InterfaceRef();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_State();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_Interface();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_Interface() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_InterfaceImpl);
}

void InitDefaultsQos_Interfaces_InterfaceKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_InterfaceKey_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces_InterfaceKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces_InterfaceKey::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces_InterfaceKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Interfaces_InterfaceKeyImpl);
}

void InitDefaultsQos_InterfacesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_InterfaceKey();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Interfaces_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Interfaces();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Interfaces::InitAsDefaultInstance();
}

void InitDefaultsQos_Interfaces() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_InterfacesImpl);
}

void InitDefaultsQos_Queues_Queue_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Queues_Queue_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Queues_Queue_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Queues_Queue_Config::InitAsDefaultInstance();
}

void InitDefaultsQos_Queues_Queue_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Queues_Queue_ConfigImpl);
}

void InitDefaultsQos_Queues_Queue_Red_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Queues_Queue_Red_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Queues_Queue_Red_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Queues_Queue_Red_Config::InitAsDefaultInstance();
}

void InitDefaultsQos_Queues_Queue_Red_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Queues_Queue_Red_ConfigImpl);
}

void InitDefaultsQos_Queues_Queue_Red_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Queues_Queue_Red_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Queues_Queue_Red_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Queues_Queue_Red_State::InitAsDefaultInstance();
}

void InitDefaultsQos_Queues_Queue_Red_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Queues_Queue_Red_StateImpl);
}

void InitDefaultsQos_Queues_Queue_RedImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues_Queue_Red_Config();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues_Queue_Red_State();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Queues_Queue_Red_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Queues_Queue_Red();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Queues_Queue_Red::InitAsDefaultInstance();
}

void InitDefaultsQos_Queues_Queue_Red() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Queues_Queue_RedImpl);
}

void InitDefaultsQos_Queues_Queue_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Queues_Queue_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Queues_Queue_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Queues_Queue_State::InitAsDefaultInstance();
}

void InitDefaultsQos_Queues_Queue_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Queues_Queue_StateImpl);
}

void InitDefaultsQos_Queues_Queue_Wred_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Queues_Queue_Wred_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_Config::InitAsDefaultInstance();
}

void InitDefaultsQos_Queues_Queue_Wred_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Queues_Queue_Wred_ConfigImpl);
}

void InitDefaultsQos_Queues_Queue_Wred_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Queues_Queue_Wred_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_State::InitAsDefaultInstance();
}

void InitDefaultsQos_Queues_Queue_Wred_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Queues_Queue_Wred_StateImpl);
}

void InitDefaultsQos_Queues_Queue_WredImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues_Queue_Wred_Config();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues_Queue_Wred_State();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Queues_Queue_Wred_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred::InitAsDefaultInstance();
}

void InitDefaultsQos_Queues_Queue_Wred() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Queues_Queue_WredImpl);
}

void InitDefaultsQos_Queues_QueueImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues_Queue_Config();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues_Queue_Red();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues_Queue_State();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues_Queue_Wred();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Queues_Queue_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Queues_Queue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Queues_Queue::InitAsDefaultInstance();
}

void InitDefaultsQos_Queues_Queue() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Queues_QueueImpl);
}

void InitDefaultsQos_Queues_QueueKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues_Queue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Queues_QueueKey_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Queues_QueueKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Queues_QueueKey::InitAsDefaultInstance();
}

void InitDefaultsQos_Queues_QueueKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_Queues_QueueKeyImpl);
}

void InitDefaultsQos_QueuesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues_QueueKey();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_Queues_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_Queues();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_Queues::InitAsDefaultInstance();
}

void InitDefaultsQos_Queues() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_QueuesImpl);
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Config::InitAsDefaultInstance();
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_ConfigImpl);
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::InitAsDefaultInstance();
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_ConfigImpl);
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::InitAsDefaultInstance();
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_ConfigImpl);
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::InitAsDefaultInstance();
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_StateImpl);
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input::InitAsDefaultInstance();
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputImpl);
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::InitAsDefaultInstance();
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKeyImpl);
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_InputsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs::InitAsDefaultInstance();
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_InputsImpl);
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::InitAsDefaultInstance();
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConfigImpl);
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::InitAsDefaultInstance();
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_ConfigImpl);
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::InitAsDefaultInstance();
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_StateImpl);
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformActionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction::InitAsDefaultInstance();
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformActionImpl);
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsBoolValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::InitAsDefaultInstance();
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_ConfigImpl);
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsBoolValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::InitAsDefaultInstance();
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_StateImpl);
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedActionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction::InitAsDefaultInstance();
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedActionImpl);
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::InitAsDefaultInstance();
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_StateImpl);
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColorImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::InitAsDefaultInstance();
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColorImpl);
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::InitAsDefaultInstance();
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_ConfigImpl);
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::InitAsDefaultInstance();
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_StateImpl);
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OutputImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output::InitAsDefaultInstance();
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OutputImpl);
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::InitAsDefaultInstance();
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_StateImpl);
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::InitAsDefaultInstance();
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConfigImpl);
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::InitAsDefaultInstance();
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_ConfigImpl);
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::InitAsDefaultInstance();
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_StateImpl);
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformActionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction::InitAsDefaultInstance();
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformActionImpl);
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsBoolValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::InitAsDefaultInstance();
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_ConfigImpl);
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsBoolValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::InitAsDefaultInstance();
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_StateImpl);
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedActionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction::InitAsDefaultInstance();
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedActionImpl);
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::InitAsDefaultInstance();
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_StateImpl);
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsBoolValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::InitAsDefaultInstance();
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_ConfigImpl);
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsBoolValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::InitAsDefaultInstance();
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_StateImpl);
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateActionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction::InitAsDefaultInstance();
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateActionImpl);
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColorImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::InitAsDefaultInstance();
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColorImpl);
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::InitAsDefaultInstance();
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerImpl);
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey::InitAsDefaultInstance();
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKeyImpl);
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_SchedulersImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers::InitAsDefaultInstance();
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_SchedulersImpl);
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_State::InitAsDefaultInstance();
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_StateImpl);
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Config();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_State();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy::InitAsDefaultInstance();
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_SchedulerPolicies_SchedulerPolicyImpl);
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicyKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicyKey_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicyKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicyKey::InitAsDefaultInstance();
}

void InitDefaultsQos_SchedulerPolicies_SchedulerPolicyKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_SchedulerPolicies_SchedulerPolicyKeyImpl);
}

void InitDefaultsQos_SchedulerPoliciesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicyKey();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_SchedulerPolicies();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies::InitAsDefaultInstance();
}

void InitDefaultsQos_SchedulerPolicies() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_SchedulerPoliciesImpl);
}

void InitDefaultsQos_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_State_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos_State::InitAsDefaultInstance();
}

void InitDefaultsQos_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQos_StateImpl);
}

void InitDefaultsQosImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Config();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_ForwardingGroups();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies();
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_State();
  {
    void* ptr = &::openconfig::openconfig_qos::_Qos_default_instance_;
    new (ptr) ::openconfig::openconfig_qos::Qos();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_qos::Qos::InitAsDefaultInstance();
}

void InitDefaultsQos() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQosImpl);
}

::google::protobuf::Metadata file_level_metadata[161];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[18];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Config, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Config, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_State, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_State, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Config, target_group_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config, set_dot1p_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config, set_dscp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config, set_mpls_tc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State, set_dot1p_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State, set_dscp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State, set_mpls_tc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_State, target_group_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions, remark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config, destination_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config, dscp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config, hop_limit_),
  offsetof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_ConfigDefaultTypeInternal, protocol_openconfigpacketmatchtypesipprotocol_),
  offsetof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_ConfigDefaultTypeInternal, protocol_uint64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config, source_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config, protocol_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State, destination_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State, dscp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State, hop_limit_),
  offsetof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_StateDefaultTypeInternal, protocol_openconfigpacketmatchtypesipprotocol_),
  offsetof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_StateDefaultTypeInternal, protocol_uint64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State, source_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State, protocol_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config, destination_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config, destination_flow_label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config, dscp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config, hop_limit_),
  offsetof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_ConfigDefaultTypeInternal, protocol_openconfigpacketmatchtypesipprotocol_),
  offsetof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_ConfigDefaultTypeInternal, protocol_uint64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config, source_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config, source_flow_label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config, protocol_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State, destination_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State, destination_flow_label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State, dscp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State, hop_limit_),
  offsetof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_StateDefaultTypeInternal, protocol_openconfigpacketmatchtypesipprotocol_),
  offsetof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_StateDefaultTypeInternal, protocol_uint64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State, source_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State, source_flow_label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State, protocol_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config, destination_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config, destination_mac_mask_),
  offsetof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_ConfigDefaultTypeInternal, ethertype_openconfigpacketmatchtypesethertype_),
  offsetof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_ConfigDefaultTypeInternal, ethertype_uint64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config, source_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config, source_mac_mask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config, ethertype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State, destination_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State, destination_mac_mask_),
  offsetof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_StateDefaultTypeInternal, ethertype_openconfigpacketmatchtypesethertype_),
  offsetof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_StateDefaultTypeInternal, ethertype_uint64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State, source_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State, source_mac_mask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State, ethertype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config, traffic_class_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State, traffic_class_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_ConfigDefaultTypeInternal, destination_port_destinationport_),
  offsetof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_ConfigDefaultTypeInternal, destination_port_string_),
  offsetof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_ConfigDefaultTypeInternal, destination_port_uint64_),
  offsetof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_ConfigDefaultTypeInternal, source_port_sourceport_),
  offsetof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_ConfigDefaultTypeInternal, source_port_string_),
  offsetof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_ConfigDefaultTypeInternal, source_port_uint64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config, tcp_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config, destination_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config, source_port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_StateDefaultTypeInternal, destination_port_destinationport_),
  offsetof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_StateDefaultTypeInternal, destination_port_string_),
  offsetof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_StateDefaultTypeInternal, destination_port_uint64_),
  offsetof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_StateDefaultTypeInternal, source_port_sourceport_),
  offsetof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_StateDefaultTypeInternal, source_port_string_),
  offsetof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_StateDefaultTypeInternal, source_port_uint64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State, tcp_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State, destination_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State, source_port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions, ipv4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions, ipv6_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions, l2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions, mpls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions, transport_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Config, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_State, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term, actions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term, conditions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_TermKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_TermKey, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_TermKey, term_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms, term_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_Classifier, terms_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_ClassifierKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_ClassifierKey, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers_ClassifierKey, classifier_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Classifiers, classifier_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_Config, fabric_priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_Config, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_Config, output_queue_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_State, fabric_priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_State, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_State, output_queue_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroupKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroupKey, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroupKey, forwarding_group_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_ForwardingGroups, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_ForwardingGroups, forwarding_group_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Config, interface_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Config, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Config, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_State, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_State, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State, matched_octets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State, matched_packets_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey, term_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms, term_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier, terms_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_ClassifierKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_ClassifierKey, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_ClassifierKey, classifier_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers, classifier_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_Config, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_State, avg_queue_len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_State, dropped_pkts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_State, max_queue_len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_State, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_State, transmit_octets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_State, transmit_pkts_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_QueueKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_QueueKey, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_QueueKey, queue_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues, queue_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Config, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State, conforming_octets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State, conforming_pkts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State, exceeding_octets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State, exceeding_pkts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State, sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State, violating_octets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State, violating_pkts_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey, sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey, scheduler_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers, scheduler_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_State, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy, schedulers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State, avg_queue_len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State, dropped_pkts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State, max_queue_len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State, transmit_octets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State, transmit_pkts_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey, queue_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues, queue_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface, queues_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey, voq_interface_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues, voq_interface_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input, classifers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input, queues_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input, scheduler_policy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input, virtual_output_queues_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_Config, interface_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_Config, subinterface_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_State, interface_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_State, subinterface_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Config, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Config, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_State, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_State, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State, matched_octets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State, matched_packets_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey, term_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms, term_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier, terms_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_ClassifierKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_ClassifierKey, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_ClassifierKey, classifier_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers, classifier_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_Config, interface_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_Config, subinterface_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_State, interface_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_State, subinterface_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_Config, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_State, avg_queue_len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_State, dropped_pkts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_State, max_queue_len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_State, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_State, transmit_octets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_State, transmit_pkts_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_QueueKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_QueueKey, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_QueueKey, queue_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues, queue_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Config, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State, conforming_octets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State, conforming_pkts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State, exceeding_octets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State, exceeding_pkts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State, sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State, violating_octets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State, violating_pkts_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey, sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey, scheduler_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers, scheduler_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_State, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy, schedulers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output, classifers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output, interface_ref_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output, queues_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output, scheduler_policy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface_State, interface_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface, input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface, interface_ref_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface, output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_Interface, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_InterfaceKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_InterfaceKey, interface_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces_InterfaceKey, interface_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Interfaces, interface_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Queues_Queue_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Queues_Queue_Config, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Queues_Queue_Config, queue_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Queues_Queue_Red_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Queues_Queue_Red_Config, maxth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Queues_Queue_Red_Config, minth_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Queues_Queue_Red_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Queues_Queue_Red_State, maxth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Queues_Queue_Red_State, minth_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Queues_Queue_Red, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Queues_Queue_Red, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Queues_Queue_Red, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Queues_Queue_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Queues_Queue_State, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Queues_Queue_State, queue_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Queues_Queue_Wred, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Queues_Queue_Wred, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Queues_Queue_Wred, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Queues_Queue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Queues_Queue, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Queues_Queue, red_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Queues_Queue, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Queues_Queue, wred_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Queues_QueueKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Queues_QueueKey, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Queues_QueueKey, queue_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Queues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_Queues, queue_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Config, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config, priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config, sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config, input_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config, queue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config, weight_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State, input_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State, queue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State, weight_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey, input_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs, input_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config, bc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config, cir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config, cir_pct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config, cir_pct_remaining_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config, max_queue_depth_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config, max_queue_depth_packets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config, max_queue_depth_percent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config, queuing_behavior_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config, set_dot1p_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config, set_dscp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config, set_mpls_tc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State, set_dot1p_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State, set_dscp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State, set_mpls_tc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config, drop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config, set_dot1p_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config, set_dscp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config, set_mpls_tc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State, drop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State, set_dot1p_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State, set_dscp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State, set_mpls_tc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State, bc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State, cir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State, cir_pct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State, cir_pct_remaining_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State, max_queue_depth_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State, max_queue_depth_packets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State, max_queue_depth_percent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State, queuing_behavior_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor, conform_action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor, exceed_action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config, child_scheduler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config, output_fwd_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config, output_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State, child_scheduler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State, output_fwd_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State, output_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State, priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State, sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config, bc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config, be_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config, cir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config, cir_pct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config, cir_pct_remaining_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config, pir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config, pir_pct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config, pir_pct_remaining_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config, set_dot1p_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config, set_dscp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config, set_mpls_tc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State, set_dot1p_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State, set_dscp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State, set_mpls_tc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config, drop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config, set_dot1p_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config, set_dscp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config, set_mpls_tc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State, drop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State, set_dot1p_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State, set_dscp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State, set_mpls_tc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State, bc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State, be_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State, cir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State, cir_pct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State, cir_pct_remaining_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State, pir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State, pir_pct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State, pir_pct_remaining_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config, drop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config, set_dot1p_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config, set_dscp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config, set_mpls_tc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State, drop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State, set_dot1p_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State, set_dscp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State, set_mpls_tc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor, conform_action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor, exceed_action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor, violate_action_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler, inputs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler, one_rate_two_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler, output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler, two_rate_three_color_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey, sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey, scheduler_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers, scheduler_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_State, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy, schedulers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicyKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicyKey, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicyKey, scheduler_policy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_SchedulerPolicies, scheduler_policy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos, classifiers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos, forwarding_groups_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos, interfaces_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos, queues_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos, scheduler_policies_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_qos::Qos, state_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Config)},
  { 7, -1, sizeof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_State)},
  { 14, -1, sizeof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Config)},
  { 20, -1, sizeof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config)},
  { 28, -1, sizeof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State)},
  { 36, -1, sizeof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark)},
  { 43, -1, sizeof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_State)},
  { 49, -1, sizeof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions)},
  { 57, -1, sizeof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config)},
  { 69, -1, sizeof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State)},
  { 81, -1, sizeof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4)},
  { 88, -1, sizeof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config)},
  { 102, -1, sizeof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State)},
  { 116, -1, sizeof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6)},
  { 123, -1, sizeof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config)},
  { 135, -1, sizeof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State)},
  { 147, -1, sizeof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2)},
  { 154, -1, sizeof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config)},
  { 160, -1, sizeof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State)},
  { 166, -1, sizeof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls)},
  { 173, -1, sizeof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config)},
  { 187, -1, sizeof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State)},
  { 201, -1, sizeof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport)},
  { 208, -1, sizeof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions)},
  { 218, -1, sizeof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Config)},
  { 224, -1, sizeof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_State)},
  { 230, -1, sizeof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term)},
  { 239, -1, sizeof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_TermKey)},
  { 246, -1, sizeof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms)},
  { 252, -1, sizeof(::openconfig::openconfig_qos::Qos_Classifiers_Classifier)},
  { 260, -1, sizeof(::openconfig::openconfig_qos::Qos_Classifiers_ClassifierKey)},
  { 267, -1, sizeof(::openconfig::openconfig_qos::Qos_Classifiers)},
  { 273, -1, sizeof(::openconfig::openconfig_qos::Qos_Config)},
  { 278, -1, sizeof(::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_Config)},
  { 286, -1, sizeof(::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_State)},
  { 294, -1, sizeof(::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup)},
  { 301, -1, sizeof(::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroupKey)},
  { 308, -1, sizeof(::openconfig::openconfig_qos::Qos_ForwardingGroups)},
  { 314, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Config)},
  { 320, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Config)},
  { 327, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_State)},
  { 334, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config)},
  { 340, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State)},
  { 348, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term)},
  { 355, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey)},
  { 362, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms)},
  { 368, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier)},
  { 376, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_ClassifierKey)},
  { 383, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers)},
  { 389, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Config)},
  { 394, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_Config)},
  { 400, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_State)},
  { 411, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue)},
  { 418, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_QueueKey)},
  { 425, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues)},
  { 431, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Config)},
  { 437, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State)},
  { 449, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler)},
  { 455, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey)},
  { 462, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers)},
  { 468, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_State)},
  { 474, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy)},
  { 482, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_State)},
  { 487, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config)},
  { 493, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config)},
  { 499, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State)},
  { 510, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue)},
  { 517, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey)},
  { 524, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues)},
  { 530, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State)},
  { 536, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface)},
  { 544, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey)},
  { 551, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues)},
  { 557, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input)},
  { 568, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_Config)},
  { 575, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_State)},
  { 582, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef)},
  { 589, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Config)},
  { 596, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_State)},
  { 603, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config)},
  { 609, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State)},
  { 617, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term)},
  { 624, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey)},
  { 631, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms)},
  { 637, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier)},
  { 645, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_ClassifierKey)},
  { 652, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers)},
  { 658, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Config)},
  { 663, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_Config)},
  { 670, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_State)},
  { 677, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef)},
  { 684, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_Config)},
  { 690, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_State)},
  { 701, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue)},
  { 708, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_QueueKey)},
  { 715, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues)},
  { 721, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Config)},
  { 727, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State)},
  { 739, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler)},
  { 745, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey)},
  { 752, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers)},
  { 758, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_State)},
  { 764, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy)},
  { 772, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_State)},
  { 777, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output)},
  { 788, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface_State)},
  { 794, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_Interface)},
  { 804, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces_InterfaceKey)},
  { 811, -1, sizeof(::openconfig::openconfig_qos::Qos_Interfaces)},
  { 817, -1, sizeof(::openconfig::openconfig_qos::Qos_Queues_Queue_Config)},
  { 824, -1, sizeof(::openconfig::openconfig_qos::Qos_Queues_Queue_Red_Config)},
  { 831, -1, sizeof(::openconfig::openconfig_qos::Qos_Queues_Queue_Red_State)},
  { 838, -1, sizeof(::openconfig::openconfig_qos::Qos_Queues_Queue_Red)},
  { 845, -1, sizeof(::openconfig::openconfig_qos::Qos_Queues_Queue_State)},
  { 852, -1, sizeof(::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_Config)},
  { 857, -1, sizeof(::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_State)},
  { 862, -1, sizeof(::openconfig::openconfig_qos::Qos_Queues_Queue_Wred)},
  { 869, -1, sizeof(::openconfig::openconfig_qos::Qos_Queues_Queue)},
  { 878, -1, sizeof(::openconfig::openconfig_qos::Qos_Queues_QueueKey)},
  { 885, -1, sizeof(::openconfig::openconfig_qos::Qos_Queues)},
  { 891, -1, sizeof(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Config)},
  { 897, -1, sizeof(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config)},
  { 905, -1, sizeof(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config)},
  { 914, -1, sizeof(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State)},
  { 923, -1, sizeof(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input)},
  { 930, -1, sizeof(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey)},
  { 937, -1, sizeof(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs)},
  { 943, -1, sizeof(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config)},
  { 956, -1, sizeof(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config)},
  { 964, -1, sizeof(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State)},
  { 972, -1, sizeof(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction)},
  { 979, -1, sizeof(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config)},
  { 988, -1, sizeof(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State)},
  { 997, -1, sizeof(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction)},
  { 1004, -1, sizeof(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State)},
  { 1017, -1, sizeof(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor)},
  { 1026, -1, sizeof(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config)},
  { 1034, -1, sizeof(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State)},
  { 1042, -1, sizeof(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output)},
  { 1049, -1, sizeof(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State)},
  { 1057, -1, sizeof(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config)},
  { 1070, -1, sizeof(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config)},
  { 1078, -1, sizeof(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State)},
  { 1086, -1, sizeof(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction)},
  { 1093, -1, sizeof(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config)},
  { 1102, -1, sizeof(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State)},
  { 1111, -1, sizeof(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction)},
  { 1118, -1, sizeof(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State)},
  { 1131, -1, sizeof(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config)},
  { 1140, -1, sizeof(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State)},
  { 1149, -1, sizeof(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction)},
  { 1156, -1, sizeof(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor)},
  { 1166, -1, sizeof(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler)},
  { 1177, -1, sizeof(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey)},
  { 1184, -1, sizeof(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers)},
  { 1190, -1, sizeof(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_State)},
  { 1196, -1, sizeof(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy)},
  { 1204, -1, sizeof(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicyKey)},
  { 1211, -1, sizeof(::openconfig::openconfig_qos::Qos_SchedulerPolicies)},
  { 1217, -1, sizeof(::openconfig::openconfig_qos::Qos_State)},
  { 1222, -1, sizeof(::openconfig::openconfig_qos::Qos)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Actions_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Actions_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Actions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_TermKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Classifiers_ClassifierKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Classifiers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_ForwardingGroups_ForwardingGroup_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_ForwardingGroups_ForwardingGroup_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_ForwardingGroups_ForwardingGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_ForwardingGroups_ForwardingGroupKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_ForwardingGroups_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_Classifier_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_Classifier_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Queues_Queue_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Queues_Queue_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Queues_Queue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Queues_QueueKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Queues_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_SchedulerPolicy_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_SchedulerPolicy_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_SchedulerPolicy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_InterfaceRef_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_InterfaceRef_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_InterfaceRef_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_Classifier_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_Classifier_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_InterfaceRef_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_InterfaceRef_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_InterfaceRef_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Queues_Queue_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Queues_Queue_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Queues_Queue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Queues_QueueKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Queues_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_SchedulerPolicy_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_SchedulerPolicy_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_SchedulerPolicy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_Interface_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_InterfaceKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Interfaces_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Queues_Queue_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Queues_Queue_Red_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Queues_Queue_Red_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Queues_Queue_Red_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Queues_Queue_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Queues_Queue_Wred_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Queues_Queue_Wred_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Queues_Queue_Wred_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Queues_Queue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Queues_QueueKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_Queues_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicyKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_SchedulerPolicies_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_qos::_Qos_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "openconfig/openconfig_qos/openconfig_qos.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 161);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n.openconfig/openconfig_qos/openconfig_q"
      "os.proto\022\031openconfig.openconfig_qos\0328git"
      "hub.com/openconfig/ygot/proto/ywrapper/y"
      "wrapper.proto\0320github.com/openconfig/ygo"
      "t/proto/yext/yext.proto\032\034openconfig/enum"
      "s/enums.proto\"\355\351\003\n\003Qos\022W\n\013classifiers\030\373\345"
      "\206+ \001(\0132*.openconfig.openconfig_qos.Qos.C"
      "lassifiersB\023\202A\020/qos/classifiers\022H\n\006confi"
      "g\030\321\325\307y \001(\0132%.openconfig.openconfig_qos.Q"
      "os.ConfigB\016\202A\013/qos/config\022i\n\021forwarding_"
      "groups\030\327\264\337\234\001 \001(\0132/.openconfig.openconfig"
      "_qos.Qos.ForwardingGroupsB\031\202A\026/qos/forwa"
      "rding-groups\022U\n\ninterfaces\030\337\372\253\235\001 \001(\0132).o"
      "penconfig.openconfig_qos.Qos.InterfacesB"
      "\022\202A\017/qos/interfaces\022H\n\006queues\030\337\304\312t \001(\0132%"
      ".openconfig.openconfig_qos.Qos.QueuesB\016\202"
      "A\013/qos/queues\022k\n\022scheduler_policies\030\351\212\304["
      " \001(\01320.openconfig.openconfig_qos.Qos.Sch"
      "edulerPoliciesB\032\202A\027/qos/scheduler-polici"
      "es\022E\n\005state\030\306\355\246B \001(\0132$.openconfig.openco"
      "nfig_qos.Qos.StateB\r\202A\n/qos/state\032\305h\n\013Cl"
      "assifiers\022p\n\nclassifier\030\211\266\252\206\001 \003(\01328.open"
      "config.openconfig_qos.Qos.Classifiers.Cl"
      "assifierKeyB\036\202A\033/qos/classifiers/classif"
      "ier\032\263f\n\nClassifier\022w\n\006config\030\376\312\223\361\001 \001(\0132<"
      ".openconfig.openconfig_qos.Qos.Classifie"
      "rs.Classifier.ConfigB%\202A\"/qos/classifier"
      "s/classifier/config\022s\n\005state\030\353\200\355; \001(\0132;."
      "openconfig.openconfig_qos.Qos.Classifier"
      "s.Classifier.StateB$\202A!/qos/classifiers/"
      "classifier/state\022t\n\005terms\030\205\371\266\361\001 \001(\0132;.op"
      "enconfig.openconfig_qos.Qos.Classifiers."
      "Classifier.TermsB$\202A!/qos/classifiers/cl"
      "assifier/terms\032\336\002\n\006Config\022S\n\004name\030\244\353\221\324\001 "
      "\001(\0132\025.ywrapper.StringValueB*\202A\'/qos/clas"
      "sifiers/classifier/config/name\022\177\n\004type\030\355"
      "\355\270\311\001 \001(\0162A.openconfig.openconfig_qos.Qos"
      ".Classifiers.Classifier.Config.TypeB*\202A\'"
      "/qos/classifiers/classifier/config/type\""
      "~\n\004Type\022\016\n\nTYPE_UNSET\020\000\022\026\n\tTYPE_IPV4\020\001\032\007"
      "\202A\004IPV4\022\026\n\tTYPE_IPV6\020\002\032\007\202A\004IPV6\022\026\n\tTYPE_"
      "MPLS\020\003\032\007\202A\004MPLS\022\036\n\rTYPE_ETHERNET\020\004\032\013\202A\010E"
      "THERNET\032\331\002\n\005State\022Q\n\004name\030\233\324\265s \001(\0132\025.ywr"
      "apper.StringValueB)\202A&/qos/classifiers/c"
      "lassifier/state/name\022}\n\004type\030\236\243\325\237\001 \001(\0162@"
      ".openconfig.openconfig_qos.Qos.Classifie"
      "rs.Classifier.State.TypeB)\202A&/qos/classi"
      "fiers/classifier/state/type\"~\n\004Type\022\016\n\nT"
      "YPE_UNSET\020\000\022\026\n\tTYPE_IPV4\020\001\032\007\202A\004IPV4\022\026\n\tT"
      "YPE_IPV6\020\002\032\007\202A\004IPV6\022\026\n\tTYPE_MPLS\020\003\032\007\202A\004M"
      "PLS\022\036\n\rTYPE_ETHERNET\020\004\032\013\202A\010ETHERNET\032\203^\n\005"
      "Terms\022\177\n\004term\030\266\360\314# \003(\0132C.openconfig.open"
      "config_qos.Qos.Classifiers.Classifier.Te"
      "rms.TermKeyB)\202A&/qos/classifiers/classif"
      "ier/terms/term\032\342[\n\004Term\022\220\001\n\007actions\030\376\241\305\211"
      "\001 \001(\0132H.openconfig.openconfig_qos.Qos.Cl"
      "assifiers.Classifier.Terms.Term.ActionsB"
      "1\202A./qos/classifiers/classifier/terms/te"
      "rm/actions\022\230\001\n\nconditions\030\303\305\201\007 \001(\0132K.ope"
      "nconfig.openconfig_qos.Qos.Classifiers.C"
      "lassifier.Terms.Term.ConditionsB4\202A1/qos"
      "/classifiers/classifier/terms/term/condi"
      "tions\022\215\001\n\006config\030\227\364\372\307\001 \001(\0132G.openconfig."
      "openconfig_qos.Qos.Classifiers.Classifie"
      "r.Terms.Term.ConfigB0\202A-/qos/classifiers"
      "/classifier/terms/term/config\022\211\001\n\005state\030"
      "\310\307\355\010 \001(\0132F.openconfig.openconfig_qos.Qos"
      ".Classifiers.Classifier.Terms.Term.State"
      "B/\202A,/qos/classifiers/classifier/terms/t"
      "erm/state\032\245\016\n\007Actions\022\234\001\n\006config\030\317\267\3565 \001("
      "\0132O.openconfig.openconfig_qos.Qos.Classi"
      "fiers.Classifier.Terms.Term.Actions.Conf"
      "igB8\202A5/qos/classifiers/classifier/terms"
      "/term/actions/config\022\234\001\n\006remark\030\355\324\347\025 \001(\013"
      "2O.openconfig.openconfig_qos.Qos.Classif"
      "iers.Classifier.Terms.Term.Actions.Remar"
      "kB8\202A5/qos/classifiers/classifier/terms/"
      "term/actions/remark\022\232\001\n\005state\030\300\331\334\300\001 \001(\0132"
      "N.openconfig.openconfig_qos.Qos.Classifi"
      "ers.Classifier.Terms.Term.Actions.StateB"
      "7\202A4/qos/classifiers/classifier/terms/te"
      "rm/actions/state\032\177\n\006Config\022u\n\014target_gro"
      "up\030\353\361\326} \001(\0132\025.ywrapper.StringValueBE\202AB/"
      "qos/classifiers/classifier/terms/term/ac"
      "tions/config/target-group\032\275\010\n\006Remark\022\253\001\n"
      "\006config\030\202\222\302\377\001 \001(\0132V.openconfig.openconfi"
      "g_qos.Qos.Classifiers.Classifier.Terms.T"
      "erm.Actions.Remark.ConfigB\?\202A</qos/class"
      "ifiers/classifier/terms/term/actions/rem"
      "ark/config\022\250\001\n\005state\030\277\331\327\306\001 \001(\0132U.opencon"
      "fig.openconfig_qos.Qos.Classifiers.Class"
      "ifier.Terms.Term.Actions.Remark.StateB>\202"
      "A;/qos/classifiers/classifier/terms/term"
      "/actions/remark/state\032\354\002\n\006Config\022t\n\tset_"
      "dot1p\030\346\234\333= \001(\0132\023.ywrapper.UintValueBI\202AF"
      "/qos/classifiers/classifier/terms/term/a"
      "ctions/remark/config/set-dot1p\022r\n\010set_ds"
      "cp\030\266\274\230X \001(\0132\023.ywrapper.UintValueBH\202AE/qo"
      "s/classifiers/classifier/terms/term/acti"
      "ons/remark/config/set-dscp\022x\n\013set_mpls_t"
      "c\030\316\237\2167 \001(\0132\023.ywrapper.UintValueBK\202AH/qos"
      "/classifiers/classifier/terms/term/actio"
      "ns/remark/config/set-mpls-tc\032\352\002\n\005State\022t"
      "\n\tset_dot1p\030\317\321\303\223\001 \001(\0132\023.ywrapper.UintVal"
      "ueBH\202AE/qos/classifiers/classifier/terms"
      "/term/actions/remark/state/set-dot1p\022r\n\010"
      "set_dscp\030\355\371\207\363\001 \001(\0132\023.ywrapper.UintValueB"
      "G\202AD/qos/classifiers/classifier/terms/te"
      "rm/actions/remark/state/set-dscp\022w\n\013set_"
      "mpls_tc\030\363\272\2501 \001(\0132\023.ywrapper.UintValueBJ\202"
      "AG/qos/classifiers/classifier/terms/term"
      "/actions/remark/state/set-mpls-tc\032~\n\005Sta"
      "te\022u\n\014target_group\030\212\204\221\235\001 \001(\0132\025.ywrapper."
      "StringValueBD\202AA/qos/classifiers/classif"
      "ier/terms/term/actions/state/target-grou"
      "p\032\236G\n\nConditions\022\234\001\n\004ipv4\030\353\301\344\004 \001(\0132P.ope"
      "nconfig.openconfig_qos.Qos.Classifiers.C"
      "lassifier.Terms.Term.Conditions.Ipv4B9\202A"
      "6/qos/classifiers/classifier/terms/term/"
      "conditions/ipv4\022\234\001\n\004ipv6\030\351\301\344\004 \001(\0132P.open"
      "config.openconfig_qos.Qos.Classifiers.Cl"
      "assifier.Terms.Term.Conditions.Ipv6B9\202A6"
      "/qos/classifiers/classifier/terms/term/c"
      "onditions/ipv6\022\227\001\n\002l2\030\270\217\230\255\001 \001(\0132N.openco"
      "nfig.openconfig_qos.Qos.Classifiers.Clas"
      "sifier.Terms.Term.Conditions.L2B7\202A4/qos"
      "/classifiers/classifier/terms/term/condi"
      "tions/l2\022\234\001\n\004mpls\030\322\332\311{ \001(\0132P.openconfig."
      "openconfig_qos.Qos.Classifiers.Classifie"
      "r.Terms.Term.Conditions.MplsB9\202A6/qos/cl"
      "assifiers/classifier/terms/term/conditio"
      "ns/mpls\022\254\001\n\ttransport\030\235\261\370\274\001 \001(\0132U.openco"
      "nfig.openconfig_qos.Qos.Classifiers.Clas"
      "sifier.Terms.Term.Conditions.TransportB>"
      "\202A;/qos/classifiers/classifier/terms/ter"
      "m/conditions/transport\032\242\r\n\004Ipv4\022\254\001\n\006conf"
      "ig\030\274\203\220\' \001(\0132W.openconfig.openconfig_qos."
      "Qos.Classifiers.Classifier.Terms.Term.Co"
      "nditions.Ipv4.ConfigB@\202A=/qos/classifier"
      "s/classifier/terms/term/conditions/ipv4/"
      "config\022\251\001\n\005state\030\265\263\304\014 \001(\0132V.openconfig.o"
      "penconfig_qos.Qos.Classifiers.Classifier"
      ".Terms.Term.Conditions.Ipv4.StateB\?\202A</q"
      "os/classifiers/classifier/terms/term/con"
      "ditions/ipv4/state\032\241\005\n\006Config\022\214\001\n\023destin"
      "ation_address\030\256\242\341\373\001 \001(\0132\025.ywrapper.Strin"
      "gValueBT\202AQ/qos/classifiers/classifier/t"
      "erms/term/conditions/ipv4/config/destina"
      "tion-address\022l\n\004dscp\030\265\277\374\332\001 \001(\0132\023.ywrappe"
      "r.UintValueBE\202AB/qos/classifiers/classif"
      "ier/terms/term/conditions/ipv4/config/ds"
      "cp\022u\n\thop_limit\030\242\274\300N \001(\0132\023.ywrapper.Uint"
      "ValueBJ\202AG/qos/classifiers/classifier/te"
      "rms/term/conditions/ipv4/config/hop-limi"
      "t\022s\n-protocol_openconfigpacketmatchtypes"
      "ipprotocol\030\245\302\256\261\001 \001(\01626.openconfig.enums."
      "OpenconfigPacketMatchTypesIPPROTOCOLH\000\022\035"
      "\n\017protocol_uint64\030\374\265\350\350\001 \001(\004H\000\022\202\001\n\016source"
      "_address\030\253\317\314\271\001 \001(\0132\025.ywrapper.StringValu"
      "eBO\202AL/qos/classifiers/classifier/terms/"
      "term/conditions/ipv4/config/source-addre"
      "ssB\n\n\010protocol\032\232\005\n\005State\022\213\001\n\023destination"
      "_address\030\347\303\265\267\001 \001(\0132\025.ywrapper.StringValu"
      "eBS\202AP/qos/classifiers/classifier/terms/"
      "term/conditions/ipv4/state/destination-a"
      "ddress\022j\n\004dscp\030\332\246\372f \001(\0132\023.ywrapper.UintV"
      "alueBD\202AA/qos/classifiers/classifier/ter"
      "ms/term/conditions/ipv4/state/dscp\022u\n\tho"
      "p_limit\030\267\361\354\254\001 \001(\0132\023.ywrapper.UintValueBI"
      "\202AF/qos/classifiers/classifier/terms/ter"
      "m/conditions/ipv4/state/hop-limit\022s\n-pro"
      "tocol_openconfigpacketmatchtypesipprotoc"
      "ol\030\210\341\306\240\001 \001(\01626.openconfig.enums.Openconf"
      "igPacketMatchTypesIPPROTOCOLH\000\022\034\n\017protoc"
      "ol_uint64\030\255\364\263B \001(\004H\000\022\200\001\n\016source_address\030"
      "\270\356\250B \001(\0132\025.ywrapper.StringValueBN\202AK/qos"
      "/classifiers/classifier/terms/term/condi"
      "tions/ipv4/state/source-addressB\n\n\010proto"
      "col\032\323\021\n\004Ipv6\022\255\001\n\006config\030\336\340\270\335\001 \001(\0132W.open"
      "config.openconfig_qos.Qos.Classifiers.Cl"
      "assifier.Terms.Term.Conditions.Ipv6.Conf"
      "igB@\202A=/qos/classifiers/classifier/terms"
      "/term/conditions/ipv6/config\022\251\001\n\005state\030\313"
      "\343\363\022 \001(\0132V.openconfig.openconfig_qos.Qos."
      "Classifiers.Classifier.Terms.Term.Condit"
      "ions.Ipv6.StateB\?\202A</qos/classifiers/cla"
      "ssifier/terms/term/conditions/ipv6/state"
      "\032\271\007\n\006Config\022\213\001\n\023destination_address\030\270\260\330B"
      " \001(\0132\025.ywrapper.StringValueBT\202AQ/qos/cla"
      "ssifiers/classifier/terms/term/condition"
      "s/ipv6/config/destination-address\022\217\001\n\026de"
      "stination_flow_label\030\365\262\351\014 \001(\0132\023.ywrapper"
      ".UintValueBW\202AT/qos/classifiers/classifi"
      "er/terms/term/conditions/ipv6/config/des"
      "tination-flow-label\022l\n\004dscp\030\257\273\370\345\001 \001(\0132\023."
      "ywrapper.UintValueBE\202AB/qos/classifiers/"
      "classifier/terms/term/conditions/ipv6/co"
      "nfig/dscp\022u\n\thop_limit\030\234\302\224o \001(\0132\023.ywrapp"
      "er.UintValueBJ\202AG/qos/classifiers/classi"
      "fier/terms/term/conditions/ipv6/config/h"
      "op-limit\022s\n-protocol_openconfigpacketmat"
      "chtypesipprotocol\030\373\336\321\346\001 \001(\01626.openconfig"
      ".enums.OpenconfigPacketMatchTypesIPPROTO"
      "COLH\000\022\034\n\017protocol_uint64\030\202\240\222\030 \001(\004H\000\022\202\001\n\016"
      "source_address\030\241\344\342\355\001 \001(\0132\025.ywrapper.Stri"
      "ngValueBO\202AL/qos/classifiers/classifier/"
      "terms/term/conditions/ipv6/config/source"
      "-address\022\205\001\n\021source_flow_label\030\362\236\331K \001(\0132"
      "\023.ywrapper.UintValueBR\202AO/qos/classifier"
      "s/classifier/terms/term/conditions/ipv6/"
      "config/source-flow-labelB\n\n\010protocol\032\262\007\n"
      "\005State\022\212\001\n\023destination_address\030\255\275\351\177 \001(\0132"
      "\025.ywrapper.StringValueBS\202AP/qos/classifi"
      "ers/classifier/terms/term/conditions/ipv"
      "6/state/destination-address\022\217\001\n\026destinat"
      "ion_flow_label\030\276\202\205\237\001 \001(\0132\023.ywrapper.Uint"
      "ValueBV\202AS/qos/classifiers/classifier/te"
      "rms/term/conditions/ipv6/state/destinati"
      "on-flow-label\022k\n\004dscp\030\310\374\322\215\001 \001(\0132\023.ywrapp"
      "er.UintValueBD\202AA/qos/classifiers/classi"
      "fier/terms/term/conditions/ipv6/state/ds"
      "cp\022u\n\thop_limit\030\275\341\233\341\001 \001(\0132\023.ywrapper.Uin"
      "tValueBI\202AF/qos/classifiers/classifier/t"
      "erms/term/conditions/ipv6/state/hop-limi"
      "t\022r\n-protocol_openconfigpacketmatchtypes"
      "ipprotocol\030\322\265\331v \001(\01626.openconfig.enums.O"
      "penconfigPacketMatchTypesIPPROTOCOLH\000\022\034\n"
      "\017protocol_uint64\030\317\210\243A \001(\004H\000\022\200\001\n\016source_a"
      "ddress\030\362\361\252r \001(\0132\025.ywrapper.StringValueBN"
      "\202AK/qos/classifiers/classifier/terms/ter"
      "m/conditions/ipv6/state/source-address\022\204"
      "\001\n\021source_flow_label\030\317\234\222h \001(\0132\023.ywrapper"
      ".UintValueBQ\202AN/qos/classifiers/classifi"
      "er/terms/term/conditions/ipv6/state/sour"
      "ce-flow-labelB\n\n\010protocol\032\310\r\n\002L2\022\250\001\n\006con"
      "fig\030\275\205\367R \001(\0132U.openconfig.openconfig_qos"
      ".Qos.Classifiers.Classifier.Terms.Term.C"
      "onditions.L2.ConfigB>\202A;/qos/classifiers"
      "/classifier/terms/term/conditions/l2/con"
      "fig\022\244\001\n\005state\030\262\252} \001(\0132T.openconfig.openc"
      "onfig_qos.Qos.Classifiers.Classifier.Ter"
      "ms.Term.Conditions.L2.StateB=\202A:/qos/cla"
      "ssifiers/classifier/terms/term/condition"
      "s/l2/state\032\267\005\n\006Config\022\202\001\n\017destination_ma"
      "c\030\206\257\356\365\001 \001(\0132\025.ywrapper.StringValueBN\202AK/"
      "qos/classifiers/classifier/terms/term/co"
      "nditions/l2/config/destination-mac\022\214\001\n\024d"
      "estination_mac_mask\030\213\376\245\211\001 \001(\0132\025.ywrapper"
      ".StringValueBS\202AP/qos/classifiers/classi"
      "fier/terms/term/conditions/l2/config/des"
      "tination-mac-mask\022q\n-ethertype_openconfi"
      "gpacketmatchtypesethertype\030\345\243\224u \001(\01625.op"
      "enconfig.enums.OpenconfigPacketMatchType"
      "sETHERTYPEH\000\022\035\n\020ethertype_uint64\030\301\336\235\? \001("
      "\004H\000\022v\n\nsource_mac\030\341\230( \001(\0132\025.ywrapper.Str"
      "ingValueBI\202AF/qos/classifiers/classifier"
      "/terms/term/conditions/l2/config/source-"
      "mac\022\201\001\n\017source_mac_mask\030\366\325\265\027 \001(\0132\025.ywrap"
      "per.StringValueBN\202AK/qos/classifiers/cla"
      "ssifier/terms/term/conditions/l2/config/"
      "source-mac-maskB\013\n\tethertype\032\265\005\n\005State\022\201"
      "\001\n\017destination_mac\030\315\362\377\204\001 \001(\0132\025.ywrapper."
      "StringValueBM\202AJ/qos/classifiers/classif"
      "ier/terms/term/conditions/l2/state/desti"
      "nation-mac\022\212\001\n\024destination_mac_mask\030\312\346\336("
      " \001(\0132\025.ywrapper.StringValueBR\202AO/qos/cla"
      "ssifiers/classifier/terms/term/condition"
      "s/l2/state/destination-mac-mask\022r\n-ether"
      "type_openconfigpacketmatchtypesethertype"
      "\030\226\344\310\301\001 \001(\01625.openconfig.enums.Openconfig"
      "PacketMatchTypesETHERTYPEH\000\022\036\n\020ethertype"
      "_uint64\030\354\300\223\334\001 \001(\004H\000\022w\n\nsource_mac\030\324\306\214\361\001 "
      "\001(\0132\025.ywrapper.StringValueBH\202AE/qos/clas"
      "sifiers/classifier/terms/term/conditions"
      "/l2/state/source-mac\022\200\001\n\017source_mac_mask"
      "\030\355\342\324h \001(\0132\025.ywrapper.StringValueBM\202AJ/qo"
      "s/classifiers/classifier/terms/term/cond"
      "itions/l2/state/source-mac-maskB\013\n\tether"
      "type\032\366\004\n\004Mpls\022\255\001\n\006config\030\223\244\275\340\001 \001(\0132W.ope"
      "nconfig.openconfig_qos.Qos.Classifiers.C"
      "lassifier.Terms.Term.Conditions.Mpls.Con"
      "figB@\202A=/qos/classifiers/classifier/term"
      "s/term/conditions/mpls/config\022\251\001\n\005state\030"
      "\364\313\253y \001(\0132V.openconfig.openconfig_qos.Qos"
      ".Classifiers.Classifier.Terms.Term.Condi"
      "tions.Mpls.StateB\?\202A</qos/classifiers/cl"
      "assifier/terms/term/conditions/mpls/stat"
      "e\032\210\001\n\006Config\022~\n\rtraffic_class\030\222\363\241\213\001 \001(\0132"
      "\023.ywrapper.UintValueBN\202AK/qos/classifier"
      "s/classifier/terms/term/conditions/mpls/"
      "config/traffic-class\032\206\001\n\005State\022}\n\rtraffi"
      "c_class\030\225\237\256\265\001 \001(\0132\023.ywrapper.UintValueBM"
      "\202AJ/qos/classifiers/classifier/terms/ter"
      "m/conditions/mpls/state/traffic-class\032\252\017"
      "\n\tTransport\022\267\001\n\006config\030\322\354\325\340\001 \001(\0132\\.openc"
      "onfig.openconfig_qos.Qos.Classifiers.Cla"
      "ssifier.Terms.Term.Conditions.Transport."
      "ConfigBE\202AB/qos/classifiers/classifier/t"
      "erms/term/conditions/transport/config\022\263\001"
      "\n\005state\030\317\215\341x \001(\0132[.openconfig.openconfig"
      "_qos.Qos.Classifiers.Classifier.Terms.Te"
      "rm.Conditions.Transport.StateBD\202AA/qos/c"
      "lassifiers/classifier/terms/term/conditi"
      "ons/transport/state\032\226\006\n\006Config\022\233\001\n desti"
      "nation_port_destinationport\030\271\233\307\035 \001(\0162l.o"
      "penconfig.openconfig_qos.Qos.Classifiers"
      ".Classifier.Terms.Term.Conditions.Transp"
      "ort.Config.DestinationPortH\000\022$\n\027destinat"
      "ion_port_string\030\263\255\325\024 \001(\tH\000\022%\n\027destinatio"
      "n_port_uint64\030\226\373\312\215\001 \001(\004H\000\022\214\001\n\026source_por"
      "t_sourceport\030\267\214\350P \001(\0162g.openconfig.openc"
      "onfig_qos.Qos.Classifiers.Classifier.Ter"
      "ms.Term.Conditions.Transport.Config.Sour"
      "cePortH\001\022 \n\022source_port_string\030\256\375\264\243\001 \001(\t"
      "H\001\022 \n\022source_port_uint64\030\257\317\313\204\001 \001(\004H\001\022\233\001\n"
      "\ttcp_flags\030\200\342\255\' \003(\01624.openconfig.enums.O"
      "penconfigPacketMatchTypesTCPFLAGSBO\202AL/q"
      "os/classifiers/classifier/terms/term/con"
      "ditions/transport/config/tcp-flags\"M\n\017De"
      "stinationPort\022\031\n\025DESTINATIONPORT_UNSET\020\000"
      "\022\037\n\023DESTINATIONPORT_ANY\020\001\032\006\202A\003ANY\">\n\nSou"
      "rcePort\022\024\n\020SOURCEPORT_UNSET\020\000\022\032\n\016SOURCEP"
      "ORT_ANY\020\001\032\006\202A\003ANYB\022\n\020destination_portB\r\n"
      "\013source_port\032\223\006\n\005State\022\232\001\n destination_p"
      "ort_destinationport\030\326\253\2171 \001(\0162k.openconfi"
      "g.openconfig_qos.Qos.Classifiers.Classif"
      "ier.Terms.Term.Conditions.Transport.Stat"
      "e.DestinationPortH\000\022$\n\027destination_port_"
      "string\030\332\207\330n \001(\tH\000\022$\n\027destination_port_ui"
      "nt64\030\273\306\330G \001(\004H\000\022\214\001\n\026source_port_sourcepo"
      "rt\030\354\370\244\317\001 \001(\0162f.openconfig.openconfig_qos"
      ".Qos.Classifiers.Classifier.Terms.Term.C"
      "onditions.Transport.State.SourcePortH\001\022 "
      "\n\022source_port_string\030\235\305\267\375\001 \001(\tH\001\022 \n\022sour"
      "ce_port_uint64\030\200\237\266\203\001 \001(\004H\001\022\233\001\n\ttcp_flags"
      "\030\321\372\236\271\001 \003(\01624.openconfig.enums.Openconfig"
      "PacketMatchTypesTCPFLAGSBN\202AK/qos/classi"
      "fiers/classifier/terms/term/conditions/t"
      "ransport/state/tcp-flags\"M\n\017DestinationP"
      "ort\022\031\n\025DESTINATIONPORT_UNSET\020\000\022\037\n\023DESTIN"
      "ATIONPORT_ANY\020\001\032\006\202A\003ANY\">\n\nSourcePort\022\024\n"
      "\020SOURCEPORT_UNSET\020\000\022\032\n\016SOURCEPORT_ANY\020\001\032"
      "\006\202A\003ANYB\022\n\020destination_portB\r\n\013source_po"
      "rt\032c\n\006Config\022Y\n\002id\030\341\235\224A \001(\0132\025.ywrapper.S"
      "tringValueB3\202A0/qos/classifiers/classifi"
      "er/terms/term/config/id\032b\n\005State\022Y\n\002id\030\220"
      "\375\236\206\001 \001(\0132\025.ywrapper.StringValueB2\202A//qos"
      "/classifiers/classifier/terms/term/state"
      "/id\032\223\001\n\007TermKey\0228\n\002id\030\001 \001(\tB,\202A)/qos/cla"
      "ssifiers/classifier/terms/term/id\022N\n\004ter"
      "m\030\002 \001(\0132@.openconfig.openconfig_qos.Qos."
      "Classifiers.Classifier.Terms.Term\032\215\001\n\rCl"
      "assifierKey\0221\n\004name\030\001 \001(\tB#\202A /qos/class"
      "ifiers/classifier/name\022I\n\nclassifier\030\002 \001"
      "(\01325.openconfig.openconfig_qos.Qos.Class"
      "ifiers.Classifier\032\010\n\006Config\032\236\n\n\020Forwardi"
      "ngGroups\022\214\001\n\020forwarding_group\030\331\271\362\330\001 \003(\0132"
      "B.openconfig.openconfig_qos.Qos.Forwardi"
      "ngGroups.ForwardingGroupKeyB*\202A\'/qos/for"
      "warding-groups/forwarding-group\032\311\007\n\017Forw"
      "ardingGroup\022\214\001\n\006config\030\256\364\312\016 \001(\0132F.openco"
      "nfig.openconfig_qos.Qos.ForwardingGroups"
      ".ForwardingGroup.ConfigB1\202A./qos/forward"
      "ing-groups/forwarding-group/config\022\212\001\n\005s"
      "tate\030\333\360\242\364\001 \001(\0132E.openconfig.openconfig_q"
      "os.Qos.ForwardingGroups.ForwardingGroup."
      "StateB0\202A-/qos/forwarding-groups/forward"
      "ing-group/state\032\314\002\n\006Config\022r\n\017fabric_pri"
      "ority\030\347\226\220_ \001(\0132\023.ywrapper.UintValueBA\202A>"
      "/qos/forwarding-groups/forwarding-group/"
      "config/fabric-priority\022^\n\004name\030\364\370\342U \001(\0132"
      "\025.ywrapper.StringValueB6\202A3/qos/forwardi"
      "ng-groups/forwarding-group/config/name\022n"
      "\n\014output_queue\030\360\330\324\n \001(\0132\025.ywrapper.Strin"
      "gValueB>\202A;/qos/forwarding-groups/forwar"
      "ding-group/config/output-queue\032\312\002\n\005State"
      "\022r\n\017fabric_priority\030\252\333\271\317\001 \001(\0132\023.ywrapper"
      ".UintValueB@\202A=/qos/forwarding-groups/fo"
      "rwarding-group/state/fabric-priority\022^\n\004"
      "name\030\353\347\243\276\001 \001(\0132\025.ywrapper.StringValueB5\202"
      "A2/qos/forwarding-groups/forwarding-grou"
      "p/state/name\022m\n\014output_queue\030\307\332\3761 \001(\0132\025."
      "ywrapper.StringValueB=\202A:/qos/forwarding"
      "-groups/forwarding-group/state/output-qu"
      "eue\032\256\001\n\022ForwardingGroupKey\022=\n\004name\030\001 \001(\t"
      "B/\202A,/qos/forwarding-groups/forwarding-g"
      "roup/name\022Y\n\020forwarding_group\030\002 \001(\0132\?.op"
      "enconfig.openconfig_qos.Qos.ForwardingGr"
      "oups.ForwardingGroup\032\344\253\001\n\nInterfaces\022j\n\t"
      "interface\030\377\332\247U \003(\01326.openconfig.openconf"
      "ig_qos.Qos.Interfaces.InterfaceKeyB\034\202A\031/"
      "qos/interfaces/interface\032\316\251\001\n\tInterface\022"
      "r\n\006config\030\300\371\220H \001(\0132:.openconfig.openconf"
      "ig_qos.Qos.Interfaces.Interface.ConfigB#"
      "\202A /qos/interfaces/interface/config\022o\n\005i"
      "nput\030\376\325\254X \001(\01329.openconfig.openconfig_qo"
      "s.Qos.Interfaces.Interface.InputB\"\202A\037/qo"
      "s/interfaces/interface/input\022\207\001\n\rinterfa"
      "ce_ref\030\357\221\262\242\001 \001(\0132@.openconfig.openconfig"
      "_qos.Qos.Interfaces.Interface.InterfaceR"
      "efB*\202A\'/qos/interfaces/interface/interfa"
      "ce-ref\022s\n\006output\030\325\332\367\353\001 \001(\0132:.openconfig."
      "openconfig_qos.Qos.Interfaces.Interface."
      "OutputB#\202A /qos/interfaces/interface/out"
      "put\022o\n\005state\030\271\325\377p \001(\01329.openconfig.openc"
      "onfig_qos.Qos.Interfaces.Interface.State"
      "B\"\202A\037/qos/interfaces/interface/state\032j\n\006"
      "Config\022`\n\014interface_id\030\366\356\301| \001(\0132\025.ywrapp"
      "er.StringValueB0\202A-/qos/interfaces/inter"
      "face/config/interface-id\032\220X\n\005Input\022\212\001\n\nc"
      "lassifers\030\216\254\315K \001(\0132D.openconfig.openconf"
      "ig_qos.Qos.Interfaces.Interface.Input.Cl"
      "assifersB-\202A*/qos/interfaces/interface/i"
      "nput/classifers\022~\n\006config\030\317\263\261] \001(\0132@.ope"
      "nconfig.openconfig_qos.Qos.Interfaces.In"
      "terface.Input.ConfigB)\202A&/qos/interfaces"
      "/interface/input/config\022\177\n\006queues\030\225\340\265\352\001 "
      "\001(\0132@.openconfig.openconfig_qos.Qos.Inte"
      "rfaces.Interface.Input.QueuesB)\202A&/qos/i"
      "nterfaces/interface/input/queues\022\234\001\n\020sch"
      "eduler_policy\030\357\300\334\272\001 \001(\0132I.openconfig.ope"
      "nconfig_qos.Qos.Interfaces.Interface.Inp"
      "ut.SchedulerPolicyB3\202A0/qos/interfaces/i"
      "nterface/input/scheduler-policy\022|\n\005state"
      "\030\300\355\310\202\001 \001(\0132\?.openconfig.openconfig_qos.Q"
      "os.Interfaces.Interface.Input.StateB(\202A%"
      "/qos/interfaces/interface/input/state\022\252\001"
      "\n\025virtual_output_queues\030\231\340\326\260\001 \001(\0132M.open"
      "config.openconfig_qos.Qos.Interfaces.Int"
      "erface.Input.VirtualOutputQueuesB8\202A5/qo"
      "s/interfaces/interface/input/virtual-out"
      "put-queues\032\213\031\n\nClassifers\022\243\001\n\nclassifier"
      "\030\266\255\207C \003(\0132R.openconfig.openconfig_qos.Qo"
      "s.Interfaces.Interface.Input.Classifers."
      "ClassifierKeyB8\202A5/qos/interfaces/interf"
      "ace/input/classifers/classifier\032\330\024\n\nClas"
      "sifier\022\253\001\n\006config\030\227\303\250\253\001 \001(\0132V.openconfig"
      ".openconfig_qos.Qos.Interfaces.Interface"
      ".Input.Classifers.Classifier.ConfigB\?\202A<"
      "/qos/interfaces/interface/input/classife"
      "rs/classifier/config\022\247\001\n\005state\030\310\234\204} \001(\0132"
      "U.openconfig.openconfig_qos.Qos.Interfac"
      "es.Interface.Input.Classifers.Classifier"
      ".StateB>\202A;/qos/interfaces/interface/inp"
      "ut/classifers/classifier/state\022\247\001\n\005terms"
      "\030\376\317\207\n \001(\0132U.openconfig.openconfig_qos.Qo"
      "s.Interfaces.Interface.Input.Classifers."
      "Classifier.TermsB>\202A;/qos/interfaces/int"
      "erface/input/classifers/classifier/terms"
      "\032\214\003\n\006Config\022l\n\004name\030\237\326\271F \001(\0132\025.ywrapper."
      "StringValueBD\202AA/qos/interfaces/interfac"
      "e/input/classifers/classifier/config/nam"
      "e\022\263\001\n\004type\030\372\366\321\373\001 \001(\0162[.openconfig.openco"
      "nfig_qos.Qos.Interfaces.Interface.Input."
      "Classifers.Classifier.Config.TypeBD\202AA/q"
      "os/interfaces/interface/input/classifers"
      "/classifier/config/type\"^\n\004Type\022\016\n\nTYPE_"
      "UNSET\020\000\022\026\n\tTYPE_IPV4\020\005\032\007\202A\004IPV4\022\026\n\tTYPE_"
      "IPV6\020\007\032\007\202A\004IPV6\022\026\n\tTYPE_MPLS\020\010\032\007\202A\004MPLS\032"
      "\210\003\n\005State\022k\n\004name\030\362\240\346\\ \001(\0132\025.ywrapper.St"
      "ringValueBC\202A@/qos/interfaces/interface/"
      "input/classifers/classifier/state/name\022\261"
      "\001\n\004type\030\257\351\333\330\001 \001(\0162Z.openconfig.openconfi"
      "g_qos.Qos.Interfaces.Interface.Input.Cla"
      "ssifers.Classifier.State.TypeBC\202A@/qos/i"
      "nterfaces/interface/input/classifers/cla"
      "ssifier/state/type\"^\n\004Type\022\016\n\nTYPE_UNSET"
      "\020\000\022\026\n\tTYPE_IPV4\020\005\032\007\202A\004IPV4\022\026\n\tTYPE_IPV6\020"
      "\007\032\007\202A\004IPV6\022\026\n\tTYPE_MPLS\020\010\032\007\202A\004MPLS\032\255\n\n\005T"
      "erms\022\263\001\n\004term\030\227\241\234z \003(\0132].openconfig.open"
      "config_qos.Qos.Interfaces.Interface.Inpu"
      "t.Classifers.Classifier.Terms.TermKeyBC\202"
      "A@/qos/interfaces/interface/input/classi"
      "fers/classifier/terms/term\032\243\007\n\004Term\022\301\001\n\006"
      "config\030\210\305\345\317\001 \001(\0132a.openconfig.openconfig"
      "_qos.Qos.Interfaces.Interface.Input.Clas"
      "sifers.Classifier.Terms.Term.ConfigBJ\202AG"
      "/qos/interfaces/interface/input/classife"
      "rs/classifier/terms/term/config\022\276\001\n\005stat"
      "e\030\241\330\312\374\001 \001(\0132`.openconfig.openconfig_qos."
      "Qos.Interfaces.Interface.Input.Classifer"
      "s.Classifier.Terms.Term.StateBI\202AF/qos/i"
      "nterfaces/interface/input/classifers/cla"
      "ssifier/terms/term/state\032~\n\006Config\022t\n\002id"
      "\030\320\325\311\233\001 \001(\0132\025.ywrapper.StringValueBM\202AJ/q"
      "os/interfaces/interface/input/classifers"
      "/classifier/terms/term/config/id\032\225\003\n\005Sta"
      "te\022s\n\002id\030\343\272\201\206\001 \001(\0132\025.ywrapper.StringValu"
      "eBL\202AI/qos/interfaces/interface/input/cl"
      "assifers/classifier/terms/term/state/id\022"
      "\210\001\n\016matched_octets\030\371\211\347Y \001(\0132\023.ywrapper.U"
      "intValueBX\202AU/qos/interfaces/interface/i"
      "nput/classifers/classifier/terms/term/st"
      "ate/matched-octets\022\213\001\n\017matched_packets\030\344"
      "\234\300\320\001 \001(\0132\023.ywrapper.UintValueBY\202AV/qos/i"
      "nterfaces/interface/input/classifers/cla"
      "ssifier/terms/term/state/matched-packets"
      "\032\307\001\n\007TermKey\022R\n\002id\030\001 \001(\tBF\202AC/qos/interf"
      "aces/interface/input/classifers/classifi"
      "er/terms/term/id\022h\n\004term\030\002 \001(\0132Z.opencon"
      "fig.openconfig_qos.Qos.Interfaces.Interf"
      "ace.Input.Classifers.Classifier.Terms.Te"
      "rm\032\373\002\n\rClassifierKey\022\244\001\n\004type\030\001 \001(\0162W.op"
      "enconfig.openconfig_qos.Qos.Interfaces.I"
      "nterface.Input.Classifers.ClassifierKey."
      "TypeB=\202A:/qos/interfaces/interface/input"
      "/classifers/classifier/type\022c\n\nclassifie"
      "r\030\002 \001(\0132O.openconfig.openconfig_qos.Qos."
      "Interfaces.Interface.Input.Classifers.Cl"
      "assifier\"^\n\004Type\022\016\n\nTYPE_UNSET\020\000\022\026\n\tTYPE"
      "_IPV4\020\005\032\007\202A\004IPV4\022\026\n\tTYPE_IPV6\020\007\032\007\202A\004IPV6"
      "\022\026\n\tTYPE_MPLS\020\010\032\007\202A\004MPLS\032\010\n\006Config\032\245\013\n\006Q"
      "ueues\022\214\001\n\005queue\030\225\222\2341 \003(\0132I.openconfig.op"
      "enconfig_qos.Qos.Interfaces.Interface.In"
      "put.Queues.QueueKeyB/\202A,/qos/interfaces/"
      "interface/input/queues/queue\032\343\010\n\005Queue\022\231"
      "\001\n\006config\030\272\316\214\360\001 \001(\0132M.openconfig.opencon"
      "fig_qos.Qos.Interfaces.Interface.Input.Q"
      "ueues.Queue.ConfigB6\202A3/qos/interfaces/i"
      "nterface/input/queues/queue/config\022\225\001\n\005s"
      "tate\030\327\270\302Z \001(\0132L.openconfig.openconfig_qo"
      "s.Qos.Interfaces.Interface.Input.Queues."
      "Queue.StateB5\202A2/qos/interfaces/interfac"
      "e/input/queues/queue/state\032n\n\006Config\022d\n\004"
      "name\030\250\326\274\322\001 \001(\0132\025.ywrapper.StringValueB;\202"
      "A8/qos/interfaces/interface/input/queues"
      "/queue/config/name\032\265\005\n\005State\022s\n\ravg_queu"
      "e_len\030\302\323\241\252\001 \001(\0132\023.ywrapper.UintValueBC\202A"
      "@/qos/interfaces/interface/input/queues/"
      "queue/state/avg-queue-len\022q\n\014dropped_pkt"
      "s\030\331\374\362\374\001 \001(\0132\023.ywrapper.UintValueBB\202A\?/qo"
      "s/interfaces/interface/input/queues/queu"
      "e/state/dropped-pkts\022s\n\rmax_queue_len\030\360\275"
      "\261\377\001 \001(\0132\023.ywrapper.UintValueBC\202A@/qos/in"
      "terfaces/interface/input/queues/queue/st"
      "ate/max-queue-len\022b\n\004name\030\337\246\223F \001(\0132\025.ywr"
      "apper.StringValueB:\202A7/qos/interfaces/in"
      "terface/input/queues/queue/state/name\022v\n"
      "\017transmit_octets\030\303\367\270q \001(\0132\023.ywrapper.Uin"
      "tValueBE\202AB/qos/interfaces/interface/inp"
      "ut/queues/queue/state/transmit-octets\022s\n"
      "\rtransmit_pkts\030\273\243\350\257\001 \001(\0132\023.ywrapper.Uint"
      "ValueBC\202A@/qos/interfaces/interface/inpu"
      "t/queues/queue/state/transmit-pkts\032\245\001\n\010Q"
      "ueueKey\022B\n\004name\030\001 \001(\tB4\202A1/qos/interface"
      "s/interface/input/queues/queue/name\022U\n\005q"
      "ueue\030\002 \001(\0132F.openconfig.openconfig_qos.Q"
      "os.Interfaces.Interface.Input.Queues.Que"
      "ue\032\374\022\n\017SchedulerPolicy\022\240\001\n\006config\030\320\374\323\361\001 "
      "\001(\0132P.openconfig.openconfig_qos.Qos.Inte"
      "rfaces.Interface.Input.SchedulerPolicy.C"
      "onfigB:\202A7/qos/interfaces/interface/inpu"
      "t/scheduler-policy/config\022\253\001\n\nschedulers"
      "\030\360\355\263s \001(\0132T.openconfig.openconfig_qos.Qo"
      "s.Interfaces.Interface.Input.SchedulerPo"
      "licy.SchedulersB>\202A;/qos/interfaces/inte"
      "rface/input/scheduler-policy/schedulers\022"
      "\235\001\n\005state\030\311\250\274\300\001 \001(\0132O.openconfig.opencon"
      "fig_qos.Qos.Interfaces.Interface.Input.S"
      "chedulerPolicy.StateB9\202A6/qos/interfaces"
      "/interface/input/scheduler-policy/state\032"
      "q\n\006Config\022g\n\004name\030\372\260\321\002 \001(\0132\025.ywrapper.St"
      "ringValueB\?\202A</qos/interfaces/interface/"
      "input/scheduler-policy/config/name\032\223\r\n\nS"
      "chedulers\022\302\001\n\tscheduler\030\306\345\233\222\001 \003(\0132a.open"
      "config.openconfig_qos.Qos.Interfaces.Int"
      "erface.Input.SchedulerPolicy.Schedulers."
      "SchedulerKeyBH\202AE/qos/interfaces/interfa"
      "ce/input/scheduler-policy/schedulers/sch"
      "eduler\032\326\t\n\tScheduler\022\307\001\n\005state\030\270\247\274\274\001 \001(\013"
      "2d.openconfig.openconfig_qos.Qos.Interfa"
      "ces.Interface.Input.SchedulerPolicy.Sche"
      "dulers.Scheduler.StateBN\202AK/qos/interfac"
      "es/interface/input/scheduler-policy/sche"
      "dulers/scheduler/state\032\376\007\n\005State\022\223\001\n\021con"
      "forming_octets\030\216\277\273a \001(\0132\023.ywrapper.UintV"
      "alueB`\202A]/qos/interfaces/interface/input"
      "/scheduler-policy/schedulers/scheduler/s"
      "tate/conforming-octets\022\220\001\n\017conforming_pk"
      "ts\030\266\271\311\274\001 \001(\0132\023.ywrapper.UintValueB^\202A[/q"
      "os/interfaces/interface/input/scheduler-"
      "policy/schedulers/scheduler/state/confor"
      "ming-pkts\022\221\001\n\020exceeding_octets\030\362\351\342\n \001(\0132"
      "\023.ywrapper.UintValueB_\202A\\/qos/interfaces"
      "/interface/input/scheduler-policy/schedu"
      "lers/scheduler/state/exceeding-octets\022\215\001"
      "\n\016exceeding_pkts\030\222\205\243& \001(\0132\023.ywrapper.Uin"
      "tValueB]\202AZ/qos/interfaces/interface/inp"
      "ut/scheduler-policy/schedulers/scheduler"
      "/state/exceeding-pkts\022\202\001\n\010sequence\030\270\272\237\336\001"
      " \001(\0132\023.ywrapper.UintValueBW\202AT/qos/inter"
      "faces/interface/input/scheduler-policy/s"
      "chedulers/scheduler/state/sequence\022\222\001\n\020v"
      "iolating_octets\030\323\313\224\310\001 \001(\0132\023.ywrapper.Uin"
      "tValueB_\202A\\/qos/interfaces/interface/inp"
      "ut/scheduler-policy/schedulers/scheduler"
      "/state/violating-octets\022\215\001\n\016violating_pk"
      "ts\030\313\321\260S \001(\0132\023.ywrapper.UintValueB]\202AZ/qo"
      "s/interfaces/interface/input/scheduler-p"
      "olicy/schedulers/scheduler/state/violati"
      "ng-pkts\032\346\001\n\014SchedulerKey\022c\n\010sequence\030\001 \001"
      "(\004BQ\202AN/qos/interfaces/interface/input/s"
      "cheduler-policy/schedulers/scheduler/seq"
      "uence\022q\n\tscheduler\030\002 \001(\0132^.openconfig.op"
      "enconfig_qos.Qos.Interfaces.Interface.In"
      "put.SchedulerPolicy.Schedulers.Scheduler"
      "\032o\n\005State\022f\n\004name\030\375\332\3039 \001(\0132\025.ywrapper.St"
      "ringValueB>\202A;/qos/interfaces/interface/"
      "input/scheduler-policy/state/name\032\007\n\005Sta"
      "te\032\346\031\n\023VirtualOutputQueues\022\277\001\n\rvoq_inter"
      "face\030\304\353\373\? \003(\0132].openconfig.openconfig_qo"
      "s.Qos.Interfaces.Interface.Input.Virtual"
      "OutputQueues.VoqInterfaceKeyBF\202AC/qos/in"
      "terfaces/interface/input/virtual-output-"
      "queues/voq-interface\032\252\026\n\014VoqInterface\022\303\001"
      "\n\006config\030\351\261\312% \001(\0132a.openconfig.openconfi"
      "g_qos.Qos.Interfaces.Interface.Input.Vir"
      "tualOutputQueues.VoqInterface.ConfigBM\202A"
      "J/qos/interfaces/interface/input/virtual"
      "-output-queues/voq-interface/config\022\303\001\n\006"
      "queues\030\207\231\272\023 \001(\0132a.openconfig.openconfig_"
      "qos.Qos.Interfaces.Interface.Input.Virtu"
      "alOutputQueues.VoqInterface.QueuesBM\202AJ/"
      "qos/interfaces/interface/input/virtual-o"
      "utput-queues/voq-interface/queues\022\301\001\n\005st"
      "ate\030\276\201\260\232\001 \001(\0132`.openconfig.openconfig_qo"
      "s.Qos.Interfaces.Interface.Input.Virtual"
      "OutputQueues.VoqInterface.StateBL\202AI/qos"
      "/interfaces/interface/input/virtual-outp"
      "ut-queues/voq-interface/state\032\204\001\n\006Config"
      "\022z\n\004name\030\235\273\276$ \001(\0132\025.ywrapper.StringValue"
      "BR\202AO/qos/interfaces/interface/input/vir"
      "tual-output-queues/voq-interface/config/"
      "name\032\275\017\n\006Queues\022\321\001\n\005queue\030\223\356\222& \003(\0132j.ope"
      "nconfig.openconfig_qos.Qos.Interfaces.In"
      "terface.Input.VirtualOutputQueues.VoqInt"
      "erface.Queues.QueueKeyBS\202AP/qos/interfac"
      "es/interface/input/virtual-output-queues"
      "/voq-interface/queues/queue\032\361\013\n\005Queue\022\336\001"
      "\n\006config\030\264\315\265\311\001 \001(\0132n.openconfig.openconf"
      "ig_qos.Qos.Interfaces.Interface.Input.Vi"
      "rtualOutputQueues.VoqInterface.Queues.Qu"
      "eue.ConfigBZ\202AW/qos/interfaces/interface"
      "/input/virtual-output-queues/voq-interfa"
      "ce/queues/queue/config\022\332\001\n\005state\030\315\355\247c \001("
      "\0132m.openconfig.openconfig_qos.Qos.Interf"
      "aces.Interface.Input.VirtualOutputQueues"
      ".VoqInterface.Queues.Queue.StateBY\202AV/qo"
      "s/interfaces/interface/input/virtual-out"
      "put-queues/voq-interface/queues/queue/st"
      "ate\032\223\001\n\006Config\022\210\001\n\004name\030\326\377\347\303\001 \001(\0132\025.ywra"
      "pper.StringValueB_\202A\\/qos/interfaces/int"
      "erface/input/virtual-output-queues/voq-i"
      "nterface/queues/queue/config/name\032\223\007\n\005St"
      "ate\022\227\001\n\ravg_queue_len\030\200\272\333\260\001 \001(\0132\023.ywrapp"
      "er.UintValueBg\202Ad/qos/interfaces/interfa"
      "ce/input/virtual-output-queues/voq-inter"
      "face/queues/queue/state/avg-queue-len\022\225\001"
      "\n\014dropped_pkts\030\217\352\253\217\001 \001(\0132\023.ywrapper.Uint"
      "ValueBf\202Ac/qos/interfaces/interface/inpu"
      "t/virtual-output-queues/voq-interface/qu"
      "eues/queue/state/dropped-pkts\022\227\001\n\rmax_qu"
      "eue_len\030\246\252\265\351\001 \001(\0132\023.ywrapper.UintValueBg"
      "\202Ad/qos/interfaces/interface/input/virtu"
      "al-output-queues/voq-interface/queues/qu"
      "eue/state/max-queue-len\022\207\001\n\004name\030\311\262\341\264\001 \001"
      "(\0132\025.ywrapper.StringValueB^\202A[/qos/inter"
      "faces/interface/input/virtual-output-que"
      "ues/voq-interface/queues/queue/state/nam"
      "e\022\232\001\n\017transmit_octets\030\225\354\254\t \001(\0132\023.ywrappe"
      "r.UintValueBi\202Af/qos/interfaces/interfac"
      "e/input/virtual-output-queues/voq-interf"
      "ace/queues/queue/state/transmit-octets\022\226"
      "\001\n\rtransmit_pkts\030\241\371\346~ \001(\0132\023.ywrapper.Uin"
      "tValueBg\202Ad/qos/interfaces/interface/inp"
      "ut/virtual-output-queues/voq-interface/q"
      "ueues/queue/state/transmit-pkts\032\352\001\n\010Queu"
      "eKey\022f\n\004name\030\001 \001(\tBX\202AU/qos/interfaces/i"
      "nterface/input/virtual-output-queues/voq"
      "-interface/queues/queue/name\022v\n\005queue\030\002 "
      "\001(\0132g.openconfig.openconfig_qos.Qos.Inte"
      "rfaces.Interface.Input.VirtualOutputQueu"
      "es.VoqInterface.Queues.Queue\032\202\001\n\005State\022y"
      "\n\004name\030\344\372\376# \001(\0132\025.ywrapper.StringValueBQ"
      "\202AN/qos/interfaces/interface/input/virtu"
      "al-output-queues/voq-interface/state/nam"
      "e\032\337\001\n\017VoqInterfaceKey\022Y\n\004name\030\001 \001(\tBK\202AH"
      "/qos/interfaces/interface/input/virtual-"
      "output-queues/voq-interface/name\022q\n\rvoq_"
      "interface\030\002 \001(\0132Z.openconfig.openconfig_"
      "qos.Qos.Interfaces.Interface.Input.Virtu"
      "alOutputQueues.VoqInterface\032\361\005\n\014Interfac"
      "eRef\022\215\001\n\006config\030\320\347\2017 \001(\0132G.openconfig.op"
      "enconfig_qos.Qos.Interfaces.Interface.In"
      "terfaceRef.ConfigB1\202A./qos/interfaces/in"
      "terface/interface-ref/config\022\213\001\n\005state\030\311"
      "\361\324\350\001 \001(\0132F.openconfig.openconfig_qos.Qos"
      ".Interfaces.Interface.InterfaceRef.State"
      "B0\202A-/qos/interfaces/interface/interface"
      "-ref/state\032\341\001\n\006Config\022h\n\tinterface\030\270\342\344\016 "
      "\001(\0132\025.ywrapper.StringValueB;\202A8/qos/inte"
      "rfaces/interface/interface-ref/config/in"
      "terface\022m\n\014subinterface\030\370\357\236\302\001 \001(\0132\023.ywra"
      "pper.UintValueB>\202A;/qos/interfaces/inter"
      "face/interface-ref/config/subinterface\032\336"
      "\001\n\005State\022g\n\tinterface\030\365\343\371# \001(\0132\025.ywrappe"
      "r.StringValueB:\202A7/qos/interfaces/interf"
      "ace/interface-ref/state/interface\022l\n\014sub"
      "interface\030\327\265\322\265\001 \001(\0132\023.ywrapper.UintValue"
      "B=\202A:/qos/interfaces/interface/interface"
      "-ref/state/subinterface\032\216E\n\006Output\022\215\001\n\nc"
      "lassifers\030\347\221\330\232\001 \001(\0132E.openconfig.opencon"
      "fig_qos.Qos.Interfaces.Interface.Output."
      "ClassifersB.\202A+/qos/interfaces/interface"
      "/output/classifers\022\201\001\n\006config\030\372\267\331\254\001 \001(\0132"
      "A.openconfig.openconfig_qos.Qos.Interfac"
      "es.Interface.Output.ConfigB*\202A\'/qos/inte"
      "rfaces/interface/output/config\022\224\001\n\rinter"
      "face_ref\030\221\217\323\006 \001(\0132G.openconfig.openconfi"
      "g_qos.Qos.Interfaces.Interface.Output.In"
      "terfaceRefB1\202A./qos/interfaces/interface"
      "/output/interface-ref\022\200\001\n\006queues\030\274\346\271c \001("
      "\0132A.openconfig.openconfig_qos.Qos.Interf"
      "aces.Interface.Output.QueuesB*\202A\'/qos/in"
      "terfaces/interface/output/queues\022\236\001\n\020sch"
      "eduler_policy\030\356\336\347\244\001 \001(\0132J.openconfig.ope"
      "nconfig_qos.Qos.Interfaces.Interface.Out"
      "put.SchedulerPolicyB4\202A1/qos/interfaces/"
      "interface/output/scheduler-policy\022}\n\005sta"
      "te\030\227\234\2464 \001(\0132@.openconfig.openconfig_qos."
      "Qos.Interfaces.Interface.Output.StateB)\202"
      "A&/qos/interfaces/interface/output/state"
      "\032\251\031\n\nClassifers\022\246\001\n\nclassifier\030\255\333\246\375\001 \003(\013"
      "2S.openconfig.openconfig_qos.Qos.Interfa"
      "ces.Interface.Output.Classifers.Classifi"
      "erKeyB9\202A6/qos/interfaces/interface/outp"
      "ut/classifers/classifier\032\360\024\n\nClassifier\022"
      "\254\001\n\006config\030\302\345\220B \001(\0132W.openconfig.opencon"
      "fig_qos.Qos.Interfaces.Interface.Output."
      "Classifers.Classifier.ConfigB@\202A=/qos/in"
      "terfaces/interface/output/classifers/cla"
      "ssifier/config\022\251\001\n\005state\030\377\274\2201 \001(\0132V.open"
      "config.openconfig_qos.Qos.Interfaces.Int"
      "erface.Output.Classifers.Classifier.Stat"
      "eB\?\202A</qos/interfaces/interface/output/c"
      "lassifers/classifier/state\022\252\001\n\005terms\030\231\325\370"
      "\373\001 \001(\0132V.openconfig.openconfig_qos.Qos.I"
      "nterfaces.Interface.Output.Classifers.Cl"
      "assifier.TermsB\?\202A</qos/interfaces/inter"
      "face/output/classifers/classifier/terms\032"
      "\220\003\n\006Config\022n\n\004name\030\260\333\322\202\001 \001(\0132\025.ywrapper."
      "StringValueBE\202AB/qos/interfaces/interfac"
      "e/output/classifers/classifier/config/na"
      "me\022\265\001\n\004type\030\241\261\327\266\001 \001(\0162\\.openconfig.openc"
      "onfig_qos.Qos.Interfaces.Interface.Outpu"
      "t.Classifers.Classifier.Config.TypeBE\202AB"
      "/qos/interfaces/interface/output/classif"
      "ers/classifier/config/type\"^\n\004Type\022\016\n\nTY"
      "PE_UNSET\020\000\022\026\n\tTYPE_IPV4\020\005\032\007\202A\004IPV4\022\026\n\tTY"
      "PE_IPV6\020\007\032\007\202A\004IPV6\022\026\n\tTYPE_MPLS\020\010\032\007\202A\004MP"
      "LS\032\213\003\n\005State\022l\n\004name\030\307\222\363\024 \001(\0132\025.ywrapper"
      ".StringValueBD\202AA/qos/interfaces/interfa"
      "ce/output/classifers/classifier/state/na"
      "me\022\263\001\n\004type\030\222\341\272\332\001 \001(\0162[.openconfig.openc"
      "onfig_qos.Qos.Interfaces.Interface.Outpu"
      "t.Classifers.Classifier.State.TypeBD\202AA/"
      "qos/interfaces/interface/output/classife"
      "rs/classifier/state/type\"^\n\004Type\022\016\n\nTYPE"
      "_UNSET\020\000\022\026\n\tTYPE_IPV4\020\005\032\007\202A\004IPV4\022\026\n\tTYPE"
      "_IPV6\020\007\032\007\202A\004IPV6\022\026\n\tTYPE_MPLS\020\010\032\007\202A\004MPLS"
      "\032\270\n\n\005Terms\022\265\001\n\004term\030\342\351\221\? \003(\0132^.openconfi"
      "g.openconfig_qos.Qos.Interfaces.Interfac"
      "e.Output.Classifers.Classifier.Terms.Ter"
      "mKeyBD\202AA/qos/interfaces/interface/outpu"
      "t/classifers/classifier/terms/term\032\252\007\n\004T"
      "erm\022\302\001\n\006config\030\203\313\226) \001(\0132b.openconfig.ope"
      "nconfig_qos.Qos.Interfaces.Interface.Out"
      "put.Classifers.Classifier.Terms.Term.Con"
      "figBK\202AH/qos/interfaces/interface/output"
      "/classifers/classifier/terms/term/config"
      "\022\277\001\n\005state\030\344\347\253y \001(\0132a.openconfig.opencon"
      "fig_qos.Qos.Interfaces.Interface.Output."
      "Classifers.Classifier.Terms.Term.StateBJ"
      "\202AG/qos/interfaces/interface/output/clas"
      "sifers/classifier/terms/term/state\032\177\n\006Co"
      "nfig\022u\n\002id\030\365\265\366\310\001 \001(\0132\025.ywrapper.StringVa"
      "lueBN\202AK/qos/interfaces/interface/output"
      "/classifers/classifier/terms/term/config"
      "/id\032\231\003\n\005State\022t\n\002id\030\324\277\276\214\001 \001(\0132\025.ywrapper"
      ".StringValueBM\202AJ/qos/interfaces/interfa"
      "ce/output/classifers/classifier/terms/te"
      "rm/state/id\022\212\001\n\016matched_octets\030\362\374\310\372\001 \001(\013"
      "2\023.ywrapper.UintValueBY\202AV/qos/interface"
      "s/interface/output/classifers/classifier"
      "/terms/term/state/matched-octets\022\214\001\n\017mat"
      "ched_packets\030\261\350\211\362\001 \001(\0132\023.ywrapper.UintVa"
      "lueBZ\202AW/qos/interfaces/interface/output"
      "/classifers/classifier/terms/term/state/"
      "matched-packets\032\311\001\n\007TermKey\022S\n\002id\030\001 \001(\tB"
      "G\202AD/qos/interfaces/interface/output/cla"
      "ssifers/classifier/terms/term/id\022i\n\004term"
      "\030\002 \001(\0132[.openconfig.openconfig_qos.Qos.I"
      "nterfaces.Interface.Output.Classifers.Cl"
      "assifier.Terms.Term\032\376\002\n\rClassifierKey\022\246\001"
      "\n\004type\030\001 \001(\0162X.openconfig.openconfig_qos"
      ".Qos.Interfaces.Interface.Output.Classif"
      "ers.ClassifierKey.TypeB>\202A;/qos/interfac"
      "es/interface/output/classifers/classifie"
      "r/type\022d\n\nclassifier\030\002 \001(\0132P.openconfig."
      "openconfig_qos.Qos.Interfaces.Interface."
      "Output.Classifers.Classifier\"^\n\004Type\022\016\n\n"
      "TYPE_UNSET\020\000\022\026\n\tTYPE_IPV4\020\005\032\007\202A\004IPV4\022\026\n\t"
      "TYPE_IPV6\020\007\032\007\202A\004IPV6\022\026\n\tTYPE_MPLS\020\010\032\007\202A\004"
      "MPLS\032\010\n\006Config\032\252\006\n\014InterfaceRef\022\234\001\n\006conf"
      "ig\030\266\350\317\304\001 \001(\0132N.openconfig.openconfig_qos"
      ".Qos.Interfaces.Interface.Output.Interfa"
      "ceRef.ConfigB8\202A5/qos/interfaces/interfa"
      "ce/output/interface-ref/config\022\230\001\n\005state"
      "\030\343\356\226l \001(\0132M.openconfig.openconfig_qos.Qo"
      "s.Interfaces.Interface.Output.InterfaceR"
      "ef.StateB7\202A4/qos/interfaces/interface/o"
      "utput/interface-ref/state\032\357\001\n\006Config\022p\n\t"
      "interface\030\242\347\304\247\001 \001(\0132\025.ywrapper.StringVal"
      "ueBB\202A\?/qos/interfaces/interface/output/"
      "interface-ref/config/interface\022s\n\014subint"
      "erface\030\376\357\357\010 \001(\0132\023.ywrapper.UintValueBE\202A"
      "B/qos/interfaces/interface/output/interf"
      "ace-ref/config/subinterface\032\355\001\n\005State\022o\n"
      "\tinterface\030\203\201\210\211\001 \001(\0132\025.ywrapper.StringVa"
      "lueBA\202A>/qos/interfaces/interface/output"
      "/interface-ref/state/interface\022s\n\014subint"
      "erface\030\321\377\321\307\001 \001(\0132\023.ywrapper.UintValueBD\202"
      "AA/qos/interfaces/interface/output/inter"
      "face-ref/state/subinterface\032\264\013\n\006Queues\022\217"
      "\001\n\005queue\030\344\202\206\227\001 \003(\0132J.openconfig.openconf"
      "ig_qos.Qos.Interfaces.Interface.Output.Q"
      "ueues.QueueKeyB0\202A-/qos/interfaces/inter"
      "face/output/queues/queue\032\355\010\n\005Queue\022\233\001\n\006c"
      "onfig\030\211\277\230\352\001 \001(\0132N.openconfig.openconfig_"
      "qos.Qos.Interfaces.Interface.Output.Queu"
      "es.Queue.ConfigB7\202A4/qos/interfaces/inte"
      "rface/output/queues/queue/config\022\227\001\n\005sta"
      "te\030\336\265\265: \001(\0132M.openconfig.openconfig_qos."
      "Qos.Interfaces.Interface.Output.Queues.Q"
      "ueue.StateB6\202A3/qos/interfaces/interface"
      "/output/queues/queue/state\032n\n\006Config\022d\n\004"
      "name\030\275\256\206G \001(\0132\025.ywrapper.StringValueB<\202A"
      "9/qos/interfaces/interface/output/queues"
      "/queue/config/name\032\273\005\n\005State\022t\n\ravg_queu"
      "e_len\030\233\212\237\355\001 \001(\0132\023.ywrapper.UintValueBD\202A"
      "A/qos/interfaces/interface/output/queues"
      "/queue/state/avg-queue-len\022r\n\014dropped_pk"
      "ts\030\242\341\337\252\001 \001(\0132\023.ywrapper.UintValueBC\202A@/q"
      "os/interfaces/interface/output/queues/qu"
      "eue/state/dropped-pkts\022t\n\rmax_queue_len\030"
      "\221\275\216\363\001 \001(\0132\023.ywrapper.UintValueBD\202AA/qos/"
      "interfaces/interface/output/queues/queue"
      "/state/max-queue-len\022d\n\004name\030\204\317\237\311\001 \001(\0132\025"
      ".ywrapper.StringValueB;\202A8/qos/interface"
      "s/interface/output/queues/queue/state/na"
      "me\022w\n\017transmit_octets\030\336\236\3747 \001(\0132\023.ywrappe"
      "r.UintValueBF\202AC/qos/interfaces/interfac"
      "e/output/queues/queue/state/transmit-oct"
      "ets\022s\n\rtransmit_pkts\030\306\233\312\t \001(\0132\023.ywrapper"
      ".UintValueBD\202AA/qos/interfaces/interface"
      "/output/queues/queue/state/transmit-pkts"
      "\032\247\001\n\010QueueKey\022C\n\004name\030\001 \001(\tB5\202A2/qos/int"
      "erfaces/interface/output/queues/queue/na"
      "me\022V\n\005queue\030\002 \001(\0132G.openconfig.openconfi"
      "g_qos.Qos.Interfaces.Interface.Output.Qu"
      "eues.Queue\032\222\023\n\017SchedulerPolicy\022\242\001\n\006confi"
      "g\030\237\340\363\361\001 \001(\0132Q.openconfig.openconfig_qos."
      "Qos.Interfaces.Interface.Output.Schedule"
      "rPolicy.ConfigB;\202A8/qos/interfaces/inter"
      "face/output/scheduler-policy/config\022\256\001\n\n"
      "schedulers\030\267\357\270\217\001 \001(\0132U.openconfig.openco"
      "nfig_qos.Qos.Interfaces.Interface.Output"
      ".SchedulerPolicy.SchedulersB\?\202A</qos/int"
      "erfaces/interface/output/scheduler-polic"
      "y/schedulers\022\237\001\n\005state\030\320\371\273\311\001 \001(\0132P.openc"
      "onfig.openconfig_qos.Qos.Interfaces.Inte"
      "rface.Output.SchedulerPolicy.StateB:\202A7/"
      "qos/interfaces/interface/output/schedule"
      "r-policy/state\032r\n\006Config\022h\n\004name\030\347\206\244\017 \001("
      "\0132\025.ywrapper.StringValueB@\202A=/qos/interf"
      "aces/interface/output/scheduler-policy/c"
      "onfig/name\032\240\r\n\nSchedulers\022\303\001\n\tscheduler\030"
      "\311\260\315c \003(\0132b.openconfig.openconfig_qos.Qos"
      ".Interfaces.Interface.Output.SchedulerPo"
      "licy.Schedulers.SchedulerKeyBI\202AF/qos/in"
      "terfaces/interface/output/scheduler-poli"
      "cy/schedulers/scheduler\032\340\t\n\tScheduler\022\311\001"
      "\n\005state\030\253\360\357\247\001 \001(\0132e.openconfig.openconfi"
      "g_qos.Qos.Interfaces.Interface.Output.Sc"
      "hedulerPolicy.Schedulers.Scheduler.State"
      "BO\202AL/qos/interfaces/interface/output/sc"
      "heduler-policy/schedulers/scheduler/stat"
      "e\032\206\010\n\005State\022\224\001\n\021conforming_octets\030\245\357\342Z \001"
      "(\0132\023.ywrapper.UintValueBa\202A^/qos/interfa"
      "ces/interface/output/scheduler-policy/sc"
      "hedulers/scheduler/state/conforming-octe"
      "ts\022\221\001\n\017conforming_pkts\030\261\344\303\267\001 \001(\0132\023.ywrap"
      "per.UintValueB_\202A\\/qos/interfaces/interf"
      "ace/output/scheduler-policy/schedulers/s"
      "cheduler/state/conforming-pkts\022\222\001\n\020excee"
      "ding_octets\030\217\360\372< \001(\0132\023.ywrapper.UintValu"
      "eB`\202A]/qos/interfaces/interface/output/s"
      "cheduler-policy/schedulers/scheduler/sta"
      "te/exceeding-octets\022\216\001\n\016exceeding_pkts\030\317"
      "\365\232S \001(\0132\023.ywrapper.UintValueB^\202A[/qos/in"
      "terfaces/interface/output/scheduler-poli"
      "cy/schedulers/scheduler/state/exceeding-"
      "pkts\022\203\001\n\010sequence\030\301\304\343\264\001 \001(\0132\023.ywrapper.U"
      "intValueBX\202AU/qos/interfaces/interface/o"
      "utput/scheduler-policy/schedulers/schedu"
      "ler/state/sequence\022\223\001\n\020violating_octets\030"
      "\216\201\261\237\001 \001(\0132\023.ywrapper.UintValueB`\202A]/qos/"
      "interfaces/interface/output/scheduler-po"
      "licy/schedulers/scheduler/state/violatin"
      "g-octets\022\217\001\n\016violating_pkts\030\266\253\272\265\001 \001(\0132\023."
      "ywrapper.UintValueB^\202A[/qos/interfaces/i"
      "nterface/output/scheduler-policy/schedul"
      "ers/scheduler/state/violating-pkts\032\350\001\n\014S"
      "chedulerKey\022d\n\010sequence\030\001 \001(\004BR\202AO/qos/i"
      "nterfaces/interface/output/scheduler-pol"
      "icy/schedulers/scheduler/sequence\022r\n\tsch"
      "eduler\030\002 \001(\0132_.openconfig.openconfig_qos"
      ".Qos.Interfaces.Interface.Output.Schedul"
      "erPolicy.Schedulers.Scheduler\032p\n\005State\022g"
      "\n\004name\030\372\347\332> \001(\0132\025.ywrapper.StringValueB\?"
      "\202A</qos/interfaces/interface/output/sche"
      "duler-policy/state/name\032\007\n\005State\032h\n\005Stat"
      "e\022_\n\014interface_id\030\211\266\360R \001(\0132\025.ywrapper.St"
      "ringValueB/\202A,/qos/interfaces/interface/"
      "state/interface-id\032\227\001\n\014InterfaceKey\022\?\n\014i"
      "nterface_id\030\001 \001(\tB)\202A&/qos/interfaces/in"
      "terface/interface-id\022F\n\tinterface\030\002 \001(\0132"
      "3.openconfig.openconfig_qos.Qos.Interfac"
      "es.Interface\032\210\016\n\006Queues\022V\n\005queue\030\373\267\3013 \003("
      "\0132..openconfig.openconfig_qos.Qos.Queues"
      ".QueueKeyB\024\202A\021/qos/queues/queue\032\264\014\n\005Queu"
      "e\022b\n\006config\030\254\222\355R \001(\01322.openconfig.openco"
      "nfig_qos.Qos.Queues.Queue.ConfigB\033\202A\030/qo"
      "s/queues/queue/config\022Y\n\003red\030\223\267\266\021 \001(\0132/."
      "openconfig.openconfig_qos.Qos.Queues.Que"
      "ue.RedB\030\202A\025/qos/queues/queue/red\022_\n\005stat"
      "e\030\245\212\362e \001(\01321.openconfig.openconfig_qos.Q"
      "os.Queues.Queue.StateB\032\202A\027/qos/queues/qu"
      "eue/state\022]\n\004wred\030\332\236\211\210\001 \001(\01320.openconfig"
      ".openconfig_qos.Qos.Queues.Queue.WredB\031\202"
      "A\026/qos/queues/queue/wred\032\304\001\n\006Config\022H\n\004n"
      "ame\030\356\330\270@ \001(\0132\025.ywrapper.StringValueB \202A\035"
      "/qos/queues/queue/config/name\022p\n\nqueue_t"
      "ype\030\331\317\350\247\001 \001(\01620.openconfig.enums.Opencon"
      "figQosTypesQOSQUEUETYPEB&\202A#/qos/queues/"
      "queue/config/queue-type\032\252\004\n\003Red\022k\n\006confi"
      "g\030\264\340\215\375\001 \001(\01326.openconfig.openconfig_qos."
      "Qos.Queues.Queue.Red.ConfigB\037\202A\034/qos/que"
      "ues/queue/red/config\022h\n\005state\030\315\356\236\323\001 \001(\0132"
      "5.openconfig.openconfig_qos.Qos.Queues.Q"
      "ueue.Red.StateB\036\202A\033/qos/queues/queue/red"
      "/state\032\245\001\n\006Config\022L\n\005maxth\030\243\300\211% \001(\0132\023.yw"
      "rapper.UintValueB%\202A\"/qos/queues/queue/r"
      "ed/config/maxth\022M\n\005minth\030\235\267\361\217\001 \001(\0132\023.ywr"
      "apper.UintValueB%\202A\"/qos/queues/queue/re"
      "d/config/minth\032\243\001\n\005State\022L\n\005maxth\030\376\276\227\356\001 "
      "\001(\0132\023.ywrapper.UintValueB$\202A!/qos/queues"
      "/queue/red/state/maxth\022L\n\005minth\030\330\372\216\227\001 \001("
      "\0132\023.ywrapper.UintValueB$\202A!/qos/queues/q"
      "ueue/red/state/minth\032\302\001\n\005State\022H\n\004name\030\341"
      "\232\316\330\001 \001(\0132\025.ywrapper.StringValueB\037\202A\034/qos"
      "/queues/queue/state/name\022o\n\nqueue_type\030\342"
      "\302\224\272\001 \001(\01620.openconfig.enums.OpenconfigQo"
      "sTypesQOSQUEUETYPEB%\202A\"/qos/queues/queue"
      "/state/queue-type\032\362\001\n\004Wred\022l\n\006config\030\313\236\332"
      "\n \001(\01327.openconfig.openconfig_qos.Qos.Qu"
      "eues.Queue.Wred.ConfigB \202A\035/qos/queues/q"
      "ueue/wred/config\022i\n\005state\030\214\233\230\016 \001(\01326.ope"
      "nconfig.openconfig_qos.Qos.Queues.Queue."
      "Wred.StateB\037\202A\034/qos/queues/queue/wred/st"
      "ate\032\010\n\006Config\032\007\n\005State\032o\n\010QueueKey\022\'\n\004na"
      "me\030\001 \001(\tB\031\202A\026/qos/queues/queue/name\022:\n\005q"
      "ueue\030\002 \001(\0132+.openconfig.openconfig_qos.Q"
      "os.Queues.Queue\032\222\270\001\n\021SchedulerPolicies\022\216"
      "\001\n\020scheduler_policy\030\222\375\274\311\001 \003(\0132C.openconf"
      "ig.openconfig_qos.Qos.SchedulerPolicies."
      "SchedulerPolicyKeyB+\202A(/qos/scheduler-po"
      "licies/scheduler-policy\032\267\265\001\n\017SchedulerPo"
      "licy\022\217\001\n\006config\030\323\203\250\372\001 \001(\0132G.openconfig.o"
      "penconfig_qos.Qos.SchedulerPolicies.Sche"
      "dulerPolicy.ConfigB2\202A//qos/scheduler-po"
      "licies/scheduler-policy/config\022\233\001\n\nsched"
      "ulers\030\303\376\217\310\001 \001(\0132K.openconfig.openconfig_"
      "qos.Qos.SchedulerPolicies.SchedulerPolic"
      "y.SchedulersB6\202A3/qos/scheduler-policies"
      "/scheduler-policy/schedulers\022\213\001\n\005state\030\264"
      "\351\266s \001(\0132F.openconfig.openconfig_qos.Qos."
      "SchedulerPolicies.SchedulerPolicy.StateB"
      "1\202A./qos/scheduler-policies/scheduler-po"
      "licy/state\032i\n\006Config\022_\n\004name\030\203\233\246\007 \001(\0132\025."
      "ywrapper.StringValueB7\202A4/qos/scheduler-"
      "policies/scheduler-policy/config/name\032\221\260"
      "\001\n\nSchedulers\022\261\001\n\tscheduler\030\225\210\362\353\001 \003(\0132X."
      "openconfig.openconfig_qos.Qos.SchedulerP"
      "olicies.SchedulerPolicy.Schedulers.Sched"
      "ulerKeyB@\202A=/qos/scheduler-policies/sche"
      "duler-policy/schedulers/scheduler\032\365\254\001\n\tS"
      "cheduler\022\270\001\n\006config\030\272\200\233p \001(\0132\\.openconfi"
      "g.openconfig_qos.Qos.SchedulerPolicies.S"
      "chedulerPolicy.Schedulers.Scheduler.Conf"
      "igBG\202AD/qos/scheduler-policies/scheduler"
      "-policy/schedulers/scheduler/config\022\270\001\n\006"
      "inputs\030\267\232\316H \001(\0132\\.openconfig.openconfig_"
      "qos.Qos.SchedulerPolicies.SchedulerPolic"
      "y.Schedulers.Scheduler.InputsBG\202AD/qos/s"
      "cheduler-policies/scheduler-policy/sched"
      "ulers/scheduler/inputs\022\332\001\n\022one_rate_two_"
      "color\030\264\252\276\357\001 \001(\0132e.openconfig.openconfig_"
      "qos.Qos.SchedulerPolicies.SchedulerPolic"
      "y.Schedulers.Scheduler.OneRateTwoColorBS"
      "\202AP/qos/scheduler-policies/scheduler-pol"
      "icy/schedulers/scheduler/one-rate-two-co"
      "lor\022\270\001\n\006output\030\237\246\205\026 \001(\0132\\.openconfig.ope"
      "nconfig_qos.Qos.SchedulerPolicies.Schedu"
      "lerPolicy.Schedulers.Scheduler.OutputBG\202"
      "AD/qos/scheduler-policies/scheduler-poli"
      "cy/schedulers/scheduler/output\022\265\001\n\005state"
      "\030\327\376\210q \001(\0132[.openconfig.openconfig_qos.Qo"
      "s.SchedulerPolicies.SchedulerPolicy.Sche"
      "dulers.Scheduler.StateBF\202AC/qos/schedule"
      "r-policies/scheduler-policy/schedulers/s"
      "cheduler/state\022\337\001\n\024two_rate_three_color\030"
      "\224\232\345\004 \001(\0132g.openconfig.openconfig_qos.Qos"
      ".SchedulerPolicies.SchedulerPolicy.Sched"
      "ulers.Scheduler.TwoRateThreeColorBU\202AR/q"
      "os/scheduler-policies/scheduler-policy/s"
      "chedulers/scheduler/two-rate-three-color"
      "\032\251\004\n\006Config\022\314\001\n\010priority\030\271\336\2517 \001(\0162e.open"
      "config.openconfig_qos.Qos.SchedulerPolic"
      "ies.SchedulerPolicy.Schedulers.Scheduler"
      ".Config.PriorityBP\202AM/qos/scheduler-poli"
      "cies/scheduler-policy/schedulers/schedul"
      "er/config/priority\022z\n\010sequence\030\326\246\251Z \001(\0132"
      "\023.ywrapper.UintValueBP\202AM/qos/scheduler-"
      "policies/scheduler-policy/schedulers/sch"
      "eduler/config/sequence\022\223\001\n\004type\030\251\350\210< \001(\016"
      "24.openconfig.enums.OpenconfigQosTypesQO"
      "SSCHEDULERTYPEBL\202AI/qos/scheduler-polici"
      "es/scheduler-policy/schedulers/scheduler"
      "/config/type\">\n\010Priority\022\022\n\016PRIORITY_UNS"
      "ET\020\000\022\036\n\017PRIORITY_STRICT\020\001\032\t\202A\006STRICT\032\226\023\n"
      "\006Inputs\022\306\001\n\005input\030\206\216\222k \003(\0132e.openconfig."
      "openconfig_qos.Qos.SchedulerPolicies.Sch"
      "edulerPolicy.Schedulers.Scheduler.Inputs"
      ".InputKeyBM\202AJ/qos/scheduler-policies/sc"
      "heduler-policy/schedulers/scheduler/inpu"
      "ts/input\032\344\017\n\005Input\022\323\001\n\006config\030\207\330\206\255\001 \001(\0132"
      "i.openconfig.openconfig_qos.Qos.Schedule"
      "rPolicies.SchedulerPolicy.Schedulers.Sch"
      "eduler.Inputs.Input.ConfigBT\202AQ/qos/sche"
      "duler-policies/scheduler-policy/schedule"
      "rs/scheduler/inputs/input/config\022\320\001\n\005sta"
      "te\030\370\206\205\223\001 \001(\0132h.openconfig.openconfig_qos"
      ".Qos.SchedulerPolicies.SchedulerPolicy.S"
      "chedulers.Scheduler.Inputs.Input.StateBS"
      "\202AP/qos/scheduler-policies/scheduler-pol"
      "icy/schedulers/scheduler/inputs/input/st"
      "ate\032\233\006\n\006Config\022~\n\002id\030\261\220\262\312\001 \001(\0132\025.ywrappe"
      "r.StringValueBW\202AT/qos/scheduler-policie"
      "s/scheduler-policy/schedulers/scheduler/"
      "inputs/input/config/id\022\354\001\n\ninput_type\030\267\354"
      "\213\232\001 \001(\0162s.openconfig.openconfig_qos.Qos."
      "SchedulerPolicies.SchedulerPolicy.Schedu"
      "lers.Scheduler.Inputs.Input.Config.Input"
      "TypeB_\202A\\/qos/scheduler-policies/schedul"
      "er-policy/schedulers/scheduler/inputs/in"
      "put/config/input-type\022\204\001\n\005queue\030\223\265\213\323\001 \001("
      "\0132\025.ywrapper.StringValueBZ\202AW/qos/schedu"
      "ler-policies/scheduler-policy/schedulers"
      "/scheduler/inputs/input/config/queue\022\204\001\n"
      "\006weight\030\242\242\367\274\001 \001(\0132\023.ywrapper.UintValueB["
      "\202AX/qos/scheduler-policies/scheduler-pol"
      "icy/schedulers/scheduler/inputs/input/co"
      "nfig/weight\"\223\001\n\tInputType\022\023\n\017INPUTTYPE_U"
      "NSET\020\000\022\035\n\017INPUTTYPE_QUEUE\020\001\032\010\202A\005QUEUE\022\'\n"
      "\024INPUTTYPE_IN_PROFILE\020\002\032\r\202A\nIN_PROFILE\022)"
      "\n\025INPUTTYPE_OUT_PROFILE\020\003\032\016\202A\013OUT_PROFIL"
      "E\032\223\006\n\005State\022}\n\002id\030\240\372\246\231\001 \001(\0132\025.ywrapper.S"
      "tringValueBV\202AS/qos/scheduler-policies/s"
      "cheduler-policy/schedulers/scheduler/inp"
      "uts/input/state/id\022\351\001\n\ninput_type\030\306\350\321y \001"
      "(\0162r.openconfig.openconfig_qos.Qos.Sched"
      "ulerPolicies.SchedulerPolicy.Schedulers."
      "Scheduler.Inputs.Input.State.InputTypeB^"
      "\202A[/qos/scheduler-policies/scheduler-pol"
      "icy/schedulers/scheduler/inputs/input/st"
      "ate/input-type\022\203\001\n\005queue\030\350\323\253\210\001 \001(\0132\025.ywr"
      "apper.StringValueBY\202AV/qos/scheduler-pol"
      "icies/scheduler-policy/schedulers/schedu"
      "ler/inputs/input/state/queue\022\202\001\n\006weight\030"
      "\203\373\316C \001(\0132\023.ywrapper.UintValueBZ\202AW/qos/s"
      "cheduler-policies/scheduler-policy/sched"
      "ulers/scheduler/inputs/input/state/weigh"
      "t\"\223\001\n\tInputType\022\023\n\017INPUTTYPE_UNSET\020\000\022\035\n\017"
      "INPUTTYPE_QUEUE\020\001\032\010\202A\005QUEUE\022\'\n\024INPUTTYPE"
      "_IN_PROFILE\020\002\032\r\202A\nIN_PROFILE\022)\n\025INPUTTYP"
      "E_OUT_PROFILE\020\003\032\016\202A\013OUT_PROFILE\032\333\001\n\010Inpu"
      "tKey\022\\\n\002id\030\001 \001(\tBP\202AM/qos/scheduler-poli"
      "cies/scheduler-policy/schedulers/schedul"
      "er/inputs/input/id\022q\n\005input\030\002 \001(\0132b.open"
      "config.openconfig_qos.Qos.SchedulerPolic"
      "ies.SchedulerPolicy.Schedulers.Scheduler"
      ".Inputs.Input\032\2455\n\017OneRateTwoColor\022\334\001\n\006co"
      "nfig\030\271\256\343\341\001 \001(\0132l.openconfig.openconfig_q"
      "os.Qos.SchedulerPolicies.SchedulerPolicy"
      ".Schedulers.Scheduler.OneRateTwoColor.Co"
      "nfigBZ\202AW/qos/scheduler-policies/schedul"
      "er-policy/schedulers/scheduler/one-rate-"
      "two-color/config\022\362\001\n\016conform_action\030\316\225\363\r"
      " \001(\0132s.openconfig.openconfig_qos.Qos.Sch"
      "edulerPolicies.SchedulerPolicy.Scheduler"
      "s.Scheduler.OneRateTwoColor.ConformActio"
      "nBb\202A_/qos/scheduler-policies/scheduler-"
      "policy/schedulers/scheduler/one-rate-two"
      "-color/conform-action\022\360\001\n\rexceed_action\030"
      "\262\211\344\215\001 \001(\0132r.openconfig.openconfig_qos.Qo"
      "s.SchedulerPolicies.SchedulerPolicy.Sche"
      "dulers.Scheduler.OneRateTwoColor.ExceedA"
      "ctionBa\202A^/qos/scheduler-policies/schedu"
      "ler-policy/schedulers/scheduler/one-rate"
      "-two-color/exceed-action\022\331\001\n\005state\030\216\331\322\320\001"
      " \001(\0132k.openconfig.openconfig_qos.Qos.Sch"
      "edulerPolicies.SchedulerPolicy.Scheduler"
      "s.Scheduler.OneRateTwoColor.StateBY\202AV/q"
      "os/scheduler-policies/scheduler-policy/s"
      "chedulers/scheduler/one-rate-two-color/s"
      "tate\032\205\n\n\006Config\022\201\001\n\002bc\030\331\335\342/ \001(\0132\023.ywrapp"
      "er.UintValueB]\202AZ/qos/scheduler-policies"
      "/scheduler-policy/schedulers/scheduler/o"
      "ne-rate-two-color/config/bc\022\204\001\n\003cir\030\336\221\365\353"
      "\001 \001(\0132\023.ywrapper.UintValueB^\202A[/qos/sche"
      "duler-policies/scheduler-policy/schedule"
      "rs/scheduler/one-rate-two-color/config/c"
      "ir\022\214\001\n\007cir_pct\030\200\340\240\226\001 \001(\0132\023.ywrapper.Uint"
      "ValueBb\202A_/qos/scheduler-policies/schedu"
      "ler-policy/schedulers/scheduler/one-rate"
      "-two-color/config/cir-pct\022\237\001\n\021cir_pct_re"
      "maining\030\313\235\326b \001(\0132\023.ywrapper.UintValueBl\202"
      "Ai/qos/scheduler-policies/scheduler-poli"
      "cy/schedulers/scheduler/one-rate-two-col"
      "or/config/cir-pct-remaining\022\250\001\n\025max_queu"
      "e_depth_bytes\030\236\361\220\205\001 \001(\0132\023.ywrapper.UintV"
      "alueBp\202Am/qos/scheduler-policies/schedul"
      "er-policy/schedulers/scheduler/one-rate-"
      "two-color/config/max-queue-depth-bytes\022\253"
      "\001\n\027max_queue_depth_packets\030\330\271\236\022 \001(\0132\023.yw"
      "rapper.UintValueBr\202Ao/qos/scheduler-poli"
      "cies/scheduler-policy/schedulers/schedul"
      "er/one-rate-two-color/config/max-queue-d"
      "epth-packets\022\254\001\n\027max_queue_depth_percent"
      "\030\354\257\317\336\001 \001(\0132\023.ywrapper.UintValueBr\202Ao/qos"
      "/scheduler-policies/scheduler-policy/sch"
      "edulers/scheduler/one-rate-two-color/con"
      "fig/max-queue-depth-percent\022\266\001\n\020queuing_"
      "behavior\030\337\256\247% \001(\0162,.openconfig.enums.Ope"
      "nconfigQosQueueBehaviorBk\202Ah/qos/schedul"
      "er-policies/scheduler-policy/schedulers/"
      "scheduler/one-rate-two-color/config/queu"
      "ing-behavior\032\343\013\n\rConformAction\022\370\001\n\006confi"
      "g\030\377\240\300} \001(\0132z.openconfig.openconfig_qos.Q"
      "os.SchedulerPolicies.SchedulerPolicy.Sch"
      "edulers.Scheduler.OneRateTwoColor.Confor"
      "mAction.ConfigBi\202Af/qos/scheduler-polici"
      "es/scheduler-policy/schedulers/scheduler"
      "/one-rate-two-color/conform-action/confi"
      "g\022\366\001\n\005state\030\260\325\337\350\001 \001(\0132y.openconfig.openc"
      "onfig_qos.Qos.SchedulerPolicies.Schedule"
      "rPolicy.Schedulers.Scheduler.OneRateTwoC"
      "olor.ConformAction.StateBh\202Ae/qos/schedu"
      "ler-policies/scheduler-policy/schedulers"
      "/scheduler/one-rate-two-color/conform-ac"
      "tion/state\032\360\003\n\006Config\022\237\001\n\tset_dot1p\030\217\202\366\245"
      "\001 \001(\0132\023.ywrapper.UintValueBs\202Ap/qos/sche"
      "duler-policies/scheduler-policy/schedule"
      "rs/scheduler/one-rate-two-color/conform-"
      "action/config/set-dot1p\022\235\001\n\010set_dscp\030\255\361\325"
      "\202\001 \001(\0132\023.ywrapper.UintValueBr\202Ao/qos/sch"
      "eduler-policies/scheduler-policy/schedul"
      "ers/scheduler/one-rate-two-color/conform"
      "-action/config/set-dscp\022\243\001\n\013set_mpls_tc\030"
      "\263\311\215\302\001 \001(\0132\023.ywrapper.UintValueBu\202Ar/qos/"
      "scheduler-policies/scheduler-policy/sche"
      "dulers/scheduler/one-rate-two-color/conf"
      "orm-action/config/set-mpls-tc\032\352\003\n\005State\022"
      "\236\001\n\tset_dot1p\030\370\212\327\265\001 \001(\0132\023.ywrapper.UintV"
      "alueBr\202Ao/qos/scheduler-policies/schedul"
      "er-policy/schedulers/scheduler/one-rate-"
      "two-color/conform-action/state/set-dot1p"
      "\022\233\001\n\010set_dscp\030\340\253\375O \001(\0132\023.ywrapper.UintVa"
      "lueBq\202An/qos/scheduler-policies/schedule"
      "r-policy/schedulers/scheduler/one-rate-t"
      "wo-color/conform-action/state/set-dscp\022\241"
      "\001\n\013set_mpls_tc\030\254\360\364a \001(\0132\023.ywrapper.UintV"
      "alueBt\202Aq/qos/scheduler-policies/schedul"
      "er-policy/schedulers/scheduler/one-rate-"
      "two-color/conform-action/state/set-mpls-"
      "tc\032\202\016\n\014ExceedAction\022\367\001\n\006config\030\363\361\202\237\001 \001(\013"
      "2y.openconfig.openconfig_qos.Qos.Schedul"
      "erPolicies.SchedulerPolicy.Schedulers.Sc"
      "heduler.OneRateTwoColor.ExceedAction.Con"
      "figBh\202Ae/qos/scheduler-policies/schedule"
      "r-policy/schedulers/scheduler/one-rate-t"
      "wo-color/exceed-action/config\022\364\001\n\005state\030"
      "\324\366\320\254\001 \001(\0132x.openconfig.openconfig_qos.Qo"
      "s.SchedulerPolicies.SchedulerPolicy.Sche"
      "dulers.Scheduler.OneRateTwoColor.ExceedA"
      "ction.StateBg\202Ad/qos/scheduler-policies/"
      "scheduler-policy/schedulers/scheduler/on"
      "e-rate-two-color/exceed-action/state\032\201\005\n"
      "\006Config\022\223\001\n\004drop\030\335\232\325> \001(\0132\023.ywrapper.Boo"
      "lValueBm\202Aj/qos/scheduler-policies/sched"
      "uler-policy/schedulers/scheduler/one-rat"
      "e-two-color/exceed-action/config/drop\022\236\001"
      "\n\tset_dot1p\030\273\363\362\315\001 \001(\0132\023.ywrapper.UintVal"
      "ueBr\202Ao/qos/scheduler-policies/scheduler"
      "-policy/schedulers/scheduler/one-rate-tw"
      "o-color/exceed-action/config/set-dot1p\022\233"
      "\001\n\010set_dscp\030\221\330\321! \001(\0132\023.ywrapper.UintValu"
      "eBq\202An/qos/scheduler-policies/scheduler-"
      "policy/schedulers/scheduler/one-rate-two"
      "-color/exceed-action/config/set-dscp\022\241\001\n"
      "\013set_mpls_tc\030\327\340\340J \001(\0132\023.ywrapper.UintVal"
      "ueBt\202Aq/qos/scheduler-policies/scheduler"
      "-policy/schedulers/scheduler/one-rate-tw"
      "o-color/exceed-action/config/set-mpls-tc"
      "\032\374\004\n\005State\022\222\001\n\004drop\030\340\317\300P \001(\0132\023.ywrapper."
      "BoolValueBl\202Ai/qos/scheduler-policies/sc"
      "heduler-policy/schedulers/scheduler/one-"
      "rate-two-color/exceed-action/state/drop\022"
      "\234\001\n\tset_dot1p\030\224\315\224\? \001(\0132\023.ywrapper.UintVa"
      "lueBq\202An/qos/scheduler-policies/schedule"
      "r-policy/schedulers/scheduler/one-rate-t"
      "wo-color/exceed-action/state/set-dot1p\022\233"
      "\001\n\010set_dscp\030\304\264\306\356\001 \001(\0132\023.ywrapper.UintVal"
      "ueBp\202Am/qos/scheduler-policies/scheduler"
      "-policy/schedulers/scheduler/one-rate-tw"
      "o-color/exceed-action/state/set-dscp\022\240\001\n"
      "\013set_mpls_tc\030\240\312\361, \001(\0132\023.ywrapper.UintVal"
      "ueBs\202Ap/qos/scheduler-policies/scheduler"
      "-policy/schedulers/scheduler/one-rate-tw"
      "o-color/exceed-action/state/set-mpls-tc\032"
      "\373\t\n\005State\022\200\001\n\002bc\030\204\337\263$ \001(\0132\023.ywrapper.Uin"
      "tValueB\\\202AY/qos/scheduler-policies/sched"
      "uler-policy/schedulers/scheduler/one-rat"
      "e-two-color/state/bc\022\203\001\n\003cir\030\365\224\354\236\001 \001(\0132\023"
      ".ywrapper.UintValueB]\202AZ/qos/scheduler-p"
      "olicies/scheduler-policy/schedulers/sche"
      "duler/one-rate-two-color/state/cir\022\212\001\n\007c"
      "ir_pct\030\347\247\2151 \001(\0132\023.ywrapper.UintValueBa\202A"
      "^/qos/scheduler-policies/scheduler-polic"
      "y/schedulers/scheduler/one-rate-two-colo"
      "r/state/cir-pct\022\237\001\n\021cir_pct_remaining\030\234\365"
      "\354\210\001 \001(\0132\023.ywrapper.UintValueBk\202Ah/qos/sc"
      "heduler-policies/scheduler-policy/schedu"
      "lers/scheduler/one-rate-two-color/state/"
      "cir-pct-remaining\022\246\001\n\025max_queue_depth_by"
      "tes\030\215\223\3228 \001(\0132\023.ywrapper.UintValueBo\202Al/q"
      "os/scheduler-policies/scheduler-policy/s"
      "chedulers/scheduler/one-rate-two-color/s"
      "tate/max-queue-depth-bytes\022\253\001\n\027max_queue"
      "_depth_packets\030\237\221\375\241\001 \001(\0132\023.ywrapper.Uint"
      "ValueBq\202An/qos/scheduler-policies/schedu"
      "ler-policy/schedulers/scheduler/one-rate"
      "-two-color/state/max-queue-depth-packets"
      "\022\252\001\n\027max_queue_depth_percent\030\217\357\245/ \001(\0132\023."
      "ywrapper.UintValueBq\202An/qos/scheduler-po"
      "licies/scheduler-policy/schedulers/sched"
      "uler/one-rate-two-color/state/max-queue-"
      "depth-percent\022\265\001\n\020queuing_behavior\030\202\266\326k "
      "\001(\0162,.openconfig.enums.OpenconfigQosQueu"
      "eBehaviorBj\202Ag/qos/scheduler-policies/sc"
      "heduler-policy/schedulers/scheduler/one-"
      "rate-two-color/state/queuing-behavior\032\206\016"
      "\n\006Output\022\306\001\n\006config\030\340\265\312d \001(\0132c.openconfi"
      "g.openconfig_qos.Qos.SchedulerPolicies.S"
      "chedulerPolicy.Schedulers.Scheduler.Outp"
      "ut.ConfigBN\202AK/qos/scheduler-policies/sc"
      "heduler-policy/schedulers/scheduler/outp"
      "ut/config\022\304\001\n\005state\030\331\276\245\264\001 \001(\0132b.openconf"
      "ig.openconfig_qos.Qos.SchedulerPolicies."
      "SchedulerPolicy.Schedulers.Scheduler.Out"
      "put.StateBM\202AJ/qos/scheduler-policies/sc"
      "heduler-policy/schedulers/scheduler/outp"
      "ut/state\032\266\005\n\006Config\022\221\001\n\017child_scheduler\030"
      "\207\261\2660 \001(\0132\025.ywrapper.StringValueB^\202A[/qos"
      "/scheduler-policies/scheduler-policy/sch"
      "edulers/scheduler/output/config/child-sc"
      "heduler\022\224\001\n\020output_fwd_group\030\266\301\260\207\001 \001(\0132\025"
      ".ywrapper.StringValueB_\202A\\/qos/scheduler"
      "-policies/scheduler-policy/schedulers/sc"
      "heduler/output/config/output-fwd-group\022\343"
      "\001\n\013output_type\030\211\235\313\347\001 \001(\0162n.openconfig.op"
      "enconfig_qos.Qos.SchedulerPolicies.Sched"
      "ulerPolicy.Schedulers.Scheduler.Output.C"
      "onfig.OutputTypeBZ\202AW/qos/scheduler-poli"
      "cies/scheduler-policy/schedulers/schedul"
      "er/output/config/output-type\"\232\001\n\nOutputT"
      "ype\022\024\n\020OUTPUTTYPE_UNSET\020\000\022&\n\024OUTPUTTYPE_"
      "SCHEDULER\020\001\032\014\202A\tSCHEDULER\022&\n\024OUTPUTTYPE_"
      "FWD_GROUP\020\002\032\014\202A\tFWD_GROUP\022&\n\024OUTPUTTYPE_"
      "INTERFACE\020\003\032\014\202A\tINTERFACE\032\262\005\n\005State\022\221\001\n\017"
      "child_scheduler\030\236\205\267\353\001 \001(\0132\025.ywrapper.Str"
      "ingValueB]\202AZ/qos/scheduler-policies/sch"
      "eduler-policy/schedulers/scheduler/outpu"
      "t/state/child-scheduler\022\223\001\n\020output_fwd_g"
      "roup\030\311\310\320\342\001 \001(\0132\025.ywrapper.StringValueB^\202"
      "A[/qos/scheduler-policies/scheduler-poli"
      "cy/schedulers/scheduler/output/state/out"
      "put-fwd-group\022\341\001\n\013output_type\030\264\217\335\231\001 \001(\0162"
      "m.openconfig.openconfig_qos.Qos.Schedule"
      "rPolicies.SchedulerPolicy.Schedulers.Sch"
      "eduler.Output.State.OutputTypeBY\202AV/qos/"
      "scheduler-policies/scheduler-policy/sche"
      "dulers/scheduler/output/state/output-typ"
      "e\"\232\001\n\nOutputType\022\024\n\020OUTPUTTYPE_UNSET\020\000\022&"
      "\n\024OUTPUTTYPE_SCHEDULER\020\001\032\014\202A\tSCHEDULER\022&"
      "\n\024OUTPUTTYPE_FWD_GROUP\020\002\032\014\202A\tFWD_GROUP\022&"
      "\n\024OUTPUTTYPE_INTERFACE\020\003\032\014\202A\tINTERFACE\032\245"
      "\004\n\005State\022\312\001\n\010priority\030\206\266\245Y \001(\0162d.opencon"
      "fig.openconfig_qos.Qos.SchedulerPolicies"
      ".SchedulerPolicy.Schedulers.Scheduler.St"
      "ate.PriorityBO\202AL/qos/scheduler-policies"
      "/scheduler-policy/schedulers/scheduler/s"
      "tate/priority\022z\n\010sequence\030\205\323\335\205\001 \001(\0132\023.yw"
      "rapper.UintValueBO\202AL/qos/scheduler-poli"
      "cies/scheduler-policy/schedulers/schedul"
      "er/state/sequence\022\222\001\n\004type\030\272\351\245\006 \001(\01624.op"
      "enconfig.enums.OpenconfigQosTypesQOSSCHE"
      "DULERTYPEBK\202AH/qos/scheduler-policies/sc"
      "heduler-policy/schedulers/scheduler/stat"
      "e/type\">\n\010Priority\022\022\n\016PRIORITY_UNSET\020\000\022\036"
      "\n\017PRIORITY_STRICT\020\001\032\t\202A\006STRICT\032\241D\n\021TwoRa"
      "teThreeColor\022\340\001\n\006config\030\231\265\244\373\001 \001(\0132n.open"
      "config.openconfig_qos.Qos.SchedulerPolic"
      "ies.SchedulerPolicy.Schedulers.Scheduler"
      ".TwoRateThreeColor.ConfigB\\\202AY/qos/sched"
      "uler-policies/scheduler-policy/scheduler"
      "s/scheduler/two-rate-three-color/config\022"
      "\367\001\n\016conform_action\030\256\223\223\346\001 \001(\0132u.openconfi"
      "g.openconfig_qos.Qos.SchedulerPolicies.S"
      "chedulerPolicy.Schedulers.Scheduler.TwoR"
      "ateThreeColor.ConformActionBd\202Aa/qos/sch"
      "eduler-policies/scheduler-policy/schedul"
      "ers/scheduler/two-rate-three-color/confo"
      "rm-action\022\364\001\n\rexceed_action\030\222\316\265\325\001 \001(\0132t."
      "openconfig.openconfig_qos.Qos.SchedulerP"
      "olicies.SchedulerPolicy.Schedulers.Sched"
      "uler.TwoRateThreeColor.ExceedActionBc\202A`"
      "/qos/scheduler-policies/scheduler-policy"
      "/schedulers/scheduler/two-rate-three-col"
      "or/exceed-action\022\334\001\n\005state\030\356\276\220~ \001(\0132m.op"
      "enconfig.openconfig_qos.Qos.SchedulerPol"
      "icies.SchedulerPolicy.Schedulers.Schedul"
      "er.TwoRateThreeColor.StateB[\202AX/qos/sche"
      "duler-policies/scheduler-policy/schedule"
      "rs/scheduler/two-rate-three-color/state\022"
      "\366\001\n\016violate_action\030\276\226\3324 \001(\0132u.openconfig"
      ".openconfig_qos.Qos.SchedulerPolicies.Sc"
      "hedulerPolicy.Schedulers.Scheduler.TwoRa"
      "teThreeColor.ViolateActionBd\202Aa/qos/sche"
      "duler-policies/scheduler-policy/schedule"
      "rs/scheduler/two-rate-three-color/violat"
      "e-action\032\220\t\n\006Config\022\204\001\n\002bc\030\271\250\341\350\001 \001(\0132\023.y"
      "wrapper.UintValueB_\202A\\/qos/scheduler-pol"
      "icies/scheduler-policy/schedulers/schedu"
      "ler/two-rate-three-color/config/bc\022\204\001\n\002b"
      "e\030\277\250\341\350\001 \001(\0132\023.ywrapper.UintValueB_\202A\\/qo"
      "s/scheduler-policies/scheduler-policy/sc"
      "hedulers/scheduler/two-rate-three-color/"
      "config/be\022\205\001\n\003cir\030\276\275\272\" \001(\0132\023.ywrapper.Ui"
      "ntValueB`\202A]/qos/scheduler-policies/sche"
      "duler-policy/schedulers/scheduler/two-ra"
      "te-three-color/config/cir\022\215\001\n\007cir_pct\030\340\202"
      "\345F \001(\0132\023.ywrapper.UintValueBd\202Aa/qos/sch"
      "eduler-policies/scheduler-policy/schedul"
      "ers/scheduler/two-rate-three-color/confi"
      "g/cir-pct\022\242\001\n\021cir_pct_remaining\030\253\300\265\313\001 \001("
      "\0132\023.ywrapper.UintValueBn\202Ak/qos/schedule"
      "r-policies/scheduler-policy/schedulers/s"
      "cheduler/two-rate-three-color/config/cir"
      "-pct-remaining\022\205\001\n\003pir\030\345\247\203! \001(\0132\023.ywrapp"
      "er.UintValueB`\202A]/qos/scheduler-policies"
      "/scheduler-policy/schedulers/scheduler/t"
      "wo-rate-three-color/config/pir\022\215\001\n\007pir_p"
      "ct\030\227\376\2427 \001(\0132\023.ywrapper.UintValueBd\202Aa/qo"
      "s/scheduler-policies/scheduler-policy/sc"
      "hedulers/scheduler/two-rate-three-color/"
      "config/pir-pct\022\242\001\n\021pir_pct_remaining\030\354\345\311"
      "\366\001 \001(\0132\023.ywrapper.UintValueBn\202Ak/qos/sch"
      "eduler-policies/scheduler-policy/schedul"
      "ers/scheduler/two-rate-three-color/confi"
      "g/pir-pct-remaining\032\367\013\n\rConformAction\022\375\001"
      "\n\006config\030\337\215\365\230\001 \001(\0132|.openconfig.openconf"
      "ig_qos.Qos.SchedulerPolicies.SchedulerPo"
      "licy.Schedulers.Scheduler.TwoRateThreeCo"
      "lor.ConformAction.ConfigBk\202Ah/qos/schedu"
      "ler-policies/scheduler-policy/schedulers"
      "/scheduler/two-rate-three-color/conform-"
      "action/config\022\371\001\n\005state\030\220\217\267\027 \001(\0132{.openc"
      "onfig.openconfig_qos.Qos.SchedulerPolici"
      "es.SchedulerPolicy.Schedulers.Scheduler."
      "TwoRateThreeColor.ConformAction.StateBj\202"
      "Ag/qos/scheduler-policies/scheduler-poli"
      "cy/schedulers/scheduler/two-rate-three-c"
      "olor/conform-action/state\032\365\003\n\006Config\022\240\001\n"
      "\tset_dot1p\030\357\331\3762 \001(\0132\023.ywrapper.UintValue"
      "Bu\202Ar/qos/scheduler-policies/scheduler-p"
      "olicy/schedulers/scheduler/two-rate-thre"
      "e-color/conform-action/config/set-dot1p\022"
      "\237\001\n\010set_dscp\030\215\252\350\303\001 \001(\0132\023.ywrapper.UintVa"
      "lueBt\202Aq/qos/scheduler-policies/schedule"
      "r-policy/schedulers/scheduler/two-rate-t"
      "hree-color/conform-action/config/set-dsc"
      "p\022\245\001\n\013set_mpls_tc\030\223\253\325\217\001 \001(\0132\023.ywrapper.U"
      "intValueBw\202At/qos/scheduler-policies/sch"
      "eduler-policy/schedulers/scheduler/two-r"
      "ate-three-color/conform-action/config/se"
      "t-mpls-tc\032\361\003\n\005State\022\240\001\n\tset_dot1p\030\330\376\241\211\001 "
      "\001(\0132\023.ywrapper.UintValueBt\202Aq/qos/schedu"
      "ler-policies/scheduler-policy/schedulers"
      "/scheduler/two-rate-three-color/conform-"
      "action/state/set-dot1p\022\236\001\n\010set_dscp\030\300\347\223\223"
      "\001 \001(\0132\023.ywrapper.UintValueBs\202Ap/qos/sche"
      "duler-policies/scheduler-policy/schedule"
      "rs/scheduler/two-rate-three-color/confor"
      "m-action/state/set-dscp\022\243\001\n\013set_mpls_tc\030"
      "\214\311\351e \001(\0132\023.ywrapper.UintValueBv\202As/qos/s"
      "cheduler-policies/scheduler-policy/sched"
      "ulers/scheduler/two-rate-three-color/con"
      "form-action/state/set-mpls-tc\032\235\016\n\014Exceed"
      "Action\022\373\001\n\006config\030\323\356\246\370\001 \001(\0132{.openconfig"
      ".openconfig_qos.Qos.SchedulerPolicies.Sc"
      "hedulerPolicy.Schedulers.Scheduler.TwoRa"
      "teThreeColor.ExceedAction.ConfigBj\202Ag/qo"
      "s/scheduler-policies/scheduler-policy/sc"
      "hedulers/scheduler/two-rate-three-color/"
      "exceed-action/config\022\367\001\n\005state\030\264\262\332m \001(\0132"
      "z.openconfig.openconfig_qos.Qos.Schedule"
      "rPolicies.SchedulerPolicy.Schedulers.Sch"
      "eduler.TwoRateThreeColor.ExceedAction.St"
      "ateBi\202Af/qos/scheduler-policies/schedule"
      "r-policy/schedulers/scheduler/two-rate-t"
      "hree-color/exceed-action/state\032\213\005\n\006Confi"
      "g\022\226\001\n\004drop\030\275\264\200\217\001 \001(\0132\023.ywrapper.BoolValu"
      "eBo\202Al/qos/scheduler-policies/scheduler-"
      "policy/schedulers/scheduler/two-rate-thr"
      "ee-color/exceed-action/config/drop\022\237\001\n\ts"
      "et_dot1p\030\233\335\270D \001(\0132\023.ywrapper.UintValueBt"
      "\202Aq/qos/scheduler-policies/scheduler-pol"
      "icy/schedulers/scheduler/two-rate-three-"
      "color/exceed-action/config/set-dot1p\022\236\001\n"
      "\010set_dscp\030\361\256\213\375\001 \001(\0132\023.ywrapper.UintValue"
      "Bs\202Ap/qos/scheduler-policies/scheduler-p"
      "olicy/schedulers/scheduler/two-rate-thre"
      "e-color/exceed-action/config/set-dscp\022\244\001"
      "\n\013set_mpls_tc\030\267\337\302\317\001 \001(\0132\023.ywrapper.UintV"
      "alueBv\202As/qos/scheduler-policies/schedul"
      "er-policy/schedulers/scheduler/two-rate-"
      "three-color/exceed-action/config/set-mpl"
      "s-tc\032\206\005\n\005State\022\224\001\n\004drop\030\300\337\341Z \001(\0132\023.ywrap"
      "per.BoolValueBn\202Ak/qos/scheduler-policie"
      "s/scheduler-policy/schedulers/scheduler/"
      "two-rate-three-color/exceed-action/state"
      "/drop\022\237\001\n\tset_dot1p\030\364\267\260\372\001 \001(\0132\023.ywrapper"
      ".UintValueBs\202Ap/qos/scheduler-policies/s"
      "cheduler-policy/schedulers/scheduler/two"
      "-rate-three-color/exceed-action/state/se"
      "t-dot1p\022\235\001\n\010set_dscp\030\244\355\210\235\001 \001(\0132\023.ywrappe"
      "r.UintValueBr\202Ao/qos/scheduler-policies/"
      "scheduler-policy/schedulers/scheduler/tw"
      "o-rate-three-color/exceed-action/state/s"
      "et-dscp\022\243\001\n\013set_mpls_tc\030\200\356\273\225\001 \001(\0132\023.ywra"
      "pper.UintValueBu\202Ar/qos/scheduler-polici"
      "es/scheduler-policy/schedulers/scheduler"
      "/two-rate-three-color/exceed-action/stat"
      "e/set-mpls-tc\032\207\t\n\005State\022\202\001\n\002bc\030\344\361\234\007 \001(\0132"
      "\023.ywrapper.UintValueB^\202A[/qos/scheduler-"
      "policies/scheduler-policy/schedulers/sch"
      "eduler/two-rate-three-color/state/bc\022\202\001\n"
      "\002be\030\342\361\234\007 \001(\0132\023.ywrapper.UintValueB^\202A[/q"
      "os/scheduler-policies/scheduler-policy/s"
      "chedulers/scheduler/two-rate-three-color"
      "/state/be\022\205\001\n\003cir\030\325\362\353\257\001 \001(\0132\023.ywrapper.U"
      "intValueB_\202A\\/qos/scheduler-policies/sch"
      "eduler-policy/schedulers/scheduler/two-r"
      "ate-three-color/state/cir\022\214\001\n\007cir_pct\030\307\356"
      "\352l \001(\0132\023.ywrapper.UintValueBc\202A`/qos/sch"
      "eduler-policies/scheduler-policy/schedul"
      "ers/scheduler/two-rate-three-color/state"
      "/cir-pct\022\241\001\n\021cir_pct_remaining\030\374\254\330\203\001 \001(\013"
      "2\023.ywrapper.UintValueBm\202Aj/qos/scheduler"
      "-policies/scheduler-policy/schedulers/sc"
      "heduler/two-rate-three-color/state/cir-p"
      "ct-remaining\022\205\001\n\003pir\030\216\312\352\256\001 \001(\0132\023.ywrappe"
      "r.UintValueB_\202A\\/qos/scheduler-policies/"
      "scheduler-policy/schedulers/scheduler/tw"
      "o-rate-three-color/state/pir\022\215\001\n\007pir_pct"
      "\030\360\222\240\347\001 \001(\0132\023.ywrapper.UintValueBc\202A`/qos"
      "/scheduler-policies/scheduler-policy/sch"
      "edulers/scheduler/two-rate-three-color/s"
      "tate/pir-pct\022\240\001\n\021pir_pct_remaining\030\233\250\262j "
      "\001(\0132\023.ywrapper.UintValueBm\202Aj/qos/schedu"
      "ler-policies/scheduler-policy/schedulers"
      "/scheduler/two-rate-three-color/state/pi"
      "r-pct-remaining\032\250\016\n\rViolateAction\022\375\001\n\006co"
      "nfig\030\217\315\256\352\001 \001(\0132|.openconfig.openconfig_q"
      "os.Qos.SchedulerPolicies.SchedulerPolicy"
      ".Schedulers.Scheduler.TwoRateThreeColor."
      "ViolateAction.ConfigBk\202Ah/qos/scheduler-"
      "policies/scheduler-policy/schedulers/sch"
      "eduler/two-rate-three-color/violate-acti"
      "on/config\022\371\001\n\005state\030\200\271\334C \001(\0132{.openconfi"
      "g.openconfig_qos.Qos.SchedulerPolicies.S"
      "chedulerPolicy.Schedulers.Scheduler.TwoR"
      "ateThreeColor.ViolateAction.StateBj\202Ag/q"
      "os/scheduler-policies/scheduler-policy/s"
      "chedulers/scheduler/two-rate-three-color"
      "/violate-action/state\032\216\005\n\006Config\022\226\001\n\004dro"
      "p\030\311\356\337m \001(\0132\023.ywrapper.BoolValueBp\202Am/qos"
      "/scheduler-policies/scheduler-policy/sch"
      "edulers/scheduler/two-rate-three-color/v"
      "iolate-action/config/drop\022\241\001\n\tset_dot1p\030"
      "\277\322\311\316\001 \001(\0132\023.ywrapper.UintValueBu\202Ar/qos/"
      "scheduler-policies/scheduler-policy/sche"
      "dulers/scheduler/two-rate-three-color/vi"
      "olate-action/config/set-dot1p\022\236\001\n\010set_ds"
      "cp\030\335\360\203% \001(\0132\023.ywrapper.UintValueBt\202Aq/qo"
      "s/scheduler-policies/scheduler-policy/sc"
      "hedulers/scheduler/two-rate-three-color/"
      "violate-action/config/set-dscp\022\245\001\n\013set_m"
      "pls_tc\030\343\310\370\324\001 \001(\0132\023.ywrapper.UintValueBw\202"
      "At/qos/scheduler-policies/scheduler-poli"
      "cy/schedulers/scheduler/two-rate-three-c"
      "olor/violate-action/config/set-mpls-tc\032\211"
      "\005\n\005State\022\225\001\n\004drop\030\234\307\241- \001(\0132\023.ywrapper.Bo"
      "olValueBo\202Al/qos/scheduler-policies/sche"
      "duler-policy/schedulers/scheduler/two-ra"
      "te-three-color/violate-action/state/drop"
      "\022\240\001\n\tset_dot1p\030\350\336\277\224\001 \001(\0132\023.ywrapper.Uint"
      "ValueBt\202Aq/qos/scheduler-policies/schedu"
      "ler-policy/schedulers/scheduler/two-rate"
      "-three-color/violate-action/state/set-do"
      "t1p\022\235\001\n\010set_dscp\030\220\231\312b \001(\0132\023.ywrapper.Uin"
      "tValueBs\202Ap/qos/scheduler-policies/sched"
      "uler-policy/schedulers/scheduler/two-rat"
      "e-three-color/violate-action/state/set-d"
      "scp\022\244\001\n\013set_mpls_tc\030\234\347\337\312\001 \001(\0132\023.ywrapper"
      ".UintValueBv\202As/qos/scheduler-policies/s"
      "cheduler-policy/schedulers/scheduler/two"
      "-rate-three-color/violate-action/state/s"
      "et-mpls-tc\032\325\001\n\014SchedulerKey\022[\n\010sequence\030"
      "\001 \001(\004BI\202AF/qos/scheduler-policies/schedu"
      "ler-policy/schedulers/scheduler/sequence"
      "\022h\n\tscheduler\030\002 \001(\0132U.openconfig.opencon"
      "fig_qos.Qos.SchedulerPolicies.SchedulerP"
      "olicy.Schedulers.Scheduler\032f\n\005State\022]\n\004n"
      "ame\030\326\323] \001(\0132\025.ywrapper.StringValueB6\202A3/"
      "qos/scheduler-policies/scheduler-policy/"
      "state/name\032\260\001\n\022SchedulerPolicyKey\022>\n\004nam"
      "e\030\001 \001(\tB0\202A-/qos/scheduler-policies/sche"
      "duler-policy/name\022Z\n\020scheduler_policy\030\002 "
      "\001(\0132@.openconfig.openconfig_qos.Qos.Sche"
      "dulerPolicies.SchedulerPolicy\032\007\n\005Stateb\006"
      "proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 62926);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "openconfig/openconfig_qos/openconfig_qos.proto", &protobuf_RegisterTypes);
  ::protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::AddDescriptors();
  ::protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fyext_2fyext_2eproto::AddDescriptors();
  ::protobuf_openconfig_2fenums_2fenums_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto
namespace openconfig {
namespace openconfig_qos {
const ::google::protobuf::EnumDescriptor* Qos_Classifiers_Classifier_Config_Type_descriptor() {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_enum_descriptors[0];
}
bool Qos_Classifiers_Classifier_Config_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Qos_Classifiers_Classifier_Config_Type Qos_Classifiers_Classifier_Config::TYPE_UNSET;
const Qos_Classifiers_Classifier_Config_Type Qos_Classifiers_Classifier_Config::TYPE_IPV4;
const Qos_Classifiers_Classifier_Config_Type Qos_Classifiers_Classifier_Config::TYPE_IPV6;
const Qos_Classifiers_Classifier_Config_Type Qos_Classifiers_Classifier_Config::TYPE_MPLS;
const Qos_Classifiers_Classifier_Config_Type Qos_Classifiers_Classifier_Config::TYPE_ETHERNET;
const Qos_Classifiers_Classifier_Config_Type Qos_Classifiers_Classifier_Config::Type_MIN;
const Qos_Classifiers_Classifier_Config_Type Qos_Classifiers_Classifier_Config::Type_MAX;
const int Qos_Classifiers_Classifier_Config::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Qos_Classifiers_Classifier_State_Type_descriptor() {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_enum_descriptors[1];
}
bool Qos_Classifiers_Classifier_State_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Qos_Classifiers_Classifier_State_Type Qos_Classifiers_Classifier_State::TYPE_UNSET;
const Qos_Classifiers_Classifier_State_Type Qos_Classifiers_Classifier_State::TYPE_IPV4;
const Qos_Classifiers_Classifier_State_Type Qos_Classifiers_Classifier_State::TYPE_IPV6;
const Qos_Classifiers_Classifier_State_Type Qos_Classifiers_Classifier_State::TYPE_MPLS;
const Qos_Classifiers_Classifier_State_Type Qos_Classifiers_Classifier_State::TYPE_ETHERNET;
const Qos_Classifiers_Classifier_State_Type Qos_Classifiers_Classifier_State::Type_MIN;
const Qos_Classifiers_Classifier_State_Type Qos_Classifiers_Classifier_State::Type_MAX;
const int Qos_Classifiers_Classifier_State::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort_descriptor() {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_enum_descriptors[2];
}
bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::DESTINATIONPORT_UNSET;
const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::DESTINATIONPORT_ANY;
const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::DestinationPort_MIN;
const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::DestinationPort_MAX;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::DestinationPort_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort_descriptor() {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_enum_descriptors[3];
}
bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::SOURCEPORT_UNSET;
const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::SOURCEPORT_ANY;
const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::SourcePort_MIN;
const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::SourcePort_MAX;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::SourcePort_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort_descriptor() {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_enum_descriptors[4];
}
bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::DESTINATIONPORT_UNSET;
const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::DESTINATIONPORT_ANY;
const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::DestinationPort_MIN;
const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::DestinationPort_MAX;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::DestinationPort_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort_descriptor() {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_enum_descriptors[5];
}
bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::SOURCEPORT_UNSET;
const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::SOURCEPORT_ANY;
const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::SourcePort_MIN;
const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::SourcePort_MAX;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::SourcePort_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type_descriptor() {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_enum_descriptors[6];
}
bool Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 5:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::TYPE_UNSET;
const Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::TYPE_IPV4;
const Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::TYPE_IPV6;
const Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::TYPE_MPLS;
const Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::Type_MIN;
const Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::Type_MAX;
const int Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type_descriptor() {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_enum_descriptors[7];
}
bool Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 5:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type Qos_Interfaces_Interface_Input_Classifers_Classifier_State::TYPE_UNSET;
const Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type Qos_Interfaces_Interface_Input_Classifers_Classifier_State::TYPE_IPV4;
const Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type Qos_Interfaces_Interface_Input_Classifers_Classifier_State::TYPE_IPV6;
const Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type Qos_Interfaces_Interface_Input_Classifers_Classifier_State::TYPE_MPLS;
const Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type Qos_Interfaces_Interface_Input_Classifers_Classifier_State::Type_MIN;
const Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type Qos_Interfaces_Interface_Input_Classifers_Classifier_State::Type_MAX;
const int Qos_Interfaces_Interface_Input_Classifers_Classifier_State::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type_descriptor() {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_enum_descriptors[8];
}
bool Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 5:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::TYPE_UNSET;
const Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::TYPE_IPV4;
const Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::TYPE_IPV6;
const Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::TYPE_MPLS;
const Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::Type_MIN;
const Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::Type_MAX;
const int Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type_descriptor() {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_enum_descriptors[9];
}
bool Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 5:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::TYPE_UNSET;
const Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::TYPE_IPV4;
const Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::TYPE_IPV6;
const Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::TYPE_MPLS;
const Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::Type_MIN;
const Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::Type_MAX;
const int Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type_descriptor() {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_enum_descriptors[10];
}
bool Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 5:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type Qos_Interfaces_Interface_Output_Classifers_Classifier_State::TYPE_UNSET;
const Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type Qos_Interfaces_Interface_Output_Classifers_Classifier_State::TYPE_IPV4;
const Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type Qos_Interfaces_Interface_Output_Classifers_Classifier_State::TYPE_IPV6;
const Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type Qos_Interfaces_Interface_Output_Classifers_Classifier_State::TYPE_MPLS;
const Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type Qos_Interfaces_Interface_Output_Classifers_Classifier_State::Type_MIN;
const Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type Qos_Interfaces_Interface_Output_Classifers_Classifier_State::Type_MAX;
const int Qos_Interfaces_Interface_Output_Classifers_Classifier_State::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type_descriptor() {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_enum_descriptors[11];
}
bool Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 5:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::TYPE_UNSET;
const Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::TYPE_IPV4;
const Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::TYPE_IPV6;
const Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::TYPE_MPLS;
const Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::Type_MIN;
const Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::Type_MAX;
const int Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority_descriptor() {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_enum_descriptors[12];
}
bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::PRIORITY_UNSET;
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::PRIORITY_STRICT;
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::Priority_MIN;
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::Priority_MAX;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::Priority_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType_descriptor() {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_enum_descriptors[13];
}
bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::INPUTTYPE_UNSET;
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::INPUTTYPE_QUEUE;
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::INPUTTYPE_IN_PROFILE;
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::INPUTTYPE_OUT_PROFILE;
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::InputType_MIN;
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::InputType_MAX;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::InputType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType_descriptor() {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_enum_descriptors[14];
}
bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::INPUTTYPE_UNSET;
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::INPUTTYPE_QUEUE;
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::INPUTTYPE_IN_PROFILE;
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::INPUTTYPE_OUT_PROFILE;
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::InputType_MIN;
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::InputType_MAX;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::InputType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType_descriptor() {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_enum_descriptors[15];
}
bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::OUTPUTTYPE_UNSET;
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::OUTPUTTYPE_SCHEDULER;
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::OUTPUTTYPE_FWD_GROUP;
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::OUTPUTTYPE_INTERFACE;
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::OutputType_MIN;
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::OutputType_MAX;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::OutputType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType_descriptor() {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_enum_descriptors[16];
}
bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::OUTPUTTYPE_UNSET;
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::OUTPUTTYPE_SCHEDULER;
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::OUTPUTTYPE_FWD_GROUP;
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::OUTPUTTYPE_INTERFACE;
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::OutputType_MIN;
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::OutputType_MAX;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::OutputType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority_descriptor() {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_enum_descriptors[17];
}
bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::PRIORITY_UNSET;
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::PRIORITY_STRICT;
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::Priority_MIN;
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::Priority_MAX;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::Priority_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Qos_Classifiers_Classifier_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Config_default_instance_._instance.get_mutable()->name_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void Qos_Classifiers_Classifier_Config::clear_name() {
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Classifiers_Classifier_Config::kNameFieldNumber;
const int Qos_Classifiers_Classifier_Config::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Classifiers_Classifier_Config::Qos_Classifiers_Classifier_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Config)
}
Qos_Classifiers_Classifier_Config::Qos_Classifiers_Classifier_Config(const Qos_Classifiers_Classifier_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_name()) {
    name_ = new ::ywrapper::StringValue(*from.name_);
  } else {
    name_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Config)
}

void Qos_Classifiers_Classifier_Config::SharedCtor() {
  ::memset(&name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&name_)) + sizeof(type_));
  _cached_size_ = 0;
}

Qos_Classifiers_Classifier_Config::~Qos_Classifiers_Classifier_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Config)
  SharedDtor();
}

void Qos_Classifiers_Classifier_Config::SharedDtor() {
  if (this != internal_default_instance()) delete name_;
}

void Qos_Classifiers_Classifier_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Classifiers_Classifier_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Classifiers_Classifier_Config& Qos_Classifiers_Classifier_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Config();
  return *internal_default_instance();
}

Qos_Classifiers_Classifier_Config* Qos_Classifiers_Classifier_Config::New(::google::protobuf::Arena* arena) const {
  Qos_Classifiers_Classifier_Config* n = new Qos_Classifiers_Classifier_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Classifiers_Classifier_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool Qos_Classifiers_Classifier_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3559107874u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Config.Type type = 422459117 [(.yext.schemapath) = "/qos/classifiers/classifier/config/type"];
      case 422459117: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 3379672936 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Config_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue name = 444888484 [(.yext.schemapath) = "/qos/classifiers/classifier/config/name"];
      case 444888484: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 3559107874 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Config)
  return false;
#undef DO_
}

void Qos_Classifiers_Classifier_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Config.Type type = 422459117 [(.yext.schemapath) = "/qos/classifiers/classifier/config/type"];
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      422459117, this->type(), output);
  }

  // .ywrapper.StringValue name = 444888484 [(.yext.schemapath) = "/qos/classifiers/classifier/config/name"];
  if (this->has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      444888484, *this->name_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Config)
}

::google::protobuf::uint8* Qos_Classifiers_Classifier_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Config.Type type = 422459117 [(.yext.schemapath) = "/qos/classifiers/classifier/config/type"];
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      422459117, this->type(), target);
  }

  // .ywrapper.StringValue name = 444888484 [(.yext.schemapath) = "/qos/classifiers/classifier/config/name"];
  if (this->has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        444888484, *this->name_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Config)
  return target;
}

size_t Qos_Classifiers_Classifier_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue name = 444888484 [(.yext.schemapath) = "/qos/classifiers/classifier/config/name"];
  if (this->has_name()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->name_);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Config.Type type = 422459117 [(.yext.schemapath) = "/qos/classifiers/classifier/config/type"];
  if (this->type() != 0) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Classifiers_Classifier_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Classifiers_Classifier_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Classifiers_Classifier_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Config)
    MergeFrom(*source);
  }
}

void Qos_Classifiers_Classifier_Config::MergeFrom(const Qos_Classifiers_Classifier_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_name()) {
    mutable_name()->::ywrapper::StringValue::MergeFrom(from.name());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Qos_Classifiers_Classifier_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Classifiers_Classifier_Config::CopyFrom(const Qos_Classifiers_Classifier_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Classifiers_Classifier_Config::IsInitialized() const {
  return true;
}

void Qos_Classifiers_Classifier_Config::Swap(Qos_Classifiers_Classifier_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Classifiers_Classifier_Config::InternalSwap(Qos_Classifiers_Classifier_Config* other) {
  using std::swap;
  swap(name_, other->name_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Classifiers_Classifier_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Classifiers_Classifier_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_State_default_instance_._instance.get_mutable()->name_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void Qos_Classifiers_Classifier_State::clear_name() {
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Classifiers_Classifier_State::kNameFieldNumber;
const int Qos_Classifiers_Classifier_State::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Classifiers_Classifier_State::Qos_Classifiers_Classifier_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.State)
}
Qos_Classifiers_Classifier_State::Qos_Classifiers_Classifier_State(const Qos_Classifiers_Classifier_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_name()) {
    name_ = new ::ywrapper::StringValue(*from.name_);
  } else {
    name_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.State)
}

void Qos_Classifiers_Classifier_State::SharedCtor() {
  ::memset(&name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&name_)) + sizeof(type_));
  _cached_size_ = 0;
}

Qos_Classifiers_Classifier_State::~Qos_Classifiers_Classifier_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.State)
  SharedDtor();
}

void Qos_Classifiers_Classifier_State::SharedDtor() {
  if (this != internal_default_instance()) delete name_;
}

void Qos_Classifiers_Classifier_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Classifiers_Classifier_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Classifiers_Classifier_State& Qos_Classifiers_Classifier_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_State();
  return *internal_default_instance();
}

Qos_Classifiers_Classifier_State* Qos_Classifiers_Classifier_State::New(::google::protobuf::Arena* arena) const {
  Qos_Classifiers_Classifier_State* n = new Qos_Classifiers_Classifier_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Classifiers_Classifier_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool Qos_Classifiers_Classifier_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2678754544u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue name = 242051611 [(.yext.schemapath) = "/qos/classifiers/classifier/state/name"];
      case 242051611: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 1936412890 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.State.Type type = 334844318 [(.yext.schemapath) = "/qos/classifiers/classifier/state/type"];
      case 334844318: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 2678754544 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_State_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Classifiers.Classifier.State)
  return false;
#undef DO_
}

void Qos_Classifiers_Classifier_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue name = 242051611 [(.yext.schemapath) = "/qos/classifiers/classifier/state/name"];
  if (this->has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      242051611, *this->name_, output);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.State.Type type = 334844318 [(.yext.schemapath) = "/qos/classifiers/classifier/state/type"];
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      334844318, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.State)
}

::google::protobuf::uint8* Qos_Classifiers_Classifier_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue name = 242051611 [(.yext.schemapath) = "/qos/classifiers/classifier/state/name"];
  if (this->has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        242051611, *this->name_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.State.Type type = 334844318 [(.yext.schemapath) = "/qos/classifiers/classifier/state/type"];
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      334844318, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.State)
  return target;
}

size_t Qos_Classifiers_Classifier_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue name = 242051611 [(.yext.schemapath) = "/qos/classifiers/classifier/state/name"];
  if (this->has_name()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->name_);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.State.Type type = 334844318 [(.yext.schemapath) = "/qos/classifiers/classifier/state/type"];
  if (this->type() != 0) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Classifiers_Classifier_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Classifiers_Classifier_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Classifiers_Classifier_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Classifiers.Classifier.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.State)
    MergeFrom(*source);
  }
}

void Qos_Classifiers_Classifier_State::MergeFrom(const Qos_Classifiers_Classifier_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_name()) {
    mutable_name()->::ywrapper::StringValue::MergeFrom(from.name());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Qos_Classifiers_Classifier_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Classifiers_Classifier_State::CopyFrom(const Qos_Classifiers_Classifier_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Classifiers_Classifier_State::IsInitialized() const {
  return true;
}

void Qos_Classifiers_Classifier_State::Swap(Qos_Classifiers_Classifier_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Classifiers_Classifier_State::InternalSwap(Qos_Classifiers_Classifier_State* other) {
  using std::swap;
  swap(name_, other->name_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Classifiers_Classifier_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Classifiers_Classifier_Terms_Term_Actions_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Actions_Config_default_instance_._instance.get_mutable()->target_group_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void Qos_Classifiers_Classifier_Terms_Term_Actions_Config::clear_target_group() {
  if (GetArenaNoVirtual() == NULL && target_group_ != NULL) {
    delete target_group_;
  }
  target_group_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Classifiers_Classifier_Terms_Term_Actions_Config::kTargetGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Classifiers_Classifier_Terms_Term_Actions_Config::Qos_Classifiers_Classifier_Terms_Term_Actions_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Config)
}
Qos_Classifiers_Classifier_Terms_Term_Actions_Config::Qos_Classifiers_Classifier_Terms_Term_Actions_Config(const Qos_Classifiers_Classifier_Terms_Term_Actions_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_target_group()) {
    target_group_ = new ::ywrapper::StringValue(*from.target_group_);
  } else {
    target_group_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Config)
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_Config::SharedCtor() {
  target_group_ = NULL;
  _cached_size_ = 0;
}

Qos_Classifiers_Classifier_Terms_Term_Actions_Config::~Qos_Classifiers_Classifier_Terms_Term_Actions_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Config)
  SharedDtor();
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_Config::SharedDtor() {
  if (this != internal_default_instance()) delete target_group_;
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Classifiers_Classifier_Terms_Term_Actions_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Classifiers_Classifier_Terms_Term_Actions_Config& Qos_Classifiers_Classifier_Terms_Term_Actions_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_Config();
  return *internal_default_instance();
}

Qos_Classifiers_Classifier_Terms_Term_Actions_Config* Qos_Classifiers_Classifier_Terms_Term_Actions_Config::New(::google::protobuf::Arena* arena) const {
  Qos_Classifiers_Classifier_Terms_Term_Actions_Config* n = new Qos_Classifiers_Classifier_Terms_Term_Actions_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && target_group_ != NULL) {
    delete target_group_;
  }
  target_group_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Classifiers_Classifier_Terms_Term_Actions_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2108540762u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue target_group = 263567595 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/config/target-group"];
      case 263567595: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 2108540762 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_target_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Config)
  return false;
#undef DO_
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue target_group = 263567595 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/config/target-group"];
  if (this->has_target_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      263567595, *this->target_group_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Config)
}

::google::protobuf::uint8* Qos_Classifiers_Classifier_Terms_Term_Actions_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue target_group = 263567595 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/config/target-group"];
  if (this->has_target_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        263567595, *this->target_group_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Config)
  return target;
}

size_t Qos_Classifiers_Classifier_Terms_Term_Actions_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue target_group = 263567595 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/config/target-group"];
  if (this->has_target_group()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->target_group_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Classifiers_Classifier_Terms_Term_Actions_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Classifiers_Classifier_Terms_Term_Actions_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Config)
    MergeFrom(*source);
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_Config::MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Actions_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_target_group()) {
    mutable_target_group()->::ywrapper::StringValue::MergeFrom(from.target_group());
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_Config::CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Actions_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Classifiers_Classifier_Terms_Term_Actions_Config::IsInitialized() const {
  return true;
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_Config::Swap(Qos_Classifiers_Classifier_Terms_Term_Actions_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Classifiers_Classifier_Terms_Term_Actions_Config::InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Actions_Config* other) {
  using std::swap;
  swap(target_group_, other->target_group_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Classifiers_Classifier_Terms_Term_Actions_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config_default_instance_._instance.get_mutable()->set_dot1p_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config_default_instance_._instance.get_mutable()->set_dscp_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config_default_instance_._instance.get_mutable()->set_mpls_tc_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::clear_set_dot1p() {
  if (GetArenaNoVirtual() == NULL && set_dot1p_ != NULL) {
    delete set_dot1p_;
  }
  set_dot1p_ = NULL;
}
void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::clear_set_dscp() {
  if (GetArenaNoVirtual() == NULL && set_dscp_ != NULL) {
    delete set_dscp_;
  }
  set_dscp_ = NULL;
}
void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::clear_set_mpls_tc() {
  if (GetArenaNoVirtual() == NULL && set_mpls_tc_ != NULL) {
    delete set_mpls_tc_;
  }
  set_mpls_tc_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::kSetDot1PFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::kSetDscpFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::kSetMplsTcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config)
}
Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config(const Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_set_mpls_tc()) {
    set_mpls_tc_ = new ::ywrapper::UintValue(*from.set_mpls_tc_);
  } else {
    set_mpls_tc_ = NULL;
  }
  if (from.has_set_dot1p()) {
    set_dot1p_ = new ::ywrapper::UintValue(*from.set_dot1p_);
  } else {
    set_dot1p_ = NULL;
  }
  if (from.has_set_dscp()) {
    set_dscp_ = new ::ywrapper::UintValue(*from.set_dscp_);
  } else {
    set_dscp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config)
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::SharedCtor() {
  ::memset(&set_mpls_tc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&set_dscp_) -
      reinterpret_cast<char*>(&set_mpls_tc_)) + sizeof(set_dscp_));
  _cached_size_ = 0;
}

Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::~Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config)
  SharedDtor();
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::SharedDtor() {
  if (this != internal_default_instance()) delete set_mpls_tc_;
  if (this != internal_default_instance()) delete set_dot1p_;
  if (this != internal_default_instance()) delete set_dscp_;
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config& Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config();
  return *internal_default_instance();
}

Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config* Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::New(::google::protobuf::Arena* arena) const {
  Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config* n = new Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && set_mpls_tc_ != NULL) {
    delete set_mpls_tc_;
  }
  set_mpls_tc_ = NULL;
  if (GetArenaNoVirtual() == NULL && set_dot1p_ != NULL) {
    delete set_dot1p_;
  }
  set_dot1p_ = NULL;
  if (GetArenaNoVirtual() == NULL && set_dscp_ != NULL) {
    delete set_dscp_;
  }
  set_dscp_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(1479602610u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue set_mpls_tc = 115576782 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/config/set-mpls-tc"];
      case 115576782: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 924614258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_mpls_tc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue set_dot1p = 129420902 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/config/set-dot1p"];
      case 129420902: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 1035367218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_dot1p()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue set_dscp = 184950326 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/config/set-dscp"];
      case 184950326: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 1479602610 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_dscp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config)
  return false;
#undef DO_
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue set_mpls_tc = 115576782 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/config/set-mpls-tc"];
  if (this->has_set_mpls_tc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      115576782, *this->set_mpls_tc_, output);
  }

  // .ywrapper.UintValue set_dot1p = 129420902 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/config/set-dot1p"];
  if (this->has_set_dot1p()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      129420902, *this->set_dot1p_, output);
  }

  // .ywrapper.UintValue set_dscp = 184950326 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/config/set-dscp"];
  if (this->has_set_dscp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      184950326, *this->set_dscp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config)
}

::google::protobuf::uint8* Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue set_mpls_tc = 115576782 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/config/set-mpls-tc"];
  if (this->has_set_mpls_tc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        115576782, *this->set_mpls_tc_, deterministic, target);
  }

  // .ywrapper.UintValue set_dot1p = 129420902 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/config/set-dot1p"];
  if (this->has_set_dot1p()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        129420902, *this->set_dot1p_, deterministic, target);
  }

  // .ywrapper.UintValue set_dscp = 184950326 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/config/set-dscp"];
  if (this->has_set_dscp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        184950326, *this->set_dscp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config)
  return target;
}

size_t Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue set_mpls_tc = 115576782 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/config/set-mpls-tc"];
  if (this->has_set_mpls_tc()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->set_mpls_tc_);
  }

  // .ywrapper.UintValue set_dot1p = 129420902 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/config/set-dot1p"];
  if (this->has_set_dot1p()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->set_dot1p_);
  }

  // .ywrapper.UintValue set_dscp = 184950326 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/config/set-dscp"];
  if (this->has_set_dscp()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->set_dscp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config)
    MergeFrom(*source);
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_set_mpls_tc()) {
    mutable_set_mpls_tc()->::ywrapper::UintValue::MergeFrom(from.set_mpls_tc());
  }
  if (from.has_set_dot1p()) {
    mutable_set_dot1p()->::ywrapper::UintValue::MergeFrom(from.set_dot1p());
  }
  if (from.has_set_dscp()) {
    mutable_set_dscp()->::ywrapper::UintValue::MergeFrom(from.set_dscp());
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::IsInitialized() const {
  return true;
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::Swap(Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config* other) {
  using std::swap;
  swap(set_mpls_tc_, other->set_mpls_tc_);
  swap(set_dot1p_, other->set_dot1p_);
  swap(set_dscp_, other->set_dscp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State_default_instance_._instance.get_mutable()->set_dot1p_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State_default_instance_._instance.get_mutable()->set_dscp_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State_default_instance_._instance.get_mutable()->set_mpls_tc_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::clear_set_dot1p() {
  if (GetArenaNoVirtual() == NULL && set_dot1p_ != NULL) {
    delete set_dot1p_;
  }
  set_dot1p_ = NULL;
}
void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::clear_set_dscp() {
  if (GetArenaNoVirtual() == NULL && set_dscp_ != NULL) {
    delete set_dscp_;
  }
  set_dscp_ = NULL;
}
void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::clear_set_mpls_tc() {
  if (GetArenaNoVirtual() == NULL && set_mpls_tc_ != NULL) {
    delete set_mpls_tc_;
  }
  set_mpls_tc_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::kSetDot1PFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::kSetDscpFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::kSetMplsTcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_Remark_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State)
}
Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State(const Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_set_mpls_tc()) {
    set_mpls_tc_ = new ::ywrapper::UintValue(*from.set_mpls_tc_);
  } else {
    set_mpls_tc_ = NULL;
  }
  if (from.has_set_dot1p()) {
    set_dot1p_ = new ::ywrapper::UintValue(*from.set_dot1p_);
  } else {
    set_dot1p_ = NULL;
  }
  if (from.has_set_dscp()) {
    set_dscp_ = new ::ywrapper::UintValue(*from.set_dscp_);
  } else {
    set_dscp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State)
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::SharedCtor() {
  ::memset(&set_mpls_tc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&set_dscp_) -
      reinterpret_cast<char*>(&set_mpls_tc_)) + sizeof(set_dscp_));
  _cached_size_ = 0;
}

Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::~Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State)
  SharedDtor();
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::SharedDtor() {
  if (this != internal_default_instance()) delete set_mpls_tc_;
  if (this != internal_default_instance()) delete set_dot1p_;
  if (this != internal_default_instance()) delete set_dscp_;
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State& Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_Remark_State();
  return *internal_default_instance();
}

Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State* Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::New(::google::protobuf::Arena* arena) const {
  Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State* n = new Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && set_mpls_tc_ != NULL) {
    delete set_mpls_tc_;
  }
  set_mpls_tc_ = NULL;
  if (GetArenaNoVirtual() == NULL && set_dot1p_ != NULL) {
    delete set_dot1p_;
  }
  set_dot1p_ = NULL;
  if (GetArenaNoVirtual() == NULL && set_dscp_ != NULL) {
    delete set_dscp_;
  }
  set_dscp_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4077905770u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue set_mpls_tc = 103423347 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/state/set-mpls-tc"];
      case 103423347: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 827386778 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_mpls_tc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue set_dot1p = 309389519 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/state/set-dot1p"];
      case 309389519: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 2475116154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_dot1p()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue set_dscp = 509738221 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/state/set-dscp"];
      case 509738221: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 4077905770 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_dscp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State)
  return false;
#undef DO_
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue set_mpls_tc = 103423347 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/state/set-mpls-tc"];
  if (this->has_set_mpls_tc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103423347, *this->set_mpls_tc_, output);
  }

  // .ywrapper.UintValue set_dot1p = 309389519 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/state/set-dot1p"];
  if (this->has_set_dot1p()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      309389519, *this->set_dot1p_, output);
  }

  // .ywrapper.UintValue set_dscp = 509738221 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/state/set-dscp"];
  if (this->has_set_dscp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      509738221, *this->set_dscp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State)
}

::google::protobuf::uint8* Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue set_mpls_tc = 103423347 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/state/set-mpls-tc"];
  if (this->has_set_mpls_tc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        103423347, *this->set_mpls_tc_, deterministic, target);
  }

  // .ywrapper.UintValue set_dot1p = 309389519 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/state/set-dot1p"];
  if (this->has_set_dot1p()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        309389519, *this->set_dot1p_, deterministic, target);
  }

  // .ywrapper.UintValue set_dscp = 509738221 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/state/set-dscp"];
  if (this->has_set_dscp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        509738221, *this->set_dscp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State)
  return target;
}

size_t Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue set_mpls_tc = 103423347 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/state/set-mpls-tc"];
  if (this->has_set_mpls_tc()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->set_mpls_tc_);
  }

  // .ywrapper.UintValue set_dot1p = 309389519 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/state/set-dot1p"];
  if (this->has_set_dot1p()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->set_dot1p_);
  }

  // .ywrapper.UintValue set_dscp = 509738221 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/state/set-dscp"];
  if (this->has_set_dscp()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->set_dscp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State)
    MergeFrom(*source);
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_set_mpls_tc()) {
    mutable_set_mpls_tc()->::ywrapper::UintValue::MergeFrom(from.set_mpls_tc());
  }
  if (from.has_set_dot1p()) {
    mutable_set_dot1p()->::ywrapper::UintValue::MergeFrom(from.set_dot1p());
  }
  if (from.has_set_dscp()) {
    mutable_set_dscp()->::ywrapper::UintValue::MergeFrom(from.set_dscp());
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::IsInitialized() const {
  return true;
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::Swap(Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State* other) {
  using std::swap;
  swap(set_mpls_tc_, other->set_mpls_tc_);
  swap(set_dot1p_, other->set_dot1p_);
  swap(set_dscp_, other->set_dscp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config*>(
      ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State*>(
      ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Classifiers_Classifier_Terms_Term_Actions_Remark::kConfigFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Actions_Remark::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Classifiers_Classifier_Terms_Term_Actions_Remark::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_Remark();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark)
}
Qos_Classifiers_Classifier_Terms_Term_Actions_Remark::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark(const Qos_Classifiers_Classifier_Terms_Term_Actions_Remark& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark)
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&state_)) + sizeof(config_));
  _cached_size_ = 0;
}

Qos_Classifiers_Classifier_Terms_Term_Actions_Remark::~Qos_Classifiers_Classifier_Terms_Term_Actions_Remark() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark)
  SharedDtor();
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete config_;
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Classifiers_Classifier_Terms_Term_Actions_Remark::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Classifiers_Classifier_Terms_Term_Actions_Remark& Qos_Classifiers_Classifier_Terms_Term_Actions_Remark::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_Remark();
  return *internal_default_instance();
}

Qos_Classifiers_Classifier_Terms_Term_Actions_Remark* Qos_Classifiers_Classifier_Terms_Term_Actions_Remark::New(::google::protobuf::Arena* arena) const {
  Qos_Classifiers_Classifier_Terms_Term_Actions_Remark* n = new Qos_Classifiers_Classifier_Terms_Term_Actions_Remark;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Classifiers_Classifier_Terms_Term_Actions_Remark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4286859282u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State state = 416672959 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/state"];
      case 416672959: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 3333383674 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config config = 535857410 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/config"];
      case 535857410: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 4286859282 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark)
  return false;
#undef DO_
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State state = 416672959 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      416672959, *this->state_, output);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config config = 535857410 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      535857410, *this->config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark)
}

::google::protobuf::uint8* Qos_Classifiers_Classifier_Terms_Term_Actions_Remark::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State state = 416672959 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        416672959, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config config = 535857410 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        535857410, *this->config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark)
  return target;
}

size_t Qos_Classifiers_Classifier_Terms_Term_Actions_Remark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State state = 416672959 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config config = 535857410 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Classifiers_Classifier_Terms_Term_Actions_Remark* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Classifiers_Classifier_Terms_Term_Actions_Remark>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark)
    MergeFrom(*source);
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark::MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Actions_Remark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::MergeFrom(from.state());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::MergeFrom(from.config());
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark::CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Actions_Remark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Classifiers_Classifier_Terms_Term_Actions_Remark::IsInitialized() const {
  return true;
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark::Swap(Qos_Classifiers_Classifier_Terms_Term_Actions_Remark* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark::InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Actions_Remark* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(config_, other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Classifiers_Classifier_Terms_Term_Actions_Remark::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Classifiers_Classifier_Terms_Term_Actions_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Actions_State_default_instance_._instance.get_mutable()->target_group_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void Qos_Classifiers_Classifier_Terms_Term_Actions_State::clear_target_group() {
  if (GetArenaNoVirtual() == NULL && target_group_ != NULL) {
    delete target_group_;
  }
  target_group_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Classifiers_Classifier_Terms_Term_Actions_State::kTargetGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Classifiers_Classifier_Terms_Term_Actions_State::Qos_Classifiers_Classifier_Terms_Term_Actions_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.State)
}
Qos_Classifiers_Classifier_Terms_Term_Actions_State::Qos_Classifiers_Classifier_Terms_Term_Actions_State(const Qos_Classifiers_Classifier_Terms_Term_Actions_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_target_group()) {
    target_group_ = new ::ywrapper::StringValue(*from.target_group_);
  } else {
    target_group_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.State)
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_State::SharedCtor() {
  target_group_ = NULL;
  _cached_size_ = 0;
}

Qos_Classifiers_Classifier_Terms_Term_Actions_State::~Qos_Classifiers_Classifier_Terms_Term_Actions_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.State)
  SharedDtor();
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_State::SharedDtor() {
  if (this != internal_default_instance()) delete target_group_;
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Classifiers_Classifier_Terms_Term_Actions_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Classifiers_Classifier_Terms_Term_Actions_State& Qos_Classifiers_Classifier_Terms_Term_Actions_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_State();
  return *internal_default_instance();
}

Qos_Classifiers_Classifier_Terms_Term_Actions_State* Qos_Classifiers_Classifier_Terms_Term_Actions_State::New(::google::protobuf::Arena* arena) const {
  Qos_Classifiers_Classifier_Terms_Term_Actions_State* n = new Qos_Classifiers_Classifier_Terms_Term_Actions_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && target_group_ != NULL) {
    delete target_group_;
  }
  target_group_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Classifiers_Classifier_Terms_Term_Actions_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2636255314u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue target_group = 329531914 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/state/target-group"];
      case 329531914: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 2636255314 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_target_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.State)
  return false;
#undef DO_
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue target_group = 329531914 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/state/target-group"];
  if (this->has_target_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      329531914, *this->target_group_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.State)
}

::google::protobuf::uint8* Qos_Classifiers_Classifier_Terms_Term_Actions_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue target_group = 329531914 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/state/target-group"];
  if (this->has_target_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        329531914, *this->target_group_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.State)
  return target;
}

size_t Qos_Classifiers_Classifier_Terms_Term_Actions_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue target_group = 329531914 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/state/target-group"];
  if (this->has_target_group()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->target_group_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Classifiers_Classifier_Terms_Term_Actions_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Classifiers_Classifier_Terms_Term_Actions_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.State)
    MergeFrom(*source);
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_State::MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Actions_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_target_group()) {
    mutable_target_group()->::ywrapper::StringValue::MergeFrom(from.target_group());
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_State::CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Actions_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Classifiers_Classifier_Terms_Term_Actions_State::IsInitialized() const {
  return true;
}

void Qos_Classifiers_Classifier_Terms_Term_Actions_State::Swap(Qos_Classifiers_Classifier_Terms_Term_Actions_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Classifiers_Classifier_Terms_Term_Actions_State::InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Actions_State* other) {
  using std::swap;
  swap(target_group_, other->target_group_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Classifiers_Classifier_Terms_Term_Actions_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Classifiers_Classifier_Terms_Term_Actions::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Actions_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Config*>(
      ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Config::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Actions_default_instance_._instance.get_mutable()->remark_ = const_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark*>(
      ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Actions_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_State*>(
      ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Classifiers_Classifier_Terms_Term_Actions::kConfigFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Actions::kRemarkFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Actions::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Classifiers_Classifier_Terms_Term_Actions::Qos_Classifiers_Classifier_Terms_Term_Actions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions)
}
Qos_Classifiers_Classifier_Terms_Term_Actions::Qos_Classifiers_Classifier_Terms_Term_Actions(const Qos_Classifiers_Classifier_Terms_Term_Actions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_remark()) {
    remark_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark(*from.remark_);
  } else {
    remark_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_State(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions)
}

void Qos_Classifiers_Classifier_Terms_Term_Actions::SharedCtor() {
  ::memset(&remark_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&remark_)) + sizeof(state_));
  _cached_size_ = 0;
}

Qos_Classifiers_Classifier_Terms_Term_Actions::~Qos_Classifiers_Classifier_Terms_Term_Actions() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions)
  SharedDtor();
}

void Qos_Classifiers_Classifier_Terms_Term_Actions::SharedDtor() {
  if (this != internal_default_instance()) delete remark_;
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void Qos_Classifiers_Classifier_Terms_Term_Actions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Classifiers_Classifier_Terms_Term_Actions::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Classifiers_Classifier_Terms_Term_Actions& Qos_Classifiers_Classifier_Terms_Term_Actions::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions();
  return *internal_default_instance();
}

Qos_Classifiers_Classifier_Terms_Term_Actions* Qos_Classifiers_Classifier_Terms_Term_Actions::New(::google::protobuf::Arena* arena) const {
  Qos_Classifiers_Classifier_Terms_Term_Actions* n = new Qos_Classifiers_Classifier_Terms_Term_Actions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Classifiers_Classifier_Terms_Term_Actions::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && remark_ != NULL) {
    delete remark_;
  }
  remark_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Classifiers_Classifier_Terms_Term_Actions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3233375746u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark remark = 45738605 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark"];
      case 45738605: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 365908842 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_remark()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Config config = 112958415 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/config"];
      case 112958415: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 903667322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.State state = 404171968 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/state"];
      case 404171968: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 3233375746 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions)
  return false;
#undef DO_
}

void Qos_Classifiers_Classifier_Terms_Term_Actions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark remark = 45738605 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark"];
  if (this->has_remark()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45738605, *this->remark_, output);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Config config = 112958415 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      112958415, *this->config_, output);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.State state = 404171968 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      404171968, *this->state_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions)
}

::google::protobuf::uint8* Qos_Classifiers_Classifier_Terms_Term_Actions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark remark = 45738605 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark"];
  if (this->has_remark()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        45738605, *this->remark_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Config config = 112958415 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        112958415, *this->config_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.State state = 404171968 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        404171968, *this->state_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions)
  return target;
}

size_t Qos_Classifiers_Classifier_Terms_Term_Actions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark remark = 45738605 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark"];
  if (this->has_remark()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->remark_);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Config config = 112958415 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.State state = 404171968 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Classifiers_Classifier_Terms_Term_Actions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Classifiers_Classifier_Terms_Term_Actions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Classifiers_Classifier_Terms_Term_Actions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions)
    MergeFrom(*source);
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Actions::MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Actions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_remark()) {
    mutable_remark()->::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark::MergeFrom(from.remark());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Config::MergeFrom(from.config());
  }
  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_State::MergeFrom(from.state());
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Actions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Classifiers_Classifier_Terms_Term_Actions::CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Actions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Classifiers_Classifier_Terms_Term_Actions::IsInitialized() const {
  return true;
}

void Qos_Classifiers_Classifier_Terms_Term_Actions::Swap(Qos_Classifiers_Classifier_Terms_Term_Actions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Classifiers_Classifier_Terms_Term_Actions::InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Actions* other) {
  using std::swap;
  swap(remark_, other->remark_);
  swap(config_, other->config_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Classifiers_Classifier_Terms_Term_Actions::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config_default_instance_._instance.get_mutable()->destination_address_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config_default_instance_._instance.get_mutable()->dscp_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config_default_instance_._instance.get_mutable()->hop_limit_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config_default_instance_.protocol_openconfigpacketmatchtypesipprotocol_ = 0;
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config_default_instance_.protocol_uint64_ = GOOGLE_ULONGLONG(0);
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config_default_instance_._instance.get_mutable()->source_address_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::clear_destination_address() {
  if (GetArenaNoVirtual() == NULL && destination_address_ != NULL) {
    delete destination_address_;
  }
  destination_address_ = NULL;
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::clear_dscp() {
  if (GetArenaNoVirtual() == NULL && dscp_ != NULL) {
    delete dscp_;
  }
  dscp_ = NULL;
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::clear_hop_limit() {
  if (GetArenaNoVirtual() == NULL && hop_limit_ != NULL) {
    delete hop_limit_;
  }
  hop_limit_ = NULL;
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::clear_source_address() {
  if (GetArenaNoVirtual() == NULL && source_address_ != NULL) {
    delete source_address_;
  }
  source_address_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::kDestinationAddressFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::kDscpFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::kHopLimitFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::kProtocolOpenconfigpacketmatchtypesipprotocolFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::kProtocolUint64FieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::kSourceAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config)
}
Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hop_limit()) {
    hop_limit_ = new ::ywrapper::UintValue(*from.hop_limit_);
  } else {
    hop_limit_ = NULL;
  }
  if (from.has_source_address()) {
    source_address_ = new ::ywrapper::StringValue(*from.source_address_);
  } else {
    source_address_ = NULL;
  }
  if (from.has_dscp()) {
    dscp_ = new ::ywrapper::UintValue(*from.dscp_);
  } else {
    dscp_ = NULL;
  }
  if (from.has_destination_address()) {
    destination_address_ = new ::ywrapper::StringValue(*from.destination_address_);
  } else {
    destination_address_ = NULL;
  }
  clear_has_protocol();
  switch (from.protocol_case()) {
    case kProtocolOpenconfigpacketmatchtypesipprotocol: {
      set_protocol_openconfigpacketmatchtypesipprotocol(from.protocol_openconfigpacketmatchtypesipprotocol());
      break;
    }
    case kProtocolUint64: {
      set_protocol_uint64(from.protocol_uint64());
      break;
    }
    case PROTOCOL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config)
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::SharedCtor() {
  ::memset(&hop_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&destination_address_) -
      reinterpret_cast<char*>(&hop_limit_)) + sizeof(destination_address_));
  clear_has_protocol();
  _cached_size_ = 0;
}

Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::~Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config)
  SharedDtor();
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::SharedDtor() {
  if (this != internal_default_instance()) delete hop_limit_;
  if (this != internal_default_instance()) delete source_address_;
  if (this != internal_default_instance()) delete dscp_;
  if (this != internal_default_instance()) delete destination_address_;
  if (has_protocol()) {
    clear_protocol();
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config& Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config();
  return *internal_default_instance();
}

Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::New(::google::protobuf::Arena* arena) const {
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config* n = new Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::clear_protocol() {
// @@protoc_insertion_point(one_of_clear_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config)
  switch (protocol_case()) {
    case kProtocolOpenconfigpacketmatchtypesipprotocol: {
      // No need to clear
      break;
    }
    case kProtocolUint64: {
      // No need to clear
      break;
    }
    case PROTOCOL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PROTOCOL_NOT_SET;
}


void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && hop_limit_ != NULL) {
    delete hop_limit_;
  }
  hop_limit_ = NULL;
  if (GetArenaNoVirtual() == NULL && source_address_ != NULL) {
    delete source_address_;
  }
  source_address_ = NULL;
  if (GetArenaNoVirtual() == NULL && dscp_ != NULL) {
    delete dscp_;
  }
  dscp_ = NULL;
  if (GetArenaNoVirtual() == NULL && destination_address_ != NULL) {
    delete destination_address_;
  }
  destination_address_ = NULL;
  clear_protocol();
  _internal_metadata_.Clear();
}

bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4223830386u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue hop_limit = 164634146 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/hop-limit"];
      case 164634146: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 1317073170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hop_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.enums.OpenconfigPacketMatchTypesIPPROTOCOL protocol_openconfigpacketmatchtypesipprotocol = 371958053;
      case 371958053: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 2975664424 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_protocol_openconfigpacketmatchtypesipprotocol(static_cast< ::openconfig::enums::OpenconfigPacketMatchTypesIPPROTOCOL >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue source_address = 389228459 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/source-address"];
      case 389228459: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 3113827674 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_source_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue dscp = 459218869 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/dscp"];
      case 459218869: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 3673750954 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dscp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 protocol_uint64 = 488250108;
      case 488250108: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 3906000864 & 0xFF */)) {
          clear_protocol();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &protocol_.protocol_uint64_)));
          set_has_protocol_uint64();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue destination_address = 527978798 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/destination-address"];
      case 527978798: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 4223830386 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config)
  return false;
#undef DO_
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue hop_limit = 164634146 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/hop-limit"];
  if (this->has_hop_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      164634146, *this->hop_limit_, output);
  }

  // .openconfig.enums.OpenconfigPacketMatchTypesIPPROTOCOL protocol_openconfigpacketmatchtypesipprotocol = 371958053;
  if (has_protocol_openconfigpacketmatchtypesipprotocol()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      371958053, this->protocol_openconfigpacketmatchtypesipprotocol(), output);
  }

  // .ywrapper.StringValue source_address = 389228459 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/source-address"];
  if (this->has_source_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      389228459, *this->source_address_, output);
  }

  // .ywrapper.UintValue dscp = 459218869 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/dscp"];
  if (this->has_dscp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      459218869, *this->dscp_, output);
  }

  // uint64 protocol_uint64 = 488250108;
  if (has_protocol_uint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(488250108, this->protocol_uint64(), output);
  }

  // .ywrapper.StringValue destination_address = 527978798 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/destination-address"];
  if (this->has_destination_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      527978798, *this->destination_address_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config)
}

::google::protobuf::uint8* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue hop_limit = 164634146 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/hop-limit"];
  if (this->has_hop_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        164634146, *this->hop_limit_, deterministic, target);
  }

  // .openconfig.enums.OpenconfigPacketMatchTypesIPPROTOCOL protocol_openconfigpacketmatchtypesipprotocol = 371958053;
  if (has_protocol_openconfigpacketmatchtypesipprotocol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      371958053, this->protocol_openconfigpacketmatchtypesipprotocol(), target);
  }

  // .ywrapper.StringValue source_address = 389228459 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/source-address"];
  if (this->has_source_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        389228459, *this->source_address_, deterministic, target);
  }

  // .ywrapper.UintValue dscp = 459218869 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/dscp"];
  if (this->has_dscp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        459218869, *this->dscp_, deterministic, target);
  }

  // uint64 protocol_uint64 = 488250108;
  if (has_protocol_uint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(488250108, this->protocol_uint64(), target);
  }

  // .ywrapper.StringValue destination_address = 527978798 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/destination-address"];
  if (this->has_destination_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        527978798, *this->destination_address_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config)
  return target;
}

size_t Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue hop_limit = 164634146 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/hop-limit"];
  if (this->has_hop_limit()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->hop_limit_);
  }

  // .ywrapper.StringValue source_address = 389228459 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/source-address"];
  if (this->has_source_address()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->source_address_);
  }

  // .ywrapper.UintValue dscp = 459218869 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/dscp"];
  if (this->has_dscp()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dscp_);
  }

  // .ywrapper.StringValue destination_address = 527978798 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/destination-address"];
  if (this->has_destination_address()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->destination_address_);
  }

  switch (protocol_case()) {
    // .openconfig.enums.OpenconfigPacketMatchTypesIPPROTOCOL protocol_openconfigpacketmatchtypesipprotocol = 371958053;
    case kProtocolOpenconfigpacketmatchtypesipprotocol: {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protocol_openconfigpacketmatchtypesipprotocol());
      break;
    }
    // uint64 protocol_uint64 = 488250108;
    case kProtocolUint64: {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->protocol_uint64());
      break;
    }
    case PROTOCOL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config)
    MergeFrom(*source);
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hop_limit()) {
    mutable_hop_limit()->::ywrapper::UintValue::MergeFrom(from.hop_limit());
  }
  if (from.has_source_address()) {
    mutable_source_address()->::ywrapper::StringValue::MergeFrom(from.source_address());
  }
  if (from.has_dscp()) {
    mutable_dscp()->::ywrapper::UintValue::MergeFrom(from.dscp());
  }
  if (from.has_destination_address()) {
    mutable_destination_address()->::ywrapper::StringValue::MergeFrom(from.destination_address());
  }
  switch (from.protocol_case()) {
    case kProtocolOpenconfigpacketmatchtypesipprotocol: {
      set_protocol_openconfigpacketmatchtypesipprotocol(from.protocol_openconfigpacketmatchtypesipprotocol());
      break;
    }
    case kProtocolUint64: {
      set_protocol_uint64(from.protocol_uint64());
      break;
    }
    case PROTOCOL_NOT_SET: {
      break;
    }
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::IsInitialized() const {
  return true;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::Swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config* other) {
  using std::swap;
  swap(hop_limit_, other->hop_limit_);
  swap(source_address_, other->source_address_);
  swap(dscp_, other->dscp_);
  swap(destination_address_, other->destination_address_);
  swap(protocol_, other->protocol_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State_default_instance_._instance.get_mutable()->destination_address_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State_default_instance_._instance.get_mutable()->dscp_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State_default_instance_._instance.get_mutable()->hop_limit_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State_default_instance_.protocol_openconfigpacketmatchtypesipprotocol_ = 0;
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State_default_instance_.protocol_uint64_ = GOOGLE_ULONGLONG(0);
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State_default_instance_._instance.get_mutable()->source_address_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::clear_destination_address() {
  if (GetArenaNoVirtual() == NULL && destination_address_ != NULL) {
    delete destination_address_;
  }
  destination_address_ = NULL;
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::clear_dscp() {
  if (GetArenaNoVirtual() == NULL && dscp_ != NULL) {
    delete dscp_;
  }
  dscp_ = NULL;
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::clear_hop_limit() {
  if (GetArenaNoVirtual() == NULL && hop_limit_ != NULL) {
    delete hop_limit_;
  }
  hop_limit_ = NULL;
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::clear_source_address() {
  if (GetArenaNoVirtual() == NULL && source_address_ != NULL) {
    delete source_address_;
  }
  source_address_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::kDestinationAddressFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::kDscpFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::kHopLimitFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::kProtocolOpenconfigpacketmatchtypesipprotocolFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::kProtocolUint64FieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::kSourceAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State)
}
Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_source_address()) {
    source_address_ = new ::ywrapper::StringValue(*from.source_address_);
  } else {
    source_address_ = NULL;
  }
  if (from.has_dscp()) {
    dscp_ = new ::ywrapper::UintValue(*from.dscp_);
  } else {
    dscp_ = NULL;
  }
  if (from.has_hop_limit()) {
    hop_limit_ = new ::ywrapper::UintValue(*from.hop_limit_);
  } else {
    hop_limit_ = NULL;
  }
  if (from.has_destination_address()) {
    destination_address_ = new ::ywrapper::StringValue(*from.destination_address_);
  } else {
    destination_address_ = NULL;
  }
  clear_has_protocol();
  switch (from.protocol_case()) {
    case kProtocolOpenconfigpacketmatchtypesipprotocol: {
      set_protocol_openconfigpacketmatchtypesipprotocol(from.protocol_openconfigpacketmatchtypesipprotocol());
      break;
    }
    case kProtocolUint64: {
      set_protocol_uint64(from.protocol_uint64());
      break;
    }
    case PROTOCOL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State)
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::SharedCtor() {
  ::memset(&source_address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&destination_address_) -
      reinterpret_cast<char*>(&source_address_)) + sizeof(destination_address_));
  clear_has_protocol();
  _cached_size_ = 0;
}

Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::~Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State)
  SharedDtor();
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::SharedDtor() {
  if (this != internal_default_instance()) delete source_address_;
  if (this != internal_default_instance()) delete dscp_;
  if (this != internal_default_instance()) delete hop_limit_;
  if (this != internal_default_instance()) delete destination_address_;
  if (has_protocol()) {
    clear_protocol();
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State& Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State();
  return *internal_default_instance();
}

Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::New(::google::protobuf::Arena* arena) const {
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State* n = new Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::clear_protocol() {
// @@protoc_insertion_point(one_of_clear_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State)
  switch (protocol_case()) {
    case kProtocolOpenconfigpacketmatchtypesipprotocol: {
      // No need to clear
      break;
    }
    case kProtocolUint64: {
      // No need to clear
      break;
    }
    case PROTOCOL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PROTOCOL_NOT_SET;
}


void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && source_address_ != NULL) {
    delete source_address_;
  }
  source_address_ = NULL;
  if (GetArenaNoVirtual() == NULL && dscp_ != NULL) {
    delete dscp_;
  }
  dscp_ = NULL;
  if (GetArenaNoVirtual() == NULL && hop_limit_ != NULL) {
    delete hop_limit_;
  }
  hop_limit_ = NULL;
  if (GetArenaNoVirtual() == NULL && destination_address_ != NULL) {
    delete destination_address_;
  }
  destination_address_ = NULL;
  clear_protocol();
  _internal_metadata_.Clear();
}

bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3077246778u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue source_address = 139081528 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/source-address"];
      case 139081528: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 1112652226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_source_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 protocol_uint64 = 139262509;
      case 139262509: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 1114100072 & 0xFF */)) {
          clear_protocol();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &protocol_.protocol_uint64_)));
          set_has_protocol_uint64();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue dscp = 215913306 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/dscp"];
      case 215913306: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 1727306450 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dscp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.enums.OpenconfigPacketMatchTypesIPPROTOCOL protocol_openconfigpacketmatchtypesipprotocol = 336703624;
      case 336703624: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 2693628992 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_protocol_openconfigpacketmatchtypesipprotocol(static_cast< ::openconfig::enums::OpenconfigPacketMatchTypesIPPROTOCOL >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue hop_limit = 362494135 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/hop-limit"];
      case 362494135: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 2899953082 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hop_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue destination_address = 384655847 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/destination-address"];
      case 384655847: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 3077246778 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State)
  return false;
#undef DO_
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue source_address = 139081528 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/source-address"];
  if (this->has_source_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      139081528, *this->source_address_, output);
  }

  // uint64 protocol_uint64 = 139262509;
  if (has_protocol_uint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(139262509, this->protocol_uint64(), output);
  }

  // .ywrapper.UintValue dscp = 215913306 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/dscp"];
  if (this->has_dscp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      215913306, *this->dscp_, output);
  }

  // .openconfig.enums.OpenconfigPacketMatchTypesIPPROTOCOL protocol_openconfigpacketmatchtypesipprotocol = 336703624;
  if (has_protocol_openconfigpacketmatchtypesipprotocol()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      336703624, this->protocol_openconfigpacketmatchtypesipprotocol(), output);
  }

  // .ywrapper.UintValue hop_limit = 362494135 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/hop-limit"];
  if (this->has_hop_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      362494135, *this->hop_limit_, output);
  }

  // .ywrapper.StringValue destination_address = 384655847 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/destination-address"];
  if (this->has_destination_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      384655847, *this->destination_address_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State)
}

::google::protobuf::uint8* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue source_address = 139081528 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/source-address"];
  if (this->has_source_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        139081528, *this->source_address_, deterministic, target);
  }

  // uint64 protocol_uint64 = 139262509;
  if (has_protocol_uint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(139262509, this->protocol_uint64(), target);
  }

  // .ywrapper.UintValue dscp = 215913306 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/dscp"];
  if (this->has_dscp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        215913306, *this->dscp_, deterministic, target);
  }

  // .openconfig.enums.OpenconfigPacketMatchTypesIPPROTOCOL protocol_openconfigpacketmatchtypesipprotocol = 336703624;
  if (has_protocol_openconfigpacketmatchtypesipprotocol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      336703624, this->protocol_openconfigpacketmatchtypesipprotocol(), target);
  }

  // .ywrapper.UintValue hop_limit = 362494135 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/hop-limit"];
  if (this->has_hop_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        362494135, *this->hop_limit_, deterministic, target);
  }

  // .ywrapper.StringValue destination_address = 384655847 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/destination-address"];
  if (this->has_destination_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        384655847, *this->destination_address_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State)
  return target;
}

size_t Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue source_address = 139081528 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/source-address"];
  if (this->has_source_address()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->source_address_);
  }

  // .ywrapper.UintValue dscp = 215913306 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/dscp"];
  if (this->has_dscp()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dscp_);
  }

  // .ywrapper.UintValue hop_limit = 362494135 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/hop-limit"];
  if (this->has_hop_limit()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->hop_limit_);
  }

  // .ywrapper.StringValue destination_address = 384655847 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/destination-address"];
  if (this->has_destination_address()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->destination_address_);
  }

  switch (protocol_case()) {
    // .openconfig.enums.OpenconfigPacketMatchTypesIPPROTOCOL protocol_openconfigpacketmatchtypesipprotocol = 336703624;
    case kProtocolOpenconfigpacketmatchtypesipprotocol: {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protocol_openconfigpacketmatchtypesipprotocol());
      break;
    }
    // uint64 protocol_uint64 = 139262509;
    case kProtocolUint64: {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->protocol_uint64());
      break;
    }
    case PROTOCOL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State)
    MergeFrom(*source);
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_source_address()) {
    mutable_source_address()->::ywrapper::StringValue::MergeFrom(from.source_address());
  }
  if (from.has_dscp()) {
    mutable_dscp()->::ywrapper::UintValue::MergeFrom(from.dscp());
  }
  if (from.has_hop_limit()) {
    mutable_hop_limit()->::ywrapper::UintValue::MergeFrom(from.hop_limit());
  }
  if (from.has_destination_address()) {
    mutable_destination_address()->::ywrapper::StringValue::MergeFrom(from.destination_address());
  }
  switch (from.protocol_case()) {
    case kProtocolOpenconfigpacketmatchtypesipprotocol: {
      set_protocol_openconfigpacketmatchtypesipprotocol(from.protocol_openconfigpacketmatchtypesipprotocol());
      break;
    }
    case kProtocolUint64: {
      set_protocol_uint64(from.protocol_uint64());
      break;
    }
    case PROTOCOL_NOT_SET: {
      break;
    }
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::IsInitialized() const {
  return true;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::Swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State* other) {
  using std::swap;
  swap(source_address_, other->source_address_);
  swap(dscp_, other->dscp_);
  swap(hop_limit_, other->hop_limit_);
  swap(destination_address_, other->destination_address_);
  swap(protocol_, other->protocol_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config*>(
      ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State*>(
      ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4::kConfigFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4)
}
Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4)
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&state_)) + sizeof(config_));
  _cached_size_ = 0;
}

Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4::~Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4)
  SharedDtor();
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete config_;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4& Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4();
  return *internal_default_instance();
}

Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4::New(::google::protobuf::Arena* arena) const {
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4* n = new Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(656412130u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State state = 26286517 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/state"];
      case 26286517: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 210292138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config config = 82051516 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/config"];
      case 82051516: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 656412130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4)
  return false;
#undef DO_
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State state = 26286517 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26286517, *this->state_, output);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config config = 82051516 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      82051516, *this->config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4)
}

::google::protobuf::uint8* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State state = 26286517 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        26286517, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config config = 82051516 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        82051516, *this->config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4)
  return target;
}

size_t Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State state = 26286517 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/state"];
  if (this->has_state()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config config = 82051516 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4)
    MergeFrom(*source);
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4::MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::MergeFrom(from.state());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::MergeFrom(from.config());
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4::CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4::IsInitialized() const {
  return true;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4::Swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4::InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(config_, other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config_default_instance_._instance.get_mutable()->destination_address_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config_default_instance_._instance.get_mutable()->destination_flow_label_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config_default_instance_._instance.get_mutable()->dscp_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config_default_instance_._instance.get_mutable()->hop_limit_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config_default_instance_.protocol_openconfigpacketmatchtypesipprotocol_ = 0;
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config_default_instance_.protocol_uint64_ = GOOGLE_ULONGLONG(0);
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config_default_instance_._instance.get_mutable()->source_address_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config_default_instance_._instance.get_mutable()->source_flow_label_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::clear_destination_address() {
  if (GetArenaNoVirtual() == NULL && destination_address_ != NULL) {
    delete destination_address_;
  }
  destination_address_ = NULL;
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::clear_destination_flow_label() {
  if (GetArenaNoVirtual() == NULL && destination_flow_label_ != NULL) {
    delete destination_flow_label_;
  }
  destination_flow_label_ = NULL;
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::clear_dscp() {
  if (GetArenaNoVirtual() == NULL && dscp_ != NULL) {
    delete dscp_;
  }
  dscp_ = NULL;
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::clear_hop_limit() {
  if (GetArenaNoVirtual() == NULL && hop_limit_ != NULL) {
    delete hop_limit_;
  }
  hop_limit_ = NULL;
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::clear_source_address() {
  if (GetArenaNoVirtual() == NULL && source_address_ != NULL) {
    delete source_address_;
  }
  source_address_ = NULL;
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::clear_source_flow_label() {
  if (GetArenaNoVirtual() == NULL && source_flow_label_ != NULL) {
    delete source_flow_label_;
  }
  source_flow_label_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::kDestinationAddressFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::kDestinationFlowLabelFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::kDscpFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::kHopLimitFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::kProtocolOpenconfigpacketmatchtypesipprotocolFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::kProtocolUint64FieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::kSourceAddressFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::kSourceFlowLabelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config)
}
Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_destination_flow_label()) {
    destination_flow_label_ = new ::ywrapper::UintValue(*from.destination_flow_label_);
  } else {
    destination_flow_label_ = NULL;
  }
  if (from.has_destination_address()) {
    destination_address_ = new ::ywrapper::StringValue(*from.destination_address_);
  } else {
    destination_address_ = NULL;
  }
  if (from.has_source_flow_label()) {
    source_flow_label_ = new ::ywrapper::UintValue(*from.source_flow_label_);
  } else {
    source_flow_label_ = NULL;
  }
  if (from.has_hop_limit()) {
    hop_limit_ = new ::ywrapper::UintValue(*from.hop_limit_);
  } else {
    hop_limit_ = NULL;
  }
  if (from.has_dscp()) {
    dscp_ = new ::ywrapper::UintValue(*from.dscp_);
  } else {
    dscp_ = NULL;
  }
  if (from.has_source_address()) {
    source_address_ = new ::ywrapper::StringValue(*from.source_address_);
  } else {
    source_address_ = NULL;
  }
  clear_has_protocol();
  switch (from.protocol_case()) {
    case kProtocolOpenconfigpacketmatchtypesipprotocol: {
      set_protocol_openconfigpacketmatchtypesipprotocol(from.protocol_openconfigpacketmatchtypesipprotocol());
      break;
    }
    case kProtocolUint64: {
      set_protocol_uint64(from.protocol_uint64());
      break;
    }
    case PROTOCOL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config)
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::SharedCtor() {
  ::memset(&destination_flow_label_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_address_) -
      reinterpret_cast<char*>(&destination_flow_label_)) + sizeof(source_address_));
  clear_has_protocol();
  _cached_size_ = 0;
}

Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::~Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config)
  SharedDtor();
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::SharedDtor() {
  if (this != internal_default_instance()) delete destination_flow_label_;
  if (this != internal_default_instance()) delete destination_address_;
  if (this != internal_default_instance()) delete source_flow_label_;
  if (this != internal_default_instance()) delete hop_limit_;
  if (this != internal_default_instance()) delete dscp_;
  if (this != internal_default_instance()) delete source_address_;
  if (has_protocol()) {
    clear_protocol();
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config& Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config();
  return *internal_default_instance();
}

Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::New(::google::protobuf::Arena* arena) const {
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config* n = new Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::clear_protocol() {
// @@protoc_insertion_point(one_of_clear_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config)
  switch (protocol_case()) {
    case kProtocolOpenconfigpacketmatchtypesipprotocol: {
      // No need to clear
      break;
    }
    case kProtocolUint64: {
      // No need to clear
      break;
    }
    case PROTOCOL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PROTOCOL_NOT_SET;
}


void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && destination_flow_label_ != NULL) {
    delete destination_flow_label_;
  }
  destination_flow_label_ = NULL;
  if (GetArenaNoVirtual() == NULL && destination_address_ != NULL) {
    delete destination_address_;
  }
  destination_address_ = NULL;
  if (GetArenaNoVirtual() == NULL && source_flow_label_ != NULL) {
    delete source_flow_label_;
  }
  source_flow_label_ = NULL;
  if (GetArenaNoVirtual() == NULL && hop_limit_ != NULL) {
    delete hop_limit_;
  }
  hop_limit_ = NULL;
  if (GetArenaNoVirtual() == NULL && dscp_ != NULL) {
    delete dscp_;
  }
  dscp_ = NULL;
  if (GetArenaNoVirtual() == NULL && source_address_ != NULL) {
    delete source_address_;
  }
  source_address_ = NULL;
  clear_protocol();
  _internal_metadata_.Clear();
}

bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3989147914u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue destination_flow_label = 26892661 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/destination-flow-label"];
      case 26892661: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 215141290 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_flow_label()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 protocol_uint64 = 50630658;
      case 50630658: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 405045264 & 0xFF */)) {
          clear_protocol();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &protocol_.protocol_uint64_)));
          set_has_protocol_uint64();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue destination_address = 139860024 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/destination-address"];
      case 139860024: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 1118880194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue source_flow_label = 158748530 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/source-flow-label"];
      case 158748530: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 1269988242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_source_flow_label()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue hop_limit = 233120028 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/hop-limit"];
      case 233120028: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 1864960226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hop_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue dscp = 482221487 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/dscp"];
      case 482221487: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 3857771898 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dscp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.enums.OpenconfigPacketMatchTypesIPPROTOCOL protocol_openconfigpacketmatchtypesipprotocol = 483684219;
      case 483684219: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 3869473752 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_protocol_openconfigpacketmatchtypesipprotocol(static_cast< ::openconfig::enums::OpenconfigPacketMatchTypesIPPROTOCOL >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue source_address = 498643489 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/source-address"];
      case 498643489: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 3989147914 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_source_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config)
  return false;
#undef DO_
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue destination_flow_label = 26892661 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/destination-flow-label"];
  if (this->has_destination_flow_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26892661, *this->destination_flow_label_, output);
  }

  // uint64 protocol_uint64 = 50630658;
  if (has_protocol_uint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(50630658, this->protocol_uint64(), output);
  }

  // .ywrapper.StringValue destination_address = 139860024 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/destination-address"];
  if (this->has_destination_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      139860024, *this->destination_address_, output);
  }

  // .ywrapper.UintValue source_flow_label = 158748530 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/source-flow-label"];
  if (this->has_source_flow_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      158748530, *this->source_flow_label_, output);
  }

  // .ywrapper.UintValue hop_limit = 233120028 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/hop-limit"];
  if (this->has_hop_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      233120028, *this->hop_limit_, output);
  }

  // .ywrapper.UintValue dscp = 482221487 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/dscp"];
  if (this->has_dscp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      482221487, *this->dscp_, output);
  }

  // .openconfig.enums.OpenconfigPacketMatchTypesIPPROTOCOL protocol_openconfigpacketmatchtypesipprotocol = 483684219;
  if (has_protocol_openconfigpacketmatchtypesipprotocol()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      483684219, this->protocol_openconfigpacketmatchtypesipprotocol(), output);
  }

  // .ywrapper.StringValue source_address = 498643489 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/source-address"];
  if (this->has_source_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      498643489, *this->source_address_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config)
}

::google::protobuf::uint8* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue destination_flow_label = 26892661 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/destination-flow-label"];
  if (this->has_destination_flow_label()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        26892661, *this->destination_flow_label_, deterministic, target);
  }

  // uint64 protocol_uint64 = 50630658;
  if (has_protocol_uint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(50630658, this->protocol_uint64(), target);
  }

  // .ywrapper.StringValue destination_address = 139860024 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/destination-address"];
  if (this->has_destination_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        139860024, *this->destination_address_, deterministic, target);
  }

  // .ywrapper.UintValue source_flow_label = 158748530 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/source-flow-label"];
  if (this->has_source_flow_label()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        158748530, *this->source_flow_label_, deterministic, target);
  }

  // .ywrapper.UintValue hop_limit = 233120028 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/hop-limit"];
  if (this->has_hop_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        233120028, *this->hop_limit_, deterministic, target);
  }

  // .ywrapper.UintValue dscp = 482221487 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/dscp"];
  if (this->has_dscp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        482221487, *this->dscp_, deterministic, target);
  }

  // .openconfig.enums.OpenconfigPacketMatchTypesIPPROTOCOL protocol_openconfigpacketmatchtypesipprotocol = 483684219;
  if (has_protocol_openconfigpacketmatchtypesipprotocol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      483684219, this->protocol_openconfigpacketmatchtypesipprotocol(), target);
  }

  // .ywrapper.StringValue source_address = 498643489 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/source-address"];
  if (this->has_source_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        498643489, *this->source_address_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config)
  return target;
}

size_t Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue destination_flow_label = 26892661 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/destination-flow-label"];
  if (this->has_destination_flow_label()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->destination_flow_label_);
  }

  // .ywrapper.StringValue destination_address = 139860024 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/destination-address"];
  if (this->has_destination_address()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->destination_address_);
  }

  // .ywrapper.UintValue source_flow_label = 158748530 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/source-flow-label"];
  if (this->has_source_flow_label()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->source_flow_label_);
  }

  // .ywrapper.UintValue hop_limit = 233120028 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/hop-limit"];
  if (this->has_hop_limit()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->hop_limit_);
  }

  // .ywrapper.UintValue dscp = 482221487 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/dscp"];
  if (this->has_dscp()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dscp_);
  }

  // .ywrapper.StringValue source_address = 498643489 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/source-address"];
  if (this->has_source_address()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->source_address_);
  }

  switch (protocol_case()) {
    // .openconfig.enums.OpenconfigPacketMatchTypesIPPROTOCOL protocol_openconfigpacketmatchtypesipprotocol = 483684219;
    case kProtocolOpenconfigpacketmatchtypesipprotocol: {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protocol_openconfigpacketmatchtypesipprotocol());
      break;
    }
    // uint64 protocol_uint64 = 50630658;
    case kProtocolUint64: {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->protocol_uint64());
      break;
    }
    case PROTOCOL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config)
    MergeFrom(*source);
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_destination_flow_label()) {
    mutable_destination_flow_label()->::ywrapper::UintValue::MergeFrom(from.destination_flow_label());
  }
  if (from.has_destination_address()) {
    mutable_destination_address()->::ywrapper::StringValue::MergeFrom(from.destination_address());
  }
  if (from.has_source_flow_label()) {
    mutable_source_flow_label()->::ywrapper::UintValue::MergeFrom(from.source_flow_label());
  }
  if (from.has_hop_limit()) {
    mutable_hop_limit()->::ywrapper::UintValue::MergeFrom(from.hop_limit());
  }
  if (from.has_dscp()) {
    mutable_dscp()->::ywrapper::UintValue::MergeFrom(from.dscp());
  }
  if (from.has_source_address()) {
    mutable_source_address()->::ywrapper::StringValue::MergeFrom(from.source_address());
  }
  switch (from.protocol_case()) {
    case kProtocolOpenconfigpacketmatchtypesipprotocol: {
      set_protocol_openconfigpacketmatchtypesipprotocol(from.protocol_openconfigpacketmatchtypesipprotocol());
      break;
    }
    case kProtocolUint64: {
      set_protocol_uint64(from.protocol_uint64());
      break;
    }
    case PROTOCOL_NOT_SET: {
      break;
    }
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::IsInitialized() const {
  return true;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::Swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config* other) {
  using std::swap;
  swap(destination_flow_label_, other->destination_flow_label_);
  swap(destination_address_, other->destination_address_);
  swap(source_flow_label_, other->source_flow_label_);
  swap(hop_limit_, other->hop_limit_);
  swap(dscp_, other->dscp_);
  swap(source_address_, other->source_address_);
  swap(protocol_, other->protocol_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State_default_instance_._instance.get_mutable()->destination_address_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State_default_instance_._instance.get_mutable()->destination_flow_label_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State_default_instance_._instance.get_mutable()->dscp_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State_default_instance_._instance.get_mutable()->hop_limit_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State_default_instance_.protocol_openconfigpacketmatchtypesipprotocol_ = 0;
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State_default_instance_.protocol_uint64_ = GOOGLE_ULONGLONG(0);
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State_default_instance_._instance.get_mutable()->source_address_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State_default_instance_._instance.get_mutable()->source_flow_label_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::clear_destination_address() {
  if (GetArenaNoVirtual() == NULL && destination_address_ != NULL) {
    delete destination_address_;
  }
  destination_address_ = NULL;
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::clear_destination_flow_label() {
  if (GetArenaNoVirtual() == NULL && destination_flow_label_ != NULL) {
    delete destination_flow_label_;
  }
  destination_flow_label_ = NULL;
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::clear_dscp() {
  if (GetArenaNoVirtual() == NULL && dscp_ != NULL) {
    delete dscp_;
  }
  dscp_ = NULL;
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::clear_hop_limit() {
  if (GetArenaNoVirtual() == NULL && hop_limit_ != NULL) {
    delete hop_limit_;
  }
  hop_limit_ = NULL;
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::clear_source_address() {
  if (GetArenaNoVirtual() == NULL && source_address_ != NULL) {
    delete source_address_;
  }
  source_address_ = NULL;
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::clear_source_flow_label() {
  if (GetArenaNoVirtual() == NULL && source_flow_label_ != NULL) {
    delete source_flow_label_;
  }
  source_flow_label_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::kDestinationAddressFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::kDestinationFlowLabelFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::kDscpFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::kHopLimitFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::kProtocolOpenconfigpacketmatchtypesipprotocolFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::kProtocolUint64FieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::kSourceAddressFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::kSourceFlowLabelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State)
}
Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_source_flow_label()) {
    source_flow_label_ = new ::ywrapper::UintValue(*from.source_flow_label_);
  } else {
    source_flow_label_ = NULL;
  }
  if (from.has_source_address()) {
    source_address_ = new ::ywrapper::StringValue(*from.source_address_);
  } else {
    source_address_ = NULL;
  }
  if (from.has_destination_address()) {
    destination_address_ = new ::ywrapper::StringValue(*from.destination_address_);
  } else {
    destination_address_ = NULL;
  }
  if (from.has_dscp()) {
    dscp_ = new ::ywrapper::UintValue(*from.dscp_);
  } else {
    dscp_ = NULL;
  }
  if (from.has_destination_flow_label()) {
    destination_flow_label_ = new ::ywrapper::UintValue(*from.destination_flow_label_);
  } else {
    destination_flow_label_ = NULL;
  }
  if (from.has_hop_limit()) {
    hop_limit_ = new ::ywrapper::UintValue(*from.hop_limit_);
  } else {
    hop_limit_ = NULL;
  }
  clear_has_protocol();
  switch (from.protocol_case()) {
    case kProtocolOpenconfigpacketmatchtypesipprotocol: {
      set_protocol_openconfigpacketmatchtypesipprotocol(from.protocol_openconfigpacketmatchtypesipprotocol());
      break;
    }
    case kProtocolUint64: {
      set_protocol_uint64(from.protocol_uint64());
      break;
    }
    case PROTOCOL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State)
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::SharedCtor() {
  ::memset(&source_flow_label_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hop_limit_) -
      reinterpret_cast<char*>(&source_flow_label_)) + sizeof(hop_limit_));
  clear_has_protocol();
  _cached_size_ = 0;
}

Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::~Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State)
  SharedDtor();
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::SharedDtor() {
  if (this != internal_default_instance()) delete source_flow_label_;
  if (this != internal_default_instance()) delete source_address_;
  if (this != internal_default_instance()) delete destination_address_;
  if (this != internal_default_instance()) delete dscp_;
  if (this != internal_default_instance()) delete destination_flow_label_;
  if (this != internal_default_instance()) delete hop_limit_;
  if (has_protocol()) {
    clear_protocol();
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State& Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State();
  return *internal_default_instance();
}

Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::New(::google::protobuf::Arena* arena) const {
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State* n = new Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::clear_protocol() {
// @@protoc_insertion_point(one_of_clear_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State)
  switch (protocol_case()) {
    case kProtocolOpenconfigpacketmatchtypesipprotocol: {
      // No need to clear
      break;
    }
    case kProtocolUint64: {
      // No need to clear
      break;
    }
    case PROTOCOL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PROTOCOL_NOT_SET;
}


void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && source_flow_label_ != NULL) {
    delete source_flow_label_;
  }
  source_flow_label_ = NULL;
  if (GetArenaNoVirtual() == NULL && source_address_ != NULL) {
    delete source_address_;
  }
  source_address_ = NULL;
  if (GetArenaNoVirtual() == NULL && destination_address_ != NULL) {
    delete destination_address_;
  }
  destination_address_ = NULL;
  if (GetArenaNoVirtual() == NULL && dscp_ != NULL) {
    delete dscp_;
  }
  dscp_ = NULL;
  if (GetArenaNoVirtual() == NULL && destination_flow_label_ != NULL) {
    delete destination_flow_label_;
  }
  destination_flow_label_ = NULL;
  if (GetArenaNoVirtual() == NULL && hop_limit_ != NULL) {
    delete hop_limit_;
  }
  hop_limit_ = NULL;
  clear_protocol();
  _internal_metadata_.Clear();
}

bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3778512362u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 protocol_uint64 = 136889423;
      case 136889423: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 1095115384 & 0xFF */)) {
          clear_protocol();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &protocol_.protocol_uint64_)));
          set_has_protocol_uint64();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue source_flow_label = 218402383 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-flow-label"];
      case 218402383: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 1747219066 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_source_flow_label()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue source_address = 239778034 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-address"];
      case 239778034: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 1918224274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_source_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.enums.OpenconfigPacketMatchTypesIPPROTOCOL protocol_openconfigpacketmatchtypesipprotocol = 248928978;
      case 248928978: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 1991431824 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_protocol_openconfigpacketmatchtypesipprotocol(static_cast< ::openconfig::enums::OpenconfigPacketMatchTypesIPPROTOCOL >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue destination_address = 268066477 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-address"];
      case 268066477: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 2144531818 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue dscp = 297057864 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/dscp"];
      case 297057864: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 2376462914 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dscp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue destination_flow_label = 333529406 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-flow-label"];
      case 333529406: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 2668235250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_flow_label()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue hop_limit = 472314045 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/hop-limit"];
      case 472314045: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 3778512362 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hop_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State)
  return false;
#undef DO_
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 protocol_uint64 = 136889423;
  if (has_protocol_uint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(136889423, this->protocol_uint64(), output);
  }

  // .ywrapper.UintValue source_flow_label = 218402383 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-flow-label"];
  if (this->has_source_flow_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      218402383, *this->source_flow_label_, output);
  }

  // .ywrapper.StringValue source_address = 239778034 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-address"];
  if (this->has_source_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      239778034, *this->source_address_, output);
  }

  // .openconfig.enums.OpenconfigPacketMatchTypesIPPROTOCOL protocol_openconfigpacketmatchtypesipprotocol = 248928978;
  if (has_protocol_openconfigpacketmatchtypesipprotocol()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      248928978, this->protocol_openconfigpacketmatchtypesipprotocol(), output);
  }

  // .ywrapper.StringValue destination_address = 268066477 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-address"];
  if (this->has_destination_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      268066477, *this->destination_address_, output);
  }

  // .ywrapper.UintValue dscp = 297057864 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/dscp"];
  if (this->has_dscp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      297057864, *this->dscp_, output);
  }

  // .ywrapper.UintValue destination_flow_label = 333529406 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-flow-label"];
  if (this->has_destination_flow_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      333529406, *this->destination_flow_label_, output);
  }

  // .ywrapper.UintValue hop_limit = 472314045 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/hop-limit"];
  if (this->has_hop_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      472314045, *this->hop_limit_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State)
}

::google::protobuf::uint8* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 protocol_uint64 = 136889423;
  if (has_protocol_uint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(136889423, this->protocol_uint64(), target);
  }

  // .ywrapper.UintValue source_flow_label = 218402383 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-flow-label"];
  if (this->has_source_flow_label()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        218402383, *this->source_flow_label_, deterministic, target);
  }

  // .ywrapper.StringValue source_address = 239778034 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-address"];
  if (this->has_source_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        239778034, *this->source_address_, deterministic, target);
  }

  // .openconfig.enums.OpenconfigPacketMatchTypesIPPROTOCOL protocol_openconfigpacketmatchtypesipprotocol = 248928978;
  if (has_protocol_openconfigpacketmatchtypesipprotocol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      248928978, this->protocol_openconfigpacketmatchtypesipprotocol(), target);
  }

  // .ywrapper.StringValue destination_address = 268066477 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-address"];
  if (this->has_destination_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        268066477, *this->destination_address_, deterministic, target);
  }

  // .ywrapper.UintValue dscp = 297057864 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/dscp"];
  if (this->has_dscp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        297057864, *this->dscp_, deterministic, target);
  }

  // .ywrapper.UintValue destination_flow_label = 333529406 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-flow-label"];
  if (this->has_destination_flow_label()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        333529406, *this->destination_flow_label_, deterministic, target);
  }

  // .ywrapper.UintValue hop_limit = 472314045 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/hop-limit"];
  if (this->has_hop_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        472314045, *this->hop_limit_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State)
  return target;
}

size_t Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue source_flow_label = 218402383 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-flow-label"];
  if (this->has_source_flow_label()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->source_flow_label_);
  }

  // .ywrapper.StringValue source_address = 239778034 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-address"];
  if (this->has_source_address()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->source_address_);
  }

  // .ywrapper.StringValue destination_address = 268066477 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-address"];
  if (this->has_destination_address()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->destination_address_);
  }

  // .ywrapper.UintValue dscp = 297057864 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/dscp"];
  if (this->has_dscp()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dscp_);
  }

  // .ywrapper.UintValue destination_flow_label = 333529406 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-flow-label"];
  if (this->has_destination_flow_label()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->destination_flow_label_);
  }

  // .ywrapper.UintValue hop_limit = 472314045 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/hop-limit"];
  if (this->has_hop_limit()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->hop_limit_);
  }

  switch (protocol_case()) {
    // .openconfig.enums.OpenconfigPacketMatchTypesIPPROTOCOL protocol_openconfigpacketmatchtypesipprotocol = 248928978;
    case kProtocolOpenconfigpacketmatchtypesipprotocol: {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protocol_openconfigpacketmatchtypesipprotocol());
      break;
    }
    // uint64 protocol_uint64 = 136889423;
    case kProtocolUint64: {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->protocol_uint64());
      break;
    }
    case PROTOCOL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State)
    MergeFrom(*source);
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_source_flow_label()) {
    mutable_source_flow_label()->::ywrapper::UintValue::MergeFrom(from.source_flow_label());
  }
  if (from.has_source_address()) {
    mutable_source_address()->::ywrapper::StringValue::MergeFrom(from.source_address());
  }
  if (from.has_destination_address()) {
    mutable_destination_address()->::ywrapper::StringValue::MergeFrom(from.destination_address());
  }
  if (from.has_dscp()) {
    mutable_dscp()->::ywrapper::UintValue::MergeFrom(from.dscp());
  }
  if (from.has_destination_flow_label()) {
    mutable_destination_flow_label()->::ywrapper::UintValue::MergeFrom(from.destination_flow_label());
  }
  if (from.has_hop_limit()) {
    mutable_hop_limit()->::ywrapper::UintValue::MergeFrom(from.hop_limit());
  }
  switch (from.protocol_case()) {
    case kProtocolOpenconfigpacketmatchtypesipprotocol: {
      set_protocol_openconfigpacketmatchtypesipprotocol(from.protocol_openconfigpacketmatchtypesipprotocol());
      break;
    }
    case kProtocolUint64: {
      set_protocol_uint64(from.protocol_uint64());
      break;
    }
    case PROTOCOL_NOT_SET: {
      break;
    }
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::IsInitialized() const {
  return true;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::Swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State* other) {
  using std::swap;
  swap(source_flow_label_, other->source_flow_label_);
  swap(source_address_, other->source_address_);
  swap(destination_address_, other->destination_address_);
  swap(dscp_, other->dscp_);
  swap(destination_flow_label_, other->destination_flow_label_);
  swap(hop_limit_, other->hop_limit_);
  swap(protocol_, other->protocol_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config*>(
      ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State*>(
      ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6::kConfigFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6)
}
Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6)
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&state_)) + sizeof(config_));
  _cached_size_ = 0;
}

Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6::~Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6)
  SharedDtor();
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete config_;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6& Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6();
  return *internal_default_instance();
}

Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6::New(::google::protobuf::Arena* arena) const {
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6* n = new Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3715203826u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State state = 39645643 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state"];
      case 39645643: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 317165146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config config = 464400478 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config"];
      case 464400478: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 3715203826 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6)
  return false;
#undef DO_
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State state = 39645643 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39645643, *this->state_, output);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config config = 464400478 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      464400478, *this->config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6)
}

::google::protobuf::uint8* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State state = 39645643 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        39645643, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config config = 464400478 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        464400478, *this->config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6)
  return target;
}

size_t Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State state = 39645643 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config config = 464400478 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6)
    MergeFrom(*source);
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6::MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::MergeFrom(from.state());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::MergeFrom(from.config());
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6::CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6::IsInitialized() const {
  return true;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6::Swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6::InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(config_, other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config_default_instance_._instance.get_mutable()->destination_mac_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config_default_instance_._instance.get_mutable()->destination_mac_mask_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config_default_instance_.ethertype_openconfigpacketmatchtypesethertype_ = 0;
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config_default_instance_.ethertype_uint64_ = GOOGLE_ULONGLONG(0);
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config_default_instance_._instance.get_mutable()->source_mac_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config_default_instance_._instance.get_mutable()->source_mac_mask_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::clear_destination_mac() {
  if (GetArenaNoVirtual() == NULL && destination_mac_ != NULL) {
    delete destination_mac_;
  }
  destination_mac_ = NULL;
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::clear_destination_mac_mask() {
  if (GetArenaNoVirtual() == NULL && destination_mac_mask_ != NULL) {
    delete destination_mac_mask_;
  }
  destination_mac_mask_ = NULL;
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::clear_source_mac() {
  if (GetArenaNoVirtual() == NULL && source_mac_ != NULL) {
    delete source_mac_;
  }
  source_mac_ = NULL;
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::clear_source_mac_mask() {
  if (GetArenaNoVirtual() == NULL && source_mac_mask_ != NULL) {
    delete source_mac_mask_;
  }
  source_mac_mask_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::kDestinationMacFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::kDestinationMacMaskFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::kEthertypeOpenconfigpacketmatchtypesethertypeFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::kEthertypeUint64FieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::kSourceMacFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::kSourceMacMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config)
}
Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config(const Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_source_mac()) {
    source_mac_ = new ::ywrapper::StringValue(*from.source_mac_);
  } else {
    source_mac_ = NULL;
  }
  if (from.has_source_mac_mask()) {
    source_mac_mask_ = new ::ywrapper::StringValue(*from.source_mac_mask_);
  } else {
    source_mac_mask_ = NULL;
  }
  if (from.has_destination_mac_mask()) {
    destination_mac_mask_ = new ::ywrapper::StringValue(*from.destination_mac_mask_);
  } else {
    destination_mac_mask_ = NULL;
  }
  if (from.has_destination_mac()) {
    destination_mac_ = new ::ywrapper::StringValue(*from.destination_mac_);
  } else {
    destination_mac_ = NULL;
  }
  clear_has_ethertype();
  switch (from.ethertype_case()) {
    case kEthertypeOpenconfigpacketmatchtypesethertype: {
      set_ethertype_openconfigpacketmatchtypesethertype(from.ethertype_openconfigpacketmatchtypesethertype());
      break;
    }
    case kEthertypeUint64: {
      set_ethertype_uint64(from.ethertype_uint64());
      break;
    }
    case ETHERTYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config)
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::SharedCtor() {
  ::memset(&source_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&destination_mac_) -
      reinterpret_cast<char*>(&source_mac_)) + sizeof(destination_mac_));
  clear_has_ethertype();
  _cached_size_ = 0;
}

Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::~Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config)
  SharedDtor();
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::SharedDtor() {
  if (this != internal_default_instance()) delete source_mac_;
  if (this != internal_default_instance()) delete source_mac_mask_;
  if (this != internal_default_instance()) delete destination_mac_mask_;
  if (this != internal_default_instance()) delete destination_mac_;
  if (has_ethertype()) {
    clear_ethertype();
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config& Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config();
  return *internal_default_instance();
}

Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config* Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::New(::google::protobuf::Arena* arena) const {
  Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config* n = new Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::clear_ethertype() {
// @@protoc_insertion_point(one_of_clear_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config)
  switch (ethertype_case()) {
    case kEthertypeOpenconfigpacketmatchtypesethertype: {
      // No need to clear
      break;
    }
    case kEthertypeUint64: {
      // No need to clear
      break;
    }
    case ETHERTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ETHERTYPE_NOT_SET;
}


void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && source_mac_ != NULL) {
    delete source_mac_;
  }
  source_mac_ = NULL;
  if (GetArenaNoVirtual() == NULL && source_mac_mask_ != NULL) {
    delete source_mac_mask_;
  }
  source_mac_mask_ = NULL;
  if (GetArenaNoVirtual() == NULL && destination_mac_mask_ != NULL) {
    delete destination_mac_mask_;
  }
  destination_mac_mask_ = NULL;
  if (GetArenaNoVirtual() == NULL && destination_mac_ != NULL) {
    delete destination_mac_;
  }
  destination_mac_ = NULL;
  clear_ethertype();
  _internal_metadata_.Clear();
}

bool Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4124884018u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue source_mac = 658529 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/config/source-mac"];
      case 658529: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 5268234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_source_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue source_mac_mask = 49113846 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/config/source-mac-mask"];
      case 49113846: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 392910770 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_source_mac_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 ethertype_uint64 = 132607809;
      case 132607809: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 1060862472 & 0xFF */)) {
          clear_ethertype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ethertype_.ethertype_uint64_)));
          set_has_ethertype_uint64();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.enums.OpenconfigPacketMatchTypesETHERTYPE ethertype_openconfigpacketmatchtypesethertype = 245699045;
      case 245699045: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 1965592360 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ethertype_openconfigpacketmatchtypesethertype(static_cast< ::openconfig::enums::OpenconfigPacketMatchTypesETHERTYPE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue destination_mac_mask = 287932171 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/config/destination-mac-mask"];
      case 287932171: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 2303457370 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_mac_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue destination_mac = 515610502 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/config/destination-mac"];
      case 515610502: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 4124884018 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config)
  return false;
#undef DO_
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue source_mac = 658529 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/config/source-mac"];
  if (this->has_source_mac()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      658529, *this->source_mac_, output);
  }

  // .ywrapper.StringValue source_mac_mask = 49113846 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/config/source-mac-mask"];
  if (this->has_source_mac_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      49113846, *this->source_mac_mask_, output);
  }

  // uint64 ethertype_uint64 = 132607809;
  if (has_ethertype_uint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(132607809, this->ethertype_uint64(), output);
  }

  // .openconfig.enums.OpenconfigPacketMatchTypesETHERTYPE ethertype_openconfigpacketmatchtypesethertype = 245699045;
  if (has_ethertype_openconfigpacketmatchtypesethertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      245699045, this->ethertype_openconfigpacketmatchtypesethertype(), output);
  }

  // .ywrapper.StringValue destination_mac_mask = 287932171 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/config/destination-mac-mask"];
  if (this->has_destination_mac_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      287932171, *this->destination_mac_mask_, output);
  }

  // .ywrapper.StringValue destination_mac = 515610502 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/config/destination-mac"];
  if (this->has_destination_mac()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      515610502, *this->destination_mac_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config)
}

::google::protobuf::uint8* Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue source_mac = 658529 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/config/source-mac"];
  if (this->has_source_mac()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        658529, *this->source_mac_, deterministic, target);
  }

  // .ywrapper.StringValue source_mac_mask = 49113846 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/config/source-mac-mask"];
  if (this->has_source_mac_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        49113846, *this->source_mac_mask_, deterministic, target);
  }

  // uint64 ethertype_uint64 = 132607809;
  if (has_ethertype_uint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(132607809, this->ethertype_uint64(), target);
  }

  // .openconfig.enums.OpenconfigPacketMatchTypesETHERTYPE ethertype_openconfigpacketmatchtypesethertype = 245699045;
  if (has_ethertype_openconfigpacketmatchtypesethertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      245699045, this->ethertype_openconfigpacketmatchtypesethertype(), target);
  }

  // .ywrapper.StringValue destination_mac_mask = 287932171 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/config/destination-mac-mask"];
  if (this->has_destination_mac_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        287932171, *this->destination_mac_mask_, deterministic, target);
  }

  // .ywrapper.StringValue destination_mac = 515610502 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/config/destination-mac"];
  if (this->has_destination_mac()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        515610502, *this->destination_mac_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config)
  return target;
}

size_t Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue source_mac = 658529 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/config/source-mac"];
  if (this->has_source_mac()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->source_mac_);
  }

  // .ywrapper.StringValue source_mac_mask = 49113846 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/config/source-mac-mask"];
  if (this->has_source_mac_mask()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->source_mac_mask_);
  }

  // .ywrapper.StringValue destination_mac_mask = 287932171 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/config/destination-mac-mask"];
  if (this->has_destination_mac_mask()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->destination_mac_mask_);
  }

  // .ywrapper.StringValue destination_mac = 515610502 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/config/destination-mac"];
  if (this->has_destination_mac()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->destination_mac_);
  }

  switch (ethertype_case()) {
    // .openconfig.enums.OpenconfigPacketMatchTypesETHERTYPE ethertype_openconfigpacketmatchtypesethertype = 245699045;
    case kEthertypeOpenconfigpacketmatchtypesethertype: {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ethertype_openconfigpacketmatchtypesethertype());
      break;
    }
    // uint64 ethertype_uint64 = 132607809;
    case kEthertypeUint64: {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ethertype_uint64());
      break;
    }
    case ETHERTYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config)
    MergeFrom(*source);
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_source_mac()) {
    mutable_source_mac()->::ywrapper::StringValue::MergeFrom(from.source_mac());
  }
  if (from.has_source_mac_mask()) {
    mutable_source_mac_mask()->::ywrapper::StringValue::MergeFrom(from.source_mac_mask());
  }
  if (from.has_destination_mac_mask()) {
    mutable_destination_mac_mask()->::ywrapper::StringValue::MergeFrom(from.destination_mac_mask());
  }
  if (from.has_destination_mac()) {
    mutable_destination_mac()->::ywrapper::StringValue::MergeFrom(from.destination_mac());
  }
  switch (from.ethertype_case()) {
    case kEthertypeOpenconfigpacketmatchtypesethertype: {
      set_ethertype_openconfigpacketmatchtypesethertype(from.ethertype_openconfigpacketmatchtypesethertype());
      break;
    }
    case kEthertypeUint64: {
      set_ethertype_uint64(from.ethertype_uint64());
      break;
    }
    case ETHERTYPE_NOT_SET: {
      break;
    }
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::IsInitialized() const {
  return true;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::Swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config* other) {
  using std::swap;
  swap(source_mac_, other->source_mac_);
  swap(source_mac_mask_, other->source_mac_mask_);
  swap(destination_mac_mask_, other->destination_mac_mask_);
  swap(destination_mac_, other->destination_mac_);
  swap(ethertype_, other->ethertype_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State_default_instance_._instance.get_mutable()->destination_mac_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State_default_instance_._instance.get_mutable()->destination_mac_mask_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State_default_instance_.ethertype_openconfigpacketmatchtypesethertype_ = 0;
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State_default_instance_.ethertype_uint64_ = GOOGLE_ULONGLONG(0);
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State_default_instance_._instance.get_mutable()->source_mac_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State_default_instance_._instance.get_mutable()->source_mac_mask_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::clear_destination_mac() {
  if (GetArenaNoVirtual() == NULL && destination_mac_ != NULL) {
    delete destination_mac_;
  }
  destination_mac_ = NULL;
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::clear_destination_mac_mask() {
  if (GetArenaNoVirtual() == NULL && destination_mac_mask_ != NULL) {
    delete destination_mac_mask_;
  }
  destination_mac_mask_ = NULL;
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::clear_source_mac() {
  if (GetArenaNoVirtual() == NULL && source_mac_ != NULL) {
    delete source_mac_;
  }
  source_mac_ = NULL;
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::clear_source_mac_mask() {
  if (GetArenaNoVirtual() == NULL && source_mac_mask_ != NULL) {
    delete source_mac_mask_;
  }
  source_mac_mask_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::kDestinationMacFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::kDestinationMacMaskFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::kEthertypeOpenconfigpacketmatchtypesethertypeFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::kEthertypeUint64FieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::kSourceMacFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::kSourceMacMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_L2_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State)
}
Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State(const Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_destination_mac_mask()) {
    destination_mac_mask_ = new ::ywrapper::StringValue(*from.destination_mac_mask_);
  } else {
    destination_mac_mask_ = NULL;
  }
  if (from.has_source_mac_mask()) {
    source_mac_mask_ = new ::ywrapper::StringValue(*from.source_mac_mask_);
  } else {
    source_mac_mask_ = NULL;
  }
  if (from.has_destination_mac()) {
    destination_mac_ = new ::ywrapper::StringValue(*from.destination_mac_);
  } else {
    destination_mac_ = NULL;
  }
  if (from.has_source_mac()) {
    source_mac_ = new ::ywrapper::StringValue(*from.source_mac_);
  } else {
    source_mac_ = NULL;
  }
  clear_has_ethertype();
  switch (from.ethertype_case()) {
    case kEthertypeOpenconfigpacketmatchtypesethertype: {
      set_ethertype_openconfigpacketmatchtypesethertype(from.ethertype_openconfigpacketmatchtypesethertype());
      break;
    }
    case kEthertypeUint64: {
      set_ethertype_uint64(from.ethertype_uint64());
      break;
    }
    case ETHERTYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State)
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::SharedCtor() {
  ::memset(&destination_mac_mask_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_mac_) -
      reinterpret_cast<char*>(&destination_mac_mask_)) + sizeof(source_mac_));
  clear_has_ethertype();
  _cached_size_ = 0;
}

Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::~Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State)
  SharedDtor();
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::SharedDtor() {
  if (this != internal_default_instance()) delete destination_mac_mask_;
  if (this != internal_default_instance()) delete source_mac_mask_;
  if (this != internal_default_instance()) delete destination_mac_;
  if (this != internal_default_instance()) delete source_mac_;
  if (has_ethertype()) {
    clear_ethertype();
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State& Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_L2_State();
  return *internal_default_instance();
}

Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State* Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::New(::google::protobuf::Arena* arena) const {
  Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State* n = new Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::clear_ethertype() {
// @@protoc_insertion_point(one_of_clear_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State)
  switch (ethertype_case()) {
    case kEthertypeOpenconfigpacketmatchtypesethertype: {
      // No need to clear
      break;
    }
    case kEthertypeUint64: {
      // No need to clear
      break;
    }
    case ETHERTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ETHERTYPE_NOT_SET;
}


void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && destination_mac_mask_ != NULL) {
    delete destination_mac_mask_;
  }
  destination_mac_mask_ = NULL;
  if (GetArenaNoVirtual() == NULL && source_mac_mask_ != NULL) {
    delete source_mac_mask_;
  }
  source_mac_mask_ = NULL;
  if (GetArenaNoVirtual() == NULL && destination_mac_ != NULL) {
    delete destination_mac_;
  }
  destination_mac_ = NULL;
  if (GetArenaNoVirtual() == NULL && source_mac_ != NULL) {
    delete source_mac_;
  }
  source_mac_ = NULL;
  clear_ethertype();
  _internal_metadata_.Clear();
}

bool Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4044954274u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue destination_mac_mask = 85439306 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/state/destination-mac-mask"];
      case 85439306: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 683514450 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_mac_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue source_mac_mask = 219492717 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/state/source-mac-mask"];
      case 219492717: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 1755941738 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_source_mac_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue destination_mac = 278919501 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/state/destination-mac"];
      case 278919501: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 2231356010 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.enums.OpenconfigPacketMatchTypesETHERTYPE ethertype_openconfigpacketmatchtypesethertype = 405942806;
      case 405942806: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 3247542448 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ethertype_openconfigpacketmatchtypesethertype(static_cast< ::openconfig::enums::OpenconfigPacketMatchTypesETHERTYPE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 ethertype_uint64 = 461693036;
      case 461693036: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 3693544288 & 0xFF */)) {
          clear_ethertype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ethertype_.ethertype_uint64_)));
          set_has_ethertype_uint64();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue source_mac = 505619284 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/state/source-mac"];
      case 505619284: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 4044954274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_source_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State)
  return false;
#undef DO_
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue destination_mac_mask = 85439306 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/state/destination-mac-mask"];
  if (this->has_destination_mac_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      85439306, *this->destination_mac_mask_, output);
  }

  // .ywrapper.StringValue source_mac_mask = 219492717 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/state/source-mac-mask"];
  if (this->has_source_mac_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      219492717, *this->source_mac_mask_, output);
  }

  // .ywrapper.StringValue destination_mac = 278919501 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/state/destination-mac"];
  if (this->has_destination_mac()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      278919501, *this->destination_mac_, output);
  }

  // .openconfig.enums.OpenconfigPacketMatchTypesETHERTYPE ethertype_openconfigpacketmatchtypesethertype = 405942806;
  if (has_ethertype_openconfigpacketmatchtypesethertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      405942806, this->ethertype_openconfigpacketmatchtypesethertype(), output);
  }

  // uint64 ethertype_uint64 = 461693036;
  if (has_ethertype_uint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(461693036, this->ethertype_uint64(), output);
  }

  // .ywrapper.StringValue source_mac = 505619284 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/state/source-mac"];
  if (this->has_source_mac()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      505619284, *this->source_mac_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State)
}

::google::protobuf::uint8* Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue destination_mac_mask = 85439306 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/state/destination-mac-mask"];
  if (this->has_destination_mac_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        85439306, *this->destination_mac_mask_, deterministic, target);
  }

  // .ywrapper.StringValue source_mac_mask = 219492717 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/state/source-mac-mask"];
  if (this->has_source_mac_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        219492717, *this->source_mac_mask_, deterministic, target);
  }

  // .ywrapper.StringValue destination_mac = 278919501 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/state/destination-mac"];
  if (this->has_destination_mac()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        278919501, *this->destination_mac_, deterministic, target);
  }

  // .openconfig.enums.OpenconfigPacketMatchTypesETHERTYPE ethertype_openconfigpacketmatchtypesethertype = 405942806;
  if (has_ethertype_openconfigpacketmatchtypesethertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      405942806, this->ethertype_openconfigpacketmatchtypesethertype(), target);
  }

  // uint64 ethertype_uint64 = 461693036;
  if (has_ethertype_uint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(461693036, this->ethertype_uint64(), target);
  }

  // .ywrapper.StringValue source_mac = 505619284 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/state/source-mac"];
  if (this->has_source_mac()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        505619284, *this->source_mac_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State)
  return target;
}

size_t Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue destination_mac_mask = 85439306 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/state/destination-mac-mask"];
  if (this->has_destination_mac_mask()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->destination_mac_mask_);
  }

  // .ywrapper.StringValue source_mac_mask = 219492717 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/state/source-mac-mask"];
  if (this->has_source_mac_mask()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->source_mac_mask_);
  }

  // .ywrapper.StringValue destination_mac = 278919501 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/state/destination-mac"];
  if (this->has_destination_mac()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->destination_mac_);
  }

  // .ywrapper.StringValue source_mac = 505619284 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/state/source-mac"];
  if (this->has_source_mac()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->source_mac_);
  }

  switch (ethertype_case()) {
    // .openconfig.enums.OpenconfigPacketMatchTypesETHERTYPE ethertype_openconfigpacketmatchtypesethertype = 405942806;
    case kEthertypeOpenconfigpacketmatchtypesethertype: {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ethertype_openconfigpacketmatchtypesethertype());
      break;
    }
    // uint64 ethertype_uint64 = 461693036;
    case kEthertypeUint64: {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ethertype_uint64());
      break;
    }
    case ETHERTYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State)
    MergeFrom(*source);
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_destination_mac_mask()) {
    mutable_destination_mac_mask()->::ywrapper::StringValue::MergeFrom(from.destination_mac_mask());
  }
  if (from.has_source_mac_mask()) {
    mutable_source_mac_mask()->::ywrapper::StringValue::MergeFrom(from.source_mac_mask());
  }
  if (from.has_destination_mac()) {
    mutable_destination_mac()->::ywrapper::StringValue::MergeFrom(from.destination_mac());
  }
  if (from.has_source_mac()) {
    mutable_source_mac()->::ywrapper::StringValue::MergeFrom(from.source_mac());
  }
  switch (from.ethertype_case()) {
    case kEthertypeOpenconfigpacketmatchtypesethertype: {
      set_ethertype_openconfigpacketmatchtypesethertype(from.ethertype_openconfigpacketmatchtypesethertype());
      break;
    }
    case kEthertypeUint64: {
      set_ethertype_uint64(from.ethertype_uint64());
      break;
    }
    case ETHERTYPE_NOT_SET: {
      break;
    }
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::IsInitialized() const {
  return true;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::Swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State* other) {
  using std::swap;
  swap(destination_mac_mask_, other->destination_mac_mask_);
  swap(source_mac_mask_, other->source_mac_mask_);
  swap(destination_mac_, other->destination_mac_);
  swap(source_mac_, other->source_mac_);
  swap(ethertype_, other->ethertype_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config*>(
      ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State*>(
      ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_L2::kConfigFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_L2::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Classifiers_Classifier_Terms_Term_Conditions_L2::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_L2();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2)
}
Qos_Classifiers_Classifier_Terms_Term_Conditions_L2::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2(const Qos_Classifiers_Classifier_Terms_Term_Conditions_L2& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2)
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&state_)) + sizeof(config_));
  _cached_size_ = 0;
}

Qos_Classifiers_Classifier_Terms_Term_Conditions_L2::~Qos_Classifiers_Classifier_Terms_Term_Conditions_L2() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2)
  SharedDtor();
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete config_;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Classifiers_Classifier_Terms_Term_Conditions_L2::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Classifiers_Classifier_Terms_Term_Conditions_L2& Qos_Classifiers_Classifier_Terms_Term_Conditions_L2::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_L2();
  return *internal_default_instance();
}

Qos_Classifiers_Classifier_Terms_Term_Conditions_L2* Qos_Classifiers_Classifier_Terms_Term_Conditions_L2::New(::google::protobuf::Arena* arena) const {
  Qos_Classifiers_Classifier_Terms_Term_Conditions_L2* n = new Qos_Classifiers_Classifier_Terms_Term_Conditions_L2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Classifiers_Classifier_Terms_Term_Conditions_L2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(1391334890u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State state = 2053426 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/state"];
      case 2053426: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 16427410 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config config = 173916861 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/config"];
      case 173916861: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 1391334890 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2)
  return false;
#undef DO_
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State state = 2053426 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2053426, *this->state_, output);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config config = 173916861 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      173916861, *this->config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2)
}

::google::protobuf::uint8* Qos_Classifiers_Classifier_Terms_Term_Conditions_L2::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State state = 2053426 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2053426, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config config = 173916861 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        173916861, *this->config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2)
  return target;
}

size_t Qos_Classifiers_Classifier_Terms_Term_Conditions_L2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State state = 2053426 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/state"];
  if (this->has_state()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config config = 173916861 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Classifiers_Classifier_Terms_Term_Conditions_L2* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Classifiers_Classifier_Terms_Term_Conditions_L2>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2)
    MergeFrom(*source);
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2::MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_L2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::MergeFrom(from.state());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::MergeFrom(from.config());
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2::CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_L2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Classifiers_Classifier_Terms_Term_Conditions_L2::IsInitialized() const {
  return true;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2::Swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_L2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2::InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Conditions_L2* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(config_, other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Classifiers_Classifier_Terms_Term_Conditions_L2::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config_default_instance_._instance.get_mutable()->traffic_class_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config::clear_traffic_class() {
  if (GetArenaNoVirtual() == NULL && traffic_class_ != NULL) {
    delete traffic_class_;
  }
  traffic_class_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config::kTrafficClassFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.Config)
}
Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_traffic_class()) {
    traffic_class_ = new ::ywrapper::UintValue(*from.traffic_class_);
  } else {
    traffic_class_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.Config)
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config::SharedCtor() {
  traffic_class_ = NULL;
  _cached_size_ = 0;
}

Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config::~Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.Config)
  SharedDtor();
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config::SharedDtor() {
  if (this != internal_default_instance()) delete traffic_class_;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config& Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config();
  return *internal_default_instance();
}

Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config* Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config::New(::google::protobuf::Arena* arena) const {
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config* n = new Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && traffic_class_ != NULL) {
    delete traffic_class_;
  }
  traffic_class_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2336476306u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue traffic_class = 292059538 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/mpls/config/traffic-class"];
      case 292059538: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 2336476306 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_traffic_class()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.Config)
  return false;
#undef DO_
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue traffic_class = 292059538 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/mpls/config/traffic-class"];
  if (this->has_traffic_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      292059538, *this->traffic_class_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.Config)
}

::google::protobuf::uint8* Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue traffic_class = 292059538 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/mpls/config/traffic-class"];
  if (this->has_traffic_class()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        292059538, *this->traffic_class_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.Config)
  return target;
}

size_t Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue traffic_class = 292059538 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/mpls/config/traffic-class"];
  if (this->has_traffic_class()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->traffic_class_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.Config)
    MergeFrom(*source);
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config::MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_traffic_class()) {
    mutable_traffic_class()->::ywrapper::UintValue::MergeFrom(from.traffic_class());
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config::CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config::IsInitialized() const {
  return true;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config::Swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config::InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config* other) {
  using std::swap;
  swap(traffic_class_, other->traffic_class_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State_default_instance_._instance.get_mutable()->traffic_class_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State::clear_traffic_class() {
  if (GetArenaNoVirtual() == NULL && traffic_class_ != NULL) {
    delete traffic_class_;
  }
  traffic_class_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State::kTrafficClassFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.State)
}
Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_traffic_class()) {
    traffic_class_ = new ::ywrapper::UintValue(*from.traffic_class_);
  } else {
    traffic_class_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.State)
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State::SharedCtor() {
  traffic_class_ = NULL;
  _cached_size_ = 0;
}

Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State::~Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.State)
  SharedDtor();
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State::SharedDtor() {
  if (this != internal_default_instance()) delete traffic_class_;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State& Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State();
  return *internal_default_instance();
}

Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State* Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State::New(::google::protobuf::Arena* arena) const {
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State* n = new Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && traffic_class_ != NULL) {
    delete traffic_class_;
  }
  traffic_class_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3042737322u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue traffic_class = 380342165 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/mpls/state/traffic-class"];
      case 380342165: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 3042737322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_traffic_class()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.State)
  return false;
#undef DO_
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue traffic_class = 380342165 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/mpls/state/traffic-class"];
  if (this->has_traffic_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      380342165, *this->traffic_class_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.State)
}

::google::protobuf::uint8* Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue traffic_class = 380342165 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/mpls/state/traffic-class"];
  if (this->has_traffic_class()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        380342165, *this->traffic_class_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.State)
  return target;
}

size_t Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue traffic_class = 380342165 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/mpls/state/traffic-class"];
  if (this->has_traffic_class()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->traffic_class_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.State)
    MergeFrom(*source);
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State::MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_traffic_class()) {
    mutable_traffic_class()->::ywrapper::UintValue::MergeFrom(from.traffic_class());
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State::CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State::IsInitialized() const {
  return true;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State::Swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State::InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State* other) {
  using std::swap;
  swap(traffic_class_, other->traffic_class_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config*>(
      ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State*>(
      ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls::kConfigFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Mpls();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls)
}
Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls)
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&state_)) + sizeof(config_));
  _cached_size_ = 0;
}

Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls::~Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls)
  SharedDtor();
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete config_;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls& Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Mpls();
  return *internal_default_instance();
}

Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls* Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls::New(::google::protobuf::Arena* arena) const {
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls* n = new Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3766128794u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.State state = 254469620 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/mpls/state"];
      case 254469620: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 2035756962 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.Config config = 470766099 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/mpls/config"];
      case 470766099: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 3766128794 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls)
  return false;
#undef DO_
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.State state = 254469620 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/mpls/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      254469620, *this->state_, output);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.Config config = 470766099 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/mpls/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      470766099, *this->config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls)
}

::google::protobuf::uint8* Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.State state = 254469620 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/mpls/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        254469620, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.Config config = 470766099 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/mpls/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        470766099, *this->config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls)
  return target;
}

size_t Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.State state = 254469620 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/mpls/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.Config config = 470766099 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/mpls/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls)
    MergeFrom(*source);
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls::MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State::MergeFrom(from.state());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config::MergeFrom(from.config());
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls::CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls::IsInitialized() const {
  return true;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls::Swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls::InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(config_, other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_default_instance_.destination_port_destinationport_ = 0;
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_default_instance_.destination_port_string_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_default_instance_.destination_port_uint64_ = GOOGLE_ULONGLONG(0);
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_default_instance_.source_port_sourceport_ = 0;
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_default_instance_.source_port_string_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_default_instance_.source_port_uint64_ = GOOGLE_ULONGLONG(0);
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::kDestinationPortDestinationportFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::kDestinationPortStringFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::kDestinationPortUint64FieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::kSourcePortSourceportFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::kSourcePortStringFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::kSourcePortUint64FieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::kTcpFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config)
}
Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tcp_flags_(from.tcp_flags_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_destination_port();
  switch (from.destination_port_case()) {
    case kDestinationPortDestinationport: {
      set_destination_port_destinationport(from.destination_port_destinationport());
      break;
    }
    case kDestinationPortString: {
      set_destination_port_string(from.destination_port_string());
      break;
    }
    case kDestinationPortUint64: {
      set_destination_port_uint64(from.destination_port_uint64());
      break;
    }
    case DESTINATION_PORT_NOT_SET: {
      break;
    }
  }
  clear_has_source_port();
  switch (from.source_port_case()) {
    case kSourcePortSourceport: {
      set_source_port_sourceport(from.source_port_sourceport());
      break;
    }
    case kSourcePortString: {
      set_source_port_string(from.source_port_string());
      break;
    }
    case kSourcePortUint64: {
      set_source_port_uint64(from.source_port_uint64());
      break;
    }
    case SOURCE_PORT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config)
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::SharedCtor() {
  clear_has_destination_port();
  clear_has_source_port();
  _cached_size_ = 0;
}

Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::~Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config)
  SharedDtor();
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::SharedDtor() {
  if (has_destination_port()) {
    clear_destination_port();
  }
  if (has_source_port()) {
    clear_source_port();
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config& Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config();
  return *internal_default_instance();
}

Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config* Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::New(::google::protobuf::Arena* arena) const {
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config* n = new Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::clear_destination_port() {
// @@protoc_insertion_point(one_of_clear_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config)
  switch (destination_port_case()) {
    case kDestinationPortDestinationport: {
      // No need to clear
      break;
    }
    case kDestinationPortString: {
      destination_port_.destination_port_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kDestinationPortUint64: {
      // No need to clear
      break;
    }
    case DESTINATION_PORT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DESTINATION_PORT_NOT_SET;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::clear_source_port() {
// @@protoc_insertion_point(one_of_clear_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config)
  switch (source_port_case()) {
    case kSourcePortSourceport: {
      // No need to clear
      break;
    }
    case kSourcePortString: {
      source_port_.source_port_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kSourcePortUint64: {
      // No need to clear
      break;
    }
    case SOURCE_PORT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = SOURCE_PORT_NOT_SET;
}


void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tcp_flags_.Clear();
  clear_destination_port();
  clear_source_port();
  _internal_metadata_.Clear();
}

bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2741630322u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string destination_port_string = 43341491;
      case 43341491: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 346731930 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination_port_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->destination_port_string().data(), static_cast<int>(this->destination_port_string().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.destination_port_string"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.DestinationPort destination_port_destinationport = 61984185;
      case 61984185: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 495873480 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_destination_port_destinationport(static_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .openconfig.enums.OpenconfigPacketMatchTypesTCPFLAGS tcp_flags = 82538752 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/transport/config/tcp-flags"];
      case 82538752: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 660310018 & 0xFF */)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_tcp_flags(static_cast< ::openconfig::enums::OpenconfigPacketMatchTypesTCPFLAGS >(value));
          }
          input->PopLimit(limit);
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 660310016 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_tcp_flags(static_cast< ::openconfig::enums::OpenconfigPacketMatchTypesTCPFLAGS >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.SourcePort source_port_sourceport = 169477687;
      case 169477687: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 1355821496 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_source_port_sourceport(static_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 source_port_uint64 = 278063023;
      case 278063023: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 2224504184 & 0xFF */)) {
          clear_source_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &source_port_.source_port_uint64_)));
          set_has_source_port_uint64();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 destination_port_uint64 = 296926614;
      case 296926614: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 2375412912 & 0xFF */)) {
          clear_destination_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &destination_port_.destination_port_uint64_)));
          set_has_destination_port_uint64();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source_port_string = 342703790;
      case 342703790: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 2741630322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_port_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_port_string().data(), static_cast<int>(this->source_port_string().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.source_port_string"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config)
  return false;
#undef DO_
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string destination_port_string = 43341491;
  if (has_destination_port_string()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination_port_string().data(), static_cast<int>(this->destination_port_string().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.destination_port_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      43341491, this->destination_port_string(), output);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.DestinationPort destination_port_destinationport = 61984185;
  if (has_destination_port_destinationport()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      61984185, this->destination_port_destinationport(), output);
  }

  // repeated .openconfig.enums.OpenconfigPacketMatchTypesTCPFLAGS tcp_flags = 82538752 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/transport/config/tcp-flags"];
  if (this->tcp_flags_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      82538752,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(
        static_cast< ::google::protobuf::uint32>(_tcp_flags_cached_byte_size_));
  }
  for (int i = 0, n = this->tcp_flags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->tcp_flags(i), output);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.SourcePort source_port_sourceport = 169477687;
  if (has_source_port_sourceport()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      169477687, this->source_port_sourceport(), output);
  }

  // uint64 source_port_uint64 = 278063023;
  if (has_source_port_uint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(278063023, this->source_port_uint64(), output);
  }

  // uint64 destination_port_uint64 = 296926614;
  if (has_destination_port_uint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(296926614, this->destination_port_uint64(), output);
  }

  // string source_port_string = 342703790;
  if (has_source_port_string()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_port_string().data(), static_cast<int>(this->source_port_string().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.source_port_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      342703790, this->source_port_string(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config)
}

::google::protobuf::uint8* Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string destination_port_string = 43341491;
  if (has_destination_port_string()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination_port_string().data(), static_cast<int>(this->destination_port_string().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.destination_port_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        43341491, this->destination_port_string(), target);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.DestinationPort destination_port_destinationport = 61984185;
  if (has_destination_port_destinationport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      61984185, this->destination_port_destinationport(), target);
  }

  // repeated .openconfig.enums.OpenconfigPacketMatchTypesTCPFLAGS tcp_flags = 82538752 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/transport/config/tcp-flags"];
  if (this->tcp_flags_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      82538752,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      static_cast< ::google::protobuf::uint32>(
            _tcp_flags_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->tcp_flags_, target);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.SourcePort source_port_sourceport = 169477687;
  if (has_source_port_sourceport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      169477687, this->source_port_sourceport(), target);
  }

  // uint64 source_port_uint64 = 278063023;
  if (has_source_port_uint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(278063023, this->source_port_uint64(), target);
  }

  // uint64 destination_port_uint64 = 296926614;
  if (has_destination_port_uint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(296926614, this->destination_port_uint64(), target);
  }

  // string source_port_string = 342703790;
  if (has_source_port_string()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_port_string().data(), static_cast<int>(this->source_port_string().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.source_port_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        342703790, this->source_port_string(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config)
  return target;
}

size_t Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .openconfig.enums.OpenconfigPacketMatchTypesTCPFLAGS tcp_flags = 82538752 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/transport/config/tcp-flags"];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->tcp_flags_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->tcp_flags(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _tcp_flags_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  switch (destination_port_case()) {
    // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.DestinationPort destination_port_destinationport = 61984185;
    case kDestinationPortDestinationport: {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->destination_port_destinationport());
      break;
    }
    // string destination_port_string = 43341491;
    case kDestinationPortString: {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->destination_port_string());
      break;
    }
    // uint64 destination_port_uint64 = 296926614;
    case kDestinationPortUint64: {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->destination_port_uint64());
      break;
    }
    case DESTINATION_PORT_NOT_SET: {
      break;
    }
  }
  switch (source_port_case()) {
    // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.SourcePort source_port_sourceport = 169477687;
    case kSourcePortSourceport: {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source_port_sourceport());
      break;
    }
    // string source_port_string = 342703790;
    case kSourcePortString: {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source_port_string());
      break;
    }
    // uint64 source_port_uint64 = 278063023;
    case kSourcePortUint64: {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->source_port_uint64());
      break;
    }
    case SOURCE_PORT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config)
    MergeFrom(*source);
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tcp_flags_.MergeFrom(from.tcp_flags_);
  switch (from.destination_port_case()) {
    case kDestinationPortDestinationport: {
      set_destination_port_destinationport(from.destination_port_destinationport());
      break;
    }
    case kDestinationPortString: {
      set_destination_port_string(from.destination_port_string());
      break;
    }
    case kDestinationPortUint64: {
      set_destination_port_uint64(from.destination_port_uint64());
      break;
    }
    case DESTINATION_PORT_NOT_SET: {
      break;
    }
  }
  switch (from.source_port_case()) {
    case kSourcePortSourceport: {
      set_source_port_sourceport(from.source_port_sourceport());
      break;
    }
    case kSourcePortString: {
      set_source_port_string(from.source_port_string());
      break;
    }
    case kSourcePortUint64: {
      set_source_port_uint64(from.source_port_uint64());
      break;
    }
    case SOURCE_PORT_NOT_SET: {
      break;
    }
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::IsInitialized() const {
  return true;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::Swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config* other) {
  using std::swap;
  tcp_flags_.InternalSwap(&other->tcp_flags_);
  swap(destination_port_, other->destination_port_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(source_port_, other->source_port_);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_default_instance_.destination_port_destinationport_ = 0;
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_default_instance_.destination_port_string_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_default_instance_.destination_port_uint64_ = GOOGLE_ULONGLONG(0);
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_default_instance_.source_port_sourceport_ = 0;
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_default_instance_.source_port_string_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_default_instance_.source_port_uint64_ = GOOGLE_ULONGLONG(0);
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::kDestinationPortDestinationportFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::kDestinationPortStringFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::kDestinationPortUint64FieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::kSourcePortSourceportFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::kSourcePortStringFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::kSourcePortUint64FieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::kTcpFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State)
}
Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tcp_flags_(from.tcp_flags_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_destination_port();
  switch (from.destination_port_case()) {
    case kDestinationPortDestinationport: {
      set_destination_port_destinationport(from.destination_port_destinationport());
      break;
    }
    case kDestinationPortString: {
      set_destination_port_string(from.destination_port_string());
      break;
    }
    case kDestinationPortUint64: {
      set_destination_port_uint64(from.destination_port_uint64());
      break;
    }
    case DESTINATION_PORT_NOT_SET: {
      break;
    }
  }
  clear_has_source_port();
  switch (from.source_port_case()) {
    case kSourcePortSourceport: {
      set_source_port_sourceport(from.source_port_sourceport());
      break;
    }
    case kSourcePortString: {
      set_source_port_string(from.source_port_string());
      break;
    }
    case kSourcePortUint64: {
      set_source_port_uint64(from.source_port_uint64());
      break;
    }
    case SOURCE_PORT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State)
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::SharedCtor() {
  clear_has_destination_port();
  clear_has_source_port();
  _cached_size_ = 0;
}

Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::~Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State)
  SharedDtor();
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::SharedDtor() {
  if (has_destination_port()) {
    clear_destination_port();
  }
  if (has_source_port()) {
    clear_source_port();
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State& Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State();
  return *internal_default_instance();
}

Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State* Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::New(::google::protobuf::Arena* arena) const {
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State* n = new Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::clear_destination_port() {
// @@protoc_insertion_point(one_of_clear_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State)
  switch (destination_port_case()) {
    case kDestinationPortDestinationport: {
      // No need to clear
      break;
    }
    case kDestinationPortString: {
      destination_port_.destination_port_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kDestinationPortUint64: {
      // No need to clear
      break;
    }
    case DESTINATION_PORT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DESTINATION_PORT_NOT_SET;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::clear_source_port() {
// @@protoc_insertion_point(one_of_clear_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State)
  switch (source_port_case()) {
    case kSourcePortSourceport: {
      // No need to clear
      break;
    }
    case kSourcePortString: {
      source_port_.source_port_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kSourcePortUint64: {
      // No need to clear
      break;
    }
    case SOURCE_PORT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = SOURCE_PORT_NOT_SET;
}


void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tcp_flags_.Clear();
  clear_destination_port();
  clear_source_port();
  _internal_metadata_.Clear();
}

bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4251915498u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.DestinationPort destination_port_destinationport = 103011798;
      case 103011798: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 824094384 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_destination_port_destinationport(static_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 destination_port_uint64 = 150348603;
      case 150348603: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 1202788824 & 0xFF */)) {
          clear_destination_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &destination_port_.destination_port_uint64_)));
          set_has_destination_port_uint64();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string destination_port_string = 232129498;
      case 232129498: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 1857035986 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination_port_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->destination_port_string().data(), static_cast<int>(this->destination_port_string().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.destination_port_string"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 source_port_uint64 = 275615616;
      case 275615616: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 2204924928 & 0xFF */)) {
          clear_source_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &source_port_.source_port_uint64_)));
          set_has_source_port_uint64();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .openconfig.enums.OpenconfigPacketMatchTypesTCPFLAGS tcp_flags = 388480337 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/transport/state/tcp-flags"];
      case 388480337: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 3107842698 & 0xFF */)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_tcp_flags(static_cast< ::openconfig::enums::OpenconfigPacketMatchTypesTCPFLAGS >(value));
          }
          input->PopLimit(limit);
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 3107842696 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_tcp_flags(static_cast< ::openconfig::enums::OpenconfigPacketMatchTypesTCPFLAGS >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.SourcePort source_port_sourceport = 434715756;
      case 434715756: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 3477726048 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_source_port_sourceport(static_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source_port_string = 531489437;
      case 531489437: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 4251915498 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_port_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_port_string().data(), static_cast<int>(this->source_port_string().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.source_port_string"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State)
  return false;
#undef DO_
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.DestinationPort destination_port_destinationport = 103011798;
  if (has_destination_port_destinationport()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      103011798, this->destination_port_destinationport(), output);
  }

  // uint64 destination_port_uint64 = 150348603;
  if (has_destination_port_uint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(150348603, this->destination_port_uint64(), output);
  }

  // string destination_port_string = 232129498;
  if (has_destination_port_string()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination_port_string().data(), static_cast<int>(this->destination_port_string().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.destination_port_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      232129498, this->destination_port_string(), output);
  }

  // uint64 source_port_uint64 = 275615616;
  if (has_source_port_uint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(275615616, this->source_port_uint64(), output);
  }

  // repeated .openconfig.enums.OpenconfigPacketMatchTypesTCPFLAGS tcp_flags = 388480337 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/transport/state/tcp-flags"];
  if (this->tcp_flags_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      388480337,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(
        static_cast< ::google::protobuf::uint32>(_tcp_flags_cached_byte_size_));
  }
  for (int i = 0, n = this->tcp_flags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->tcp_flags(i), output);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.SourcePort source_port_sourceport = 434715756;
  if (has_source_port_sourceport()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      434715756, this->source_port_sourceport(), output);
  }

  // string source_port_string = 531489437;
  if (has_source_port_string()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_port_string().data(), static_cast<int>(this->source_port_string().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.source_port_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      531489437, this->source_port_string(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State)
}

::google::protobuf::uint8* Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.DestinationPort destination_port_destinationport = 103011798;
  if (has_destination_port_destinationport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      103011798, this->destination_port_destinationport(), target);
  }

  // uint64 destination_port_uint64 = 150348603;
  if (has_destination_port_uint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(150348603, this->destination_port_uint64(), target);
  }

  // string destination_port_string = 232129498;
  if (has_destination_port_string()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination_port_string().data(), static_cast<int>(this->destination_port_string().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.destination_port_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        232129498, this->destination_port_string(), target);
  }

  // uint64 source_port_uint64 = 275615616;
  if (has_source_port_uint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(275615616, this->source_port_uint64(), target);
  }

  // repeated .openconfig.enums.OpenconfigPacketMatchTypesTCPFLAGS tcp_flags = 388480337 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/transport/state/tcp-flags"];
  if (this->tcp_flags_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      388480337,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      static_cast< ::google::protobuf::uint32>(
            _tcp_flags_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->tcp_flags_, target);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.SourcePort source_port_sourceport = 434715756;
  if (has_source_port_sourceport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      434715756, this->source_port_sourceport(), target);
  }

  // string source_port_string = 531489437;
  if (has_source_port_string()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_port_string().data(), static_cast<int>(this->source_port_string().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.source_port_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        531489437, this->source_port_string(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State)
  return target;
}

size_t Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .openconfig.enums.OpenconfigPacketMatchTypesTCPFLAGS tcp_flags = 388480337 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/transport/state/tcp-flags"];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->tcp_flags_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->tcp_flags(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _tcp_flags_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  switch (destination_port_case()) {
    // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.DestinationPort destination_port_destinationport = 103011798;
    case kDestinationPortDestinationport: {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->destination_port_destinationport());
      break;
    }
    // string destination_port_string = 232129498;
    case kDestinationPortString: {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->destination_port_string());
      break;
    }
    // uint64 destination_port_uint64 = 150348603;
    case kDestinationPortUint64: {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->destination_port_uint64());
      break;
    }
    case DESTINATION_PORT_NOT_SET: {
      break;
    }
  }
  switch (source_port_case()) {
    // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.SourcePort source_port_sourceport = 434715756;
    case kSourcePortSourceport: {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source_port_sourceport());
      break;
    }
    // string source_port_string = 531489437;
    case kSourcePortString: {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source_port_string());
      break;
    }
    // uint64 source_port_uint64 = 275615616;
    case kSourcePortUint64: {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->source_port_uint64());
      break;
    }
    case SOURCE_PORT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State)
    MergeFrom(*source);
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tcp_flags_.MergeFrom(from.tcp_flags_);
  switch (from.destination_port_case()) {
    case kDestinationPortDestinationport: {
      set_destination_port_destinationport(from.destination_port_destinationport());
      break;
    }
    case kDestinationPortString: {
      set_destination_port_string(from.destination_port_string());
      break;
    }
    case kDestinationPortUint64: {
      set_destination_port_uint64(from.destination_port_uint64());
      break;
    }
    case DESTINATION_PORT_NOT_SET: {
      break;
    }
  }
  switch (from.source_port_case()) {
    case kSourcePortSourceport: {
      set_source_port_sourceport(from.source_port_sourceport());
      break;
    }
    case kSourcePortString: {
      set_source_port_string(from.source_port_string());
      break;
    }
    case kSourcePortUint64: {
      set_source_port_uint64(from.source_port_uint64());
      break;
    }
    case SOURCE_PORT_NOT_SET: {
      break;
    }
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::IsInitialized() const {
  return true;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::Swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State* other) {
  using std::swap;
  tcp_flags_.InternalSwap(&other->tcp_flags_);
  swap(destination_port_, other->destination_port_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(source_port_, other->source_port_);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config*>(
      ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State*>(
      ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport::kConfigFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Transport();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport)
}
Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport)
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&state_)) + sizeof(config_));
  _cached_size_ = 0;
}

Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport::~Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport)
  SharedDtor();
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete config_;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport& Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Transport();
  return *internal_default_instance();
}

Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport* Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport::New(::google::protobuf::Arena* arena) const {
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport* n = new Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3769348754u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State state = 253249231 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/transport/state"];
      case 253249231: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 2025993850 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config config = 471168594 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/transport/config"];
      case 471168594: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 3769348754 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport)
  return false;
#undef DO_
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State state = 253249231 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/transport/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      253249231, *this->state_, output);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config config = 471168594 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/transport/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      471168594, *this->config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport)
}

::google::protobuf::uint8* Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State state = 253249231 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/transport/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        253249231, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config config = 471168594 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/transport/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        471168594, *this->config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport)
  return target;
}

size_t Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State state = 253249231 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/transport/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config config = 471168594 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/transport/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport)
    MergeFrom(*source);
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport::MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::MergeFrom(from.state());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::MergeFrom(from.config());
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport::CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport::IsInitialized() const {
  return true;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport::Swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport::InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(config_, other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Classifiers_Classifier_Terms_Term_Conditions::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_default_instance_._instance.get_mutable()->ipv4_ = const_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4*>(
      ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_default_instance_._instance.get_mutable()->ipv6_ = const_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6*>(
      ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_default_instance_._instance.get_mutable()->l2_ = const_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2*>(
      ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_default_instance_._instance.get_mutable()->mpls_ = const_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls*>(
      ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_default_instance_._instance.get_mutable()->transport_ = const_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport*>(
      ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Classifiers_Classifier_Terms_Term_Conditions::kIpv4FieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions::kIpv6FieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions::kL2FieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions::kMplsFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions::kTransportFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Classifiers_Classifier_Terms_Term_Conditions::Qos_Classifiers_Classifier_Terms_Term_Conditions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions)
}
Qos_Classifiers_Classifier_Terms_Term_Conditions::Qos_Classifiers_Classifier_Terms_Term_Conditions(const Qos_Classifiers_Classifier_Terms_Term_Conditions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ipv6()) {
    ipv6_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6(*from.ipv6_);
  } else {
    ipv6_ = NULL;
  }
  if (from.has_ipv4()) {
    ipv4_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4(*from.ipv4_);
  } else {
    ipv4_ = NULL;
  }
  if (from.has_mpls()) {
    mpls_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls(*from.mpls_);
  } else {
    mpls_ = NULL;
  }
  if (from.has_l2()) {
    l2_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2(*from.l2_);
  } else {
    l2_ = NULL;
  }
  if (from.has_transport()) {
    transport_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport(*from.transport_);
  } else {
    transport_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions)
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions::SharedCtor() {
  ::memset(&ipv6_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transport_) -
      reinterpret_cast<char*>(&ipv6_)) + sizeof(transport_));
  _cached_size_ = 0;
}

Qos_Classifiers_Classifier_Terms_Term_Conditions::~Qos_Classifiers_Classifier_Terms_Term_Conditions() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions)
  SharedDtor();
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions::SharedDtor() {
  if (this != internal_default_instance()) delete ipv6_;
  if (this != internal_default_instance()) delete ipv4_;
  if (this != internal_default_instance()) delete mpls_;
  if (this != internal_default_instance()) delete l2_;
  if (this != internal_default_instance()) delete transport_;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Classifiers_Classifier_Terms_Term_Conditions::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Classifiers_Classifier_Terms_Term_Conditions& Qos_Classifiers_Classifier_Terms_Term_Conditions::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions();
  return *internal_default_instance();
}

Qos_Classifiers_Classifier_Terms_Term_Conditions* Qos_Classifiers_Classifier_Terms_Term_Conditions::New(::google::protobuf::Arena* arena) const {
  Qos_Classifiers_Classifier_Terms_Term_Conditions* n = new Qos_Classifiers_Classifier_Terms_Term_Conditions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && ipv6_ != NULL) {
    delete ipv6_;
  }
  ipv6_ = NULL;
  if (GetArenaNoVirtual() == NULL && ipv4_ != NULL) {
    delete ipv4_;
  }
  ipv4_ = NULL;
  if (GetArenaNoVirtual() == NULL && mpls_ != NULL) {
    delete mpls_;
  }
  mpls_ = NULL;
  if (GetArenaNoVirtual() == NULL && l2_ != NULL) {
    delete l2_;
  }
  l2_ = NULL;
  if (GetArenaNoVirtual() == NULL && transport_ != NULL) {
    delete transport_;
  }
  transport_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Classifiers_Classifier_Terms_Term_Conditions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3169895658u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6 ipv6 = 10035433 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6"];
      case 10035433: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 80283466 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ipv6()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4 ipv4 = 10035435 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4"];
      case 10035435: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 80283482 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ipv4()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls mpls = 259157330 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/mpls"];
      case 259157330: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 2073258642 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mpls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2 l2 = 363202488 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2"];
      case 363202488: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 2905619906 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_l2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport transport = 396236957 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/transport"];
      case 396236957: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 3169895658 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transport()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions)
  return false;
#undef DO_
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6 ipv6 = 10035433 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6"];
  if (this->has_ipv6()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10035433, *this->ipv6_, output);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4 ipv4 = 10035435 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4"];
  if (this->has_ipv4()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10035435, *this->ipv4_, output);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls mpls = 259157330 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/mpls"];
  if (this->has_mpls()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      259157330, *this->mpls_, output);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2 l2 = 363202488 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2"];
  if (this->has_l2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      363202488, *this->l2_, output);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport transport = 396236957 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/transport"];
  if (this->has_transport()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      396236957, *this->transport_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions)
}

::google::protobuf::uint8* Qos_Classifiers_Classifier_Terms_Term_Conditions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6 ipv6 = 10035433 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6"];
  if (this->has_ipv6()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10035433, *this->ipv6_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4 ipv4 = 10035435 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4"];
  if (this->has_ipv4()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10035435, *this->ipv4_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls mpls = 259157330 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/mpls"];
  if (this->has_mpls()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        259157330, *this->mpls_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2 l2 = 363202488 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2"];
  if (this->has_l2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        363202488, *this->l2_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport transport = 396236957 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/transport"];
  if (this->has_transport()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        396236957, *this->transport_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions)
  return target;
}

size_t Qos_Classifiers_Classifier_Terms_Term_Conditions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6 ipv6 = 10035433 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6"];
  if (this->has_ipv6()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->ipv6_);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4 ipv4 = 10035435 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4"];
  if (this->has_ipv4()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->ipv4_);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls mpls = 259157330 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/mpls"];
  if (this->has_mpls()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mpls_);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2 l2 = 363202488 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2"];
  if (this->has_l2()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->l2_);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport transport = 396236957 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/transport"];
  if (this->has_transport()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->transport_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Classifiers_Classifier_Terms_Term_Conditions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Classifiers_Classifier_Terms_Term_Conditions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions)
    MergeFrom(*source);
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions::MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ipv6()) {
    mutable_ipv6()->::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6::MergeFrom(from.ipv6());
  }
  if (from.has_ipv4()) {
    mutable_ipv4()->::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4::MergeFrom(from.ipv4());
  }
  if (from.has_mpls()) {
    mutable_mpls()->::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls::MergeFrom(from.mpls());
  }
  if (from.has_l2()) {
    mutable_l2()->::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2::MergeFrom(from.l2());
  }
  if (from.has_transport()) {
    mutable_transport()->::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport::MergeFrom(from.transport());
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions::CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Classifiers_Classifier_Terms_Term_Conditions::IsInitialized() const {
  return true;
}

void Qos_Classifiers_Classifier_Terms_Term_Conditions::Swap(Qos_Classifiers_Classifier_Terms_Term_Conditions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Classifiers_Classifier_Terms_Term_Conditions::InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Conditions* other) {
  using std::swap;
  swap(ipv6_, other->ipv6_);
  swap(ipv4_, other->ipv4_);
  swap(mpls_, other->mpls_);
  swap(l2_, other->l2_);
  swap(transport_, other->transport_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Classifiers_Classifier_Terms_Term_Conditions::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Classifiers_Classifier_Terms_Term_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Config_default_instance_._instance.get_mutable()->id_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void Qos_Classifiers_Classifier_Terms_Term_Config::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Classifiers_Classifier_Terms_Term_Config::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Classifiers_Classifier_Terms_Term_Config::Qos_Classifiers_Classifier_Terms_Term_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Config)
}
Qos_Classifiers_Classifier_Terms_Term_Config::Qos_Classifiers_Classifier_Terms_Term_Config(const Qos_Classifiers_Classifier_Terms_Term_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::ywrapper::StringValue(*from.id_);
  } else {
    id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Config)
}

void Qos_Classifiers_Classifier_Terms_Term_Config::SharedCtor() {
  id_ = NULL;
  _cached_size_ = 0;
}

Qos_Classifiers_Classifier_Terms_Term_Config::~Qos_Classifiers_Classifier_Terms_Term_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Config)
  SharedDtor();
}

void Qos_Classifiers_Classifier_Terms_Term_Config::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void Qos_Classifiers_Classifier_Terms_Term_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Classifiers_Classifier_Terms_Term_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Classifiers_Classifier_Terms_Term_Config& Qos_Classifiers_Classifier_Terms_Term_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Config();
  return *internal_default_instance();
}

Qos_Classifiers_Classifier_Terms_Term_Config* Qos_Classifiers_Classifier_Terms_Term_Config::New(::google::protobuf::Arena* arena) const {
  Qos_Classifiers_Classifier_Terms_Term_Config* n = new Qos_Classifiers_Classifier_Terms_Term_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Classifiers_Classifier_Terms_Term_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Classifiers_Classifier_Terms_Term_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(1093170954u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue id = 136646369 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/config/id"];
      case 136646369: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 1093170954 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Config)
  return false;
#undef DO_
}

void Qos_Classifiers_Classifier_Terms_Term_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue id = 136646369 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/config/id"];
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      136646369, *this->id_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Config)
}

::google::protobuf::uint8* Qos_Classifiers_Classifier_Terms_Term_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue id = 136646369 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/config/id"];
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        136646369, *this->id_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Config)
  return target;
}

size_t Qos_Classifiers_Classifier_Terms_Term_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue id = 136646369 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/config/id"];
  if (this->has_id()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Classifiers_Classifier_Terms_Term_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Classifiers_Classifier_Terms_Term_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Classifiers_Classifier_Terms_Term_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Config)
    MergeFrom(*source);
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Config::MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::ywrapper::StringValue::MergeFrom(from.id());
  }
}

void Qos_Classifiers_Classifier_Terms_Term_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Classifiers_Classifier_Terms_Term_Config::CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Classifiers_Classifier_Terms_Term_Config::IsInitialized() const {
  return true;
}

void Qos_Classifiers_Classifier_Terms_Term_Config::Swap(Qos_Classifiers_Classifier_Terms_Term_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Classifiers_Classifier_Terms_Term_Config::InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Config* other) {
  using std::swap;
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Classifiers_Classifier_Terms_Term_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Classifiers_Classifier_Terms_Term_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_State_default_instance_._instance.get_mutable()->id_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void Qos_Classifiers_Classifier_Terms_Term_State::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Classifiers_Classifier_Terms_Term_State::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Classifiers_Classifier_Terms_Term_State::Qos_Classifiers_Classifier_Terms_Term_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.State)
}
Qos_Classifiers_Classifier_Terms_Term_State::Qos_Classifiers_Classifier_Terms_Term_State(const Qos_Classifiers_Classifier_Terms_Term_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::ywrapper::StringValue(*from.id_);
  } else {
    id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.State)
}

void Qos_Classifiers_Classifier_Terms_Term_State::SharedCtor() {
  id_ = NULL;
  _cached_size_ = 0;
}

Qos_Classifiers_Classifier_Terms_Term_State::~Qos_Classifiers_Classifier_Terms_Term_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.State)
  SharedDtor();
}

void Qos_Classifiers_Classifier_Terms_Term_State::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void Qos_Classifiers_Classifier_Terms_Term_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Classifiers_Classifier_Terms_Term_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Classifiers_Classifier_Terms_Term_State& Qos_Classifiers_Classifier_Terms_Term_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_State();
  return *internal_default_instance();
}

Qos_Classifiers_Classifier_Terms_Term_State* Qos_Classifiers_Classifier_Terms_Term_State::New(::google::protobuf::Arena* arena) const {
  Qos_Classifiers_Classifier_Terms_Term_State* n = new Qos_Classifiers_Classifier_Terms_Term_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Classifiers_Classifier_Terms_Term_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Classifiers_Classifier_Terms_Term_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2252207234u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue id = 281525904 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/state/id"];
      case 281525904: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 2252207234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.State)
  return false;
#undef DO_
}

void Qos_Classifiers_Classifier_Terms_Term_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue id = 281525904 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/state/id"];
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      281525904, *this->id_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.State)
}

::google::protobuf::uint8* Qos_Classifiers_Classifier_Terms_Term_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue id = 281525904 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/state/id"];
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        281525904, *this->id_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.State)
  return target;
}

size_t Qos_Classifiers_Classifier_Terms_Term_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue id = 281525904 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/state/id"];
  if (this->has_id()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Classifiers_Classifier_Terms_Term_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Classifiers_Classifier_Terms_Term_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Classifiers_Classifier_Terms_Term_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.State)
    MergeFrom(*source);
  }
}

void Qos_Classifiers_Classifier_Terms_Term_State::MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::ywrapper::StringValue::MergeFrom(from.id());
  }
}

void Qos_Classifiers_Classifier_Terms_Term_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Classifiers_Classifier_Terms_Term_State::CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Classifiers_Classifier_Terms_Term_State::IsInitialized() const {
  return true;
}

void Qos_Classifiers_Classifier_Terms_Term_State::Swap(Qos_Classifiers_Classifier_Terms_Term_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Classifiers_Classifier_Terms_Term_State::InternalSwap(Qos_Classifiers_Classifier_Terms_Term_State* other) {
  using std::swap;
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Classifiers_Classifier_Terms_Term_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Classifiers_Classifier_Terms_Term::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_default_instance_._instance.get_mutable()->actions_ = const_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions*>(
      ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_default_instance_._instance.get_mutable()->conditions_ = const_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions*>(
      ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Config*>(
      ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Config::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_State*>(
      ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Classifiers_Classifier_Terms_Term::kActionsFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term::kConditionsFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term::kConfigFieldNumber;
const int Qos_Classifiers_Classifier_Terms_Term::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Classifiers_Classifier_Terms_Term::Qos_Classifiers_Classifier_Terms_Term()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term)
}
Qos_Classifiers_Classifier_Terms_Term::Qos_Classifiers_Classifier_Terms_Term(const Qos_Classifiers_Classifier_Terms_Term& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_conditions()) {
    conditions_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions(*from.conditions_);
  } else {
    conditions_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_actions()) {
    actions_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions(*from.actions_);
  } else {
    actions_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term)
}

void Qos_Classifiers_Classifier_Terms_Term::SharedCtor() {
  ::memset(&conditions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&conditions_)) + sizeof(config_));
  _cached_size_ = 0;
}

Qos_Classifiers_Classifier_Terms_Term::~Qos_Classifiers_Classifier_Terms_Term() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term)
  SharedDtor();
}

void Qos_Classifiers_Classifier_Terms_Term::SharedDtor() {
  if (this != internal_default_instance()) delete conditions_;
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete actions_;
  if (this != internal_default_instance()) delete config_;
}

void Qos_Classifiers_Classifier_Terms_Term::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Classifiers_Classifier_Terms_Term::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Classifiers_Classifier_Terms_Term& Qos_Classifiers_Classifier_Terms_Term::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term();
  return *internal_default_instance();
}

Qos_Classifiers_Classifier_Terms_Term* Qos_Classifiers_Classifier_Terms_Term::New(::google::protobuf::Arena* arena) const {
  Qos_Classifiers_Classifier_Terms_Term* n = new Qos_Classifiers_Classifier_Terms_Term;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Classifiers_Classifier_Terms_Term::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && conditions_ != NULL) {
    delete conditions_;
  }
  conditions_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && actions_ != NULL) {
    delete actions_;
  }
  actions_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Classifiers_Classifier_Terms_Term::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3354775738u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions conditions = 14705347 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions"];
      case 14705347: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 117642778 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_conditions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.State state = 18572232 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/state"];
      case 18572232: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 148577858 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions actions = 288444670 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions"];
      case 288444670: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 2307557362 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_actions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Config config = 419346967 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/config"];
      case 419346967: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 3354775738 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term)
  return false;
#undef DO_
}

void Qos_Classifiers_Classifier_Terms_Term::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions conditions = 14705347 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions"];
  if (this->has_conditions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14705347, *this->conditions_, output);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.State state = 18572232 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18572232, *this->state_, output);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions actions = 288444670 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions"];
  if (this->has_actions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      288444670, *this->actions_, output);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Config config = 419346967 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      419346967, *this->config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term)
}

::google::protobuf::uint8* Qos_Classifiers_Classifier_Terms_Term::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions conditions = 14705347 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions"];
  if (this->has_conditions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14705347, *this->conditions_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.State state = 18572232 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18572232, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions actions = 288444670 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions"];
  if (this->has_actions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        288444670, *this->actions_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Config config = 419346967 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        419346967, *this->config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term)
  return target;
}

size_t Qos_Classifiers_Classifier_Terms_Term::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions conditions = 14705347 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions"];
  if (this->has_conditions()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->conditions_);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.State state = 18572232 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/state"];
  if (this->has_state()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions actions = 288444670 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions"];
  if (this->has_actions()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->actions_);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Config config = 419346967 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Classifiers_Classifier_Terms_Term::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Classifiers_Classifier_Terms_Term* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Classifiers_Classifier_Terms_Term>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term)
    MergeFrom(*source);
  }
}

void Qos_Classifiers_Classifier_Terms_Term::MergeFrom(const Qos_Classifiers_Classifier_Terms_Term& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_conditions()) {
    mutable_conditions()->::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions::MergeFrom(from.conditions());
  }
  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_State::MergeFrom(from.state());
  }
  if (from.has_actions()) {
    mutable_actions()->::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions::MergeFrom(from.actions());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Config::MergeFrom(from.config());
  }
}

void Qos_Classifiers_Classifier_Terms_Term::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Classifiers_Classifier_Terms_Term::CopyFrom(const Qos_Classifiers_Classifier_Terms_Term& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Classifiers_Classifier_Terms_Term::IsInitialized() const {
  return true;
}

void Qos_Classifiers_Classifier_Terms_Term::Swap(Qos_Classifiers_Classifier_Terms_Term* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Classifiers_Classifier_Terms_Term::InternalSwap(Qos_Classifiers_Classifier_Terms_Term* other) {
  using std::swap;
  swap(conditions_, other->conditions_);
  swap(state_, other->state_);
  swap(actions_, other->actions_);
  swap(config_, other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Classifiers_Classifier_Terms_Term::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Classifiers_Classifier_Terms_TermKey::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_TermKey_default_instance_._instance.get_mutable()->term_ = const_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term*>(
      ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Classifiers_Classifier_Terms_TermKey::kIdFieldNumber;
const int Qos_Classifiers_Classifier_Terms_TermKey::kTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Classifiers_Classifier_Terms_TermKey::Qos_Classifiers_Classifier_Terms_TermKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_TermKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey)
}
Qos_Classifiers_Classifier_Terms_TermKey::Qos_Classifiers_Classifier_Terms_TermKey(const Qos_Classifiers_Classifier_Terms_TermKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_term()) {
    term_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term(*from.term_);
  } else {
    term_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey)
}

void Qos_Classifiers_Classifier_Terms_TermKey::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  term_ = NULL;
  _cached_size_ = 0;
}

Qos_Classifiers_Classifier_Terms_TermKey::~Qos_Classifiers_Classifier_Terms_TermKey() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey)
  SharedDtor();
}

void Qos_Classifiers_Classifier_Terms_TermKey::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete term_;
}

void Qos_Classifiers_Classifier_Terms_TermKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Classifiers_Classifier_Terms_TermKey::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Classifiers_Classifier_Terms_TermKey& Qos_Classifiers_Classifier_Terms_TermKey::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_TermKey();
  return *internal_default_instance();
}

Qos_Classifiers_Classifier_Terms_TermKey* Qos_Classifiers_Classifier_Terms_TermKey::New(::google::protobuf::Arena* arena) const {
  Qos_Classifiers_Classifier_Terms_TermKey* n = new Qos_Classifiers_Classifier_Terms_TermKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Classifiers_Classifier_Terms_TermKey::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && term_ != NULL) {
    delete term_;
  }
  term_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Classifiers_Classifier_Terms_TermKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/id"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term term = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_term()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey)
  return false;
#undef DO_
}

void Qos_Classifiers_Classifier_Terms_TermKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/id"];
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term term = 2;
  if (this->has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->term_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey)
}

::google::protobuf::uint8* Qos_Classifiers_Classifier_Terms_TermKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/id"];
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term term = 2;
  if (this->has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->term_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey)
  return target;
}

size_t Qos_Classifiers_Classifier_Terms_TermKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 1 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term term = 2;
  if (this->has_term()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->term_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Classifiers_Classifier_Terms_TermKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Classifiers_Classifier_Terms_TermKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Classifiers_Classifier_Terms_TermKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey)
    MergeFrom(*source);
  }
}

void Qos_Classifiers_Classifier_Terms_TermKey::MergeFrom(const Qos_Classifiers_Classifier_Terms_TermKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_term()) {
    mutable_term()->::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term::MergeFrom(from.term());
  }
}

void Qos_Classifiers_Classifier_Terms_TermKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Classifiers_Classifier_Terms_TermKey::CopyFrom(const Qos_Classifiers_Classifier_Terms_TermKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Classifiers_Classifier_Terms_TermKey::IsInitialized() const {
  return true;
}

void Qos_Classifiers_Classifier_Terms_TermKey::Swap(Qos_Classifiers_Classifier_Terms_TermKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Classifiers_Classifier_Terms_TermKey::InternalSwap(Qos_Classifiers_Classifier_Terms_TermKey* other) {
  using std::swap;
  id_.Swap(&other->id_);
  swap(term_, other->term_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Classifiers_Classifier_Terms_TermKey::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Classifiers_Classifier_Terms::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Classifiers_Classifier_Terms::kTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Classifiers_Classifier_Terms::Qos_Classifiers_Classifier_Terms()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms)
}
Qos_Classifiers_Classifier_Terms::Qos_Classifiers_Classifier_Terms(const Qos_Classifiers_Classifier_Terms& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      term_(from.term_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms)
}

void Qos_Classifiers_Classifier_Terms::SharedCtor() {
  _cached_size_ = 0;
}

Qos_Classifiers_Classifier_Terms::~Qos_Classifiers_Classifier_Terms() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms)
  SharedDtor();
}

void Qos_Classifiers_Classifier_Terms::SharedDtor() {
}

void Qos_Classifiers_Classifier_Terms::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Classifiers_Classifier_Terms::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Classifiers_Classifier_Terms& Qos_Classifiers_Classifier_Terms::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms();
  return *internal_default_instance();
}

Qos_Classifiers_Classifier_Terms* Qos_Classifiers_Classifier_Terms::New(::google::protobuf::Arena* arena) const {
  Qos_Classifiers_Classifier_Terms* n = new Qos_Classifiers_Classifier_Terms;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Classifiers_Classifier_Terms::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  term_.Clear();
  _internal_metadata_.Clear();
}

bool Qos_Classifiers_Classifier_Terms::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(597279154u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey term = 74659894 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term"];
      case 74659894: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 597279154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_term()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms)
  return false;
#undef DO_
}

void Qos_Classifiers_Classifier_Terms::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey term = 74659894 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->term_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      74659894, this->term(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms)
}

::google::protobuf::uint8* Qos_Classifiers_Classifier_Terms::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey term = 74659894 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->term_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        74659894, this->term(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms)
  return target;
}

size_t Qos_Classifiers_Classifier_Terms::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey term = 74659894 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term"];
  {
    unsigned int count = static_cast<unsigned int>(this->term_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->term(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Classifiers_Classifier_Terms::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Classifiers_Classifier_Terms* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Classifiers_Classifier_Terms>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms)
    MergeFrom(*source);
  }
}

void Qos_Classifiers_Classifier_Terms::MergeFrom(const Qos_Classifiers_Classifier_Terms& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  term_.MergeFrom(from.term_);
}

void Qos_Classifiers_Classifier_Terms::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Classifiers_Classifier_Terms::CopyFrom(const Qos_Classifiers_Classifier_Terms& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Classifiers_Classifier_Terms::IsInitialized() const {
  return true;
}

void Qos_Classifiers_Classifier_Terms::Swap(Qos_Classifiers_Classifier_Terms* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Classifiers_Classifier_Terms::InternalSwap(Qos_Classifiers_Classifier_Terms* other) {
  using std::swap;
  term_.InternalSwap(&other->term_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Classifiers_Classifier_Terms::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Classifiers_Classifier::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Config*>(
      ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Config::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_State*>(
      ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_State::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_default_instance_._instance.get_mutable()->terms_ = const_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms*>(
      ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Classifiers_Classifier::kConfigFieldNumber;
const int Qos_Classifiers_Classifier::kStateFieldNumber;
const int Qos_Classifiers_Classifier::kTermsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Classifiers_Classifier::Qos_Classifiers_Classifier()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier)
}
Qos_Classifiers_Classifier::Qos_Classifiers_Classifier(const Qos_Classifiers_Classifier& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_terms()) {
    terms_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms(*from.terms_);
  } else {
    terms_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier)
}

void Qos_Classifiers_Classifier::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&terms_) -
      reinterpret_cast<char*>(&state_)) + sizeof(terms_));
  _cached_size_ = 0;
}

Qos_Classifiers_Classifier::~Qos_Classifiers_Classifier() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Classifiers.Classifier)
  SharedDtor();
}

void Qos_Classifiers_Classifier::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete terms_;
}

void Qos_Classifiers_Classifier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Classifiers_Classifier::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Classifiers_Classifier& Qos_Classifiers_Classifier::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier();
  return *internal_default_instance();
}

Qos_Classifiers_Classifier* Qos_Classifiers_Classifier::New(::google::protobuf::Arena* arena) const {
  Qos_Classifiers_Classifier* n = new Qos_Classifiers_Classifier;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Classifiers_Classifier::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && terms_ != NULL) {
    delete terms_;
  }
  terms_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Classifiers_Classifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4050510890u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.State state = 125517931 [(.yext.schemapath) = "/qos/classifiers/classifier/state"];
      case 125517931: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 1004143450 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Config config = 505734526 [(.yext.schemapath) = "/qos/classifiers/classifier/config"];
      case 505734526: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 4045876210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms terms = 506313861 [(.yext.schemapath) = "/qos/classifiers/classifier/terms"];
      case 506313861: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 4050510890 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_terms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Classifiers.Classifier)
  return false;
#undef DO_
}

void Qos_Classifiers_Classifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.State state = 125517931 [(.yext.schemapath) = "/qos/classifiers/classifier/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      125517931, *this->state_, output);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Config config = 505734526 [(.yext.schemapath) = "/qos/classifiers/classifier/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      505734526, *this->config_, output);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms terms = 506313861 [(.yext.schemapath) = "/qos/classifiers/classifier/terms"];
  if (this->has_terms()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      506313861, *this->terms_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier)
}

::google::protobuf::uint8* Qos_Classifiers_Classifier::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.State state = 125517931 [(.yext.schemapath) = "/qos/classifiers/classifier/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        125517931, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Config config = 505734526 [(.yext.schemapath) = "/qos/classifiers/classifier/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        505734526, *this->config_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms terms = 506313861 [(.yext.schemapath) = "/qos/classifiers/classifier/terms"];
  if (this->has_terms()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        506313861, *this->terms_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Classifiers.Classifier)
  return target;
}

size_t Qos_Classifiers_Classifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.State state = 125517931 [(.yext.schemapath) = "/qos/classifiers/classifier/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Config config = 505734526 [(.yext.schemapath) = "/qos/classifiers/classifier/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms terms = 506313861 [(.yext.schemapath) = "/qos/classifiers/classifier/terms"];
  if (this->has_terms()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->terms_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Classifiers_Classifier::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Classifiers_Classifier* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Classifiers_Classifier>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Classifiers.Classifier)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Classifiers.Classifier)
    MergeFrom(*source);
  }
}

void Qos_Classifiers_Classifier::MergeFrom(const Qos_Classifiers_Classifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_Classifiers_Classifier_State::MergeFrom(from.state());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Config::MergeFrom(from.config());
  }
  if (from.has_terms()) {
    mutable_terms()->::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms::MergeFrom(from.terms());
  }
}

void Qos_Classifiers_Classifier::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Classifiers_Classifier::CopyFrom(const Qos_Classifiers_Classifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.Classifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Classifiers_Classifier::IsInitialized() const {
  return true;
}

void Qos_Classifiers_Classifier::Swap(Qos_Classifiers_Classifier* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Classifiers_Classifier::InternalSwap(Qos_Classifiers_Classifier* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(config_, other->config_);
  swap(terms_, other->terms_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Classifiers_Classifier::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Classifiers_ClassifierKey::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Classifiers_ClassifierKey_default_instance_._instance.get_mutable()->classifier_ = const_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier*>(
      ::openconfig::openconfig_qos::Qos_Classifiers_Classifier::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Classifiers_ClassifierKey::kNameFieldNumber;
const int Qos_Classifiers_ClassifierKey::kClassifierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Classifiers_ClassifierKey::Qos_Classifiers_ClassifierKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_ClassifierKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey)
}
Qos_Classifiers_ClassifierKey::Qos_Classifiers_ClassifierKey(const Qos_Classifiers_ClassifierKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_classifier()) {
    classifier_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier(*from.classifier_);
  } else {
    classifier_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey)
}

void Qos_Classifiers_ClassifierKey::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  classifier_ = NULL;
  _cached_size_ = 0;
}

Qos_Classifiers_ClassifierKey::~Qos_Classifiers_ClassifierKey() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey)
  SharedDtor();
}

void Qos_Classifiers_ClassifierKey::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete classifier_;
}

void Qos_Classifiers_ClassifierKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Classifiers_ClassifierKey::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Classifiers_ClassifierKey& Qos_Classifiers_ClassifierKey::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_ClassifierKey();
  return *internal_default_instance();
}

Qos_Classifiers_ClassifierKey* Qos_Classifiers_ClassifierKey::New(::google::protobuf::Arena* arena) const {
  Qos_Classifiers_ClassifierKey* n = new Qos_Classifiers_ClassifierKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Classifiers_ClassifierKey::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && classifier_ != NULL) {
    delete classifier_;
  }
  classifier_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Classifiers_ClassifierKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1 [(.yext.schemapath) = "/qos/classifiers/classifier/name"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Classifiers.Classifier classifier = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_classifier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey)
  return false;
#undef DO_
}

void Qos_Classifiers_ClassifierKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.yext.schemapath) = "/qos/classifiers/classifier/name"];
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier classifier = 2;
  if (this->has_classifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->classifier_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey)
}

::google::protobuf::uint8* Qos_Classifiers_ClassifierKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.yext.schemapath) = "/qos/classifiers/classifier/name"];
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier classifier = 2;
  if (this->has_classifier()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->classifier_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey)
  return target;
}

size_t Qos_Classifiers_ClassifierKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1 [(.yext.schemapath) = "/qos/classifiers/classifier/name"];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier classifier = 2;
  if (this->has_classifier()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->classifier_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Classifiers_ClassifierKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Classifiers_ClassifierKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Classifiers_ClassifierKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey)
    MergeFrom(*source);
  }
}

void Qos_Classifiers_ClassifierKey::MergeFrom(const Qos_Classifiers_ClassifierKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_classifier()) {
    mutable_classifier()->::openconfig::openconfig_qos::Qos_Classifiers_Classifier::MergeFrom(from.classifier());
  }
}

void Qos_Classifiers_ClassifierKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Classifiers_ClassifierKey::CopyFrom(const Qos_Classifiers_ClassifierKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Classifiers_ClassifierKey::IsInitialized() const {
  return true;
}

void Qos_Classifiers_ClassifierKey::Swap(Qos_Classifiers_ClassifierKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Classifiers_ClassifierKey::InternalSwap(Qos_Classifiers_ClassifierKey* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(classifier_, other->classifier_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Classifiers_ClassifierKey::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Classifiers::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Classifiers::kClassifierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Classifiers::Qos_Classifiers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Classifiers)
}
Qos_Classifiers::Qos_Classifiers(const Qos_Classifiers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      classifier_(from.classifier_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Classifiers)
}

void Qos_Classifiers::SharedCtor() {
  _cached_size_ = 0;
}

Qos_Classifiers::~Qos_Classifiers() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Classifiers)
  SharedDtor();
}

void Qos_Classifiers::SharedDtor() {
}

void Qos_Classifiers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Classifiers::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Classifiers& Qos_Classifiers::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers();
  return *internal_default_instance();
}

Qos_Classifiers* Qos_Classifiers::New(::google::protobuf::Arena* arena) const {
  Qos_Classifiers* n = new Qos_Classifiers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Classifiers::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Classifiers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  classifier_.Clear();
  _internal_metadata_.Clear();
}

bool Qos_Classifiers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Classifiers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2253707338u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey classifier = 281713417 [(.yext.schemapath) = "/qos/classifiers/classifier"];
      case 281713417: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 2253707338 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_classifier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Classifiers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Classifiers)
  return false;
#undef DO_
}

void Qos_Classifiers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Classifiers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey classifier = 281713417 [(.yext.schemapath) = "/qos/classifiers/classifier"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->classifier_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      281713417, this->classifier(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Classifiers)
}

::google::protobuf::uint8* Qos_Classifiers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Classifiers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey classifier = 281713417 [(.yext.schemapath) = "/qos/classifiers/classifier"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->classifier_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        281713417, this->classifier(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Classifiers)
  return target;
}

size_t Qos_Classifiers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Classifiers)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey classifier = 281713417 [(.yext.schemapath) = "/qos/classifiers/classifier"];
  {
    unsigned int count = static_cast<unsigned int>(this->classifier_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->classifier(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Classifiers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Classifiers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Classifiers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Classifiers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Classifiers)
    MergeFrom(*source);
  }
}

void Qos_Classifiers::MergeFrom(const Qos_Classifiers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Classifiers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  classifier_.MergeFrom(from.classifier_);
}

void Qos_Classifiers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Classifiers::CopyFrom(const Qos_Classifiers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Classifiers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Classifiers::IsInitialized() const {
  return true;
}

void Qos_Classifiers::Swap(Qos_Classifiers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Classifiers::InternalSwap(Qos_Classifiers* other) {
  using std::swap;
  classifier_.InternalSwap(&other->classifier_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Classifiers::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Config::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Config::Qos_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Config)
}
Qos_Config::Qos_Config(const Qos_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Config)
}

void Qos_Config::SharedCtor() {
  _cached_size_ = 0;
}

Qos_Config::~Qos_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Config)
  SharedDtor();
}

void Qos_Config::SharedDtor() {
}

void Qos_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Config& Qos_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Config();
  return *internal_default_instance();
}

Qos_Config* Qos_Config::New(::google::protobuf::Arena* arena) const {
  Qos_Config* n = new Qos_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool Qos_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Config)
  return false;
#undef DO_
}

void Qos_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Config)
}

::google::protobuf::uint8* Qos_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Config)
  return target;
}

size_t Qos_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Config)
    MergeFrom(*source);
  }
}

void Qos_Config::MergeFrom(const Qos_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Qos_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Config::CopyFrom(const Qos_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Config::IsInitialized() const {
  return true;
}

void Qos_Config::Swap(Qos_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Config::InternalSwap(Qos_Config* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_ForwardingGroups_ForwardingGroup_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_ForwardingGroups_ForwardingGroup_Config_default_instance_._instance.get_mutable()->fabric_priority_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_ForwardingGroups_ForwardingGroup_Config_default_instance_._instance.get_mutable()->name_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_ForwardingGroups_ForwardingGroup_Config_default_instance_._instance.get_mutable()->output_queue_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void Qos_ForwardingGroups_ForwardingGroup_Config::clear_fabric_priority() {
  if (GetArenaNoVirtual() == NULL && fabric_priority_ != NULL) {
    delete fabric_priority_;
  }
  fabric_priority_ = NULL;
}
void Qos_ForwardingGroups_ForwardingGroup_Config::clear_name() {
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
}
void Qos_ForwardingGroups_ForwardingGroup_Config::clear_output_queue() {
  if (GetArenaNoVirtual() == NULL && output_queue_ != NULL) {
    delete output_queue_;
  }
  output_queue_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_ForwardingGroups_ForwardingGroup_Config::kFabricPriorityFieldNumber;
const int Qos_ForwardingGroups_ForwardingGroup_Config::kNameFieldNumber;
const int Qos_ForwardingGroups_ForwardingGroup_Config::kOutputQueueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_ForwardingGroups_ForwardingGroup_Config::Qos_ForwardingGroups_ForwardingGroup_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_ForwardingGroups_ForwardingGroup_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.Config)
}
Qos_ForwardingGroups_ForwardingGroup_Config::Qos_ForwardingGroups_ForwardingGroup_Config(const Qos_ForwardingGroups_ForwardingGroup_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_output_queue()) {
    output_queue_ = new ::ywrapper::StringValue(*from.output_queue_);
  } else {
    output_queue_ = NULL;
  }
  if (from.has_name()) {
    name_ = new ::ywrapper::StringValue(*from.name_);
  } else {
    name_ = NULL;
  }
  if (from.has_fabric_priority()) {
    fabric_priority_ = new ::ywrapper::UintValue(*from.fabric_priority_);
  } else {
    fabric_priority_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.Config)
}

void Qos_ForwardingGroups_ForwardingGroup_Config::SharedCtor() {
  ::memset(&output_queue_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fabric_priority_) -
      reinterpret_cast<char*>(&output_queue_)) + sizeof(fabric_priority_));
  _cached_size_ = 0;
}

Qos_ForwardingGroups_ForwardingGroup_Config::~Qos_ForwardingGroups_ForwardingGroup_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.Config)
  SharedDtor();
}

void Qos_ForwardingGroups_ForwardingGroup_Config::SharedDtor() {
  if (this != internal_default_instance()) delete output_queue_;
  if (this != internal_default_instance()) delete name_;
  if (this != internal_default_instance()) delete fabric_priority_;
}

void Qos_ForwardingGroups_ForwardingGroup_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_ForwardingGroups_ForwardingGroup_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_ForwardingGroups_ForwardingGroup_Config& Qos_ForwardingGroups_ForwardingGroup_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_ForwardingGroups_ForwardingGroup_Config();
  return *internal_default_instance();
}

Qos_ForwardingGroups_ForwardingGroup_Config* Qos_ForwardingGroups_ForwardingGroup_Config::New(::google::protobuf::Arena* arena) const {
  Qos_ForwardingGroups_ForwardingGroup_Config* n = new Qos_ForwardingGroups_ForwardingGroup_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_ForwardingGroups_ForwardingGroup_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && output_queue_ != NULL) {
    delete output_queue_;
  }
  output_queue_ = NULL;
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
  if (GetArenaNoVirtual() == NULL && fabric_priority_ != NULL) {
    delete fabric_priority_;
  }
  fabric_priority_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_ForwardingGroups_ForwardingGroup_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(1595956026u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue output_queue = 22359152 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/config/output-queue"];
      case 22359152: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 178873218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_output_queue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue name = 179879028 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/config/name"];
      case 179879028: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 1439032226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue fabric_priority = 199494503 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/config/fabric-priority"];
      case 199494503: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 1595956026 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fabric_priority()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.Config)
  return false;
#undef DO_
}

void Qos_ForwardingGroups_ForwardingGroup_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue output_queue = 22359152 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/config/output-queue"];
  if (this->has_output_queue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22359152, *this->output_queue_, output);
  }

  // .ywrapper.StringValue name = 179879028 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/config/name"];
  if (this->has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      179879028, *this->name_, output);
  }

  // .ywrapper.UintValue fabric_priority = 199494503 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/config/fabric-priority"];
  if (this->has_fabric_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      199494503, *this->fabric_priority_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.Config)
}

::google::protobuf::uint8* Qos_ForwardingGroups_ForwardingGroup_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue output_queue = 22359152 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/config/output-queue"];
  if (this->has_output_queue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22359152, *this->output_queue_, deterministic, target);
  }

  // .ywrapper.StringValue name = 179879028 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/config/name"];
  if (this->has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        179879028, *this->name_, deterministic, target);
  }

  // .ywrapper.UintValue fabric_priority = 199494503 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/config/fabric-priority"];
  if (this->has_fabric_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        199494503, *this->fabric_priority_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.Config)
  return target;
}

size_t Qos_ForwardingGroups_ForwardingGroup_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue output_queue = 22359152 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/config/output-queue"];
  if (this->has_output_queue()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->output_queue_);
  }

  // .ywrapper.StringValue name = 179879028 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/config/name"];
  if (this->has_name()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->name_);
  }

  // .ywrapper.UintValue fabric_priority = 199494503 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/config/fabric-priority"];
  if (this->has_fabric_priority()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->fabric_priority_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_ForwardingGroups_ForwardingGroup_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_ForwardingGroups_ForwardingGroup_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_ForwardingGroups_ForwardingGroup_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.Config)
    MergeFrom(*source);
  }
}

void Qos_ForwardingGroups_ForwardingGroup_Config::MergeFrom(const Qos_ForwardingGroups_ForwardingGroup_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_output_queue()) {
    mutable_output_queue()->::ywrapper::StringValue::MergeFrom(from.output_queue());
  }
  if (from.has_name()) {
    mutable_name()->::ywrapper::StringValue::MergeFrom(from.name());
  }
  if (from.has_fabric_priority()) {
    mutable_fabric_priority()->::ywrapper::UintValue::MergeFrom(from.fabric_priority());
  }
}

void Qos_ForwardingGroups_ForwardingGroup_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_ForwardingGroups_ForwardingGroup_Config::CopyFrom(const Qos_ForwardingGroups_ForwardingGroup_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_ForwardingGroups_ForwardingGroup_Config::IsInitialized() const {
  return true;
}

void Qos_ForwardingGroups_ForwardingGroup_Config::Swap(Qos_ForwardingGroups_ForwardingGroup_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_ForwardingGroups_ForwardingGroup_Config::InternalSwap(Qos_ForwardingGroups_ForwardingGroup_Config* other) {
  using std::swap;
  swap(output_queue_, other->output_queue_);
  swap(name_, other->name_);
  swap(fabric_priority_, other->fabric_priority_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_ForwardingGroups_ForwardingGroup_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_ForwardingGroups_ForwardingGroup_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_ForwardingGroups_ForwardingGroup_State_default_instance_._instance.get_mutable()->fabric_priority_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_ForwardingGroups_ForwardingGroup_State_default_instance_._instance.get_mutable()->name_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_ForwardingGroups_ForwardingGroup_State_default_instance_._instance.get_mutable()->output_queue_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void Qos_ForwardingGroups_ForwardingGroup_State::clear_fabric_priority() {
  if (GetArenaNoVirtual() == NULL && fabric_priority_ != NULL) {
    delete fabric_priority_;
  }
  fabric_priority_ = NULL;
}
void Qos_ForwardingGroups_ForwardingGroup_State::clear_name() {
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
}
void Qos_ForwardingGroups_ForwardingGroup_State::clear_output_queue() {
  if (GetArenaNoVirtual() == NULL && output_queue_ != NULL) {
    delete output_queue_;
  }
  output_queue_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_ForwardingGroups_ForwardingGroup_State::kFabricPriorityFieldNumber;
const int Qos_ForwardingGroups_ForwardingGroup_State::kNameFieldNumber;
const int Qos_ForwardingGroups_ForwardingGroup_State::kOutputQueueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_ForwardingGroups_ForwardingGroup_State::Qos_ForwardingGroups_ForwardingGroup_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_ForwardingGroups_ForwardingGroup_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.State)
}
Qos_ForwardingGroups_ForwardingGroup_State::Qos_ForwardingGroups_ForwardingGroup_State(const Qos_ForwardingGroups_ForwardingGroup_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_output_queue()) {
    output_queue_ = new ::ywrapper::StringValue(*from.output_queue_);
  } else {
    output_queue_ = NULL;
  }
  if (from.has_name()) {
    name_ = new ::ywrapper::StringValue(*from.name_);
  } else {
    name_ = NULL;
  }
  if (from.has_fabric_priority()) {
    fabric_priority_ = new ::ywrapper::UintValue(*from.fabric_priority_);
  } else {
    fabric_priority_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.State)
}

void Qos_ForwardingGroups_ForwardingGroup_State::SharedCtor() {
  ::memset(&output_queue_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fabric_priority_) -
      reinterpret_cast<char*>(&output_queue_)) + sizeof(fabric_priority_));
  _cached_size_ = 0;
}

Qos_ForwardingGroups_ForwardingGroup_State::~Qos_ForwardingGroups_ForwardingGroup_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.State)
  SharedDtor();
}

void Qos_ForwardingGroups_ForwardingGroup_State::SharedDtor() {
  if (this != internal_default_instance()) delete output_queue_;
  if (this != internal_default_instance()) delete name_;
  if (this != internal_default_instance()) delete fabric_priority_;
}

void Qos_ForwardingGroups_ForwardingGroup_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_ForwardingGroups_ForwardingGroup_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_ForwardingGroups_ForwardingGroup_State& Qos_ForwardingGroups_ForwardingGroup_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_ForwardingGroups_ForwardingGroup_State();
  return *internal_default_instance();
}

Qos_ForwardingGroups_ForwardingGroup_State* Qos_ForwardingGroups_ForwardingGroup_State::New(::google::protobuf::Arena* arena) const {
  Qos_ForwardingGroups_ForwardingGroup_State* n = new Qos_ForwardingGroups_ForwardingGroup_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_ForwardingGroups_ForwardingGroup_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && output_queue_ != NULL) {
    delete output_queue_;
  }
  output_queue_ = NULL;
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
  if (GetArenaNoVirtual() == NULL && fabric_priority_ != NULL) {
    delete fabric_priority_;
  }
  fabric_priority_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_ForwardingGroups_ForwardingGroup_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3480448338u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue output_queue = 104836423 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/state/output-queue"];
      case 104836423: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 838691386 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_output_queue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue name = 399045611 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/state/name"];
      case 399045611: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 3192364890 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue fabric_priority = 435056042 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/state/fabric-priority"];
      case 435056042: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 3480448338 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fabric_priority()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.State)
  return false;
#undef DO_
}

void Qos_ForwardingGroups_ForwardingGroup_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue output_queue = 104836423 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/state/output-queue"];
  if (this->has_output_queue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104836423, *this->output_queue_, output);
  }

  // .ywrapper.StringValue name = 399045611 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/state/name"];
  if (this->has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      399045611, *this->name_, output);
  }

  // .ywrapper.UintValue fabric_priority = 435056042 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/state/fabric-priority"];
  if (this->has_fabric_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      435056042, *this->fabric_priority_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.State)
}

::google::protobuf::uint8* Qos_ForwardingGroups_ForwardingGroup_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue output_queue = 104836423 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/state/output-queue"];
  if (this->has_output_queue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        104836423, *this->output_queue_, deterministic, target);
  }

  // .ywrapper.StringValue name = 399045611 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/state/name"];
  if (this->has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        399045611, *this->name_, deterministic, target);
  }

  // .ywrapper.UintValue fabric_priority = 435056042 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/state/fabric-priority"];
  if (this->has_fabric_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        435056042, *this->fabric_priority_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.State)
  return target;
}

size_t Qos_ForwardingGroups_ForwardingGroup_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue output_queue = 104836423 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/state/output-queue"];
  if (this->has_output_queue()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->output_queue_);
  }

  // .ywrapper.StringValue name = 399045611 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/state/name"];
  if (this->has_name()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->name_);
  }

  // .ywrapper.UintValue fabric_priority = 435056042 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/state/fabric-priority"];
  if (this->has_fabric_priority()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->fabric_priority_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_ForwardingGroups_ForwardingGroup_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_ForwardingGroups_ForwardingGroup_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_ForwardingGroups_ForwardingGroup_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.State)
    MergeFrom(*source);
  }
}

void Qos_ForwardingGroups_ForwardingGroup_State::MergeFrom(const Qos_ForwardingGroups_ForwardingGroup_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_output_queue()) {
    mutable_output_queue()->::ywrapper::StringValue::MergeFrom(from.output_queue());
  }
  if (from.has_name()) {
    mutable_name()->::ywrapper::StringValue::MergeFrom(from.name());
  }
  if (from.has_fabric_priority()) {
    mutable_fabric_priority()->::ywrapper::UintValue::MergeFrom(from.fabric_priority());
  }
}

void Qos_ForwardingGroups_ForwardingGroup_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_ForwardingGroups_ForwardingGroup_State::CopyFrom(const Qos_ForwardingGroups_ForwardingGroup_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_ForwardingGroups_ForwardingGroup_State::IsInitialized() const {
  return true;
}

void Qos_ForwardingGroups_ForwardingGroup_State::Swap(Qos_ForwardingGroups_ForwardingGroup_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_ForwardingGroups_ForwardingGroup_State::InternalSwap(Qos_ForwardingGroups_ForwardingGroup_State* other) {
  using std::swap;
  swap(output_queue_, other->output_queue_);
  swap(name_, other->name_);
  swap(fabric_priority_, other->fabric_priority_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_ForwardingGroups_ForwardingGroup_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_ForwardingGroups_ForwardingGroup::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_ForwardingGroups_ForwardingGroup_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_Config*>(
      ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_Config::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_ForwardingGroups_ForwardingGroup_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_State*>(
      ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_ForwardingGroups_ForwardingGroup::kConfigFieldNumber;
const int Qos_ForwardingGroups_ForwardingGroup::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_ForwardingGroups_ForwardingGroup::Qos_ForwardingGroups_ForwardingGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_ForwardingGroups_ForwardingGroup();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup)
}
Qos_ForwardingGroups_ForwardingGroup::Qos_ForwardingGroups_ForwardingGroup(const Qos_ForwardingGroups_ForwardingGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_State(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup)
}

void Qos_ForwardingGroups_ForwardingGroup::SharedCtor() {
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&config_)) + sizeof(state_));
  _cached_size_ = 0;
}

Qos_ForwardingGroups_ForwardingGroup::~Qos_ForwardingGroups_ForwardingGroup() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup)
  SharedDtor();
}

void Qos_ForwardingGroups_ForwardingGroup::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void Qos_ForwardingGroups_ForwardingGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_ForwardingGroups_ForwardingGroup::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_ForwardingGroups_ForwardingGroup& Qos_ForwardingGroups_ForwardingGroup::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_ForwardingGroups_ForwardingGroup();
  return *internal_default_instance();
}

Qos_ForwardingGroups_ForwardingGroup* Qos_ForwardingGroups_ForwardingGroup::New(::google::protobuf::Arena* arena) const {
  Qos_ForwardingGroups_ForwardingGroup* n = new Qos_ForwardingGroups_ForwardingGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_ForwardingGroups_ForwardingGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_ForwardingGroups_ForwardingGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4098212570u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.Config config = 30587438 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/config"];
      case 30587438: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 244699506 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.State state = 512276571 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/state"];
      case 512276571: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 4098212570 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup)
  return false;
#undef DO_
}

void Qos_ForwardingGroups_ForwardingGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.Config config = 30587438 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30587438, *this->config_, output);
  }

  // .openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.State state = 512276571 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      512276571, *this->state_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup)
}

::google::protobuf::uint8* Qos_ForwardingGroups_ForwardingGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.Config config = 30587438 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30587438, *this->config_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.State state = 512276571 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        512276571, *this->state_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup)
  return target;
}

size_t Qos_ForwardingGroups_ForwardingGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.Config config = 30587438 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/config"];
  if (this->has_config()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  // .openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.State state = 512276571 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_ForwardingGroups_ForwardingGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_ForwardingGroups_ForwardingGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_ForwardingGroups_ForwardingGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup)
    MergeFrom(*source);
  }
}

void Qos_ForwardingGroups_ForwardingGroup::MergeFrom(const Qos_ForwardingGroups_ForwardingGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_Config::MergeFrom(from.config());
  }
  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_State::MergeFrom(from.state());
  }
}

void Qos_ForwardingGroups_ForwardingGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_ForwardingGroups_ForwardingGroup::CopyFrom(const Qos_ForwardingGroups_ForwardingGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_ForwardingGroups_ForwardingGroup::IsInitialized() const {
  return true;
}

void Qos_ForwardingGroups_ForwardingGroup::Swap(Qos_ForwardingGroups_ForwardingGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_ForwardingGroups_ForwardingGroup::InternalSwap(Qos_ForwardingGroups_ForwardingGroup* other) {
  using std::swap;
  swap(config_, other->config_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_ForwardingGroups_ForwardingGroup::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_ForwardingGroups_ForwardingGroupKey::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_ForwardingGroups_ForwardingGroupKey_default_instance_._instance.get_mutable()->forwarding_group_ = const_cast< ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup*>(
      ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_ForwardingGroups_ForwardingGroupKey::kNameFieldNumber;
const int Qos_ForwardingGroups_ForwardingGroupKey::kForwardingGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_ForwardingGroups_ForwardingGroupKey::Qos_ForwardingGroups_ForwardingGroupKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_ForwardingGroups_ForwardingGroupKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey)
}
Qos_ForwardingGroups_ForwardingGroupKey::Qos_ForwardingGroups_ForwardingGroupKey(const Qos_ForwardingGroups_ForwardingGroupKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_forwarding_group()) {
    forwarding_group_ = new ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup(*from.forwarding_group_);
  } else {
    forwarding_group_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey)
}

void Qos_ForwardingGroups_ForwardingGroupKey::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  forwarding_group_ = NULL;
  _cached_size_ = 0;
}

Qos_ForwardingGroups_ForwardingGroupKey::~Qos_ForwardingGroups_ForwardingGroupKey() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey)
  SharedDtor();
}

void Qos_ForwardingGroups_ForwardingGroupKey::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete forwarding_group_;
}

void Qos_ForwardingGroups_ForwardingGroupKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_ForwardingGroups_ForwardingGroupKey::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_ForwardingGroups_ForwardingGroupKey& Qos_ForwardingGroups_ForwardingGroupKey::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_ForwardingGroups_ForwardingGroupKey();
  return *internal_default_instance();
}

Qos_ForwardingGroups_ForwardingGroupKey* Qos_ForwardingGroups_ForwardingGroupKey::New(::google::protobuf::Arena* arena) const {
  Qos_ForwardingGroups_ForwardingGroupKey* n = new Qos_ForwardingGroups_ForwardingGroupKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_ForwardingGroups_ForwardingGroupKey::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && forwarding_group_ != NULL) {
    delete forwarding_group_;
  }
  forwarding_group_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_ForwardingGroups_ForwardingGroupKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/name"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup forwarding_group = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_forwarding_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey)
  return false;
#undef DO_
}

void Qos_ForwardingGroups_ForwardingGroupKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/name"];
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup forwarding_group = 2;
  if (this->has_forwarding_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->forwarding_group_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey)
}

::google::protobuf::uint8* Qos_ForwardingGroups_ForwardingGroupKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/name"];
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup forwarding_group = 2;
  if (this->has_forwarding_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->forwarding_group_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey)
  return target;
}

size_t Qos_ForwardingGroups_ForwardingGroupKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/name"];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup forwarding_group = 2;
  if (this->has_forwarding_group()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->forwarding_group_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_ForwardingGroups_ForwardingGroupKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_ForwardingGroups_ForwardingGroupKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_ForwardingGroups_ForwardingGroupKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey)
    MergeFrom(*source);
  }
}

void Qos_ForwardingGroups_ForwardingGroupKey::MergeFrom(const Qos_ForwardingGroups_ForwardingGroupKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_forwarding_group()) {
    mutable_forwarding_group()->::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup::MergeFrom(from.forwarding_group());
  }
}

void Qos_ForwardingGroups_ForwardingGroupKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_ForwardingGroups_ForwardingGroupKey::CopyFrom(const Qos_ForwardingGroups_ForwardingGroupKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_ForwardingGroups_ForwardingGroupKey::IsInitialized() const {
  return true;
}

void Qos_ForwardingGroups_ForwardingGroupKey::Swap(Qos_ForwardingGroups_ForwardingGroupKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_ForwardingGroups_ForwardingGroupKey::InternalSwap(Qos_ForwardingGroups_ForwardingGroupKey* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(forwarding_group_, other->forwarding_group_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_ForwardingGroups_ForwardingGroupKey::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_ForwardingGroups::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_ForwardingGroups::kForwardingGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_ForwardingGroups::Qos_ForwardingGroups()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_ForwardingGroups();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.ForwardingGroups)
}
Qos_ForwardingGroups::Qos_ForwardingGroups(const Qos_ForwardingGroups& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      forwarding_group_(from.forwarding_group_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.ForwardingGroups)
}

void Qos_ForwardingGroups::SharedCtor() {
  _cached_size_ = 0;
}

Qos_ForwardingGroups::~Qos_ForwardingGroups() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.ForwardingGroups)
  SharedDtor();
}

void Qos_ForwardingGroups::SharedDtor() {
}

void Qos_ForwardingGroups::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_ForwardingGroups::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_ForwardingGroups& Qos_ForwardingGroups::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_ForwardingGroups();
  return *internal_default_instance();
}

Qos_ForwardingGroups* Qos_ForwardingGroups::New(::google::protobuf::Arena* arena) const {
  Qos_ForwardingGroups* n = new Qos_ForwardingGroups;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_ForwardingGroups::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.ForwardingGroups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  forwarding_group_.Clear();
  _internal_metadata_.Clear();
}

bool Qos_ForwardingGroups::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.ForwardingGroups)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3638879946u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey forwarding_group = 454859993 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group"];
      case 454859993: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 3638879946 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_forwarding_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.ForwardingGroups)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.ForwardingGroups)
  return false;
#undef DO_
}

void Qos_ForwardingGroups::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.ForwardingGroups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey forwarding_group = 454859993 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->forwarding_group_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      454859993, this->forwarding_group(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.ForwardingGroups)
}

::google::protobuf::uint8* Qos_ForwardingGroups::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.ForwardingGroups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey forwarding_group = 454859993 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->forwarding_group_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        454859993, this->forwarding_group(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.ForwardingGroups)
  return target;
}

size_t Qos_ForwardingGroups::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.ForwardingGroups)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey forwarding_group = 454859993 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group"];
  {
    unsigned int count = static_cast<unsigned int>(this->forwarding_group_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->forwarding_group(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_ForwardingGroups::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.ForwardingGroups)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_ForwardingGroups* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_ForwardingGroups>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.ForwardingGroups)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.ForwardingGroups)
    MergeFrom(*source);
  }
}

void Qos_ForwardingGroups::MergeFrom(const Qos_ForwardingGroups& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.ForwardingGroups)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  forwarding_group_.MergeFrom(from.forwarding_group_);
}

void Qos_ForwardingGroups::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.ForwardingGroups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_ForwardingGroups::CopyFrom(const Qos_ForwardingGroups& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.ForwardingGroups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_ForwardingGroups::IsInitialized() const {
  return true;
}

void Qos_ForwardingGroups::Swap(Qos_ForwardingGroups* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_ForwardingGroups::InternalSwap(Qos_ForwardingGroups* other) {
  using std::swap;
  forwarding_group_.InternalSwap(&other->forwarding_group_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_ForwardingGroups::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Config_default_instance_._instance.get_mutable()->interface_id_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void Qos_Interfaces_Interface_Config::clear_interface_id() {
  if (GetArenaNoVirtual() == NULL && interface_id_ != NULL) {
    delete interface_id_;
  }
  interface_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Config::kInterfaceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Config::Qos_Interfaces_Interface_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Config)
}
Qos_Interfaces_Interface_Config::Qos_Interfaces_Interface_Config(const Qos_Interfaces_Interface_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_interface_id()) {
    interface_id_ = new ::ywrapper::StringValue(*from.interface_id_);
  } else {
    interface_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Config)
}

void Qos_Interfaces_Interface_Config::SharedCtor() {
  interface_id_ = NULL;
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Config::~Qos_Interfaces_Interface_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Config)
  SharedDtor();
}

void Qos_Interfaces_Interface_Config::SharedDtor() {
  if (this != internal_default_instance()) delete interface_id_;
}

void Qos_Interfaces_Interface_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Config& Qos_Interfaces_Interface_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Config();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Config* Qos_Interfaces_Interface_Config::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Config* n = new Qos_Interfaces_Interface_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && interface_id_ != NULL) {
    delete interface_id_;
  }
  interface_id_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2089008050u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue interface_id = 261126006 [(.yext.schemapath) = "/qos/interfaces/interface/config/interface-id"];
      case 261126006: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 2089008050 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_interface_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Config)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue interface_id = 261126006 [(.yext.schemapath) = "/qos/interfaces/interface/config/interface-id"];
  if (this->has_interface_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      261126006, *this->interface_id_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Config)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue interface_id = 261126006 [(.yext.schemapath) = "/qos/interfaces/interface/config/interface-id"];
  if (this->has_interface_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        261126006, *this->interface_id_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Config)
  return target;
}

size_t Qos_Interfaces_Interface_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue interface_id = 261126006 [(.yext.schemapath) = "/qos/interfaces/interface/config/interface-id"];
  if (this->has_interface_id()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->interface_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Config)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Config::MergeFrom(const Qos_Interfaces_Interface_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_interface_id()) {
    mutable_interface_id()->::ywrapper::StringValue::MergeFrom(from.interface_id());
  }
}

void Qos_Interfaces_Interface_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Config::CopyFrom(const Qos_Interfaces_Interface_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Config::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Config::Swap(Qos_Interfaces_Interface_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Config::InternalSwap(Qos_Interfaces_Interface_Config* other) {
  using std::swap;
  swap(interface_id_, other->interface_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_default_instance_._instance.get_mutable()->name_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::clear_name() {
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::kNameFieldNumber;
const int Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::Qos_Interfaces_Interface_Input_Classifers_Classifier_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Config)
}
Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::Qos_Interfaces_Interface_Input_Classifers_Classifier_Config(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_name()) {
    name_ = new ::ywrapper::StringValue(*from.name_);
  } else {
    name_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Config)
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::SharedCtor() {
  ::memset(&name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&name_)) + sizeof(type_));
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::~Qos_Interfaces_Interface_Input_Classifers_Classifier_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Config)
  SharedDtor();
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::SharedDtor() {
  if (this != internal_default_instance()) delete name_;
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Input_Classifers_Classifier_Config& Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Config();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Input_Classifers_Classifier_Config* Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Input_Classifers_Classifier_Config* n = new Qos_Interfaces_Interface_Input_Classifers_Classifier_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4221819856u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue name = 147745567 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/config/name"];
      case 147745567: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 1181964538 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Config.Type type = 527727482 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/config/type"];
      case 527727482: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 4221819856 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Config)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue name = 147745567 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/config/name"];
  if (this->has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      147745567, *this->name_, output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Config.Type type = 527727482 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/config/type"];
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      527727482, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Config)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue name = 147745567 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/config/name"];
  if (this->has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        147745567, *this->name_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Config.Type type = 527727482 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/config/type"];
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      527727482, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Config)
  return target;
}

size_t Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue name = 147745567 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/config/name"];
  if (this->has_name()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->name_);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Config.Type type = 527727482 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/config/type"];
  if (this->type() != 0) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Input_Classifers_Classifier_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Input_Classifers_Classifier_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Config)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::MergeFrom(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_name()) {
    mutable_name()->::ywrapper::StringValue::MergeFrom(from.name());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::CopyFrom(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::Swap(Qos_Interfaces_Interface_Input_Classifers_Classifier_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::InternalSwap(Qos_Interfaces_Interface_Input_Classifers_Classifier_Config* other) {
  using std::swap;
  swap(name_, other->name_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Input_Classifers_Classifier_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_Classifier_State_default_instance_._instance.get_mutable()->name_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void Qos_Interfaces_Interface_Input_Classifers_Classifier_State::clear_name() {
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Input_Classifers_Classifier_State::kNameFieldNumber;
const int Qos_Interfaces_Interface_Input_Classifers_Classifier_State::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Input_Classifers_Classifier_State::Qos_Interfaces_Interface_Input_Classifers_Classifier_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.State)
}
Qos_Interfaces_Interface_Input_Classifers_Classifier_State::Qos_Interfaces_Interface_Input_Classifers_Classifier_State(const Qos_Interfaces_Interface_Input_Classifers_Classifier_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_name()) {
    name_ = new ::ywrapper::StringValue(*from.name_);
  } else {
    name_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.State)
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_State::SharedCtor() {
  ::memset(&name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&name_)) + sizeof(type_));
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Input_Classifers_Classifier_State::~Qos_Interfaces_Interface_Input_Classifers_Classifier_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.State)
  SharedDtor();
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_State::SharedDtor() {
  if (this != internal_default_instance()) delete name_;
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Input_Classifers_Classifier_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Input_Classifers_Classifier_State& Qos_Interfaces_Interface_Input_Classifers_Classifier_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_State();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Input_Classifers_Classifier_State* Qos_Interfaces_Interface_Input_Classifers_Classifier_State::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Input_Classifers_Classifier_State* n = new Qos_Interfaces_Interface_Input_Classifers_Classifier_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Input_Classifers_Classifier_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3635914104u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue name = 194613362 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/state/name"];
      case 194613362: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 1556906898 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.State.Type type = 454489263 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/state/type"];
      case 454489263: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 3635914104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.State)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue name = 194613362 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/state/name"];
  if (this->has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      194613362, *this->name_, output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.State.Type type = 454489263 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/state/type"];
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      454489263, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.State)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Input_Classifers_Classifier_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue name = 194613362 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/state/name"];
  if (this->has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        194613362, *this->name_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.State.Type type = 454489263 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/state/type"];
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      454489263, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.State)
  return target;
}

size_t Qos_Interfaces_Interface_Input_Classifers_Classifier_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue name = 194613362 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/state/name"];
  if (this->has_name()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->name_);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.State.Type type = 454489263 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/state/type"];
  if (this->type() != 0) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Input_Classifers_Classifier_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Input_Classifers_Classifier_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.State)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_State::MergeFrom(const Qos_Interfaces_Interface_Input_Classifers_Classifier_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_name()) {
    mutable_name()->::ywrapper::StringValue::MergeFrom(from.name());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_State::CopyFrom(const Qos_Interfaces_Interface_Input_Classifers_Classifier_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Input_Classifers_Classifier_State::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_State::Swap(Qos_Interfaces_Interface_Input_Classifers_Classifier_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Input_Classifers_Classifier_State::InternalSwap(Qos_Interfaces_Interface_Input_Classifers_Classifier_State* other) {
  using std::swap;
  swap(name_, other->name_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Input_Classifers_Classifier_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config_default_instance_._instance.get_mutable()->id_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.Config)
}
Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::ywrapper::StringValue(*from.id_);
  } else {
    id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.Config)
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config::SharedCtor() {
  id_ = NULL;
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config::~Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.Config)
  SharedDtor();
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config& Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config* Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config* n = new Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2610124418u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue id = 326265552 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/config/id"];
      case 326265552: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 2610124418 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.Config)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue id = 326265552 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/config/id"];
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      326265552, *this->id_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.Config)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue id = 326265552 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/config/id"];
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        326265552, *this->id_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.Config)
  return target;
}

size_t Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue id = 326265552 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/config/id"];
  if (this->has_id()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.Config)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config::MergeFrom(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::ywrapper::StringValue::MergeFrom(from.id());
  }
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config::CopyFrom(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config::Swap(Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config::InternalSwap(Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config* other) {
  using std::swap;
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State_default_instance_._instance.get_mutable()->id_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State_default_instance_._instance.get_mutable()->matched_octets_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State_default_instance_._instance.get_mutable()->matched_packets_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::clear_matched_octets() {
  if (GetArenaNoVirtual() == NULL && matched_octets_ != NULL) {
    delete matched_octets_;
  }
  matched_octets_ = NULL;
}
void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::clear_matched_packets() {
  if (GetArenaNoVirtual() == NULL && matched_packets_ != NULL) {
    delete matched_packets_;
  }
  matched_packets_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::kIdFieldNumber;
const int Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::kMatchedOctetsFieldNumber;
const int Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::kMatchedPacketsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.State)
}
Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_matched_octets()) {
    matched_octets_ = new ::ywrapper::UintValue(*from.matched_octets_);
  } else {
    matched_octets_ = NULL;
  }
  if (from.has_id()) {
    id_ = new ::ywrapper::StringValue(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_matched_packets()) {
    matched_packets_ = new ::ywrapper::UintValue(*from.matched_packets_);
  } else {
    matched_packets_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.State)
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::SharedCtor() {
  ::memset(&matched_octets_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matched_packets_) -
      reinterpret_cast<char*>(&matched_octets_)) + sizeof(matched_packets_));
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::~Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.State)
  SharedDtor();
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::SharedDtor() {
  if (this != internal_default_instance()) delete matched_octets_;
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete matched_packets_;
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State& Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State* Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State* n = new Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && matched_octets_ != NULL) {
    delete matched_octets_;
  }
  matched_octets_ = NULL;
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  if (GetArenaNoVirtual() == NULL && matched_packets_ != NULL) {
    delete matched_packets_;
  }
  matched_packets_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3498079010u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue matched_octets = 188335353 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/state/matched-octets"];
      case 188335353: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 1506682826 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_matched_octets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue id = 281042275 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/state/id"];
      case 281042275: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 2248338202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue matched_packets = 437259876 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/state/matched-packets"];
      case 437259876: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 3498079010 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_matched_packets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.State)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue matched_octets = 188335353 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/state/matched-octets"];
  if (this->has_matched_octets()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      188335353, *this->matched_octets_, output);
  }

  // .ywrapper.StringValue id = 281042275 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/state/id"];
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      281042275, *this->id_, output);
  }

  // .ywrapper.UintValue matched_packets = 437259876 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/state/matched-packets"];
  if (this->has_matched_packets()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      437259876, *this->matched_packets_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.State)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue matched_octets = 188335353 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/state/matched-octets"];
  if (this->has_matched_octets()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        188335353, *this->matched_octets_, deterministic, target);
  }

  // .ywrapper.StringValue id = 281042275 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/state/id"];
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        281042275, *this->id_, deterministic, target);
  }

  // .ywrapper.UintValue matched_packets = 437259876 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/state/matched-packets"];
  if (this->has_matched_packets()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        437259876, *this->matched_packets_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.State)
  return target;
}

size_t Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue matched_octets = 188335353 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/state/matched-octets"];
  if (this->has_matched_octets()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->matched_octets_);
  }

  // .ywrapper.StringValue id = 281042275 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/state/id"];
  if (this->has_id()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->id_);
  }

  // .ywrapper.UintValue matched_packets = 437259876 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/state/matched-packets"];
  if (this->has_matched_packets()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->matched_packets_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.State)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::MergeFrom(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_matched_octets()) {
    mutable_matched_octets()->::ywrapper::UintValue::MergeFrom(from.matched_octets());
  }
  if (from.has_id()) {
    mutable_id()->::ywrapper::StringValue::MergeFrom(from.id());
  }
  if (from.has_matched_packets()) {
    mutable_matched_packets()->::ywrapper::UintValue::MergeFrom(from.matched_packets());
  }
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::CopyFrom(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::Swap(Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::InternalSwap(Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State* other) {
  using std::swap;
  swap(matched_octets_, other->matched_octets_);
  swap(id_, other->id_);
  swap(matched_packets_, other->matched_packets_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term::kConfigFieldNumber;
const int Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term)
}
Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term)
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term::SharedCtor() {
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&config_)) + sizeof(state_));
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term::~Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term)
  SharedDtor();
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term& Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term* Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term* n = new Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4237648138u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.Config config = 435774088 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/config"];
      case 435774088: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 3486192706 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.State state = 529706017 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/state"];
      case 529706017: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 4237648138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.Config config = 435774088 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      435774088, *this->config_, output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.State state = 529706017 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      529706017, *this->state_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.Config config = 435774088 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        435774088, *this->config_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.State state = 529706017 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        529706017, *this->state_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term)
  return target;
}

size_t Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.Config config = 435774088 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.State state = 529706017 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term::MergeFrom(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config::MergeFrom(from.config());
  }
  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::MergeFrom(from.state());
  }
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term::CopyFrom(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term::Swap(Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term::InternalSwap(Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term* other) {
  using std::swap;
  swap(config_, other->config_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey_default_instance_._instance.get_mutable()->term_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::kIdFieldNumber;
const int Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::kTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey)
}
Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_term()) {
    term_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term(*from.term_);
  } else {
    term_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey)
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  term_ = NULL;
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::~Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey)
  SharedDtor();
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete term_;
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey& Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey* Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey* n = new Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && term_ != NULL) {
    delete term_;
  }
  term_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/id"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term term = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_term()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/id"];
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term term = 2;
  if (this->has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->term_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/id"];
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term term = 2;
  if (this->has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->term_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey)
  return target;
}

size_t Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 1 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term term = 2;
  if (this->has_term()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->term_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::MergeFrom(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_term()) {
    mutable_term()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term::MergeFrom(from.term());
  }
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::CopyFrom(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::Swap(Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::InternalSwap(Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey* other) {
  using std::swap;
  id_.Swap(&other->id_);
  swap(term_, other->term_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms::kTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms)
}
Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      term_(from.term_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms)
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms::SharedCtor() {
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms::~Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms)
  SharedDtor();
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms::SharedDtor() {
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms& Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms* Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms* n = new Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  term_.Clear();
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2050524346u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey term = 256315543 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term"];
      case 256315543: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 2050524346 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_term()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey term = 256315543 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->term_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      256315543, this->term(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey term = 256315543 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->term_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        256315543, this->term(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms)
  return target;
}

size_t Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey term = 256315543 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term"];
  {
    unsigned int count = static_cast<unsigned int>(this->term_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->term(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms::MergeFrom(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  term_.MergeFrom(from.term_);
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms::CopyFrom(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms::Swap(Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms::InternalSwap(Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms* other) {
  using std::swap;
  term_.InternalSwap(&other->term_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Input_Classifers_Classifier::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_Classifier_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Config*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_Classifier_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_State*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_State::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_Classifier_default_instance_._instance.get_mutable()->terms_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Input_Classifers_Classifier::kConfigFieldNumber;
const int Qos_Interfaces_Interface_Input_Classifers_Classifier::kStateFieldNumber;
const int Qos_Interfaces_Interface_Input_Classifers_Classifier::kTermsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Input_Classifers_Classifier::Qos_Interfaces_Interface_Input_Classifers_Classifier()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier)
}
Qos_Interfaces_Interface_Input_Classifers_Classifier::Qos_Interfaces_Interface_Input_Classifers_Classifier(const Qos_Interfaces_Interface_Input_Classifers_Classifier& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_terms()) {
    terms_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms(*from.terms_);
  } else {
    terms_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier)
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier::SharedCtor() {
  ::memset(&terms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&terms_)) + sizeof(config_));
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Input_Classifers_Classifier::~Qos_Interfaces_Interface_Input_Classifers_Classifier() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier)
  SharedDtor();
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier::SharedDtor() {
  if (this != internal_default_instance()) delete terms_;
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete config_;
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Input_Classifers_Classifier::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Input_Classifers_Classifier& Qos_Interfaces_Interface_Input_Classifers_Classifier::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Input_Classifers_Classifier* Qos_Interfaces_Interface_Input_Classifers_Classifier::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Input_Classifers_Classifier* n = new Qos_Interfaces_Interface_Input_Classifers_Classifier;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && terms_ != NULL) {
    delete terms_;
  }
  terms_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Input_Classifers_Classifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2874215610u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms terms = 21096446 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms"];
      case 21096446: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 168771570 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_terms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.State state = 262213192 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/state"];
      case 262213192: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 2097705538 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Config config = 359276951 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/config"];
      case 359276951: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 2874215610 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms terms = 21096446 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms"];
  if (this->has_terms()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21096446, *this->terms_, output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.State state = 262213192 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      262213192, *this->state_, output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Config config = 359276951 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      359276951, *this->config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Input_Classifers_Classifier::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms terms = 21096446 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms"];
  if (this->has_terms()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21096446, *this->terms_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.State state = 262213192 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        262213192, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Config config = 359276951 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        359276951, *this->config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier)
  return target;
}

size_t Qos_Interfaces_Interface_Input_Classifers_Classifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms terms = 21096446 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms"];
  if (this->has_terms()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->terms_);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.State state = 262213192 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Config config = 359276951 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Input_Classifers_Classifier* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Input_Classifers_Classifier>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier::MergeFrom(const Qos_Interfaces_Interface_Input_Classifers_Classifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_terms()) {
    mutable_terms()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms::MergeFrom(from.terms());
  }
  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_State::MergeFrom(from.state());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::MergeFrom(from.config());
  }
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier::CopyFrom(const Qos_Interfaces_Interface_Input_Classifers_Classifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Input_Classifers_Classifier::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Input_Classifers_Classifier::Swap(Qos_Interfaces_Interface_Input_Classifers_Classifier* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Input_Classifers_Classifier::InternalSwap(Qos_Interfaces_Interface_Input_Classifers_Classifier* other) {
  using std::swap;
  swap(terms_, other->terms_);
  swap(state_, other->state_);
  swap(config_, other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Input_Classifers_Classifier::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_default_instance_._instance.get_mutable()->classifier_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::kTypeFieldNumber;
const int Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::kClassifierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::Qos_Interfaces_Interface_Input_Classifers_ClassifierKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Classifers_ClassifierKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.ClassifierKey)
}
Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::Qos_Interfaces_Interface_Input_Classifers_ClassifierKey(const Qos_Interfaces_Interface_Input_Classifers_ClassifierKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_classifier()) {
    classifier_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier(*from.classifier_);
  } else {
    classifier_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.ClassifierKey)
}

void Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::SharedCtor() {
  ::memset(&classifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&classifier_)) + sizeof(type_));
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::~Qos_Interfaces_Interface_Input_Classifers_ClassifierKey() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.ClassifierKey)
  SharedDtor();
}

void Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::SharedDtor() {
  if (this != internal_default_instance()) delete classifier_;
}

void Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Input_Classifers_ClassifierKey& Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Classifers_ClassifierKey();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Input_Classifers_ClassifierKey* Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Input_Classifers_ClassifierKey* n = new Qos_Interfaces_Interface_Input_Classifers_ClassifierKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.ClassifierKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && classifier_ != NULL) {
    delete classifier_;
  }
  classifier_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.ClassifierKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.ClassifierKey.Type type = 1 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/type"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier classifier = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_classifier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.ClassifierKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.ClassifierKey)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.ClassifierKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.ClassifierKey.Type type = 1 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/type"];
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier classifier = 2;
  if (this->has_classifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->classifier_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.ClassifierKey)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.ClassifierKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.ClassifierKey.Type type = 1 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/type"];
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier classifier = 2;
  if (this->has_classifier()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->classifier_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.ClassifierKey)
  return target;
}

size_t Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.ClassifierKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier classifier = 2;
  if (this->has_classifier()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->classifier_);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.ClassifierKey.Type type = 1 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/type"];
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.ClassifierKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Input_Classifers_ClassifierKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Input_Classifers_ClassifierKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.ClassifierKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.ClassifierKey)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::MergeFrom(const Qos_Interfaces_Interface_Input_Classifers_ClassifierKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.ClassifierKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_classifier()) {
    mutable_classifier()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier::MergeFrom(from.classifier());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.ClassifierKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::CopyFrom(const Qos_Interfaces_Interface_Input_Classifers_ClassifierKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.ClassifierKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::Swap(Qos_Interfaces_Interface_Input_Classifers_ClassifierKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::InternalSwap(Qos_Interfaces_Interface_Input_Classifers_ClassifierKey* other) {
  using std::swap;
  swap(classifier_, other->classifier_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Input_Classifers::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Input_Classifers::kClassifierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Input_Classifers::Qos_Interfaces_Interface_Input_Classifers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Classifers();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers)
}
Qos_Interfaces_Interface_Input_Classifers::Qos_Interfaces_Interface_Input_Classifers(const Qos_Interfaces_Interface_Input_Classifers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      classifier_(from.classifier_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers)
}

void Qos_Interfaces_Interface_Input_Classifers::SharedCtor() {
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Input_Classifers::~Qos_Interfaces_Interface_Input_Classifers() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers)
  SharedDtor();
}

void Qos_Interfaces_Interface_Input_Classifers::SharedDtor() {
}

void Qos_Interfaces_Interface_Input_Classifers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Input_Classifers::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Input_Classifers& Qos_Interfaces_Interface_Input_Classifers::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Classifers();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Input_Classifers* Qos_Interfaces_Interface_Input_Classifers::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Input_Classifers* n = new Qos_Interfaces_Interface_Input_Classifers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Input_Classifers::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  classifier_.Clear();
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Input_Classifers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(1125037490u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.ClassifierKey classifier = 140629686 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier"];
      case 140629686: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 1125037490 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_classifier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Input_Classifers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.ClassifierKey classifier = 140629686 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->classifier_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      140629686, this->classifier(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Input_Classifers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.ClassifierKey classifier = 140629686 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->classifier_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        140629686, this->classifier(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers)
  return target;
}

size_t Qos_Interfaces_Interface_Input_Classifers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.ClassifierKey classifier = 140629686 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier"];
  {
    unsigned int count = static_cast<unsigned int>(this->classifier_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->classifier(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Input_Classifers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Input_Classifers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Input_Classifers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Input_Classifers::MergeFrom(const Qos_Interfaces_Interface_Input_Classifers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  classifier_.MergeFrom(from.classifier_);
}

void Qos_Interfaces_Interface_Input_Classifers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Input_Classifers::CopyFrom(const Qos_Interfaces_Interface_Input_Classifers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Input_Classifers::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Input_Classifers::Swap(Qos_Interfaces_Interface_Input_Classifers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Input_Classifers::InternalSwap(Qos_Interfaces_Interface_Input_Classifers* other) {
  using std::swap;
  classifier_.InternalSwap(&other->classifier_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Input_Classifers::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Input_Config::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Input_Config::Qos_Interfaces_Interface_Input_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Config)
}
Qos_Interfaces_Interface_Input_Config::Qos_Interfaces_Interface_Input_Config(const Qos_Interfaces_Interface_Input_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Config)
}

void Qos_Interfaces_Interface_Input_Config::SharedCtor() {
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Input_Config::~Qos_Interfaces_Interface_Input_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Config)
  SharedDtor();
}

void Qos_Interfaces_Interface_Input_Config::SharedDtor() {
}

void Qos_Interfaces_Interface_Input_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Input_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Input_Config& Qos_Interfaces_Interface_Input_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Config();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Input_Config* Qos_Interfaces_Interface_Input_Config::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Input_Config* n = new Qos_Interfaces_Interface_Input_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Input_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Input_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Config)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Input_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Config)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Input_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Config)
  return target;
}

size_t Qos_Interfaces_Interface_Input_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Input_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Input_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Input_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Config)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Input_Config::MergeFrom(const Qos_Interfaces_Interface_Input_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Qos_Interfaces_Interface_Input_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Input_Config::CopyFrom(const Qos_Interfaces_Interface_Input_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Input_Config::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Input_Config::Swap(Qos_Interfaces_Interface_Input_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Input_Config::InternalSwap(Qos_Interfaces_Interface_Input_Config* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Input_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Input_Queues_Queue_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Queues_Queue_Config_default_instance_._instance.get_mutable()->name_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void Qos_Interfaces_Interface_Input_Queues_Queue_Config::clear_name() {
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Input_Queues_Queue_Config::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Input_Queues_Queue_Config::Qos_Interfaces_Interface_Input_Queues_Queue_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Queues_Queue_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.Config)
}
Qos_Interfaces_Interface_Input_Queues_Queue_Config::Qos_Interfaces_Interface_Input_Queues_Queue_Config(const Qos_Interfaces_Interface_Input_Queues_Queue_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_name()) {
    name_ = new ::ywrapper::StringValue(*from.name_);
  } else {
    name_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.Config)
}

void Qos_Interfaces_Interface_Input_Queues_Queue_Config::SharedCtor() {
  name_ = NULL;
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Input_Queues_Queue_Config::~Qos_Interfaces_Interface_Input_Queues_Queue_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.Config)
  SharedDtor();
}

void Qos_Interfaces_Interface_Input_Queues_Queue_Config::SharedDtor() {
  if (this != internal_default_instance()) delete name_;
}

void Qos_Interfaces_Interface_Input_Queues_Queue_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Input_Queues_Queue_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Input_Queues_Queue_Config& Qos_Interfaces_Interface_Input_Queues_Queue_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Queues_Queue_Config();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Input_Queues_Queue_Config* Qos_Interfaces_Interface_Input_Queues_Queue_Config::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Input_Queues_Queue_Config* n = new Qos_Interfaces_Interface_Input_Queues_Queue_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Input_Queues_Queue_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Input_Queues_Queue_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3531168066u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue name = 441396008 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/config/name"];
      case 441396008: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 3531168066 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.Config)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Input_Queues_Queue_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue name = 441396008 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/config/name"];
  if (this->has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      441396008, *this->name_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.Config)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Input_Queues_Queue_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue name = 441396008 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/config/name"];
  if (this->has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        441396008, *this->name_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.Config)
  return target;
}

size_t Qos_Interfaces_Interface_Input_Queues_Queue_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue name = 441396008 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/config/name"];
  if (this->has_name()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->name_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Input_Queues_Queue_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Input_Queues_Queue_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Input_Queues_Queue_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.Config)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Input_Queues_Queue_Config::MergeFrom(const Qos_Interfaces_Interface_Input_Queues_Queue_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_name()) {
    mutable_name()->::ywrapper::StringValue::MergeFrom(from.name());
  }
}

void Qos_Interfaces_Interface_Input_Queues_Queue_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Input_Queues_Queue_Config::CopyFrom(const Qos_Interfaces_Interface_Input_Queues_Queue_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Input_Queues_Queue_Config::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Input_Queues_Queue_Config::Swap(Qos_Interfaces_Interface_Input_Queues_Queue_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Input_Queues_Queue_Config::InternalSwap(Qos_Interfaces_Interface_Input_Queues_Queue_Config* other) {
  using std::swap;
  swap(name_, other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Input_Queues_Queue_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Input_Queues_Queue_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Queues_Queue_State_default_instance_._instance.get_mutable()->avg_queue_len_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Queues_Queue_State_default_instance_._instance.get_mutable()->dropped_pkts_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Queues_Queue_State_default_instance_._instance.get_mutable()->max_queue_len_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Queues_Queue_State_default_instance_._instance.get_mutable()->name_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Queues_Queue_State_default_instance_._instance.get_mutable()->transmit_octets_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Queues_Queue_State_default_instance_._instance.get_mutable()->transmit_pkts_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Qos_Interfaces_Interface_Input_Queues_Queue_State::clear_avg_queue_len() {
  if (GetArenaNoVirtual() == NULL && avg_queue_len_ != NULL) {
    delete avg_queue_len_;
  }
  avg_queue_len_ = NULL;
}
void Qos_Interfaces_Interface_Input_Queues_Queue_State::clear_dropped_pkts() {
  if (GetArenaNoVirtual() == NULL && dropped_pkts_ != NULL) {
    delete dropped_pkts_;
  }
  dropped_pkts_ = NULL;
}
void Qos_Interfaces_Interface_Input_Queues_Queue_State::clear_max_queue_len() {
  if (GetArenaNoVirtual() == NULL && max_queue_len_ != NULL) {
    delete max_queue_len_;
  }
  max_queue_len_ = NULL;
}
void Qos_Interfaces_Interface_Input_Queues_Queue_State::clear_name() {
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
}
void Qos_Interfaces_Interface_Input_Queues_Queue_State::clear_transmit_octets() {
  if (GetArenaNoVirtual() == NULL && transmit_octets_ != NULL) {
    delete transmit_octets_;
  }
  transmit_octets_ = NULL;
}
void Qos_Interfaces_Interface_Input_Queues_Queue_State::clear_transmit_pkts() {
  if (GetArenaNoVirtual() == NULL && transmit_pkts_ != NULL) {
    delete transmit_pkts_;
  }
  transmit_pkts_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Input_Queues_Queue_State::kAvgQueueLenFieldNumber;
const int Qos_Interfaces_Interface_Input_Queues_Queue_State::kDroppedPktsFieldNumber;
const int Qos_Interfaces_Interface_Input_Queues_Queue_State::kMaxQueueLenFieldNumber;
const int Qos_Interfaces_Interface_Input_Queues_Queue_State::kNameFieldNumber;
const int Qos_Interfaces_Interface_Input_Queues_Queue_State::kTransmitOctetsFieldNumber;
const int Qos_Interfaces_Interface_Input_Queues_Queue_State::kTransmitPktsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Input_Queues_Queue_State::Qos_Interfaces_Interface_Input_Queues_Queue_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Queues_Queue_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State)
}
Qos_Interfaces_Interface_Input_Queues_Queue_State::Qos_Interfaces_Interface_Input_Queues_Queue_State(const Qos_Interfaces_Interface_Input_Queues_Queue_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_name()) {
    name_ = new ::ywrapper::StringValue(*from.name_);
  } else {
    name_ = NULL;
  }
  if (from.has_transmit_octets()) {
    transmit_octets_ = new ::ywrapper::UintValue(*from.transmit_octets_);
  } else {
    transmit_octets_ = NULL;
  }
  if (from.has_avg_queue_len()) {
    avg_queue_len_ = new ::ywrapper::UintValue(*from.avg_queue_len_);
  } else {
    avg_queue_len_ = NULL;
  }
  if (from.has_transmit_pkts()) {
    transmit_pkts_ = new ::ywrapper::UintValue(*from.transmit_pkts_);
  } else {
    transmit_pkts_ = NULL;
  }
  if (from.has_dropped_pkts()) {
    dropped_pkts_ = new ::ywrapper::UintValue(*from.dropped_pkts_);
  } else {
    dropped_pkts_ = NULL;
  }
  if (from.has_max_queue_len()) {
    max_queue_len_ = new ::ywrapper::UintValue(*from.max_queue_len_);
  } else {
    max_queue_len_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State)
}

void Qos_Interfaces_Interface_Input_Queues_Queue_State::SharedCtor() {
  ::memset(&name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_queue_len_) -
      reinterpret_cast<char*>(&name_)) + sizeof(max_queue_len_));
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Input_Queues_Queue_State::~Qos_Interfaces_Interface_Input_Queues_Queue_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State)
  SharedDtor();
}

void Qos_Interfaces_Interface_Input_Queues_Queue_State::SharedDtor() {
  if (this != internal_default_instance()) delete name_;
  if (this != internal_default_instance()) delete transmit_octets_;
  if (this != internal_default_instance()) delete avg_queue_len_;
  if (this != internal_default_instance()) delete transmit_pkts_;
  if (this != internal_default_instance()) delete dropped_pkts_;
  if (this != internal_default_instance()) delete max_queue_len_;
}

void Qos_Interfaces_Interface_Input_Queues_Queue_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Input_Queues_Queue_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Input_Queues_Queue_State& Qos_Interfaces_Interface_Input_Queues_Queue_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Queues_Queue_State();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Input_Queues_Queue_State* Qos_Interfaces_Interface_Input_Queues_Queue_State::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Input_Queues_Queue_State* n = new Qos_Interfaces_Interface_Input_Queues_Queue_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Input_Queues_Queue_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
  if (GetArenaNoVirtual() == NULL && transmit_octets_ != NULL) {
    delete transmit_octets_;
  }
  transmit_octets_ = NULL;
  if (GetArenaNoVirtual() == NULL && avg_queue_len_ != NULL) {
    delete avg_queue_len_;
  }
  avg_queue_len_ = NULL;
  if (GetArenaNoVirtual() == NULL && transmit_pkts_ != NULL) {
    delete transmit_pkts_;
  }
  transmit_pkts_ = NULL;
  if (GetArenaNoVirtual() == NULL && dropped_pkts_ != NULL) {
    delete dropped_pkts_;
  }
  dropped_pkts_ = NULL;
  if (GetArenaNoVirtual() == NULL && max_queue_len_ != NULL) {
    delete max_queue_len_;
  }
  max_queue_len_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Input_Queues_Queue_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4284675970u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue name = 147116895 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state/name"];
      case 147116895: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 1176935162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue transmit_octets = 237910979 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state/transmit-octets"];
      case 237910979: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 1903287834 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transmit_octets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue avg_queue_len = 357067202 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state/avg-queue-len"];
      case 357067202: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 2856537618 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_avg_queue_len()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue transmit_pkts = 368710075 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state/transmit-pkts"];
      case 368710075: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 2949680602 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transmit_pkts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue dropped_pkts = 530366041 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state/dropped-pkts"];
      case 530366041: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 4242928330 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dropped_pkts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue max_queue_len = 535584496 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state/max-queue-len"];
      case 535584496: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 4284675970 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_max_queue_len()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Input_Queues_Queue_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue name = 147116895 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state/name"];
  if (this->has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      147116895, *this->name_, output);
  }

  // .ywrapper.UintValue transmit_octets = 237910979 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state/transmit-octets"];
  if (this->has_transmit_octets()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      237910979, *this->transmit_octets_, output);
  }

  // .ywrapper.UintValue avg_queue_len = 357067202 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state/avg-queue-len"];
  if (this->has_avg_queue_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      357067202, *this->avg_queue_len_, output);
  }

  // .ywrapper.UintValue transmit_pkts = 368710075 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state/transmit-pkts"];
  if (this->has_transmit_pkts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      368710075, *this->transmit_pkts_, output);
  }

  // .ywrapper.UintValue dropped_pkts = 530366041 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state/dropped-pkts"];
  if (this->has_dropped_pkts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      530366041, *this->dropped_pkts_, output);
  }

  // .ywrapper.UintValue max_queue_len = 535584496 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state/max-queue-len"];
  if (this->has_max_queue_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      535584496, *this->max_queue_len_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Input_Queues_Queue_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue name = 147116895 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state/name"];
  if (this->has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        147116895, *this->name_, deterministic, target);
  }

  // .ywrapper.UintValue transmit_octets = 237910979 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state/transmit-octets"];
  if (this->has_transmit_octets()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        237910979, *this->transmit_octets_, deterministic, target);
  }

  // .ywrapper.UintValue avg_queue_len = 357067202 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state/avg-queue-len"];
  if (this->has_avg_queue_len()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        357067202, *this->avg_queue_len_, deterministic, target);
  }

  // .ywrapper.UintValue transmit_pkts = 368710075 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state/transmit-pkts"];
  if (this->has_transmit_pkts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        368710075, *this->transmit_pkts_, deterministic, target);
  }

  // .ywrapper.UintValue dropped_pkts = 530366041 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state/dropped-pkts"];
  if (this->has_dropped_pkts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        530366041, *this->dropped_pkts_, deterministic, target);
  }

  // .ywrapper.UintValue max_queue_len = 535584496 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state/max-queue-len"];
  if (this->has_max_queue_len()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        535584496, *this->max_queue_len_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State)
  return target;
}

size_t Qos_Interfaces_Interface_Input_Queues_Queue_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue name = 147116895 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state/name"];
  if (this->has_name()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->name_);
  }

  // .ywrapper.UintValue transmit_octets = 237910979 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state/transmit-octets"];
  if (this->has_transmit_octets()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->transmit_octets_);
  }

  // .ywrapper.UintValue avg_queue_len = 357067202 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state/avg-queue-len"];
  if (this->has_avg_queue_len()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->avg_queue_len_);
  }

  // .ywrapper.UintValue transmit_pkts = 368710075 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state/transmit-pkts"];
  if (this->has_transmit_pkts()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->transmit_pkts_);
  }

  // .ywrapper.UintValue dropped_pkts = 530366041 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state/dropped-pkts"];
  if (this->has_dropped_pkts()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dropped_pkts_);
  }

  // .ywrapper.UintValue max_queue_len = 535584496 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state/max-queue-len"];
  if (this->has_max_queue_len()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->max_queue_len_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Input_Queues_Queue_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Input_Queues_Queue_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Input_Queues_Queue_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Input_Queues_Queue_State::MergeFrom(const Qos_Interfaces_Interface_Input_Queues_Queue_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_name()) {
    mutable_name()->::ywrapper::StringValue::MergeFrom(from.name());
  }
  if (from.has_transmit_octets()) {
    mutable_transmit_octets()->::ywrapper::UintValue::MergeFrom(from.transmit_octets());
  }
  if (from.has_avg_queue_len()) {
    mutable_avg_queue_len()->::ywrapper::UintValue::MergeFrom(from.avg_queue_len());
  }
  if (from.has_transmit_pkts()) {
    mutable_transmit_pkts()->::ywrapper::UintValue::MergeFrom(from.transmit_pkts());
  }
  if (from.has_dropped_pkts()) {
    mutable_dropped_pkts()->::ywrapper::UintValue::MergeFrom(from.dropped_pkts());
  }
  if (from.has_max_queue_len()) {
    mutable_max_queue_len()->::ywrapper::UintValue::MergeFrom(from.max_queue_len());
  }
}

void Qos_Interfaces_Interface_Input_Queues_Queue_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Input_Queues_Queue_State::CopyFrom(const Qos_Interfaces_Interface_Input_Queues_Queue_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Input_Queues_Queue_State::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Input_Queues_Queue_State::Swap(Qos_Interfaces_Interface_Input_Queues_Queue_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Input_Queues_Queue_State::InternalSwap(Qos_Interfaces_Interface_Input_Queues_Queue_State* other) {
  using std::swap;
  swap(name_, other->name_);
  swap(transmit_octets_, other->transmit_octets_);
  swap(avg_queue_len_, other->avg_queue_len_);
  swap(transmit_pkts_, other->transmit_pkts_);
  swap(dropped_pkts_, other->dropped_pkts_);
  swap(max_queue_len_, other->max_queue_len_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Input_Queues_Queue_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Input_Queues_Queue::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Queues_Queue_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_Config*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_Config::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Queues_Queue_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_State*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Input_Queues_Queue::kConfigFieldNumber;
const int Qos_Interfaces_Interface_Input_Queues_Queue::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Input_Queues_Queue::Qos_Interfaces_Interface_Input_Queues_Queue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Queues_Queue();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue)
}
Qos_Interfaces_Interface_Input_Queues_Queue::Qos_Interfaces_Interface_Input_Queues_Queue(const Qos_Interfaces_Interface_Input_Queues_Queue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue)
}

void Qos_Interfaces_Interface_Input_Queues_Queue::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&state_)) + sizeof(config_));
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Input_Queues_Queue::~Qos_Interfaces_Interface_Input_Queues_Queue() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue)
  SharedDtor();
}

void Qos_Interfaces_Interface_Input_Queues_Queue::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete config_;
}

void Qos_Interfaces_Interface_Input_Queues_Queue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Input_Queues_Queue::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Input_Queues_Queue& Qos_Interfaces_Interface_Input_Queues_Queue::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Queues_Queue();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Input_Queues_Queue* Qos_Interfaces_Interface_Input_Queues_Queue::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Input_Queues_Queue* n = new Qos_Interfaces_Interface_Input_Queues_Queue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Input_Queues_Queue::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Input_Queues_Queue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4028185042u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State state = 189832279 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state"];
      case 189832279: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 1518658234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.Config config = 503523130 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/config"];
      case 503523130: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 4028185042 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Input_Queues_Queue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State state = 189832279 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      189832279, *this->state_, output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.Config config = 503523130 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      503523130, *this->config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Input_Queues_Queue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State state = 189832279 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        189832279, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.Config config = 503523130 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        503523130, *this->config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue)
  return target;
}

size_t Qos_Interfaces_Interface_Input_Queues_Queue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State state = 189832279 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.Config config = 503523130 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Input_Queues_Queue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Input_Queues_Queue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Input_Queues_Queue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Input_Queues_Queue::MergeFrom(const Qos_Interfaces_Interface_Input_Queues_Queue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_State::MergeFrom(from.state());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_Config::MergeFrom(from.config());
  }
}

void Qos_Interfaces_Interface_Input_Queues_Queue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Input_Queues_Queue::CopyFrom(const Qos_Interfaces_Interface_Input_Queues_Queue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Input_Queues_Queue::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Input_Queues_Queue::Swap(Qos_Interfaces_Interface_Input_Queues_Queue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Input_Queues_Queue::InternalSwap(Qos_Interfaces_Interface_Input_Queues_Queue* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(config_, other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Input_Queues_Queue::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Input_Queues_QueueKey::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Queues_QueueKey_default_instance_._instance.get_mutable()->queue_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Input_Queues_QueueKey::kNameFieldNumber;
const int Qos_Interfaces_Interface_Input_Queues_QueueKey::kQueueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Input_Queues_QueueKey::Qos_Interfaces_Interface_Input_Queues_QueueKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Queues_QueueKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey)
}
Qos_Interfaces_Interface_Input_Queues_QueueKey::Qos_Interfaces_Interface_Input_Queues_QueueKey(const Qos_Interfaces_Interface_Input_Queues_QueueKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_queue()) {
    queue_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue(*from.queue_);
  } else {
    queue_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey)
}

void Qos_Interfaces_Interface_Input_Queues_QueueKey::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queue_ = NULL;
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Input_Queues_QueueKey::~Qos_Interfaces_Interface_Input_Queues_QueueKey() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey)
  SharedDtor();
}

void Qos_Interfaces_Interface_Input_Queues_QueueKey::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete queue_;
}

void Qos_Interfaces_Interface_Input_Queues_QueueKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Input_Queues_QueueKey::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Input_Queues_QueueKey& Qos_Interfaces_Interface_Input_Queues_QueueKey::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Queues_QueueKey();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Input_Queues_QueueKey* Qos_Interfaces_Interface_Input_Queues_QueueKey::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Input_Queues_QueueKey* n = new Qos_Interfaces_Interface_Input_Queues_QueueKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Input_Queues_QueueKey::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && queue_ != NULL) {
    delete queue_;
  }
  queue_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Input_Queues_QueueKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/name"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue queue = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_queue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Input_Queues_QueueKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/name"];
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue queue = 2;
  if (this->has_queue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->queue_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Input_Queues_QueueKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/name"];
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue queue = 2;
  if (this->has_queue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->queue_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey)
  return target;
}

size_t Qos_Interfaces_Interface_Input_Queues_QueueKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/name"];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue queue = 2;
  if (this->has_queue()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->queue_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Input_Queues_QueueKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Input_Queues_QueueKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Input_Queues_QueueKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Input_Queues_QueueKey::MergeFrom(const Qos_Interfaces_Interface_Input_Queues_QueueKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_queue()) {
    mutable_queue()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue::MergeFrom(from.queue());
  }
}

void Qos_Interfaces_Interface_Input_Queues_QueueKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Input_Queues_QueueKey::CopyFrom(const Qos_Interfaces_Interface_Input_Queues_QueueKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Input_Queues_QueueKey::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Input_Queues_QueueKey::Swap(Qos_Interfaces_Interface_Input_Queues_QueueKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Input_Queues_QueueKey::InternalSwap(Qos_Interfaces_Interface_Input_Queues_QueueKey* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(queue_, other->queue_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Input_Queues_QueueKey::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Input_Queues::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Input_Queues::kQueueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Input_Queues::Qos_Interfaces_Interface_Input_Queues()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Queues();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues)
}
Qos_Interfaces_Interface_Input_Queues::Qos_Interfaces_Interface_Input_Queues(const Qos_Interfaces_Interface_Input_Queues& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      queue_(from.queue_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues)
}

void Qos_Interfaces_Interface_Input_Queues::SharedCtor() {
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Input_Queues::~Qos_Interfaces_Interface_Input_Queues() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues)
  SharedDtor();
}

void Qos_Interfaces_Interface_Input_Queues::SharedDtor() {
}

void Qos_Interfaces_Interface_Input_Queues::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Input_Queues::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Input_Queues& Qos_Interfaces_Interface_Input_Queues::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Queues();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Input_Queues* Qos_Interfaces_Interface_Input_Queues::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Input_Queues* n = new Qos_Interfaces_Interface_Input_Queues;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Input_Queues::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queue_.Clear();
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Input_Queues::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(825772202u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey queue = 103221525 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue"];
      case 103221525: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 825772202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_queue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Input_Queues::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey queue = 103221525 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->queue_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103221525, this->queue(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Input_Queues::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey queue = 103221525 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->queue_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        103221525, this->queue(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues)
  return target;
}

size_t Qos_Interfaces_Interface_Input_Queues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey queue = 103221525 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue"];
  {
    unsigned int count = static_cast<unsigned int>(this->queue_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->queue(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Input_Queues::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Input_Queues* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Input_Queues>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Input_Queues::MergeFrom(const Qos_Interfaces_Interface_Input_Queues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  queue_.MergeFrom(from.queue_);
}

void Qos_Interfaces_Interface_Input_Queues::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Input_Queues::CopyFrom(const Qos_Interfaces_Interface_Input_Queues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Input_Queues::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Input_Queues::Swap(Qos_Interfaces_Interface_Input_Queues* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Input_Queues::InternalSwap(Qos_Interfaces_Interface_Input_Queues* other) {
  using std::swap;
  queue_.InternalSwap(&other->queue_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Input_Queues::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_SchedulerPolicy_Config_default_instance_._instance.get_mutable()->name_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void Qos_Interfaces_Interface_Input_SchedulerPolicy_Config::clear_name() {
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Input_SchedulerPolicy_Config::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Input_SchedulerPolicy_Config::Qos_Interfaces_Interface_Input_SchedulerPolicy_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Config)
}
Qos_Interfaces_Interface_Input_SchedulerPolicy_Config::Qos_Interfaces_Interface_Input_SchedulerPolicy_Config(const Qos_Interfaces_Interface_Input_SchedulerPolicy_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_name()) {
    name_ = new ::ywrapper::StringValue(*from.name_);
  } else {
    name_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Config)
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Config::SharedCtor() {
  name_ = NULL;
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Input_SchedulerPolicy_Config::~Qos_Interfaces_Interface_Input_SchedulerPolicy_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Config)
  SharedDtor();
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Config::SharedDtor() {
  if (this != internal_default_instance()) delete name_;
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Input_SchedulerPolicy_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Input_SchedulerPolicy_Config& Qos_Interfaces_Interface_Input_SchedulerPolicy_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Config();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Input_SchedulerPolicy_Config* Qos_Interfaces_Interface_Input_SchedulerPolicy_Config::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Input_SchedulerPolicy_Config* n = new Qos_Interfaces_Interface_Input_SchedulerPolicy_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Input_SchedulerPolicy_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(44221394u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue name = 5527674 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/config/name"];
      case 5527674: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 44221394 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Config)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue name = 5527674 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/config/name"];
  if (this->has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5527674, *this->name_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Config)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Input_SchedulerPolicy_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue name = 5527674 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/config/name"];
  if (this->has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5527674, *this->name_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Config)
  return target;
}

size_t Qos_Interfaces_Interface_Input_SchedulerPolicy_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue name = 5527674 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/config/name"];
  if (this->has_name()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->name_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Input_SchedulerPolicy_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Input_SchedulerPolicy_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Config)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Config::MergeFrom(const Qos_Interfaces_Interface_Input_SchedulerPolicy_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_name()) {
    mutable_name()->::ywrapper::StringValue::MergeFrom(from.name());
  }
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Config::CopyFrom(const Qos_Interfaces_Interface_Input_SchedulerPolicy_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Input_SchedulerPolicy_Config::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Config::Swap(Qos_Interfaces_Interface_Input_SchedulerPolicy_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Input_SchedulerPolicy_Config::InternalSwap(Qos_Interfaces_Interface_Input_SchedulerPolicy_Config* other) {
  using std::swap;
  swap(name_, other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Input_SchedulerPolicy_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State_default_instance_._instance.get_mutable()->conforming_octets_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State_default_instance_._instance.get_mutable()->conforming_pkts_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State_default_instance_._instance.get_mutable()->exceeding_octets_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State_default_instance_._instance.get_mutable()->exceeding_pkts_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State_default_instance_._instance.get_mutable()->sequence_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State_default_instance_._instance.get_mutable()->violating_octets_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State_default_instance_._instance.get_mutable()->violating_pkts_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::clear_conforming_octets() {
  if (GetArenaNoVirtual() == NULL && conforming_octets_ != NULL) {
    delete conforming_octets_;
  }
  conforming_octets_ = NULL;
}
void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::clear_conforming_pkts() {
  if (GetArenaNoVirtual() == NULL && conforming_pkts_ != NULL) {
    delete conforming_pkts_;
  }
  conforming_pkts_ = NULL;
}
void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::clear_exceeding_octets() {
  if (GetArenaNoVirtual() == NULL && exceeding_octets_ != NULL) {
    delete exceeding_octets_;
  }
  exceeding_octets_ = NULL;
}
void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::clear_exceeding_pkts() {
  if (GetArenaNoVirtual() == NULL && exceeding_pkts_ != NULL) {
    delete exceeding_pkts_;
  }
  exceeding_pkts_ = NULL;
}
void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::clear_sequence() {
  if (GetArenaNoVirtual() == NULL && sequence_ != NULL) {
    delete sequence_;
  }
  sequence_ = NULL;
}
void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::clear_violating_octets() {
  if (GetArenaNoVirtual() == NULL && violating_octets_ != NULL) {
    delete violating_octets_;
  }
  violating_octets_ = NULL;
}
void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::clear_violating_pkts() {
  if (GetArenaNoVirtual() == NULL && violating_pkts_ != NULL) {
    delete violating_pkts_;
  }
  violating_pkts_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::kConformingOctetsFieldNumber;
const int Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::kConformingPktsFieldNumber;
const int Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::kExceedingOctetsFieldNumber;
const int Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::kExceedingPktsFieldNumber;
const int Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::kSequenceFieldNumber;
const int Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::kViolatingOctetsFieldNumber;
const int Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::kViolatingPktsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State)
}
Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State(const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_exceeding_octets()) {
    exceeding_octets_ = new ::ywrapper::UintValue(*from.exceeding_octets_);
  } else {
    exceeding_octets_ = NULL;
  }
  if (from.has_exceeding_pkts()) {
    exceeding_pkts_ = new ::ywrapper::UintValue(*from.exceeding_pkts_);
  } else {
    exceeding_pkts_ = NULL;
  }
  if (from.has_violating_pkts()) {
    violating_pkts_ = new ::ywrapper::UintValue(*from.violating_pkts_);
  } else {
    violating_pkts_ = NULL;
  }
  if (from.has_conforming_octets()) {
    conforming_octets_ = new ::ywrapper::UintValue(*from.conforming_octets_);
  } else {
    conforming_octets_ = NULL;
  }
  if (from.has_conforming_pkts()) {
    conforming_pkts_ = new ::ywrapper::UintValue(*from.conforming_pkts_);
  } else {
    conforming_pkts_ = NULL;
  }
  if (from.has_violating_octets()) {
    violating_octets_ = new ::ywrapper::UintValue(*from.violating_octets_);
  } else {
    violating_octets_ = NULL;
  }
  if (from.has_sequence()) {
    sequence_ = new ::ywrapper::UintValue(*from.sequence_);
  } else {
    sequence_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State)
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::SharedCtor() {
  ::memset(&exceeding_octets_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&exceeding_octets_)) + sizeof(sequence_));
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::~Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State)
  SharedDtor();
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::SharedDtor() {
  if (this != internal_default_instance()) delete exceeding_octets_;
  if (this != internal_default_instance()) delete exceeding_pkts_;
  if (this != internal_default_instance()) delete violating_pkts_;
  if (this != internal_default_instance()) delete conforming_octets_;
  if (this != internal_default_instance()) delete conforming_pkts_;
  if (this != internal_default_instance()) delete violating_octets_;
  if (this != internal_default_instance()) delete sequence_;
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State& Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State* Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State* n = new Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && exceeding_octets_ != NULL) {
    delete exceeding_octets_;
  }
  exceeding_octets_ = NULL;
  if (GetArenaNoVirtual() == NULL && exceeding_pkts_ != NULL) {
    delete exceeding_pkts_;
  }
  exceeding_pkts_ = NULL;
  if (GetArenaNoVirtual() == NULL && violating_pkts_ != NULL) {
    delete violating_pkts_;
  }
  violating_pkts_ = NULL;
  if (GetArenaNoVirtual() == NULL && conforming_octets_ != NULL) {
    delete conforming_octets_;
  }
  conforming_octets_ = NULL;
  if (GetArenaNoVirtual() == NULL && conforming_pkts_ != NULL) {
    delete conforming_pkts_;
  }
  conforming_pkts_ = NULL;
  if (GetArenaNoVirtual() == NULL && violating_octets_ != NULL) {
    delete violating_octets_;
  }
  violating_octets_ = NULL;
  if (GetArenaNoVirtual() == NULL && sequence_ != NULL) {
    delete sequence_;
  }
  sequence_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3728665026u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue exceeding_octets = 22590706 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/exceeding-octets"];
      case 22590706: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 180725650 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_exceeding_octets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue exceeding_pkts = 80265874 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/exceeding-pkts"];
      case 80265874: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 642126994 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_exceeding_pkts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue violating_pkts = 174860491 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/violating-pkts"];
      case 174860491: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 1398883930 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_violating_pkts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue conforming_octets = 204398478 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/conforming-octets"];
      case 204398478: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 1635187826 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_conforming_octets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue conforming_pkts = 395467958 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/conforming-pkts"];
      case 395467958: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 3163743666 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_conforming_pkts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue violating_octets = 419767763 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/violating-octets"];
      case 419767763: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 3358142106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_violating_octets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue sequence = 466083128 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/sequence"];
      case 466083128: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 3728665026 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sequence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue exceeding_octets = 22590706 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/exceeding-octets"];
  if (this->has_exceeding_octets()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22590706, *this->exceeding_octets_, output);
  }

  // .ywrapper.UintValue exceeding_pkts = 80265874 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/exceeding-pkts"];
  if (this->has_exceeding_pkts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      80265874, *this->exceeding_pkts_, output);
  }

  // .ywrapper.UintValue violating_pkts = 174860491 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/violating-pkts"];
  if (this->has_violating_pkts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      174860491, *this->violating_pkts_, output);
  }

  // .ywrapper.UintValue conforming_octets = 204398478 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/conforming-octets"];
  if (this->has_conforming_octets()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      204398478, *this->conforming_octets_, output);
  }

  // .ywrapper.UintValue conforming_pkts = 395467958 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/conforming-pkts"];
  if (this->has_conforming_pkts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      395467958, *this->conforming_pkts_, output);
  }

  // .ywrapper.UintValue violating_octets = 419767763 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/violating-octets"];
  if (this->has_violating_octets()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      419767763, *this->violating_octets_, output);
  }

  // .ywrapper.UintValue sequence = 466083128 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/sequence"];
  if (this->has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      466083128, *this->sequence_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue exceeding_octets = 22590706 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/exceeding-octets"];
  if (this->has_exceeding_octets()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22590706, *this->exceeding_octets_, deterministic, target);
  }

  // .ywrapper.UintValue exceeding_pkts = 80265874 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/exceeding-pkts"];
  if (this->has_exceeding_pkts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        80265874, *this->exceeding_pkts_, deterministic, target);
  }

  // .ywrapper.UintValue violating_pkts = 174860491 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/violating-pkts"];
  if (this->has_violating_pkts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        174860491, *this->violating_pkts_, deterministic, target);
  }

  // .ywrapper.UintValue conforming_octets = 204398478 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/conforming-octets"];
  if (this->has_conforming_octets()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        204398478, *this->conforming_octets_, deterministic, target);
  }

  // .ywrapper.UintValue conforming_pkts = 395467958 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/conforming-pkts"];
  if (this->has_conforming_pkts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        395467958, *this->conforming_pkts_, deterministic, target);
  }

  // .ywrapper.UintValue violating_octets = 419767763 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/violating-octets"];
  if (this->has_violating_octets()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        419767763, *this->violating_octets_, deterministic, target);
  }

  // .ywrapper.UintValue sequence = 466083128 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/sequence"];
  if (this->has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        466083128, *this->sequence_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State)
  return target;
}

size_t Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue exceeding_octets = 22590706 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/exceeding-octets"];
  if (this->has_exceeding_octets()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->exceeding_octets_);
  }

  // .ywrapper.UintValue exceeding_pkts = 80265874 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/exceeding-pkts"];
  if (this->has_exceeding_pkts()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->exceeding_pkts_);
  }

  // .ywrapper.UintValue violating_pkts = 174860491 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/violating-pkts"];
  if (this->has_violating_pkts()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->violating_pkts_);
  }

  // .ywrapper.UintValue conforming_octets = 204398478 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/conforming-octets"];
  if (this->has_conforming_octets()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->conforming_octets_);
  }

  // .ywrapper.UintValue conforming_pkts = 395467958 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/conforming-pkts"];
  if (this->has_conforming_pkts()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->conforming_pkts_);
  }

  // .ywrapper.UintValue violating_octets = 419767763 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/violating-octets"];
  if (this->has_violating_octets()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->violating_octets_);
  }

  // .ywrapper.UintValue sequence = 466083128 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/sequence"];
  if (this->has_sequence()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sequence_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::MergeFrom(const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_exceeding_octets()) {
    mutable_exceeding_octets()->::ywrapper::UintValue::MergeFrom(from.exceeding_octets());
  }
  if (from.has_exceeding_pkts()) {
    mutable_exceeding_pkts()->::ywrapper::UintValue::MergeFrom(from.exceeding_pkts());
  }
  if (from.has_violating_pkts()) {
    mutable_violating_pkts()->::ywrapper::UintValue::MergeFrom(from.violating_pkts());
  }
  if (from.has_conforming_octets()) {
    mutable_conforming_octets()->::ywrapper::UintValue::MergeFrom(from.conforming_octets());
  }
  if (from.has_conforming_pkts()) {
    mutable_conforming_pkts()->::ywrapper::UintValue::MergeFrom(from.conforming_pkts());
  }
  if (from.has_violating_octets()) {
    mutable_violating_octets()->::ywrapper::UintValue::MergeFrom(from.violating_octets());
  }
  if (from.has_sequence()) {
    mutable_sequence()->::ywrapper::UintValue::MergeFrom(from.sequence());
  }
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::CopyFrom(const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::Swap(Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::InternalSwap(Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State* other) {
  using std::swap;
  swap(exceeding_octets_, other->exceeding_octets_);
  swap(exceeding_pkts_, other->exceeding_pkts_);
  swap(violating_pkts_, other->violating_pkts_);
  swap(conforming_octets_, other->conforming_octets_);
  swap(conforming_pkts_, other->conforming_pkts_);
  swap(violating_octets_, other->violating_octets_);
  swap(sequence_, other->sequence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler)
}
Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler(const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler)
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler::SharedCtor() {
  state_ = NULL;
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler::~Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler)
  SharedDtor();
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler& Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler* Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler* n = new Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3162021314u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State state = 395252664 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state"];
      case 395252664: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 3162021314 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State state = 395252664 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      395252664, *this->state_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State state = 395252664 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        395252664, *this->state_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler)
  return target;
}

size_t Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State state = 395252664 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler::MergeFrom(const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::MergeFrom(from.state());
  }
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler::CopyFrom(const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler::Swap(Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler::InternalSwap(Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler* other) {
  using std::swap;
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey_default_instance_._instance.get_mutable()->scheduler_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey::kSequenceFieldNumber;
const int Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey::kSchedulerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.SchedulerKey)
}
Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey(const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_scheduler()) {
    scheduler_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler(*from.scheduler_);
  } else {
    scheduler_ = NULL;
  }
  sequence_ = from.sequence_;
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.SchedulerKey)
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey::SharedCtor() {
  ::memset(&scheduler_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&scheduler_)) + sizeof(sequence_));
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey::~Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.SchedulerKey)
  SharedDtor();
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey::SharedDtor() {
  if (this != internal_default_instance()) delete scheduler_;
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey& Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey* Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey* n = new Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.SchedulerKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && scheduler_ != NULL) {
    delete scheduler_;
  }
  scheduler_ = NULL;
  sequence_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.SchedulerKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 sequence = 1 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/sequence"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler scheduler = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scheduler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.SchedulerKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.SchedulerKey)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.SchedulerKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sequence = 1 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/sequence"];
  if (this->sequence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sequence(), output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler scheduler = 2;
  if (this->has_scheduler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->scheduler_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.SchedulerKey)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.SchedulerKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sequence = 1 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/sequence"];
  if (this->sequence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sequence(), target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler scheduler = 2;
  if (this->has_scheduler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->scheduler_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.SchedulerKey)
  return target;
}

size_t Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.SchedulerKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler scheduler = 2;
  if (this->has_scheduler()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->scheduler_);
  }

  // uint64 sequence = 1 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/sequence"];
  if (this->sequence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sequence());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.SchedulerKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.SchedulerKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.SchedulerKey)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey::MergeFrom(const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.SchedulerKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scheduler()) {
    mutable_scheduler()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler::MergeFrom(from.scheduler());
  }
  if (from.sequence() != 0) {
    set_sequence(from.sequence());
  }
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.SchedulerKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey::CopyFrom(const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.SchedulerKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey::Swap(Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey::InternalSwap(Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey* other) {
  using std::swap;
  swap(scheduler_, other->scheduler_);
  swap(sequence_, other->sequence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers::kSchedulerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers)
}
Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers(const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      scheduler_(from.scheduler_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers)
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers::SharedCtor() {
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers::~Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers)
  SharedDtor();
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers::SharedDtor() {
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers& Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers* Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers* n = new Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scheduler_.Clear();
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2453116466u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.SchedulerKey scheduler = 306639558 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler"];
      case 306639558: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 2453116466 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_scheduler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.SchedulerKey scheduler = 306639558 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->scheduler_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      306639558, this->scheduler(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.SchedulerKey scheduler = 306639558 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->scheduler_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        306639558, this->scheduler(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers)
  return target;
}

size_t Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.SchedulerKey scheduler = 306639558 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler"];
  {
    unsigned int count = static_cast<unsigned int>(this->scheduler_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->scheduler(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers::MergeFrom(const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scheduler_.MergeFrom(from.scheduler_);
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers::CopyFrom(const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers::Swap(Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers::InternalSwap(Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers* other) {
  using std::swap;
  scheduler_.InternalSwap(&other->scheduler_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Input_SchedulerPolicy_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_SchedulerPolicy_State_default_instance_._instance.get_mutable()->name_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void Qos_Interfaces_Interface_Input_SchedulerPolicy_State::clear_name() {
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Input_SchedulerPolicy_State::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Input_SchedulerPolicy_State::Qos_Interfaces_Interface_Input_SchedulerPolicy_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.State)
}
Qos_Interfaces_Interface_Input_SchedulerPolicy_State::Qos_Interfaces_Interface_Input_SchedulerPolicy_State(const Qos_Interfaces_Interface_Input_SchedulerPolicy_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_name()) {
    name_ = new ::ywrapper::StringValue(*from.name_);
  } else {
    name_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.State)
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_State::SharedCtor() {
  name_ = NULL;
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Input_SchedulerPolicy_State::~Qos_Interfaces_Interface_Input_SchedulerPolicy_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.State)
  SharedDtor();
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_State::SharedDtor() {
  if (this != internal_default_instance()) delete name_;
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Input_SchedulerPolicy_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Input_SchedulerPolicy_State& Qos_Interfaces_Interface_Input_SchedulerPolicy_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_State();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Input_SchedulerPolicy_State* Qos_Interfaces_Interface_Input_SchedulerPolicy_State::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Input_SchedulerPolicy_State* n = new Qos_Interfaces_Interface_Input_SchedulerPolicy_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Input_SchedulerPolicy_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(965176298u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue name = 120647037 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/state/name"];
      case 120647037: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 965176298 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.State)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue name = 120647037 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/state/name"];
  if (this->has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      120647037, *this->name_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.State)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Input_SchedulerPolicy_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue name = 120647037 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/state/name"];
  if (this->has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        120647037, *this->name_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.State)
  return target;
}

size_t Qos_Interfaces_Interface_Input_SchedulerPolicy_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue name = 120647037 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/state/name"];
  if (this->has_name()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->name_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Input_SchedulerPolicy_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Input_SchedulerPolicy_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.State)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_State::MergeFrom(const Qos_Interfaces_Interface_Input_SchedulerPolicy_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_name()) {
    mutable_name()->::ywrapper::StringValue::MergeFrom(from.name());
  }
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_State::CopyFrom(const Qos_Interfaces_Interface_Input_SchedulerPolicy_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Input_SchedulerPolicy_State::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy_State::Swap(Qos_Interfaces_Interface_Input_SchedulerPolicy_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Input_SchedulerPolicy_State::InternalSwap(Qos_Interfaces_Interface_Input_SchedulerPolicy_State* other) {
  using std::swap;
  swap(name_, other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Input_SchedulerPolicy_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Input_SchedulerPolicy::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_SchedulerPolicy_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Config*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Config::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_SchedulerPolicy_default_instance_._instance.get_mutable()->schedulers_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_SchedulerPolicy_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_State*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Input_SchedulerPolicy::kConfigFieldNumber;
const int Qos_Interfaces_Interface_Input_SchedulerPolicy::kSchedulersFieldNumber;
const int Qos_Interfaces_Interface_Input_SchedulerPolicy::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Input_SchedulerPolicy::Qos_Interfaces_Interface_Input_SchedulerPolicy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy)
}
Qos_Interfaces_Interface_Input_SchedulerPolicy::Qos_Interfaces_Interface_Input_SchedulerPolicy(const Qos_Interfaces_Interface_Input_SchedulerPolicy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_schedulers()) {
    schedulers_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers(*from.schedulers_);
  } else {
    schedulers_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy)
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy::SharedCtor() {
  ::memset(&schedulers_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&schedulers_)) + sizeof(config_));
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Input_SchedulerPolicy::~Qos_Interfaces_Interface_Input_SchedulerPolicy() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy)
  SharedDtor();
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy::SharedDtor() {
  if (this != internal_default_instance()) delete schedulers_;
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete config_;
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Input_SchedulerPolicy::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Input_SchedulerPolicy& Qos_Interfaces_Interface_Input_SchedulerPolicy::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Input_SchedulerPolicy* Qos_Interfaces_Interface_Input_SchedulerPolicy::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Input_SchedulerPolicy* n = new Qos_Interfaces_Interface_Input_SchedulerPolicy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && schedulers_ != NULL) {
    delete schedulers_;
  }
  schedulers_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Input_SchedulerPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4054315650u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers schedulers = 242022128 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers"];
      case 242022128: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 1936177026 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_schedulers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.State state = 403641417 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/state"];
      case 403641417: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 3229131338 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Config config = 506789456 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/config"];
      case 506789456: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 4054315650 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers schedulers = 242022128 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers"];
  if (this->has_schedulers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      242022128, *this->schedulers_, output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.State state = 403641417 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      403641417, *this->state_, output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Config config = 506789456 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      506789456, *this->config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Input_SchedulerPolicy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers schedulers = 242022128 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers"];
  if (this->has_schedulers()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        242022128, *this->schedulers_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.State state = 403641417 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        403641417, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Config config = 506789456 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        506789456, *this->config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy)
  return target;
}

size_t Qos_Interfaces_Interface_Input_SchedulerPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers schedulers = 242022128 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers"];
  if (this->has_schedulers()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->schedulers_);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.State state = 403641417 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Config config = 506789456 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Input_SchedulerPolicy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Input_SchedulerPolicy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy::MergeFrom(const Qos_Interfaces_Interface_Input_SchedulerPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_schedulers()) {
    mutable_schedulers()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers::MergeFrom(from.schedulers());
  }
  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_State::MergeFrom(from.state());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Config::MergeFrom(from.config());
  }
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy::CopyFrom(const Qos_Interfaces_Interface_Input_SchedulerPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Input_SchedulerPolicy::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Input_SchedulerPolicy::Swap(Qos_Interfaces_Interface_Input_SchedulerPolicy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Input_SchedulerPolicy::InternalSwap(Qos_Interfaces_Interface_Input_SchedulerPolicy* other) {
  using std::swap;
  swap(schedulers_, other->schedulers_);
  swap(state_, other->state_);
  swap(config_, other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Input_SchedulerPolicy::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Input_State::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Input_State::Qos_Interfaces_Interface_Input_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.State)
}
Qos_Interfaces_Interface_Input_State::Qos_Interfaces_Interface_Input_State(const Qos_Interfaces_Interface_Input_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.State)
}

void Qos_Interfaces_Interface_Input_State::SharedCtor() {
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Input_State::~Qos_Interfaces_Interface_Input_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.State)
  SharedDtor();
}

void Qos_Interfaces_Interface_Input_State::SharedDtor() {
}

void Qos_Interfaces_Interface_Input_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Input_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Input_State& Qos_Interfaces_Interface_Input_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_State();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Input_State* Qos_Interfaces_Interface_Input_State::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Input_State* n = new Qos_Interfaces_Interface_Input_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Input_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Input_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.State)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Input_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.State)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Input_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.State)
  return target;
}

size_t Qos_Interfaces_Interface_Input_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Input_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Input_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Input_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.State)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Input_State::MergeFrom(const Qos_Interfaces_Interface_Input_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Qos_Interfaces_Interface_Input_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Input_State::CopyFrom(const Qos_Interfaces_Interface_Input_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Input_State::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Input_State::Swap(Qos_Interfaces_Interface_Input_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Input_State::InternalSwap(Qos_Interfaces_Interface_Input_State* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Input_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config_default_instance_._instance.get_mutable()->name_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config::clear_name() {
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Config)
}
Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_name()) {
    name_ = new ::ywrapper::StringValue(*from.name_);
  } else {
    name_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Config)
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config::SharedCtor() {
  name_ = NULL;
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config::~Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Config)
  SharedDtor();
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config::SharedDtor() {
  if (this != internal_default_instance()) delete name_;
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config& Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config* n = new Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(612166890u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue name = 76520861 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/config/name"];
      case 76520861: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 612166890 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Config)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue name = 76520861 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/config/name"];
  if (this->has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      76520861, *this->name_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Config)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue name = 76520861 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/config/name"];
  if (this->has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        76520861, *this->name_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Config)
  return target;
}

size_t Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue name = 76520861 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/config/name"];
  if (this->has_name()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->name_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Config)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config::MergeFrom(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_name()) {
    mutable_name()->::ywrapper::StringValue::MergeFrom(from.name());
  }
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config::CopyFrom(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config::Swap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config::InternalSwap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config* other) {
  using std::swap;
  swap(name_, other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config_default_instance_._instance.get_mutable()->name_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config::clear_name() {
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.Config)
}
Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_name()) {
    name_ = new ::ywrapper::StringValue(*from.name_);
  } else {
    name_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.Config)
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config::SharedCtor() {
  name_ = NULL;
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config::~Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.Config)
  SharedDtor();
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config::SharedDtor() {
  if (this != internal_default_instance()) delete name_;
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config& Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config* n = new Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3285188274u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue name = 410648534 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/config/name"];
      case 410648534: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 3285188274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.Config)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue name = 410648534 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/config/name"];
  if (this->has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      410648534, *this->name_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.Config)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue name = 410648534 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/config/name"];
  if (this->has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        410648534, *this->name_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.Config)
  return target;
}

size_t Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue name = 410648534 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/config/name"];
  if (this->has_name()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->name_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.Config)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config::MergeFrom(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_name()) {
    mutable_name()->::ywrapper::StringValue::MergeFrom(from.name());
  }
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config::CopyFrom(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config::Swap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config::InternalSwap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config* other) {
  using std::swap;
  swap(name_, other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State_default_instance_._instance.get_mutable()->avg_queue_len_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State_default_instance_._instance.get_mutable()->dropped_pkts_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State_default_instance_._instance.get_mutable()->max_queue_len_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State_default_instance_._instance.get_mutable()->name_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State_default_instance_._instance.get_mutable()->transmit_octets_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State_default_instance_._instance.get_mutable()->transmit_pkts_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::clear_avg_queue_len() {
  if (GetArenaNoVirtual() == NULL && avg_queue_len_ != NULL) {
    delete avg_queue_len_;
  }
  avg_queue_len_ = NULL;
}
void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::clear_dropped_pkts() {
  if (GetArenaNoVirtual() == NULL && dropped_pkts_ != NULL) {
    delete dropped_pkts_;
  }
  dropped_pkts_ = NULL;
}
void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::clear_max_queue_len() {
  if (GetArenaNoVirtual() == NULL && max_queue_len_ != NULL) {
    delete max_queue_len_;
  }
  max_queue_len_ = NULL;
}
void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::clear_name() {
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
}
void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::clear_transmit_octets() {
  if (GetArenaNoVirtual() == NULL && transmit_octets_ != NULL) {
    delete transmit_octets_;
  }
  transmit_octets_ = NULL;
}
void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::clear_transmit_pkts() {
  if (GetArenaNoVirtual() == NULL && transmit_pkts_ != NULL) {
    delete transmit_pkts_;
  }
  transmit_pkts_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::kAvgQueueLenFieldNumber;
const int Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::kDroppedPktsFieldNumber;
const int Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::kMaxQueueLenFieldNumber;
const int Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::kNameFieldNumber;
const int Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::kTransmitOctetsFieldNumber;
const int Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::kTransmitPktsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State)
}
Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_transmit_octets()) {
    transmit_octets_ = new ::ywrapper::UintValue(*from.transmit_octets_);
  } else {
    transmit_octets_ = NULL;
  }
  if (from.has_transmit_pkts()) {
    transmit_pkts_ = new ::ywrapper::UintValue(*from.transmit_pkts_);
  } else {
    transmit_pkts_ = NULL;
  }
  if (from.has_dropped_pkts()) {
    dropped_pkts_ = new ::ywrapper::UintValue(*from.dropped_pkts_);
  } else {
    dropped_pkts_ = NULL;
  }
  if (from.has_avg_queue_len()) {
    avg_queue_len_ = new ::ywrapper::UintValue(*from.avg_queue_len_);
  } else {
    avg_queue_len_ = NULL;
  }
  if (from.has_name()) {
    name_ = new ::ywrapper::StringValue(*from.name_);
  } else {
    name_ = NULL;
  }
  if (from.has_max_queue_len()) {
    max_queue_len_ = new ::ywrapper::UintValue(*from.max_queue_len_);
  } else {
    max_queue_len_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State)
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::SharedCtor() {
  ::memset(&transmit_octets_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_queue_len_) -
      reinterpret_cast<char*>(&transmit_octets_)) + sizeof(max_queue_len_));
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::~Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State)
  SharedDtor();
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::SharedDtor() {
  if (this != internal_default_instance()) delete transmit_octets_;
  if (this != internal_default_instance()) delete transmit_pkts_;
  if (this != internal_default_instance()) delete dropped_pkts_;
  if (this != internal_default_instance()) delete avg_queue_len_;
  if (this != internal_default_instance()) delete name_;
  if (this != internal_default_instance()) delete max_queue_len_;
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State& Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State* n = new Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && transmit_octets_ != NULL) {
    delete transmit_octets_;
  }
  transmit_octets_ = NULL;
  if (GetArenaNoVirtual() == NULL && transmit_pkts_ != NULL) {
    delete transmit_pkts_;
  }
  transmit_pkts_ = NULL;
  if (GetArenaNoVirtual() == NULL && dropped_pkts_ != NULL) {
    delete dropped_pkts_;
  }
  dropped_pkts_ = NULL;
  if (GetArenaNoVirtual() == NULL && avg_queue_len_ != NULL) {
    delete avg_queue_len_;
  }
  avg_queue_len_ = NULL;
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
  if (GetArenaNoVirtual() == NULL && max_queue_len_ != NULL) {
    delete max_queue_len_;
  }
  max_queue_len_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3916081458u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue transmit_octets = 19609109 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/transmit-octets"];
      case 19609109: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 156872874 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transmit_octets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue transmit_pkts = 265927841 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/transmit-pkts"];
      case 265927841: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 2127422730 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transmit_pkts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue dropped_pkts = 300610831 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/dropped-pkts"];
      case 300610831: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 2404886650 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dropped_pkts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue avg_queue_len = 370597120 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/avg-queue-len"];
      case 370597120: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 2964776962 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_avg_queue_len()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue name = 379083081 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/name"];
      case 379083081: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 3032664650 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue max_queue_len = 489510182 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/max-queue-len"];
      case 489510182: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 3916081458 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_max_queue_len()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue transmit_octets = 19609109 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/transmit-octets"];
  if (this->has_transmit_octets()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19609109, *this->transmit_octets_, output);
  }

  // .ywrapper.UintValue transmit_pkts = 265927841 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/transmit-pkts"];
  if (this->has_transmit_pkts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      265927841, *this->transmit_pkts_, output);
  }

  // .ywrapper.UintValue dropped_pkts = 300610831 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/dropped-pkts"];
  if (this->has_dropped_pkts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      300610831, *this->dropped_pkts_, output);
  }

  // .ywrapper.UintValue avg_queue_len = 370597120 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/avg-queue-len"];
  if (this->has_avg_queue_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      370597120, *this->avg_queue_len_, output);
  }

  // .ywrapper.StringValue name = 379083081 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/name"];
  if (this->has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      379083081, *this->name_, output);
  }

  // .ywrapper.UintValue max_queue_len = 489510182 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/max-queue-len"];
  if (this->has_max_queue_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      489510182, *this->max_queue_len_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue transmit_octets = 19609109 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/transmit-octets"];
  if (this->has_transmit_octets()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19609109, *this->transmit_octets_, deterministic, target);
  }

  // .ywrapper.UintValue transmit_pkts = 265927841 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/transmit-pkts"];
  if (this->has_transmit_pkts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        265927841, *this->transmit_pkts_, deterministic, target);
  }

  // .ywrapper.UintValue dropped_pkts = 300610831 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/dropped-pkts"];
  if (this->has_dropped_pkts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        300610831, *this->dropped_pkts_, deterministic, target);
  }

  // .ywrapper.UintValue avg_queue_len = 370597120 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/avg-queue-len"];
  if (this->has_avg_queue_len()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        370597120, *this->avg_queue_len_, deterministic, target);
  }

  // .ywrapper.StringValue name = 379083081 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/name"];
  if (this->has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        379083081, *this->name_, deterministic, target);
  }

  // .ywrapper.UintValue max_queue_len = 489510182 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/max-queue-len"];
  if (this->has_max_queue_len()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        489510182, *this->max_queue_len_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State)
  return target;
}

size_t Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue transmit_octets = 19609109 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/transmit-octets"];
  if (this->has_transmit_octets()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->transmit_octets_);
  }

  // .ywrapper.UintValue transmit_pkts = 265927841 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/transmit-pkts"];
  if (this->has_transmit_pkts()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->transmit_pkts_);
  }

  // .ywrapper.UintValue dropped_pkts = 300610831 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/dropped-pkts"];
  if (this->has_dropped_pkts()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dropped_pkts_);
  }

  // .ywrapper.UintValue avg_queue_len = 370597120 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/avg-queue-len"];
  if (this->has_avg_queue_len()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->avg_queue_len_);
  }

  // .ywrapper.StringValue name = 379083081 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/name"];
  if (this->has_name()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->name_);
  }

  // .ywrapper.UintValue max_queue_len = 489510182 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/max-queue-len"];
  if (this->has_max_queue_len()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->max_queue_len_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::MergeFrom(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_transmit_octets()) {
    mutable_transmit_octets()->::ywrapper::UintValue::MergeFrom(from.transmit_octets());
  }
  if (from.has_transmit_pkts()) {
    mutable_transmit_pkts()->::ywrapper::UintValue::MergeFrom(from.transmit_pkts());
  }
  if (from.has_dropped_pkts()) {
    mutable_dropped_pkts()->::ywrapper::UintValue::MergeFrom(from.dropped_pkts());
  }
  if (from.has_avg_queue_len()) {
    mutable_avg_queue_len()->::ywrapper::UintValue::MergeFrom(from.avg_queue_len());
  }
  if (from.has_name()) {
    mutable_name()->::ywrapper::StringValue::MergeFrom(from.name());
  }
  if (from.has_max_queue_len()) {
    mutable_max_queue_len()->::ywrapper::UintValue::MergeFrom(from.max_queue_len());
  }
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::CopyFrom(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::Swap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::InternalSwap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State* other) {
  using std::swap;
  swap(transmit_octets_, other->transmit_octets_);
  swap(transmit_pkts_, other->transmit_pkts_);
  swap(dropped_pkts_, other->dropped_pkts_);
  swap(avg_queue_len_, other->avg_queue_len_);
  swap(name_, other->name_);
  swap(max_queue_len_, other->max_queue_len_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue::kConfigFieldNumber;
const int Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue)
}
Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue)
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&state_)) + sizeof(config_));
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue::~Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue)
  SharedDtor();
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete config_;
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue& Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue* n = new Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3379246498u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State state = 208271053 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state"];
      case 208271053: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 1666168426 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.Config config = 422405812 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/config"];
      case 422405812: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 3379246498 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State state = 208271053 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      208271053, *this->state_, output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.Config config = 422405812 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      422405812, *this->config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State state = 208271053 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        208271053, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.Config config = 422405812 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        422405812, *this->config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue)
  return target;
}

size_t Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State state = 208271053 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.Config config = 422405812 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue::MergeFrom(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::MergeFrom(from.state());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config::MergeFrom(from.config());
  }
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue::CopyFrom(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue::Swap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue::InternalSwap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(config_, other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey_default_instance_._instance.get_mutable()->queue_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::kNameFieldNumber;
const int Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::kQueueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey)
}
Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_queue()) {
    queue_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue(*from.queue_);
  } else {
    queue_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey)
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queue_ = NULL;
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::~Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey)
  SharedDtor();
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete queue_;
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey& Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey* n = new Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && queue_ != NULL) {
    delete queue_;
  }
  queue_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/name"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue queue = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_queue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/name"];
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue queue = 2;
  if (this->has_queue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->queue_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/name"];
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue queue = 2;
  if (this->has_queue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->queue_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey)
  return target;
}

size_t Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/name"];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue queue = 2;
  if (this->has_queue()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->queue_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::MergeFrom(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_queue()) {
    mutable_queue()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue::MergeFrom(from.queue());
  }
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::CopyFrom(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::Swap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::InternalSwap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(queue_, other->queue_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues::kQueueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues)
}
Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      queue_(from.queue_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues)
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues::SharedCtor() {
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues::~Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues)
  SharedDtor();
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues::SharedDtor() {
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues& Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues* n = new Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queue_.Clear();
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(640006298u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey queue = 80000787 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue"];
      case 80000787: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 640006298 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_queue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey queue = 80000787 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->queue_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      80000787, this->queue(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey queue = 80000787 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->queue_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        80000787, this->queue(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues)
  return target;
}

size_t Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey queue = 80000787 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue"];
  {
    unsigned int count = static_cast<unsigned int>(this->queue_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->queue(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues::MergeFrom(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  queue_.MergeFrom(from.queue_);
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues::CopyFrom(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues::Swap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues::InternalSwap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues* other) {
  using std::swap;
  queue_.InternalSwap(&other->queue_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State_default_instance_._instance.get_mutable()->name_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State::clear_name() {
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.State)
}
Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_name()) {
    name_ = new ::ywrapper::StringValue(*from.name_);
  } else {
    name_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.State)
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State::SharedCtor() {
  name_ = NULL;
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State::~Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.State)
  SharedDtor();
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State::SharedDtor() {
  if (this != internal_default_instance()) delete name_;
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State& Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State* n = new Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(603843362u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue name = 75480420 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/state/name"];
      case 75480420: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 603843362 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.State)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue name = 75480420 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/state/name"];
  if (this->has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      75480420, *this->name_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.State)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue name = 75480420 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/state/name"];
  if (this->has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        75480420, *this->name_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.State)
  return target;
}

size_t Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue name = 75480420 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/state/name"];
  if (this->has_name()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->name_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.State)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State::MergeFrom(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_name()) {
    mutable_name()->::ywrapper::StringValue::MergeFrom(from.name());
  }
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State::CopyFrom(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State::Swap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State::InternalSwap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State* other) {
  using std::swap;
  swap(name_, other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_default_instance_._instance.get_mutable()->queues_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::kConfigFieldNumber;
const int Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::kQueuesFieldNumber;
const int Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface)
}
Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_queues()) {
    queues_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues(*from.queues_);
  } else {
    queues_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface)
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::SharedCtor() {
  ::memset(&queues_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&queues_)) + sizeof(state_));
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::~Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface)
  SharedDtor();
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::SharedDtor() {
  if (this != internal_default_instance()) delete queues_;
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface& Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface* n = new Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && queues_ != NULL) {
    delete queues_;
  }
  queues_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2589984242u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues queues = 40799367 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues"];
      case 40799367: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 326394938 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_queues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Config config = 78813417 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/config"];
      case 78813417: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 630507338 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.State state = 323748030 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/state"];
      case 323748030: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 2589984242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues queues = 40799367 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues"];
  if (this->has_queues()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40799367, *this->queues_, output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Config config = 78813417 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      78813417, *this->config_, output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.State state = 323748030 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      323748030, *this->state_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues queues = 40799367 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues"];
  if (this->has_queues()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        40799367, *this->queues_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Config config = 78813417 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        78813417, *this->config_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.State state = 323748030 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        323748030, *this->state_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface)
  return target;
}

size_t Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues queues = 40799367 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues"];
  if (this->has_queues()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->queues_);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Config config = 78813417 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.State state = 323748030 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::MergeFrom(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_queues()) {
    mutable_queues()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues::MergeFrom(from.queues());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config::MergeFrom(from.config());
  }
  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State::MergeFrom(from.state());
  }
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::CopyFrom(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::Swap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::InternalSwap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface* other) {
  using std::swap;
  swap(queues_, other->queues_);
  swap(config_, other->config_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey_default_instance_._instance.get_mutable()->voq_interface_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::kNameFieldNumber;
const int Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::kVoqInterfaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey)
}
Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_voq_interface()) {
    voq_interface_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface(*from.voq_interface_);
  } else {
    voq_interface_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey)
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  voq_interface_ = NULL;
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::~Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey)
  SharedDtor();
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete voq_interface_;
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey& Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey* n = new Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && voq_interface_ != NULL) {
    delete voq_interface_;
  }
  voq_interface_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/name"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface voq_interface = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_voq_interface()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/name"];
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface voq_interface = 2;
  if (this->has_voq_interface()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->voq_interface_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/name"];
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface voq_interface = 2;
  if (this->has_voq_interface()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->voq_interface_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey)
  return target;
}

size_t Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/name"];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface voq_interface = 2;
  if (this->has_voq_interface()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->voq_interface_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::MergeFrom(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_voq_interface()) {
    mutable_voq_interface()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::MergeFrom(from.voq_interface());
  }
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::CopyFrom(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::Swap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::InternalSwap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(voq_interface_, other->voq_interface_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Input_VirtualOutputQueues::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Input_VirtualOutputQueues::kVoqInterfaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Input_VirtualOutputQueues::Qos_Interfaces_Interface_Input_VirtualOutputQueues()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues)
}
Qos_Interfaces_Interface_Input_VirtualOutputQueues::Qos_Interfaces_Interface_Input_VirtualOutputQueues(const Qos_Interfaces_Interface_Input_VirtualOutputQueues& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      voq_interface_(from.voq_interface_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues)
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues::SharedCtor() {
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Input_VirtualOutputQueues::~Qos_Interfaces_Interface_Input_VirtualOutputQueues() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues)
  SharedDtor();
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues::SharedDtor() {
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Input_VirtualOutputQueues::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Input_VirtualOutputQueues& Qos_Interfaces_Interface_Input_VirtualOutputQueues::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Input_VirtualOutputQueues* Qos_Interfaces_Interface_Input_VirtualOutputQueues::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Input_VirtualOutputQueues* n = new Qos_Interfaces_Interface_Input_VirtualOutputQueues;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  voq_interface_.Clear();
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Input_VirtualOutputQueues::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(1073196578u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey voq_interface = 134149572 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface"];
      case 134149572: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 1073196578 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_voq_interface()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey voq_interface = 134149572 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->voq_interface_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      134149572, this->voq_interface(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Input_VirtualOutputQueues::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey voq_interface = 134149572 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->voq_interface_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        134149572, this->voq_interface(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues)
  return target;
}

size_t Qos_Interfaces_Interface_Input_VirtualOutputQueues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey voq_interface = 134149572 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface"];
  {
    unsigned int count = static_cast<unsigned int>(this->voq_interface_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->voq_interface(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Input_VirtualOutputQueues* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Input_VirtualOutputQueues>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues::MergeFrom(const Qos_Interfaces_Interface_Input_VirtualOutputQueues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  voq_interface_.MergeFrom(from.voq_interface_);
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues::CopyFrom(const Qos_Interfaces_Interface_Input_VirtualOutputQueues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Input_VirtualOutputQueues::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Input_VirtualOutputQueues::Swap(Qos_Interfaces_Interface_Input_VirtualOutputQueues* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Input_VirtualOutputQueues::InternalSwap(Qos_Interfaces_Interface_Input_VirtualOutputQueues* other) {
  using std::swap;
  voq_interface_.InternalSwap(&other->voq_interface_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Input_VirtualOutputQueues::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Input::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_default_instance_._instance.get_mutable()->classifers_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Config*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Config::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_default_instance_._instance.get_mutable()->queues_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_default_instance_._instance.get_mutable()->scheduler_policy_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_State*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_State::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_default_instance_._instance.get_mutable()->virtual_output_queues_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Input::kClassifersFieldNumber;
const int Qos_Interfaces_Interface_Input::kConfigFieldNumber;
const int Qos_Interfaces_Interface_Input::kQueuesFieldNumber;
const int Qos_Interfaces_Interface_Input::kSchedulerPolicyFieldNumber;
const int Qos_Interfaces_Interface_Input::kStateFieldNumber;
const int Qos_Interfaces_Interface_Input::kVirtualOutputQueuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Input::Qos_Interfaces_Interface_Input()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input)
}
Qos_Interfaces_Interface_Input::Qos_Interfaces_Interface_Input(const Qos_Interfaces_Interface_Input& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_classifers()) {
    classifers_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers(*from.classifers_);
  } else {
    classifers_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_virtual_output_queues()) {
    virtual_output_queues_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues(*from.virtual_output_queues_);
  } else {
    virtual_output_queues_ = NULL;
  }
  if (from.has_scheduler_policy()) {
    scheduler_policy_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy(*from.scheduler_policy_);
  } else {
    scheduler_policy_ = NULL;
  }
  if (from.has_queues()) {
    queues_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues(*from.queues_);
  } else {
    queues_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input)
}

void Qos_Interfaces_Interface_Input::SharedCtor() {
  ::memset(&classifers_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&queues_) -
      reinterpret_cast<char*>(&classifers_)) + sizeof(queues_));
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Input::~Qos_Interfaces_Interface_Input() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input)
  SharedDtor();
}

void Qos_Interfaces_Interface_Input::SharedDtor() {
  if (this != internal_default_instance()) delete classifers_;
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete virtual_output_queues_;
  if (this != internal_default_instance()) delete scheduler_policy_;
  if (this != internal_default_instance()) delete queues_;
}

void Qos_Interfaces_Interface_Input::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Input::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Input& Qos_Interfaces_Interface_Input::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Input* Qos_Interfaces_Interface_Input::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Input* n = new Qos_Interfaces_Interface_Input;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Input::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && classifers_ != NULL) {
    delete classifers_;
  }
  classifers_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && virtual_output_queues_ != NULL) {
    delete virtual_output_queues_;
  }
  virtual_output_queues_ = NULL;
  if (GetArenaNoVirtual() == NULL && scheduler_policy_ != NULL) {
    delete scheduler_policy_;
  }
  scheduler_policy_ = NULL;
  if (GetArenaNoVirtual() == NULL && queues_ != NULL) {
    delete queues_;
  }
  queues_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Input::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3932913834u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers classifers = 158553614 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers"];
      case 158553614: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 1268428914 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_classifers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Config config = 195844559 [(.yext.schemapath) = "/qos/interfaces/interface/input/config"];
      case 195844559: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 1566756474 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.State state = 273823424 [(.yext.schemapath) = "/qos/interfaces/interface/input/state"];
      case 273823424: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 2190587394 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues virtual_output_queues = 370520089 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues"];
      case 370520089: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 2964160714 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_virtual_output_queues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy scheduler_policy = 391585903 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy"];
      case 391585903: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 3132687226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scheduler_policy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues queues = 491614229 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues"];
      case 491614229: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 3932913834 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_queues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Input::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers classifers = 158553614 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers"];
  if (this->has_classifers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      158553614, *this->classifers_, output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Config config = 195844559 [(.yext.schemapath) = "/qos/interfaces/interface/input/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      195844559, *this->config_, output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.State state = 273823424 [(.yext.schemapath) = "/qos/interfaces/interface/input/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      273823424, *this->state_, output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues virtual_output_queues = 370520089 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues"];
  if (this->has_virtual_output_queues()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      370520089, *this->virtual_output_queues_, output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy scheduler_policy = 391585903 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy"];
  if (this->has_scheduler_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      391585903, *this->scheduler_policy_, output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues queues = 491614229 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues"];
  if (this->has_queues()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      491614229, *this->queues_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Input::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers classifers = 158553614 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers"];
  if (this->has_classifers()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        158553614, *this->classifers_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Config config = 195844559 [(.yext.schemapath) = "/qos/interfaces/interface/input/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        195844559, *this->config_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.State state = 273823424 [(.yext.schemapath) = "/qos/interfaces/interface/input/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        273823424, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues virtual_output_queues = 370520089 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues"];
  if (this->has_virtual_output_queues()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        370520089, *this->virtual_output_queues_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy scheduler_policy = 391585903 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy"];
  if (this->has_scheduler_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        391585903, *this->scheduler_policy_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues queues = 491614229 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues"];
  if (this->has_queues()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        491614229, *this->queues_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input)
  return target;
}

size_t Qos_Interfaces_Interface_Input::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers classifers = 158553614 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers"];
  if (this->has_classifers()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->classifers_);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Config config = 195844559 [(.yext.schemapath) = "/qos/interfaces/interface/input/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.State state = 273823424 [(.yext.schemapath) = "/qos/interfaces/interface/input/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues virtual_output_queues = 370520089 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues"];
  if (this->has_virtual_output_queues()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->virtual_output_queues_);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy scheduler_policy = 391585903 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy"];
  if (this->has_scheduler_policy()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->scheduler_policy_);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues queues = 491614229 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues"];
  if (this->has_queues()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->queues_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Input::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Input* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Input>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Input::MergeFrom(const Qos_Interfaces_Interface_Input& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_classifers()) {
    mutable_classifers()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers::MergeFrom(from.classifers());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Config::MergeFrom(from.config());
  }
  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_State::MergeFrom(from.state());
  }
  if (from.has_virtual_output_queues()) {
    mutable_virtual_output_queues()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues::MergeFrom(from.virtual_output_queues());
  }
  if (from.has_scheduler_policy()) {
    mutable_scheduler_policy()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy::MergeFrom(from.scheduler_policy());
  }
  if (from.has_queues()) {
    mutable_queues()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues::MergeFrom(from.queues());
  }
}

void Qos_Interfaces_Interface_Input::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Input::CopyFrom(const Qos_Interfaces_Interface_Input& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Input::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Input::Swap(Qos_Interfaces_Interface_Input* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Input::InternalSwap(Qos_Interfaces_Interface_Input* other) {
  using std::swap;
  swap(classifers_, other->classifers_);
  swap(config_, other->config_);
  swap(state_, other->state_);
  swap(virtual_output_queues_, other->virtual_output_queues_);
  swap(scheduler_policy_, other->scheduler_policy_);
  swap(queues_, other->queues_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Input::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_InterfaceRef_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_InterfaceRef_Config_default_instance_._instance.get_mutable()->interface_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_InterfaceRef_Config_default_instance_._instance.get_mutable()->subinterface_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Qos_Interfaces_Interface_InterfaceRef_Config::clear_interface() {
  if (GetArenaNoVirtual() == NULL && interface_ != NULL) {
    delete interface_;
  }
  interface_ = NULL;
}
void Qos_Interfaces_Interface_InterfaceRef_Config::clear_subinterface() {
  if (GetArenaNoVirtual() == NULL && subinterface_ != NULL) {
    delete subinterface_;
  }
  subinterface_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_InterfaceRef_Config::kInterfaceFieldNumber;
const int Qos_Interfaces_Interface_InterfaceRef_Config::kSubinterfaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_InterfaceRef_Config::Qos_Interfaces_Interface_InterfaceRef_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_InterfaceRef_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.Config)
}
Qos_Interfaces_Interface_InterfaceRef_Config::Qos_Interfaces_Interface_InterfaceRef_Config(const Qos_Interfaces_Interface_InterfaceRef_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_interface()) {
    interface_ = new ::ywrapper::StringValue(*from.interface_);
  } else {
    interface_ = NULL;
  }
  if (from.has_subinterface()) {
    subinterface_ = new ::ywrapper::UintValue(*from.subinterface_);
  } else {
    subinterface_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.Config)
}

void Qos_Interfaces_Interface_InterfaceRef_Config::SharedCtor() {
  ::memset(&interface_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subinterface_) -
      reinterpret_cast<char*>(&interface_)) + sizeof(subinterface_));
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_InterfaceRef_Config::~Qos_Interfaces_Interface_InterfaceRef_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.Config)
  SharedDtor();
}

void Qos_Interfaces_Interface_InterfaceRef_Config::SharedDtor() {
  if (this != internal_default_instance()) delete interface_;
  if (this != internal_default_instance()) delete subinterface_;
}

void Qos_Interfaces_Interface_InterfaceRef_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_InterfaceRef_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_InterfaceRef_Config& Qos_Interfaces_Interface_InterfaceRef_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_InterfaceRef_Config();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_InterfaceRef_Config* Qos_Interfaces_Interface_InterfaceRef_Config::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_InterfaceRef_Config* n = new Qos_Interfaces_Interface_InterfaceRef_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_InterfaceRef_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && interface_ != NULL) {
    delete interface_;
  }
  interface_ = NULL;
  if (GetArenaNoVirtual() == NULL && subinterface_ != NULL) {
    delete subinterface_;
  }
  subinterface_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_InterfaceRef_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3258826690u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue interface = 31011128 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref/config/interface"];
      case 31011128: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 248089026 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_interface()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue subinterface = 407353336 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref/config/subinterface"];
      case 407353336: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 3258826690 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_subinterface()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.Config)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_InterfaceRef_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue interface = 31011128 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref/config/interface"];
  if (this->has_interface()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31011128, *this->interface_, output);
  }

  // .ywrapper.UintValue subinterface = 407353336 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref/config/subinterface"];
  if (this->has_subinterface()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      407353336, *this->subinterface_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.Config)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_InterfaceRef_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue interface = 31011128 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref/config/interface"];
  if (this->has_interface()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        31011128, *this->interface_, deterministic, target);
  }

  // .ywrapper.UintValue subinterface = 407353336 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref/config/subinterface"];
  if (this->has_subinterface()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        407353336, *this->subinterface_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.Config)
  return target;
}

size_t Qos_Interfaces_Interface_InterfaceRef_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue interface = 31011128 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref/config/interface"];
  if (this->has_interface()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->interface_);
  }

  // .ywrapper.UintValue subinterface = 407353336 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref/config/subinterface"];
  if (this->has_subinterface()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->subinterface_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_InterfaceRef_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_InterfaceRef_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_InterfaceRef_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.Config)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_InterfaceRef_Config::MergeFrom(const Qos_Interfaces_Interface_InterfaceRef_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_interface()) {
    mutable_interface()->::ywrapper::StringValue::MergeFrom(from.interface());
  }
  if (from.has_subinterface()) {
    mutable_subinterface()->::ywrapper::UintValue::MergeFrom(from.subinterface());
  }
}

void Qos_Interfaces_Interface_InterfaceRef_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_InterfaceRef_Config::CopyFrom(const Qos_Interfaces_Interface_InterfaceRef_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_InterfaceRef_Config::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_InterfaceRef_Config::Swap(Qos_Interfaces_Interface_InterfaceRef_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_InterfaceRef_Config::InternalSwap(Qos_Interfaces_Interface_InterfaceRef_Config* other) {
  using std::swap;
  swap(interface_, other->interface_);
  swap(subinterface_, other->subinterface_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_InterfaceRef_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_InterfaceRef_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_InterfaceRef_State_default_instance_._instance.get_mutable()->interface_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_InterfaceRef_State_default_instance_._instance.get_mutable()->subinterface_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Qos_Interfaces_Interface_InterfaceRef_State::clear_interface() {
  if (GetArenaNoVirtual() == NULL && interface_ != NULL) {
    delete interface_;
  }
  interface_ = NULL;
}
void Qos_Interfaces_Interface_InterfaceRef_State::clear_subinterface() {
  if (GetArenaNoVirtual() == NULL && subinterface_ != NULL) {
    delete subinterface_;
  }
  subinterface_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_InterfaceRef_State::kInterfaceFieldNumber;
const int Qos_Interfaces_Interface_InterfaceRef_State::kSubinterfaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_InterfaceRef_State::Qos_Interfaces_Interface_InterfaceRef_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_InterfaceRef_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.State)
}
Qos_Interfaces_Interface_InterfaceRef_State::Qos_Interfaces_Interface_InterfaceRef_State(const Qos_Interfaces_Interface_InterfaceRef_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_interface()) {
    interface_ = new ::ywrapper::StringValue(*from.interface_);
  } else {
    interface_ = NULL;
  }
  if (from.has_subinterface()) {
    subinterface_ = new ::ywrapper::UintValue(*from.subinterface_);
  } else {
    subinterface_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.State)
}

void Qos_Interfaces_Interface_InterfaceRef_State::SharedCtor() {
  ::memset(&interface_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subinterface_) -
      reinterpret_cast<char*>(&interface_)) + sizeof(subinterface_));
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_InterfaceRef_State::~Qos_Interfaces_Interface_InterfaceRef_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.State)
  SharedDtor();
}

void Qos_Interfaces_Interface_InterfaceRef_State::SharedDtor() {
  if (this != internal_default_instance()) delete interface_;
  if (this != internal_default_instance()) delete subinterface_;
}

void Qos_Interfaces_Interface_InterfaceRef_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_InterfaceRef_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_InterfaceRef_State& Qos_Interfaces_Interface_InterfaceRef_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_InterfaceRef_State();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_InterfaceRef_State* Qos_Interfaces_Interface_InterfaceRef_State::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_InterfaceRef_State* n = new Qos_Interfaces_Interface_InterfaceRef_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_InterfaceRef_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && interface_ != NULL) {
    delete interface_;
  }
  interface_ = NULL;
  if (GetArenaNoVirtual() == NULL && subinterface_ != NULL) {
    delete subinterface_;
  }
  subinterface_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_InterfaceRef_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3047478970u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue interface = 75395573 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref/state/interface"];
      case 75395573: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 603164586 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_interface()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue subinterface = 380934871 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref/state/subinterface"];
      case 380934871: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 3047478970 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_subinterface()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.State)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_InterfaceRef_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue interface = 75395573 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref/state/interface"];
  if (this->has_interface()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      75395573, *this->interface_, output);
  }

  // .ywrapper.UintValue subinterface = 380934871 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref/state/subinterface"];
  if (this->has_subinterface()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      380934871, *this->subinterface_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.State)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_InterfaceRef_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue interface = 75395573 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref/state/interface"];
  if (this->has_interface()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        75395573, *this->interface_, deterministic, target);
  }

  // .ywrapper.UintValue subinterface = 380934871 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref/state/subinterface"];
  if (this->has_subinterface()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        380934871, *this->subinterface_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.State)
  return target;
}

size_t Qos_Interfaces_Interface_InterfaceRef_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue interface = 75395573 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref/state/interface"];
  if (this->has_interface()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->interface_);
  }

  // .ywrapper.UintValue subinterface = 380934871 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref/state/subinterface"];
  if (this->has_subinterface()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->subinterface_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_InterfaceRef_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_InterfaceRef_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_InterfaceRef_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.State)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_InterfaceRef_State::MergeFrom(const Qos_Interfaces_Interface_InterfaceRef_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_interface()) {
    mutable_interface()->::ywrapper::StringValue::MergeFrom(from.interface());
  }
  if (from.has_subinterface()) {
    mutable_subinterface()->::ywrapper::UintValue::MergeFrom(from.subinterface());
  }
}

void Qos_Interfaces_Interface_InterfaceRef_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_InterfaceRef_State::CopyFrom(const Qos_Interfaces_Interface_InterfaceRef_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_InterfaceRef_State::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_InterfaceRef_State::Swap(Qos_Interfaces_Interface_InterfaceRef_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_InterfaceRef_State::InternalSwap(Qos_Interfaces_Interface_InterfaceRef_State* other) {
  using std::swap;
  swap(interface_, other->interface_);
  swap(subinterface_, other->subinterface_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_InterfaceRef_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_InterfaceRef::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_InterfaceRef_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_Config*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_Config::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_InterfaceRef_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_State*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_InterfaceRef::kConfigFieldNumber;
const int Qos_Interfaces_Interface_InterfaceRef::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_InterfaceRef::Qos_Interfaces_Interface_InterfaceRef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_InterfaceRef();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef)
}
Qos_Interfaces_Interface_InterfaceRef::Qos_Interfaces_Interface_InterfaceRef(const Qos_Interfaces_Interface_InterfaceRef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_State(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef)
}

void Qos_Interfaces_Interface_InterfaceRef::SharedCtor() {
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&config_)) + sizeof(state_));
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_InterfaceRef::~Qos_Interfaces_Interface_InterfaceRef() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef)
  SharedDtor();
}

void Qos_Interfaces_Interface_InterfaceRef::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void Qos_Interfaces_Interface_InterfaceRef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_InterfaceRef::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_InterfaceRef& Qos_Interfaces_Interface_InterfaceRef::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_InterfaceRef();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_InterfaceRef* Qos_Interfaces_Interface_InterfaceRef::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_InterfaceRef* n = new Qos_Interfaces_Interface_InterfaceRef;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_InterfaceRef::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_InterfaceRef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3903440458u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.Config config = 115373008 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref/config"];
      case 115373008: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 922984066 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.State state = 487930057 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref/state"];
      case 487930057: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 3903440458 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_InterfaceRef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.Config config = 115373008 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      115373008, *this->config_, output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.State state = 487930057 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      487930057, *this->state_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_InterfaceRef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.Config config = 115373008 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        115373008, *this->config_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.State state = 487930057 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        487930057, *this->state_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef)
  return target;
}

size_t Qos_Interfaces_Interface_InterfaceRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.Config config = 115373008 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.State state = 487930057 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_InterfaceRef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_InterfaceRef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_InterfaceRef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_InterfaceRef::MergeFrom(const Qos_Interfaces_Interface_InterfaceRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_Config::MergeFrom(from.config());
  }
  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_State::MergeFrom(from.state());
  }
}

void Qos_Interfaces_Interface_InterfaceRef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_InterfaceRef::CopyFrom(const Qos_Interfaces_Interface_InterfaceRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_InterfaceRef::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_InterfaceRef::Swap(Qos_Interfaces_Interface_InterfaceRef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_InterfaceRef::InternalSwap(Qos_Interfaces_Interface_InterfaceRef* other) {
  using std::swap;
  swap(config_, other->config_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_InterfaceRef::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_default_instance_._instance.get_mutable()->name_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::clear_name() {
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::kNameFieldNumber;
const int Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::Qos_Interfaces_Interface_Output_Classifers_Classifier_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Config)
}
Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::Qos_Interfaces_Interface_Output_Classifers_Classifier_Config(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_name()) {
    name_ = new ::ywrapper::StringValue(*from.name_);
  } else {
    name_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Config)
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::SharedCtor() {
  ::memset(&name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&name_)) + sizeof(type_));
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::~Qos_Interfaces_Interface_Output_Classifers_Classifier_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Config)
  SharedDtor();
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::SharedDtor() {
  if (this != internal_default_instance()) delete name_;
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Output_Classifers_Classifier_Config& Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Config();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Output_Classifers_Classifier_Config* Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Output_Classifers_Classifier_Config* n = new Qos_Interfaces_Interface_Output_Classifers_Classifier_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3064907016u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue name = 273984944 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/config/name"];
      case 273984944: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 2191879554 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Config.Type type = 383113377 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/config/type"];
      case 383113377: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 3064907016 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Config)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue name = 273984944 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/config/name"];
  if (this->has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      273984944, *this->name_, output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Config.Type type = 383113377 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/config/type"];
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      383113377, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Config)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue name = 273984944 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/config/name"];
  if (this->has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        273984944, *this->name_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Config.Type type = 383113377 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/config/type"];
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      383113377, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Config)
  return target;
}

size_t Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue name = 273984944 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/config/name"];
  if (this->has_name()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->name_);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Config.Type type = 383113377 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/config/type"];
  if (this->type() != 0) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Output_Classifers_Classifier_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Output_Classifers_Classifier_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Config)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::MergeFrom(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_name()) {
    mutable_name()->::ywrapper::StringValue::MergeFrom(from.name());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::CopyFrom(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::Swap(Qos_Interfaces_Interface_Output_Classifers_Classifier_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::InternalSwap(Qos_Interfaces_Interface_Output_Classifers_Classifier_Config* other) {
  using std::swap;
  swap(name_, other->name_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Output_Classifers_Classifier_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_Classifier_State_default_instance_._instance.get_mutable()->name_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void Qos_Interfaces_Interface_Output_Classifers_Classifier_State::clear_name() {
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Output_Classifers_Classifier_State::kNameFieldNumber;
const int Qos_Interfaces_Interface_Output_Classifers_Classifier_State::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Output_Classifers_Classifier_State::Qos_Interfaces_Interface_Output_Classifers_Classifier_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.State)
}
Qos_Interfaces_Interface_Output_Classifers_Classifier_State::Qos_Interfaces_Interface_Output_Classifers_Classifier_State(const Qos_Interfaces_Interface_Output_Classifers_Classifier_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_name()) {
    name_ = new ::ywrapper::StringValue(*from.name_);
  } else {
    name_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.State)
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_State::SharedCtor() {
  ::memset(&name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&name_)) + sizeof(type_));
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Output_Classifers_Classifier_State::~Qos_Interfaces_Interface_Output_Classifers_Classifier_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.State)
  SharedDtor();
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_State::SharedDtor() {
  if (this != internal_default_instance()) delete name_;
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Output_Classifers_Classifier_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Output_Classifers_Classifier_State& Qos_Interfaces_Interface_Output_Classifers_Classifier_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_State();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Output_Classifers_Classifier_State* Qos_Interfaces_Interface_Output_Classifers_Classifier_State::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Output_Classifers_Classifier_State* n = new Qos_Interfaces_Interface_Output_Classifers_Classifier_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Output_Classifers_Classifier_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3665134736u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue name = 43829575 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/state/name"];
      case 43829575: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 350636602 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.State.Type type = 458141842 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/state/type"];
      case 458141842: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 3665134736 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.State)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue name = 43829575 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/state/name"];
  if (this->has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43829575, *this->name_, output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.State.Type type = 458141842 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/state/type"];
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      458141842, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.State)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Output_Classifers_Classifier_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue name = 43829575 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/state/name"];
  if (this->has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        43829575, *this->name_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.State.Type type = 458141842 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/state/type"];
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      458141842, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.State)
  return target;
}

size_t Qos_Interfaces_Interface_Output_Classifers_Classifier_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue name = 43829575 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/state/name"];
  if (this->has_name()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->name_);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.State.Type type = 458141842 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/state/type"];
  if (this->type() != 0) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Output_Classifers_Classifier_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Output_Classifers_Classifier_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.State)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_State::MergeFrom(const Qos_Interfaces_Interface_Output_Classifers_Classifier_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_name()) {
    mutable_name()->::ywrapper::StringValue::MergeFrom(from.name());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_State::CopyFrom(const Qos_Interfaces_Interface_Output_Classifers_Classifier_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Output_Classifers_Classifier_State::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_State::Swap(Qos_Interfaces_Interface_Output_Classifers_Classifier_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Output_Classifers_Classifier_State::InternalSwap(Qos_Interfaces_Interface_Output_Classifers_Classifier_State* other) {
  using std::swap;
  swap(name_, other->name_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Output_Classifers_Classifier_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config_default_instance_._instance.get_mutable()->id_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.Config)
}
Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::ywrapper::StringValue(*from.id_);
  } else {
    id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.Config)
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config::SharedCtor() {
  id_ = NULL;
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config::~Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.Config)
  SharedDtor();
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config& Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config* Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config* n = new Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3370964906u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue id = 421370613 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/config/id"];
      case 421370613: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 3370964906 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.Config)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue id = 421370613 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/config/id"];
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      421370613, *this->id_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.Config)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue id = 421370613 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/config/id"];
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        421370613, *this->id_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.Config)
  return target;
}

size_t Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue id = 421370613 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/config/id"];
  if (this->has_id()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.Config)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config::MergeFrom(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::ywrapper::StringValue::MergeFrom(from.id());
  }
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config::CopyFrom(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config::Swap(Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config::InternalSwap(Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config* other) {
  using std::swap;
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State_default_instance_._instance.get_mutable()->id_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State_default_instance_._instance.get_mutable()->matched_octets_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State_default_instance_._instance.get_mutable()->matched_packets_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::clear_matched_octets() {
  if (GetArenaNoVirtual() == NULL && matched_octets_ != NULL) {
    delete matched_octets_;
  }
  matched_octets_ = NULL;
}
void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::clear_matched_packets() {
  if (GetArenaNoVirtual() == NULL && matched_packets_ != NULL) {
    delete matched_packets_;
  }
  matched_packets_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::kIdFieldNumber;
const int Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::kMatchedOctetsFieldNumber;
const int Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::kMatchedPacketsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.State)
}
Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::ywrapper::StringValue(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_matched_packets()) {
    matched_packets_ = new ::ywrapper::UintValue(*from.matched_packets_);
  } else {
    matched_packets_ = NULL;
  }
  if (from.has_matched_octets()) {
    matched_octets_ = new ::ywrapper::UintValue(*from.matched_octets_);
  } else {
    matched_octets_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.State)
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matched_octets_) -
      reinterpret_cast<char*>(&id_)) + sizeof(matched_octets_));
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::~Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.State)
  SharedDtor();
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete matched_packets_;
  if (this != internal_default_instance()) delete matched_octets_;
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State& Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State* Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State* n = new Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  if (GetArenaNoVirtual() == NULL && matched_packets_ != NULL) {
    delete matched_packets_;
  }
  matched_packets_ = NULL;
  if (GetArenaNoVirtual() == NULL && matched_octets_ != NULL) {
    delete matched_octets_;
  }
  matched_octets_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4203869074u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue id = 294625236 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/state/id"];
      case 294625236: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 2357001890 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue matched_packets = 507671601 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/state/matched-packets"];
      case 507671601: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 4061372810 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_matched_packets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue matched_octets = 525483634 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/state/matched-octets"];
      case 525483634: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 4203869074 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_matched_octets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.State)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue id = 294625236 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/state/id"];
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      294625236, *this->id_, output);
  }

  // .ywrapper.UintValue matched_packets = 507671601 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/state/matched-packets"];
  if (this->has_matched_packets()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      507671601, *this->matched_packets_, output);
  }

  // .ywrapper.UintValue matched_octets = 525483634 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/state/matched-octets"];
  if (this->has_matched_octets()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      525483634, *this->matched_octets_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.State)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue id = 294625236 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/state/id"];
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        294625236, *this->id_, deterministic, target);
  }

  // .ywrapper.UintValue matched_packets = 507671601 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/state/matched-packets"];
  if (this->has_matched_packets()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        507671601, *this->matched_packets_, deterministic, target);
  }

  // .ywrapper.UintValue matched_octets = 525483634 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/state/matched-octets"];
  if (this->has_matched_octets()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        525483634, *this->matched_octets_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.State)
  return target;
}

size_t Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue id = 294625236 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/state/id"];
  if (this->has_id()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->id_);
  }

  // .ywrapper.UintValue matched_packets = 507671601 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/state/matched-packets"];
  if (this->has_matched_packets()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->matched_packets_);
  }

  // .ywrapper.UintValue matched_octets = 525483634 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/state/matched-octets"];
  if (this->has_matched_octets()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->matched_octets_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.State)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::MergeFrom(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::ywrapper::StringValue::MergeFrom(from.id());
  }
  if (from.has_matched_packets()) {
    mutable_matched_packets()->::ywrapper::UintValue::MergeFrom(from.matched_packets());
  }
  if (from.has_matched_octets()) {
    mutable_matched_octets()->::ywrapper::UintValue::MergeFrom(from.matched_octets());
  }
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::CopyFrom(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::Swap(Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::InternalSwap(Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(matched_packets_, other->matched_packets_);
  swap(matched_octets_, other->matched_octets_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term::kConfigFieldNumber;
const int Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term)
}
Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term)
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term::SharedCtor() {
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&config_)) + sizeof(state_));
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term::~Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term)
  SharedDtor();
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term& Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term* Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term* n = new Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2035785506u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.Config config = 86353283 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/config"];
      case 86353283: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 690826266 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.State state = 254473188 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/state"];
      case 254473188: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 2035785506 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.Config config = 86353283 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      86353283, *this->config_, output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.State state = 254473188 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      254473188, *this->state_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.Config config = 86353283 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        86353283, *this->config_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.State state = 254473188 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        254473188, *this->state_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term)
  return target;
}

size_t Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.Config config = 86353283 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.State state = 254473188 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term::MergeFrom(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config::MergeFrom(from.config());
  }
  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::MergeFrom(from.state());
  }
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term::CopyFrom(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term::Swap(Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term::InternalSwap(Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term* other) {
  using std::swap;
  swap(config_, other->config_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey_default_instance_._instance.get_mutable()->term_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::kIdFieldNumber;
const int Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::kTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey)
}
Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_term()) {
    term_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term(*from.term_);
  } else {
    term_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey)
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  term_ = NULL;
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::~Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey)
  SharedDtor();
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete term_;
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey& Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey* Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey* n = new Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && term_ != NULL) {
    delete term_;
  }
  term_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/id"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term term = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_term()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/id"];
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term term = 2;
  if (this->has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->term_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/id"];
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term term = 2;
  if (this->has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->term_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey)
  return target;
}

size_t Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 1 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term term = 2;
  if (this->has_term()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->term_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::MergeFrom(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_term()) {
    mutable_term()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term::MergeFrom(from.term());
  }
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::CopyFrom(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::Swap(Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::InternalSwap(Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey* other) {
  using std::swap;
  id_.Swap(&other->id_);
  swap(term_, other->term_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms::kTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms)
}
Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      term_(from.term_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms)
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms::SharedCtor() {
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms::~Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms)
  SharedDtor();
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms::SharedDtor() {
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms& Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms* Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms* n = new Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  term_.Clear();
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(1059301138u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey term = 132412642 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term"];
      case 132412642: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 1059301138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_term()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey term = 132412642 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->term_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      132412642, this->term(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey term = 132412642 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->term_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        132412642, this->term(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms)
  return target;
}

size_t Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey term = 132412642 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term"];
  {
    unsigned int count = static_cast<unsigned int>(this->term_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->term(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms::MergeFrom(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  term_.MergeFrom(from.term_);
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms::CopyFrom(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms::Swap(Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms::InternalSwap(Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms* other) {
  using std::swap;
  term_.InternalSwap(&other->term_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Output_Classifers_Classifier::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_Classifier_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Config*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_Classifier_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_State*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_State::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_Classifier_default_instance_._instance.get_mutable()->terms_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Output_Classifers_Classifier::kConfigFieldNumber;
const int Qos_Interfaces_Interface_Output_Classifers_Classifier::kStateFieldNumber;
const int Qos_Interfaces_Interface_Output_Classifers_Classifier::kTermsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Output_Classifers_Classifier::Qos_Interfaces_Interface_Output_Classifers_Classifier()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier)
}
Qos_Interfaces_Interface_Output_Classifers_Classifier::Qos_Interfaces_Interface_Output_Classifers_Classifier(const Qos_Interfaces_Interface_Output_Classifers_Classifier& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_terms()) {
    terms_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms(*from.terms_);
  } else {
    terms_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier)
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&terms_) -
      reinterpret_cast<char*>(&state_)) + sizeof(terms_));
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Output_Classifers_Classifier::~Qos_Interfaces_Interface_Output_Classifers_Classifier() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier)
  SharedDtor();
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete terms_;
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Output_Classifers_Classifier::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Output_Classifers_Classifier& Qos_Interfaces_Interface_Output_Classifers_Classifier::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Output_Classifers_Classifier* Qos_Interfaces_Interface_Output_Classifers_Classifier::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Output_Classifers_Classifier* n = new Qos_Interfaces_Interface_Output_Classifers_Classifier;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && terms_ != NULL) {
    delete terms_;
  }
  terms_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Output_Classifers_Classifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4226897098u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.State state = 103030399 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/state"];
      case 103030399: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 824243194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Config config = 138687170 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/config"];
      case 138687170: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 1109497362 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms terms = 528362137 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms"];
      case 528362137: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 4226897098 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_terms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.State state = 103030399 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103030399, *this->state_, output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Config config = 138687170 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      138687170, *this->config_, output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms terms = 528362137 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms"];
  if (this->has_terms()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      528362137, *this->terms_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Output_Classifers_Classifier::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.State state = 103030399 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        103030399, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Config config = 138687170 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        138687170, *this->config_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms terms = 528362137 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms"];
  if (this->has_terms()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        528362137, *this->terms_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier)
  return target;
}

size_t Qos_Interfaces_Interface_Output_Classifers_Classifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.State state = 103030399 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Config config = 138687170 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms terms = 528362137 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms"];
  if (this->has_terms()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->terms_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Output_Classifers_Classifier* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Output_Classifers_Classifier>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier::MergeFrom(const Qos_Interfaces_Interface_Output_Classifers_Classifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_State::MergeFrom(from.state());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::MergeFrom(from.config());
  }
  if (from.has_terms()) {
    mutable_terms()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms::MergeFrom(from.terms());
  }
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier::CopyFrom(const Qos_Interfaces_Interface_Output_Classifers_Classifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Output_Classifers_Classifier::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Output_Classifers_Classifier::Swap(Qos_Interfaces_Interface_Output_Classifers_Classifier* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Output_Classifers_Classifier::InternalSwap(Qos_Interfaces_Interface_Output_Classifers_Classifier* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(config_, other->config_);
  swap(terms_, other->terms_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Output_Classifers_Classifier::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_default_instance_._instance.get_mutable()->classifier_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::kTypeFieldNumber;
const int Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::kClassifierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::Qos_Interfaces_Interface_Output_Classifers_ClassifierKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Classifers_ClassifierKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.ClassifierKey)
}
Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::Qos_Interfaces_Interface_Output_Classifers_ClassifierKey(const Qos_Interfaces_Interface_Output_Classifers_ClassifierKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_classifier()) {
    classifier_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier(*from.classifier_);
  } else {
    classifier_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.ClassifierKey)
}

void Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::SharedCtor() {
  ::memset(&classifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&classifier_)) + sizeof(type_));
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::~Qos_Interfaces_Interface_Output_Classifers_ClassifierKey() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.ClassifierKey)
  SharedDtor();
}

void Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::SharedDtor() {
  if (this != internal_default_instance()) delete classifier_;
}

void Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Output_Classifers_ClassifierKey& Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Classifers_ClassifierKey();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Output_Classifers_ClassifierKey* Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Output_Classifers_ClassifierKey* n = new Qos_Interfaces_Interface_Output_Classifers_ClassifierKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.ClassifierKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && classifier_ != NULL) {
    delete classifier_;
  }
  classifier_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.ClassifierKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.ClassifierKey.Type type = 1 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/type"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier classifier = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_classifier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.ClassifierKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.ClassifierKey)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.ClassifierKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.ClassifierKey.Type type = 1 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/type"];
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier classifier = 2;
  if (this->has_classifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->classifier_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.ClassifierKey)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.ClassifierKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.ClassifierKey.Type type = 1 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/type"];
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier classifier = 2;
  if (this->has_classifier()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->classifier_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.ClassifierKey)
  return target;
}

size_t Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.ClassifierKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier classifier = 2;
  if (this->has_classifier()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->classifier_);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.ClassifierKey.Type type = 1 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/type"];
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.ClassifierKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Output_Classifers_ClassifierKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Output_Classifers_ClassifierKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.ClassifierKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.ClassifierKey)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::MergeFrom(const Qos_Interfaces_Interface_Output_Classifers_ClassifierKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.ClassifierKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_classifier()) {
    mutable_classifier()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier::MergeFrom(from.classifier());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.ClassifierKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::CopyFrom(const Qos_Interfaces_Interface_Output_Classifers_ClassifierKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.ClassifierKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::Swap(Qos_Interfaces_Interface_Output_Classifers_ClassifierKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::InternalSwap(Qos_Interfaces_Interface_Output_Classifers_ClassifierKey* other) {
  using std::swap;
  swap(classifier_, other->classifier_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Output_Classifers::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Output_Classifers::kClassifierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Output_Classifers::Qos_Interfaces_Interface_Output_Classifers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Classifers();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers)
}
Qos_Interfaces_Interface_Output_Classifers::Qos_Interfaces_Interface_Output_Classifers(const Qos_Interfaces_Interface_Output_Classifers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      classifier_(from.classifier_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers)
}

void Qos_Interfaces_Interface_Output_Classifers::SharedCtor() {
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Output_Classifers::~Qos_Interfaces_Interface_Output_Classifers() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers)
  SharedDtor();
}

void Qos_Interfaces_Interface_Output_Classifers::SharedDtor() {
}

void Qos_Interfaces_Interface_Output_Classifers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Output_Classifers::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Output_Classifers& Qos_Interfaces_Interface_Output_Classifers::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Classifers();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Output_Classifers* Qos_Interfaces_Interface_Output_Classifers::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Output_Classifers* n = new Qos_Interfaces_Interface_Output_Classifers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Output_Classifers::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  classifier_.Clear();
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Output_Classifers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4249709930u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.ClassifierKey classifier = 531213741 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier"];
      case 531213741: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 4249709930 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_classifier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Output_Classifers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.ClassifierKey classifier = 531213741 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->classifier_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      531213741, this->classifier(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Output_Classifers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.ClassifierKey classifier = 531213741 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->classifier_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        531213741, this->classifier(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers)
  return target;
}

size_t Qos_Interfaces_Interface_Output_Classifers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.ClassifierKey classifier = 531213741 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier"];
  {
    unsigned int count = static_cast<unsigned int>(this->classifier_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->classifier(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Output_Classifers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Output_Classifers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Output_Classifers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Output_Classifers::MergeFrom(const Qos_Interfaces_Interface_Output_Classifers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  classifier_.MergeFrom(from.classifier_);
}

void Qos_Interfaces_Interface_Output_Classifers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Output_Classifers::CopyFrom(const Qos_Interfaces_Interface_Output_Classifers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Output_Classifers::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Output_Classifers::Swap(Qos_Interfaces_Interface_Output_Classifers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Output_Classifers::InternalSwap(Qos_Interfaces_Interface_Output_Classifers* other) {
  using std::swap;
  classifier_.InternalSwap(&other->classifier_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Output_Classifers::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Output_Config::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Output_Config::Qos_Interfaces_Interface_Output_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Config)
}
Qos_Interfaces_Interface_Output_Config::Qos_Interfaces_Interface_Output_Config(const Qos_Interfaces_Interface_Output_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Config)
}

void Qos_Interfaces_Interface_Output_Config::SharedCtor() {
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Output_Config::~Qos_Interfaces_Interface_Output_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Config)
  SharedDtor();
}

void Qos_Interfaces_Interface_Output_Config::SharedDtor() {
}

void Qos_Interfaces_Interface_Output_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Output_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Output_Config& Qos_Interfaces_Interface_Output_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Config();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Output_Config* Qos_Interfaces_Interface_Output_Config::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Output_Config* n = new Qos_Interfaces_Interface_Output_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Output_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Output_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Config)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Output_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Config)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Output_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Config)
  return target;
}

size_t Qos_Interfaces_Interface_Output_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Output_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Output_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Output_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Config)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Output_Config::MergeFrom(const Qos_Interfaces_Interface_Output_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Qos_Interfaces_Interface_Output_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Output_Config::CopyFrom(const Qos_Interfaces_Interface_Output_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Output_Config::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Output_Config::Swap(Qos_Interfaces_Interface_Output_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Output_Config::InternalSwap(Qos_Interfaces_Interface_Output_Config* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Output_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Output_InterfaceRef_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_InterfaceRef_Config_default_instance_._instance.get_mutable()->interface_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_InterfaceRef_Config_default_instance_._instance.get_mutable()->subinterface_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Qos_Interfaces_Interface_Output_InterfaceRef_Config::clear_interface() {
  if (GetArenaNoVirtual() == NULL && interface_ != NULL) {
    delete interface_;
  }
  interface_ = NULL;
}
void Qos_Interfaces_Interface_Output_InterfaceRef_Config::clear_subinterface() {
  if (GetArenaNoVirtual() == NULL && subinterface_ != NULL) {
    delete subinterface_;
  }
  subinterface_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Output_InterfaceRef_Config::kInterfaceFieldNumber;
const int Qos_Interfaces_Interface_Output_InterfaceRef_Config::kSubinterfaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Output_InterfaceRef_Config::Qos_Interfaces_Interface_Output_InterfaceRef_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_InterfaceRef_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.Config)
}
Qos_Interfaces_Interface_Output_InterfaceRef_Config::Qos_Interfaces_Interface_Output_InterfaceRef_Config(const Qos_Interfaces_Interface_Output_InterfaceRef_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_subinterface()) {
    subinterface_ = new ::ywrapper::UintValue(*from.subinterface_);
  } else {
    subinterface_ = NULL;
  }
  if (from.has_interface()) {
    interface_ = new ::ywrapper::StringValue(*from.interface_);
  } else {
    interface_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.Config)
}

void Qos_Interfaces_Interface_Output_InterfaceRef_Config::SharedCtor() {
  ::memset(&subinterface_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interface_) -
      reinterpret_cast<char*>(&subinterface_)) + sizeof(interface_));
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Output_InterfaceRef_Config::~Qos_Interfaces_Interface_Output_InterfaceRef_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.Config)
  SharedDtor();
}

void Qos_Interfaces_Interface_Output_InterfaceRef_Config::SharedDtor() {
  if (this != internal_default_instance()) delete subinterface_;
  if (this != internal_default_instance()) delete interface_;
}

void Qos_Interfaces_Interface_Output_InterfaceRef_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Output_InterfaceRef_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Output_InterfaceRef_Config& Qos_Interfaces_Interface_Output_InterfaceRef_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_InterfaceRef_Config();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Output_InterfaceRef_Config* Qos_Interfaces_Interface_Output_InterfaceRef_Config::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Output_InterfaceRef_Config* n = new Qos_Interfaces_Interface_Output_InterfaceRef_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Output_InterfaceRef_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && subinterface_ != NULL) {
    delete subinterface_;
  }
  subinterface_ = NULL;
  if (GetArenaNoVirtual() == NULL && interface_ != NULL) {
    delete interface_;
  }
  interface_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Output_InterfaceRef_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2810813714u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue subinterface = 18610174 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref/config/subinterface"];
      case 18610174: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 148881394 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_subinterface()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue interface = 351351714 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref/config/interface"];
      case 351351714: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 2810813714 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_interface()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.Config)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Output_InterfaceRef_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue subinterface = 18610174 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref/config/subinterface"];
  if (this->has_subinterface()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18610174, *this->subinterface_, output);
  }

  // .ywrapper.StringValue interface = 351351714 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref/config/interface"];
  if (this->has_interface()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      351351714, *this->interface_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.Config)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Output_InterfaceRef_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue subinterface = 18610174 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref/config/subinterface"];
  if (this->has_subinterface()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18610174, *this->subinterface_, deterministic, target);
  }

  // .ywrapper.StringValue interface = 351351714 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref/config/interface"];
  if (this->has_interface()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        351351714, *this->interface_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.Config)
  return target;
}

size_t Qos_Interfaces_Interface_Output_InterfaceRef_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue subinterface = 18610174 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref/config/subinterface"];
  if (this->has_subinterface()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->subinterface_);
  }

  // .ywrapper.StringValue interface = 351351714 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref/config/interface"];
  if (this->has_interface()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->interface_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Output_InterfaceRef_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Output_InterfaceRef_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Output_InterfaceRef_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.Config)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Output_InterfaceRef_Config::MergeFrom(const Qos_Interfaces_Interface_Output_InterfaceRef_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_subinterface()) {
    mutable_subinterface()->::ywrapper::UintValue::MergeFrom(from.subinterface());
  }
  if (from.has_interface()) {
    mutable_interface()->::ywrapper::StringValue::MergeFrom(from.interface());
  }
}

void Qos_Interfaces_Interface_Output_InterfaceRef_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Output_InterfaceRef_Config::CopyFrom(const Qos_Interfaces_Interface_Output_InterfaceRef_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Output_InterfaceRef_Config::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Output_InterfaceRef_Config::Swap(Qos_Interfaces_Interface_Output_InterfaceRef_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Output_InterfaceRef_Config::InternalSwap(Qos_Interfaces_Interface_Output_InterfaceRef_Config* other) {
  using std::swap;
  swap(subinterface_, other->subinterface_);
  swap(interface_, other->interface_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Output_InterfaceRef_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Output_InterfaceRef_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_InterfaceRef_State_default_instance_._instance.get_mutable()->interface_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_InterfaceRef_State_default_instance_._instance.get_mutable()->subinterface_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Qos_Interfaces_Interface_Output_InterfaceRef_State::clear_interface() {
  if (GetArenaNoVirtual() == NULL && interface_ != NULL) {
    delete interface_;
  }
  interface_ = NULL;
}
void Qos_Interfaces_Interface_Output_InterfaceRef_State::clear_subinterface() {
  if (GetArenaNoVirtual() == NULL && subinterface_ != NULL) {
    delete subinterface_;
  }
  subinterface_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Output_InterfaceRef_State::kInterfaceFieldNumber;
const int Qos_Interfaces_Interface_Output_InterfaceRef_State::kSubinterfaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Output_InterfaceRef_State::Qos_Interfaces_Interface_Output_InterfaceRef_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_InterfaceRef_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.State)
}
Qos_Interfaces_Interface_Output_InterfaceRef_State::Qos_Interfaces_Interface_Output_InterfaceRef_State(const Qos_Interfaces_Interface_Output_InterfaceRef_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_interface()) {
    interface_ = new ::ywrapper::StringValue(*from.interface_);
  } else {
    interface_ = NULL;
  }
  if (from.has_subinterface()) {
    subinterface_ = new ::ywrapper::UintValue(*from.subinterface_);
  } else {
    subinterface_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.State)
}

void Qos_Interfaces_Interface_Output_InterfaceRef_State::SharedCtor() {
  ::memset(&interface_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subinterface_) -
      reinterpret_cast<char*>(&interface_)) + sizeof(subinterface_));
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Output_InterfaceRef_State::~Qos_Interfaces_Interface_Output_InterfaceRef_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.State)
  SharedDtor();
}

void Qos_Interfaces_Interface_Output_InterfaceRef_State::SharedDtor() {
  if (this != internal_default_instance()) delete interface_;
  if (this != internal_default_instance()) delete subinterface_;
}

void Qos_Interfaces_Interface_Output_InterfaceRef_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Output_InterfaceRef_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Output_InterfaceRef_State& Qos_Interfaces_Interface_Output_InterfaceRef_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_InterfaceRef_State();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Output_InterfaceRef_State* Qos_Interfaces_Interface_Output_InterfaceRef_State::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Output_InterfaceRef_State* n = new Qos_Interfaces_Interface_Output_InterfaceRef_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Output_InterfaceRef_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && interface_ != NULL) {
    delete interface_;
  }
  interface_ = NULL;
  if (GetArenaNoVirtual() == NULL && subinterface_ != NULL) {
    delete subinterface_;
  }
  subinterface_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Output_InterfaceRef_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3349413514u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue interface = 287441027 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref/state/interface"];
      case 287441027: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 2299528218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_interface()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue subinterface = 418676689 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref/state/subinterface"];
      case 418676689: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 3349413514 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_subinterface()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.State)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Output_InterfaceRef_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue interface = 287441027 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref/state/interface"];
  if (this->has_interface()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      287441027, *this->interface_, output);
  }

  // .ywrapper.UintValue subinterface = 418676689 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref/state/subinterface"];
  if (this->has_subinterface()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      418676689, *this->subinterface_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.State)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Output_InterfaceRef_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue interface = 287441027 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref/state/interface"];
  if (this->has_interface()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        287441027, *this->interface_, deterministic, target);
  }

  // .ywrapper.UintValue subinterface = 418676689 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref/state/subinterface"];
  if (this->has_subinterface()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        418676689, *this->subinterface_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.State)
  return target;
}

size_t Qos_Interfaces_Interface_Output_InterfaceRef_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue interface = 287441027 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref/state/interface"];
  if (this->has_interface()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->interface_);
  }

  // .ywrapper.UintValue subinterface = 418676689 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref/state/subinterface"];
  if (this->has_subinterface()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->subinterface_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Output_InterfaceRef_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Output_InterfaceRef_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Output_InterfaceRef_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.State)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Output_InterfaceRef_State::MergeFrom(const Qos_Interfaces_Interface_Output_InterfaceRef_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_interface()) {
    mutable_interface()->::ywrapper::StringValue::MergeFrom(from.interface());
  }
  if (from.has_subinterface()) {
    mutable_subinterface()->::ywrapper::UintValue::MergeFrom(from.subinterface());
  }
}

void Qos_Interfaces_Interface_Output_InterfaceRef_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Output_InterfaceRef_State::CopyFrom(const Qos_Interfaces_Interface_Output_InterfaceRef_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Output_InterfaceRef_State::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Output_InterfaceRef_State::Swap(Qos_Interfaces_Interface_Output_InterfaceRef_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Output_InterfaceRef_State::InternalSwap(Qos_Interfaces_Interface_Output_InterfaceRef_State* other) {
  using std::swap;
  swap(interface_, other->interface_);
  swap(subinterface_, other->subinterface_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Output_InterfaceRef_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Output_InterfaceRef::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_InterfaceRef_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_Config*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_Config::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_InterfaceRef_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_State*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Output_InterfaceRef::kConfigFieldNumber;
const int Qos_Interfaces_Interface_Output_InterfaceRef::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Output_InterfaceRef::Qos_Interfaces_Interface_Output_InterfaceRef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_InterfaceRef();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef)
}
Qos_Interfaces_Interface_Output_InterfaceRef::Qos_Interfaces_Interface_Output_InterfaceRef(const Qos_Interfaces_Interface_Output_InterfaceRef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef)
}

void Qos_Interfaces_Interface_Output_InterfaceRef::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&state_)) + sizeof(config_));
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Output_InterfaceRef::~Qos_Interfaces_Interface_Output_InterfaceRef() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef)
  SharedDtor();
}

void Qos_Interfaces_Interface_Output_InterfaceRef::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete config_;
}

void Qos_Interfaces_Interface_Output_InterfaceRef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Output_InterfaceRef::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Output_InterfaceRef& Qos_Interfaces_Interface_Output_InterfaceRef::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_InterfaceRef();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Output_InterfaceRef* Qos_Interfaces_Interface_Output_InterfaceRef::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Output_InterfaceRef* n = new Qos_Interfaces_Interface_Output_InterfaceRef;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Output_InterfaceRef::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Output_InterfaceRef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3298795954u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.State state = 226867043 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref/state"];
      case 226867043: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 1814936346 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.Config config = 412349494 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref/config"];
      case 412349494: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 3298795954 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Output_InterfaceRef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.State state = 226867043 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      226867043, *this->state_, output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.Config config = 412349494 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      412349494, *this->config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Output_InterfaceRef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.State state = 226867043 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        226867043, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.Config config = 412349494 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        412349494, *this->config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef)
  return target;
}

size_t Qos_Interfaces_Interface_Output_InterfaceRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.State state = 226867043 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.Config config = 412349494 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Output_InterfaceRef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Output_InterfaceRef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Output_InterfaceRef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Output_InterfaceRef::MergeFrom(const Qos_Interfaces_Interface_Output_InterfaceRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_State::MergeFrom(from.state());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_Config::MergeFrom(from.config());
  }
}

void Qos_Interfaces_Interface_Output_InterfaceRef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Output_InterfaceRef::CopyFrom(const Qos_Interfaces_Interface_Output_InterfaceRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Output_InterfaceRef::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Output_InterfaceRef::Swap(Qos_Interfaces_Interface_Output_InterfaceRef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Output_InterfaceRef::InternalSwap(Qos_Interfaces_Interface_Output_InterfaceRef* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(config_, other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Output_InterfaceRef::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Output_Queues_Queue_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Queues_Queue_Config_default_instance_._instance.get_mutable()->name_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void Qos_Interfaces_Interface_Output_Queues_Queue_Config::clear_name() {
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Output_Queues_Queue_Config::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Output_Queues_Queue_Config::Qos_Interfaces_Interface_Output_Queues_Queue_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Queues_Queue_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.Config)
}
Qos_Interfaces_Interface_Output_Queues_Queue_Config::Qos_Interfaces_Interface_Output_Queues_Queue_Config(const Qos_Interfaces_Interface_Output_Queues_Queue_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_name()) {
    name_ = new ::ywrapper::StringValue(*from.name_);
  } else {
    name_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.Config)
}

void Qos_Interfaces_Interface_Output_Queues_Queue_Config::SharedCtor() {
  name_ = NULL;
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Output_Queues_Queue_Config::~Qos_Interfaces_Interface_Output_Queues_Queue_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.Config)
  SharedDtor();
}

void Qos_Interfaces_Interface_Output_Queues_Queue_Config::SharedDtor() {
  if (this != internal_default_instance()) delete name_;
}

void Qos_Interfaces_Interface_Output_Queues_Queue_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Output_Queues_Queue_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Output_Queues_Queue_Config& Qos_Interfaces_Interface_Output_Queues_Queue_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Queues_Queue_Config();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Output_Queues_Queue_Config* Qos_Interfaces_Interface_Output_Queues_Queue_Config::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Output_Queues_Queue_Config* n = new Qos_Interfaces_Interface_Output_Queues_Queue_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Output_Queues_Queue_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Output_Queues_Queue_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(1192016362u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue name = 149002045 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/config/name"];
      case 149002045: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 1192016362 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.Config)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Output_Queues_Queue_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue name = 149002045 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/config/name"];
  if (this->has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      149002045, *this->name_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.Config)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Output_Queues_Queue_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue name = 149002045 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/config/name"];
  if (this->has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        149002045, *this->name_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.Config)
  return target;
}

size_t Qos_Interfaces_Interface_Output_Queues_Queue_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue name = 149002045 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/config/name"];
  if (this->has_name()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->name_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Output_Queues_Queue_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Output_Queues_Queue_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Output_Queues_Queue_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.Config)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Output_Queues_Queue_Config::MergeFrom(const Qos_Interfaces_Interface_Output_Queues_Queue_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_name()) {
    mutable_name()->::ywrapper::StringValue::MergeFrom(from.name());
  }
}

void Qos_Interfaces_Interface_Output_Queues_Queue_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Output_Queues_Queue_Config::CopyFrom(const Qos_Interfaces_Interface_Output_Queues_Queue_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Output_Queues_Queue_Config::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Output_Queues_Queue_Config::Swap(Qos_Interfaces_Interface_Output_Queues_Queue_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Output_Queues_Queue_Config::InternalSwap(Qos_Interfaces_Interface_Output_Queues_Queue_Config* other) {
  using std::swap;
  swap(name_, other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Output_Queues_Queue_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Output_Queues_Queue_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Queues_Queue_State_default_instance_._instance.get_mutable()->avg_queue_len_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Queues_Queue_State_default_instance_._instance.get_mutable()->dropped_pkts_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Queues_Queue_State_default_instance_._instance.get_mutable()->max_queue_len_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Queues_Queue_State_default_instance_._instance.get_mutable()->name_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Queues_Queue_State_default_instance_._instance.get_mutable()->transmit_octets_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Queues_Queue_State_default_instance_._instance.get_mutable()->transmit_pkts_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Qos_Interfaces_Interface_Output_Queues_Queue_State::clear_avg_queue_len() {
  if (GetArenaNoVirtual() == NULL && avg_queue_len_ != NULL) {
    delete avg_queue_len_;
  }
  avg_queue_len_ = NULL;
}
void Qos_Interfaces_Interface_Output_Queues_Queue_State::clear_dropped_pkts() {
  if (GetArenaNoVirtual() == NULL && dropped_pkts_ != NULL) {
    delete dropped_pkts_;
  }
  dropped_pkts_ = NULL;
}
void Qos_Interfaces_Interface_Output_Queues_Queue_State::clear_max_queue_len() {
  if (GetArenaNoVirtual() == NULL && max_queue_len_ != NULL) {
    delete max_queue_len_;
  }
  max_queue_len_ = NULL;
}
void Qos_Interfaces_Interface_Output_Queues_Queue_State::clear_name() {
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
}
void Qos_Interfaces_Interface_Output_Queues_Queue_State::clear_transmit_octets() {
  if (GetArenaNoVirtual() == NULL && transmit_octets_ != NULL) {
    delete transmit_octets_;
  }
  transmit_octets_ = NULL;
}
void Qos_Interfaces_Interface_Output_Queues_Queue_State::clear_transmit_pkts() {
  if (GetArenaNoVirtual() == NULL && transmit_pkts_ != NULL) {
    delete transmit_pkts_;
  }
  transmit_pkts_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Output_Queues_Queue_State::kAvgQueueLenFieldNumber;
const int Qos_Interfaces_Interface_Output_Queues_Queue_State::kDroppedPktsFieldNumber;
const int Qos_Interfaces_Interface_Output_Queues_Queue_State::kMaxQueueLenFieldNumber;
const int Qos_Interfaces_Interface_Output_Queues_Queue_State::kNameFieldNumber;
const int Qos_Interfaces_Interface_Output_Queues_Queue_State::kTransmitOctetsFieldNumber;
const int Qos_Interfaces_Interface_Output_Queues_Queue_State::kTransmitPktsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Output_Queues_Queue_State::Qos_Interfaces_Interface_Output_Queues_Queue_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Queues_Queue_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State)
}
Qos_Interfaces_Interface_Output_Queues_Queue_State::Qos_Interfaces_Interface_Output_Queues_Queue_State(const Qos_Interfaces_Interface_Output_Queues_Queue_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_transmit_pkts()) {
    transmit_pkts_ = new ::ywrapper::UintValue(*from.transmit_pkts_);
  } else {
    transmit_pkts_ = NULL;
  }
  if (from.has_transmit_octets()) {
    transmit_octets_ = new ::ywrapper::UintValue(*from.transmit_octets_);
  } else {
    transmit_octets_ = NULL;
  }
  if (from.has_dropped_pkts()) {
    dropped_pkts_ = new ::ywrapper::UintValue(*from.dropped_pkts_);
  } else {
    dropped_pkts_ = NULL;
  }
  if (from.has_name()) {
    name_ = new ::ywrapper::StringValue(*from.name_);
  } else {
    name_ = NULL;
  }
  if (from.has_avg_queue_len()) {
    avg_queue_len_ = new ::ywrapper::UintValue(*from.avg_queue_len_);
  } else {
    avg_queue_len_ = NULL;
  }
  if (from.has_max_queue_len()) {
    max_queue_len_ = new ::ywrapper::UintValue(*from.max_queue_len_);
  } else {
    max_queue_len_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State)
}

void Qos_Interfaces_Interface_Output_Queues_Queue_State::SharedCtor() {
  ::memset(&transmit_pkts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_queue_len_) -
      reinterpret_cast<char*>(&transmit_pkts_)) + sizeof(max_queue_len_));
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Output_Queues_Queue_State::~Qos_Interfaces_Interface_Output_Queues_Queue_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State)
  SharedDtor();
}

void Qos_Interfaces_Interface_Output_Queues_Queue_State::SharedDtor() {
  if (this != internal_default_instance()) delete transmit_pkts_;
  if (this != internal_default_instance()) delete transmit_octets_;
  if (this != internal_default_instance()) delete dropped_pkts_;
  if (this != internal_default_instance()) delete name_;
  if (this != internal_default_instance()) delete avg_queue_len_;
  if (this != internal_default_instance()) delete max_queue_len_;
}

void Qos_Interfaces_Interface_Output_Queues_Queue_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Output_Queues_Queue_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Output_Queues_Queue_State& Qos_Interfaces_Interface_Output_Queues_Queue_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Queues_Queue_State();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Output_Queues_Queue_State* Qos_Interfaces_Interface_Output_Queues_Queue_State::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Output_Queues_Queue_State* n = new Qos_Interfaces_Interface_Output_Queues_Queue_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Output_Queues_Queue_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && transmit_pkts_ != NULL) {
    delete transmit_pkts_;
  }
  transmit_pkts_ = NULL;
  if (GetArenaNoVirtual() == NULL && transmit_octets_ != NULL) {
    delete transmit_octets_;
  }
  transmit_octets_ = NULL;
  if (GetArenaNoVirtual() == NULL && dropped_pkts_ != NULL) {
    delete dropped_pkts_;
  }
  dropped_pkts_ = NULL;
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
  if (GetArenaNoVirtual() == NULL && avg_queue_len_ != NULL) {
    delete avg_queue_len_;
  }
  avg_queue_len_ = NULL;
  if (GetArenaNoVirtual() == NULL && max_queue_len_ != NULL) {
    delete max_queue_len_;
  }
  max_queue_len_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Output_Queues_Queue_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4078761098u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue transmit_pkts = 20090310 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state/transmit-pkts"];
      case 20090310: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 160722482 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transmit_pkts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue transmit_octets = 117378910 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state/transmit-octets"];
      case 117378910: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 939031282 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transmit_octets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue dropped_pkts = 358084770 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state/dropped-pkts"];
      case 358084770: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 2864678162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dropped_pkts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue name = 422045572 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state/name"];
      case 422045572: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 3376364578 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue avg_queue_len = 497534235 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state/avg-queue-len"];
      case 497534235: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 3980273882 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_avg_queue_len()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue max_queue_len = 509845137 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state/max-queue-len"];
      case 509845137: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 4078761098 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_max_queue_len()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Output_Queues_Queue_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue transmit_pkts = 20090310 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state/transmit-pkts"];
  if (this->has_transmit_pkts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20090310, *this->transmit_pkts_, output);
  }

  // .ywrapper.UintValue transmit_octets = 117378910 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state/transmit-octets"];
  if (this->has_transmit_octets()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      117378910, *this->transmit_octets_, output);
  }

  // .ywrapper.UintValue dropped_pkts = 358084770 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state/dropped-pkts"];
  if (this->has_dropped_pkts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      358084770, *this->dropped_pkts_, output);
  }

  // .ywrapper.StringValue name = 422045572 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state/name"];
  if (this->has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      422045572, *this->name_, output);
  }

  // .ywrapper.UintValue avg_queue_len = 497534235 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state/avg-queue-len"];
  if (this->has_avg_queue_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      497534235, *this->avg_queue_len_, output);
  }

  // .ywrapper.UintValue max_queue_len = 509845137 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state/max-queue-len"];
  if (this->has_max_queue_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      509845137, *this->max_queue_len_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Output_Queues_Queue_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue transmit_pkts = 20090310 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state/transmit-pkts"];
  if (this->has_transmit_pkts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20090310, *this->transmit_pkts_, deterministic, target);
  }

  // .ywrapper.UintValue transmit_octets = 117378910 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state/transmit-octets"];
  if (this->has_transmit_octets()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        117378910, *this->transmit_octets_, deterministic, target);
  }

  // .ywrapper.UintValue dropped_pkts = 358084770 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state/dropped-pkts"];
  if (this->has_dropped_pkts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        358084770, *this->dropped_pkts_, deterministic, target);
  }

  // .ywrapper.StringValue name = 422045572 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state/name"];
  if (this->has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        422045572, *this->name_, deterministic, target);
  }

  // .ywrapper.UintValue avg_queue_len = 497534235 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state/avg-queue-len"];
  if (this->has_avg_queue_len()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        497534235, *this->avg_queue_len_, deterministic, target);
  }

  // .ywrapper.UintValue max_queue_len = 509845137 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state/max-queue-len"];
  if (this->has_max_queue_len()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        509845137, *this->max_queue_len_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State)
  return target;
}

size_t Qos_Interfaces_Interface_Output_Queues_Queue_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue transmit_pkts = 20090310 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state/transmit-pkts"];
  if (this->has_transmit_pkts()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->transmit_pkts_);
  }

  // .ywrapper.UintValue transmit_octets = 117378910 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state/transmit-octets"];
  if (this->has_transmit_octets()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->transmit_octets_);
  }

  // .ywrapper.UintValue dropped_pkts = 358084770 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state/dropped-pkts"];
  if (this->has_dropped_pkts()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dropped_pkts_);
  }

  // .ywrapper.StringValue name = 422045572 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state/name"];
  if (this->has_name()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->name_);
  }

  // .ywrapper.UintValue avg_queue_len = 497534235 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state/avg-queue-len"];
  if (this->has_avg_queue_len()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->avg_queue_len_);
  }

  // .ywrapper.UintValue max_queue_len = 509845137 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state/max-queue-len"];
  if (this->has_max_queue_len()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->max_queue_len_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Output_Queues_Queue_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Output_Queues_Queue_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Output_Queues_Queue_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Output_Queues_Queue_State::MergeFrom(const Qos_Interfaces_Interface_Output_Queues_Queue_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_transmit_pkts()) {
    mutable_transmit_pkts()->::ywrapper::UintValue::MergeFrom(from.transmit_pkts());
  }
  if (from.has_transmit_octets()) {
    mutable_transmit_octets()->::ywrapper::UintValue::MergeFrom(from.transmit_octets());
  }
  if (from.has_dropped_pkts()) {
    mutable_dropped_pkts()->::ywrapper::UintValue::MergeFrom(from.dropped_pkts());
  }
  if (from.has_name()) {
    mutable_name()->::ywrapper::StringValue::MergeFrom(from.name());
  }
  if (from.has_avg_queue_len()) {
    mutable_avg_queue_len()->::ywrapper::UintValue::MergeFrom(from.avg_queue_len());
  }
  if (from.has_max_queue_len()) {
    mutable_max_queue_len()->::ywrapper::UintValue::MergeFrom(from.max_queue_len());
  }
}

void Qos_Interfaces_Interface_Output_Queues_Queue_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Output_Queues_Queue_State::CopyFrom(const Qos_Interfaces_Interface_Output_Queues_Queue_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Output_Queues_Queue_State::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Output_Queues_Queue_State::Swap(Qos_Interfaces_Interface_Output_Queues_Queue_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Output_Queues_Queue_State::InternalSwap(Qos_Interfaces_Interface_Output_Queues_Queue_State* other) {
  using std::swap;
  swap(transmit_pkts_, other->transmit_pkts_);
  swap(transmit_octets_, other->transmit_octets_);
  swap(dropped_pkts_, other->dropped_pkts_);
  swap(name_, other->name_);
  swap(avg_queue_len_, other->avg_queue_len_);
  swap(max_queue_len_, other->max_queue_len_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Output_Queues_Queue_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Output_Queues_Queue::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Queues_Queue_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_Config*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_Config::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Queues_Queue_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_State*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Output_Queues_Queue::kConfigFieldNumber;
const int Qos_Interfaces_Interface_Output_Queues_Queue::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Output_Queues_Queue::Qos_Interfaces_Interface_Output_Queues_Queue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Queues_Queue();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue)
}
Qos_Interfaces_Interface_Output_Queues_Queue::Qos_Interfaces_Interface_Output_Queues_Queue(const Qos_Interfaces_Interface_Output_Queues_Queue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue)
}

void Qos_Interfaces_Interface_Output_Queues_Queue::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&state_)) + sizeof(config_));
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Output_Queues_Queue::~Qos_Interfaces_Interface_Output_Queues_Queue() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue)
  SharedDtor();
}

void Qos_Interfaces_Interface_Output_Queues_Queue::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete config_;
}

void Qos_Interfaces_Interface_Output_Queues_Queue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Output_Queues_Queue::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Output_Queues_Queue& Qos_Interfaces_Interface_Output_Queues_Queue::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Queues_Queue();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Output_Queues_Queue* Qos_Interfaces_Interface_Output_Queues_Queue::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Output_Queues_Queue* n = new Qos_Interfaces_Interface_Output_Queues_Queue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Output_Queues_Queue::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Output_Queues_Queue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3929078858u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State state = 122510046 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state"];
      case 122510046: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 980080370 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.Config config = 491134857 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/config"];
      case 491134857: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 3929078858 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Output_Queues_Queue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State state = 122510046 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      122510046, *this->state_, output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.Config config = 491134857 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      491134857, *this->config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Output_Queues_Queue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State state = 122510046 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        122510046, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.Config config = 491134857 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        491134857, *this->config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue)
  return target;
}

size_t Qos_Interfaces_Interface_Output_Queues_Queue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State state = 122510046 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.Config config = 491134857 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Output_Queues_Queue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Output_Queues_Queue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Output_Queues_Queue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Output_Queues_Queue::MergeFrom(const Qos_Interfaces_Interface_Output_Queues_Queue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_State::MergeFrom(from.state());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_Config::MergeFrom(from.config());
  }
}

void Qos_Interfaces_Interface_Output_Queues_Queue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Output_Queues_Queue::CopyFrom(const Qos_Interfaces_Interface_Output_Queues_Queue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Output_Queues_Queue::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Output_Queues_Queue::Swap(Qos_Interfaces_Interface_Output_Queues_Queue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Output_Queues_Queue::InternalSwap(Qos_Interfaces_Interface_Output_Queues_Queue* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(config_, other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Output_Queues_Queue::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Output_Queues_QueueKey::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Queues_QueueKey_default_instance_._instance.get_mutable()->queue_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Output_Queues_QueueKey::kNameFieldNumber;
const int Qos_Interfaces_Interface_Output_Queues_QueueKey::kQueueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Output_Queues_QueueKey::Qos_Interfaces_Interface_Output_Queues_QueueKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Queues_QueueKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey)
}
Qos_Interfaces_Interface_Output_Queues_QueueKey::Qos_Interfaces_Interface_Output_Queues_QueueKey(const Qos_Interfaces_Interface_Output_Queues_QueueKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_queue()) {
    queue_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue(*from.queue_);
  } else {
    queue_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey)
}

void Qos_Interfaces_Interface_Output_Queues_QueueKey::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queue_ = NULL;
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Output_Queues_QueueKey::~Qos_Interfaces_Interface_Output_Queues_QueueKey() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey)
  SharedDtor();
}

void Qos_Interfaces_Interface_Output_Queues_QueueKey::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete queue_;
}

void Qos_Interfaces_Interface_Output_Queues_QueueKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Output_Queues_QueueKey::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Output_Queues_QueueKey& Qos_Interfaces_Interface_Output_Queues_QueueKey::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Queues_QueueKey();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Output_Queues_QueueKey* Qos_Interfaces_Interface_Output_Queues_QueueKey::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Output_Queues_QueueKey* n = new Qos_Interfaces_Interface_Output_Queues_QueueKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Output_Queues_QueueKey::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && queue_ != NULL) {
    delete queue_;
  }
  queue_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Output_Queues_QueueKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/name"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue queue = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_queue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Output_Queues_QueueKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/name"];
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue queue = 2;
  if (this->has_queue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->queue_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Output_Queues_QueueKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/name"];
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue queue = 2;
  if (this->has_queue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->queue_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey)
  return target;
}

size_t Qos_Interfaces_Interface_Output_Queues_QueueKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/name"];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue queue = 2;
  if (this->has_queue()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->queue_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Output_Queues_QueueKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Output_Queues_QueueKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Output_Queues_QueueKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Output_Queues_QueueKey::MergeFrom(const Qos_Interfaces_Interface_Output_Queues_QueueKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_queue()) {
    mutable_queue()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue::MergeFrom(from.queue());
  }
}

void Qos_Interfaces_Interface_Output_Queues_QueueKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Output_Queues_QueueKey::CopyFrom(const Qos_Interfaces_Interface_Output_Queues_QueueKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Output_Queues_QueueKey::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Output_Queues_QueueKey::Swap(Qos_Interfaces_Interface_Output_Queues_QueueKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Output_Queues_QueueKey::InternalSwap(Qos_Interfaces_Interface_Output_Queues_QueueKey* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(queue_, other->queue_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Output_Queues_QueueKey::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Output_Queues::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Output_Queues::kQueueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Output_Queues::Qos_Interfaces_Interface_Output_Queues()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Queues();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues)
}
Qos_Interfaces_Interface_Output_Queues::Qos_Interfaces_Interface_Output_Queues(const Qos_Interfaces_Interface_Output_Queues& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      queue_(from.queue_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues)
}

void Qos_Interfaces_Interface_Output_Queues::SharedCtor() {
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Output_Queues::~Qos_Interfaces_Interface_Output_Queues() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues)
  SharedDtor();
}

void Qos_Interfaces_Interface_Output_Queues::SharedDtor() {
}

void Qos_Interfaces_Interface_Output_Queues::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Output_Queues::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Output_Queues& Qos_Interfaces_Interface_Output_Queues::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Queues();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Output_Queues* Qos_Interfaces_Interface_Output_Queues::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Output_Queues* n = new Qos_Interfaces_Interface_Output_Queues;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Output_Queues::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queue_.Clear();
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Output_Queues::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2534148898u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey queue = 316768612 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue"];
      case 316768612: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 2534148898 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_queue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Output_Queues::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey queue = 316768612 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->queue_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      316768612, this->queue(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Output_Queues::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey queue = 316768612 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->queue_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        316768612, this->queue(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues)
  return target;
}

size_t Qos_Interfaces_Interface_Output_Queues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey queue = 316768612 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue"];
  {
    unsigned int count = static_cast<unsigned int>(this->queue_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->queue(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Output_Queues::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Output_Queues* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Output_Queues>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Output_Queues::MergeFrom(const Qos_Interfaces_Interface_Output_Queues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  queue_.MergeFrom(from.queue_);
}

void Qos_Interfaces_Interface_Output_Queues::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Output_Queues::CopyFrom(const Qos_Interfaces_Interface_Output_Queues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Output_Queues::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Output_Queues::Swap(Qos_Interfaces_Interface_Output_Queues* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Output_Queues::InternalSwap(Qos_Interfaces_Interface_Output_Queues* other) {
  using std::swap;
  queue_.InternalSwap(&other->queue_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Output_Queues::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_SchedulerPolicy_Config_default_instance_._instance.get_mutable()->name_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void Qos_Interfaces_Interface_Output_SchedulerPolicy_Config::clear_name() {
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Output_SchedulerPolicy_Config::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Output_SchedulerPolicy_Config::Qos_Interfaces_Interface_Output_SchedulerPolicy_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Config)
}
Qos_Interfaces_Interface_Output_SchedulerPolicy_Config::Qos_Interfaces_Interface_Output_SchedulerPolicy_Config(const Qos_Interfaces_Interface_Output_SchedulerPolicy_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_name()) {
    name_ = new ::ywrapper::StringValue(*from.name_);
  } else {
    name_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Config)
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Config::SharedCtor() {
  name_ = NULL;
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Output_SchedulerPolicy_Config::~Qos_Interfaces_Interface_Output_SchedulerPolicy_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Config)
  SharedDtor();
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Config::SharedDtor() {
  if (this != internal_default_instance()) delete name_;
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Output_SchedulerPolicy_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Output_SchedulerPolicy_Config& Qos_Interfaces_Interface_Output_SchedulerPolicy_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Config();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Output_SchedulerPolicy_Config* Qos_Interfaces_Interface_Output_SchedulerPolicy_Config::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Output_SchedulerPolicy_Config* n = new Qos_Interfaces_Interface_Output_SchedulerPolicy_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Output_SchedulerPolicy_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(256383802u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue name = 32047975 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/config/name"];
      case 32047975: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 256383802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Config)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue name = 32047975 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/config/name"];
  if (this->has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32047975, *this->name_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Config)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Output_SchedulerPolicy_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue name = 32047975 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/config/name"];
  if (this->has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        32047975, *this->name_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Config)
  return target;
}

size_t Qos_Interfaces_Interface_Output_SchedulerPolicy_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue name = 32047975 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/config/name"];
  if (this->has_name()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->name_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Output_SchedulerPolicy_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Output_SchedulerPolicy_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Config)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Config::MergeFrom(const Qos_Interfaces_Interface_Output_SchedulerPolicy_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_name()) {
    mutable_name()->::ywrapper::StringValue::MergeFrom(from.name());
  }
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Config::CopyFrom(const Qos_Interfaces_Interface_Output_SchedulerPolicy_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Output_SchedulerPolicy_Config::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Config::Swap(Qos_Interfaces_Interface_Output_SchedulerPolicy_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Output_SchedulerPolicy_Config::InternalSwap(Qos_Interfaces_Interface_Output_SchedulerPolicy_Config* other) {
  using std::swap;
  swap(name_, other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Output_SchedulerPolicy_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State_default_instance_._instance.get_mutable()->conforming_octets_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State_default_instance_._instance.get_mutable()->conforming_pkts_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State_default_instance_._instance.get_mutable()->exceeding_octets_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State_default_instance_._instance.get_mutable()->exceeding_pkts_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State_default_instance_._instance.get_mutable()->sequence_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State_default_instance_._instance.get_mutable()->violating_octets_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State_default_instance_._instance.get_mutable()->violating_pkts_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::clear_conforming_octets() {
  if (GetArenaNoVirtual() == NULL && conforming_octets_ != NULL) {
    delete conforming_octets_;
  }
  conforming_octets_ = NULL;
}
void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::clear_conforming_pkts() {
  if (GetArenaNoVirtual() == NULL && conforming_pkts_ != NULL) {
    delete conforming_pkts_;
  }
  conforming_pkts_ = NULL;
}
void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::clear_exceeding_octets() {
  if (GetArenaNoVirtual() == NULL && exceeding_octets_ != NULL) {
    delete exceeding_octets_;
  }
  exceeding_octets_ = NULL;
}
void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::clear_exceeding_pkts() {
  if (GetArenaNoVirtual() == NULL && exceeding_pkts_ != NULL) {
    delete exceeding_pkts_;
  }
  exceeding_pkts_ = NULL;
}
void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::clear_sequence() {
  if (GetArenaNoVirtual() == NULL && sequence_ != NULL) {
    delete sequence_;
  }
  sequence_ = NULL;
}
void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::clear_violating_octets() {
  if (GetArenaNoVirtual() == NULL && violating_octets_ != NULL) {
    delete violating_octets_;
  }
  violating_octets_ = NULL;
}
void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::clear_violating_pkts() {
  if (GetArenaNoVirtual() == NULL && violating_pkts_ != NULL) {
    delete violating_pkts_;
  }
  violating_pkts_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::kConformingOctetsFieldNumber;
const int Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::kConformingPktsFieldNumber;
const int Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::kExceedingOctetsFieldNumber;
const int Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::kExceedingPktsFieldNumber;
const int Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::kSequenceFieldNumber;
const int Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::kViolatingOctetsFieldNumber;
const int Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::kViolatingPktsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State)
}
Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State(const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_exceeding_octets()) {
    exceeding_octets_ = new ::ywrapper::UintValue(*from.exceeding_octets_);
  } else {
    exceeding_octets_ = NULL;
  }
  if (from.has_exceeding_pkts()) {
    exceeding_pkts_ = new ::ywrapper::UintValue(*from.exceeding_pkts_);
  } else {
    exceeding_pkts_ = NULL;
  }
  if (from.has_conforming_octets()) {
    conforming_octets_ = new ::ywrapper::UintValue(*from.conforming_octets_);
  } else {
    conforming_octets_ = NULL;
  }
  if (from.has_violating_octets()) {
    violating_octets_ = new ::ywrapper::UintValue(*from.violating_octets_);
  } else {
    violating_octets_ = NULL;
  }
  if (from.has_sequence()) {
    sequence_ = new ::ywrapper::UintValue(*from.sequence_);
  } else {
    sequence_ = NULL;
  }
  if (from.has_violating_pkts()) {
    violating_pkts_ = new ::ywrapper::UintValue(*from.violating_pkts_);
  } else {
    violating_pkts_ = NULL;
  }
  if (from.has_conforming_pkts()) {
    conforming_pkts_ = new ::ywrapper::UintValue(*from.conforming_pkts_);
  } else {
    conforming_pkts_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State)
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::SharedCtor() {
  ::memset(&exceeding_octets_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&conforming_pkts_) -
      reinterpret_cast<char*>(&exceeding_octets_)) + sizeof(conforming_pkts_));
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::~Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State)
  SharedDtor();
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::SharedDtor() {
  if (this != internal_default_instance()) delete exceeding_octets_;
  if (this != internal_default_instance()) delete exceeding_pkts_;
  if (this != internal_default_instance()) delete conforming_octets_;
  if (this != internal_default_instance()) delete violating_octets_;
  if (this != internal_default_instance()) delete sequence_;
  if (this != internal_default_instance()) delete violating_pkts_;
  if (this != internal_default_instance()) delete conforming_pkts_;
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State& Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State* Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State* n = new Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && exceeding_octets_ != NULL) {
    delete exceeding_octets_;
  }
  exceeding_octets_ = NULL;
  if (GetArenaNoVirtual() == NULL && exceeding_pkts_ != NULL) {
    delete exceeding_pkts_;
  }
  exceeding_pkts_ = NULL;
  if (GetArenaNoVirtual() == NULL && conforming_octets_ != NULL) {
    delete conforming_octets_;
  }
  conforming_octets_ = NULL;
  if (GetArenaNoVirtual() == NULL && violating_octets_ != NULL) {
    delete violating_octets_;
  }
  violating_octets_ = NULL;
  if (GetArenaNoVirtual() == NULL && sequence_ != NULL) {
    delete sequence_;
  }
  sequence_ = NULL;
  if (GetArenaNoVirtual() == NULL && violating_pkts_ != NULL) {
    delete violating_pkts_;
  }
  violating_pkts_ = NULL;
  if (GetArenaNoVirtual() == NULL && conforming_pkts_ != NULL) {
    delete conforming_pkts_;
  }
  conforming_pkts_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3079115146u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue exceeding_octets = 127842319 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-octets"];
      case 127842319: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 1022738554 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_exceeding_octets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue exceeding_pkts = 174504655 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-pkts"];
      case 174504655: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 1396037242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_exceeding_pkts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue conforming_octets = 190363557 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-octets"];
      case 190363557: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 1522908458 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_conforming_octets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue violating_octets = 334250126 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-octets"];
      case 334250126: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 2674001010 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_violating_octets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue sequence = 379118145 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/sequence"];
      case 379118145: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 3032945162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sequence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue violating_pkts = 380540342 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-pkts"];
      case 380540342: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 3044322738 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_violating_pkts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue conforming_pkts = 384889393 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-pkts"];
      case 384889393: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 3079115146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_conforming_pkts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue exceeding_octets = 127842319 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-octets"];
  if (this->has_exceeding_octets()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      127842319, *this->exceeding_octets_, output);
  }

  // .ywrapper.UintValue exceeding_pkts = 174504655 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-pkts"];
  if (this->has_exceeding_pkts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      174504655, *this->exceeding_pkts_, output);
  }

  // .ywrapper.UintValue conforming_octets = 190363557 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-octets"];
  if (this->has_conforming_octets()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      190363557, *this->conforming_octets_, output);
  }

  // .ywrapper.UintValue violating_octets = 334250126 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-octets"];
  if (this->has_violating_octets()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      334250126, *this->violating_octets_, output);
  }

  // .ywrapper.UintValue sequence = 379118145 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/sequence"];
  if (this->has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      379118145, *this->sequence_, output);
  }

  // .ywrapper.UintValue violating_pkts = 380540342 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-pkts"];
  if (this->has_violating_pkts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      380540342, *this->violating_pkts_, output);
  }

  // .ywrapper.UintValue conforming_pkts = 384889393 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-pkts"];
  if (this->has_conforming_pkts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      384889393, *this->conforming_pkts_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue exceeding_octets = 127842319 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-octets"];
  if (this->has_exceeding_octets()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        127842319, *this->exceeding_octets_, deterministic, target);
  }

  // .ywrapper.UintValue exceeding_pkts = 174504655 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-pkts"];
  if (this->has_exceeding_pkts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        174504655, *this->exceeding_pkts_, deterministic, target);
  }

  // .ywrapper.UintValue conforming_octets = 190363557 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-octets"];
  if (this->has_conforming_octets()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        190363557, *this->conforming_octets_, deterministic, target);
  }

  // .ywrapper.UintValue violating_octets = 334250126 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-octets"];
  if (this->has_violating_octets()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        334250126, *this->violating_octets_, deterministic, target);
  }

  // .ywrapper.UintValue sequence = 379118145 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/sequence"];
  if (this->has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        379118145, *this->sequence_, deterministic, target);
  }

  // .ywrapper.UintValue violating_pkts = 380540342 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-pkts"];
  if (this->has_violating_pkts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        380540342, *this->violating_pkts_, deterministic, target);
  }

  // .ywrapper.UintValue conforming_pkts = 384889393 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-pkts"];
  if (this->has_conforming_pkts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        384889393, *this->conforming_pkts_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State)
  return target;
}

size_t Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue exceeding_octets = 127842319 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-octets"];
  if (this->has_exceeding_octets()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->exceeding_octets_);
  }

  // .ywrapper.UintValue exceeding_pkts = 174504655 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-pkts"];
  if (this->has_exceeding_pkts()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->exceeding_pkts_);
  }

  // .ywrapper.UintValue conforming_octets = 190363557 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-octets"];
  if (this->has_conforming_octets()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->conforming_octets_);
  }

  // .ywrapper.UintValue violating_octets = 334250126 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-octets"];
  if (this->has_violating_octets()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->violating_octets_);
  }

  // .ywrapper.UintValue sequence = 379118145 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/sequence"];
  if (this->has_sequence()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sequence_);
  }

  // .ywrapper.UintValue violating_pkts = 380540342 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-pkts"];
  if (this->has_violating_pkts()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->violating_pkts_);
  }

  // .ywrapper.UintValue conforming_pkts = 384889393 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-pkts"];
  if (this->has_conforming_pkts()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->conforming_pkts_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::MergeFrom(const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_exceeding_octets()) {
    mutable_exceeding_octets()->::ywrapper::UintValue::MergeFrom(from.exceeding_octets());
  }
  if (from.has_exceeding_pkts()) {
    mutable_exceeding_pkts()->::ywrapper::UintValue::MergeFrom(from.exceeding_pkts());
  }
  if (from.has_conforming_octets()) {
    mutable_conforming_octets()->::ywrapper::UintValue::MergeFrom(from.conforming_octets());
  }
  if (from.has_violating_octets()) {
    mutable_violating_octets()->::ywrapper::UintValue::MergeFrom(from.violating_octets());
  }
  if (from.has_sequence()) {
    mutable_sequence()->::ywrapper::UintValue::MergeFrom(from.sequence());
  }
  if (from.has_violating_pkts()) {
    mutable_violating_pkts()->::ywrapper::UintValue::MergeFrom(from.violating_pkts());
  }
  if (from.has_conforming_pkts()) {
    mutable_conforming_pkts()->::ywrapper::UintValue::MergeFrom(from.conforming_pkts());
  }
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::CopyFrom(const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::Swap(Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::InternalSwap(Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State* other) {
  using std::swap;
  swap(exceeding_octets_, other->exceeding_octets_);
  swap(exceeding_pkts_, other->exceeding_pkts_);
  swap(conforming_octets_, other->conforming_octets_);
  swap(violating_octets_, other->violating_octets_);
  swap(sequence_, other->sequence_);
  swap(violating_pkts_, other->violating_pkts_);
  swap(conforming_pkts_, other->conforming_pkts_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler)
}
Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler(const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler)
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler::SharedCtor() {
  state_ = NULL;
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler::~Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler)
  SharedDtor();
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler& Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler* Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler* n = new Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2816459098u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State state = 352057387 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state"];
      case 352057387: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 2816459098 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State state = 352057387 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      352057387, *this->state_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State state = 352057387 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        352057387, *this->state_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler)
  return target;
}

size_t Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State state = 352057387 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler::MergeFrom(const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::MergeFrom(from.state());
  }
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler::CopyFrom(const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler::Swap(Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler::InternalSwap(Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler* other) {
  using std::swap;
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey_default_instance_._instance.get_mutable()->scheduler_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey::kSequenceFieldNumber;
const int Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey::kSchedulerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.SchedulerKey)
}
Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey(const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_scheduler()) {
    scheduler_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler(*from.scheduler_);
  } else {
    scheduler_ = NULL;
  }
  sequence_ = from.sequence_;
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.SchedulerKey)
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey::SharedCtor() {
  ::memset(&scheduler_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&scheduler_)) + sizeof(sequence_));
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey::~Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.SchedulerKey)
  SharedDtor();
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey::SharedDtor() {
  if (this != internal_default_instance()) delete scheduler_;
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey& Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey* Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey* n = new Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.SchedulerKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && scheduler_ != NULL) {
    delete scheduler_;
  }
  scheduler_ = NULL;
  sequence_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.SchedulerKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 sequence = 1 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/sequence"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler scheduler = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scheduler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.SchedulerKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.SchedulerKey)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.SchedulerKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sequence = 1 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/sequence"];
  if (this->sequence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sequence(), output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler scheduler = 2;
  if (this->has_scheduler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->scheduler_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.SchedulerKey)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.SchedulerKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sequence = 1 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/sequence"];
  if (this->sequence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sequence(), target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler scheduler = 2;
  if (this->has_scheduler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->scheduler_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.SchedulerKey)
  return target;
}

size_t Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.SchedulerKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler scheduler = 2;
  if (this->has_scheduler()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->scheduler_);
  }

  // uint64 sequence = 1 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/sequence"];
  if (this->sequence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sequence());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.SchedulerKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.SchedulerKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.SchedulerKey)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey::MergeFrom(const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.SchedulerKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scheduler()) {
    mutable_scheduler()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler::MergeFrom(from.scheduler());
  }
  if (from.sequence() != 0) {
    set_sequence(from.sequence());
  }
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.SchedulerKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey::CopyFrom(const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.SchedulerKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey::Swap(Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey::InternalSwap(Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey* other) {
  using std::swap;
  swap(scheduler_, other->scheduler_);
  swap(sequence_, other->sequence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers::kSchedulerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers)
}
Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers(const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      scheduler_(from.scheduler_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers)
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers::SharedCtor() {
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers::~Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers)
  SharedDtor();
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers::SharedDtor() {
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers& Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers* Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers* n = new Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scheduler_.Clear();
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(1671086666u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.SchedulerKey scheduler = 208885833 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler"];
      case 208885833: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 1671086666 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_scheduler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.SchedulerKey scheduler = 208885833 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->scheduler_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      208885833, this->scheduler(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.SchedulerKey scheduler = 208885833 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->scheduler_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        208885833, this->scheduler(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers)
  return target;
}

size_t Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.SchedulerKey scheduler = 208885833 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler"];
  {
    unsigned int count = static_cast<unsigned int>(this->scheduler_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->scheduler(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers::MergeFrom(const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scheduler_.MergeFrom(from.scheduler_);
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers::CopyFrom(const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers::Swap(Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers::InternalSwap(Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers* other) {
  using std::swap;
  scheduler_.InternalSwap(&other->scheduler_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Output_SchedulerPolicy_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_SchedulerPolicy_State_default_instance_._instance.get_mutable()->name_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void Qos_Interfaces_Interface_Output_SchedulerPolicy_State::clear_name() {
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Output_SchedulerPolicy_State::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Output_SchedulerPolicy_State::Qos_Interfaces_Interface_Output_SchedulerPolicy_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.State)
}
Qos_Interfaces_Interface_Output_SchedulerPolicy_State::Qos_Interfaces_Interface_Output_SchedulerPolicy_State(const Qos_Interfaces_Interface_Output_SchedulerPolicy_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_name()) {
    name_ = new ::ywrapper::StringValue(*from.name_);
  } else {
    name_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.State)
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_State::SharedCtor() {
  name_ = NULL;
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Output_SchedulerPolicy_State::~Qos_Interfaces_Interface_Output_SchedulerPolicy_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.State)
  SharedDtor();
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_State::SharedDtor() {
  if (this != internal_default_instance()) delete name_;
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Output_SchedulerPolicy_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Output_SchedulerPolicy_State& Qos_Interfaces_Interface_Output_SchedulerPolicy_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_State();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Output_SchedulerPolicy_State* Qos_Interfaces_Interface_Output_SchedulerPolicy_State::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Output_SchedulerPolicy_State* n = new Qos_Interfaces_Interface_Output_SchedulerPolicy_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Output_SchedulerPolicy_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(1052090322u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue name = 131511290 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/state/name"];
      case 131511290: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 1052090322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.State)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue name = 131511290 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/state/name"];
  if (this->has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      131511290, *this->name_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.State)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Output_SchedulerPolicy_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue name = 131511290 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/state/name"];
  if (this->has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        131511290, *this->name_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.State)
  return target;
}

size_t Qos_Interfaces_Interface_Output_SchedulerPolicy_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue name = 131511290 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/state/name"];
  if (this->has_name()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->name_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Output_SchedulerPolicy_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Output_SchedulerPolicy_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.State)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_State::MergeFrom(const Qos_Interfaces_Interface_Output_SchedulerPolicy_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_name()) {
    mutable_name()->::ywrapper::StringValue::MergeFrom(from.name());
  }
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_State::CopyFrom(const Qos_Interfaces_Interface_Output_SchedulerPolicy_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Output_SchedulerPolicy_State::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy_State::Swap(Qos_Interfaces_Interface_Output_SchedulerPolicy_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Output_SchedulerPolicy_State::InternalSwap(Qos_Interfaces_Interface_Output_SchedulerPolicy_State* other) {
  using std::swap;
  swap(name_, other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Output_SchedulerPolicy_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Output_SchedulerPolicy::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_SchedulerPolicy_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Config*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Config::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_SchedulerPolicy_default_instance_._instance.get_mutable()->schedulers_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_SchedulerPolicy_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_State*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Output_SchedulerPolicy::kConfigFieldNumber;
const int Qos_Interfaces_Interface_Output_SchedulerPolicy::kSchedulersFieldNumber;
const int Qos_Interfaces_Interface_Output_SchedulerPolicy::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Output_SchedulerPolicy::Qos_Interfaces_Interface_Output_SchedulerPolicy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy)
}
Qos_Interfaces_Interface_Output_SchedulerPolicy::Qos_Interfaces_Interface_Output_SchedulerPolicy(const Qos_Interfaces_Interface_Output_SchedulerPolicy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_schedulers()) {
    schedulers_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers(*from.schedulers_);
  } else {
    schedulers_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy)
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy::SharedCtor() {
  ::memset(&schedulers_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&schedulers_)) + sizeof(config_));
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Output_SchedulerPolicy::~Qos_Interfaces_Interface_Output_SchedulerPolicy() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy)
  SharedDtor();
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy::SharedDtor() {
  if (this != internal_default_instance()) delete schedulers_;
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete config_;
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Output_SchedulerPolicy::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Output_SchedulerPolicy& Qos_Interfaces_Interface_Output_SchedulerPolicy::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Output_SchedulerPolicy* Qos_Interfaces_Interface_Output_SchedulerPolicy::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Output_SchedulerPolicy* n = new Qos_Interfaces_Interface_Output_SchedulerPolicy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && schedulers_ != NULL) {
    delete schedulers_;
  }
  schedulers_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Output_SchedulerPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4058480890u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers schedulers = 300824503 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers"];
      case 300824503: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 2406596026 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_schedulers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.State state = 422509776 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/state"];
      case 422509776: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 3380078210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Config config = 507310111 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/config"];
      case 507310111: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 4058480890 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers schedulers = 300824503 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers"];
  if (this->has_schedulers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      300824503, *this->schedulers_, output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.State state = 422509776 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      422509776, *this->state_, output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Config config = 507310111 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      507310111, *this->config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Output_SchedulerPolicy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers schedulers = 300824503 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers"];
  if (this->has_schedulers()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        300824503, *this->schedulers_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.State state = 422509776 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        422509776, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Config config = 507310111 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        507310111, *this->config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy)
  return target;
}

size_t Qos_Interfaces_Interface_Output_SchedulerPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers schedulers = 300824503 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers"];
  if (this->has_schedulers()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->schedulers_);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.State state = 422509776 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Config config = 507310111 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Output_SchedulerPolicy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Output_SchedulerPolicy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy::MergeFrom(const Qos_Interfaces_Interface_Output_SchedulerPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_schedulers()) {
    mutable_schedulers()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers::MergeFrom(from.schedulers());
  }
  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_State::MergeFrom(from.state());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Config::MergeFrom(from.config());
  }
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy::CopyFrom(const Qos_Interfaces_Interface_Output_SchedulerPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Output_SchedulerPolicy::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Output_SchedulerPolicy::Swap(Qos_Interfaces_Interface_Output_SchedulerPolicy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Output_SchedulerPolicy::InternalSwap(Qos_Interfaces_Interface_Output_SchedulerPolicy* other) {
  using std::swap;
  swap(schedulers_, other->schedulers_);
  swap(state_, other->state_);
  swap(config_, other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Output_SchedulerPolicy::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Output_State::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Output_State::Qos_Interfaces_Interface_Output_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.State)
}
Qos_Interfaces_Interface_Output_State::Qos_Interfaces_Interface_Output_State(const Qos_Interfaces_Interface_Output_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.State)
}

void Qos_Interfaces_Interface_Output_State::SharedCtor() {
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Output_State::~Qos_Interfaces_Interface_Output_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.State)
  SharedDtor();
}

void Qos_Interfaces_Interface_Output_State::SharedDtor() {
}

void Qos_Interfaces_Interface_Output_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Output_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Output_State& Qos_Interfaces_Interface_Output_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_State();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Output_State* Qos_Interfaces_Interface_Output_State::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Output_State* n = new Qos_Interfaces_Interface_Output_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Output_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Output_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.State)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Output_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.State)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Output_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.State)
  return target;
}

size_t Qos_Interfaces_Interface_Output_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Output_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Output_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Output_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.State)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Output_State::MergeFrom(const Qos_Interfaces_Interface_Output_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Qos_Interfaces_Interface_Output_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Output_State::CopyFrom(const Qos_Interfaces_Interface_Output_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Output_State::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Output_State::Swap(Qos_Interfaces_Interface_Output_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Output_State::InternalSwap(Qos_Interfaces_Interface_Output_State* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Output_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_Output::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_default_instance_._instance.get_mutable()->classifers_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Config*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Config::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_default_instance_._instance.get_mutable()->interface_ref_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_default_instance_._instance.get_mutable()->queues_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_default_instance_._instance.get_mutable()->scheduler_policy_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_State*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_Output::kClassifersFieldNumber;
const int Qos_Interfaces_Interface_Output::kConfigFieldNumber;
const int Qos_Interfaces_Interface_Output::kInterfaceRefFieldNumber;
const int Qos_Interfaces_Interface_Output::kQueuesFieldNumber;
const int Qos_Interfaces_Interface_Output::kSchedulerPolicyFieldNumber;
const int Qos_Interfaces_Interface_Output::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_Output::Qos_Interfaces_Interface_Output()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output)
}
Qos_Interfaces_Interface_Output::Qos_Interfaces_Interface_Output(const Qos_Interfaces_Interface_Output& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_interface_ref()) {
    interface_ref_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef(*from.interface_ref_);
  } else {
    interface_ref_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_queues()) {
    queues_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues(*from.queues_);
  } else {
    queues_ = NULL;
  }
  if (from.has_classifers()) {
    classifers_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers(*from.classifers_);
  } else {
    classifers_ = NULL;
  }
  if (from.has_scheduler_policy()) {
    scheduler_policy_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy(*from.scheduler_policy_);
  } else {
    scheduler_policy_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output)
}

void Qos_Interfaces_Interface_Output::SharedCtor() {
  ::memset(&interface_ref_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&interface_ref_)) + sizeof(config_));
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_Output::~Qos_Interfaces_Interface_Output() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output)
  SharedDtor();
}

void Qos_Interfaces_Interface_Output::SharedDtor() {
  if (this != internal_default_instance()) delete interface_ref_;
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete queues_;
  if (this != internal_default_instance()) delete classifers_;
  if (this != internal_default_instance()) delete scheduler_policy_;
  if (this != internal_default_instance()) delete config_;
}

void Qos_Interfaces_Interface_Output::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_Output::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_Output& Qos_Interfaces_Interface_Output::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_Output* Qos_Interfaces_Interface_Output::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_Output* n = new Qos_Interfaces_Interface_Output;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_Output::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && interface_ref_ != NULL) {
    delete interface_ref_;
  }
  interface_ref_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && queues_ != NULL) {
    delete queues_;
  }
  queues_ = NULL;
  if (GetArenaNoVirtual() == NULL && classifers_ != NULL) {
    delete classifers_;
  }
  classifers_ = NULL;
  if (GetArenaNoVirtual() == NULL && scheduler_policy_ != NULL) {
    delete scheduler_policy_;
  }
  scheduler_policy_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_Output::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2897403858u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef interface_ref = 13944721 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref"];
      case 13944721: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 111557770 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_interface_ref()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.State state = 109678103 [(.yext.schemapath) = "/qos/interfaces/interface/output/state"];
      case 109678103: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 877424826 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues queues = 208565052 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues"];
      case 208565052: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 1668520418 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_queues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers classifers = 324405479 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers"];
      case 324405479: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 2595243834 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_classifers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy scheduler_policy = 345632622 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy"];
      case 345632622: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 2765060978 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scheduler_policy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Config config = 362175482 [(.yext.schemapath) = "/qos/interfaces/interface/output/config"];
      case 362175482: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 2897403858 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_Output::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef interface_ref = 13944721 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref"];
  if (this->has_interface_ref()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13944721, *this->interface_ref_, output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.State state = 109678103 [(.yext.schemapath) = "/qos/interfaces/interface/output/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      109678103, *this->state_, output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues queues = 208565052 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues"];
  if (this->has_queues()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      208565052, *this->queues_, output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers classifers = 324405479 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers"];
  if (this->has_classifers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      324405479, *this->classifers_, output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy scheduler_policy = 345632622 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy"];
  if (this->has_scheduler_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      345632622, *this->scheduler_policy_, output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Config config = 362175482 [(.yext.schemapath) = "/qos/interfaces/interface/output/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      362175482, *this->config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_Output::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef interface_ref = 13944721 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref"];
  if (this->has_interface_ref()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13944721, *this->interface_ref_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.State state = 109678103 [(.yext.schemapath) = "/qos/interfaces/interface/output/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        109678103, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues queues = 208565052 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues"];
  if (this->has_queues()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        208565052, *this->queues_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers classifers = 324405479 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers"];
  if (this->has_classifers()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        324405479, *this->classifers_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy scheduler_policy = 345632622 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy"];
  if (this->has_scheduler_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        345632622, *this->scheduler_policy_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Config config = 362175482 [(.yext.schemapath) = "/qos/interfaces/interface/output/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        362175482, *this->config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output)
  return target;
}

size_t Qos_Interfaces_Interface_Output::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef interface_ref = 13944721 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref"];
  if (this->has_interface_ref()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->interface_ref_);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.State state = 109678103 [(.yext.schemapath) = "/qos/interfaces/interface/output/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues queues = 208565052 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues"];
  if (this->has_queues()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->queues_);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers classifers = 324405479 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers"];
  if (this->has_classifers()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->classifers_);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy scheduler_policy = 345632622 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy"];
  if (this->has_scheduler_policy()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->scheduler_policy_);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Config config = 362175482 [(.yext.schemapath) = "/qos/interfaces/interface/output/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_Output::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_Output* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_Output>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_Output::MergeFrom(const Qos_Interfaces_Interface_Output& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_interface_ref()) {
    mutable_interface_ref()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef::MergeFrom(from.interface_ref());
  }
  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_State::MergeFrom(from.state());
  }
  if (from.has_queues()) {
    mutable_queues()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues::MergeFrom(from.queues());
  }
  if (from.has_classifers()) {
    mutable_classifers()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers::MergeFrom(from.classifers());
  }
  if (from.has_scheduler_policy()) {
    mutable_scheduler_policy()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy::MergeFrom(from.scheduler_policy());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Config::MergeFrom(from.config());
  }
}

void Qos_Interfaces_Interface_Output::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_Output::CopyFrom(const Qos_Interfaces_Interface_Output& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_Output::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_Output::Swap(Qos_Interfaces_Interface_Output* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_Output::InternalSwap(Qos_Interfaces_Interface_Output* other) {
  using std::swap;
  swap(interface_ref_, other->interface_ref_);
  swap(state_, other->state_);
  swap(queues_, other->queues_);
  swap(classifers_, other->classifers_);
  swap(scheduler_policy_, other->scheduler_policy_);
  swap(config_, other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_Output::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_State_default_instance_._instance.get_mutable()->interface_id_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void Qos_Interfaces_Interface_State::clear_interface_id() {
  if (GetArenaNoVirtual() == NULL && interface_id_ != NULL) {
    delete interface_id_;
  }
  interface_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface_State::kInterfaceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface_State::Qos_Interfaces_Interface_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.State)
}
Qos_Interfaces_Interface_State::Qos_Interfaces_Interface_State(const Qos_Interfaces_Interface_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_interface_id()) {
    interface_id_ = new ::ywrapper::StringValue(*from.interface_id_);
  } else {
    interface_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.State)
}

void Qos_Interfaces_Interface_State::SharedCtor() {
  interface_id_ = NULL;
  _cached_size_ = 0;
}

Qos_Interfaces_Interface_State::~Qos_Interfaces_Interface_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface.State)
  SharedDtor();
}

void Qos_Interfaces_Interface_State::SharedDtor() {
  if (this != internal_default_instance()) delete interface_id_;
}

void Qos_Interfaces_Interface_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface_State& Qos_Interfaces_Interface_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_State();
  return *internal_default_instance();
}

Qos_Interfaces_Interface_State* Qos_Interfaces_Interface_State::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface_State* n = new Qos_Interfaces_Interface_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && interface_id_ != NULL) {
    delete interface_id_;
  }
  interface_id_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(1390467146u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue interface_id = 173808393 [(.yext.schemapath) = "/qos/interfaces/interface/state/interface-id"];
      case 173808393: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 1390467146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_interface_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface.State)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue interface_id = 173808393 [(.yext.schemapath) = "/qos/interfaces/interface/state/interface-id"];
  if (this->has_interface_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      173808393, *this->interface_id_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.State)
}

::google::protobuf::uint8* Qos_Interfaces_Interface_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue interface_id = 173808393 [(.yext.schemapath) = "/qos/interfaces/interface/state/interface-id"];
  if (this->has_interface_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        173808393, *this->interface_id_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface.State)
  return target;
}

size_t Qos_Interfaces_Interface_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue interface_id = 173808393 [(.yext.schemapath) = "/qos/interfaces/interface/state/interface-id"];
  if (this->has_interface_id()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->interface_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface.State)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface_State::MergeFrom(const Qos_Interfaces_Interface_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_interface_id()) {
    mutable_interface_id()->::ywrapper::StringValue::MergeFrom(from.interface_id());
  }
}

void Qos_Interfaces_Interface_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface_State::CopyFrom(const Qos_Interfaces_Interface_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface_State::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface_State::Swap(Qos_Interfaces_Interface_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface_State::InternalSwap(Qos_Interfaces_Interface_State* other) {
  using std::swap;
  swap(interface_id_, other->interface_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_Interface::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Config*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Config::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_default_instance_._instance.get_mutable()->input_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_default_instance_._instance.get_mutable()->interface_ref_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_default_instance_._instance.get_mutable()->output_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Interfaces_Interface_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_State*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_Interface::kConfigFieldNumber;
const int Qos_Interfaces_Interface::kInputFieldNumber;
const int Qos_Interfaces_Interface::kInterfaceRefFieldNumber;
const int Qos_Interfaces_Interface::kOutputFieldNumber;
const int Qos_Interfaces_Interface::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_Interface::Qos_Interfaces_Interface()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface)
}
Qos_Interfaces_Interface::Qos_Interfaces_Interface(const Qos_Interfaces_Interface& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_input()) {
    input_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input(*from.input_);
  } else {
    input_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_interface_ref()) {
    interface_ref_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef(*from.interface_ref_);
  } else {
    interface_ref_ = NULL;
  }
  if (from.has_output()) {
    output_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output(*from.output_);
  } else {
    output_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.Interface)
}

void Qos_Interfaces_Interface::SharedCtor() {
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_) -
      reinterpret_cast<char*>(&config_)) + sizeof(output_));
  _cached_size_ = 0;
}

Qos_Interfaces_Interface::~Qos_Interfaces_Interface() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.Interface)
  SharedDtor();
}

void Qos_Interfaces_Interface::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete input_;
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete interface_ref_;
  if (this != internal_default_instance()) delete output_;
}

void Qos_Interfaces_Interface::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_Interface::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_Interface& Qos_Interfaces_Interface::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface();
  return *internal_default_instance();
}

Qos_Interfaces_Interface* Qos_Interfaces_Interface::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_Interface* n = new Qos_Interfaces_Interface;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_Interface::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.Interface)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && input_ != NULL) {
    delete input_;
  }
  input_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && interface_ref_ != NULL) {
    delete interface_ref_;
  }
  interface_ref_ = NULL;
  if (GetArenaNoVirtual() == NULL && output_ != NULL) {
    delete output_;
  }
  output_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_Interface::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.Interface)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3958336170u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Config config = 151272640 [(.yext.schemapath) = "/qos/interfaces/interface/config"];
      case 151272640: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 1210181122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input input = 185281278 [(.yext.schemapath) = "/qos/interfaces/interface/input"];
      case 185281278: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 1482250226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_input()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.State state = 236972729 [(.yext.schemapath) = "/qos/interfaces/interface/state"];
      case 236972729: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 1895781834 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef interface_ref = 340560111 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref"];
      case 340560111: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 2724480890 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_interface_ref()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output output = 494792021 [(.yext.schemapath) = "/qos/interfaces/interface/output"];
      case 494792021: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 3958336170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_output()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.Interface)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.Interface)
  return false;
#undef DO_
}

void Qos_Interfaces_Interface::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.Interface)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Config config = 151272640 [(.yext.schemapath) = "/qos/interfaces/interface/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      151272640, *this->config_, output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input input = 185281278 [(.yext.schemapath) = "/qos/interfaces/interface/input"];
  if (this->has_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      185281278, *this->input_, output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.State state = 236972729 [(.yext.schemapath) = "/qos/interfaces/interface/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      236972729, *this->state_, output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef interface_ref = 340560111 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref"];
  if (this->has_interface_ref()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      340560111, *this->interface_ref_, output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output output = 494792021 [(.yext.schemapath) = "/qos/interfaces/interface/output"];
  if (this->has_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      494792021, *this->output_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.Interface)
}

::google::protobuf::uint8* Qos_Interfaces_Interface::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.Interface)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Config config = 151272640 [(.yext.schemapath) = "/qos/interfaces/interface/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        151272640, *this->config_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input input = 185281278 [(.yext.schemapath) = "/qos/interfaces/interface/input"];
  if (this->has_input()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        185281278, *this->input_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.State state = 236972729 [(.yext.schemapath) = "/qos/interfaces/interface/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        236972729, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef interface_ref = 340560111 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref"];
  if (this->has_interface_ref()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        340560111, *this->interface_ref_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output output = 494792021 [(.yext.schemapath) = "/qos/interfaces/interface/output"];
  if (this->has_output()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        494792021, *this->output_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.Interface)
  return target;
}

size_t Qos_Interfaces_Interface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.Interface)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Config config = 151272640 [(.yext.schemapath) = "/qos/interfaces/interface/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input input = 185281278 [(.yext.schemapath) = "/qos/interfaces/interface/input"];
  if (this->has_input()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->input_);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.State state = 236972729 [(.yext.schemapath) = "/qos/interfaces/interface/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef interface_ref = 340560111 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref"];
  if (this->has_interface_ref()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->interface_ref_);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output output = 494792021 [(.yext.schemapath) = "/qos/interfaces/interface/output"];
  if (this->has_output()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->output_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_Interface::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_Interface* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_Interface>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.Interface)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.Interface)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_Interface::MergeFrom(const Qos_Interfaces_Interface& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Config::MergeFrom(from.config());
  }
  if (from.has_input()) {
    mutable_input()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input::MergeFrom(from.input());
  }
  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_State::MergeFrom(from.state());
  }
  if (from.has_interface_ref()) {
    mutable_interface_ref()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef::MergeFrom(from.interface_ref());
  }
  if (from.has_output()) {
    mutable_output()->::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output::MergeFrom(from.output());
  }
}

void Qos_Interfaces_Interface::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_Interface::CopyFrom(const Qos_Interfaces_Interface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.Interface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_Interface::IsInitialized() const {
  return true;
}

void Qos_Interfaces_Interface::Swap(Qos_Interfaces_Interface* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_Interface::InternalSwap(Qos_Interfaces_Interface* other) {
  using std::swap;
  swap(config_, other->config_);
  swap(input_, other->input_);
  swap(state_, other->state_);
  swap(interface_ref_, other->interface_ref_);
  swap(output_, other->output_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_Interface::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces_InterfaceKey::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Interfaces_InterfaceKey_default_instance_._instance.get_mutable()->interface_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface*>(
      ::openconfig::openconfig_qos::Qos_Interfaces_Interface::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces_InterfaceKey::kInterfaceIdFieldNumber;
const int Qos_Interfaces_InterfaceKey::kInterfaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces_InterfaceKey::Qos_Interfaces_InterfaceKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_InterfaceKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey)
}
Qos_Interfaces_InterfaceKey::Qos_Interfaces_InterfaceKey(const Qos_Interfaces_InterfaceKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  interface_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.interface_id().size() > 0) {
    interface_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interface_id_);
  }
  if (from.has_interface()) {
    interface_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface(*from.interface_);
  } else {
    interface_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey)
}

void Qos_Interfaces_InterfaceKey::SharedCtor() {
  interface_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interface_ = NULL;
  _cached_size_ = 0;
}

Qos_Interfaces_InterfaceKey::~Qos_Interfaces_InterfaceKey() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey)
  SharedDtor();
}

void Qos_Interfaces_InterfaceKey::SharedDtor() {
  interface_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete interface_;
}

void Qos_Interfaces_InterfaceKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces_InterfaceKey::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces_InterfaceKey& Qos_Interfaces_InterfaceKey::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_InterfaceKey();
  return *internal_default_instance();
}

Qos_Interfaces_InterfaceKey* Qos_Interfaces_InterfaceKey::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces_InterfaceKey* n = new Qos_Interfaces_InterfaceKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces_InterfaceKey::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interface_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && interface_ != NULL) {
    delete interface_;
  }
  interface_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Interfaces_InterfaceKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string interface_id = 1 [(.yext.schemapath) = "/qos/interfaces/interface/interface-id"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interface_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->interface_id().data(), static_cast<int>(this->interface_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey.interface_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces.Interface interface = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_interface()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey)
  return false;
#undef DO_
}

void Qos_Interfaces_InterfaceKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string interface_id = 1 [(.yext.schemapath) = "/qos/interfaces/interface/interface-id"];
  if (this->interface_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->interface_id().data(), static_cast<int>(this->interface_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey.interface_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->interface_id(), output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface interface = 2;
  if (this->has_interface()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->interface_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey)
}

::google::protobuf::uint8* Qos_Interfaces_InterfaceKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string interface_id = 1 [(.yext.schemapath) = "/qos/interfaces/interface/interface-id"];
  if (this->interface_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->interface_id().data(), static_cast<int>(this->interface_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey.interface_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->interface_id(), target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface interface = 2;
  if (this->has_interface()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->interface_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey)
  return target;
}

size_t Qos_Interfaces_InterfaceKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string interface_id = 1 [(.yext.schemapath) = "/qos/interfaces/interface/interface-id"];
  if (this->interface_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->interface_id());
  }

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface interface = 2;
  if (this->has_interface()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->interface_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces_InterfaceKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces_InterfaceKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces_InterfaceKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey)
    MergeFrom(*source);
  }
}

void Qos_Interfaces_InterfaceKey::MergeFrom(const Qos_Interfaces_InterfaceKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.interface_id().size() > 0) {

    interface_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interface_id_);
  }
  if (from.has_interface()) {
    mutable_interface()->::openconfig::openconfig_qos::Qos_Interfaces_Interface::MergeFrom(from.interface());
  }
}

void Qos_Interfaces_InterfaceKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces_InterfaceKey::CopyFrom(const Qos_Interfaces_InterfaceKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces_InterfaceKey::IsInitialized() const {
  return true;
}

void Qos_Interfaces_InterfaceKey::Swap(Qos_Interfaces_InterfaceKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces_InterfaceKey::InternalSwap(Qos_Interfaces_InterfaceKey* other) {
  using std::swap;
  interface_id_.Swap(&other->interface_id_);
  swap(interface_, other->interface_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces_InterfaceKey::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Interfaces::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Interfaces::kInterfaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Interfaces::Qos_Interfaces()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Interfaces)
}
Qos_Interfaces::Qos_Interfaces(const Qos_Interfaces& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      interface_(from.interface_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Interfaces)
}

void Qos_Interfaces::SharedCtor() {
  _cached_size_ = 0;
}

Qos_Interfaces::~Qos_Interfaces() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Interfaces)
  SharedDtor();
}

void Qos_Interfaces::SharedDtor() {
}

void Qos_Interfaces::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Interfaces::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Interfaces& Qos_Interfaces::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces();
  return *internal_default_instance();
}

Qos_Interfaces* Qos_Interfaces::New(::google::protobuf::Arena* arena) const {
  Qos_Interfaces* n = new Qos_Interfaces;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Interfaces::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Interfaces)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interface_.Clear();
  _internal_metadata_.Clear();
}

bool Qos_Interfaces::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Interfaces)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(1431268346u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey interface = 178908543 [(.yext.schemapath) = "/qos/interfaces/interface"];
      case 178908543: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 1431268346 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_interface()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Interfaces)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Interfaces)
  return false;
#undef DO_
}

void Qos_Interfaces::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Interfaces)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey interface = 178908543 [(.yext.schemapath) = "/qos/interfaces/interface"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->interface_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      178908543, this->interface(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Interfaces)
}

::google::protobuf::uint8* Qos_Interfaces::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Interfaces)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey interface = 178908543 [(.yext.schemapath) = "/qos/interfaces/interface"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->interface_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        178908543, this->interface(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Interfaces)
  return target;
}

size_t Qos_Interfaces::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Interfaces)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey interface = 178908543 [(.yext.schemapath) = "/qos/interfaces/interface"];
  {
    unsigned int count = static_cast<unsigned int>(this->interface_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->interface(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Interfaces::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Interfaces* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Interfaces>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Interfaces)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Interfaces)
    MergeFrom(*source);
  }
}

void Qos_Interfaces::MergeFrom(const Qos_Interfaces& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Interfaces)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  interface_.MergeFrom(from.interface_);
}

void Qos_Interfaces::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Interfaces::CopyFrom(const Qos_Interfaces& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Interfaces)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Interfaces::IsInitialized() const {
  return true;
}

void Qos_Interfaces::Swap(Qos_Interfaces* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Interfaces::InternalSwap(Qos_Interfaces* other) {
  using std::swap;
  interface_.InternalSwap(&other->interface_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Interfaces::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Queues_Queue_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Queues_Queue_Config_default_instance_._instance.get_mutable()->name_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void Qos_Queues_Queue_Config::clear_name() {
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Queues_Queue_Config::kNameFieldNumber;
const int Qos_Queues_Queue_Config::kQueueTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Queues_Queue_Config::Qos_Queues_Queue_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues_Queue_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Queues.Queue.Config)
}
Qos_Queues_Queue_Config::Qos_Queues_Queue_Config(const Qos_Queues_Queue_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_name()) {
    name_ = new ::ywrapper::StringValue(*from.name_);
  } else {
    name_ = NULL;
  }
  queue_type_ = from.queue_type_;
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Queues.Queue.Config)
}

void Qos_Queues_Queue_Config::SharedCtor() {
  ::memset(&name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&queue_type_) -
      reinterpret_cast<char*>(&name_)) + sizeof(queue_type_));
  _cached_size_ = 0;
}

Qos_Queues_Queue_Config::~Qos_Queues_Queue_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Queues.Queue.Config)
  SharedDtor();
}

void Qos_Queues_Queue_Config::SharedDtor() {
  if (this != internal_default_instance()) delete name_;
}

void Qos_Queues_Queue_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Queues_Queue_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Queues_Queue_Config& Qos_Queues_Queue_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues_Queue_Config();
  return *internal_default_instance();
}

Qos_Queues_Queue_Config* Qos_Queues_Queue_Config::New(::google::protobuf::Arena* arena) const {
  Qos_Queues_Queue_Config* n = new Qos_Queues_Queue_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Queues_Queue_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Queues.Queue.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
  queue_type_ = 0;
  _internal_metadata_.Clear();
}

bool Qos_Queues_Queue_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Queues.Queue.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2815508168u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue name = 135146606 [(.yext.schemapath) = "/qos/queues/queue/config/name"];
      case 135146606: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 1081172850 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.enums.OpenconfigQosTypesQOSQUEUETYPE queue_type = 351938521 [(.yext.schemapath) = "/qos/queues/queue/config/queue-type"];
      case 351938521: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 2815508168 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_queue_type(static_cast< ::openconfig::enums::OpenconfigQosTypesQOSQUEUETYPE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Queues.Queue.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Queues.Queue.Config)
  return false;
#undef DO_
}

void Qos_Queues_Queue_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Queues.Queue.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue name = 135146606 [(.yext.schemapath) = "/qos/queues/queue/config/name"];
  if (this->has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      135146606, *this->name_, output);
  }

  // .openconfig.enums.OpenconfigQosTypesQOSQUEUETYPE queue_type = 351938521 [(.yext.schemapath) = "/qos/queues/queue/config/queue-type"];
  if (this->queue_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      351938521, this->queue_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Queues.Queue.Config)
}

::google::protobuf::uint8* Qos_Queues_Queue_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Queues.Queue.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue name = 135146606 [(.yext.schemapath) = "/qos/queues/queue/config/name"];
  if (this->has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        135146606, *this->name_, deterministic, target);
  }

  // .openconfig.enums.OpenconfigQosTypesQOSQUEUETYPE queue_type = 351938521 [(.yext.schemapath) = "/qos/queues/queue/config/queue-type"];
  if (this->queue_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      351938521, this->queue_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Queues.Queue.Config)
  return target;
}

size_t Qos_Queues_Queue_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Queues.Queue.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue name = 135146606 [(.yext.schemapath) = "/qos/queues/queue/config/name"];
  if (this->has_name()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->name_);
  }

  // .openconfig.enums.OpenconfigQosTypesQOSQUEUETYPE queue_type = 351938521 [(.yext.schemapath) = "/qos/queues/queue/config/queue-type"];
  if (this->queue_type() != 0) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->queue_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Queues_Queue_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Queues.Queue.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Queues_Queue_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Queues_Queue_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Queues.Queue.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Queues.Queue.Config)
    MergeFrom(*source);
  }
}

void Qos_Queues_Queue_Config::MergeFrom(const Qos_Queues_Queue_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Queues.Queue.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_name()) {
    mutable_name()->::ywrapper::StringValue::MergeFrom(from.name());
  }
  if (from.queue_type() != 0) {
    set_queue_type(from.queue_type());
  }
}

void Qos_Queues_Queue_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Queues.Queue.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Queues_Queue_Config::CopyFrom(const Qos_Queues_Queue_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Queues.Queue.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Queues_Queue_Config::IsInitialized() const {
  return true;
}

void Qos_Queues_Queue_Config::Swap(Qos_Queues_Queue_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Queues_Queue_Config::InternalSwap(Qos_Queues_Queue_Config* other) {
  using std::swap;
  swap(name_, other->name_);
  swap(queue_type_, other->queue_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Queues_Queue_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Queues_Queue_Red_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Queues_Queue_Red_Config_default_instance_._instance.get_mutable()->maxth_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Queues_Queue_Red_Config_default_instance_._instance.get_mutable()->minth_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Qos_Queues_Queue_Red_Config::clear_maxth() {
  if (GetArenaNoVirtual() == NULL && maxth_ != NULL) {
    delete maxth_;
  }
  maxth_ = NULL;
}
void Qos_Queues_Queue_Red_Config::clear_minth() {
  if (GetArenaNoVirtual() == NULL && minth_ != NULL) {
    delete minth_;
  }
  minth_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Queues_Queue_Red_Config::kMaxthFieldNumber;
const int Qos_Queues_Queue_Red_Config::kMinthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Queues_Queue_Red_Config::Qos_Queues_Queue_Red_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues_Queue_Red_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Queues.Queue.Red.Config)
}
Qos_Queues_Queue_Red_Config::Qos_Queues_Queue_Red_Config(const Qos_Queues_Queue_Red_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_maxth()) {
    maxth_ = new ::ywrapper::UintValue(*from.maxth_);
  } else {
    maxth_ = NULL;
  }
  if (from.has_minth()) {
    minth_ = new ::ywrapper::UintValue(*from.minth_);
  } else {
    minth_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Queues.Queue.Red.Config)
}

void Qos_Queues_Queue_Red_Config::SharedCtor() {
  ::memset(&maxth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minth_) -
      reinterpret_cast<char*>(&maxth_)) + sizeof(minth_));
  _cached_size_ = 0;
}

Qos_Queues_Queue_Red_Config::~Qos_Queues_Queue_Red_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Queues.Queue.Red.Config)
  SharedDtor();
}

void Qos_Queues_Queue_Red_Config::SharedDtor() {
  if (this != internal_default_instance()) delete maxth_;
  if (this != internal_default_instance()) delete minth_;
}

void Qos_Queues_Queue_Red_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Queues_Queue_Red_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Queues_Queue_Red_Config& Qos_Queues_Queue_Red_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues_Queue_Red_Config();
  return *internal_default_instance();
}

Qos_Queues_Queue_Red_Config* Qos_Queues_Queue_Red_Config::New(::google::protobuf::Arena* arena) const {
  Qos_Queues_Queue_Red_Config* n = new Qos_Queues_Queue_Red_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Queues_Queue_Red_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Queues.Queue.Red.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && maxth_ != NULL) {
    delete maxth_;
  }
  maxth_ = NULL;
  if (GetArenaNoVirtual() == NULL && minth_ != NULL) {
    delete minth_;
  }
  minth_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Queues_Queue_Red_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Queues.Queue.Red.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2414009578u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue maxth = 77750307 [(.yext.schemapath) = "/qos/queues/queue/red/config/maxth"];
      case 77750307: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 622002458 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_maxth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue minth = 301751197 [(.yext.schemapath) = "/qos/queues/queue/red/config/minth"];
      case 301751197: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 2414009578 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_minth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Queues.Queue.Red.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Queues.Queue.Red.Config)
  return false;
#undef DO_
}

void Qos_Queues_Queue_Red_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Queues.Queue.Red.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue maxth = 77750307 [(.yext.schemapath) = "/qos/queues/queue/red/config/maxth"];
  if (this->has_maxth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      77750307, *this->maxth_, output);
  }

  // .ywrapper.UintValue minth = 301751197 [(.yext.schemapath) = "/qos/queues/queue/red/config/minth"];
  if (this->has_minth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      301751197, *this->minth_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Queues.Queue.Red.Config)
}

::google::protobuf::uint8* Qos_Queues_Queue_Red_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Queues.Queue.Red.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue maxth = 77750307 [(.yext.schemapath) = "/qos/queues/queue/red/config/maxth"];
  if (this->has_maxth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        77750307, *this->maxth_, deterministic, target);
  }

  // .ywrapper.UintValue minth = 301751197 [(.yext.schemapath) = "/qos/queues/queue/red/config/minth"];
  if (this->has_minth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        301751197, *this->minth_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Queues.Queue.Red.Config)
  return target;
}

size_t Qos_Queues_Queue_Red_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Queues.Queue.Red.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue maxth = 77750307 [(.yext.schemapath) = "/qos/queues/queue/red/config/maxth"];
  if (this->has_maxth()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->maxth_);
  }

  // .ywrapper.UintValue minth = 301751197 [(.yext.schemapath) = "/qos/queues/queue/red/config/minth"];
  if (this->has_minth()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->minth_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Queues_Queue_Red_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Queues.Queue.Red.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Queues_Queue_Red_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Queues_Queue_Red_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Queues.Queue.Red.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Queues.Queue.Red.Config)
    MergeFrom(*source);
  }
}

void Qos_Queues_Queue_Red_Config::MergeFrom(const Qos_Queues_Queue_Red_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Queues.Queue.Red.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_maxth()) {
    mutable_maxth()->::ywrapper::UintValue::MergeFrom(from.maxth());
  }
  if (from.has_minth()) {
    mutable_minth()->::ywrapper::UintValue::MergeFrom(from.minth());
  }
}

void Qos_Queues_Queue_Red_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Queues.Queue.Red.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Queues_Queue_Red_Config::CopyFrom(const Qos_Queues_Queue_Red_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Queues.Queue.Red.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Queues_Queue_Red_Config::IsInitialized() const {
  return true;
}

void Qos_Queues_Queue_Red_Config::Swap(Qos_Queues_Queue_Red_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Queues_Queue_Red_Config::InternalSwap(Qos_Queues_Queue_Red_Config* other) {
  using std::swap;
  swap(maxth_, other->maxth_);
  swap(minth_, other->minth_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Queues_Queue_Red_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Queues_Queue_Red_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Queues_Queue_Red_State_default_instance_._instance.get_mutable()->maxth_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Queues_Queue_Red_State_default_instance_._instance.get_mutable()->minth_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Qos_Queues_Queue_Red_State::clear_maxth() {
  if (GetArenaNoVirtual() == NULL && maxth_ != NULL) {
    delete maxth_;
  }
  maxth_ = NULL;
}
void Qos_Queues_Queue_Red_State::clear_minth() {
  if (GetArenaNoVirtual() == NULL && minth_ != NULL) {
    delete minth_;
  }
  minth_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Queues_Queue_Red_State::kMaxthFieldNumber;
const int Qos_Queues_Queue_Red_State::kMinthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Queues_Queue_Red_State::Qos_Queues_Queue_Red_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues_Queue_Red_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Queues.Queue.Red.State)
}
Qos_Queues_Queue_Red_State::Qos_Queues_Queue_Red_State(const Qos_Queues_Queue_Red_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_minth()) {
    minth_ = new ::ywrapper::UintValue(*from.minth_);
  } else {
    minth_ = NULL;
  }
  if (from.has_maxth()) {
    maxth_ = new ::ywrapper::UintValue(*from.maxth_);
  } else {
    maxth_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Queues.Queue.Red.State)
}

void Qos_Queues_Queue_Red_State::SharedCtor() {
  ::memset(&minth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxth_) -
      reinterpret_cast<char*>(&minth_)) + sizeof(maxth_));
  _cached_size_ = 0;
}

Qos_Queues_Queue_Red_State::~Qos_Queues_Queue_Red_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Queues.Queue.Red.State)
  SharedDtor();
}

void Qos_Queues_Queue_Red_State::SharedDtor() {
  if (this != internal_default_instance()) delete minth_;
  if (this != internal_default_instance()) delete maxth_;
}

void Qos_Queues_Queue_Red_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Queues_Queue_Red_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Queues_Queue_Red_State& Qos_Queues_Queue_Red_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues_Queue_Red_State();
  return *internal_default_instance();
}

Qos_Queues_Queue_Red_State* Qos_Queues_Queue_Red_State::New(::google::protobuf::Arena* arena) const {
  Qos_Queues_Queue_Red_State* n = new Qos_Queues_Queue_Red_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Queues_Queue_Red_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Queues.Queue.Red.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && minth_ != NULL) {
    delete minth_;
  }
  minth_ = NULL;
  if (GetArenaNoVirtual() == NULL && maxth_ != NULL) {
    delete maxth_;
  }
  maxth_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Queues_Queue_Red_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Queues.Queue.Red.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3996056562u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue minth = 316915032 [(.yext.schemapath) = "/qos/queues/queue/red/state/minth"];
      case 316915032: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 2535320258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_minth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue maxth = 499507070 [(.yext.schemapath) = "/qos/queues/queue/red/state/maxth"];
      case 499507070: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 3996056562 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_maxth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Queues.Queue.Red.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Queues.Queue.Red.State)
  return false;
#undef DO_
}

void Qos_Queues_Queue_Red_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Queues.Queue.Red.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue minth = 316915032 [(.yext.schemapath) = "/qos/queues/queue/red/state/minth"];
  if (this->has_minth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      316915032, *this->minth_, output);
  }

  // .ywrapper.UintValue maxth = 499507070 [(.yext.schemapath) = "/qos/queues/queue/red/state/maxth"];
  if (this->has_maxth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      499507070, *this->maxth_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Queues.Queue.Red.State)
}

::google::protobuf::uint8* Qos_Queues_Queue_Red_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Queues.Queue.Red.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue minth = 316915032 [(.yext.schemapath) = "/qos/queues/queue/red/state/minth"];
  if (this->has_minth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        316915032, *this->minth_, deterministic, target);
  }

  // .ywrapper.UintValue maxth = 499507070 [(.yext.schemapath) = "/qos/queues/queue/red/state/maxth"];
  if (this->has_maxth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        499507070, *this->maxth_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Queues.Queue.Red.State)
  return target;
}

size_t Qos_Queues_Queue_Red_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Queues.Queue.Red.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue minth = 316915032 [(.yext.schemapath) = "/qos/queues/queue/red/state/minth"];
  if (this->has_minth()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->minth_);
  }

  // .ywrapper.UintValue maxth = 499507070 [(.yext.schemapath) = "/qos/queues/queue/red/state/maxth"];
  if (this->has_maxth()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->maxth_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Queues_Queue_Red_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Queues.Queue.Red.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Queues_Queue_Red_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Queues_Queue_Red_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Queues.Queue.Red.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Queues.Queue.Red.State)
    MergeFrom(*source);
  }
}

void Qos_Queues_Queue_Red_State::MergeFrom(const Qos_Queues_Queue_Red_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Queues.Queue.Red.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_minth()) {
    mutable_minth()->::ywrapper::UintValue::MergeFrom(from.minth());
  }
  if (from.has_maxth()) {
    mutable_maxth()->::ywrapper::UintValue::MergeFrom(from.maxth());
  }
}

void Qos_Queues_Queue_Red_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Queues.Queue.Red.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Queues_Queue_Red_State::CopyFrom(const Qos_Queues_Queue_Red_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Queues.Queue.Red.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Queues_Queue_Red_State::IsInitialized() const {
  return true;
}

void Qos_Queues_Queue_Red_State::Swap(Qos_Queues_Queue_Red_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Queues_Queue_Red_State::InternalSwap(Qos_Queues_Queue_Red_State* other) {
  using std::swap;
  swap(minth_, other->minth_);
  swap(maxth_, other->maxth_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Queues_Queue_Red_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Queues_Queue_Red::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Queues_Queue_Red_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_qos::Qos_Queues_Queue_Red_Config*>(
      ::openconfig::openconfig_qos::Qos_Queues_Queue_Red_Config::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Queues_Queue_Red_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_Queues_Queue_Red_State*>(
      ::openconfig::openconfig_qos::Qos_Queues_Queue_Red_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Queues_Queue_Red::kConfigFieldNumber;
const int Qos_Queues_Queue_Red::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Queues_Queue_Red::Qos_Queues_Queue_Red()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues_Queue_Red();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Queues.Queue.Red)
}
Qos_Queues_Queue_Red::Qos_Queues_Queue_Red(const Qos_Queues_Queue_Red& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_Queues_Queue_Red_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_qos::Qos_Queues_Queue_Red_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Queues.Queue.Red)
}

void Qos_Queues_Queue_Red::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&state_)) + sizeof(config_));
  _cached_size_ = 0;
}

Qos_Queues_Queue_Red::~Qos_Queues_Queue_Red() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Queues.Queue.Red)
  SharedDtor();
}

void Qos_Queues_Queue_Red::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete config_;
}

void Qos_Queues_Queue_Red::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Queues_Queue_Red::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Queues_Queue_Red& Qos_Queues_Queue_Red::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues_Queue_Red();
  return *internal_default_instance();
}

Qos_Queues_Queue_Red* Qos_Queues_Queue_Red::New(::google::protobuf::Arena* arena) const {
  Qos_Queues_Queue_Red* n = new Qos_Queues_Queue_Red;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Queues_Queue_Red::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Queues.Queue.Red)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Queues_Queue_Red::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Queues.Queue.Red)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4246438306u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.Queues.Queue.Red.State state = 443004749 [(.yext.schemapath) = "/qos/queues/queue/red/state"];
      case 443004749: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 3544037994 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Queues.Queue.Red.Config config = 530804788 [(.yext.schemapath) = "/qos/queues/queue/red/config"];
      case 530804788: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 4246438306 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Queues.Queue.Red)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Queues.Queue.Red)
  return false;
#undef DO_
}

void Qos_Queues_Queue_Red::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Queues.Queue.Red)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Queues.Queue.Red.State state = 443004749 [(.yext.schemapath) = "/qos/queues/queue/red/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      443004749, *this->state_, output);
  }

  // .openconfig.openconfig_qos.Qos.Queues.Queue.Red.Config config = 530804788 [(.yext.schemapath) = "/qos/queues/queue/red/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      530804788, *this->config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Queues.Queue.Red)
}

::google::protobuf::uint8* Qos_Queues_Queue_Red::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Queues.Queue.Red)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Queues.Queue.Red.State state = 443004749 [(.yext.schemapath) = "/qos/queues/queue/red/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        443004749, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Queues.Queue.Red.Config config = 530804788 [(.yext.schemapath) = "/qos/queues/queue/red/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        530804788, *this->config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Queues.Queue.Red)
  return target;
}

size_t Qos_Queues_Queue_Red::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Queues.Queue.Red)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.Queues.Queue.Red.State state = 443004749 [(.yext.schemapath) = "/qos/queues/queue/red/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_qos.Qos.Queues.Queue.Red.Config config = 530804788 [(.yext.schemapath) = "/qos/queues/queue/red/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Queues_Queue_Red::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Queues.Queue.Red)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Queues_Queue_Red* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Queues_Queue_Red>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Queues.Queue.Red)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Queues.Queue.Red)
    MergeFrom(*source);
  }
}

void Qos_Queues_Queue_Red::MergeFrom(const Qos_Queues_Queue_Red& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Queues.Queue.Red)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_Queues_Queue_Red_State::MergeFrom(from.state());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_qos::Qos_Queues_Queue_Red_Config::MergeFrom(from.config());
  }
}

void Qos_Queues_Queue_Red::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Queues.Queue.Red)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Queues_Queue_Red::CopyFrom(const Qos_Queues_Queue_Red& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Queues.Queue.Red)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Queues_Queue_Red::IsInitialized() const {
  return true;
}

void Qos_Queues_Queue_Red::Swap(Qos_Queues_Queue_Red* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Queues_Queue_Red::InternalSwap(Qos_Queues_Queue_Red* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(config_, other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Queues_Queue_Red::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Queues_Queue_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Queues_Queue_State_default_instance_._instance.get_mutable()->name_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void Qos_Queues_Queue_State::clear_name() {
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Queues_Queue_State::kNameFieldNumber;
const int Qos_Queues_Queue_State::kQueueTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Queues_Queue_State::Qos_Queues_Queue_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues_Queue_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Queues.Queue.State)
}
Qos_Queues_Queue_State::Qos_Queues_Queue_State(const Qos_Queues_Queue_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_name()) {
    name_ = new ::ywrapper::StringValue(*from.name_);
  } else {
    name_ = NULL;
  }
  queue_type_ = from.queue_type_;
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Queues.Queue.State)
}

void Qos_Queues_Queue_State::SharedCtor() {
  ::memset(&name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&queue_type_) -
      reinterpret_cast<char*>(&name_)) + sizeof(queue_type_));
  _cached_size_ = 0;
}

Qos_Queues_Queue_State::~Qos_Queues_Queue_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Queues.Queue.State)
  SharedDtor();
}

void Qos_Queues_Queue_State::SharedDtor() {
  if (this != internal_default_instance()) delete name_;
}

void Qos_Queues_Queue_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Queues_Queue_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Queues_Queue_State& Qos_Queues_Queue_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues_Queue_State();
  return *internal_default_instance();
}

Qos_Queues_Queue_State* Qos_Queues_Queue_State::New(::google::protobuf::Arena* arena) const {
  Qos_Queues_Queue_State* n = new Qos_Queues_Queue_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Queues_Queue_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Queues.Queue.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
  queue_type_ = 0;
  _internal_metadata_.Clear();
}

bool Qos_Queues_Queue_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Queues.Queue.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3634129674u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.enums.OpenconfigQosTypesQOSQUEUETYPE queue_type = 390406498 [(.yext.schemapath) = "/qos/queues/queue/state/queue-type"];
      case 390406498: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 3123251984 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_queue_type(static_cast< ::openconfig::enums::OpenconfigQosTypesQOSQUEUETYPE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue name = 454266209 [(.yext.schemapath) = "/qos/queues/queue/state/name"];
      case 454266209: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 3634129674 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Queues.Queue.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Queues.Queue.State)
  return false;
#undef DO_
}

void Qos_Queues_Queue_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Queues.Queue.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.enums.OpenconfigQosTypesQOSQUEUETYPE queue_type = 390406498 [(.yext.schemapath) = "/qos/queues/queue/state/queue-type"];
  if (this->queue_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      390406498, this->queue_type(), output);
  }

  // .ywrapper.StringValue name = 454266209 [(.yext.schemapath) = "/qos/queues/queue/state/name"];
  if (this->has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      454266209, *this->name_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Queues.Queue.State)
}

::google::protobuf::uint8* Qos_Queues_Queue_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Queues.Queue.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.enums.OpenconfigQosTypesQOSQUEUETYPE queue_type = 390406498 [(.yext.schemapath) = "/qos/queues/queue/state/queue-type"];
  if (this->queue_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      390406498, this->queue_type(), target);
  }

  // .ywrapper.StringValue name = 454266209 [(.yext.schemapath) = "/qos/queues/queue/state/name"];
  if (this->has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        454266209, *this->name_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Queues.Queue.State)
  return target;
}

size_t Qos_Queues_Queue_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Queues.Queue.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue name = 454266209 [(.yext.schemapath) = "/qos/queues/queue/state/name"];
  if (this->has_name()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->name_);
  }

  // .openconfig.enums.OpenconfigQosTypesQOSQUEUETYPE queue_type = 390406498 [(.yext.schemapath) = "/qos/queues/queue/state/queue-type"];
  if (this->queue_type() != 0) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->queue_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Queues_Queue_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Queues.Queue.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Queues_Queue_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Queues_Queue_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Queues.Queue.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Queues.Queue.State)
    MergeFrom(*source);
  }
}

void Qos_Queues_Queue_State::MergeFrom(const Qos_Queues_Queue_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Queues.Queue.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_name()) {
    mutable_name()->::ywrapper::StringValue::MergeFrom(from.name());
  }
  if (from.queue_type() != 0) {
    set_queue_type(from.queue_type());
  }
}

void Qos_Queues_Queue_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Queues.Queue.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Queues_Queue_State::CopyFrom(const Qos_Queues_Queue_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Queues.Queue.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Queues_Queue_State::IsInitialized() const {
  return true;
}

void Qos_Queues_Queue_State::Swap(Qos_Queues_Queue_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Queues_Queue_State::InternalSwap(Qos_Queues_Queue_State* other) {
  using std::swap;
  swap(name_, other->name_);
  swap(queue_type_, other->queue_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Queues_Queue_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Queues_Queue_Wred_Config::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Queues_Queue_Wred_Config::Qos_Queues_Queue_Wred_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues_Queue_Wred_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.Config)
}
Qos_Queues_Queue_Wred_Config::Qos_Queues_Queue_Wred_Config(const Qos_Queues_Queue_Wred_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.Config)
}

void Qos_Queues_Queue_Wred_Config::SharedCtor() {
  _cached_size_ = 0;
}

Qos_Queues_Queue_Wred_Config::~Qos_Queues_Queue_Wred_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.Config)
  SharedDtor();
}

void Qos_Queues_Queue_Wred_Config::SharedDtor() {
}

void Qos_Queues_Queue_Wred_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Queues_Queue_Wred_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Queues_Queue_Wred_Config& Qos_Queues_Queue_Wred_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues_Queue_Wred_Config();
  return *internal_default_instance();
}

Qos_Queues_Queue_Wred_Config* Qos_Queues_Queue_Wred_Config::New(::google::protobuf::Arena* arena) const {
  Qos_Queues_Queue_Wred_Config* n = new Qos_Queues_Queue_Wred_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Queues_Queue_Wred_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool Qos_Queues_Queue_Wred_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.Config)
  return false;
#undef DO_
}

void Qos_Queues_Queue_Wred_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.Config)
}

::google::protobuf::uint8* Qos_Queues_Queue_Wred_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.Config)
  return target;
}

size_t Qos_Queues_Queue_Wred_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Queues_Queue_Wred_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Queues_Queue_Wred_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Queues_Queue_Wred_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.Config)
    MergeFrom(*source);
  }
}

void Qos_Queues_Queue_Wred_Config::MergeFrom(const Qos_Queues_Queue_Wred_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Qos_Queues_Queue_Wred_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Queues_Queue_Wred_Config::CopyFrom(const Qos_Queues_Queue_Wred_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Queues_Queue_Wred_Config::IsInitialized() const {
  return true;
}

void Qos_Queues_Queue_Wred_Config::Swap(Qos_Queues_Queue_Wred_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Queues_Queue_Wred_Config::InternalSwap(Qos_Queues_Queue_Wred_Config* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Queues_Queue_Wred_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Queues_Queue_Wred_State::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Queues_Queue_Wred_State::Qos_Queues_Queue_Wred_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues_Queue_Wred_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.State)
}
Qos_Queues_Queue_Wred_State::Qos_Queues_Queue_Wred_State(const Qos_Queues_Queue_Wred_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.State)
}

void Qos_Queues_Queue_Wred_State::SharedCtor() {
  _cached_size_ = 0;
}

Qos_Queues_Queue_Wred_State::~Qos_Queues_Queue_Wred_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.State)
  SharedDtor();
}

void Qos_Queues_Queue_Wred_State::SharedDtor() {
}

void Qos_Queues_Queue_Wred_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Queues_Queue_Wred_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Queues_Queue_Wred_State& Qos_Queues_Queue_Wred_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues_Queue_Wred_State();
  return *internal_default_instance();
}

Qos_Queues_Queue_Wred_State* Qos_Queues_Queue_Wred_State::New(::google::protobuf::Arena* arena) const {
  Qos_Queues_Queue_Wred_State* n = new Qos_Queues_Queue_Wred_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Queues_Queue_Wred_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool Qos_Queues_Queue_Wred_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.State)
  return false;
#undef DO_
}

void Qos_Queues_Queue_Wred_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.State)
}

::google::protobuf::uint8* Qos_Queues_Queue_Wred_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.State)
  return target;
}

size_t Qos_Queues_Queue_Wred_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Queues_Queue_Wred_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Queues_Queue_Wred_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Queues_Queue_Wred_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.State)
    MergeFrom(*source);
  }
}

void Qos_Queues_Queue_Wred_State::MergeFrom(const Qos_Queues_Queue_Wred_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Qos_Queues_Queue_Wred_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Queues_Queue_Wred_State::CopyFrom(const Qos_Queues_Queue_Wred_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Queues_Queue_Wred_State::IsInitialized() const {
  return true;
}

void Qos_Queues_Queue_Wred_State::Swap(Qos_Queues_Queue_Wred_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Queues_Queue_Wred_State::InternalSwap(Qos_Queues_Queue_Wred_State* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Queues_Queue_Wred_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Queues_Queue_Wred::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Queues_Queue_Wred_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_Config*>(
      ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_Config::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Queues_Queue_Wred_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_State*>(
      ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Queues_Queue_Wred::kConfigFieldNumber;
const int Qos_Queues_Queue_Wred::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Queues_Queue_Wred::Qos_Queues_Queue_Wred()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues_Queue_Wred();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Queues.Queue.Wred)
}
Qos_Queues_Queue_Wred::Qos_Queues_Queue_Wred(const Qos_Queues_Queue_Wred& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_State(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Queues.Queue.Wred)
}

void Qos_Queues_Queue_Wred::SharedCtor() {
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&config_)) + sizeof(state_));
  _cached_size_ = 0;
}

Qos_Queues_Queue_Wred::~Qos_Queues_Queue_Wred() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Queues.Queue.Wred)
  SharedDtor();
}

void Qos_Queues_Queue_Wred::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void Qos_Queues_Queue_Wred::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Queues_Queue_Wred::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Queues_Queue_Wred& Qos_Queues_Queue_Wred::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues_Queue_Wred();
  return *internal_default_instance();
}

Qos_Queues_Queue_Wred* Qos_Queues_Queue_Wred::New(::google::protobuf::Arena* arena) const {
  Qos_Queues_Queue_Wred* n = new Qos_Queues_Queue_Wred;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Queues_Queue_Wred::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Queues.Queue.Wred)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Queues_Queue_Wred::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Queues.Queue.Wred)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(238054498u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.Queues.Queue.Wred.Config config = 22449995 [(.yext.schemapath) = "/qos/queues/queue/wred/config"];
      case 22449995: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 179599962 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Queues.Queue.Wred.State state = 29756812 [(.yext.schemapath) = "/qos/queues/queue/wred/state"];
      case 29756812: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 238054498 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Queues.Queue.Wred)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Queues.Queue.Wred)
  return false;
#undef DO_
}

void Qos_Queues_Queue_Wred::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Queues.Queue.Wred)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Queues.Queue.Wred.Config config = 22449995 [(.yext.schemapath) = "/qos/queues/queue/wred/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22449995, *this->config_, output);
  }

  // .openconfig.openconfig_qos.Qos.Queues.Queue.Wred.State state = 29756812 [(.yext.schemapath) = "/qos/queues/queue/wred/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29756812, *this->state_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Queues.Queue.Wred)
}

::google::protobuf::uint8* Qos_Queues_Queue_Wred::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Queues.Queue.Wred)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Queues.Queue.Wred.Config config = 22449995 [(.yext.schemapath) = "/qos/queues/queue/wred/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22449995, *this->config_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Queues.Queue.Wred.State state = 29756812 [(.yext.schemapath) = "/qos/queues/queue/wred/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        29756812, *this->state_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Queues.Queue.Wred)
  return target;
}

size_t Qos_Queues_Queue_Wred::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Queues.Queue.Wred)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.Queues.Queue.Wred.Config config = 22449995 [(.yext.schemapath) = "/qos/queues/queue/wred/config"];
  if (this->has_config()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  // .openconfig.openconfig_qos.Qos.Queues.Queue.Wred.State state = 29756812 [(.yext.schemapath) = "/qos/queues/queue/wred/state"];
  if (this->has_state()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Queues_Queue_Wred::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Queues.Queue.Wred)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Queues_Queue_Wred* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Queues_Queue_Wred>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Queues.Queue.Wred)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Queues.Queue.Wred)
    MergeFrom(*source);
  }
}

void Qos_Queues_Queue_Wred::MergeFrom(const Qos_Queues_Queue_Wred& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Queues.Queue.Wred)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_Config::MergeFrom(from.config());
  }
  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_State::MergeFrom(from.state());
  }
}

void Qos_Queues_Queue_Wred::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Queues.Queue.Wred)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Queues_Queue_Wred::CopyFrom(const Qos_Queues_Queue_Wred& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Queues.Queue.Wred)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Queues_Queue_Wred::IsInitialized() const {
  return true;
}

void Qos_Queues_Queue_Wred::Swap(Qos_Queues_Queue_Wred* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Queues_Queue_Wred::InternalSwap(Qos_Queues_Queue_Wred* other) {
  using std::swap;
  swap(config_, other->config_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Queues_Queue_Wred::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Queues_Queue::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Queues_Queue_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_qos::Qos_Queues_Queue_Config*>(
      ::openconfig::openconfig_qos::Qos_Queues_Queue_Config::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Queues_Queue_default_instance_._instance.get_mutable()->red_ = const_cast< ::openconfig::openconfig_qos::Qos_Queues_Queue_Red*>(
      ::openconfig::openconfig_qos::Qos_Queues_Queue_Red::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Queues_Queue_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_Queues_Queue_State*>(
      ::openconfig::openconfig_qos::Qos_Queues_Queue_State::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_Queues_Queue_default_instance_._instance.get_mutable()->wred_ = const_cast< ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred*>(
      ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Queues_Queue::kConfigFieldNumber;
const int Qos_Queues_Queue::kRedFieldNumber;
const int Qos_Queues_Queue::kStateFieldNumber;
const int Qos_Queues_Queue::kWredFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Queues_Queue::Qos_Queues_Queue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues_Queue();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Queues.Queue)
}
Qos_Queues_Queue::Qos_Queues_Queue(const Qos_Queues_Queue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_red()) {
    red_ = new ::openconfig::openconfig_qos::Qos_Queues_Queue_Red(*from.red_);
  } else {
    red_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_qos::Qos_Queues_Queue_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_Queues_Queue_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_wred()) {
    wred_ = new ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred(*from.wred_);
  } else {
    wred_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Queues.Queue)
}

void Qos_Queues_Queue::SharedCtor() {
  ::memset(&red_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wred_) -
      reinterpret_cast<char*>(&red_)) + sizeof(wred_));
  _cached_size_ = 0;
}

Qos_Queues_Queue::~Qos_Queues_Queue() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Queues.Queue)
  SharedDtor();
}

void Qos_Queues_Queue::SharedDtor() {
  if (this != internal_default_instance()) delete red_;
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete wred_;
}

void Qos_Queues_Queue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Queues_Queue::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Queues_Queue& Qos_Queues_Queue::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues_Queue();
  return *internal_default_instance();
}

Qos_Queues_Queue* Qos_Queues_Queue::New(::google::protobuf::Arena* arena) const {
  Qos_Queues_Queue* n = new Qos_Queues_Queue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Queues_Queue::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Queues.Queue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && red_ != NULL) {
    delete red_;
  }
  red_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && wred_ != NULL) {
    delete wred_;
  }
  wred_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Queues_Queue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Queues.Queue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2282912466u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.Queues.Queue.Red red = 36543379 [(.yext.schemapath) = "/qos/queues/queue/red"];
      case 36543379: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 292347034 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_red()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Queues.Queue.Config config = 173754668 [(.yext.schemapath) = "/qos/queues/queue/config"];
      case 173754668: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 1390037346 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Queues.Queue.State state = 213681445 [(.yext.schemapath) = "/qos/queues/queue/state"];
      case 213681445: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 1709451562 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Queues.Queue.Wred wred = 285364058 [(.yext.schemapath) = "/qos/queues/queue/wred"];
      case 285364058: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 2282912466 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_wred()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Queues.Queue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Queues.Queue)
  return false;
#undef DO_
}

void Qos_Queues_Queue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Queues.Queue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Queues.Queue.Red red = 36543379 [(.yext.schemapath) = "/qos/queues/queue/red"];
  if (this->has_red()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36543379, *this->red_, output);
  }

  // .openconfig.openconfig_qos.Qos.Queues.Queue.Config config = 173754668 [(.yext.schemapath) = "/qos/queues/queue/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      173754668, *this->config_, output);
  }

  // .openconfig.openconfig_qos.Qos.Queues.Queue.State state = 213681445 [(.yext.schemapath) = "/qos/queues/queue/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      213681445, *this->state_, output);
  }

  // .openconfig.openconfig_qos.Qos.Queues.Queue.Wred wred = 285364058 [(.yext.schemapath) = "/qos/queues/queue/wred"];
  if (this->has_wred()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      285364058, *this->wred_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Queues.Queue)
}

::google::protobuf::uint8* Qos_Queues_Queue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Queues.Queue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Queues.Queue.Red red = 36543379 [(.yext.schemapath) = "/qos/queues/queue/red"];
  if (this->has_red()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        36543379, *this->red_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Queues.Queue.Config config = 173754668 [(.yext.schemapath) = "/qos/queues/queue/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        173754668, *this->config_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Queues.Queue.State state = 213681445 [(.yext.schemapath) = "/qos/queues/queue/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        213681445, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Queues.Queue.Wred wred = 285364058 [(.yext.schemapath) = "/qos/queues/queue/wred"];
  if (this->has_wred()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        285364058, *this->wred_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Queues.Queue)
  return target;
}

size_t Qos_Queues_Queue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Queues.Queue)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.Queues.Queue.Red red = 36543379 [(.yext.schemapath) = "/qos/queues/queue/red"];
  if (this->has_red()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->red_);
  }

  // .openconfig.openconfig_qos.Qos.Queues.Queue.Config config = 173754668 [(.yext.schemapath) = "/qos/queues/queue/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  // .openconfig.openconfig_qos.Qos.Queues.Queue.State state = 213681445 [(.yext.schemapath) = "/qos/queues/queue/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_qos.Qos.Queues.Queue.Wred wred = 285364058 [(.yext.schemapath) = "/qos/queues/queue/wred"];
  if (this->has_wred()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->wred_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Queues_Queue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Queues.Queue)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Queues_Queue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Queues_Queue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Queues.Queue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Queues.Queue)
    MergeFrom(*source);
  }
}

void Qos_Queues_Queue::MergeFrom(const Qos_Queues_Queue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Queues.Queue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_red()) {
    mutable_red()->::openconfig::openconfig_qos::Qos_Queues_Queue_Red::MergeFrom(from.red());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_qos::Qos_Queues_Queue_Config::MergeFrom(from.config());
  }
  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_Queues_Queue_State::MergeFrom(from.state());
  }
  if (from.has_wred()) {
    mutable_wred()->::openconfig::openconfig_qos::Qos_Queues_Queue_Wred::MergeFrom(from.wred());
  }
}

void Qos_Queues_Queue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Queues.Queue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Queues_Queue::CopyFrom(const Qos_Queues_Queue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Queues.Queue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Queues_Queue::IsInitialized() const {
  return true;
}

void Qos_Queues_Queue::Swap(Qos_Queues_Queue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Queues_Queue::InternalSwap(Qos_Queues_Queue* other) {
  using std::swap;
  swap(red_, other->red_);
  swap(config_, other->config_);
  swap(state_, other->state_);
  swap(wred_, other->wred_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Queues_Queue::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Queues_QueueKey::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_Queues_QueueKey_default_instance_._instance.get_mutable()->queue_ = const_cast< ::openconfig::openconfig_qos::Qos_Queues_Queue*>(
      ::openconfig::openconfig_qos::Qos_Queues_Queue::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Queues_QueueKey::kNameFieldNumber;
const int Qos_Queues_QueueKey::kQueueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Queues_QueueKey::Qos_Queues_QueueKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues_QueueKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Queues.QueueKey)
}
Qos_Queues_QueueKey::Qos_Queues_QueueKey(const Qos_Queues_QueueKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_queue()) {
    queue_ = new ::openconfig::openconfig_qos::Qos_Queues_Queue(*from.queue_);
  } else {
    queue_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Queues.QueueKey)
}

void Qos_Queues_QueueKey::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queue_ = NULL;
  _cached_size_ = 0;
}

Qos_Queues_QueueKey::~Qos_Queues_QueueKey() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Queues.QueueKey)
  SharedDtor();
}

void Qos_Queues_QueueKey::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete queue_;
}

void Qos_Queues_QueueKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Queues_QueueKey::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Queues_QueueKey& Qos_Queues_QueueKey::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues_QueueKey();
  return *internal_default_instance();
}

Qos_Queues_QueueKey* Qos_Queues_QueueKey::New(::google::protobuf::Arena* arena) const {
  Qos_Queues_QueueKey* n = new Qos_Queues_QueueKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Queues_QueueKey::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Queues.QueueKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && queue_ != NULL) {
    delete queue_;
  }
  queue_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_Queues_QueueKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Queues.QueueKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1 [(.yext.schemapath) = "/qos/queues/queue/name"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "openconfig.openconfig_qos.Qos.Queues.QueueKey.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Queues.Queue queue = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_queue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Queues.QueueKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Queues.QueueKey)
  return false;
#undef DO_
}

void Qos_Queues_QueueKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Queues.QueueKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.yext.schemapath) = "/qos/queues/queue/name"];
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_qos.Qos.Queues.QueueKey.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .openconfig.openconfig_qos.Qos.Queues.Queue queue = 2;
  if (this->has_queue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->queue_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Queues.QueueKey)
}

::google::protobuf::uint8* Qos_Queues_QueueKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Queues.QueueKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.yext.schemapath) = "/qos/queues/queue/name"];
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_qos.Qos.Queues.QueueKey.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .openconfig.openconfig_qos.Qos.Queues.Queue queue = 2;
  if (this->has_queue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->queue_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Queues.QueueKey)
  return target;
}

size_t Qos_Queues_QueueKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Queues.QueueKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1 [(.yext.schemapath) = "/qos/queues/queue/name"];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .openconfig.openconfig_qos.Qos.Queues.Queue queue = 2;
  if (this->has_queue()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->queue_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Queues_QueueKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Queues.QueueKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Queues_QueueKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Queues_QueueKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Queues.QueueKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Queues.QueueKey)
    MergeFrom(*source);
  }
}

void Qos_Queues_QueueKey::MergeFrom(const Qos_Queues_QueueKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Queues.QueueKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_queue()) {
    mutable_queue()->::openconfig::openconfig_qos::Qos_Queues_Queue::MergeFrom(from.queue());
  }
}

void Qos_Queues_QueueKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Queues.QueueKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Queues_QueueKey::CopyFrom(const Qos_Queues_QueueKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Queues.QueueKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Queues_QueueKey::IsInitialized() const {
  return true;
}

void Qos_Queues_QueueKey::Swap(Qos_Queues_QueueKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Queues_QueueKey::InternalSwap(Qos_Queues_QueueKey* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(queue_, other->queue_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Queues_QueueKey::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_Queues::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_Queues::kQueueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_Queues::Qos_Queues()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.Queues)
}
Qos_Queues::Qos_Queues(const Qos_Queues& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      queue_(from.queue_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.Queues)
}

void Qos_Queues::SharedCtor() {
  _cached_size_ = 0;
}

Qos_Queues::~Qos_Queues() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.Queues)
  SharedDtor();
}

void Qos_Queues::SharedDtor() {
}

void Qos_Queues::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_Queues::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_Queues& Qos_Queues::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues();
  return *internal_default_instance();
}

Qos_Queues* Qos_Queues::New(::google::protobuf::Arena* arena) const {
  Qos_Queues* n = new Qos_Queues;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_Queues::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.Queues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queue_.Clear();
  _internal_metadata_.Clear();
}

bool Qos_Queues::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.Queues)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(864215002u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .openconfig.openconfig_qos.Qos.Queues.QueueKey queue = 108026875 [(.yext.schemapath) = "/qos/queues/queue"];
      case 108026875: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 864215002 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_queue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.Queues)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.Queues)
  return false;
#undef DO_
}

void Qos_Queues::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.Queues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_qos.Qos.Queues.QueueKey queue = 108026875 [(.yext.schemapath) = "/qos/queues/queue"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->queue_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      108026875, this->queue(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.Queues)
}

::google::protobuf::uint8* Qos_Queues::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.Queues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_qos.Qos.Queues.QueueKey queue = 108026875 [(.yext.schemapath) = "/qos/queues/queue"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->queue_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        108026875, this->queue(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.Queues)
  return target;
}

size_t Qos_Queues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.Queues)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .openconfig.openconfig_qos.Qos.Queues.QueueKey queue = 108026875 [(.yext.schemapath) = "/qos/queues/queue"];
  {
    unsigned int count = static_cast<unsigned int>(this->queue_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->queue(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_Queues::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.Queues)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_Queues* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_Queues>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.Queues)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.Queues)
    MergeFrom(*source);
  }
}

void Qos_Queues::MergeFrom(const Qos_Queues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.Queues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  queue_.MergeFrom(from.queue_);
}

void Qos_Queues::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.Queues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_Queues::CopyFrom(const Qos_Queues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.Queues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_Queues::IsInitialized() const {
  return true;
}

void Qos_Queues::Swap(Qos_Queues* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_Queues::InternalSwap(Qos_Queues* other) {
  using std::swap;
  queue_.InternalSwap(&other->queue_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_Queues::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_SchedulerPolicies_SchedulerPolicy_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Config_default_instance_._instance.get_mutable()->name_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void Qos_SchedulerPolicies_SchedulerPolicy_Config::clear_name() {
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_SchedulerPolicies_SchedulerPolicy_Config::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_SchedulerPolicies_SchedulerPolicy_Config::Qos_SchedulerPolicies_SchedulerPolicy_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Config)
}
Qos_SchedulerPolicies_SchedulerPolicy_Config::Qos_SchedulerPolicies_SchedulerPolicy_Config(const Qos_SchedulerPolicies_SchedulerPolicy_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_name()) {
    name_ = new ::ywrapper::StringValue(*from.name_);
  } else {
    name_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Config)
}

void Qos_SchedulerPolicies_SchedulerPolicy_Config::SharedCtor() {
  name_ = NULL;
  _cached_size_ = 0;
}

Qos_SchedulerPolicies_SchedulerPolicy_Config::~Qos_SchedulerPolicies_SchedulerPolicy_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Config)
  SharedDtor();
}

void Qos_SchedulerPolicies_SchedulerPolicy_Config::SharedDtor() {
  if (this != internal_default_instance()) delete name_;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_SchedulerPolicies_SchedulerPolicy_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_SchedulerPolicies_SchedulerPolicy_Config& Qos_SchedulerPolicies_SchedulerPolicy_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Config();
  return *internal_default_instance();
}

Qos_SchedulerPolicies_SchedulerPolicy_Config* Qos_SchedulerPolicies_SchedulerPolicy_Config::New(::google::protobuf::Arena* arena) const {
  Qos_SchedulerPolicies_SchedulerPolicy_Config* n = new Qos_SchedulerPolicies_SchedulerPolicy_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(122448922u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue name = 15306115 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/config/name"];
      case 15306115: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 122448922 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Config)
  return false;
#undef DO_
}

void Qos_SchedulerPolicies_SchedulerPolicy_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue name = 15306115 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/config/name"];
  if (this->has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15306115, *this->name_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Config)
}

::google::protobuf::uint8* Qos_SchedulerPolicies_SchedulerPolicy_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue name = 15306115 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/config/name"];
  if (this->has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15306115, *this->name_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Config)
  return target;
}

size_t Qos_SchedulerPolicies_SchedulerPolicy_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue name = 15306115 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/config/name"];
  if (this->has_name()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->name_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_SchedulerPolicies_SchedulerPolicy_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_SchedulerPolicies_SchedulerPolicy_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Config)
    MergeFrom(*source);
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Config::MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_name()) {
    mutable_name()->::ywrapper::StringValue::MergeFrom(from.name());
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_SchedulerPolicies_SchedulerPolicy_Config::CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Config::IsInitialized() const {
  return true;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Config::Swap(Qos_SchedulerPolicies_SchedulerPolicy_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_SchedulerPolicies_SchedulerPolicy_Config::InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Config* other) {
  using std::swap;
  swap(name_, other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_SchedulerPolicies_SchedulerPolicy_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_default_instance_._instance.get_mutable()->sequence_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::clear_sequence() {
  if (GetArenaNoVirtual() == NULL && sequence_ != NULL) {
    delete sequence_;
  }
  sequence_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::kPriorityFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::kSequenceFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config)
}
Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sequence()) {
    sequence_ = new ::ywrapper::UintValue(*from.sequence_);
  } else {
    sequence_ = NULL;
  }
  ::memcpy(&priority_, &from.priority_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&priority_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config)
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::SharedCtor() {
  ::memset(&sequence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&sequence_)) + sizeof(type_));
  _cached_size_ = 0;
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config)
  SharedDtor();
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::SharedDtor() {
  if (this != internal_default_instance()) delete sequence_;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config();
  return *internal_default_instance();
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::New(::google::protobuf::Arena* arena) const {
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config* n = new Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sequence_ != NULL) {
    delete sequence_;
  }
  sequence_ = NULL;
  ::memset(&priority_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&priority_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(1515362994u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config.Priority priority = 116027193 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/priority"];
      case 116027193: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 928217544 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_priority(static_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.enums.OpenconfigQosTypesQOSSCHEDULERTYPE type = 125973545 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/type"];
      case 125973545: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 1007788360 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::openconfig::enums::OpenconfigQosTypesQOSSCHEDULERTYPE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue sequence = 189420374 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/sequence"];
      case 189420374: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 1515362994 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sequence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config)
  return false;
#undef DO_
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config.Priority priority = 116027193 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/priority"];
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      116027193, this->priority(), output);
  }

  // .openconfig.enums.OpenconfigQosTypesQOSSCHEDULERTYPE type = 125973545 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/type"];
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      125973545, this->type(), output);
  }

  // .ywrapper.UintValue sequence = 189420374 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/sequence"];
  if (this->has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      189420374, *this->sequence_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config)
}

::google::protobuf::uint8* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config.Priority priority = 116027193 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/priority"];
  if (this->priority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      116027193, this->priority(), target);
  }

  // .openconfig.enums.OpenconfigQosTypesQOSSCHEDULERTYPE type = 125973545 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/type"];
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      125973545, this->type(), target);
  }

  // .ywrapper.UintValue sequence = 189420374 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/sequence"];
  if (this->has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        189420374, *this->sequence_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config)
  return target;
}

size_t Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue sequence = 189420374 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/sequence"];
  if (this->has_sequence()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sequence_);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config.Priority priority = 116027193 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/priority"];
  if (this->priority() != 0) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->priority());
  }

  // .openconfig.enums.OpenconfigQosTypesQOSSCHEDULERTYPE type = 125973545 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/type"];
  if (this->type() != 0) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config)
    MergeFrom(*source);
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sequence()) {
    mutable_sequence()->::ywrapper::UintValue::MergeFrom(from.sequence());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::IsInitialized() const {
  return true;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config* other) {
  using std::swap;
  swap(sequence_, other->sequence_);
  swap(priority_, other->priority_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_default_instance_._instance.get_mutable()->id_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_default_instance_._instance.get_mutable()->queue_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_default_instance_._instance.get_mutable()->weight_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::clear_queue() {
  if (GetArenaNoVirtual() == NULL && queue_ != NULL) {
    delete queue_;
  }
  queue_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::clear_weight() {
  if (GetArenaNoVirtual() == NULL && weight_ != NULL) {
    delete weight_;
  }
  weight_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::kIdFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::kInputTypeFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::kQueueFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::kWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config)
}
Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_weight()) {
    weight_ = new ::ywrapper::UintValue(*from.weight_);
  } else {
    weight_ = NULL;
  }
  if (from.has_id()) {
    id_ = new ::ywrapper::StringValue(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_queue()) {
    queue_ = new ::ywrapper::StringValue(*from.queue_);
  } else {
    queue_ = NULL;
  }
  input_type_ = from.input_type_;
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config)
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::SharedCtor() {
  ::memset(&weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&input_type_) -
      reinterpret_cast<char*>(&weight_)) + sizeof(input_type_));
  _cached_size_ = 0;
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config)
  SharedDtor();
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::SharedDtor() {
  if (this != internal_default_instance()) delete weight_;
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete queue_;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config();
  return *internal_default_instance();
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::New(::google::protobuf::Arena* arena) const {
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config* n = new Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && weight_ != NULL) {
    delete weight_;
  }
  weight_ = NULL;
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  if (GetArenaNoVirtual() == NULL && queue_ != NULL) {
    delete queue_;
  }
  queue_ = NULL;
  input_type_ = 0;
  _internal_metadata_.Clear();
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3541488794u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config.InputType input_type = 323155511 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/input-type"];
      case 323155511: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 2585244088 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_input_type(static_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue weight = 396218658 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/weight"];
      case 396218658: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 3169749266 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_weight()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue id = 424446001 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/id"];
      case 424446001: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 3395568010 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue queue = 442686099 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/queue"];
      case 442686099: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 3541488794 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_queue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config)
  return false;
#undef DO_
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config.InputType input_type = 323155511 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/input-type"];
  if (this->input_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      323155511, this->input_type(), output);
  }

  // .ywrapper.UintValue weight = 396218658 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/weight"];
  if (this->has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      396218658, *this->weight_, output);
  }

  // .ywrapper.StringValue id = 424446001 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/id"];
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      424446001, *this->id_, output);
  }

  // .ywrapper.StringValue queue = 442686099 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/queue"];
  if (this->has_queue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      442686099, *this->queue_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config)
}

::google::protobuf::uint8* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config.InputType input_type = 323155511 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/input-type"];
  if (this->input_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      323155511, this->input_type(), target);
  }

  // .ywrapper.UintValue weight = 396218658 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/weight"];
  if (this->has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        396218658, *this->weight_, deterministic, target);
  }

  // .ywrapper.StringValue id = 424446001 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/id"];
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        424446001, *this->id_, deterministic, target);
  }

  // .ywrapper.StringValue queue = 442686099 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/queue"];
  if (this->has_queue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        442686099, *this->queue_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config)
  return target;
}

size_t Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue weight = 396218658 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/weight"];
  if (this->has_weight()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->weight_);
  }

  // .ywrapper.StringValue id = 424446001 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/id"];
  if (this->has_id()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->id_);
  }

  // .ywrapper.StringValue queue = 442686099 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/queue"];
  if (this->has_queue()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->queue_);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config.InputType input_type = 323155511 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/input-type"];
  if (this->input_type() != 0) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->input_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config)
    MergeFrom(*source);
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_weight()) {
    mutable_weight()->::ywrapper::UintValue::MergeFrom(from.weight());
  }
  if (from.has_id()) {
    mutable_id()->::ywrapper::StringValue::MergeFrom(from.id());
  }
  if (from.has_queue()) {
    mutable_queue()->::ywrapper::StringValue::MergeFrom(from.queue());
  }
  if (from.input_type() != 0) {
    set_input_type(from.input_type());
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::IsInitialized() const {
  return true;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config* other) {
  using std::swap;
  swap(weight_, other->weight_);
  swap(id_, other->id_);
  swap(queue_, other->queue_);
  swap(input_type_, other->input_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_default_instance_._instance.get_mutable()->id_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_default_instance_._instance.get_mutable()->queue_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_default_instance_._instance.get_mutable()->weight_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::clear_queue() {
  if (GetArenaNoVirtual() == NULL && queue_ != NULL) {
    delete queue_;
  }
  queue_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::clear_weight() {
  if (GetArenaNoVirtual() == NULL && weight_ != NULL) {
    delete weight_;
  }
  weight_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::kIdFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::kInputTypeFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::kQueueFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::kWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State)
}
Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_weight()) {
    weight_ = new ::ywrapper::UintValue(*from.weight_);
  } else {
    weight_ = NULL;
  }
  if (from.has_queue()) {
    queue_ = new ::ywrapper::StringValue(*from.queue_);
  } else {
    queue_ = NULL;
  }
  if (from.has_id()) {
    id_ = new ::ywrapper::StringValue(*from.id_);
  } else {
    id_ = NULL;
  }
  input_type_ = from.input_type_;
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State)
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::SharedCtor() {
  ::memset(&weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&input_type_) -
      reinterpret_cast<char*>(&weight_)) + sizeof(input_type_));
  _cached_size_ = 0;
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State)
  SharedDtor();
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::SharedDtor() {
  if (this != internal_default_instance()) delete weight_;
  if (this != internal_default_instance()) delete queue_;
  if (this != internal_default_instance()) delete id_;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State();
  return *internal_default_instance();
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::New(::google::protobuf::Arena* arena) const {
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State* n = new Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && weight_ != NULL) {
    delete weight_;
  }
  weight_ = NULL;
  if (GetArenaNoVirtual() == NULL && queue_ != NULL) {
    delete queue_;
  }
  queue_ = NULL;
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  input_type_ = 0;
  _internal_metadata_.Clear();
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2572019970u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue weight = 141802883 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/weight"];
      case 141802883: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 1134423066 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_weight()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State.InputType input_type = 255095878 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/input-type"];
      case 255095878: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 2040767024 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_input_type(static_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue queue = 285927912 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/queue"];
      case 285927912: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 2287423298 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_queue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue id = 321502496 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/id"];
      case 321502496: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 2572019970 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State)
  return false;
#undef DO_
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue weight = 141802883 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/weight"];
  if (this->has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      141802883, *this->weight_, output);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State.InputType input_type = 255095878 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/input-type"];
  if (this->input_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      255095878, this->input_type(), output);
  }

  // .ywrapper.StringValue queue = 285927912 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/queue"];
  if (this->has_queue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      285927912, *this->queue_, output);
  }

  // .ywrapper.StringValue id = 321502496 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/id"];
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      321502496, *this->id_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State)
}

::google::protobuf::uint8* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue weight = 141802883 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/weight"];
  if (this->has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        141802883, *this->weight_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State.InputType input_type = 255095878 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/input-type"];
  if (this->input_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      255095878, this->input_type(), target);
  }

  // .ywrapper.StringValue queue = 285927912 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/queue"];
  if (this->has_queue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        285927912, *this->queue_, deterministic, target);
  }

  // .ywrapper.StringValue id = 321502496 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/id"];
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        321502496, *this->id_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State)
  return target;
}

size_t Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue weight = 141802883 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/weight"];
  if (this->has_weight()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->weight_);
  }

  // .ywrapper.StringValue queue = 285927912 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/queue"];
  if (this->has_queue()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->queue_);
  }

  // .ywrapper.StringValue id = 321502496 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/id"];
  if (this->has_id()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->id_);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State.InputType input_type = 255095878 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/input-type"];
  if (this->input_type() != 0) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->input_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State)
    MergeFrom(*source);
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_weight()) {
    mutable_weight()->::ywrapper::UintValue::MergeFrom(from.weight());
  }
  if (from.has_queue()) {
    mutable_queue()->::ywrapper::StringValue::MergeFrom(from.queue());
  }
  if (from.has_id()) {
    mutable_id()->::ywrapper::StringValue::MergeFrom(from.id());
  }
  if (from.input_type() != 0) {
    set_input_type(from.input_type());
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::IsInitialized() const {
  return true;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State* other) {
  using std::swap;
  swap(weight_, other->weight_);
  swap(queue_, other->queue_);
  swap(id_, other->id_);
  swap(input_type_, other->input_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config*>(
      ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State*>(
      ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input::kConfigFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input)
}
Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input)
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&state_)) + sizeof(config_));
  _cached_size_ = 0;
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input::~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input)
  SharedDtor();
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete config_;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input();
  return *internal_default_instance();
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input::New(::google::protobuf::Arena* arena) const {
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input* n = new Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2903334970u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State state = 308364152 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state"];
      case 308364152: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 2466913218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config config = 362916871 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config"];
      case 362916871: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 2903334970 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input)
  return false;
#undef DO_
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State state = 308364152 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      308364152, *this->state_, output);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config config = 362916871 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      362916871, *this->config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input)
}

::google::protobuf::uint8* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State state = 308364152 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        308364152, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config config = 362916871 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        362916871, *this->config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input)
  return target;
}

size_t Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State state = 308364152 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config config = 362916871 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input)
    MergeFrom(*source);
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input::MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::MergeFrom(from.state());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::MergeFrom(from.config());
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input::CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input::IsInitialized() const {
  return true;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input::Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input::InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(config_, other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey_default_instance_._instance.get_mutable()->input_ = const_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input*>(
      ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::kIdFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::kInputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey)
}
Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_input()) {
    input_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input(*from.input_);
  } else {
    input_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey)
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_ = NULL;
  _cached_size_ = 0;
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey)
  SharedDtor();
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete input_;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey();
  return *internal_default_instance();
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::New(::google::protobuf::Arena* arena) const {
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey* n = new Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && input_ != NULL) {
    delete input_;
  }
  input_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/id"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input input = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_input()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey)
  return false;
#undef DO_
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/id"];
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input input = 2;
  if (this->has_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->input_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey)
}

::google::protobuf::uint8* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/id"];
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input input = 2;
  if (this->has_input()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->input_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey)
  return target;
}

size_t Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 1 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input input = 2;
  if (this->has_input()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->input_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey)
    MergeFrom(*source);
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_input()) {
    mutable_input()->::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input::MergeFrom(from.input());
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::IsInitialized() const {
  return true;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey* other) {
  using std::swap;
  id_.Swap(&other->id_);
  swap(input_, other->input_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs::kInputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs)
}
Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      input_(from.input_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs)
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs::SharedCtor() {
  _cached_size_ = 0;
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs::~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs)
  SharedDtor();
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs::SharedDtor() {
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs();
  return *internal_default_instance();
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs::New(::google::protobuf::Arena* arena) const {
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs* n = new Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_.Clear();
  _internal_metadata_.Clear();
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(1797535794u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey input = 224691974 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input"];
      case 224691974: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 1797535794 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_input()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs)
  return false;
#undef DO_
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey input = 224691974 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->input_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      224691974, this->input(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs)
}

::google::protobuf::uint8* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey input = 224691974 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->input_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        224691974, this->input(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs)
  return target;
}

size_t Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey input = 224691974 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input"];
  {
    unsigned int count = static_cast<unsigned int>(this->input_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->input(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs)
    MergeFrom(*source);
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs::MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_.MergeFrom(from.input_);
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs::CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs::IsInitialized() const {
  return true;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs::Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs::InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs* other) {
  using std::swap;
  input_.InternalSwap(&other->input_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config_default_instance_._instance.get_mutable()->bc_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config_default_instance_._instance.get_mutable()->cir_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config_default_instance_._instance.get_mutable()->cir_pct_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config_default_instance_._instance.get_mutable()->cir_pct_remaining_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config_default_instance_._instance.get_mutable()->max_queue_depth_bytes_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config_default_instance_._instance.get_mutable()->max_queue_depth_packets_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config_default_instance_._instance.get_mutable()->max_queue_depth_percent_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::clear_bc() {
  if (GetArenaNoVirtual() == NULL && bc_ != NULL) {
    delete bc_;
  }
  bc_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::clear_cir() {
  if (GetArenaNoVirtual() == NULL && cir_ != NULL) {
    delete cir_;
  }
  cir_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::clear_cir_pct() {
  if (GetArenaNoVirtual() == NULL && cir_pct_ != NULL) {
    delete cir_pct_;
  }
  cir_pct_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::clear_cir_pct_remaining() {
  if (GetArenaNoVirtual() == NULL && cir_pct_remaining_ != NULL) {
    delete cir_pct_remaining_;
  }
  cir_pct_remaining_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::clear_max_queue_depth_bytes() {
  if (GetArenaNoVirtual() == NULL && max_queue_depth_bytes_ != NULL) {
    delete max_queue_depth_bytes_;
  }
  max_queue_depth_bytes_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::clear_max_queue_depth_packets() {
  if (GetArenaNoVirtual() == NULL && max_queue_depth_packets_ != NULL) {
    delete max_queue_depth_packets_;
  }
  max_queue_depth_packets_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::clear_max_queue_depth_percent() {
  if (GetArenaNoVirtual() == NULL && max_queue_depth_percent_ != NULL) {
    delete max_queue_depth_percent_;
  }
  max_queue_depth_percent_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::kBcFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::kCirFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::kCirPctFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::kCirPctRemainingFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::kMaxQueueDepthBytesFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::kMaxQueueDepthPacketsFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::kMaxQueueDepthPercentFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::kQueuingBehaviorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config)
}
Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_max_queue_depth_packets()) {
    max_queue_depth_packets_ = new ::ywrapper::UintValue(*from.max_queue_depth_packets_);
  } else {
    max_queue_depth_packets_ = NULL;
  }
  if (from.has_bc()) {
    bc_ = new ::ywrapper::UintValue(*from.bc_);
  } else {
    bc_ = NULL;
  }
  if (from.has_cir_pct_remaining()) {
    cir_pct_remaining_ = new ::ywrapper::UintValue(*from.cir_pct_remaining_);
  } else {
    cir_pct_remaining_ = NULL;
  }
  if (from.has_max_queue_depth_bytes()) {
    max_queue_depth_bytes_ = new ::ywrapper::UintValue(*from.max_queue_depth_bytes_);
  } else {
    max_queue_depth_bytes_ = NULL;
  }
  if (from.has_cir_pct()) {
    cir_pct_ = new ::ywrapper::UintValue(*from.cir_pct_);
  } else {
    cir_pct_ = NULL;
  }
  if (from.has_max_queue_depth_percent()) {
    max_queue_depth_percent_ = new ::ywrapper::UintValue(*from.max_queue_depth_percent_);
  } else {
    max_queue_depth_percent_ = NULL;
  }
  if (from.has_cir()) {
    cir_ = new ::ywrapper::UintValue(*from.cir_);
  } else {
    cir_ = NULL;
  }
  queuing_behavior_ = from.queuing_behavior_;
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config)
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::SharedCtor() {
  ::memset(&max_queue_depth_packets_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&queuing_behavior_) -
      reinterpret_cast<char*>(&max_queue_depth_packets_)) + sizeof(queuing_behavior_));
  _cached_size_ = 0;
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config)
  SharedDtor();
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::SharedDtor() {
  if (this != internal_default_instance()) delete max_queue_depth_packets_;
  if (this != internal_default_instance()) delete bc_;
  if (this != internal_default_instance()) delete cir_pct_remaining_;
  if (this != internal_default_instance()) delete max_queue_depth_bytes_;
  if (this != internal_default_instance()) delete cir_pct_;
  if (this != internal_default_instance()) delete max_queue_depth_percent_;
  if (this != internal_default_instance()) delete cir_;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config();
  return *internal_default_instance();
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::New(::google::protobuf::Arena* arena) const {
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config* n = new Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && max_queue_depth_packets_ != NULL) {
    delete max_queue_depth_packets_;
  }
  max_queue_depth_packets_ = NULL;
  if (GetArenaNoVirtual() == NULL && bc_ != NULL) {
    delete bc_;
  }
  bc_ = NULL;
  if (GetArenaNoVirtual() == NULL && cir_pct_remaining_ != NULL) {
    delete cir_pct_remaining_;
  }
  cir_pct_remaining_ = NULL;
  if (GetArenaNoVirtual() == NULL && max_queue_depth_bytes_ != NULL) {
    delete max_queue_depth_bytes_;
  }
  max_queue_depth_bytes_ = NULL;
  if (GetArenaNoVirtual() == NULL && cir_pct_ != NULL) {
    delete cir_pct_;
  }
  cir_pct_ = NULL;
  if (GetArenaNoVirtual() == NULL && max_queue_depth_percent_ != NULL) {
    delete max_queue_depth_percent_;
  }
  max_queue_depth_percent_ = NULL;
  if (GetArenaNoVirtual() == NULL && cir_ != NULL) {
    delete cir_;
  }
  cir_ = NULL;
  queuing_behavior_ = 0;
  _internal_metadata_.Clear();
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3957999346u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue max_queue_depth_packets = 38247640 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/max-queue-depth-packets"];
      case 38247640: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 305981122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_max_queue_depth_packets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.enums.OpenconfigQosQueueBehavior queuing_behavior = 78239583 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/queuing-behavior"];
      case 78239583: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 625916664 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_queuing_behavior(static_cast< ::openconfig::enums::OpenconfigQosQueueBehavior >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue bc = 100183769 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/bc"];
      case 100183769: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 801470154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue cir_pct_remaining = 206933707 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/cir-pct-remaining"];
      case 206933707: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 1655469658 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cir_pct_remaining()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue max_queue_depth_bytes = 279197854 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/max-queue-depth-bytes"];
      case 279197854: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 2233582834 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_max_queue_depth_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue cir_pct = 315109376 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/cir-pct"];
      case 315109376: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 2520875010 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cir_pct()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue max_queue_depth_percent = 466868204 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/max-queue-depth-percent"];
      case 466868204: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 3734945634 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_max_queue_depth_percent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue cir = 494749918 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/cir"];
      case 494749918: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 3957999346 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cir()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config)
  return false;
#undef DO_
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue max_queue_depth_packets = 38247640 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/max-queue-depth-packets"];
  if (this->has_max_queue_depth_packets()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38247640, *this->max_queue_depth_packets_, output);
  }

  // .openconfig.enums.OpenconfigQosQueueBehavior queuing_behavior = 78239583 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/queuing-behavior"];
  if (this->queuing_behavior() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      78239583, this->queuing_behavior(), output);
  }

  // .ywrapper.UintValue bc = 100183769 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/bc"];
  if (this->has_bc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100183769, *this->bc_, output);
  }

  // .ywrapper.UintValue cir_pct_remaining = 206933707 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/cir-pct-remaining"];
  if (this->has_cir_pct_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      206933707, *this->cir_pct_remaining_, output);
  }

  // .ywrapper.UintValue max_queue_depth_bytes = 279197854 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/max-queue-depth-bytes"];
  if (this->has_max_queue_depth_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      279197854, *this->max_queue_depth_bytes_, output);
  }

  // .ywrapper.UintValue cir_pct = 315109376 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/cir-pct"];
  if (this->has_cir_pct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      315109376, *this->cir_pct_, output);
  }

  // .ywrapper.UintValue max_queue_depth_percent = 466868204 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/max-queue-depth-percent"];
  if (this->has_max_queue_depth_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      466868204, *this->max_queue_depth_percent_, output);
  }

  // .ywrapper.UintValue cir = 494749918 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/cir"];
  if (this->has_cir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      494749918, *this->cir_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config)
}

::google::protobuf::uint8* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue max_queue_depth_packets = 38247640 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/max-queue-depth-packets"];
  if (this->has_max_queue_depth_packets()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        38247640, *this->max_queue_depth_packets_, deterministic, target);
  }

  // .openconfig.enums.OpenconfigQosQueueBehavior queuing_behavior = 78239583 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/queuing-behavior"];
  if (this->queuing_behavior() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      78239583, this->queuing_behavior(), target);
  }

  // .ywrapper.UintValue bc = 100183769 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/bc"];
  if (this->has_bc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100183769, *this->bc_, deterministic, target);
  }

  // .ywrapper.UintValue cir_pct_remaining = 206933707 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/cir-pct-remaining"];
  if (this->has_cir_pct_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        206933707, *this->cir_pct_remaining_, deterministic, target);
  }

  // .ywrapper.UintValue max_queue_depth_bytes = 279197854 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/max-queue-depth-bytes"];
  if (this->has_max_queue_depth_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        279197854, *this->max_queue_depth_bytes_, deterministic, target);
  }

  // .ywrapper.UintValue cir_pct = 315109376 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/cir-pct"];
  if (this->has_cir_pct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        315109376, *this->cir_pct_, deterministic, target);
  }

  // .ywrapper.UintValue max_queue_depth_percent = 466868204 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/max-queue-depth-percent"];
  if (this->has_max_queue_depth_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        466868204, *this->max_queue_depth_percent_, deterministic, target);
  }

  // .ywrapper.UintValue cir = 494749918 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/cir"];
  if (this->has_cir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        494749918, *this->cir_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config)
  return target;
}

size_t Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue max_queue_depth_packets = 38247640 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/max-queue-depth-packets"];
  if (this->has_max_queue_depth_packets()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->max_queue_depth_packets_);
  }

  // .ywrapper.UintValue bc = 100183769 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/bc"];
  if (this->has_bc()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->bc_);
  }

  // .ywrapper.UintValue cir_pct_remaining = 206933707 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/cir-pct-remaining"];
  if (this->has_cir_pct_remaining()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cir_pct_remaining_);
  }

  // .ywrapper.UintValue max_queue_depth_bytes = 279197854 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/max-queue-depth-bytes"];
  if (this->has_max_queue_depth_bytes()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->max_queue_depth_bytes_);
  }

  // .ywrapper.UintValue cir_pct = 315109376 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/cir-pct"];
  if (this->has_cir_pct()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cir_pct_);
  }

  // .ywrapper.UintValue max_queue_depth_percent = 466868204 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/max-queue-depth-percent"];
  if (this->has_max_queue_depth_percent()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->max_queue_depth_percent_);
  }

  // .ywrapper.UintValue cir = 494749918 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/cir"];
  if (this->has_cir()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cir_);
  }

  // .openconfig.enums.OpenconfigQosQueueBehavior queuing_behavior = 78239583 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/queuing-behavior"];
  if (this->queuing_behavior() != 0) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->queuing_behavior());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config)
    MergeFrom(*source);
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_max_queue_depth_packets()) {
    mutable_max_queue_depth_packets()->::ywrapper::UintValue::MergeFrom(from.max_queue_depth_packets());
  }
  if (from.has_bc()) {
    mutable_bc()->::ywrapper::UintValue::MergeFrom(from.bc());
  }
  if (from.has_cir_pct_remaining()) {
    mutable_cir_pct_remaining()->::ywrapper::UintValue::MergeFrom(from.cir_pct_remaining());
  }
  if (from.has_max_queue_depth_bytes()) {
    mutable_max_queue_depth_bytes()->::ywrapper::UintValue::MergeFrom(from.max_queue_depth_bytes());
  }
  if (from.has_cir_pct()) {
    mutable_cir_pct()->::ywrapper::UintValue::MergeFrom(from.cir_pct());
  }
  if (from.has_max_queue_depth_percent()) {
    mutable_max_queue_depth_percent()->::ywrapper::UintValue::MergeFrom(from.max_queue_depth_percent());
  }
  if (from.has_cir()) {
    mutable_cir()->::ywrapper::UintValue::MergeFrom(from.cir());
  }
  if (from.queuing_behavior() != 0) {
    set_queuing_behavior(from.queuing_behavior());
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::IsInitialized() const {
  return true;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config* other) {
  using std::swap;
  swap(max_queue_depth_packets_, other->max_queue_depth_packets_);
  swap(bc_, other->bc_);
  swap(cir_pct_remaining_, other->cir_pct_remaining_);
  swap(max_queue_depth_bytes_, other->max_queue_depth_bytes_);
  swap(cir_pct_, other->cir_pct_);
  swap(max_queue_depth_percent_, other->max_queue_depth_percent_);
  swap(cir_, other->cir_);
  swap(queuing_behavior_, other->queuing_behavior_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config_default_instance_._instance.get_mutable()->set_dot1p_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config_default_instance_._instance.get_mutable()->set_dscp_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config_default_instance_._instance.get_mutable()->set_mpls_tc_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::clear_set_dot1p() {
  if (GetArenaNoVirtual() == NULL && set_dot1p_ != NULL) {
    delete set_dot1p_;
  }
  set_dot1p_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::clear_set_dscp() {
  if (GetArenaNoVirtual() == NULL && set_dscp_ != NULL) {
    delete set_dscp_;
  }
  set_dscp_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::clear_set_mpls_tc() {
  if (GetArenaNoVirtual() == NULL && set_mpls_tc_ != NULL) {
    delete set_mpls_tc_;
  }
  set_mpls_tc_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::kSetDot1PFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::kSetDscpFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::kSetMplsTcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config)
}
Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_set_dscp()) {
    set_dscp_ = new ::ywrapper::UintValue(*from.set_dscp_);
  } else {
    set_dscp_ = NULL;
  }
  if (from.has_set_dot1p()) {
    set_dot1p_ = new ::ywrapper::UintValue(*from.set_dot1p_);
  } else {
    set_dot1p_ = NULL;
  }
  if (from.has_set_mpls_tc()) {
    set_mpls_tc_ = new ::ywrapper::UintValue(*from.set_mpls_tc_);
  } else {
    set_mpls_tc_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config)
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::SharedCtor() {
  ::memset(&set_dscp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&set_mpls_tc_) -
      reinterpret_cast<char*>(&set_dscp_)) + sizeof(set_mpls_tc_));
  _cached_size_ = 0;
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config)
  SharedDtor();
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::SharedDtor() {
  if (this != internal_default_instance()) delete set_dscp_;
  if (this != internal_default_instance()) delete set_dot1p_;
  if (this != internal_default_instance()) delete set_mpls_tc_;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config();
  return *internal_default_instance();
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::New(::google::protobuf::Arena* arena) const {
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config* n = new Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && set_dscp_ != NULL) {
    delete set_dscp_;
  }
  set_dscp_ = NULL;
  if (GetArenaNoVirtual() == NULL && set_dot1p_ != NULL) {
    delete set_dot1p_;
  }
  set_dot1p_ = NULL;
  if (GetArenaNoVirtual() == NULL && set_mpls_tc_ != NULL) {
    delete set_mpls_tc_;
  }
  set_mpls_tc_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3256559002u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue set_dscp = 274036909 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/config/set-dscp"];
      case 274036909: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 2192295274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_dscp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue set_dot1p = 347963663 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/config/set-dot1p"];
      case 347963663: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 2783709306 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_dot1p()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue set_mpls_tc = 407069875 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/config/set-mpls-tc"];
      case 407069875: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 3256559002 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_mpls_tc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config)
  return false;
#undef DO_
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue set_dscp = 274036909 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/config/set-dscp"];
  if (this->has_set_dscp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      274036909, *this->set_dscp_, output);
  }

  // .ywrapper.UintValue set_dot1p = 347963663 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/config/set-dot1p"];
  if (this->has_set_dot1p()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      347963663, *this->set_dot1p_, output);
  }

  // .ywrapper.UintValue set_mpls_tc = 407069875 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/config/set-mpls-tc"];
  if (this->has_set_mpls_tc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      407069875, *this->set_mpls_tc_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config)
}

::google::protobuf::uint8* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue set_dscp = 274036909 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/config/set-dscp"];
  if (this->has_set_dscp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        274036909, *this->set_dscp_, deterministic, target);
  }

  // .ywrapper.UintValue set_dot1p = 347963663 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/config/set-dot1p"];
  if (this->has_set_dot1p()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        347963663, *this->set_dot1p_, deterministic, target);
  }

  // .ywrapper.UintValue set_mpls_tc = 407069875 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/config/set-mpls-tc"];
  if (this->has_set_mpls_tc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        407069875, *this->set_mpls_tc_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config)
  return target;
}

size_t Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue set_dscp = 274036909 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/config/set-dscp"];
  if (this->has_set_dscp()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->set_dscp_);
  }

  // .ywrapper.UintValue set_dot1p = 347963663 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/config/set-dot1p"];
  if (this->has_set_dot1p()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->set_dot1p_);
  }

  // .ywrapper.UintValue set_mpls_tc = 407069875 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/config/set-mpls-tc"];
  if (this->has_set_mpls_tc()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->set_mpls_tc_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config)
    MergeFrom(*source);
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_set_dscp()) {
    mutable_set_dscp()->::ywrapper::UintValue::MergeFrom(from.set_dscp());
  }
  if (from.has_set_dot1p()) {
    mutable_set_dot1p()->::ywrapper::UintValue::MergeFrom(from.set_dot1p());
  }
  if (from.has_set_mpls_tc()) {
    mutable_set_mpls_tc()->::ywrapper::UintValue::MergeFrom(from.set_mpls_tc());
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::IsInitialized() const {
  return true;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config* other) {
  using std::swap;
  swap(set_dscp_, other->set_dscp_);
  swap(set_dot1p_, other->set_dot1p_);
  swap(set_mpls_tc_, other->set_mpls_tc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State_default_instance_._instance.get_mutable()->set_dot1p_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State_default_instance_._instance.get_mutable()->set_dscp_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State_default_instance_._instance.get_mutable()->set_mpls_tc_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::clear_set_dot1p() {
  if (GetArenaNoVirtual() == NULL && set_dot1p_ != NULL) {
    delete set_dot1p_;
  }
  set_dot1p_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::clear_set_dscp() {
  if (GetArenaNoVirtual() == NULL && set_dscp_ != NULL) {
    delete set_dscp_;
  }
  set_dscp_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::clear_set_mpls_tc() {
  if (GetArenaNoVirtual() == NULL && set_mpls_tc_ != NULL) {
    delete set_mpls_tc_;
  }
  set_mpls_tc_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::kSetDot1PFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::kSetDscpFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::kSetMplsTcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State)
}
Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_set_dscp()) {
    set_dscp_ = new ::ywrapper::UintValue(*from.set_dscp_);
  } else {
    set_dscp_ = NULL;
  }
  if (from.has_set_mpls_tc()) {
    set_mpls_tc_ = new ::ywrapper::UintValue(*from.set_mpls_tc_);
  } else {
    set_mpls_tc_ = NULL;
  }
  if (from.has_set_dot1p()) {
    set_dot1p_ = new ::ywrapper::UintValue(*from.set_dot1p_);
  } else {
    set_dot1p_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State)
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::SharedCtor() {
  ::memset(&set_dscp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&set_dot1p_) -
      reinterpret_cast<char*>(&set_dscp_)) + sizeof(set_dot1p_));
  _cached_size_ = 0;
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State)
  SharedDtor();
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::SharedDtor() {
  if (this != internal_default_instance()) delete set_dscp_;
  if (this != internal_default_instance()) delete set_mpls_tc_;
  if (this != internal_default_instance()) delete set_dot1p_;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State();
  return *internal_default_instance();
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::New(::google::protobuf::Arena* arena) const {
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State* n = new Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && set_dscp_ != NULL) {
    delete set_dscp_;
  }
  set_dscp_ = NULL;
  if (GetArenaNoVirtual() == NULL && set_mpls_tc_ != NULL) {
    delete set_mpls_tc_;
  }
  set_mpls_tc_ = NULL;
  if (GetArenaNoVirtual() == NULL && set_dot1p_ != NULL) {
    delete set_dot1p_;
  }
  set_dot1p_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3048090562u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue set_dscp = 167728608 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-dscp"];
      case 167728608: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 1341828866 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_dscp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue set_mpls_tc = 205338668 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-mpls-tc"];
      case 205338668: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 1642709346 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_mpls_tc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue set_dot1p = 381011320 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-dot1p"];
      case 381011320: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 3048090562 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_dot1p()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State)
  return false;
#undef DO_
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue set_dscp = 167728608 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-dscp"];
  if (this->has_set_dscp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      167728608, *this->set_dscp_, output);
  }

  // .ywrapper.UintValue set_mpls_tc = 205338668 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-mpls-tc"];
  if (this->has_set_mpls_tc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      205338668, *this->set_mpls_tc_, output);
  }

  // .ywrapper.UintValue set_dot1p = 381011320 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-dot1p"];
  if (this->has_set_dot1p()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      381011320, *this->set_dot1p_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State)
}

::google::protobuf::uint8* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue set_dscp = 167728608 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-dscp"];
  if (this->has_set_dscp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        167728608, *this->set_dscp_, deterministic, target);
  }

  // .ywrapper.UintValue set_mpls_tc = 205338668 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-mpls-tc"];
  if (this->has_set_mpls_tc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        205338668, *this->set_mpls_tc_, deterministic, target);
  }

  // .ywrapper.UintValue set_dot1p = 381011320 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-dot1p"];
  if (this->has_set_dot1p()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        381011320, *this->set_dot1p_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State)
  return target;
}

size_t Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue set_dscp = 167728608 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-dscp"];
  if (this->has_set_dscp()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->set_dscp_);
  }

  // .ywrapper.UintValue set_mpls_tc = 205338668 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-mpls-tc"];
  if (this->has_set_mpls_tc()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->set_mpls_tc_);
  }

  // .ywrapper.UintValue set_dot1p = 381011320 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-dot1p"];
  if (this->has_set_dot1p()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->set_dot1p_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State)
    MergeFrom(*source);
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_set_dscp()) {
    mutable_set_dscp()->::ywrapper::UintValue::MergeFrom(from.set_dscp());
  }
  if (from.has_set_mpls_tc()) {
    mutable_set_mpls_tc()->::ywrapper::UintValue::MergeFrom(from.set_mpls_tc());
  }
  if (from.has_set_dot1p()) {
    mutable_set_dot1p()->::ywrapper::UintValue::MergeFrom(from.set_dot1p());
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::IsInitialized() const {
  return true;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State* other) {
  using std::swap;
  swap(set_dscp_, other->set_dscp_);
  swap(set_mpls_tc_, other->set_mpls_tc_);
  swap(set_dot1p_, other->set_dot1p_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config*>(
      ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State*>(
      ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction::kConfigFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction)
}
Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction)
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction::SharedCtor() {
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&config_)) + sizeof(state_));
  _cached_size_ = 0;
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction::~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction)
  SharedDtor();
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction();
  return *internal_default_instance();
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction::New(::google::protobuf::Arena* arena) const {
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction* n = new Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3904853378u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config config = 263196799 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/config"];
      case 263196799: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 2105574394 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State state = 488106672 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state"];
      case 488106672: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 3904853378 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction)
  return false;
#undef DO_
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config config = 263196799 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      263196799, *this->config_, output);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State state = 488106672 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      488106672, *this->state_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction)
}

::google::protobuf::uint8* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config config = 263196799 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        263196799, *this->config_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State state = 488106672 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        488106672, *this->state_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction)
  return target;
}

size_t Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config config = 263196799 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State state = 488106672 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction)
    MergeFrom(*source);
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction::MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::MergeFrom(from.config());
  }
  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::MergeFrom(from.state());
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction::CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction::IsInitialized() const {
  return true;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction::Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction::InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction* other) {
  using std::swap;
  swap(config_, other->config_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config_default_instance_._instance.get_mutable()->drop_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config_default_instance_._instance.get_mutable()->set_dot1p_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config_default_instance_._instance.get_mutable()->set_dscp_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config_default_instance_._instance.get_mutable()->set_mpls_tc_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::clear_drop() {
  if (GetArenaNoVirtual() == NULL && drop_ != NULL) {
    delete drop_;
  }
  drop_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::clear_set_dot1p() {
  if (GetArenaNoVirtual() == NULL && set_dot1p_ != NULL) {
    delete set_dot1p_;
  }
  set_dot1p_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::clear_set_dscp() {
  if (GetArenaNoVirtual() == NULL && set_dscp_ != NULL) {
    delete set_dscp_;
  }
  set_dscp_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::clear_set_mpls_tc() {
  if (GetArenaNoVirtual() == NULL && set_mpls_tc_ != NULL) {
    delete set_mpls_tc_;
  }
  set_mpls_tc_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::kDropFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::kSetDot1PFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::kSetDscpFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::kSetMplsTcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config)
}
Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_set_dscp()) {
    set_dscp_ = new ::ywrapper::UintValue(*from.set_dscp_);
  } else {
    set_dscp_ = NULL;
  }
  if (from.has_drop()) {
    drop_ = new ::ywrapper::BoolValue(*from.drop_);
  } else {
    drop_ = NULL;
  }
  if (from.has_set_mpls_tc()) {
    set_mpls_tc_ = new ::ywrapper::UintValue(*from.set_mpls_tc_);
  } else {
    set_mpls_tc_ = NULL;
  }
  if (from.has_set_dot1p()) {
    set_dot1p_ = new ::ywrapper::UintValue(*from.set_dot1p_);
  } else {
    set_dot1p_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config)
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::SharedCtor() {
  ::memset(&set_dscp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&set_dot1p_) -
      reinterpret_cast<char*>(&set_dscp_)) + sizeof(set_dot1p_));
  _cached_size_ = 0;
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config)
  SharedDtor();
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::SharedDtor() {
  if (this != internal_default_instance()) delete set_dscp_;
  if (this != internal_default_instance()) delete drop_;
  if (this != internal_default_instance()) delete set_mpls_tc_;
  if (this != internal_default_instance()) delete set_dot1p_;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config();
  return *internal_default_instance();
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::New(::google::protobuf::Arena* arena) const {
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config* n = new Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && set_dscp_ != NULL) {
    delete set_dscp_;
  }
  set_dscp_ = NULL;
  if (GetArenaNoVirtual() == NULL && drop_ != NULL) {
    delete drop_;
  }
  drop_ = NULL;
  if (GetArenaNoVirtual() == NULL && set_mpls_tc_ != NULL) {
    delete set_mpls_tc_;
  }
  set_mpls_tc_ = NULL;
  if (GetArenaNoVirtual() == NULL && set_dot1p_ != NULL) {
    delete set_dot1p_;
  }
  set_dot1p_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3454389722u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue set_dscp = 70544401 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config/set-dscp"];
      case 70544401: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 564355210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_dscp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue drop = 131419485 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config/drop"];
      case 131419485: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 1051355882 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_drop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue set_mpls_tc = 156774487 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config/set-mpls-tc"];
      case 156774487: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 1254195898 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_mpls_tc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue set_dot1p = 431798715 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config/set-dot1p"];
      case 431798715: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 3454389722 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_dot1p()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config)
  return false;
#undef DO_
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue set_dscp = 70544401 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config/set-dscp"];
  if (this->has_set_dscp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      70544401, *this->set_dscp_, output);
  }

  // .ywrapper.BoolValue drop = 131419485 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config/drop"];
  if (this->has_drop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      131419485, *this->drop_, output);
  }

  // .ywrapper.UintValue set_mpls_tc = 156774487 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config/set-mpls-tc"];
  if (this->has_set_mpls_tc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      156774487, *this->set_mpls_tc_, output);
  }

  // .ywrapper.UintValue set_dot1p = 431798715 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config/set-dot1p"];
  if (this->has_set_dot1p()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      431798715, *this->set_dot1p_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config)
}

::google::protobuf::uint8* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue set_dscp = 70544401 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config/set-dscp"];
  if (this->has_set_dscp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        70544401, *this->set_dscp_, deterministic, target);
  }

  // .ywrapper.BoolValue drop = 131419485 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config/drop"];
  if (this->has_drop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        131419485, *this->drop_, deterministic, target);
  }

  // .ywrapper.UintValue set_mpls_tc = 156774487 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config/set-mpls-tc"];
  if (this->has_set_mpls_tc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        156774487, *this->set_mpls_tc_, deterministic, target);
  }

  // .ywrapper.UintValue set_dot1p = 431798715 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config/set-dot1p"];
  if (this->has_set_dot1p()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        431798715, *this->set_dot1p_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config)
  return target;
}

size_t Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue set_dscp = 70544401 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config/set-dscp"];
  if (this->has_set_dscp()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->set_dscp_);
  }

  // .ywrapper.BoolValue drop = 131419485 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config/drop"];
  if (this->has_drop()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->drop_);
  }

  // .ywrapper.UintValue set_mpls_tc = 156774487 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config/set-mpls-tc"];
  if (this->has_set_mpls_tc()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->set_mpls_tc_);
  }

  // .ywrapper.UintValue set_dot1p = 431798715 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config/set-dot1p"];
  if (this->has_set_dot1p()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->set_dot1p_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config)
    MergeFrom(*source);
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_set_dscp()) {
    mutable_set_dscp()->::ywrapper::UintValue::MergeFrom(from.set_dscp());
  }
  if (from.has_drop()) {
    mutable_drop()->::ywrapper::BoolValue::MergeFrom(from.drop());
  }
  if (from.has_set_mpls_tc()) {
    mutable_set_mpls_tc()->::ywrapper::UintValue::MergeFrom(from.set_mpls_tc());
  }
  if (from.has_set_dot1p()) {
    mutable_set_dot1p()->::ywrapper::UintValue::MergeFrom(from.set_dot1p());
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::IsInitialized() const {
  return true;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config* other) {
  using std::swap;
  swap(set_dscp_, other->set_dscp_);
  swap(drop_, other->drop_);
  swap(set_mpls_tc_, other->set_mpls_tc_);
  swap(set_dot1p_, other->set_dot1p_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State_default_instance_._instance.get_mutable()->drop_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State_default_instance_._instance.get_mutable()->set_dot1p_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State_default_instance_._instance.get_mutable()->set_dscp_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State_default_instance_._instance.get_mutable()->set_mpls_tc_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::clear_drop() {
  if (GetArenaNoVirtual() == NULL && drop_ != NULL) {
    delete drop_;
  }
  drop_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::clear_set_dot1p() {
  if (GetArenaNoVirtual() == NULL && set_dot1p_ != NULL) {
    delete set_dot1p_;
  }
  set_dot1p_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::clear_set_dscp() {
  if (GetArenaNoVirtual() == NULL && set_dscp_ != NULL) {
    delete set_dscp_;
  }
  set_dscp_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::clear_set_mpls_tc() {
  if (GetArenaNoVirtual() == NULL && set_mpls_tc_ != NULL) {
    delete set_mpls_tc_;
  }
  set_mpls_tc_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::kDropFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::kSetDot1PFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::kSetDscpFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::kSetMplsTcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State)
}
Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_set_mpls_tc()) {
    set_mpls_tc_ = new ::ywrapper::UintValue(*from.set_mpls_tc_);
  } else {
    set_mpls_tc_ = NULL;
  }
  if (from.has_set_dot1p()) {
    set_dot1p_ = new ::ywrapper::UintValue(*from.set_dot1p_);
  } else {
    set_dot1p_ = NULL;
  }
  if (from.has_drop()) {
    drop_ = new ::ywrapper::BoolValue(*from.drop_);
  } else {
    drop_ = NULL;
  }
  if (from.has_set_dscp()) {
    set_dscp_ = new ::ywrapper::UintValue(*from.set_dscp_);
  } else {
    set_dscp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State)
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::SharedCtor() {
  ::memset(&set_mpls_tc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&set_dscp_) -
      reinterpret_cast<char*>(&set_mpls_tc_)) + sizeof(set_dscp_));
  _cached_size_ = 0;
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State)
  SharedDtor();
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::SharedDtor() {
  if (this != internal_default_instance()) delete set_mpls_tc_;
  if (this != internal_default_instance()) delete set_dot1p_;
  if (this != internal_default_instance()) delete drop_;
  if (this != internal_default_instance()) delete set_dscp_;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State();
  return *internal_default_instance();
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::New(::google::protobuf::Arena* arena) const {
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State* n = new Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && set_mpls_tc_ != NULL) {
    delete set_mpls_tc_;
  }
  set_mpls_tc_ = NULL;
  if (GetArenaNoVirtual() == NULL && set_dot1p_ != NULL) {
    delete set_dot1p_;
  }
  set_dot1p_ = NULL;
  if (GetArenaNoVirtual() == NULL && drop_ != NULL) {
    delete drop_;
  }
  drop_ = NULL;
  if (GetArenaNoVirtual() == NULL && set_dscp_ != NULL) {
    delete set_dscp_;
  }
  set_dscp_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4002206242u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue set_mpls_tc = 94135584 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-mpls-tc"];
      case 94135584: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 753084674 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_mpls_tc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue set_dot1p = 132458132 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-dot1p"];
      case 132458132: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 1059665058 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_dot1p()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue drop = 168830944 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/drop"];
      case 168830944: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 1350647554 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_drop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue set_dscp = 500275780 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-dscp"];
      case 500275780: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 4002206242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_dscp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State)
  return false;
#undef DO_
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue set_mpls_tc = 94135584 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-mpls-tc"];
  if (this->has_set_mpls_tc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      94135584, *this->set_mpls_tc_, output);
  }

  // .ywrapper.UintValue set_dot1p = 132458132 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-dot1p"];
  if (this->has_set_dot1p()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      132458132, *this->set_dot1p_, output);
  }

  // .ywrapper.BoolValue drop = 168830944 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/drop"];
  if (this->has_drop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      168830944, *this->drop_, output);
  }

  // .ywrapper.UintValue set_dscp = 500275780 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-dscp"];
  if (this->has_set_dscp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      500275780, *this->set_dscp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State)
}

::google::protobuf::uint8* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue set_mpls_tc = 94135584 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-mpls-tc"];
  if (this->has_set_mpls_tc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        94135584, *this->set_mpls_tc_, deterministic, target);
  }

  // .ywrapper.UintValue set_dot1p = 132458132 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-dot1p"];
  if (this->has_set_dot1p()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        132458132, *this->set_dot1p_, deterministic, target);
  }

  // .ywrapper.BoolValue drop = 168830944 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/drop"];
  if (this->has_drop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        168830944, *this->drop_, deterministic, target);
  }

  // .ywrapper.UintValue set_dscp = 500275780 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-dscp"];
  if (this->has_set_dscp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        500275780, *this->set_dscp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State)
  return target;
}

size_t Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue set_mpls_tc = 94135584 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-mpls-tc"];
  if (this->has_set_mpls_tc()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->set_mpls_tc_);
  }

  // .ywrapper.UintValue set_dot1p = 132458132 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-dot1p"];
  if (this->has_set_dot1p()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->set_dot1p_);
  }

  // .ywrapper.BoolValue drop = 168830944 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/drop"];
  if (this->has_drop()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->drop_);
  }

  // .ywrapper.UintValue set_dscp = 500275780 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-dscp"];
  if (this->has_set_dscp()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->set_dscp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State)
    MergeFrom(*source);
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_set_mpls_tc()) {
    mutable_set_mpls_tc()->::ywrapper::UintValue::MergeFrom(from.set_mpls_tc());
  }
  if (from.has_set_dot1p()) {
    mutable_set_dot1p()->::ywrapper::UintValue::MergeFrom(from.set_dot1p());
  }
  if (from.has_drop()) {
    mutable_drop()->::ywrapper::BoolValue::MergeFrom(from.drop());
  }
  if (from.has_set_dscp()) {
    mutable_set_dscp()->::ywrapper::UintValue::MergeFrom(from.set_dscp());
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::IsInitialized() const {
  return true;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State* other) {
  using std::swap;
  swap(set_mpls_tc_, other->set_mpls_tc_);
  swap(set_dot1p_, other->set_dot1p_);
  swap(drop_, other->drop_);
  swap(set_dscp_, other->set_dscp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config*>(
      ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State*>(
      ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction::kConfigFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction)
}
Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction)
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction::SharedCtor() {
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&config_)) + sizeof(state_));
  _cached_size_ = 0;
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction::~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction)
  SharedDtor();
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction();
  return *internal_default_instance();
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction::New(::google::protobuf::Arena* arena) const {
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction* n = new Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2896288418u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config config = 333494515 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config"];
      case 333494515: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 2667956122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State state = 362036052 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state"];
      case 362036052: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 2896288418 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction)
  return false;
#undef DO_
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config config = 333494515 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      333494515, *this->config_, output);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State state = 362036052 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      362036052, *this->state_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction)
}

::google::protobuf::uint8* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config config = 333494515 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        333494515, *this->config_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State state = 362036052 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        362036052, *this->state_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction)
  return target;
}

size_t Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config config = 333494515 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State state = 362036052 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction)
    MergeFrom(*source);
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction::MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::MergeFrom(from.config());
  }
  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::MergeFrom(from.state());
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction::CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction::IsInitialized() const {
  return true;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction::Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction::InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction* other) {
  using std::swap;
  swap(config_, other->config_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State_default_instance_._instance.get_mutable()->bc_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State_default_instance_._instance.get_mutable()->cir_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State_default_instance_._instance.get_mutable()->cir_pct_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State_default_instance_._instance.get_mutable()->cir_pct_remaining_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State_default_instance_._instance.get_mutable()->max_queue_depth_bytes_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State_default_instance_._instance.get_mutable()->max_queue_depth_packets_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State_default_instance_._instance.get_mutable()->max_queue_depth_percent_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::clear_bc() {
  if (GetArenaNoVirtual() == NULL && bc_ != NULL) {
    delete bc_;
  }
  bc_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::clear_cir() {
  if (GetArenaNoVirtual() == NULL && cir_ != NULL) {
    delete cir_;
  }
  cir_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::clear_cir_pct() {
  if (GetArenaNoVirtual() == NULL && cir_pct_ != NULL) {
    delete cir_pct_;
  }
  cir_pct_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::clear_cir_pct_remaining() {
  if (GetArenaNoVirtual() == NULL && cir_pct_remaining_ != NULL) {
    delete cir_pct_remaining_;
  }
  cir_pct_remaining_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::clear_max_queue_depth_bytes() {
  if (GetArenaNoVirtual() == NULL && max_queue_depth_bytes_ != NULL) {
    delete max_queue_depth_bytes_;
  }
  max_queue_depth_bytes_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::clear_max_queue_depth_packets() {
  if (GetArenaNoVirtual() == NULL && max_queue_depth_packets_ != NULL) {
    delete max_queue_depth_packets_;
  }
  max_queue_depth_packets_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::clear_max_queue_depth_percent() {
  if (GetArenaNoVirtual() == NULL && max_queue_depth_percent_ != NULL) {
    delete max_queue_depth_percent_;
  }
  max_queue_depth_percent_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::kBcFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::kCirFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::kCirPctFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::kCirPctRemainingFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::kMaxQueueDepthBytesFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::kMaxQueueDepthPacketsFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::kMaxQueueDepthPercentFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::kQueuingBehaviorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State)
}
Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_bc()) {
    bc_ = new ::ywrapper::UintValue(*from.bc_);
  } else {
    bc_ = NULL;
  }
  if (from.has_max_queue_depth_percent()) {
    max_queue_depth_percent_ = new ::ywrapper::UintValue(*from.max_queue_depth_percent_);
  } else {
    max_queue_depth_percent_ = NULL;
  }
  if (from.has_cir_pct()) {
    cir_pct_ = new ::ywrapper::UintValue(*from.cir_pct_);
  } else {
    cir_pct_ = NULL;
  }
  if (from.has_max_queue_depth_bytes()) {
    max_queue_depth_bytes_ = new ::ywrapper::UintValue(*from.max_queue_depth_bytes_);
  } else {
    max_queue_depth_bytes_ = NULL;
  }
  if (from.has_cir_pct_remaining()) {
    cir_pct_remaining_ = new ::ywrapper::UintValue(*from.cir_pct_remaining_);
  } else {
    cir_pct_remaining_ = NULL;
  }
  if (from.has_cir()) {
    cir_ = new ::ywrapper::UintValue(*from.cir_);
  } else {
    cir_ = NULL;
  }
  if (from.has_max_queue_depth_packets()) {
    max_queue_depth_packets_ = new ::ywrapper::UintValue(*from.max_queue_depth_packets_);
  } else {
    max_queue_depth_packets_ = NULL;
  }
  queuing_behavior_ = from.queuing_behavior_;
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State)
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::SharedCtor() {
  ::memset(&bc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&queuing_behavior_) -
      reinterpret_cast<char*>(&bc_)) + sizeof(queuing_behavior_));
  _cached_size_ = 0;
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State)
  SharedDtor();
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::SharedDtor() {
  if (this != internal_default_instance()) delete bc_;
  if (this != internal_default_instance()) delete max_queue_depth_percent_;
  if (this != internal_default_instance()) delete cir_pct_;
  if (this != internal_default_instance()) delete max_queue_depth_bytes_;
  if (this != internal_default_instance()) delete cir_pct_remaining_;
  if (this != internal_default_instance()) delete cir_;
  if (this != internal_default_instance()) delete max_queue_depth_packets_;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State();
  return *internal_default_instance();
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::New(::google::protobuf::Arena* arena) const {
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State* n = new Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && bc_ != NULL) {
    delete bc_;
  }
  bc_ = NULL;
  if (GetArenaNoVirtual() == NULL && max_queue_depth_percent_ != NULL) {
    delete max_queue_depth_percent_;
  }
  max_queue_depth_percent_ = NULL;
  if (GetArenaNoVirtual() == NULL && cir_pct_ != NULL) {
    delete cir_pct_;
  }
  cir_pct_ = NULL;
  if (GetArenaNoVirtual() == NULL && max_queue_depth_bytes_ != NULL) {
    delete max_queue_depth_bytes_;
  }
  max_queue_depth_bytes_ = NULL;
  if (GetArenaNoVirtual() == NULL && cir_pct_remaining_ != NULL) {
    delete cir_pct_remaining_;
  }
  cir_pct_remaining_ = NULL;
  if (GetArenaNoVirtual() == NULL && cir_ != NULL) {
    delete cir_;
  }
  cir_ = NULL;
  if (GetArenaNoVirtual() == NULL && max_queue_depth_packets_ != NULL) {
    delete max_queue_depth_packets_;
  }
  max_queue_depth_packets_ = NULL;
  queuing_behavior_ = 0;
  _internal_metadata_.Clear();
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2717533434u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue bc = 76345220 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/bc"];
      case 76345220: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 610761762 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue max_queue_depth_percent = 99186575 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-percent"];
      case 99186575: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 793492602 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_max_queue_depth_percent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue cir_pct = 102978535 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir-pct"];
      case 102978535: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 823828282 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cir_pct()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue max_queue_depth_bytes = 118786445 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-bytes"];
      case 118786445: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 950291562 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_max_queue_depth_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.enums.OpenconfigQosQueueBehavior queuing_behavior = 225811202 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/queuing-behavior"];
      case 225811202: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 1806489616 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_queuing_behavior(static_cast< ::openconfig::enums::OpenconfigQosQueueBehavior >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue cir_pct_remaining = 286997148 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir-pct-remaining"];
      case 286997148: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 2295977186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cir_pct_remaining()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue cir = 333122165 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir"];
      case 333122165: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 2664977322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cir()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue max_queue_depth_packets = 339691679 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-packets"];
      case 339691679: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 2717533434 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_max_queue_depth_packets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State)
  return false;
#undef DO_
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue bc = 76345220 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/bc"];
  if (this->has_bc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      76345220, *this->bc_, output);
  }

  // .ywrapper.UintValue max_queue_depth_percent = 99186575 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-percent"];
  if (this->has_max_queue_depth_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      99186575, *this->max_queue_depth_percent_, output);
  }

  // .ywrapper.UintValue cir_pct = 102978535 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir-pct"];
  if (this->has_cir_pct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102978535, *this->cir_pct_, output);
  }

  // .ywrapper.UintValue max_queue_depth_bytes = 118786445 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-bytes"];
  if (this->has_max_queue_depth_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      118786445, *this->max_queue_depth_bytes_, output);
  }

  // .openconfig.enums.OpenconfigQosQueueBehavior queuing_behavior = 225811202 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/queuing-behavior"];
  if (this->queuing_behavior() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      225811202, this->queuing_behavior(), output);
  }

  // .ywrapper.UintValue cir_pct_remaining = 286997148 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir-pct-remaining"];
  if (this->has_cir_pct_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      286997148, *this->cir_pct_remaining_, output);
  }

  // .ywrapper.UintValue cir = 333122165 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir"];
  if (this->has_cir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      333122165, *this->cir_, output);
  }

  // .ywrapper.UintValue max_queue_depth_packets = 339691679 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-packets"];
  if (this->has_max_queue_depth_packets()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      339691679, *this->max_queue_depth_packets_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State)
}

::google::protobuf::uint8* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue bc = 76345220 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/bc"];
  if (this->has_bc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        76345220, *this->bc_, deterministic, target);
  }

  // .ywrapper.UintValue max_queue_depth_percent = 99186575 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-percent"];
  if (this->has_max_queue_depth_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        99186575, *this->max_queue_depth_percent_, deterministic, target);
  }

  // .ywrapper.UintValue cir_pct = 102978535 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir-pct"];
  if (this->has_cir_pct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        102978535, *this->cir_pct_, deterministic, target);
  }

  // .ywrapper.UintValue max_queue_depth_bytes = 118786445 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-bytes"];
  if (this->has_max_queue_depth_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        118786445, *this->max_queue_depth_bytes_, deterministic, target);
  }

  // .openconfig.enums.OpenconfigQosQueueBehavior queuing_behavior = 225811202 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/queuing-behavior"];
  if (this->queuing_behavior() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      225811202, this->queuing_behavior(), target);
  }

  // .ywrapper.UintValue cir_pct_remaining = 286997148 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir-pct-remaining"];
  if (this->has_cir_pct_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        286997148, *this->cir_pct_remaining_, deterministic, target);
  }

  // .ywrapper.UintValue cir = 333122165 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir"];
  if (this->has_cir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        333122165, *this->cir_, deterministic, target);
  }

  // .ywrapper.UintValue max_queue_depth_packets = 339691679 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-packets"];
  if (this->has_max_queue_depth_packets()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        339691679, *this->max_queue_depth_packets_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State)
  return target;
}

size_t Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue bc = 76345220 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/bc"];
  if (this->has_bc()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->bc_);
  }

  // .ywrapper.UintValue max_queue_depth_percent = 99186575 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-percent"];
  if (this->has_max_queue_depth_percent()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->max_queue_depth_percent_);
  }

  // .ywrapper.UintValue cir_pct = 102978535 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir-pct"];
  if (this->has_cir_pct()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cir_pct_);
  }

  // .ywrapper.UintValue max_queue_depth_bytes = 118786445 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-bytes"];
  if (this->has_max_queue_depth_bytes()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->max_queue_depth_bytes_);
  }

  // .ywrapper.UintValue cir_pct_remaining = 286997148 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir-pct-remaining"];
  if (this->has_cir_pct_remaining()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cir_pct_remaining_);
  }

  // .ywrapper.UintValue cir = 333122165 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir"];
  if (this->has_cir()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cir_);
  }

  // .ywrapper.UintValue max_queue_depth_packets = 339691679 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-packets"];
  if (this->has_max_queue_depth_packets()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->max_queue_depth_packets_);
  }

  // .openconfig.enums.OpenconfigQosQueueBehavior queuing_behavior = 225811202 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/queuing-behavior"];
  if (this->queuing_behavior() != 0) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->queuing_behavior());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State)
    MergeFrom(*source);
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bc()) {
    mutable_bc()->::ywrapper::UintValue::MergeFrom(from.bc());
  }
  if (from.has_max_queue_depth_percent()) {
    mutable_max_queue_depth_percent()->::ywrapper::UintValue::MergeFrom(from.max_queue_depth_percent());
  }
  if (from.has_cir_pct()) {
    mutable_cir_pct()->::ywrapper::UintValue::MergeFrom(from.cir_pct());
  }
  if (from.has_max_queue_depth_bytes()) {
    mutable_max_queue_depth_bytes()->::ywrapper::UintValue::MergeFrom(from.max_queue_depth_bytes());
  }
  if (from.has_cir_pct_remaining()) {
    mutable_cir_pct_remaining()->::ywrapper::UintValue::MergeFrom(from.cir_pct_remaining());
  }
  if (from.has_cir()) {
    mutable_cir()->::ywrapper::UintValue::MergeFrom(from.cir());
  }
  if (from.has_max_queue_depth_packets()) {
    mutable_max_queue_depth_packets()->::ywrapper::UintValue::MergeFrom(from.max_queue_depth_packets());
  }
  if (from.queuing_behavior() != 0) {
    set_queuing_behavior(from.queuing_behavior());
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::IsInitialized() const {
  return true;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State* other) {
  using std::swap;
  swap(bc_, other->bc_);
  swap(max_queue_depth_percent_, other->max_queue_depth_percent_);
  swap(cir_pct_, other->cir_pct_);
  swap(max_queue_depth_bytes_, other->max_queue_depth_bytes_);
  swap(cir_pct_remaining_, other->cir_pct_remaining_);
  swap(cir_, other->cir_);
  swap(max_queue_depth_packets_, other->max_queue_depth_packets_);
  swap(queuing_behavior_, other->queuing_behavior_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config*>(
      ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_default_instance_._instance.get_mutable()->conform_action_ = const_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction*>(
      ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_default_instance_._instance.get_mutable()->exceed_action_ = const_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction*>(
      ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State*>(
      ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::kConfigFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::kConformActionFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::kExceedActionFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor)
}
Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_conform_action()) {
    conform_action_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction(*from.conform_action_);
  } else {
    conform_action_ = NULL;
  }
  if (from.has_exceed_action()) {
    exceed_action_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction(*from.exceed_action_);
  } else {
    exceed_action_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor)
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::SharedCtor() {
  ::memset(&conform_action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&conform_action_)) + sizeof(config_));
  _cached_size_ = 0;
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor)
  SharedDtor();
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::SharedDtor() {
  if (this != internal_default_instance()) delete conform_action_;
  if (this != internal_default_instance()) delete exceed_action_;
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete config_;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor();
  return *internal_default_instance();
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::New(::google::protobuf::Arena* arena) const {
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor* n = new Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && conform_action_ != NULL) {
    delete conform_action_;
  }
  conform_action_ = NULL;
  if (GetArenaNoVirtual() == NULL && exceed_action_ != NULL) {
    delete exceed_action_;
  }
  exceed_action_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3787897290u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction conform_action = 29149902 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action"];
      case 29149902: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 233199218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_conform_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction exceed_action = 297338034 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action"];
      case 297338034: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 2378704274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_exceed_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State state = 437562510 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state"];
      case 437562510: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 3500500082 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config config = 473487161 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config"];
      case 473487161: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 3787897290 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor)
  return false;
#undef DO_
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction conform_action = 29149902 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action"];
  if (this->has_conform_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29149902, *this->conform_action_, output);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction exceed_action = 297338034 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action"];
  if (this->has_exceed_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      297338034, *this->exceed_action_, output);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State state = 437562510 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      437562510, *this->state_, output);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config config = 473487161 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      473487161, *this->config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor)
}

::google::protobuf::uint8* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction conform_action = 29149902 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action"];
  if (this->has_conform_action()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        29149902, *this->conform_action_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction exceed_action = 297338034 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action"];
  if (this->has_exceed_action()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        297338034, *this->exceed_action_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State state = 437562510 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        437562510, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config config = 473487161 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        473487161, *this->config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor)
  return target;
}

size_t Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction conform_action = 29149902 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action"];
  if (this->has_conform_action()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->conform_action_);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction exceed_action = 297338034 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action"];
  if (this->has_exceed_action()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->exceed_action_);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State state = 437562510 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config config = 473487161 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor)
    MergeFrom(*source);
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_conform_action()) {
    mutable_conform_action()->::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction::MergeFrom(from.conform_action());
  }
  if (from.has_exceed_action()) {
    mutable_exceed_action()->::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction::MergeFrom(from.exceed_action());
  }
  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::MergeFrom(from.state());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::MergeFrom(from.config());
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::IsInitialized() const {
  return true;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor* other) {
  using std::swap;
  swap(conform_action_, other->conform_action_);
  swap(exceed_action_, other->exceed_action_);
  swap(state_, other->state_);
  swap(config_, other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_default_instance_._instance.get_mutable()->child_scheduler_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_default_instance_._instance.get_mutable()->output_fwd_group_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::clear_child_scheduler() {
  if (GetArenaNoVirtual() == NULL && child_scheduler_ != NULL) {
    delete child_scheduler_;
  }
  child_scheduler_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::clear_output_fwd_group() {
  if (GetArenaNoVirtual() == NULL && output_fwd_group_ != NULL) {
    delete output_fwd_group_;
  }
  output_fwd_group_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::kChildSchedulerFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::kOutputFwdGroupFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::kOutputTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config)
}
Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_child_scheduler()) {
    child_scheduler_ = new ::ywrapper::StringValue(*from.child_scheduler_);
  } else {
    child_scheduler_ = NULL;
  }
  if (from.has_output_fwd_group()) {
    output_fwd_group_ = new ::ywrapper::StringValue(*from.output_fwd_group_);
  } else {
    output_fwd_group_ = NULL;
  }
  output_type_ = from.output_type_;
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config)
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::SharedCtor() {
  ::memset(&child_scheduler_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_type_) -
      reinterpret_cast<char*>(&child_scheduler_)) + sizeof(output_type_));
  _cached_size_ = 0;
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config)
  SharedDtor();
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::SharedDtor() {
  if (this != internal_default_instance()) delete child_scheduler_;
  if (this != internal_default_instance()) delete output_fwd_group_;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config();
  return *internal_default_instance();
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::New(::google::protobuf::Arena* arena) const {
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config* n = new Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && child_scheduler_ != NULL) {
    delete child_scheduler_;
  }
  child_scheduler_ = NULL;
  if (GetArenaNoVirtual() == NULL && output_fwd_group_ != NULL) {
    delete output_fwd_group_;
  }
  output_fwd_group_ = NULL;
  output_type_ = 0;
  _internal_metadata_.Clear();
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3885397064u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue child_scheduler = 101554311 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config/child-scheduler"];
      case 101554311: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 812434490 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_child_scheduler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue output_fwd_group = 283910326 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config/output-fwd-group"];
      case 283910326: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 2271282610 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_output_fwd_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config.OutputType output_type = 485674633 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config/output-type"];
      case 485674633: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 3885397064 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_output_type(static_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config)
  return false;
#undef DO_
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue child_scheduler = 101554311 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config/child-scheduler"];
  if (this->has_child_scheduler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101554311, *this->child_scheduler_, output);
  }

  // .ywrapper.StringValue output_fwd_group = 283910326 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config/output-fwd-group"];
  if (this->has_output_fwd_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      283910326, *this->output_fwd_group_, output);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config.OutputType output_type = 485674633 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config/output-type"];
  if (this->output_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      485674633, this->output_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config)
}

::google::protobuf::uint8* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue child_scheduler = 101554311 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config/child-scheduler"];
  if (this->has_child_scheduler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        101554311, *this->child_scheduler_, deterministic, target);
  }

  // .ywrapper.StringValue output_fwd_group = 283910326 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config/output-fwd-group"];
  if (this->has_output_fwd_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        283910326, *this->output_fwd_group_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config.OutputType output_type = 485674633 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config/output-type"];
  if (this->output_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      485674633, this->output_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config)
  return target;
}

size_t Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue child_scheduler = 101554311 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config/child-scheduler"];
  if (this->has_child_scheduler()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->child_scheduler_);
  }

  // .ywrapper.StringValue output_fwd_group = 283910326 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config/output-fwd-group"];
  if (this->has_output_fwd_group()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->output_fwd_group_);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config.OutputType output_type = 485674633 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config/output-type"];
  if (this->output_type() != 0) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->output_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config)
    MergeFrom(*source);
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_child_scheduler()) {
    mutable_child_scheduler()->::ywrapper::StringValue::MergeFrom(from.child_scheduler());
  }
  if (from.has_output_fwd_group()) {
    mutable_output_fwd_group()->::ywrapper::StringValue::MergeFrom(from.output_fwd_group());
  }
  if (from.output_type() != 0) {
    set_output_type(from.output_type());
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::IsInitialized() const {
  return true;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config* other) {
  using std::swap;
  swap(child_scheduler_, other->child_scheduler_);
  swap(output_fwd_group_, other->output_fwd_group_);
  swap(output_type_, other->output_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_default_instance_._instance.get_mutable()->child_scheduler_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_default_instance_._instance.get_mutable()->output_fwd_group_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::clear_child_scheduler() {
  if (GetArenaNoVirtual() == NULL && child_scheduler_ != NULL) {
    delete child_scheduler_;
  }
  child_scheduler_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::clear_output_fwd_group() {
  if (GetArenaNoVirtual() == NULL && output_fwd_group_ != NULL) {
    delete output_fwd_group_;
  }
  output_fwd_group_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::kChildSchedulerFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::kOutputFwdGroupFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::kOutputTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State)
}
Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_output_fwd_group()) {
    output_fwd_group_ = new ::ywrapper::StringValue(*from.output_fwd_group_);
  } else {
    output_fwd_group_ = NULL;
  }
  if (from.has_child_scheduler()) {
    child_scheduler_ = new ::ywrapper::StringValue(*from.child_scheduler_);
  } else {
    child_scheduler_ = NULL;
  }
  output_type_ = from.output_type_;
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State)
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::SharedCtor() {
  ::memset(&output_fwd_group_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_type_) -
      reinterpret_cast<char*>(&output_fwd_group_)) + sizeof(output_type_));
  _cached_size_ = 0;
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State)
  SharedDtor();
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::SharedDtor() {
  if (this != internal_default_instance()) delete output_fwd_group_;
  if (this != internal_default_instance()) delete child_scheduler_;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State();
  return *internal_default_instance();
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::New(::google::protobuf::Arena* arena) const {
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State* n = new Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && output_fwd_group_ != NULL) {
    delete output_fwd_group_;
  }
  output_fwd_group_ = NULL;
  if (GetArenaNoVirtual() == NULL && child_scheduler_ != NULL) {
    delete child_scheduler_;
  }
  child_scheduler_ = NULL;
  output_type_ = 0;
  _internal_metadata_.Clear();
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3949860082u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State.OutputType output_type = 322389940 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/output-type"];
      case 322389940: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 2579119520 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_output_type(static_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue output_fwd_group = 475276361 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/output-fwd-group"];
      case 475276361: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 3802210890 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_output_fwd_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue child_scheduler = 493732510 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/child-scheduler"];
      case 493732510: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 3949860082 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_child_scheduler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State)
  return false;
#undef DO_
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State.OutputType output_type = 322389940 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/output-type"];
  if (this->output_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      322389940, this->output_type(), output);
  }

  // .ywrapper.StringValue output_fwd_group = 475276361 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/output-fwd-group"];
  if (this->has_output_fwd_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      475276361, *this->output_fwd_group_, output);
  }

  // .ywrapper.StringValue child_scheduler = 493732510 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/child-scheduler"];
  if (this->has_child_scheduler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      493732510, *this->child_scheduler_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State)
}

::google::protobuf::uint8* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State.OutputType output_type = 322389940 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/output-type"];
  if (this->output_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      322389940, this->output_type(), target);
  }

  // .ywrapper.StringValue output_fwd_group = 475276361 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/output-fwd-group"];
  if (this->has_output_fwd_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        475276361, *this->output_fwd_group_, deterministic, target);
  }

  // .ywrapper.StringValue child_scheduler = 493732510 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/child-scheduler"];
  if (this->has_child_scheduler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        493732510, *this->child_scheduler_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State)
  return target;
}

size_t Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue output_fwd_group = 475276361 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/output-fwd-group"];
  if (this->has_output_fwd_group()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->output_fwd_group_);
  }

  // .ywrapper.StringValue child_scheduler = 493732510 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/child-scheduler"];
  if (this->has_child_scheduler()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->child_scheduler_);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State.OutputType output_type = 322389940 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/output-type"];
  if (this->output_type() != 0) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->output_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State)
    MergeFrom(*source);
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_output_fwd_group()) {
    mutable_output_fwd_group()->::ywrapper::StringValue::MergeFrom(from.output_fwd_group());
  }
  if (from.has_child_scheduler()) {
    mutable_child_scheduler()->::ywrapper::StringValue::MergeFrom(from.child_scheduler());
  }
  if (from.output_type() != 0) {
    set_output_type(from.output_type());
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::IsInitialized() const {
  return true;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State* other) {
  using std::swap;
  swap(output_fwd_group_, other->output_fwd_group_);
  swap(child_scheduler_, other->child_scheduler_);
  swap(output_type_, other->output_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config*>(
      ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State*>(
      ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output::kConfigFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output)
}
Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output)
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output::SharedCtor() {
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&config_)) + sizeof(state_));
  _cached_size_ = 0;
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output::~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output)
  SharedDtor();
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output();
  return *internal_default_instance();
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output::New(::google::protobuf::Arena* arena) const {
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output* n = new Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3024812746u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config config = 210934496 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config"];
      case 210934496: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 1687475970 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State state = 378101593 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state"];
      case 378101593: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 3024812746 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output)
  return false;
#undef DO_
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config config = 210934496 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      210934496, *this->config_, output);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State state = 378101593 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      378101593, *this->state_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output)
}

::google::protobuf::uint8* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config config = 210934496 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        210934496, *this->config_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State state = 378101593 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        378101593, *this->state_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output)
  return target;
}

size_t Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config config = 210934496 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State state = 378101593 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output)
    MergeFrom(*source);
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output::MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::MergeFrom(from.config());
  }
  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::MergeFrom(from.state());
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output::CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output::IsInitialized() const {
  return true;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output::Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output::InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output* other) {
  using std::swap;
  swap(config_, other->config_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_default_instance_._instance.get_mutable()->sequence_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::clear_sequence() {
  if (GetArenaNoVirtual() == NULL && sequence_ != NULL) {
    delete sequence_;
  }
  sequence_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::kPriorityFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::kSequenceFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State)
}
Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sequence()) {
    sequence_ = new ::ywrapper::UintValue(*from.sequence_);
  } else {
    sequence_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&type_)) + sizeof(priority_));
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State)
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::SharedCtor() {
  ::memset(&sequence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&priority_) -
      reinterpret_cast<char*>(&sequence_)) + sizeof(priority_));
  _cached_size_ = 0;
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State)
  SharedDtor();
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::SharedDtor() {
  if (this != internal_default_instance()) delete sequence_;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State();
  return *internal_default_instance();
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::New(::google::protobuf::Arena* arena) const {
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State* n = new Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sequence_ != NULL) {
    delete sequence_;
  }
  sequence_ = NULL;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&priority_) -
      reinterpret_cast<char*>(&type_)) + sizeof(priority_));
  _internal_metadata_.Clear();
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2243644458u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.enums.OpenconfigQosTypesQOSSCHEDULERTYPE type = 13202618 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/type"];
      case 13202618: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 105620944 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::openconfig::enums::OpenconfigQosTypesQOSSCHEDULERTYPE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State.Priority priority = 187259654 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/priority"];
      case 187259654: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 1498077232 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_priority(static_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue sequence = 280455557 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/sequence"];
      case 280455557: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 2243644458 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sequence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State)
  return false;
#undef DO_
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.enums.OpenconfigQosTypesQOSSCHEDULERTYPE type = 13202618 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/type"];
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13202618, this->type(), output);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State.Priority priority = 187259654 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/priority"];
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      187259654, this->priority(), output);
  }

  // .ywrapper.UintValue sequence = 280455557 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/sequence"];
  if (this->has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      280455557, *this->sequence_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State)
}

::google::protobuf::uint8* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.enums.OpenconfigQosTypesQOSSCHEDULERTYPE type = 13202618 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/type"];
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13202618, this->type(), target);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State.Priority priority = 187259654 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/priority"];
  if (this->priority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      187259654, this->priority(), target);
  }

  // .ywrapper.UintValue sequence = 280455557 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/sequence"];
  if (this->has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        280455557, *this->sequence_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State)
  return target;
}

size_t Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue sequence = 280455557 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/sequence"];
  if (this->has_sequence()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sequence_);
  }

  // .openconfig.enums.OpenconfigQosTypesQOSSCHEDULERTYPE type = 13202618 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/type"];
  if (this->type() != 0) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State.Priority priority = 187259654 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/priority"];
  if (this->priority() != 0) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->priority());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State)
    MergeFrom(*source);
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sequence()) {
    mutable_sequence()->::ywrapper::UintValue::MergeFrom(from.sequence());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::IsInitialized() const {
  return true;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State* other) {
  using std::swap;
  swap(sequence_, other->sequence_);
  swap(type_, other->type_);
  swap(priority_, other->priority_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config_default_instance_._instance.get_mutable()->bc_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config_default_instance_._instance.get_mutable()->be_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config_default_instance_._instance.get_mutable()->cir_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config_default_instance_._instance.get_mutable()->cir_pct_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config_default_instance_._instance.get_mutable()->cir_pct_remaining_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config_default_instance_._instance.get_mutable()->pir_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config_default_instance_._instance.get_mutable()->pir_pct_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config_default_instance_._instance.get_mutable()->pir_pct_remaining_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::clear_bc() {
  if (GetArenaNoVirtual() == NULL && bc_ != NULL) {
    delete bc_;
  }
  bc_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::clear_be() {
  if (GetArenaNoVirtual() == NULL && be_ != NULL) {
    delete be_;
  }
  be_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::clear_cir() {
  if (GetArenaNoVirtual() == NULL && cir_ != NULL) {
    delete cir_;
  }
  cir_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::clear_cir_pct() {
  if (GetArenaNoVirtual() == NULL && cir_pct_ != NULL) {
    delete cir_pct_;
  }
  cir_pct_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::clear_cir_pct_remaining() {
  if (GetArenaNoVirtual() == NULL && cir_pct_remaining_ != NULL) {
    delete cir_pct_remaining_;
  }
  cir_pct_remaining_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::clear_pir() {
  if (GetArenaNoVirtual() == NULL && pir_ != NULL) {
    delete pir_;
  }
  pir_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::clear_pir_pct() {
  if (GetArenaNoVirtual() == NULL && pir_pct_ != NULL) {
    delete pir_pct_;
  }
  pir_pct_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::clear_pir_pct_remaining() {
  if (GetArenaNoVirtual() == NULL && pir_pct_remaining_ != NULL) {
    delete pir_pct_remaining_;
  }
  pir_pct_remaining_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::kBcFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::kBeFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::kCirFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::kCirPctFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::kCirPctRemainingFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::kPirFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::kPirPctFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::kPirPctRemainingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config)
}
Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pir()) {
    pir_ = new ::ywrapper::UintValue(*from.pir_);
  } else {
    pir_ = NULL;
  }
  if (from.has_cir()) {
    cir_ = new ::ywrapper::UintValue(*from.cir_);
  } else {
    cir_ = NULL;
  }
  if (from.has_pir_pct()) {
    pir_pct_ = new ::ywrapper::UintValue(*from.pir_pct_);
  } else {
    pir_pct_ = NULL;
  }
  if (from.has_cir_pct()) {
    cir_pct_ = new ::ywrapper::UintValue(*from.cir_pct_);
  } else {
    cir_pct_ = NULL;
  }
  if (from.has_cir_pct_remaining()) {
    cir_pct_remaining_ = new ::ywrapper::UintValue(*from.cir_pct_remaining_);
  } else {
    cir_pct_remaining_ = NULL;
  }
  if (from.has_bc()) {
    bc_ = new ::ywrapper::UintValue(*from.bc_);
  } else {
    bc_ = NULL;
  }
  if (from.has_be()) {
    be_ = new ::ywrapper::UintValue(*from.be_);
  } else {
    be_ = NULL;
  }
  if (from.has_pir_pct_remaining()) {
    pir_pct_remaining_ = new ::ywrapper::UintValue(*from.pir_pct_remaining_);
  } else {
    pir_pct_remaining_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config)
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::SharedCtor() {
  ::memset(&pir_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pir_pct_remaining_) -
      reinterpret_cast<char*>(&pir_)) + sizeof(pir_pct_remaining_));
  _cached_size_ = 0;
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config)
  SharedDtor();
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::SharedDtor() {
  if (this != internal_default_instance()) delete pir_;
  if (this != internal_default_instance()) delete cir_;
  if (this != internal_default_instance()) delete pir_pct_;
  if (this != internal_default_instance()) delete cir_pct_;
  if (this != internal_default_instance()) delete cir_pct_remaining_;
  if (this != internal_default_instance()) delete bc_;
  if (this != internal_default_instance()) delete be_;
  if (this != internal_default_instance()) delete pir_pct_remaining_;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config();
  return *internal_default_instance();
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::New(::google::protobuf::Arena* arena) const {
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config* n = new Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && pir_ != NULL) {
    delete pir_;
  }
  pir_ = NULL;
  if (GetArenaNoVirtual() == NULL && cir_ != NULL) {
    delete cir_;
  }
  cir_ = NULL;
  if (GetArenaNoVirtual() == NULL && pir_pct_ != NULL) {
    delete pir_pct_;
  }
  pir_pct_ = NULL;
  if (GetArenaNoVirtual() == NULL && cir_pct_ != NULL) {
    delete cir_pct_;
  }
  cir_pct_ = NULL;
  if (GetArenaNoVirtual() == NULL && cir_pct_remaining_ != NULL) {
    delete cir_pct_remaining_;
  }
  cir_pct_remaining_ = NULL;
  if (GetArenaNoVirtual() == NULL && bc_ != NULL) {
    delete bc_;
  }
  bc_ = NULL;
  if (GetArenaNoVirtual() == NULL && be_ != NULL) {
    delete be_;
  }
  be_ = NULL;
  if (GetArenaNoVirtual() == NULL && pir_pct_remaining_ != NULL) {
    delete pir_pct_remaining_;
  }
  pir_pct_remaining_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4136867682u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue pir = 69260261 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/pir"];
      case 69260261: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 554082090 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pir()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue cir = 72261310 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/cir"];
      case 72261310: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 578090482 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cir()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue pir_pct = 115916567 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/pir-pct"];
      case 115916567: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 927332538 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pir_pct()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue cir_pct = 148455776 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/cir-pct"];
      case 148455776: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 1187646210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cir_pct()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue cir_pct_remaining = 426598443 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/cir-pct-remaining"];
      case 426598443: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 3412787546 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cir_pct_remaining()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue bc = 488133689 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/bc"];
      case 488133689: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 3905069514 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue be = 488133695 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/be"];
      case 488133695: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 3905069562 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_be()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue pir_pct_remaining = 517108460 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/pir-pct-remaining"];
      case 517108460: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 4136867682 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pir_pct_remaining()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config)
  return false;
#undef DO_
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue pir = 69260261 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/pir"];
  if (this->has_pir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      69260261, *this->pir_, output);
  }

  // .ywrapper.UintValue cir = 72261310 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/cir"];
  if (this->has_cir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      72261310, *this->cir_, output);
  }

  // .ywrapper.UintValue pir_pct = 115916567 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/pir-pct"];
  if (this->has_pir_pct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      115916567, *this->pir_pct_, output);
  }

  // .ywrapper.UintValue cir_pct = 148455776 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/cir-pct"];
  if (this->has_cir_pct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      148455776, *this->cir_pct_, output);
  }

  // .ywrapper.UintValue cir_pct_remaining = 426598443 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/cir-pct-remaining"];
  if (this->has_cir_pct_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      426598443, *this->cir_pct_remaining_, output);
  }

  // .ywrapper.UintValue bc = 488133689 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/bc"];
  if (this->has_bc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      488133689, *this->bc_, output);
  }

  // .ywrapper.UintValue be = 488133695 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/be"];
  if (this->has_be()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      488133695, *this->be_, output);
  }

  // .ywrapper.UintValue pir_pct_remaining = 517108460 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/pir-pct-remaining"];
  if (this->has_pir_pct_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      517108460, *this->pir_pct_remaining_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config)
}

::google::protobuf::uint8* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue pir = 69260261 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/pir"];
  if (this->has_pir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        69260261, *this->pir_, deterministic, target);
  }

  // .ywrapper.UintValue cir = 72261310 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/cir"];
  if (this->has_cir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        72261310, *this->cir_, deterministic, target);
  }

  // .ywrapper.UintValue pir_pct = 115916567 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/pir-pct"];
  if (this->has_pir_pct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        115916567, *this->pir_pct_, deterministic, target);
  }

  // .ywrapper.UintValue cir_pct = 148455776 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/cir-pct"];
  if (this->has_cir_pct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        148455776, *this->cir_pct_, deterministic, target);
  }

  // .ywrapper.UintValue cir_pct_remaining = 426598443 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/cir-pct-remaining"];
  if (this->has_cir_pct_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        426598443, *this->cir_pct_remaining_, deterministic, target);
  }

  // .ywrapper.UintValue bc = 488133689 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/bc"];
  if (this->has_bc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        488133689, *this->bc_, deterministic, target);
  }

  // .ywrapper.UintValue be = 488133695 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/be"];
  if (this->has_be()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        488133695, *this->be_, deterministic, target);
  }

  // .ywrapper.UintValue pir_pct_remaining = 517108460 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/pir-pct-remaining"];
  if (this->has_pir_pct_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        517108460, *this->pir_pct_remaining_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config)
  return target;
}

size_t Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue pir = 69260261 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/pir"];
  if (this->has_pir()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pir_);
  }

  // .ywrapper.UintValue cir = 72261310 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/cir"];
  if (this->has_cir()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cir_);
  }

  // .ywrapper.UintValue pir_pct = 115916567 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/pir-pct"];
  if (this->has_pir_pct()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pir_pct_);
  }

  // .ywrapper.UintValue cir_pct = 148455776 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/cir-pct"];
  if (this->has_cir_pct()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cir_pct_);
  }

  // .ywrapper.UintValue cir_pct_remaining = 426598443 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/cir-pct-remaining"];
  if (this->has_cir_pct_remaining()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cir_pct_remaining_);
  }

  // .ywrapper.UintValue bc = 488133689 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/bc"];
  if (this->has_bc()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->bc_);
  }

  // .ywrapper.UintValue be = 488133695 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/be"];
  if (this->has_be()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->be_);
  }

  // .ywrapper.UintValue pir_pct_remaining = 517108460 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/pir-pct-remaining"];
  if (this->has_pir_pct_remaining()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pir_pct_remaining_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config)
    MergeFrom(*source);
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pir()) {
    mutable_pir()->::ywrapper::UintValue::MergeFrom(from.pir());
  }
  if (from.has_cir()) {
    mutable_cir()->::ywrapper::UintValue::MergeFrom(from.cir());
  }
  if (from.has_pir_pct()) {
    mutable_pir_pct()->::ywrapper::UintValue::MergeFrom(from.pir_pct());
  }
  if (from.has_cir_pct()) {
    mutable_cir_pct()->::ywrapper::UintValue::MergeFrom(from.cir_pct());
  }
  if (from.has_cir_pct_remaining()) {
    mutable_cir_pct_remaining()->::ywrapper::UintValue::MergeFrom(from.cir_pct_remaining());
  }
  if (from.has_bc()) {
    mutable_bc()->::ywrapper::UintValue::MergeFrom(from.bc());
  }
  if (from.has_be()) {
    mutable_be()->::ywrapper::UintValue::MergeFrom(from.be());
  }
  if (from.has_pir_pct_remaining()) {
    mutable_pir_pct_remaining()->::ywrapper::UintValue::MergeFrom(from.pir_pct_remaining());
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::IsInitialized() const {
  return true;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config* other) {
  using std::swap;
  swap(pir_, other->pir_);
  swap(cir_, other->cir_);
  swap(pir_pct_, other->pir_pct_);
  swap(cir_pct_, other->cir_pct_);
  swap(cir_pct_remaining_, other->cir_pct_remaining_);
  swap(bc_, other->bc_);
  swap(be_, other->be_);
  swap(pir_pct_remaining_, other->pir_pct_remaining_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config_default_instance_._instance.get_mutable()->set_dot1p_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config_default_instance_._instance.get_mutable()->set_dscp_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config_default_instance_._instance.get_mutable()->set_mpls_tc_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::clear_set_dot1p() {
  if (GetArenaNoVirtual() == NULL && set_dot1p_ != NULL) {
    delete set_dot1p_;
  }
  set_dot1p_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::clear_set_dscp() {
  if (GetArenaNoVirtual() == NULL && set_dscp_ != NULL) {
    delete set_dscp_;
  }
  set_dscp_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::clear_set_mpls_tc() {
  if (GetArenaNoVirtual() == NULL && set_mpls_tc_ != NULL) {
    delete set_mpls_tc_;
  }
  set_mpls_tc_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::kSetDot1PFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::kSetDscpFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::kSetMplsTcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config)
}
Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_set_dot1p()) {
    set_dot1p_ = new ::ywrapper::UintValue(*from.set_dot1p_);
  } else {
    set_dot1p_ = NULL;
  }
  if (from.has_set_mpls_tc()) {
    set_mpls_tc_ = new ::ywrapper::UintValue(*from.set_mpls_tc_);
  } else {
    set_mpls_tc_ = NULL;
  }
  if (from.has_set_dscp()) {
    set_dscp_ = new ::ywrapper::UintValue(*from.set_dscp_);
  } else {
    set_dscp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config)
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::SharedCtor() {
  ::memset(&set_dot1p_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&set_dscp_) -
      reinterpret_cast<char*>(&set_dot1p_)) + sizeof(set_dscp_));
  _cached_size_ = 0;
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config)
  SharedDtor();
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::SharedDtor() {
  if (this != internal_default_instance()) delete set_dot1p_;
  if (this != internal_default_instance()) delete set_mpls_tc_;
  if (this != internal_default_instance()) delete set_dscp_;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config();
  return *internal_default_instance();
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::New(::google::protobuf::Arena* arena) const {
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config* n = new Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && set_dot1p_ != NULL) {
    delete set_dot1p_;
  }
  set_dot1p_ = NULL;
  if (GetArenaNoVirtual() == NULL && set_mpls_tc_ != NULL) {
    delete set_mpls_tc_;
  }
  set_mpls_tc_ = NULL;
  if (GetArenaNoVirtual() == NULL && set_dscp_ != NULL) {
    delete set_dscp_;
  }
  set_dscp_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3285231722u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue set_dot1p = 106933487 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/config/set-dot1p"];
      case 106933487: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 855467898 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_dot1p()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue set_mpls_tc = 301290899 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/config/set-mpls-tc"];
      case 301290899: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 2410327194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_mpls_tc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue set_dscp = 410653965 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/config/set-dscp"];
      case 410653965: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 3285231722 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_dscp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config)
  return false;
#undef DO_
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue set_dot1p = 106933487 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/config/set-dot1p"];
  if (this->has_set_dot1p()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      106933487, *this->set_dot1p_, output);
  }

  // .ywrapper.UintValue set_mpls_tc = 301290899 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/config/set-mpls-tc"];
  if (this->has_set_mpls_tc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      301290899, *this->set_mpls_tc_, output);
  }

  // .ywrapper.UintValue set_dscp = 410653965 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/config/set-dscp"];
  if (this->has_set_dscp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      410653965, *this->set_dscp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config)
}

::google::protobuf::uint8* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue set_dot1p = 106933487 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/config/set-dot1p"];
  if (this->has_set_dot1p()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        106933487, *this->set_dot1p_, deterministic, target);
  }

  // .ywrapper.UintValue set_mpls_tc = 301290899 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/config/set-mpls-tc"];
  if (this->has_set_mpls_tc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        301290899, *this->set_mpls_tc_, deterministic, target);
  }

  // .ywrapper.UintValue set_dscp = 410653965 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/config/set-dscp"];
  if (this->has_set_dscp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        410653965, *this->set_dscp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config)
  return target;
}

size_t Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue set_dot1p = 106933487 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/config/set-dot1p"];
  if (this->has_set_dot1p()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->set_dot1p_);
  }

  // .ywrapper.UintValue set_mpls_tc = 301290899 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/config/set-mpls-tc"];
  if (this->has_set_mpls_tc()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->set_mpls_tc_);
  }

  // .ywrapper.UintValue set_dscp = 410653965 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/config/set-dscp"];
  if (this->has_set_dscp()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->set_dscp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config)
    MergeFrom(*source);
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_set_dot1p()) {
    mutable_set_dot1p()->::ywrapper::UintValue::MergeFrom(from.set_dot1p());
  }
  if (from.has_set_mpls_tc()) {
    mutable_set_mpls_tc()->::ywrapper::UintValue::MergeFrom(from.set_mpls_tc());
  }
  if (from.has_set_dscp()) {
    mutable_set_dscp()->::ywrapper::UintValue::MergeFrom(from.set_dscp());
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::IsInitialized() const {
  return true;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config* other) {
  using std::swap;
  swap(set_dot1p_, other->set_dot1p_);
  swap(set_mpls_tc_, other->set_mpls_tc_);
  swap(set_dscp_, other->set_dscp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State_default_instance_._instance.get_mutable()->set_dot1p_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State_default_instance_._instance.get_mutable()->set_dscp_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State_default_instance_._instance.get_mutable()->set_mpls_tc_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::clear_set_dot1p() {
  if (GetArenaNoVirtual() == NULL && set_dot1p_ != NULL) {
    delete set_dot1p_;
  }
  set_dot1p_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::clear_set_dscp() {
  if (GetArenaNoVirtual() == NULL && set_dscp_ != NULL) {
    delete set_dscp_;
  }
  set_dscp_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::clear_set_mpls_tc() {
  if (GetArenaNoVirtual() == NULL && set_mpls_tc_ != NULL) {
    delete set_mpls_tc_;
  }
  set_mpls_tc_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::kSetDot1PFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::kSetDscpFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::kSetMplsTcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State)
}
Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_set_mpls_tc()) {
    set_mpls_tc_ = new ::ywrapper::UintValue(*from.set_mpls_tc_);
  } else {
    set_mpls_tc_ = NULL;
  }
  if (from.has_set_dot1p()) {
    set_dot1p_ = new ::ywrapper::UintValue(*from.set_dot1p_);
  } else {
    set_dot1p_ = NULL;
  }
  if (from.has_set_dscp()) {
    set_dscp_ = new ::ywrapper::UintValue(*from.set_dscp_);
  } else {
    set_dscp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State)
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::SharedCtor() {
  ::memset(&set_mpls_tc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&set_dscp_) -
      reinterpret_cast<char*>(&set_mpls_tc_)) + sizeof(set_dscp_));
  _cached_size_ = 0;
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State)
  SharedDtor();
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::SharedDtor() {
  if (this != internal_default_instance()) delete set_mpls_tc_;
  if (this != internal_default_instance()) delete set_dot1p_;
  if (this != internal_default_instance()) delete set_dscp_;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State();
  return *internal_default_instance();
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::New(::google::protobuf::Arena* arena) const {
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State* n = new Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && set_mpls_tc_ != NULL) {
    delete set_mpls_tc_;
  }
  set_mpls_tc_ = NULL;
  if (GetArenaNoVirtual() == NULL && set_dot1p_ != NULL) {
    delete set_dot1p_;
  }
  set_dot1p_ = NULL;
  if (GetArenaNoVirtual() == NULL && set_dscp_ != NULL) {
    delete set_dscp_;
  }
  set_dscp_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2468847106u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue set_mpls_tc = 213542028 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-mpls-tc"];
      case 213542028: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 1708336226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_mpls_tc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue set_dot1p = 287866712 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-dot1p"];
      case 287866712: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 2302933698 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_dot1p()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue set_dscp = 308605888 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-dscp"];
      case 308605888: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 2468847106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_dscp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State)
  return false;
#undef DO_
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue set_mpls_tc = 213542028 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-mpls-tc"];
  if (this->has_set_mpls_tc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      213542028, *this->set_mpls_tc_, output);
  }

  // .ywrapper.UintValue set_dot1p = 287866712 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-dot1p"];
  if (this->has_set_dot1p()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      287866712, *this->set_dot1p_, output);
  }

  // .ywrapper.UintValue set_dscp = 308605888 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-dscp"];
  if (this->has_set_dscp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      308605888, *this->set_dscp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State)
}

::google::protobuf::uint8* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue set_mpls_tc = 213542028 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-mpls-tc"];
  if (this->has_set_mpls_tc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        213542028, *this->set_mpls_tc_, deterministic, target);
  }

  // .ywrapper.UintValue set_dot1p = 287866712 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-dot1p"];
  if (this->has_set_dot1p()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        287866712, *this->set_dot1p_, deterministic, target);
  }

  // .ywrapper.UintValue set_dscp = 308605888 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-dscp"];
  if (this->has_set_dscp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        308605888, *this->set_dscp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State)
  return target;
}

size_t Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue set_mpls_tc = 213542028 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-mpls-tc"];
  if (this->has_set_mpls_tc()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->set_mpls_tc_);
  }

  // .ywrapper.UintValue set_dot1p = 287866712 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-dot1p"];
  if (this->has_set_dot1p()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->set_dot1p_);
  }

  // .ywrapper.UintValue set_dscp = 308605888 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-dscp"];
  if (this->has_set_dscp()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->set_dscp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State)
    MergeFrom(*source);
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_set_mpls_tc()) {
    mutable_set_mpls_tc()->::ywrapper::UintValue::MergeFrom(from.set_mpls_tc());
  }
  if (from.has_set_dot1p()) {
    mutable_set_dot1p()->::ywrapper::UintValue::MergeFrom(from.set_dot1p());
  }
  if (from.has_set_dscp()) {
    mutable_set_dscp()->::ywrapper::UintValue::MergeFrom(from.set_dscp());
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::IsInitialized() const {
  return true;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State* other) {
  using std::swap;
  swap(set_mpls_tc_, other->set_mpls_tc_);
  swap(set_dot1p_, other->set_dot1p_);
  swap(set_dscp_, other->set_dscp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config*>(
      ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State*>(
      ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction::kConfigFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction)
}
Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction)
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&state_)) + sizeof(config_));
  _cached_size_ = 0;
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction::~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction)
  SharedDtor();
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete config_;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction();
  return *internal_default_instance();
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction::New(::google::protobuf::Arena* arena) const {
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction* n = new Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2565486330u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State state = 49137552 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state"];
      case 49137552: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 393100418 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config config = 320685791 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/config"];
      case 320685791: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 2565486330 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction)
  return false;
#undef DO_
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State state = 49137552 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      49137552, *this->state_, output);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config config = 320685791 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      320685791, *this->config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction)
}

::google::protobuf::uint8* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State state = 49137552 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        49137552, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config config = 320685791 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        320685791, *this->config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction)
  return target;
}

size_t Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State state = 49137552 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config config = 320685791 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction)
    MergeFrom(*source);
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction::MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::MergeFrom(from.state());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::MergeFrom(from.config());
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction::CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction::IsInitialized() const {
  return true;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction::Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction::InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(config_, other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config_default_instance_._instance.get_mutable()->drop_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config_default_instance_._instance.get_mutable()->set_dot1p_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config_default_instance_._instance.get_mutable()->set_dscp_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config_default_instance_._instance.get_mutable()->set_mpls_tc_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::clear_drop() {
  if (GetArenaNoVirtual() == NULL && drop_ != NULL) {
    delete drop_;
  }
  drop_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::clear_set_dot1p() {
  if (GetArenaNoVirtual() == NULL && set_dot1p_ != NULL) {
    delete set_dot1p_;
  }
  set_dot1p_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::clear_set_dscp() {
  if (GetArenaNoVirtual() == NULL && set_dscp_ != NULL) {
    delete set_dscp_;
  }
  set_dscp_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::clear_set_mpls_tc() {
  if (GetArenaNoVirtual() == NULL && set_mpls_tc_ != NULL) {
    delete set_mpls_tc_;
  }
  set_mpls_tc_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::kDropFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::kSetDot1PFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::kSetDscpFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::kSetMplsTcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config)
}
Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_set_dot1p()) {
    set_dot1p_ = new ::ywrapper::UintValue(*from.set_dot1p_);
  } else {
    set_dot1p_ = NULL;
  }
  if (from.has_drop()) {
    drop_ = new ::ywrapper::BoolValue(*from.drop_);
  } else {
    drop_ = NULL;
  }
  if (from.has_set_mpls_tc()) {
    set_mpls_tc_ = new ::ywrapper::UintValue(*from.set_mpls_tc_);
  } else {
    set_mpls_tc_ = NULL;
  }
  if (from.has_set_dscp()) {
    set_dscp_ = new ::ywrapper::UintValue(*from.set_dscp_);
  } else {
    set_dscp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config)
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::SharedCtor() {
  ::memset(&set_dot1p_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&set_dscp_) -
      reinterpret_cast<char*>(&set_dot1p_)) + sizeof(set_dscp_));
  _cached_size_ = 0;
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config)
  SharedDtor();
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::SharedDtor() {
  if (this != internal_default_instance()) delete set_dot1p_;
  if (this != internal_default_instance()) delete drop_;
  if (this != internal_default_instance()) delete set_mpls_tc_;
  if (this != internal_default_instance()) delete set_dscp_;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config();
  return *internal_default_instance();
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::New(::google::protobuf::Arena* arena) const {
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config* n = new Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && set_dot1p_ != NULL) {
    delete set_dot1p_;
  }
  set_dot1p_ = NULL;
  if (GetArenaNoVirtual() == NULL && drop_ != NULL) {
    delete drop_;
  }
  drop_ = NULL;
  if (GetArenaNoVirtual() == NULL && set_mpls_tc_ != NULL) {
    delete set_mpls_tc_;
  }
  set_mpls_tc_ = NULL;
  if (GetArenaNoVirtual() == NULL && set_dscp_ != NULL) {
    delete set_dscp_;
  }
  set_dscp_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4246125450u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue set_dot1p = 143535771 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config/set-dot1p"];
      case 143535771: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 1148286170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_dot1p()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue drop = 299899453 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config/drop"];
      case 299899453: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 2399195626 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_drop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue set_mpls_tc = 435204023 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config/set-mpls-tc"];
      case 435204023: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 3481632186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_mpls_tc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue set_dscp = 530765681 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config/set-dscp"];
      case 530765681: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 4246125450 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_dscp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config)
  return false;
#undef DO_
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue set_dot1p = 143535771 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config/set-dot1p"];
  if (this->has_set_dot1p()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      143535771, *this->set_dot1p_, output);
  }

  // .ywrapper.BoolValue drop = 299899453 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config/drop"];
  if (this->has_drop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      299899453, *this->drop_, output);
  }

  // .ywrapper.UintValue set_mpls_tc = 435204023 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config/set-mpls-tc"];
  if (this->has_set_mpls_tc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      435204023, *this->set_mpls_tc_, output);
  }

  // .ywrapper.UintValue set_dscp = 530765681 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config/set-dscp"];
  if (this->has_set_dscp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      530765681, *this->set_dscp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config)
}

::google::protobuf::uint8* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue set_dot1p = 143535771 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config/set-dot1p"];
  if (this->has_set_dot1p()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        143535771, *this->set_dot1p_, deterministic, target);
  }

  // .ywrapper.BoolValue drop = 299899453 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config/drop"];
  if (this->has_drop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        299899453, *this->drop_, deterministic, target);
  }

  // .ywrapper.UintValue set_mpls_tc = 435204023 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config/set-mpls-tc"];
  if (this->has_set_mpls_tc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        435204023, *this->set_mpls_tc_, deterministic, target);
  }

  // .ywrapper.UintValue set_dscp = 530765681 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config/set-dscp"];
  if (this->has_set_dscp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        530765681, *this->set_dscp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config)
  return target;
}

size_t Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue set_dot1p = 143535771 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config/set-dot1p"];
  if (this->has_set_dot1p()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->set_dot1p_);
  }

  // .ywrapper.BoolValue drop = 299899453 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config/drop"];
  if (this->has_drop()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->drop_);
  }

  // .ywrapper.UintValue set_mpls_tc = 435204023 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config/set-mpls-tc"];
  if (this->has_set_mpls_tc()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->set_mpls_tc_);
  }

  // .ywrapper.UintValue set_dscp = 530765681 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config/set-dscp"];
  if (this->has_set_dscp()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->set_dscp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config)
    MergeFrom(*source);
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_set_dot1p()) {
    mutable_set_dot1p()->::ywrapper::UintValue::MergeFrom(from.set_dot1p());
  }
  if (from.has_drop()) {
    mutable_drop()->::ywrapper::BoolValue::MergeFrom(from.drop());
  }
  if (from.has_set_mpls_tc()) {
    mutable_set_mpls_tc()->::ywrapper::UintValue::MergeFrom(from.set_mpls_tc());
  }
  if (from.has_set_dscp()) {
    mutable_set_dscp()->::ywrapper::UintValue::MergeFrom(from.set_dscp());
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::IsInitialized() const {
  return true;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config* other) {
  using std::swap;
  swap(set_dot1p_, other->set_dot1p_);
  swap(drop_, other->drop_);
  swap(set_mpls_tc_, other->set_mpls_tc_);
  swap(set_dscp_, other->set_dscp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State_default_instance_._instance.get_mutable()->drop_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State_default_instance_._instance.get_mutable()->set_dot1p_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State_default_instance_._instance.get_mutable()->set_dscp_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State_default_instance_._instance.get_mutable()->set_mpls_tc_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::clear_drop() {
  if (GetArenaNoVirtual() == NULL && drop_ != NULL) {
    delete drop_;
  }
  drop_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::clear_set_dot1p() {
  if (GetArenaNoVirtual() == NULL && set_dot1p_ != NULL) {
    delete set_dot1p_;
  }
  set_dot1p_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::clear_set_dscp() {
  if (GetArenaNoVirtual() == NULL && set_dscp_ != NULL) {
    delete set_dscp_;
  }
  set_dscp_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::clear_set_mpls_tc() {
  if (GetArenaNoVirtual() == NULL && set_mpls_tc_ != NULL) {
    delete set_mpls_tc_;
  }
  set_mpls_tc_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::kDropFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::kSetDot1PFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::kSetDscpFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::kSetMplsTcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State)
}
Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_drop()) {
    drop_ = new ::ywrapper::BoolValue(*from.drop_);
  } else {
    drop_ = NULL;
  }
  if (from.has_set_mpls_tc()) {
    set_mpls_tc_ = new ::ywrapper::UintValue(*from.set_mpls_tc_);
  } else {
    set_mpls_tc_ = NULL;
  }
  if (from.has_set_dscp()) {
    set_dscp_ = new ::ywrapper::UintValue(*from.set_dscp_);
  } else {
    set_dscp_ = NULL;
  }
  if (from.has_set_dot1p()) {
    set_dot1p_ = new ::ywrapper::UintValue(*from.set_dot1p_);
  } else {
    set_dot1p_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State)
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::SharedCtor() {
  ::memset(&drop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&set_dot1p_) -
      reinterpret_cast<char*>(&drop_)) + sizeof(set_dot1p_));
  _cached_size_ = 0;
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State)
  SharedDtor();
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::SharedDtor() {
  if (this != internal_default_instance()) delete drop_;
  if (this != internal_default_instance()) delete set_mpls_tc_;
  if (this != internal_default_instance()) delete set_dscp_;
  if (this != internal_default_instance()) delete set_dot1p_;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State();
  return *internal_default_instance();
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::New(::google::protobuf::Arena* arena) const {
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State* n = new Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && drop_ != NULL) {
    delete drop_;
  }
  drop_ = NULL;
  if (GetArenaNoVirtual() == NULL && set_mpls_tc_ != NULL) {
    delete set_mpls_tc_;
  }
  set_mpls_tc_ = NULL;
  if (GetArenaNoVirtual() == NULL && set_dscp_ != NULL) {
    delete set_dscp_;
  }
  set_dscp_ = NULL;
  if (GetArenaNoVirtual() == NULL && set_dot1p_ != NULL) {
    delete set_dot1p_;
  }
  set_dot1p_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4200652706u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.BoolValue drop = 190345152 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/drop"];
      case 190345152: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 1522761218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_drop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue set_mpls_tc = 313456384 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-mpls-tc"];
      case 313456384: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 2507651074 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_mpls_tc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue set_dscp = 329397924 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-dscp"];
      case 329397924: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 2635183394 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_dscp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue set_dot1p = 525081588 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-dot1p"];
      case 525081588: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 4200652706 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_dot1p()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State)
  return false;
#undef DO_
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.BoolValue drop = 190345152 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/drop"];
  if (this->has_drop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      190345152, *this->drop_, output);
  }

  // .ywrapper.UintValue set_mpls_tc = 313456384 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-mpls-tc"];
  if (this->has_set_mpls_tc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      313456384, *this->set_mpls_tc_, output);
  }

  // .ywrapper.UintValue set_dscp = 329397924 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-dscp"];
  if (this->has_set_dscp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      329397924, *this->set_dscp_, output);
  }

  // .ywrapper.UintValue set_dot1p = 525081588 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-dot1p"];
  if (this->has_set_dot1p()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      525081588, *this->set_dot1p_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State)
}

::google::protobuf::uint8* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.BoolValue drop = 190345152 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/drop"];
  if (this->has_drop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        190345152, *this->drop_, deterministic, target);
  }

  // .ywrapper.UintValue set_mpls_tc = 313456384 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-mpls-tc"];
  if (this->has_set_mpls_tc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        313456384, *this->set_mpls_tc_, deterministic, target);
  }

  // .ywrapper.UintValue set_dscp = 329397924 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-dscp"];
  if (this->has_set_dscp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        329397924, *this->set_dscp_, deterministic, target);
  }

  // .ywrapper.UintValue set_dot1p = 525081588 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-dot1p"];
  if (this->has_set_dot1p()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        525081588, *this->set_dot1p_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State)
  return target;
}

size_t Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.BoolValue drop = 190345152 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/drop"];
  if (this->has_drop()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->drop_);
  }

  // .ywrapper.UintValue set_mpls_tc = 313456384 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-mpls-tc"];
  if (this->has_set_mpls_tc()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->set_mpls_tc_);
  }

  // .ywrapper.UintValue set_dscp = 329397924 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-dscp"];
  if (this->has_set_dscp()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->set_dscp_);
  }

  // .ywrapper.UintValue set_dot1p = 525081588 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-dot1p"];
  if (this->has_set_dot1p()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->set_dot1p_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State)
    MergeFrom(*source);
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_drop()) {
    mutable_drop()->::ywrapper::BoolValue::MergeFrom(from.drop());
  }
  if (from.has_set_mpls_tc()) {
    mutable_set_mpls_tc()->::ywrapper::UintValue::MergeFrom(from.set_mpls_tc());
  }
  if (from.has_set_dscp()) {
    mutable_set_dscp()->::ywrapper::UintValue::MergeFrom(from.set_dscp());
  }
  if (from.has_set_dot1p()) {
    mutable_set_dot1p()->::ywrapper::UintValue::MergeFrom(from.set_dot1p());
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::IsInitialized() const {
  return true;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State* other) {
  using std::swap;
  swap(drop_, other->drop_);
  swap(set_mpls_tc_, other->set_mpls_tc_);
  swap(set_dscp_, other->set_dscp_);
  swap(set_dot1p_, other->set_dot1p_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config*>(
      ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State*>(
      ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction::kConfigFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction)
}
Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction)
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&state_)) + sizeof(config_));
  _cached_size_ = 0;
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction::~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction)
  SharedDtor();
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete config_;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction();
  return *internal_default_instance();
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction::New(::google::protobuf::Arena* arena) const {
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction* n = new Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4165843610u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State state = 230070580 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state"];
      case 230070580: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 1840564642 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config config = 520730451 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config"];
      case 520730451: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 4165843610 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction)
  return false;
#undef DO_
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State state = 230070580 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      230070580, *this->state_, output);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config config = 520730451 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      520730451, *this->config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction)
}

::google::protobuf::uint8* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State state = 230070580 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        230070580, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config config = 520730451 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        520730451, *this->config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction)
  return target;
}

size_t Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State state = 230070580 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config config = 520730451 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction)
    MergeFrom(*source);
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction::MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::MergeFrom(from.state());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::MergeFrom(from.config());
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction::CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction::IsInitialized() const {
  return true;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction::Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction::InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(config_, other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State_default_instance_._instance.get_mutable()->bc_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State_default_instance_._instance.get_mutable()->be_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State_default_instance_._instance.get_mutable()->cir_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State_default_instance_._instance.get_mutable()->cir_pct_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State_default_instance_._instance.get_mutable()->cir_pct_remaining_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State_default_instance_._instance.get_mutable()->pir_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State_default_instance_._instance.get_mutable()->pir_pct_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State_default_instance_._instance.get_mutable()->pir_pct_remaining_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::clear_bc() {
  if (GetArenaNoVirtual() == NULL && bc_ != NULL) {
    delete bc_;
  }
  bc_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::clear_be() {
  if (GetArenaNoVirtual() == NULL && be_ != NULL) {
    delete be_;
  }
  be_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::clear_cir() {
  if (GetArenaNoVirtual() == NULL && cir_ != NULL) {
    delete cir_;
  }
  cir_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::clear_cir_pct() {
  if (GetArenaNoVirtual() == NULL && cir_pct_ != NULL) {
    delete cir_pct_;
  }
  cir_pct_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::clear_cir_pct_remaining() {
  if (GetArenaNoVirtual() == NULL && cir_pct_remaining_ != NULL) {
    delete cir_pct_remaining_;
  }
  cir_pct_remaining_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::clear_pir() {
  if (GetArenaNoVirtual() == NULL && pir_ != NULL) {
    delete pir_;
  }
  pir_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::clear_pir_pct() {
  if (GetArenaNoVirtual() == NULL && pir_pct_ != NULL) {
    delete pir_pct_;
  }
  pir_pct_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::clear_pir_pct_remaining() {
  if (GetArenaNoVirtual() == NULL && pir_pct_remaining_ != NULL) {
    delete pir_pct_remaining_;
  }
  pir_pct_remaining_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::kBcFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::kBeFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::kCirFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::kCirPctFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::kCirPctRemainingFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::kPirFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::kPirPctFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::kPirPctRemainingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State)
}
Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_be()) {
    be_ = new ::ywrapper::UintValue(*from.be_);
  } else {
    be_ = NULL;
  }
  if (from.has_bc()) {
    bc_ = new ::ywrapper::UintValue(*from.bc_);
  } else {
    bc_ = NULL;
  }
  if (from.has_pir_pct_remaining()) {
    pir_pct_remaining_ = new ::ywrapper::UintValue(*from.pir_pct_remaining_);
  } else {
    pir_pct_remaining_ = NULL;
  }
  if (from.has_cir_pct()) {
    cir_pct_ = new ::ywrapper::UintValue(*from.cir_pct_);
  } else {
    cir_pct_ = NULL;
  }
  if (from.has_cir_pct_remaining()) {
    cir_pct_remaining_ = new ::ywrapper::UintValue(*from.cir_pct_remaining_);
  } else {
    cir_pct_remaining_ = NULL;
  }
  if (from.has_pir()) {
    pir_ = new ::ywrapper::UintValue(*from.pir_);
  } else {
    pir_ = NULL;
  }
  if (from.has_cir()) {
    cir_ = new ::ywrapper::UintValue(*from.cir_);
  } else {
    cir_ = NULL;
  }
  if (from.has_pir_pct()) {
    pir_pct_ = new ::ywrapper::UintValue(*from.pir_pct_);
  } else {
    pir_pct_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State)
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::SharedCtor() {
  ::memset(&be_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pir_pct_) -
      reinterpret_cast<char*>(&be_)) + sizeof(pir_pct_));
  _cached_size_ = 0;
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State)
  SharedDtor();
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::SharedDtor() {
  if (this != internal_default_instance()) delete be_;
  if (this != internal_default_instance()) delete bc_;
  if (this != internal_default_instance()) delete pir_pct_remaining_;
  if (this != internal_default_instance()) delete cir_pct_;
  if (this != internal_default_instance()) delete cir_pct_remaining_;
  if (this != internal_default_instance()) delete pir_;
  if (this != internal_default_instance()) delete cir_;
  if (this != internal_default_instance()) delete pir_pct_;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State();
  return *internal_default_instance();
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::New(::google::protobuf::Arena* arena) const {
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State* n = new Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && be_ != NULL) {
    delete be_;
  }
  be_ = NULL;
  if (GetArenaNoVirtual() == NULL && bc_ != NULL) {
    delete bc_;
  }
  bc_ = NULL;
  if (GetArenaNoVirtual() == NULL && pir_pct_remaining_ != NULL) {
    delete pir_pct_remaining_;
  }
  pir_pct_remaining_ = NULL;
  if (GetArenaNoVirtual() == NULL && cir_pct_ != NULL) {
    delete cir_pct_;
  }
  cir_pct_ = NULL;
  if (GetArenaNoVirtual() == NULL && cir_pct_remaining_ != NULL) {
    delete cir_pct_remaining_;
  }
  cir_pct_remaining_ = NULL;
  if (GetArenaNoVirtual() == NULL && pir_ != NULL) {
    delete pir_;
  }
  pir_ = NULL;
  if (GetArenaNoVirtual() == NULL && cir_ != NULL) {
    delete cir_;
  }
  cir_ = NULL;
  if (GetArenaNoVirtual() == NULL && pir_pct_ != NULL) {
    delete pir_pct_;
  }
  pir_pct_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3879750530u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue be = 15153378 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/be"];
      case 15153378: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 121227026 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_be()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue bc = 15153380 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/bc"];
      case 15153380: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 121227042 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue pir_pct_remaining = 223122459 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir-pct-remaining"];
      case 223122459: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 1784979674 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pir_pct_remaining()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue cir_pct = 228243271 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir-pct"];
      case 228243271: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 1825946170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cir_pct()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue cir_pct_remaining = 276174460 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir-pct-remaining"];
      case 276174460: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 2209395682 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cir_pct_remaining()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue pir = 366650638 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir"];
      case 366650638: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 2933205106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pir()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue cir = 368769365 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir"];
      case 368769365: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 2950154922 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cir()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue pir_pct = 484968816 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir-pct"];
      case 484968816: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 3879750530 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pir_pct()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State)
  return false;
#undef DO_
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue be = 15153378 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/be"];
  if (this->has_be()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15153378, *this->be_, output);
  }

  // .ywrapper.UintValue bc = 15153380 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/bc"];
  if (this->has_bc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15153380, *this->bc_, output);
  }

  // .ywrapper.UintValue pir_pct_remaining = 223122459 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir-pct-remaining"];
  if (this->has_pir_pct_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      223122459, *this->pir_pct_remaining_, output);
  }

  // .ywrapper.UintValue cir_pct = 228243271 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir-pct"];
  if (this->has_cir_pct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      228243271, *this->cir_pct_, output);
  }

  // .ywrapper.UintValue cir_pct_remaining = 276174460 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir-pct-remaining"];
  if (this->has_cir_pct_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      276174460, *this->cir_pct_remaining_, output);
  }

  // .ywrapper.UintValue pir = 366650638 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir"];
  if (this->has_pir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      366650638, *this->pir_, output);
  }

  // .ywrapper.UintValue cir = 368769365 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir"];
  if (this->has_cir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      368769365, *this->cir_, output);
  }

  // .ywrapper.UintValue pir_pct = 484968816 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir-pct"];
  if (this->has_pir_pct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      484968816, *this->pir_pct_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State)
}

::google::protobuf::uint8* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue be = 15153378 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/be"];
  if (this->has_be()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15153378, *this->be_, deterministic, target);
  }

  // .ywrapper.UintValue bc = 15153380 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/bc"];
  if (this->has_bc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15153380, *this->bc_, deterministic, target);
  }

  // .ywrapper.UintValue pir_pct_remaining = 223122459 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir-pct-remaining"];
  if (this->has_pir_pct_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        223122459, *this->pir_pct_remaining_, deterministic, target);
  }

  // .ywrapper.UintValue cir_pct = 228243271 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir-pct"];
  if (this->has_cir_pct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        228243271, *this->cir_pct_, deterministic, target);
  }

  // .ywrapper.UintValue cir_pct_remaining = 276174460 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir-pct-remaining"];
  if (this->has_cir_pct_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        276174460, *this->cir_pct_remaining_, deterministic, target);
  }

  // .ywrapper.UintValue pir = 366650638 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir"];
  if (this->has_pir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        366650638, *this->pir_, deterministic, target);
  }

  // .ywrapper.UintValue cir = 368769365 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir"];
  if (this->has_cir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        368769365, *this->cir_, deterministic, target);
  }

  // .ywrapper.UintValue pir_pct = 484968816 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir-pct"];
  if (this->has_pir_pct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        484968816, *this->pir_pct_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State)
  return target;
}

size_t Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue be = 15153378 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/be"];
  if (this->has_be()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->be_);
  }

  // .ywrapper.UintValue bc = 15153380 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/bc"];
  if (this->has_bc()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->bc_);
  }

  // .ywrapper.UintValue pir_pct_remaining = 223122459 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir-pct-remaining"];
  if (this->has_pir_pct_remaining()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pir_pct_remaining_);
  }

  // .ywrapper.UintValue cir_pct = 228243271 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir-pct"];
  if (this->has_cir_pct()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cir_pct_);
  }

  // .ywrapper.UintValue cir_pct_remaining = 276174460 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir-pct-remaining"];
  if (this->has_cir_pct_remaining()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cir_pct_remaining_);
  }

  // .ywrapper.UintValue pir = 366650638 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir"];
  if (this->has_pir()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pir_);
  }

  // .ywrapper.UintValue cir = 368769365 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir"];
  if (this->has_cir()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cir_);
  }

  // .ywrapper.UintValue pir_pct = 484968816 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir-pct"];
  if (this->has_pir_pct()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pir_pct_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State)
    MergeFrom(*source);
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_be()) {
    mutable_be()->::ywrapper::UintValue::MergeFrom(from.be());
  }
  if (from.has_bc()) {
    mutable_bc()->::ywrapper::UintValue::MergeFrom(from.bc());
  }
  if (from.has_pir_pct_remaining()) {
    mutable_pir_pct_remaining()->::ywrapper::UintValue::MergeFrom(from.pir_pct_remaining());
  }
  if (from.has_cir_pct()) {
    mutable_cir_pct()->::ywrapper::UintValue::MergeFrom(from.cir_pct());
  }
  if (from.has_cir_pct_remaining()) {
    mutable_cir_pct_remaining()->::ywrapper::UintValue::MergeFrom(from.cir_pct_remaining());
  }
  if (from.has_pir()) {
    mutable_pir()->::ywrapper::UintValue::MergeFrom(from.pir());
  }
  if (from.has_cir()) {
    mutable_cir()->::ywrapper::UintValue::MergeFrom(from.cir());
  }
  if (from.has_pir_pct()) {
    mutable_pir_pct()->::ywrapper::UintValue::MergeFrom(from.pir_pct());
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::IsInitialized() const {
  return true;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State* other) {
  using std::swap;
  swap(be_, other->be_);
  swap(bc_, other->bc_);
  swap(pir_pct_remaining_, other->pir_pct_remaining_);
  swap(cir_pct_, other->cir_pct_);
  swap(cir_pct_remaining_, other->cir_pct_remaining_);
  swap(pir_, other->pir_);
  swap(cir_, other->cir_);
  swap(pir_pct_, other->pir_pct_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config_default_instance_._instance.get_mutable()->drop_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config_default_instance_._instance.get_mutable()->set_dot1p_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config_default_instance_._instance.get_mutable()->set_dscp_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config_default_instance_._instance.get_mutable()->set_mpls_tc_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::clear_drop() {
  if (GetArenaNoVirtual() == NULL && drop_ != NULL) {
    delete drop_;
  }
  drop_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::clear_set_dot1p() {
  if (GetArenaNoVirtual() == NULL && set_dot1p_ != NULL) {
    delete set_dot1p_;
  }
  set_dot1p_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::clear_set_dscp() {
  if (GetArenaNoVirtual() == NULL && set_dscp_ != NULL) {
    delete set_dscp_;
  }
  set_dscp_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::clear_set_mpls_tc() {
  if (GetArenaNoVirtual() == NULL && set_mpls_tc_ != NULL) {
    delete set_mpls_tc_;
  }
  set_mpls_tc_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::kDropFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::kSetDot1PFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::kSetDscpFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::kSetMplsTcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config)
}
Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_set_dscp()) {
    set_dscp_ = new ::ywrapper::UintValue(*from.set_dscp_);
  } else {
    set_dscp_ = NULL;
  }
  if (from.has_drop()) {
    drop_ = new ::ywrapper::BoolValue(*from.drop_);
  } else {
    drop_ = NULL;
  }
  if (from.has_set_dot1p()) {
    set_dot1p_ = new ::ywrapper::UintValue(*from.set_dot1p_);
  } else {
    set_dot1p_ = NULL;
  }
  if (from.has_set_mpls_tc()) {
    set_mpls_tc_ = new ::ywrapper::UintValue(*from.set_mpls_tc_);
  } else {
    set_mpls_tc_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config)
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::SharedCtor() {
  ::memset(&set_dscp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&set_mpls_tc_) -
      reinterpret_cast<char*>(&set_dscp_)) + sizeof(set_mpls_tc_));
  _cached_size_ = 0;
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config)
  SharedDtor();
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::SharedDtor() {
  if (this != internal_default_instance()) delete set_dscp_;
  if (this != internal_default_instance()) delete drop_;
  if (this != internal_default_instance()) delete set_dot1p_;
  if (this != internal_default_instance()) delete set_mpls_tc_;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config();
  return *internal_default_instance();
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::New(::google::protobuf::Arena* arena) const {
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config* n = new Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && set_dscp_ != NULL) {
    delete set_dscp_;
  }
  set_dscp_ = NULL;
  if (GetArenaNoVirtual() == NULL && drop_ != NULL) {
    delete drop_;
  }
  drop_ = NULL;
  if (GetArenaNoVirtual() == NULL && set_dot1p_ != NULL) {
    delete set_dot1p_;
  }
  set_dot1p_ = NULL;
  if (GetArenaNoVirtual() == NULL && set_mpls_tc_ != NULL) {
    delete set_mpls_tc_;
  }
  set_mpls_tc_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3572572954u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue set_dscp = 77658205 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config/set-dscp"];
      case 77658205: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 621265642 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_dscp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue drop = 230160201 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config/drop"];
      case 230160201: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 1841281610 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_drop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue set_dot1p = 433219903 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config/set-dot1p"];
      case 433219903: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 3465759226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_dot1p()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue set_mpls_tc = 446571619 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config/set-mpls-tc"];
      case 446571619: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 3572572954 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_mpls_tc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config)
  return false;
#undef DO_
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue set_dscp = 77658205 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config/set-dscp"];
  if (this->has_set_dscp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      77658205, *this->set_dscp_, output);
  }

  // .ywrapper.BoolValue drop = 230160201 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config/drop"];
  if (this->has_drop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      230160201, *this->drop_, output);
  }

  // .ywrapper.UintValue set_dot1p = 433219903 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config/set-dot1p"];
  if (this->has_set_dot1p()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      433219903, *this->set_dot1p_, output);
  }

  // .ywrapper.UintValue set_mpls_tc = 446571619 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config/set-mpls-tc"];
  if (this->has_set_mpls_tc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      446571619, *this->set_mpls_tc_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config)
}

::google::protobuf::uint8* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue set_dscp = 77658205 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config/set-dscp"];
  if (this->has_set_dscp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        77658205, *this->set_dscp_, deterministic, target);
  }

  // .ywrapper.BoolValue drop = 230160201 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config/drop"];
  if (this->has_drop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        230160201, *this->drop_, deterministic, target);
  }

  // .ywrapper.UintValue set_dot1p = 433219903 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config/set-dot1p"];
  if (this->has_set_dot1p()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        433219903, *this->set_dot1p_, deterministic, target);
  }

  // .ywrapper.UintValue set_mpls_tc = 446571619 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config/set-mpls-tc"];
  if (this->has_set_mpls_tc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        446571619, *this->set_mpls_tc_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config)
  return target;
}

size_t Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue set_dscp = 77658205 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config/set-dscp"];
  if (this->has_set_dscp()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->set_dscp_);
  }

  // .ywrapper.BoolValue drop = 230160201 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config/drop"];
  if (this->has_drop()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->drop_);
  }

  // .ywrapper.UintValue set_dot1p = 433219903 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config/set-dot1p"];
  if (this->has_set_dot1p()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->set_dot1p_);
  }

  // .ywrapper.UintValue set_mpls_tc = 446571619 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config/set-mpls-tc"];
  if (this->has_set_mpls_tc()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->set_mpls_tc_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config)
    MergeFrom(*source);
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_set_dscp()) {
    mutable_set_dscp()->::ywrapper::UintValue::MergeFrom(from.set_dscp());
  }
  if (from.has_drop()) {
    mutable_drop()->::ywrapper::BoolValue::MergeFrom(from.drop());
  }
  if (from.has_set_dot1p()) {
    mutable_set_dot1p()->::ywrapper::UintValue::MergeFrom(from.set_dot1p());
  }
  if (from.has_set_mpls_tc()) {
    mutable_set_mpls_tc()->::ywrapper::UintValue::MergeFrom(from.set_mpls_tc());
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::IsInitialized() const {
  return true;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config* other) {
  using std::swap;
  swap(set_dscp_, other->set_dscp_);
  swap(drop_, other->drop_);
  swap(set_dot1p_, other->set_dot1p_);
  swap(set_mpls_tc_, other->set_mpls_tc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State_default_instance_._instance.get_mutable()->drop_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State_default_instance_._instance.get_mutable()->set_dot1p_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State_default_instance_._instance.get_mutable()->set_dscp_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State_default_instance_._instance.get_mutable()->set_mpls_tc_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::clear_drop() {
  if (GetArenaNoVirtual() == NULL && drop_ != NULL) {
    delete drop_;
  }
  drop_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::clear_set_dot1p() {
  if (GetArenaNoVirtual() == NULL && set_dot1p_ != NULL) {
    delete set_dot1p_;
  }
  set_dot1p_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::clear_set_dscp() {
  if (GetArenaNoVirtual() == NULL && set_dscp_ != NULL) {
    delete set_dscp_;
  }
  set_dscp_ = NULL;
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::clear_set_mpls_tc() {
  if (GetArenaNoVirtual() == NULL && set_mpls_tc_ != NULL) {
    delete set_mpls_tc_;
  }
  set_mpls_tc_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::kDropFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::kSetDot1PFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::kSetDscpFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::kSetMplsTcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State)
}
Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_drop()) {
    drop_ = new ::ywrapper::BoolValue(*from.drop_);
  } else {
    drop_ = NULL;
  }
  if (from.has_set_dscp()) {
    set_dscp_ = new ::ywrapper::UintValue(*from.set_dscp_);
  } else {
    set_dscp_ = NULL;
  }
  if (from.has_set_dot1p()) {
    set_dot1p_ = new ::ywrapper::UintValue(*from.set_dot1p_);
  } else {
    set_dot1p_ = NULL;
  }
  if (from.has_set_mpls_tc()) {
    set_mpls_tc_ = new ::ywrapper::UintValue(*from.set_mpls_tc_);
  } else {
    set_mpls_tc_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State)
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::SharedCtor() {
  ::memset(&drop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&set_mpls_tc_) -
      reinterpret_cast<char*>(&drop_)) + sizeof(set_mpls_tc_));
  _cached_size_ = 0;
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State)
  SharedDtor();
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::SharedDtor() {
  if (this != internal_default_instance()) delete drop_;
  if (this != internal_default_instance()) delete set_dscp_;
  if (this != internal_default_instance()) delete set_dot1p_;
  if (this != internal_default_instance()) delete set_mpls_tc_;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State();
  return *internal_default_instance();
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::New(::google::protobuf::Arena* arena) const {
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State* n = new Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && drop_ != NULL) {
    delete drop_;
  }
  drop_ = NULL;
  if (GetArenaNoVirtual() == NULL && set_dscp_ != NULL) {
    delete set_dscp_;
  }
  set_dscp_ = NULL;
  if (GetArenaNoVirtual() == NULL && set_dot1p_ != NULL) {
    delete set_dot1p_;
  }
  set_dot1p_ = NULL;
  if (GetArenaNoVirtual() == NULL && set_mpls_tc_ != NULL) {
    delete set_mpls_tc_;
  }
  set_mpls_tc_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3401555170u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.BoolValue drop = 94921628 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/drop"];
      case 94921628: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 759373026 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_drop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue set_dscp = 206736528 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-dscp"];
      case 206736528: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 1653892226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_dscp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue set_dot1p = 311422824 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-dot1p"];
      case 311422824: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 2491382594 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_dot1p()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue set_mpls_tc = 425194396 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-mpls-tc"];
      case 425194396: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 3401555170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_mpls_tc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State)
  return false;
#undef DO_
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.BoolValue drop = 94921628 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/drop"];
  if (this->has_drop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      94921628, *this->drop_, output);
  }

  // .ywrapper.UintValue set_dscp = 206736528 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-dscp"];
  if (this->has_set_dscp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      206736528, *this->set_dscp_, output);
  }

  // .ywrapper.UintValue set_dot1p = 311422824 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-dot1p"];
  if (this->has_set_dot1p()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      311422824, *this->set_dot1p_, output);
  }

  // .ywrapper.UintValue set_mpls_tc = 425194396 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-mpls-tc"];
  if (this->has_set_mpls_tc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      425194396, *this->set_mpls_tc_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State)
}

::google::protobuf::uint8* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.BoolValue drop = 94921628 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/drop"];
  if (this->has_drop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        94921628, *this->drop_, deterministic, target);
  }

  // .ywrapper.UintValue set_dscp = 206736528 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-dscp"];
  if (this->has_set_dscp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        206736528, *this->set_dscp_, deterministic, target);
  }

  // .ywrapper.UintValue set_dot1p = 311422824 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-dot1p"];
  if (this->has_set_dot1p()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        311422824, *this->set_dot1p_, deterministic, target);
  }

  // .ywrapper.UintValue set_mpls_tc = 425194396 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-mpls-tc"];
  if (this->has_set_mpls_tc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        425194396, *this->set_mpls_tc_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State)
  return target;
}

size_t Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.BoolValue drop = 94921628 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/drop"];
  if (this->has_drop()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->drop_);
  }

  // .ywrapper.UintValue set_dscp = 206736528 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-dscp"];
  if (this->has_set_dscp()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->set_dscp_);
  }

  // .ywrapper.UintValue set_dot1p = 311422824 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-dot1p"];
  if (this->has_set_dot1p()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->set_dot1p_);
  }

  // .ywrapper.UintValue set_mpls_tc = 425194396 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-mpls-tc"];
  if (this->has_set_mpls_tc()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->set_mpls_tc_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State)
    MergeFrom(*source);
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_drop()) {
    mutable_drop()->::ywrapper::BoolValue::MergeFrom(from.drop());
  }
  if (from.has_set_dscp()) {
    mutable_set_dscp()->::ywrapper::UintValue::MergeFrom(from.set_dscp());
  }
  if (from.has_set_dot1p()) {
    mutable_set_dot1p()->::ywrapper::UintValue::MergeFrom(from.set_dot1p());
  }
  if (from.has_set_mpls_tc()) {
    mutable_set_mpls_tc()->::ywrapper::UintValue::MergeFrom(from.set_mpls_tc());
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::IsInitialized() const {
  return true;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State* other) {
  using std::swap;
  swap(drop_, other->drop_);
  swap(set_dscp_, other->set_dscp_);
  swap(set_dot1p_, other->set_dot1p_);
  swap(set_mpls_tc_, other->set_mpls_tc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config*>(
      ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State*>(
      ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction::kConfigFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction)
}
Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction)
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&state_)) + sizeof(config_));
  _cached_size_ = 0;
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction::~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction)
  SharedDtor();
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete config_;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction();
  return *internal_default_instance();
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction::New(::google::protobuf::Arena* arena) const {
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction* n = new Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3931976826u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State state = 142023808 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state"];
      case 142023808: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 1136190466 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config config = 491497103 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config"];
      case 491497103: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 3931976826 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction)
  return false;
#undef DO_
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State state = 142023808 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      142023808, *this->state_, output);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config config = 491497103 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      491497103, *this->config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction)
}

::google::protobuf::uint8* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State state = 142023808 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        142023808, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config config = 491497103 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        491497103, *this->config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction)
  return target;
}

size_t Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State state = 142023808 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config config = 491497103 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction)
    MergeFrom(*source);
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction::MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::MergeFrom(from.state());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::MergeFrom(from.config());
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction::CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction::IsInitialized() const {
  return true;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction::Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction::InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(config_, other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config*>(
      ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_default_instance_._instance.get_mutable()->conform_action_ = const_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction*>(
      ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_default_instance_._instance.get_mutable()->exceed_action_ = const_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction*>(
      ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State*>(
      ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_default_instance_._instance.get_mutable()->violate_action_ = const_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction*>(
      ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::kConfigFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::kConformActionFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::kExceedActionFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::kStateFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::kViolateActionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor)
}
Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_violate_action()) {
    violate_action_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction(*from.violate_action_);
  } else {
    violate_action_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_exceed_action()) {
    exceed_action_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction(*from.exceed_action_);
  } else {
    exceed_action_ = NULL;
  }
  if (from.has_conform_action()) {
    conform_action_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction(*from.conform_action_);
  } else {
    conform_action_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor)
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::SharedCtor() {
  ::memset(&violate_action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&violate_action_)) + sizeof(config_));
  _cached_size_ = 0;
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor)
  SharedDtor();
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::SharedDtor() {
  if (this != internal_default_instance()) delete violate_action_;
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete exceed_action_;
  if (this != internal_default_instance()) delete conform_action_;
  if (this != internal_default_instance()) delete config_;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor();
  return *internal_default_instance();
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::New(::google::protobuf::Arena* arena) const {
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor* n = new Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && violate_action_ != NULL) {
    delete violate_action_;
  }
  violate_action_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && exceed_action_ != NULL) {
    delete exceed_action_;
  }
  exceed_action_ = NULL;
  if (GetArenaNoVirtual() == NULL && conform_action_ != NULL) {
    delete conform_action_;
  }
  conform_action_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4215854282u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction violate_action = 110529342 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action"];
      case 110529342: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 884234738 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_violate_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State state = 264511342 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state"];
      case 264511342: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 2116090738 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction exceed_action = 447571730 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action"];
      case 447571730: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 3580573842 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_exceed_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction conform_action = 482658734 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action"];
      case 482658734: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 3861269874 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_conform_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config config = 526981785 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config"];
      case 526981785: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 4215854282 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor)
  return false;
#undef DO_
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction violate_action = 110529342 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action"];
  if (this->has_violate_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      110529342, *this->violate_action_, output);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State state = 264511342 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      264511342, *this->state_, output);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction exceed_action = 447571730 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action"];
  if (this->has_exceed_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      447571730, *this->exceed_action_, output);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction conform_action = 482658734 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action"];
  if (this->has_conform_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      482658734, *this->conform_action_, output);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config config = 526981785 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      526981785, *this->config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor)
}

::google::protobuf::uint8* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction violate_action = 110529342 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action"];
  if (this->has_violate_action()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        110529342, *this->violate_action_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State state = 264511342 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        264511342, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction exceed_action = 447571730 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action"];
  if (this->has_exceed_action()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        447571730, *this->exceed_action_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction conform_action = 482658734 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action"];
  if (this->has_conform_action()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        482658734, *this->conform_action_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config config = 526981785 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        526981785, *this->config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor)
  return target;
}

size_t Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction violate_action = 110529342 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action"];
  if (this->has_violate_action()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->violate_action_);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State state = 264511342 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction exceed_action = 447571730 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action"];
  if (this->has_exceed_action()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->exceed_action_);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction conform_action = 482658734 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action"];
  if (this->has_conform_action()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->conform_action_);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config config = 526981785 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor)
    MergeFrom(*source);
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_violate_action()) {
    mutable_violate_action()->::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction::MergeFrom(from.violate_action());
  }
  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::MergeFrom(from.state());
  }
  if (from.has_exceed_action()) {
    mutable_exceed_action()->::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction::MergeFrom(from.exceed_action());
  }
  if (from.has_conform_action()) {
    mutable_conform_action()->::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction::MergeFrom(from.conform_action());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::MergeFrom(from.config());
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::IsInitialized() const {
  return true;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor* other) {
  using std::swap;
  swap(violate_action_, other->violate_action_);
  swap(state_, other->state_);
  swap(exceed_action_, other->exceed_action_);
  swap(conform_action_, other->conform_action_);
  swap(config_, other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config*>(
      ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_default_instance_._instance.get_mutable()->inputs_ = const_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs*>(
      ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_default_instance_._instance.get_mutable()->one_rate_two_color_ = const_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor*>(
      ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_default_instance_._instance.get_mutable()->output_ = const_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output*>(
      ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State*>(
      ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_default_instance_._instance.get_mutable()->two_rate_three_color_ = const_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor*>(
      ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::kConfigFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::kInputsFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::kOneRateTwoColorFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::kOutputFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::kStateFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::kTwoRateThreeColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler)
}
Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_two_rate_three_color()) {
    two_rate_three_color_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor(*from.two_rate_three_color_);
  } else {
    two_rate_three_color_ = NULL;
  }
  if (from.has_output()) {
    output_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output(*from.output_);
  } else {
    output_ = NULL;
  }
  if (from.has_inputs()) {
    inputs_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs(*from.inputs_);
  } else {
    inputs_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_one_rate_two_color()) {
    one_rate_two_color_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor(*from.one_rate_two_color_);
  } else {
    one_rate_two_color_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler)
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::SharedCtor() {
  ::memset(&two_rate_three_color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&one_rate_two_color_) -
      reinterpret_cast<char*>(&two_rate_three_color_)) + sizeof(one_rate_two_color_));
  _cached_size_ = 0;
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler)
  SharedDtor();
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::SharedDtor() {
  if (this != internal_default_instance()) delete two_rate_three_color_;
  if (this != internal_default_instance()) delete output_;
  if (this != internal_default_instance()) delete inputs_;
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete one_rate_two_color_;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler();
  return *internal_default_instance();
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::New(::google::protobuf::Arena* arena) const {
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler* n = new Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && two_rate_three_color_ != NULL) {
    delete two_rate_three_color_;
  }
  two_rate_three_color_ = NULL;
  if (GetArenaNoVirtual() == NULL && output_ != NULL) {
    delete output_;
  }
  output_ = NULL;
  if (GetArenaNoVirtual() == NULL && inputs_ != NULL) {
    delete inputs_;
  }
  inputs_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && one_rate_two_color_ != NULL) {
    delete one_rate_two_color_;
  }
  one_rate_two_color_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4017924514u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor two_rate_three_color = 10046740 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color"];
      case 10046740: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 80373922 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_two_rate_three_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output output = 46224159 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output"];
      case 46224159: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 369793274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_output()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs inputs = 152276279 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs"];
      case 152276279: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 1218210234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config config = 235323450 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config"];
      case 235323450: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 1882587602 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State state = 237125463 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state"];
      case 237125463: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 1897003706 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor one_rate_two_color = 502240564 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color"];
      case 502240564: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 4017924514 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_one_rate_two_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler)
  return false;
#undef DO_
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor two_rate_three_color = 10046740 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color"];
  if (this->has_two_rate_three_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10046740, *this->two_rate_three_color_, output);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output output = 46224159 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output"];
  if (this->has_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46224159, *this->output_, output);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs inputs = 152276279 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs"];
  if (this->has_inputs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      152276279, *this->inputs_, output);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config config = 235323450 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      235323450, *this->config_, output);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State state = 237125463 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      237125463, *this->state_, output);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor one_rate_two_color = 502240564 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color"];
  if (this->has_one_rate_two_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      502240564, *this->one_rate_two_color_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler)
}

::google::protobuf::uint8* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor two_rate_three_color = 10046740 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color"];
  if (this->has_two_rate_three_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10046740, *this->two_rate_three_color_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output output = 46224159 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output"];
  if (this->has_output()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        46224159, *this->output_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs inputs = 152276279 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs"];
  if (this->has_inputs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        152276279, *this->inputs_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config config = 235323450 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        235323450, *this->config_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State state = 237125463 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        237125463, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor one_rate_two_color = 502240564 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color"];
  if (this->has_one_rate_two_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        502240564, *this->one_rate_two_color_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler)
  return target;
}

size_t Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor two_rate_three_color = 10046740 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color"];
  if (this->has_two_rate_three_color()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->two_rate_three_color_);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output output = 46224159 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output"];
  if (this->has_output()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->output_);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs inputs = 152276279 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs"];
  if (this->has_inputs()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->inputs_);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config config = 235323450 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State state = 237125463 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor one_rate_two_color = 502240564 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color"];
  if (this->has_one_rate_two_color()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->one_rate_two_color_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler)
    MergeFrom(*source);
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_two_rate_three_color()) {
    mutable_two_rate_three_color()->::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::MergeFrom(from.two_rate_three_color());
  }
  if (from.has_output()) {
    mutable_output()->::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output::MergeFrom(from.output());
  }
  if (from.has_inputs()) {
    mutable_inputs()->::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs::MergeFrom(from.inputs());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::MergeFrom(from.config());
  }
  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::MergeFrom(from.state());
  }
  if (from.has_one_rate_two_color()) {
    mutable_one_rate_two_color()->::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::MergeFrom(from.one_rate_two_color());
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::IsInitialized() const {
  return true;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler* other) {
  using std::swap;
  swap(two_rate_three_color_, other->two_rate_three_color_);
  swap(output_, other->output_);
  swap(inputs_, other->inputs_);
  swap(config_, other->config_);
  swap(state_, other->state_);
  swap(one_rate_two_color_, other->one_rate_two_color_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey_default_instance_._instance.get_mutable()->scheduler_ = const_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler*>(
      ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey::kSequenceFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey::kSchedulerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.SchedulerKey)
}
Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_scheduler()) {
    scheduler_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler(*from.scheduler_);
  } else {
    scheduler_ = NULL;
  }
  sequence_ = from.sequence_;
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.SchedulerKey)
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey::SharedCtor() {
  ::memset(&scheduler_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&scheduler_)) + sizeof(sequence_));
  _cached_size_ = 0;
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey::~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.SchedulerKey)
  SharedDtor();
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey::SharedDtor() {
  if (this != internal_default_instance()) delete scheduler_;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey();
  return *internal_default_instance();
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey::New(::google::protobuf::Arena* arena) const {
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey* n = new Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.SchedulerKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && scheduler_ != NULL) {
    delete scheduler_;
  }
  scheduler_ = NULL;
  sequence_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.SchedulerKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 sequence = 1 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/sequence"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler scheduler = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scheduler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.SchedulerKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.SchedulerKey)
  return false;
#undef DO_
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.SchedulerKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sequence = 1 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/sequence"];
  if (this->sequence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sequence(), output);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler scheduler = 2;
  if (this->has_scheduler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->scheduler_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.SchedulerKey)
}

::google::protobuf::uint8* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.SchedulerKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sequence = 1 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/sequence"];
  if (this->sequence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sequence(), target);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler scheduler = 2;
  if (this->has_scheduler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->scheduler_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.SchedulerKey)
  return target;
}

size_t Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.SchedulerKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler scheduler = 2;
  if (this->has_scheduler()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->scheduler_);
  }

  // uint64 sequence = 1 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/sequence"];
  if (this->sequence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sequence());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.SchedulerKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.SchedulerKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.SchedulerKey)
    MergeFrom(*source);
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey::MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.SchedulerKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scheduler()) {
    mutable_scheduler()->::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::MergeFrom(from.scheduler());
  }
  if (from.sequence() != 0) {
    set_sequence(from.sequence());
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.SchedulerKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey::CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.SchedulerKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey::IsInitialized() const {
  return true;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey::Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey::InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey* other) {
  using std::swap;
  swap(scheduler_, other->scheduler_);
  swap(sequence_, other->sequence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers::kSchedulerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers)
}
Qos_SchedulerPolicies_SchedulerPolicy_Schedulers::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      scheduler_(from.scheduler_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers)
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers::SharedCtor() {
  _cached_size_ = 0;
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers::~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers)
  SharedDtor();
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers::SharedDtor() {
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers();
  return *internal_default_instance();
}

Qos_SchedulerPolicies_SchedulerPolicy_Schedulers* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers::New(::google::protobuf::Arena* arena) const {
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers* n = new Qos_SchedulerPolicies_SchedulerPolicy_Schedulers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scheduler_.Clear();
  _internal_metadata_.Clear();
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3957596330u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.SchedulerKey scheduler = 494699541 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler"];
      case 494699541: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 3957596330 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_scheduler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers)
  return false;
#undef DO_
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.SchedulerKey scheduler = 494699541 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->scheduler_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      494699541, this->scheduler(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers)
}

::google::protobuf::uint8* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.SchedulerKey scheduler = 494699541 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->scheduler_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        494699541, this->scheduler(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers)
  return target;
}

size_t Qos_SchedulerPolicies_SchedulerPolicy_Schedulers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.SchedulerKey scheduler = 494699541 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler"];
  {
    unsigned int count = static_cast<unsigned int>(this->scheduler_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->scheduler(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers)
    MergeFrom(*source);
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers::MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scheduler_.MergeFrom(from.scheduler_);
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers::CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers::IsInitialized() const {
  return true;
}

void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers::Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers::InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers* other) {
  using std::swap;
  scheduler_.InternalSwap(&other->scheduler_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_SchedulerPolicies_SchedulerPolicy_Schedulers::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_SchedulerPolicies_SchedulerPolicy_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_State_default_instance_._instance.get_mutable()->name_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void Qos_SchedulerPolicies_SchedulerPolicy_State::clear_name() {
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_SchedulerPolicies_SchedulerPolicy_State::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_SchedulerPolicies_SchedulerPolicy_State::Qos_SchedulerPolicies_SchedulerPolicy_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.State)
}
Qos_SchedulerPolicies_SchedulerPolicy_State::Qos_SchedulerPolicies_SchedulerPolicy_State(const Qos_SchedulerPolicies_SchedulerPolicy_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_name()) {
    name_ = new ::ywrapper::StringValue(*from.name_);
  } else {
    name_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.State)
}

void Qos_SchedulerPolicies_SchedulerPolicy_State::SharedCtor() {
  name_ = NULL;
  _cached_size_ = 0;
}

Qos_SchedulerPolicies_SchedulerPolicy_State::~Qos_SchedulerPolicies_SchedulerPolicy_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.State)
  SharedDtor();
}

void Qos_SchedulerPolicies_SchedulerPolicy_State::SharedDtor() {
  if (this != internal_default_instance()) delete name_;
}

void Qos_SchedulerPolicies_SchedulerPolicy_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_SchedulerPolicies_SchedulerPolicy_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_SchedulerPolicies_SchedulerPolicy_State& Qos_SchedulerPolicies_SchedulerPolicy_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_State();
  return *internal_default_instance();
}

Qos_SchedulerPolicies_SchedulerPolicy_State* Qos_SchedulerPolicies_SchedulerPolicy_State::New(::google::protobuf::Arena* arena) const {
  Qos_SchedulerPolicies_SchedulerPolicy_State* n = new Qos_SchedulerPolicies_SchedulerPolicy_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_SchedulerPolicies_SchedulerPolicy_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_SchedulerPolicies_SchedulerPolicy_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(12275378u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue name = 1534422 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/state/name"];
      case 1534422: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 12275378 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.State)
  return false;
#undef DO_
}

void Qos_SchedulerPolicies_SchedulerPolicy_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue name = 1534422 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/state/name"];
  if (this->has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1534422, *this->name_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.State)
}

::google::protobuf::uint8* Qos_SchedulerPolicies_SchedulerPolicy_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue name = 1534422 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/state/name"];
  if (this->has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1534422, *this->name_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.State)
  return target;
}

size_t Qos_SchedulerPolicies_SchedulerPolicy_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue name = 1534422 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/state/name"];
  if (this->has_name()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->name_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_SchedulerPolicies_SchedulerPolicy_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_SchedulerPolicies_SchedulerPolicy_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_SchedulerPolicies_SchedulerPolicy_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.State)
    MergeFrom(*source);
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_State::MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_name()) {
    mutable_name()->::ywrapper::StringValue::MergeFrom(from.name());
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_SchedulerPolicies_SchedulerPolicy_State::CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_SchedulerPolicies_SchedulerPolicy_State::IsInitialized() const {
  return true;
}

void Qos_SchedulerPolicies_SchedulerPolicy_State::Swap(Qos_SchedulerPolicies_SchedulerPolicy_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_SchedulerPolicies_SchedulerPolicy_State::InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_State* other) {
  using std::swap;
  swap(name_, other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_SchedulerPolicies_SchedulerPolicy_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_SchedulerPolicies_SchedulerPolicy::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Config*>(
      ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Config::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_default_instance_._instance.get_mutable()->schedulers_ = const_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers*>(
      ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_State*>(
      ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_SchedulerPolicies_SchedulerPolicy::kConfigFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy::kSchedulersFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicy::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_SchedulerPolicies_SchedulerPolicy::Qos_SchedulerPolicies_SchedulerPolicy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy)
}
Qos_SchedulerPolicies_SchedulerPolicy::Qos_SchedulerPolicies_SchedulerPolicy(const Qos_SchedulerPolicies_SchedulerPolicy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_schedulers()) {
    schedulers_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers(*from.schedulers_);
  } else {
    schedulers_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy)
}

void Qos_SchedulerPolicies_SchedulerPolicy::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&state_)) + sizeof(config_));
  _cached_size_ = 0;
}

Qos_SchedulerPolicies_SchedulerPolicy::~Qos_SchedulerPolicies_SchedulerPolicy() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy)
  SharedDtor();
}

void Qos_SchedulerPolicies_SchedulerPolicy::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete schedulers_;
  if (this != internal_default_instance()) delete config_;
}

void Qos_SchedulerPolicies_SchedulerPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_SchedulerPolicies_SchedulerPolicy::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_SchedulerPolicies_SchedulerPolicy& Qos_SchedulerPolicies_SchedulerPolicy::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy();
  return *internal_default_instance();
}

Qos_SchedulerPolicies_SchedulerPolicy* Qos_SchedulerPolicies_SchedulerPolicy::New(::google::protobuf::Arena* arena) const {
  Qos_SchedulerPolicies_SchedulerPolicy* n = new Qos_SchedulerPolicies_SchedulerPolicy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_SchedulerPolicies_SchedulerPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && schedulers_ != NULL) {
    delete schedulers_;
  }
  schedulers_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_SchedulerPolicies_SchedulerPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4199550618u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.State state = 242070708 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/state"];
      case 242070708: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 1936565666 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers schedulers = 419692355 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers"];
      case 419692355: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 3357538842 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_schedulers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Config config = 524943827 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/config"];
      case 524943827: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 4199550618 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy)
  return false;
#undef DO_
}

void Qos_SchedulerPolicies_SchedulerPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.State state = 242070708 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      242070708, *this->state_, output);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers schedulers = 419692355 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers"];
  if (this->has_schedulers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      419692355, *this->schedulers_, output);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Config config = 524943827 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      524943827, *this->config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy)
}

::google::protobuf::uint8* Qos_SchedulerPolicies_SchedulerPolicy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.State state = 242070708 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        242070708, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers schedulers = 419692355 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers"];
  if (this->has_schedulers()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        419692355, *this->schedulers_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Config config = 524943827 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        524943827, *this->config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy)
  return target;
}

size_t Qos_SchedulerPolicies_SchedulerPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.State state = 242070708 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers schedulers = 419692355 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers"];
  if (this->has_schedulers()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->schedulers_);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Config config = 524943827 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_SchedulerPolicies_SchedulerPolicy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_SchedulerPolicies_SchedulerPolicy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_SchedulerPolicies_SchedulerPolicy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy)
    MergeFrom(*source);
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy::MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_State::MergeFrom(from.state());
  }
  if (from.has_schedulers()) {
    mutable_schedulers()->::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers::MergeFrom(from.schedulers());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Config::MergeFrom(from.config());
  }
}

void Qos_SchedulerPolicies_SchedulerPolicy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_SchedulerPolicies_SchedulerPolicy::CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_SchedulerPolicies_SchedulerPolicy::IsInitialized() const {
  return true;
}

void Qos_SchedulerPolicies_SchedulerPolicy::Swap(Qos_SchedulerPolicies_SchedulerPolicy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_SchedulerPolicies_SchedulerPolicy::InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(schedulers_, other->schedulers_);
  swap(config_, other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_SchedulerPolicies_SchedulerPolicy::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_SchedulerPolicies_SchedulerPolicyKey::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicyKey_default_instance_._instance.get_mutable()->scheduler_policy_ = const_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy*>(
      ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_SchedulerPolicies_SchedulerPolicyKey::kNameFieldNumber;
const int Qos_SchedulerPolicies_SchedulerPolicyKey::kSchedulerPolicyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_SchedulerPolicies_SchedulerPolicyKey::Qos_SchedulerPolicies_SchedulerPolicyKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicyKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey)
}
Qos_SchedulerPolicies_SchedulerPolicyKey::Qos_SchedulerPolicies_SchedulerPolicyKey(const Qos_SchedulerPolicies_SchedulerPolicyKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_scheduler_policy()) {
    scheduler_policy_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy(*from.scheduler_policy_);
  } else {
    scheduler_policy_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey)
}

void Qos_SchedulerPolicies_SchedulerPolicyKey::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scheduler_policy_ = NULL;
  _cached_size_ = 0;
}

Qos_SchedulerPolicies_SchedulerPolicyKey::~Qos_SchedulerPolicies_SchedulerPolicyKey() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey)
  SharedDtor();
}

void Qos_SchedulerPolicies_SchedulerPolicyKey::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete scheduler_policy_;
}

void Qos_SchedulerPolicies_SchedulerPolicyKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_SchedulerPolicies_SchedulerPolicyKey::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_SchedulerPolicies_SchedulerPolicyKey& Qos_SchedulerPolicies_SchedulerPolicyKey::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicyKey();
  return *internal_default_instance();
}

Qos_SchedulerPolicies_SchedulerPolicyKey* Qos_SchedulerPolicies_SchedulerPolicyKey::New(::google::protobuf::Arena* arena) const {
  Qos_SchedulerPolicies_SchedulerPolicyKey* n = new Qos_SchedulerPolicies_SchedulerPolicyKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_SchedulerPolicies_SchedulerPolicyKey::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && scheduler_policy_ != NULL) {
    delete scheduler_policy_;
  }
  scheduler_policy_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos_SchedulerPolicies_SchedulerPolicyKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/name"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy scheduler_policy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scheduler_policy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey)
  return false;
#undef DO_
}

void Qos_SchedulerPolicies_SchedulerPolicyKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/name"];
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy scheduler_policy = 2;
  if (this->has_scheduler_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->scheduler_policy_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey)
}

::google::protobuf::uint8* Qos_SchedulerPolicies_SchedulerPolicyKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/name"];
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy scheduler_policy = 2;
  if (this->has_scheduler_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->scheduler_policy_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey)
  return target;
}

size_t Qos_SchedulerPolicies_SchedulerPolicyKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/name"];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy scheduler_policy = 2;
  if (this->has_scheduler_policy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->scheduler_policy_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_SchedulerPolicies_SchedulerPolicyKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_SchedulerPolicies_SchedulerPolicyKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_SchedulerPolicies_SchedulerPolicyKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey)
    MergeFrom(*source);
  }
}

void Qos_SchedulerPolicies_SchedulerPolicyKey::MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicyKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_scheduler_policy()) {
    mutable_scheduler_policy()->::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy::MergeFrom(from.scheduler_policy());
  }
}

void Qos_SchedulerPolicies_SchedulerPolicyKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_SchedulerPolicies_SchedulerPolicyKey::CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicyKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_SchedulerPolicies_SchedulerPolicyKey::IsInitialized() const {
  return true;
}

void Qos_SchedulerPolicies_SchedulerPolicyKey::Swap(Qos_SchedulerPolicies_SchedulerPolicyKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_SchedulerPolicies_SchedulerPolicyKey::InternalSwap(Qos_SchedulerPolicies_SchedulerPolicyKey* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(scheduler_policy_, other->scheduler_policy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_SchedulerPolicies_SchedulerPolicyKey::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_SchedulerPolicies::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos_SchedulerPolicies::kSchedulerPolicyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_SchedulerPolicies::Qos_SchedulerPolicies()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies)
}
Qos_SchedulerPolicies::Qos_SchedulerPolicies(const Qos_SchedulerPolicies& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      scheduler_policy_(from.scheduler_policy_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.SchedulerPolicies)
}

void Qos_SchedulerPolicies::SharedCtor() {
  _cached_size_ = 0;
}

Qos_SchedulerPolicies::~Qos_SchedulerPolicies() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.SchedulerPolicies)
  SharedDtor();
}

void Qos_SchedulerPolicies::SharedDtor() {
}

void Qos_SchedulerPolicies::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_SchedulerPolicies::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_SchedulerPolicies& Qos_SchedulerPolicies::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies();
  return *internal_default_instance();
}

Qos_SchedulerPolicies* Qos_SchedulerPolicies::New(::google::protobuf::Arena* arena) const {
  Qos_SchedulerPolicies* n = new Qos_SchedulerPolicies;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_SchedulerPolicies::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.SchedulerPolicies)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scheduler_policy_.Clear();
  _internal_metadata_.Clear();
}

bool Qos_SchedulerPolicies::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.SchedulerPolicies)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3380212882u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey scheduler_policy = 422526610 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy"];
      case 422526610: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 3380212882 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_scheduler_policy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.SchedulerPolicies)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.SchedulerPolicies)
  return false;
#undef DO_
}

void Qos_SchedulerPolicies::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.SchedulerPolicies)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey scheduler_policy = 422526610 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->scheduler_policy_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      422526610, this->scheduler_policy(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.SchedulerPolicies)
}

::google::protobuf::uint8* Qos_SchedulerPolicies::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.SchedulerPolicies)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey scheduler_policy = 422526610 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->scheduler_policy_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        422526610, this->scheduler_policy(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.SchedulerPolicies)
  return target;
}

size_t Qos_SchedulerPolicies::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.SchedulerPolicies)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey scheduler_policy = 422526610 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy"];
  {
    unsigned int count = static_cast<unsigned int>(this->scheduler_policy_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->scheduler_policy(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_SchedulerPolicies::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_SchedulerPolicies* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_SchedulerPolicies>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.SchedulerPolicies)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.SchedulerPolicies)
    MergeFrom(*source);
  }
}

void Qos_SchedulerPolicies::MergeFrom(const Qos_SchedulerPolicies& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scheduler_policy_.MergeFrom(from.scheduler_policy_);
}

void Qos_SchedulerPolicies::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_SchedulerPolicies::CopyFrom(const Qos_SchedulerPolicies& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.SchedulerPolicies)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_SchedulerPolicies::IsInitialized() const {
  return true;
}

void Qos_SchedulerPolicies::Swap(Qos_SchedulerPolicies* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_SchedulerPolicies::InternalSwap(Qos_SchedulerPolicies* other) {
  using std::swap;
  scheduler_policy_.InternalSwap(&other->scheduler_policy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_SchedulerPolicies::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos_State::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos_State::Qos_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos.State)
}
Qos_State::Qos_State(const Qos_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos.State)
}

void Qos_State::SharedCtor() {
  _cached_size_ = 0;
}

Qos_State::~Qos_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos.State)
  SharedDtor();
}

void Qos_State::SharedDtor() {
}

void Qos_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos_State& Qos_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_State();
  return *internal_default_instance();
}

Qos_State* Qos_State::New(::google::protobuf::Arena* arena) const {
  Qos_State* n = new Qos_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool Qos_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos.State)
  return false;
#undef DO_
}

void Qos_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos.State)
}

::google::protobuf::uint8* Qos_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos.State)
  return target;
}

size_t Qos_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos.State)
    MergeFrom(*source);
  }
}

void Qos_State::MergeFrom(const Qos_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Qos_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos_State::CopyFrom(const Qos_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos_State::IsInitialized() const {
  return true;
}

void Qos_State::Swap(Qos_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos_State::InternalSwap(Qos_State* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Qos::InitAsDefaultInstance() {
  ::openconfig::openconfig_qos::_Qos_default_instance_._instance.get_mutable()->classifiers_ = const_cast< ::openconfig::openconfig_qos::Qos_Classifiers*>(
      ::openconfig::openconfig_qos::Qos_Classifiers::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_qos::Qos_Config*>(
      ::openconfig::openconfig_qos::Qos_Config::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_default_instance_._instance.get_mutable()->forwarding_groups_ = const_cast< ::openconfig::openconfig_qos::Qos_ForwardingGroups*>(
      ::openconfig::openconfig_qos::Qos_ForwardingGroups::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_default_instance_._instance.get_mutable()->interfaces_ = const_cast< ::openconfig::openconfig_qos::Qos_Interfaces*>(
      ::openconfig::openconfig_qos::Qos_Interfaces::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_default_instance_._instance.get_mutable()->queues_ = const_cast< ::openconfig::openconfig_qos::Qos_Queues*>(
      ::openconfig::openconfig_qos::Qos_Queues::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_default_instance_._instance.get_mutable()->scheduler_policies_ = const_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies*>(
      ::openconfig::openconfig_qos::Qos_SchedulerPolicies::internal_default_instance());
  ::openconfig::openconfig_qos::_Qos_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_qos::Qos_State*>(
      ::openconfig::openconfig_qos::Qos_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qos::kClassifiersFieldNumber;
const int Qos::kConfigFieldNumber;
const int Qos::kForwardingGroupsFieldNumber;
const int Qos::kInterfacesFieldNumber;
const int Qos::kQueuesFieldNumber;
const int Qos::kSchedulerPoliciesFieldNumber;
const int Qos::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qos::Qos()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_qos.Qos)
}
Qos::Qos(const Qos& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_classifiers()) {
    classifiers_ = new ::openconfig::openconfig_qos::Qos_Classifiers(*from.classifiers_);
  } else {
    classifiers_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_qos::Qos_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_scheduler_policies()) {
    scheduler_policies_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies(*from.scheduler_policies_);
  } else {
    scheduler_policies_ = NULL;
  }
  if (from.has_queues()) {
    queues_ = new ::openconfig::openconfig_qos::Qos_Queues(*from.queues_);
  } else {
    queues_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_qos::Qos_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_forwarding_groups()) {
    forwarding_groups_ = new ::openconfig::openconfig_qos::Qos_ForwardingGroups(*from.forwarding_groups_);
  } else {
    forwarding_groups_ = NULL;
  }
  if (from.has_interfaces()) {
    interfaces_ = new ::openconfig::openconfig_qos::Qos_Interfaces(*from.interfaces_);
  } else {
    interfaces_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_qos.Qos)
}

void Qos::SharedCtor() {
  ::memset(&classifiers_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interfaces_) -
      reinterpret_cast<char*>(&classifiers_)) + sizeof(interfaces_));
  _cached_size_ = 0;
}

Qos::~Qos() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_qos.Qos)
  SharedDtor();
}

void Qos::SharedDtor() {
  if (this != internal_default_instance()) delete classifiers_;
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete scheduler_policies_;
  if (this != internal_default_instance()) delete queues_;
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete forwarding_groups_;
  if (this != internal_default_instance()) delete interfaces_;
}

void Qos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qos::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qos& Qos::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos();
  return *internal_default_instance();
}

Qos* Qos::New(::google::protobuf::Arena* arena) const {
  Qos* n = new Qos;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qos::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_qos.Qos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && classifiers_ != NULL) {
    delete classifiers_;
  }
  classifiers_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && scheduler_policies_ != NULL) {
    delete scheduler_policies_;
  }
  scheduler_policies_ = NULL;
  if (GetArenaNoVirtual() == NULL && queues_ != NULL) {
    delete queues_;
  }
  queues_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && forwarding_groups_ != NULL) {
    delete forwarding_groups_;
  }
  forwarding_groups_ = NULL;
  if (GetArenaNoVirtual() == NULL && interfaces_ != NULL) {
    delete interfaces_;
  }
  interfaces_ = NULL;
  _internal_metadata_.Clear();
}

bool Qos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_qos.Qos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2639784698u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_qos.Qos.Classifiers classifiers = 90288891 [(.yext.schemapath) = "/qos/classifiers"];
      case 90288891: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 722311130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_classifiers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.State state = 139048646 [(.yext.schemapath) = "/qos/state"];
      case 139048646: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 1112389170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.SchedulerPolicies scheduler_policies = 191956329 [(.yext.schemapath) = "/qos/scheduler-policies"];
      case 191956329: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 1535650634 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scheduler_policies()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Queues queues = 244490847 [(.yext.schemapath) = "/qos/queues"];
      case 244490847: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 1955926778 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_queues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Config config = 254929617 [(.yext.schemapath) = "/qos/config"];
      case 254929617: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 2039436938 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.ForwardingGroups forwarding_groups = 328718935 [(.yext.schemapath) = "/qos/forwarding-groups"];
      case 328718935: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 2629751482 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_forwarding_groups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_qos.Qos.Interfaces interfaces = 329973087 [(.yext.schemapath) = "/qos/interfaces"];
      case 329973087: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 2639784698 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_interfaces()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_qos.Qos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_qos.Qos)
  return false;
#undef DO_
}

void Qos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_qos.Qos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Classifiers classifiers = 90288891 [(.yext.schemapath) = "/qos/classifiers"];
  if (this->has_classifiers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      90288891, *this->classifiers_, output);
  }

  // .openconfig.openconfig_qos.Qos.State state = 139048646 [(.yext.schemapath) = "/qos/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      139048646, *this->state_, output);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies scheduler_policies = 191956329 [(.yext.schemapath) = "/qos/scheduler-policies"];
  if (this->has_scheduler_policies()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      191956329, *this->scheduler_policies_, output);
  }

  // .openconfig.openconfig_qos.Qos.Queues queues = 244490847 [(.yext.schemapath) = "/qos/queues"];
  if (this->has_queues()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      244490847, *this->queues_, output);
  }

  // .openconfig.openconfig_qos.Qos.Config config = 254929617 [(.yext.schemapath) = "/qos/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      254929617, *this->config_, output);
  }

  // .openconfig.openconfig_qos.Qos.ForwardingGroups forwarding_groups = 328718935 [(.yext.schemapath) = "/qos/forwarding-groups"];
  if (this->has_forwarding_groups()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      328718935, *this->forwarding_groups_, output);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces interfaces = 329973087 [(.yext.schemapath) = "/qos/interfaces"];
  if (this->has_interfaces()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      329973087, *this->interfaces_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_qos.Qos)
}

::google::protobuf::uint8* Qos::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_qos.Qos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_qos.Qos.Classifiers classifiers = 90288891 [(.yext.schemapath) = "/qos/classifiers"];
  if (this->has_classifiers()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        90288891, *this->classifiers_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.State state = 139048646 [(.yext.schemapath) = "/qos/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        139048646, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies scheduler_policies = 191956329 [(.yext.schemapath) = "/qos/scheduler-policies"];
  if (this->has_scheduler_policies()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        191956329, *this->scheduler_policies_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Queues queues = 244490847 [(.yext.schemapath) = "/qos/queues"];
  if (this->has_queues()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        244490847, *this->queues_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Config config = 254929617 [(.yext.schemapath) = "/qos/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        254929617, *this->config_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.ForwardingGroups forwarding_groups = 328718935 [(.yext.schemapath) = "/qos/forwarding-groups"];
  if (this->has_forwarding_groups()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        328718935, *this->forwarding_groups_, deterministic, target);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces interfaces = 329973087 [(.yext.schemapath) = "/qos/interfaces"];
  if (this->has_interfaces()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        329973087, *this->interfaces_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_qos.Qos)
  return target;
}

size_t Qos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_qos.Qos)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_qos.Qos.Classifiers classifiers = 90288891 [(.yext.schemapath) = "/qos/classifiers"];
  if (this->has_classifiers()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->classifiers_);
  }

  // .openconfig.openconfig_qos.Qos.State state = 139048646 [(.yext.schemapath) = "/qos/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies scheduler_policies = 191956329 [(.yext.schemapath) = "/qos/scheduler-policies"];
  if (this->has_scheduler_policies()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->scheduler_policies_);
  }

  // .openconfig.openconfig_qos.Qos.Queues queues = 244490847 [(.yext.schemapath) = "/qos/queues"];
  if (this->has_queues()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->queues_);
  }

  // .openconfig.openconfig_qos.Qos.Config config = 254929617 [(.yext.schemapath) = "/qos/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  // .openconfig.openconfig_qos.Qos.ForwardingGroups forwarding_groups = 328718935 [(.yext.schemapath) = "/qos/forwarding-groups"];
  if (this->has_forwarding_groups()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->forwarding_groups_);
  }

  // .openconfig.openconfig_qos.Qos.Interfaces interfaces = 329973087 [(.yext.schemapath) = "/qos/interfaces"];
  if (this->has_interfaces()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->interfaces_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qos::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_qos.Qos)
  GOOGLE_DCHECK_NE(&from, this);
  const Qos* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qos>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_qos.Qos)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_qos.Qos)
    MergeFrom(*source);
  }
}

void Qos::MergeFrom(const Qos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_qos.Qos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_classifiers()) {
    mutable_classifiers()->::openconfig::openconfig_qos::Qos_Classifiers::MergeFrom(from.classifiers());
  }
  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_qos::Qos_State::MergeFrom(from.state());
  }
  if (from.has_scheduler_policies()) {
    mutable_scheduler_policies()->::openconfig::openconfig_qos::Qos_SchedulerPolicies::MergeFrom(from.scheduler_policies());
  }
  if (from.has_queues()) {
    mutable_queues()->::openconfig::openconfig_qos::Qos_Queues::MergeFrom(from.queues());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_qos::Qos_Config::MergeFrom(from.config());
  }
  if (from.has_forwarding_groups()) {
    mutable_forwarding_groups()->::openconfig::openconfig_qos::Qos_ForwardingGroups::MergeFrom(from.forwarding_groups());
  }
  if (from.has_interfaces()) {
    mutable_interfaces()->::openconfig::openconfig_qos::Qos_Interfaces::MergeFrom(from.interfaces());
  }
}

void Qos::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_qos.Qos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qos::CopyFrom(const Qos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_qos.Qos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qos::IsInitialized() const {
  return true;
}

void Qos::Swap(Qos* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qos::InternalSwap(Qos* other) {
  using std::swap;
  swap(classifiers_, other->classifiers_);
  swap(state_, other->state_);
  swap(scheduler_policies_, other->scheduler_policies_);
  swap(queues_, other->queues_);
  swap(config_, other->config_);
  swap(forwarding_groups_, other->forwarding_groups_);
  swap(interfaces_, other->interfaces_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qos::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace openconfig_qos
}  // namespace openconfig

// @@protoc_insertion_point(global_scope)
