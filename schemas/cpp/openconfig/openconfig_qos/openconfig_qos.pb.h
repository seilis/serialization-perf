// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openconfig/openconfig_qos/openconfig_qos.proto

#ifndef PROTOBUF_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto__INCLUDED
#define PROTOBUF_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "github.com/openconfig/ygot/proto/ywrapper/ywrapper.pb.h"
#include "github.com/openconfig/ygot/proto/yext/yext.pb.h"
#include "openconfig/enums/enums.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[161];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsQos_Classifiers_Classifier_ConfigImpl();
void InitDefaultsQos_Classifiers_Classifier_Config();
void InitDefaultsQos_Classifiers_Classifier_StateImpl();
void InitDefaultsQos_Classifiers_Classifier_State();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_ConfigImpl();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_Config();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_Remark_ConfigImpl();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_Remark_StateImpl();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_Remark_State();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_RemarkImpl();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_Remark();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_StateImpl();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_State();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_ActionsImpl();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_ConfigImpl();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_StateImpl();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4Impl();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_ConfigImpl();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_StateImpl();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6Impl();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_L2_ConfigImpl();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_L2_StateImpl();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_L2_State();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_L2Impl();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_L2();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_ConfigImpl();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_StateImpl();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_MplsImpl();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Mpls();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_ConfigImpl();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_StateImpl();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_TransportImpl();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Transport();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_ConditionsImpl();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_ConfigImpl();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_Config();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_StateImpl();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term_State();
void InitDefaultsQos_Classifiers_Classifier_Terms_TermImpl();
void InitDefaultsQos_Classifiers_Classifier_Terms_Term();
void InitDefaultsQos_Classifiers_Classifier_Terms_TermKeyImpl();
void InitDefaultsQos_Classifiers_Classifier_Terms_TermKey();
void InitDefaultsQos_Classifiers_Classifier_TermsImpl();
void InitDefaultsQos_Classifiers_Classifier_Terms();
void InitDefaultsQos_Classifiers_ClassifierImpl();
void InitDefaultsQos_Classifiers_Classifier();
void InitDefaultsQos_Classifiers_ClassifierKeyImpl();
void InitDefaultsQos_Classifiers_ClassifierKey();
void InitDefaultsQos_ClassifiersImpl();
void InitDefaultsQos_Classifiers();
void InitDefaultsQos_ConfigImpl();
void InitDefaultsQos_Config();
void InitDefaultsQos_ForwardingGroups_ForwardingGroup_ConfigImpl();
void InitDefaultsQos_ForwardingGroups_ForwardingGroup_Config();
void InitDefaultsQos_ForwardingGroups_ForwardingGroup_StateImpl();
void InitDefaultsQos_ForwardingGroups_ForwardingGroup_State();
void InitDefaultsQos_ForwardingGroups_ForwardingGroupImpl();
void InitDefaultsQos_ForwardingGroups_ForwardingGroup();
void InitDefaultsQos_ForwardingGroups_ForwardingGroupKeyImpl();
void InitDefaultsQos_ForwardingGroups_ForwardingGroupKey();
void InitDefaultsQos_ForwardingGroupsImpl();
void InitDefaultsQos_ForwardingGroups();
void InitDefaultsQos_Interfaces_Interface_ConfigImpl();
void InitDefaultsQos_Interfaces_Interface_Config();
void InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_ConfigImpl();
void InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Config();
void InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_StateImpl();
void InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_State();
void InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_ConfigImpl();
void InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config();
void InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_StateImpl();
void InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State();
void InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermImpl();
void InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term();
void InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKeyImpl();
void InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey();
void InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_TermsImpl();
void InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms();
void InitDefaultsQos_Interfaces_Interface_Input_Classifers_ClassifierImpl();
void InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier();
void InitDefaultsQos_Interfaces_Interface_Input_Classifers_ClassifierKeyImpl();
void InitDefaultsQos_Interfaces_Interface_Input_Classifers_ClassifierKey();
void InitDefaultsQos_Interfaces_Interface_Input_ClassifersImpl();
void InitDefaultsQos_Interfaces_Interface_Input_Classifers();
void InitDefaultsQos_Interfaces_Interface_Input_ConfigImpl();
void InitDefaultsQos_Interfaces_Interface_Input_Config();
void InitDefaultsQos_Interfaces_Interface_Input_Queues_Queue_ConfigImpl();
void InitDefaultsQos_Interfaces_Interface_Input_Queues_Queue_Config();
void InitDefaultsQos_Interfaces_Interface_Input_Queues_Queue_StateImpl();
void InitDefaultsQos_Interfaces_Interface_Input_Queues_Queue_State();
void InitDefaultsQos_Interfaces_Interface_Input_Queues_QueueImpl();
void InitDefaultsQos_Interfaces_Interface_Input_Queues_Queue();
void InitDefaultsQos_Interfaces_Interface_Input_Queues_QueueKeyImpl();
void InitDefaultsQos_Interfaces_Interface_Input_Queues_QueueKey();
void InitDefaultsQos_Interfaces_Interface_Input_QueuesImpl();
void InitDefaultsQos_Interfaces_Interface_Input_Queues();
void InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_ConfigImpl();
void InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Config();
void InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_StateImpl();
void InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State();
void InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerImpl();
void InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler();
void InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKeyImpl();
void InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey();
void InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_SchedulersImpl();
void InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers();
void InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_StateImpl();
void InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_State();
void InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicyImpl();
void InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy();
void InitDefaultsQos_Interfaces_Interface_Input_StateImpl();
void InitDefaultsQos_Interfaces_Interface_Input_State();
void InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_ConfigImpl();
void InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config();
void InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_ConfigImpl();
void InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config();
void InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_StateImpl();
void InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State();
void InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueImpl();
void InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue();
void InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKeyImpl();
void InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey();
void InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_QueuesImpl();
void InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues();
void InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_StateImpl();
void InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State();
void InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceImpl();
void InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface();
void InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKeyImpl();
void InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey();
void InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueuesImpl();
void InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues();
void InitDefaultsQos_Interfaces_Interface_InputImpl();
void InitDefaultsQos_Interfaces_Interface_Input();
void InitDefaultsQos_Interfaces_Interface_InterfaceRef_ConfigImpl();
void InitDefaultsQos_Interfaces_Interface_InterfaceRef_Config();
void InitDefaultsQos_Interfaces_Interface_InterfaceRef_StateImpl();
void InitDefaultsQos_Interfaces_Interface_InterfaceRef_State();
void InitDefaultsQos_Interfaces_Interface_InterfaceRefImpl();
void InitDefaultsQos_Interfaces_Interface_InterfaceRef();
void InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_ConfigImpl();
void InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Config();
void InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_StateImpl();
void InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_State();
void InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_ConfigImpl();
void InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config();
void InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_StateImpl();
void InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State();
void InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermImpl();
void InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term();
void InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKeyImpl();
void InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey();
void InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_TermsImpl();
void InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms();
void InitDefaultsQos_Interfaces_Interface_Output_Classifers_ClassifierImpl();
void InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier();
void InitDefaultsQos_Interfaces_Interface_Output_Classifers_ClassifierKeyImpl();
void InitDefaultsQos_Interfaces_Interface_Output_Classifers_ClassifierKey();
void InitDefaultsQos_Interfaces_Interface_Output_ClassifersImpl();
void InitDefaultsQos_Interfaces_Interface_Output_Classifers();
void InitDefaultsQos_Interfaces_Interface_Output_ConfigImpl();
void InitDefaultsQos_Interfaces_Interface_Output_Config();
void InitDefaultsQos_Interfaces_Interface_Output_InterfaceRef_ConfigImpl();
void InitDefaultsQos_Interfaces_Interface_Output_InterfaceRef_Config();
void InitDefaultsQos_Interfaces_Interface_Output_InterfaceRef_StateImpl();
void InitDefaultsQos_Interfaces_Interface_Output_InterfaceRef_State();
void InitDefaultsQos_Interfaces_Interface_Output_InterfaceRefImpl();
void InitDefaultsQos_Interfaces_Interface_Output_InterfaceRef();
void InitDefaultsQos_Interfaces_Interface_Output_Queues_Queue_ConfigImpl();
void InitDefaultsQos_Interfaces_Interface_Output_Queues_Queue_Config();
void InitDefaultsQos_Interfaces_Interface_Output_Queues_Queue_StateImpl();
void InitDefaultsQos_Interfaces_Interface_Output_Queues_Queue_State();
void InitDefaultsQos_Interfaces_Interface_Output_Queues_QueueImpl();
void InitDefaultsQos_Interfaces_Interface_Output_Queues_Queue();
void InitDefaultsQos_Interfaces_Interface_Output_Queues_QueueKeyImpl();
void InitDefaultsQos_Interfaces_Interface_Output_Queues_QueueKey();
void InitDefaultsQos_Interfaces_Interface_Output_QueuesImpl();
void InitDefaultsQos_Interfaces_Interface_Output_Queues();
void InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_ConfigImpl();
void InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Config();
void InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_StateImpl();
void InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State();
void InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerImpl();
void InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler();
void InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKeyImpl();
void InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey();
void InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_SchedulersImpl();
void InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers();
void InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_StateImpl();
void InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_State();
void InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicyImpl();
void InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy();
void InitDefaultsQos_Interfaces_Interface_Output_StateImpl();
void InitDefaultsQos_Interfaces_Interface_Output_State();
void InitDefaultsQos_Interfaces_Interface_OutputImpl();
void InitDefaultsQos_Interfaces_Interface_Output();
void InitDefaultsQos_Interfaces_Interface_StateImpl();
void InitDefaultsQos_Interfaces_Interface_State();
void InitDefaultsQos_Interfaces_InterfaceImpl();
void InitDefaultsQos_Interfaces_Interface();
void InitDefaultsQos_Interfaces_InterfaceKeyImpl();
void InitDefaultsQos_Interfaces_InterfaceKey();
void InitDefaultsQos_InterfacesImpl();
void InitDefaultsQos_Interfaces();
void InitDefaultsQos_Queues_Queue_ConfigImpl();
void InitDefaultsQos_Queues_Queue_Config();
void InitDefaultsQos_Queues_Queue_Red_ConfigImpl();
void InitDefaultsQos_Queues_Queue_Red_Config();
void InitDefaultsQos_Queues_Queue_Red_StateImpl();
void InitDefaultsQos_Queues_Queue_Red_State();
void InitDefaultsQos_Queues_Queue_RedImpl();
void InitDefaultsQos_Queues_Queue_Red();
void InitDefaultsQos_Queues_Queue_StateImpl();
void InitDefaultsQos_Queues_Queue_State();
void InitDefaultsQos_Queues_Queue_Wred_ConfigImpl();
void InitDefaultsQos_Queues_Queue_Wred_Config();
void InitDefaultsQos_Queues_Queue_Wred_StateImpl();
void InitDefaultsQos_Queues_Queue_Wred_State();
void InitDefaultsQos_Queues_Queue_WredImpl();
void InitDefaultsQos_Queues_Queue_Wred();
void InitDefaultsQos_Queues_QueueImpl();
void InitDefaultsQos_Queues_Queue();
void InitDefaultsQos_Queues_QueueKeyImpl();
void InitDefaultsQos_Queues_QueueKey();
void InitDefaultsQos_QueuesImpl();
void InitDefaultsQos_Queues();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_ConfigImpl();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Config();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_ConfigImpl();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_ConfigImpl();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_StateImpl();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputImpl();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKeyImpl();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_InputsImpl();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConfigImpl();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_ConfigImpl();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_StateImpl();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformActionImpl();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_ConfigImpl();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_StateImpl();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedActionImpl();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_StateImpl();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColorImpl();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_ConfigImpl();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_StateImpl();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OutputImpl();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_StateImpl();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConfigImpl();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_ConfigImpl();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_StateImpl();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformActionImpl();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_ConfigImpl();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_StateImpl();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedActionImpl();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_StateImpl();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_ConfigImpl();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_StateImpl();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateActionImpl();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColorImpl();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerImpl();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKeyImpl();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_SchedulersImpl();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_StateImpl();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_State();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicyImpl();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicy();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicyKeyImpl();
void InitDefaultsQos_SchedulerPolicies_SchedulerPolicyKey();
void InitDefaultsQos_SchedulerPoliciesImpl();
void InitDefaultsQos_SchedulerPolicies();
void InitDefaultsQos_StateImpl();
void InitDefaultsQos_State();
void InitDefaultsQosImpl();
void InitDefaultsQos();
inline void InitDefaults() {
  InitDefaultsQos_Classifiers_Classifier_Config();
  InitDefaultsQos_Classifiers_Classifier_State();
  InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_Config();
  InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config();
  InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_Remark_State();
  InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_Remark();
  InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_State();
  InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions();
  InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config();
  InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State();
  InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4();
  InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config();
  InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State();
  InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6();
  InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config();
  InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_L2_State();
  InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_L2();
  InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config();
  InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State();
  InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Mpls();
  InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config();
  InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State();
  InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Transport();
  InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions();
  InitDefaultsQos_Classifiers_Classifier_Terms_Term_Config();
  InitDefaultsQos_Classifiers_Classifier_Terms_Term_State();
  InitDefaultsQos_Classifiers_Classifier_Terms_Term();
  InitDefaultsQos_Classifiers_Classifier_Terms_TermKey();
  InitDefaultsQos_Classifiers_Classifier_Terms();
  InitDefaultsQos_Classifiers_Classifier();
  InitDefaultsQos_Classifiers_ClassifierKey();
  InitDefaultsQos_Classifiers();
  InitDefaultsQos_Config();
  InitDefaultsQos_ForwardingGroups_ForwardingGroup_Config();
  InitDefaultsQos_ForwardingGroups_ForwardingGroup_State();
  InitDefaultsQos_ForwardingGroups_ForwardingGroup();
  InitDefaultsQos_ForwardingGroups_ForwardingGroupKey();
  InitDefaultsQos_ForwardingGroups();
  InitDefaultsQos_Interfaces_Interface_Config();
  InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Config();
  InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_State();
  InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config();
  InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State();
  InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term();
  InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey();
  InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms();
  InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier();
  InitDefaultsQos_Interfaces_Interface_Input_Classifers_ClassifierKey();
  InitDefaultsQos_Interfaces_Interface_Input_Classifers();
  InitDefaultsQos_Interfaces_Interface_Input_Config();
  InitDefaultsQos_Interfaces_Interface_Input_Queues_Queue_Config();
  InitDefaultsQos_Interfaces_Interface_Input_Queues_Queue_State();
  InitDefaultsQos_Interfaces_Interface_Input_Queues_Queue();
  InitDefaultsQos_Interfaces_Interface_Input_Queues_QueueKey();
  InitDefaultsQos_Interfaces_Interface_Input_Queues();
  InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Config();
  InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State();
  InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler();
  InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey();
  InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers();
  InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_State();
  InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy();
  InitDefaultsQos_Interfaces_Interface_Input_State();
  InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config();
  InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config();
  InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State();
  InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue();
  InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey();
  InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues();
  InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State();
  InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface();
  InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey();
  InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues();
  InitDefaultsQos_Interfaces_Interface_Input();
  InitDefaultsQos_Interfaces_Interface_InterfaceRef_Config();
  InitDefaultsQos_Interfaces_Interface_InterfaceRef_State();
  InitDefaultsQos_Interfaces_Interface_InterfaceRef();
  InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Config();
  InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_State();
  InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config();
  InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State();
  InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term();
  InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey();
  InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms();
  InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier();
  InitDefaultsQos_Interfaces_Interface_Output_Classifers_ClassifierKey();
  InitDefaultsQos_Interfaces_Interface_Output_Classifers();
  InitDefaultsQos_Interfaces_Interface_Output_Config();
  InitDefaultsQos_Interfaces_Interface_Output_InterfaceRef_Config();
  InitDefaultsQos_Interfaces_Interface_Output_InterfaceRef_State();
  InitDefaultsQos_Interfaces_Interface_Output_InterfaceRef();
  InitDefaultsQos_Interfaces_Interface_Output_Queues_Queue_Config();
  InitDefaultsQos_Interfaces_Interface_Output_Queues_Queue_State();
  InitDefaultsQos_Interfaces_Interface_Output_Queues_Queue();
  InitDefaultsQos_Interfaces_Interface_Output_Queues_QueueKey();
  InitDefaultsQos_Interfaces_Interface_Output_Queues();
  InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Config();
  InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State();
  InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler();
  InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey();
  InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers();
  InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_State();
  InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy();
  InitDefaultsQos_Interfaces_Interface_Output_State();
  InitDefaultsQos_Interfaces_Interface_Output();
  InitDefaultsQos_Interfaces_Interface_State();
  InitDefaultsQos_Interfaces_Interface();
  InitDefaultsQos_Interfaces_InterfaceKey();
  InitDefaultsQos_Interfaces();
  InitDefaultsQos_Queues_Queue_Config();
  InitDefaultsQos_Queues_Queue_Red_Config();
  InitDefaultsQos_Queues_Queue_Red_State();
  InitDefaultsQos_Queues_Queue_Red();
  InitDefaultsQos_Queues_Queue_State();
  InitDefaultsQos_Queues_Queue_Wred_Config();
  InitDefaultsQos_Queues_Queue_Wred_State();
  InitDefaultsQos_Queues_Queue_Wred();
  InitDefaultsQos_Queues_Queue();
  InitDefaultsQos_Queues_QueueKey();
  InitDefaultsQos_Queues();
  InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Config();
  InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config();
  InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config();
  InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State();
  InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input();
  InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey();
  InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs();
  InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config();
  InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config();
  InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State();
  InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction();
  InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config();
  InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State();
  InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction();
  InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State();
  InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor();
  InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config();
  InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State();
  InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output();
  InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State();
  InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config();
  InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config();
  InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State();
  InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction();
  InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config();
  InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State();
  InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction();
  InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State();
  InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config();
  InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State();
  InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction();
  InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor();
  InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler();
  InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey();
  InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers();
  InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_State();
  InitDefaultsQos_SchedulerPolicies_SchedulerPolicy();
  InitDefaultsQos_SchedulerPolicies_SchedulerPolicyKey();
  InitDefaultsQos_SchedulerPolicies();
  InitDefaultsQos_State();
  InitDefaultsQos();
}
}  // namespace protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto
namespace openconfig {
namespace openconfig_qos {
class Qos;
class QosDefaultTypeInternal;
extern QosDefaultTypeInternal _Qos_default_instance_;
class Qos_Classifiers;
class Qos_ClassifiersDefaultTypeInternal;
extern Qos_ClassifiersDefaultTypeInternal _Qos_Classifiers_default_instance_;
class Qos_Classifiers_Classifier;
class Qos_Classifiers_ClassifierDefaultTypeInternal;
extern Qos_Classifiers_ClassifierDefaultTypeInternal _Qos_Classifiers_Classifier_default_instance_;
class Qos_Classifiers_ClassifierKey;
class Qos_Classifiers_ClassifierKeyDefaultTypeInternal;
extern Qos_Classifiers_ClassifierKeyDefaultTypeInternal _Qos_Classifiers_ClassifierKey_default_instance_;
class Qos_Classifiers_Classifier_Config;
class Qos_Classifiers_Classifier_ConfigDefaultTypeInternal;
extern Qos_Classifiers_Classifier_ConfigDefaultTypeInternal _Qos_Classifiers_Classifier_Config_default_instance_;
class Qos_Classifiers_Classifier_State;
class Qos_Classifiers_Classifier_StateDefaultTypeInternal;
extern Qos_Classifiers_Classifier_StateDefaultTypeInternal _Qos_Classifiers_Classifier_State_default_instance_;
class Qos_Classifiers_Classifier_Terms;
class Qos_Classifiers_Classifier_TermsDefaultTypeInternal;
extern Qos_Classifiers_Classifier_TermsDefaultTypeInternal _Qos_Classifiers_Classifier_Terms_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term;
class Qos_Classifiers_Classifier_Terms_TermDefaultTypeInternal;
extern Qos_Classifiers_Classifier_Terms_TermDefaultTypeInternal _Qos_Classifiers_Classifier_Terms_Term_default_instance_;
class Qos_Classifiers_Classifier_Terms_TermKey;
class Qos_Classifiers_Classifier_Terms_TermKeyDefaultTypeInternal;
extern Qos_Classifiers_Classifier_Terms_TermKeyDefaultTypeInternal _Qos_Classifiers_Classifier_Terms_TermKey_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Actions;
class Qos_Classifiers_Classifier_Terms_Term_ActionsDefaultTypeInternal;
extern Qos_Classifiers_Classifier_Terms_Term_ActionsDefaultTypeInternal _Qos_Classifiers_Classifier_Terms_Term_Actions_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Actions_Config;
class Qos_Classifiers_Classifier_Terms_Term_Actions_ConfigDefaultTypeInternal;
extern Qos_Classifiers_Classifier_Terms_Term_Actions_ConfigDefaultTypeInternal _Qos_Classifiers_Classifier_Terms_Term_Actions_Config_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Actions_Remark;
class Qos_Classifiers_Classifier_Terms_Term_Actions_RemarkDefaultTypeInternal;
extern Qos_Classifiers_Classifier_Terms_Term_Actions_RemarkDefaultTypeInternal _Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config;
class Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_ConfigDefaultTypeInternal;
extern Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_ConfigDefaultTypeInternal _Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State;
class Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_StateDefaultTypeInternal;
extern Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_StateDefaultTypeInternal _Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Actions_State;
class Qos_Classifiers_Classifier_Terms_Term_Actions_StateDefaultTypeInternal;
extern Qos_Classifiers_Classifier_Terms_Term_Actions_StateDefaultTypeInternal _Qos_Classifiers_Classifier_Terms_Term_Actions_State_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Conditions;
class Qos_Classifiers_Classifier_Terms_Term_ConditionsDefaultTypeInternal;
extern Qos_Classifiers_Classifier_Terms_Term_ConditionsDefaultTypeInternal _Qos_Classifiers_Classifier_Terms_Term_Conditions_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4DefaultTypeInternal;
extern Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4DefaultTypeInternal _Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_ConfigDefaultTypeInternal;
extern Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_ConfigDefaultTypeInternal _Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_StateDefaultTypeInternal;
extern Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_StateDefaultTypeInternal _Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6DefaultTypeInternal;
extern Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6DefaultTypeInternal _Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_ConfigDefaultTypeInternal;
extern Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_ConfigDefaultTypeInternal _Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_StateDefaultTypeInternal;
extern Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_StateDefaultTypeInternal _Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_L2;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_L2DefaultTypeInternal;
extern Qos_Classifiers_Classifier_Terms_Term_Conditions_L2DefaultTypeInternal _Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_ConfigDefaultTypeInternal;
extern Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_ConfigDefaultTypeInternal _Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_StateDefaultTypeInternal;
extern Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_StateDefaultTypeInternal _Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_MplsDefaultTypeInternal;
extern Qos_Classifiers_Classifier_Terms_Term_Conditions_MplsDefaultTypeInternal _Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_ConfigDefaultTypeInternal;
extern Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_ConfigDefaultTypeInternal _Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_StateDefaultTypeInternal;
extern Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_StateDefaultTypeInternal _Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_TransportDefaultTypeInternal;
extern Qos_Classifiers_Classifier_Terms_Term_Conditions_TransportDefaultTypeInternal _Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_ConfigDefaultTypeInternal;
extern Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_ConfigDefaultTypeInternal _Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State;
class Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_StateDefaultTypeInternal;
extern Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_StateDefaultTypeInternal _Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_Config;
class Qos_Classifiers_Classifier_Terms_Term_ConfigDefaultTypeInternal;
extern Qos_Classifiers_Classifier_Terms_Term_ConfigDefaultTypeInternal _Qos_Classifiers_Classifier_Terms_Term_Config_default_instance_;
class Qos_Classifiers_Classifier_Terms_Term_State;
class Qos_Classifiers_Classifier_Terms_Term_StateDefaultTypeInternal;
extern Qos_Classifiers_Classifier_Terms_Term_StateDefaultTypeInternal _Qos_Classifiers_Classifier_Terms_Term_State_default_instance_;
class Qos_Config;
class Qos_ConfigDefaultTypeInternal;
extern Qos_ConfigDefaultTypeInternal _Qos_Config_default_instance_;
class Qos_ForwardingGroups;
class Qos_ForwardingGroupsDefaultTypeInternal;
extern Qos_ForwardingGroupsDefaultTypeInternal _Qos_ForwardingGroups_default_instance_;
class Qos_ForwardingGroups_ForwardingGroup;
class Qos_ForwardingGroups_ForwardingGroupDefaultTypeInternal;
extern Qos_ForwardingGroups_ForwardingGroupDefaultTypeInternal _Qos_ForwardingGroups_ForwardingGroup_default_instance_;
class Qos_ForwardingGroups_ForwardingGroupKey;
class Qos_ForwardingGroups_ForwardingGroupKeyDefaultTypeInternal;
extern Qos_ForwardingGroups_ForwardingGroupKeyDefaultTypeInternal _Qos_ForwardingGroups_ForwardingGroupKey_default_instance_;
class Qos_ForwardingGroups_ForwardingGroup_Config;
class Qos_ForwardingGroups_ForwardingGroup_ConfigDefaultTypeInternal;
extern Qos_ForwardingGroups_ForwardingGroup_ConfigDefaultTypeInternal _Qos_ForwardingGroups_ForwardingGroup_Config_default_instance_;
class Qos_ForwardingGroups_ForwardingGroup_State;
class Qos_ForwardingGroups_ForwardingGroup_StateDefaultTypeInternal;
extern Qos_ForwardingGroups_ForwardingGroup_StateDefaultTypeInternal _Qos_ForwardingGroups_ForwardingGroup_State_default_instance_;
class Qos_Interfaces;
class Qos_InterfacesDefaultTypeInternal;
extern Qos_InterfacesDefaultTypeInternal _Qos_Interfaces_default_instance_;
class Qos_Interfaces_Interface;
class Qos_Interfaces_InterfaceDefaultTypeInternal;
extern Qos_Interfaces_InterfaceDefaultTypeInternal _Qos_Interfaces_Interface_default_instance_;
class Qos_Interfaces_InterfaceKey;
class Qos_Interfaces_InterfaceKeyDefaultTypeInternal;
extern Qos_Interfaces_InterfaceKeyDefaultTypeInternal _Qos_Interfaces_InterfaceKey_default_instance_;
class Qos_Interfaces_Interface_Config;
class Qos_Interfaces_Interface_ConfigDefaultTypeInternal;
extern Qos_Interfaces_Interface_ConfigDefaultTypeInternal _Qos_Interfaces_Interface_Config_default_instance_;
class Qos_Interfaces_Interface_Input;
class Qos_Interfaces_Interface_InputDefaultTypeInternal;
extern Qos_Interfaces_Interface_InputDefaultTypeInternal _Qos_Interfaces_Interface_Input_default_instance_;
class Qos_Interfaces_Interface_Input_Classifers;
class Qos_Interfaces_Interface_Input_ClassifersDefaultTypeInternal;
extern Qos_Interfaces_Interface_Input_ClassifersDefaultTypeInternal _Qos_Interfaces_Interface_Input_Classifers_default_instance_;
class Qos_Interfaces_Interface_Input_Classifers_Classifier;
class Qos_Interfaces_Interface_Input_Classifers_ClassifierDefaultTypeInternal;
extern Qos_Interfaces_Interface_Input_Classifers_ClassifierDefaultTypeInternal _Qos_Interfaces_Interface_Input_Classifers_Classifier_default_instance_;
class Qos_Interfaces_Interface_Input_Classifers_ClassifierKey;
class Qos_Interfaces_Interface_Input_Classifers_ClassifierKeyDefaultTypeInternal;
extern Qos_Interfaces_Interface_Input_Classifers_ClassifierKeyDefaultTypeInternal _Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_default_instance_;
class Qos_Interfaces_Interface_Input_Classifers_Classifier_Config;
class Qos_Interfaces_Interface_Input_Classifers_Classifier_ConfigDefaultTypeInternal;
extern Qos_Interfaces_Interface_Input_Classifers_Classifier_ConfigDefaultTypeInternal _Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_default_instance_;
class Qos_Interfaces_Interface_Input_Classifers_Classifier_State;
class Qos_Interfaces_Interface_Input_Classifers_Classifier_StateDefaultTypeInternal;
extern Qos_Interfaces_Interface_Input_Classifers_Classifier_StateDefaultTypeInternal _Qos_Interfaces_Interface_Input_Classifers_Classifier_State_default_instance_;
class Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms;
class Qos_Interfaces_Interface_Input_Classifers_Classifier_TermsDefaultTypeInternal;
extern Qos_Interfaces_Interface_Input_Classifers_Classifier_TermsDefaultTypeInternal _Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_default_instance_;
class Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term;
class Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermDefaultTypeInternal;
extern Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermDefaultTypeInternal _Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_default_instance_;
class Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey;
class Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKeyDefaultTypeInternal;
extern Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKeyDefaultTypeInternal _Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey_default_instance_;
class Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config;
class Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_ConfigDefaultTypeInternal;
extern Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_ConfigDefaultTypeInternal _Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config_default_instance_;
class Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State;
class Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_StateDefaultTypeInternal;
extern Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_StateDefaultTypeInternal _Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State_default_instance_;
class Qos_Interfaces_Interface_Input_Config;
class Qos_Interfaces_Interface_Input_ConfigDefaultTypeInternal;
extern Qos_Interfaces_Interface_Input_ConfigDefaultTypeInternal _Qos_Interfaces_Interface_Input_Config_default_instance_;
class Qos_Interfaces_Interface_Input_Queues;
class Qos_Interfaces_Interface_Input_QueuesDefaultTypeInternal;
extern Qos_Interfaces_Interface_Input_QueuesDefaultTypeInternal _Qos_Interfaces_Interface_Input_Queues_default_instance_;
class Qos_Interfaces_Interface_Input_Queues_Queue;
class Qos_Interfaces_Interface_Input_Queues_QueueDefaultTypeInternal;
extern Qos_Interfaces_Interface_Input_Queues_QueueDefaultTypeInternal _Qos_Interfaces_Interface_Input_Queues_Queue_default_instance_;
class Qos_Interfaces_Interface_Input_Queues_QueueKey;
class Qos_Interfaces_Interface_Input_Queues_QueueKeyDefaultTypeInternal;
extern Qos_Interfaces_Interface_Input_Queues_QueueKeyDefaultTypeInternal _Qos_Interfaces_Interface_Input_Queues_QueueKey_default_instance_;
class Qos_Interfaces_Interface_Input_Queues_Queue_Config;
class Qos_Interfaces_Interface_Input_Queues_Queue_ConfigDefaultTypeInternal;
extern Qos_Interfaces_Interface_Input_Queues_Queue_ConfigDefaultTypeInternal _Qos_Interfaces_Interface_Input_Queues_Queue_Config_default_instance_;
class Qos_Interfaces_Interface_Input_Queues_Queue_State;
class Qos_Interfaces_Interface_Input_Queues_Queue_StateDefaultTypeInternal;
extern Qos_Interfaces_Interface_Input_Queues_Queue_StateDefaultTypeInternal _Qos_Interfaces_Interface_Input_Queues_Queue_State_default_instance_;
class Qos_Interfaces_Interface_Input_SchedulerPolicy;
class Qos_Interfaces_Interface_Input_SchedulerPolicyDefaultTypeInternal;
extern Qos_Interfaces_Interface_Input_SchedulerPolicyDefaultTypeInternal _Qos_Interfaces_Interface_Input_SchedulerPolicy_default_instance_;
class Qos_Interfaces_Interface_Input_SchedulerPolicy_Config;
class Qos_Interfaces_Interface_Input_SchedulerPolicy_ConfigDefaultTypeInternal;
extern Qos_Interfaces_Interface_Input_SchedulerPolicy_ConfigDefaultTypeInternal _Qos_Interfaces_Interface_Input_SchedulerPolicy_Config_default_instance_;
class Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers;
class Qos_Interfaces_Interface_Input_SchedulerPolicy_SchedulersDefaultTypeInternal;
extern Qos_Interfaces_Interface_Input_SchedulerPolicy_SchedulersDefaultTypeInternal _Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_default_instance_;
class Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler;
class Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerDefaultTypeInternal;
extern Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerDefaultTypeInternal _Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_default_instance_;
class Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey;
class Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKeyDefaultTypeInternal;
extern Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKeyDefaultTypeInternal _Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey_default_instance_;
class Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State;
class Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_StateDefaultTypeInternal;
extern Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_StateDefaultTypeInternal _Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State_default_instance_;
class Qos_Interfaces_Interface_Input_SchedulerPolicy_State;
class Qos_Interfaces_Interface_Input_SchedulerPolicy_StateDefaultTypeInternal;
extern Qos_Interfaces_Interface_Input_SchedulerPolicy_StateDefaultTypeInternal _Qos_Interfaces_Interface_Input_SchedulerPolicy_State_default_instance_;
class Qos_Interfaces_Interface_Input_State;
class Qos_Interfaces_Interface_Input_StateDefaultTypeInternal;
extern Qos_Interfaces_Interface_Input_StateDefaultTypeInternal _Qos_Interfaces_Interface_Input_State_default_instance_;
class Qos_Interfaces_Interface_Input_VirtualOutputQueues;
class Qos_Interfaces_Interface_Input_VirtualOutputQueuesDefaultTypeInternal;
extern Qos_Interfaces_Interface_Input_VirtualOutputQueuesDefaultTypeInternal _Qos_Interfaces_Interface_Input_VirtualOutputQueues_default_instance_;
class Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface;
class Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceDefaultTypeInternal;
extern Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceDefaultTypeInternal _Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_default_instance_;
class Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey;
class Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKeyDefaultTypeInternal;
extern Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKeyDefaultTypeInternal _Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey_default_instance_;
class Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config;
class Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_ConfigDefaultTypeInternal;
extern Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_ConfigDefaultTypeInternal _Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config_default_instance_;
class Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues;
class Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_QueuesDefaultTypeInternal;
extern Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_QueuesDefaultTypeInternal _Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_default_instance_;
class Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue;
class Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueDefaultTypeInternal;
extern Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueDefaultTypeInternal _Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_default_instance_;
class Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey;
class Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKeyDefaultTypeInternal;
extern Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKeyDefaultTypeInternal _Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey_default_instance_;
class Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config;
class Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_ConfigDefaultTypeInternal;
extern Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_ConfigDefaultTypeInternal _Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config_default_instance_;
class Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State;
class Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_StateDefaultTypeInternal;
extern Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_StateDefaultTypeInternal _Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State_default_instance_;
class Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State;
class Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_StateDefaultTypeInternal;
extern Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_StateDefaultTypeInternal _Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State_default_instance_;
class Qos_Interfaces_Interface_InterfaceRef;
class Qos_Interfaces_Interface_InterfaceRefDefaultTypeInternal;
extern Qos_Interfaces_Interface_InterfaceRefDefaultTypeInternal _Qos_Interfaces_Interface_InterfaceRef_default_instance_;
class Qos_Interfaces_Interface_InterfaceRef_Config;
class Qos_Interfaces_Interface_InterfaceRef_ConfigDefaultTypeInternal;
extern Qos_Interfaces_Interface_InterfaceRef_ConfigDefaultTypeInternal _Qos_Interfaces_Interface_InterfaceRef_Config_default_instance_;
class Qos_Interfaces_Interface_InterfaceRef_State;
class Qos_Interfaces_Interface_InterfaceRef_StateDefaultTypeInternal;
extern Qos_Interfaces_Interface_InterfaceRef_StateDefaultTypeInternal _Qos_Interfaces_Interface_InterfaceRef_State_default_instance_;
class Qos_Interfaces_Interface_Output;
class Qos_Interfaces_Interface_OutputDefaultTypeInternal;
extern Qos_Interfaces_Interface_OutputDefaultTypeInternal _Qos_Interfaces_Interface_Output_default_instance_;
class Qos_Interfaces_Interface_Output_Classifers;
class Qos_Interfaces_Interface_Output_ClassifersDefaultTypeInternal;
extern Qos_Interfaces_Interface_Output_ClassifersDefaultTypeInternal _Qos_Interfaces_Interface_Output_Classifers_default_instance_;
class Qos_Interfaces_Interface_Output_Classifers_Classifier;
class Qos_Interfaces_Interface_Output_Classifers_ClassifierDefaultTypeInternal;
extern Qos_Interfaces_Interface_Output_Classifers_ClassifierDefaultTypeInternal _Qos_Interfaces_Interface_Output_Classifers_Classifier_default_instance_;
class Qos_Interfaces_Interface_Output_Classifers_ClassifierKey;
class Qos_Interfaces_Interface_Output_Classifers_ClassifierKeyDefaultTypeInternal;
extern Qos_Interfaces_Interface_Output_Classifers_ClassifierKeyDefaultTypeInternal _Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_default_instance_;
class Qos_Interfaces_Interface_Output_Classifers_Classifier_Config;
class Qos_Interfaces_Interface_Output_Classifers_Classifier_ConfigDefaultTypeInternal;
extern Qos_Interfaces_Interface_Output_Classifers_Classifier_ConfigDefaultTypeInternal _Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_default_instance_;
class Qos_Interfaces_Interface_Output_Classifers_Classifier_State;
class Qos_Interfaces_Interface_Output_Classifers_Classifier_StateDefaultTypeInternal;
extern Qos_Interfaces_Interface_Output_Classifers_Classifier_StateDefaultTypeInternal _Qos_Interfaces_Interface_Output_Classifers_Classifier_State_default_instance_;
class Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms;
class Qos_Interfaces_Interface_Output_Classifers_Classifier_TermsDefaultTypeInternal;
extern Qos_Interfaces_Interface_Output_Classifers_Classifier_TermsDefaultTypeInternal _Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_default_instance_;
class Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term;
class Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermDefaultTypeInternal;
extern Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermDefaultTypeInternal _Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_default_instance_;
class Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey;
class Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKeyDefaultTypeInternal;
extern Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKeyDefaultTypeInternal _Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey_default_instance_;
class Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config;
class Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_ConfigDefaultTypeInternal;
extern Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_ConfigDefaultTypeInternal _Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config_default_instance_;
class Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State;
class Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_StateDefaultTypeInternal;
extern Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_StateDefaultTypeInternal _Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State_default_instance_;
class Qos_Interfaces_Interface_Output_Config;
class Qos_Interfaces_Interface_Output_ConfigDefaultTypeInternal;
extern Qos_Interfaces_Interface_Output_ConfigDefaultTypeInternal _Qos_Interfaces_Interface_Output_Config_default_instance_;
class Qos_Interfaces_Interface_Output_InterfaceRef;
class Qos_Interfaces_Interface_Output_InterfaceRefDefaultTypeInternal;
extern Qos_Interfaces_Interface_Output_InterfaceRefDefaultTypeInternal _Qos_Interfaces_Interface_Output_InterfaceRef_default_instance_;
class Qos_Interfaces_Interface_Output_InterfaceRef_Config;
class Qos_Interfaces_Interface_Output_InterfaceRef_ConfigDefaultTypeInternal;
extern Qos_Interfaces_Interface_Output_InterfaceRef_ConfigDefaultTypeInternal _Qos_Interfaces_Interface_Output_InterfaceRef_Config_default_instance_;
class Qos_Interfaces_Interface_Output_InterfaceRef_State;
class Qos_Interfaces_Interface_Output_InterfaceRef_StateDefaultTypeInternal;
extern Qos_Interfaces_Interface_Output_InterfaceRef_StateDefaultTypeInternal _Qos_Interfaces_Interface_Output_InterfaceRef_State_default_instance_;
class Qos_Interfaces_Interface_Output_Queues;
class Qos_Interfaces_Interface_Output_QueuesDefaultTypeInternal;
extern Qos_Interfaces_Interface_Output_QueuesDefaultTypeInternal _Qos_Interfaces_Interface_Output_Queues_default_instance_;
class Qos_Interfaces_Interface_Output_Queues_Queue;
class Qos_Interfaces_Interface_Output_Queues_QueueDefaultTypeInternal;
extern Qos_Interfaces_Interface_Output_Queues_QueueDefaultTypeInternal _Qos_Interfaces_Interface_Output_Queues_Queue_default_instance_;
class Qos_Interfaces_Interface_Output_Queues_QueueKey;
class Qos_Interfaces_Interface_Output_Queues_QueueKeyDefaultTypeInternal;
extern Qos_Interfaces_Interface_Output_Queues_QueueKeyDefaultTypeInternal _Qos_Interfaces_Interface_Output_Queues_QueueKey_default_instance_;
class Qos_Interfaces_Interface_Output_Queues_Queue_Config;
class Qos_Interfaces_Interface_Output_Queues_Queue_ConfigDefaultTypeInternal;
extern Qos_Interfaces_Interface_Output_Queues_Queue_ConfigDefaultTypeInternal _Qos_Interfaces_Interface_Output_Queues_Queue_Config_default_instance_;
class Qos_Interfaces_Interface_Output_Queues_Queue_State;
class Qos_Interfaces_Interface_Output_Queues_Queue_StateDefaultTypeInternal;
extern Qos_Interfaces_Interface_Output_Queues_Queue_StateDefaultTypeInternal _Qos_Interfaces_Interface_Output_Queues_Queue_State_default_instance_;
class Qos_Interfaces_Interface_Output_SchedulerPolicy;
class Qos_Interfaces_Interface_Output_SchedulerPolicyDefaultTypeInternal;
extern Qos_Interfaces_Interface_Output_SchedulerPolicyDefaultTypeInternal _Qos_Interfaces_Interface_Output_SchedulerPolicy_default_instance_;
class Qos_Interfaces_Interface_Output_SchedulerPolicy_Config;
class Qos_Interfaces_Interface_Output_SchedulerPolicy_ConfigDefaultTypeInternal;
extern Qos_Interfaces_Interface_Output_SchedulerPolicy_ConfigDefaultTypeInternal _Qos_Interfaces_Interface_Output_SchedulerPolicy_Config_default_instance_;
class Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers;
class Qos_Interfaces_Interface_Output_SchedulerPolicy_SchedulersDefaultTypeInternal;
extern Qos_Interfaces_Interface_Output_SchedulerPolicy_SchedulersDefaultTypeInternal _Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_default_instance_;
class Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler;
class Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerDefaultTypeInternal;
extern Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerDefaultTypeInternal _Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_default_instance_;
class Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey;
class Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKeyDefaultTypeInternal;
extern Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKeyDefaultTypeInternal _Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey_default_instance_;
class Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State;
class Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_StateDefaultTypeInternal;
extern Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_StateDefaultTypeInternal _Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State_default_instance_;
class Qos_Interfaces_Interface_Output_SchedulerPolicy_State;
class Qos_Interfaces_Interface_Output_SchedulerPolicy_StateDefaultTypeInternal;
extern Qos_Interfaces_Interface_Output_SchedulerPolicy_StateDefaultTypeInternal _Qos_Interfaces_Interface_Output_SchedulerPolicy_State_default_instance_;
class Qos_Interfaces_Interface_Output_State;
class Qos_Interfaces_Interface_Output_StateDefaultTypeInternal;
extern Qos_Interfaces_Interface_Output_StateDefaultTypeInternal _Qos_Interfaces_Interface_Output_State_default_instance_;
class Qos_Interfaces_Interface_State;
class Qos_Interfaces_Interface_StateDefaultTypeInternal;
extern Qos_Interfaces_Interface_StateDefaultTypeInternal _Qos_Interfaces_Interface_State_default_instance_;
class Qos_Queues;
class Qos_QueuesDefaultTypeInternal;
extern Qos_QueuesDefaultTypeInternal _Qos_Queues_default_instance_;
class Qos_Queues_Queue;
class Qos_Queues_QueueDefaultTypeInternal;
extern Qos_Queues_QueueDefaultTypeInternal _Qos_Queues_Queue_default_instance_;
class Qos_Queues_QueueKey;
class Qos_Queues_QueueKeyDefaultTypeInternal;
extern Qos_Queues_QueueKeyDefaultTypeInternal _Qos_Queues_QueueKey_default_instance_;
class Qos_Queues_Queue_Config;
class Qos_Queues_Queue_ConfigDefaultTypeInternal;
extern Qos_Queues_Queue_ConfigDefaultTypeInternal _Qos_Queues_Queue_Config_default_instance_;
class Qos_Queues_Queue_Red;
class Qos_Queues_Queue_RedDefaultTypeInternal;
extern Qos_Queues_Queue_RedDefaultTypeInternal _Qos_Queues_Queue_Red_default_instance_;
class Qos_Queues_Queue_Red_Config;
class Qos_Queues_Queue_Red_ConfigDefaultTypeInternal;
extern Qos_Queues_Queue_Red_ConfigDefaultTypeInternal _Qos_Queues_Queue_Red_Config_default_instance_;
class Qos_Queues_Queue_Red_State;
class Qos_Queues_Queue_Red_StateDefaultTypeInternal;
extern Qos_Queues_Queue_Red_StateDefaultTypeInternal _Qos_Queues_Queue_Red_State_default_instance_;
class Qos_Queues_Queue_State;
class Qos_Queues_Queue_StateDefaultTypeInternal;
extern Qos_Queues_Queue_StateDefaultTypeInternal _Qos_Queues_Queue_State_default_instance_;
class Qos_Queues_Queue_Wred;
class Qos_Queues_Queue_WredDefaultTypeInternal;
extern Qos_Queues_Queue_WredDefaultTypeInternal _Qos_Queues_Queue_Wred_default_instance_;
class Qos_Queues_Queue_Wred_Config;
class Qos_Queues_Queue_Wred_ConfigDefaultTypeInternal;
extern Qos_Queues_Queue_Wred_ConfigDefaultTypeInternal _Qos_Queues_Queue_Wred_Config_default_instance_;
class Qos_Queues_Queue_Wred_State;
class Qos_Queues_Queue_Wred_StateDefaultTypeInternal;
extern Qos_Queues_Queue_Wred_StateDefaultTypeInternal _Qos_Queues_Queue_Wred_State_default_instance_;
class Qos_SchedulerPolicies;
class Qos_SchedulerPoliciesDefaultTypeInternal;
extern Qos_SchedulerPoliciesDefaultTypeInternal _Qos_SchedulerPolicies_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy;
class Qos_SchedulerPolicies_SchedulerPolicyDefaultTypeInternal;
extern Qos_SchedulerPolicies_SchedulerPolicyDefaultTypeInternal _Qos_SchedulerPolicies_SchedulerPolicy_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicyKey;
class Qos_SchedulerPolicies_SchedulerPolicyKeyDefaultTypeInternal;
extern Qos_SchedulerPolicies_SchedulerPolicyKeyDefaultTypeInternal _Qos_SchedulerPolicies_SchedulerPolicyKey_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Config;
class Qos_SchedulerPolicies_SchedulerPolicy_ConfigDefaultTypeInternal;
extern Qos_SchedulerPolicies_SchedulerPolicy_ConfigDefaultTypeInternal _Qos_SchedulerPolicies_SchedulerPolicy_Config_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers;
class Qos_SchedulerPolicies_SchedulerPolicy_SchedulersDefaultTypeInternal;
extern Qos_SchedulerPolicies_SchedulerPolicy_SchedulersDefaultTypeInternal _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerDefaultTypeInternal;
extern Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerDefaultTypeInternal _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKeyDefaultTypeInternal;
extern Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKeyDefaultTypeInternal _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_ConfigDefaultTypeInternal;
extern Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_ConfigDefaultTypeInternal _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_InputsDefaultTypeInternal;
extern Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_InputsDefaultTypeInternal _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputDefaultTypeInternal;
extern Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputDefaultTypeInternal _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKeyDefaultTypeInternal;
extern Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKeyDefaultTypeInternal _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_ConfigDefaultTypeInternal;
extern Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_ConfigDefaultTypeInternal _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_StateDefaultTypeInternal;
extern Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_StateDefaultTypeInternal _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColorDefaultTypeInternal;
extern Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColorDefaultTypeInternal _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConfigDefaultTypeInternal;
extern Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConfigDefaultTypeInternal _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformActionDefaultTypeInternal;
extern Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformActionDefaultTypeInternal _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_ConfigDefaultTypeInternal;
extern Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_ConfigDefaultTypeInternal _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_StateDefaultTypeInternal;
extern Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_StateDefaultTypeInternal _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedActionDefaultTypeInternal;
extern Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedActionDefaultTypeInternal _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_ConfigDefaultTypeInternal;
extern Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_ConfigDefaultTypeInternal _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_StateDefaultTypeInternal;
extern Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_StateDefaultTypeInternal _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_StateDefaultTypeInternal;
extern Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_StateDefaultTypeInternal _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OutputDefaultTypeInternal;
extern Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OutputDefaultTypeInternal _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_ConfigDefaultTypeInternal;
extern Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_ConfigDefaultTypeInternal _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_StateDefaultTypeInternal;
extern Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_StateDefaultTypeInternal _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_StateDefaultTypeInternal;
extern Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_StateDefaultTypeInternal _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColorDefaultTypeInternal;
extern Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColorDefaultTypeInternal _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConfigDefaultTypeInternal;
extern Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConfigDefaultTypeInternal _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformActionDefaultTypeInternal;
extern Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformActionDefaultTypeInternal _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_ConfigDefaultTypeInternal;
extern Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_ConfigDefaultTypeInternal _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_StateDefaultTypeInternal;
extern Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_StateDefaultTypeInternal _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedActionDefaultTypeInternal;
extern Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedActionDefaultTypeInternal _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_ConfigDefaultTypeInternal;
extern Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_ConfigDefaultTypeInternal _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_StateDefaultTypeInternal;
extern Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_StateDefaultTypeInternal _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_StateDefaultTypeInternal;
extern Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_StateDefaultTypeInternal _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateActionDefaultTypeInternal;
extern Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateActionDefaultTypeInternal _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_ConfigDefaultTypeInternal;
extern Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_ConfigDefaultTypeInternal _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State;
class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_StateDefaultTypeInternal;
extern Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_StateDefaultTypeInternal _Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State_default_instance_;
class Qos_SchedulerPolicies_SchedulerPolicy_State;
class Qos_SchedulerPolicies_SchedulerPolicy_StateDefaultTypeInternal;
extern Qos_SchedulerPolicies_SchedulerPolicy_StateDefaultTypeInternal _Qos_SchedulerPolicies_SchedulerPolicy_State_default_instance_;
class Qos_State;
class Qos_StateDefaultTypeInternal;
extern Qos_StateDefaultTypeInternal _Qos_State_default_instance_;
}  // namespace openconfig_qos
}  // namespace openconfig
namespace openconfig {
namespace openconfig_qos {

enum Qos_Classifiers_Classifier_Config_Type {
  Qos_Classifiers_Classifier_Config_Type_TYPE_UNSET = 0,
  Qos_Classifiers_Classifier_Config_Type_TYPE_IPV4 = 1,
  Qos_Classifiers_Classifier_Config_Type_TYPE_IPV6 = 2,
  Qos_Classifiers_Classifier_Config_Type_TYPE_MPLS = 3,
  Qos_Classifiers_Classifier_Config_Type_TYPE_ETHERNET = 4,
  Qos_Classifiers_Classifier_Config_Type_Qos_Classifiers_Classifier_Config_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Qos_Classifiers_Classifier_Config_Type_Qos_Classifiers_Classifier_Config_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Qos_Classifiers_Classifier_Config_Type_IsValid(int value);
const Qos_Classifiers_Classifier_Config_Type Qos_Classifiers_Classifier_Config_Type_Type_MIN = Qos_Classifiers_Classifier_Config_Type_TYPE_UNSET;
const Qos_Classifiers_Classifier_Config_Type Qos_Classifiers_Classifier_Config_Type_Type_MAX = Qos_Classifiers_Classifier_Config_Type_TYPE_ETHERNET;
const int Qos_Classifiers_Classifier_Config_Type_Type_ARRAYSIZE = Qos_Classifiers_Classifier_Config_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Qos_Classifiers_Classifier_Config_Type_descriptor();
inline const ::std::string& Qos_Classifiers_Classifier_Config_Type_Name(Qos_Classifiers_Classifier_Config_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Qos_Classifiers_Classifier_Config_Type_descriptor(), value);
}
inline bool Qos_Classifiers_Classifier_Config_Type_Parse(
    const ::std::string& name, Qos_Classifiers_Classifier_Config_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Qos_Classifiers_Classifier_Config_Type>(
    Qos_Classifiers_Classifier_Config_Type_descriptor(), name, value);
}
enum Qos_Classifiers_Classifier_State_Type {
  Qos_Classifiers_Classifier_State_Type_TYPE_UNSET = 0,
  Qos_Classifiers_Classifier_State_Type_TYPE_IPV4 = 1,
  Qos_Classifiers_Classifier_State_Type_TYPE_IPV6 = 2,
  Qos_Classifiers_Classifier_State_Type_TYPE_MPLS = 3,
  Qos_Classifiers_Classifier_State_Type_TYPE_ETHERNET = 4,
  Qos_Classifiers_Classifier_State_Type_Qos_Classifiers_Classifier_State_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Qos_Classifiers_Classifier_State_Type_Qos_Classifiers_Classifier_State_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Qos_Classifiers_Classifier_State_Type_IsValid(int value);
const Qos_Classifiers_Classifier_State_Type Qos_Classifiers_Classifier_State_Type_Type_MIN = Qos_Classifiers_Classifier_State_Type_TYPE_UNSET;
const Qos_Classifiers_Classifier_State_Type Qos_Classifiers_Classifier_State_Type_Type_MAX = Qos_Classifiers_Classifier_State_Type_TYPE_ETHERNET;
const int Qos_Classifiers_Classifier_State_Type_Type_ARRAYSIZE = Qos_Classifiers_Classifier_State_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Qos_Classifiers_Classifier_State_Type_descriptor();
inline const ::std::string& Qos_Classifiers_Classifier_State_Type_Name(Qos_Classifiers_Classifier_State_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Qos_Classifiers_Classifier_State_Type_descriptor(), value);
}
inline bool Qos_Classifiers_Classifier_State_Type_Parse(
    const ::std::string& name, Qos_Classifiers_Classifier_State_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Qos_Classifiers_Classifier_State_Type>(
    Qos_Classifiers_Classifier_State_Type_descriptor(), name, value);
}
enum Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort {
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort_DESTINATIONPORT_UNSET = 0,
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort_DESTINATIONPORT_ANY = 1,
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort_Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort_Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort_IsValid(int value);
const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort_DestinationPort_MIN = Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort_DESTINATIONPORT_UNSET;
const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort_DestinationPort_MAX = Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort_DESTINATIONPORT_ANY;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort_DestinationPort_ARRAYSIZE = Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort_DestinationPort_MAX + 1;

const ::google::protobuf::EnumDescriptor* Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort_descriptor();
inline const ::std::string& Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort_Name(Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort value) {
  return ::google::protobuf::internal::NameOfEnum(
    Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort_descriptor(), value);
}
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort_Parse(
    const ::std::string& name, Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort>(
    Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort_descriptor(), name, value);
}
enum Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort {
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort_SOURCEPORT_UNSET = 0,
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort_SOURCEPORT_ANY = 1,
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort_Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort_Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort_IsValid(int value);
const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort_SourcePort_MIN = Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort_SOURCEPORT_UNSET;
const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort_SourcePort_MAX = Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort_SOURCEPORT_ANY;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort_SourcePort_ARRAYSIZE = Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort_SourcePort_MAX + 1;

const ::google::protobuf::EnumDescriptor* Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort_descriptor();
inline const ::std::string& Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort_Name(Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort value) {
  return ::google::protobuf::internal::NameOfEnum(
    Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort_descriptor(), value);
}
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort_Parse(
    const ::std::string& name, Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort>(
    Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort_descriptor(), name, value);
}
enum Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort {
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort_DESTINATIONPORT_UNSET = 0,
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort_DESTINATIONPORT_ANY = 1,
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort_Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort_Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort_IsValid(int value);
const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort_DestinationPort_MIN = Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort_DESTINATIONPORT_UNSET;
const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort_DestinationPort_MAX = Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort_DESTINATIONPORT_ANY;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort_DestinationPort_ARRAYSIZE = Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort_DestinationPort_MAX + 1;

const ::google::protobuf::EnumDescriptor* Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort_descriptor();
inline const ::std::string& Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort_Name(Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort value) {
  return ::google::protobuf::internal::NameOfEnum(
    Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort_descriptor(), value);
}
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort_Parse(
    const ::std::string& name, Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort>(
    Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort_descriptor(), name, value);
}
enum Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort {
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort_SOURCEPORT_UNSET = 0,
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort_SOURCEPORT_ANY = 1,
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort_Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort_Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort_IsValid(int value);
const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort_SourcePort_MIN = Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort_SOURCEPORT_UNSET;
const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort_SourcePort_MAX = Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort_SOURCEPORT_ANY;
const int Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort_SourcePort_ARRAYSIZE = Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort_SourcePort_MAX + 1;

const ::google::protobuf::EnumDescriptor* Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort_descriptor();
inline const ::std::string& Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort_Name(Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort value) {
  return ::google::protobuf::internal::NameOfEnum(
    Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort_descriptor(), value);
}
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort_Parse(
    const ::std::string& name, Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort>(
    Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort_descriptor(), name, value);
}
enum Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type {
  Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type_TYPE_UNSET = 0,
  Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type_TYPE_IPV4 = 5,
  Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type_TYPE_IPV6 = 7,
  Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type_TYPE_MPLS = 8,
  Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type_Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type_Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type_IsValid(int value);
const Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type_Type_MIN = Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type_TYPE_UNSET;
const Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type_Type_MAX = Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type_TYPE_MPLS;
const int Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type_Type_ARRAYSIZE = Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type_descriptor();
inline const ::std::string& Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type_Name(Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type_descriptor(), value);
}
inline bool Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type_Parse(
    const ::std::string& name, Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type>(
    Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type_descriptor(), name, value);
}
enum Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type {
  Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type_TYPE_UNSET = 0,
  Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type_TYPE_IPV4 = 5,
  Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type_TYPE_IPV6 = 7,
  Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type_TYPE_MPLS = 8,
  Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type_Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type_Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type_IsValid(int value);
const Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type_Type_MIN = Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type_TYPE_UNSET;
const Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type_Type_MAX = Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type_TYPE_MPLS;
const int Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type_Type_ARRAYSIZE = Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type_descriptor();
inline const ::std::string& Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type_Name(Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type_descriptor(), value);
}
inline bool Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type_Parse(
    const ::std::string& name, Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type>(
    Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type_descriptor(), name, value);
}
enum Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type {
  Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type_TYPE_UNSET = 0,
  Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type_TYPE_IPV4 = 5,
  Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type_TYPE_IPV6 = 7,
  Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type_TYPE_MPLS = 8,
  Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type_Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type_Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type_IsValid(int value);
const Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type_Type_MIN = Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type_TYPE_UNSET;
const Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type_Type_MAX = Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type_TYPE_MPLS;
const int Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type_Type_ARRAYSIZE = Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type_descriptor();
inline const ::std::string& Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type_Name(Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type_descriptor(), value);
}
inline bool Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type_Parse(
    const ::std::string& name, Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type>(
    Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type_descriptor(), name, value);
}
enum Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type {
  Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type_TYPE_UNSET = 0,
  Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type_TYPE_IPV4 = 5,
  Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type_TYPE_IPV6 = 7,
  Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type_TYPE_MPLS = 8,
  Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type_Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type_Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type_IsValid(int value);
const Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type_Type_MIN = Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type_TYPE_UNSET;
const Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type_Type_MAX = Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type_TYPE_MPLS;
const int Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type_Type_ARRAYSIZE = Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type_descriptor();
inline const ::std::string& Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type_Name(Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type_descriptor(), value);
}
inline bool Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type_Parse(
    const ::std::string& name, Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type>(
    Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type_descriptor(), name, value);
}
enum Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type {
  Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type_TYPE_UNSET = 0,
  Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type_TYPE_IPV4 = 5,
  Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type_TYPE_IPV6 = 7,
  Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type_TYPE_MPLS = 8,
  Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type_Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type_Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type_IsValid(int value);
const Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type_Type_MIN = Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type_TYPE_UNSET;
const Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type_Type_MAX = Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type_TYPE_MPLS;
const int Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type_Type_ARRAYSIZE = Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type_descriptor();
inline const ::std::string& Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type_Name(Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type_descriptor(), value);
}
inline bool Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type_Parse(
    const ::std::string& name, Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type>(
    Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type_descriptor(), name, value);
}
enum Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type {
  Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type_TYPE_UNSET = 0,
  Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type_TYPE_IPV4 = 5,
  Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type_TYPE_IPV6 = 7,
  Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type_TYPE_MPLS = 8,
  Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type_Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type_Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type_IsValid(int value);
const Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type_Type_MIN = Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type_TYPE_UNSET;
const Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type_Type_MAX = Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type_TYPE_MPLS;
const int Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type_Type_ARRAYSIZE = Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type_descriptor();
inline const ::std::string& Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type_Name(Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type_descriptor(), value);
}
inline bool Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type_Parse(
    const ::std::string& name, Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type>(
    Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type_descriptor(), name, value);
}
enum Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority {
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority_PRIORITY_UNSET = 0,
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority_PRIORITY_STRICT = 1,
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority_IsValid(int value);
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority_Priority_MIN = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority_PRIORITY_UNSET;
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority_Priority_MAX = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority_PRIORITY_STRICT;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority_Priority_ARRAYSIZE = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority_Priority_MAX + 1;

const ::google::protobuf::EnumDescriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority_descriptor();
inline const ::std::string& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority_Name(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority value) {
  return ::google::protobuf::internal::NameOfEnum(
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority_descriptor(), value);
}
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority_Parse(
    const ::std::string& name, Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority>(
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority_descriptor(), name, value);
}
enum Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType {
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType_INPUTTYPE_UNSET = 0,
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType_INPUTTYPE_QUEUE = 1,
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType_INPUTTYPE_IN_PROFILE = 2,
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType_INPUTTYPE_OUT_PROFILE = 3,
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType_IsValid(int value);
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType_InputType_MIN = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType_INPUTTYPE_UNSET;
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType_InputType_MAX = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType_INPUTTYPE_OUT_PROFILE;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType_InputType_ARRAYSIZE = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType_InputType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType_descriptor();
inline const ::std::string& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType_Name(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType_descriptor(), value);
}
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType_Parse(
    const ::std::string& name, Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType>(
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType_descriptor(), name, value);
}
enum Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType {
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType_INPUTTYPE_UNSET = 0,
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType_INPUTTYPE_QUEUE = 1,
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType_INPUTTYPE_IN_PROFILE = 2,
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType_INPUTTYPE_OUT_PROFILE = 3,
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType_IsValid(int value);
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType_InputType_MIN = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType_INPUTTYPE_UNSET;
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType_InputType_MAX = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType_INPUTTYPE_OUT_PROFILE;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType_InputType_ARRAYSIZE = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType_InputType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType_descriptor();
inline const ::std::string& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType_Name(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType_descriptor(), value);
}
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType_Parse(
    const ::std::string& name, Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType>(
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType_descriptor(), name, value);
}
enum Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType {
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType_OUTPUTTYPE_UNSET = 0,
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType_OUTPUTTYPE_SCHEDULER = 1,
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType_OUTPUTTYPE_FWD_GROUP = 2,
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType_OUTPUTTYPE_INTERFACE = 3,
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType_IsValid(int value);
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType_OutputType_MIN = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType_OUTPUTTYPE_UNSET;
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType_OutputType_MAX = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType_OUTPUTTYPE_INTERFACE;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType_OutputType_ARRAYSIZE = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType_OutputType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType_descriptor();
inline const ::std::string& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType_Name(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType_descriptor(), value);
}
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType_Parse(
    const ::std::string& name, Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType>(
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType_descriptor(), name, value);
}
enum Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType {
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType_OUTPUTTYPE_UNSET = 0,
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType_OUTPUTTYPE_SCHEDULER = 1,
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType_OUTPUTTYPE_FWD_GROUP = 2,
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType_OUTPUTTYPE_INTERFACE = 3,
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType_IsValid(int value);
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType_OutputType_MIN = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType_OUTPUTTYPE_UNSET;
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType_OutputType_MAX = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType_OUTPUTTYPE_INTERFACE;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType_OutputType_ARRAYSIZE = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType_OutputType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType_descriptor();
inline const ::std::string& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType_Name(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType_descriptor(), value);
}
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType_Parse(
    const ::std::string& name, Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType>(
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType_descriptor(), name, value);
}
enum Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority {
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority_PRIORITY_UNSET = 0,
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority_PRIORITY_STRICT = 1,
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority_IsValid(int value);
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority_Priority_MIN = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority_PRIORITY_UNSET;
const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority_Priority_MAX = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority_PRIORITY_STRICT;
const int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority_Priority_ARRAYSIZE = Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority_Priority_MAX + 1;

const ::google::protobuf::EnumDescriptor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority_descriptor();
inline const ::std::string& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority_Name(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority value) {
  return ::google::protobuf::internal::NameOfEnum(
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority_descriptor(), value);
}
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority_Parse(
    const ::std::string& name, Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority>(
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority_descriptor(), name, value);
}
// ===================================================================

class Qos_Classifiers_Classifier_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Config) */ {
 public:
  Qos_Classifiers_Classifier_Config();
  virtual ~Qos_Classifiers_Classifier_Config();

  Qos_Classifiers_Classifier_Config(const Qos_Classifiers_Classifier_Config& from);

  inline Qos_Classifiers_Classifier_Config& operator=(const Qos_Classifiers_Classifier_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Classifiers_Classifier_Config(Qos_Classifiers_Classifier_Config&& from) noexcept
    : Qos_Classifiers_Classifier_Config() {
    *this = ::std::move(from);
  }

  inline Qos_Classifiers_Classifier_Config& operator=(Qos_Classifiers_Classifier_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Classifiers_Classifier_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Classifiers_Classifier_Config* internal_default_instance() {
    return reinterpret_cast<const Qos_Classifiers_Classifier_Config*>(
               &_Qos_Classifiers_Classifier_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Qos_Classifiers_Classifier_Config* other);
  friend void swap(Qos_Classifiers_Classifier_Config& a, Qos_Classifiers_Classifier_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Classifiers_Classifier_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Classifiers_Classifier_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Classifiers_Classifier_Config& from);
  void MergeFrom(const Qos_Classifiers_Classifier_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Classifiers_Classifier_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Classifiers_Classifier_Config_Type Type;
  static const Type TYPE_UNSET =
    Qos_Classifiers_Classifier_Config_Type_TYPE_UNSET;
  static const Type TYPE_IPV4 =
    Qos_Classifiers_Classifier_Config_Type_TYPE_IPV4;
  static const Type TYPE_IPV6 =
    Qos_Classifiers_Classifier_Config_Type_TYPE_IPV6;
  static const Type TYPE_MPLS =
    Qos_Classifiers_Classifier_Config_Type_TYPE_MPLS;
  static const Type TYPE_ETHERNET =
    Qos_Classifiers_Classifier_Config_Type_TYPE_ETHERNET;
  static inline bool Type_IsValid(int value) {
    return Qos_Classifiers_Classifier_Config_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Qos_Classifiers_Classifier_Config_Type_Type_MIN;
  static const Type Type_MAX =
    Qos_Classifiers_Classifier_Config_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Qos_Classifiers_Classifier_Config_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Qos_Classifiers_Classifier_Config_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Qos_Classifiers_Classifier_Config_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Qos_Classifiers_Classifier_Config_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue name = 444888484 [(.yext.schemapath) = "/qos/classifiers/classifier/config/name"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 444888484;
  const ::ywrapper::StringValue& name() const;
  ::ywrapper::StringValue* release_name();
  ::ywrapper::StringValue* mutable_name();
  void set_allocated_name(::ywrapper::StringValue* name);

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Config.Type type = 422459117 [(.yext.schemapath) = "/qos/classifiers/classifier/config/type"];
  void clear_type();
  static const int kTypeFieldNumber = 422459117;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Config_Type type() const;
  void set_type(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Config_Type value);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* name_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_ConfigImpl();
};
// -------------------------------------------------------------------

class Qos_Classifiers_Classifier_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Classifiers.Classifier.State) */ {
 public:
  Qos_Classifiers_Classifier_State();
  virtual ~Qos_Classifiers_Classifier_State();

  Qos_Classifiers_Classifier_State(const Qos_Classifiers_Classifier_State& from);

  inline Qos_Classifiers_Classifier_State& operator=(const Qos_Classifiers_Classifier_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Classifiers_Classifier_State(Qos_Classifiers_Classifier_State&& from) noexcept
    : Qos_Classifiers_Classifier_State() {
    *this = ::std::move(from);
  }

  inline Qos_Classifiers_Classifier_State& operator=(Qos_Classifiers_Classifier_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Classifiers_Classifier_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Classifiers_Classifier_State* internal_default_instance() {
    return reinterpret_cast<const Qos_Classifiers_Classifier_State*>(
               &_Qos_Classifiers_Classifier_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Qos_Classifiers_Classifier_State* other);
  friend void swap(Qos_Classifiers_Classifier_State& a, Qos_Classifiers_Classifier_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Classifiers_Classifier_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Classifiers_Classifier_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Classifiers_Classifier_State& from);
  void MergeFrom(const Qos_Classifiers_Classifier_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Classifiers_Classifier_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Classifiers_Classifier_State_Type Type;
  static const Type TYPE_UNSET =
    Qos_Classifiers_Classifier_State_Type_TYPE_UNSET;
  static const Type TYPE_IPV4 =
    Qos_Classifiers_Classifier_State_Type_TYPE_IPV4;
  static const Type TYPE_IPV6 =
    Qos_Classifiers_Classifier_State_Type_TYPE_IPV6;
  static const Type TYPE_MPLS =
    Qos_Classifiers_Classifier_State_Type_TYPE_MPLS;
  static const Type TYPE_ETHERNET =
    Qos_Classifiers_Classifier_State_Type_TYPE_ETHERNET;
  static inline bool Type_IsValid(int value) {
    return Qos_Classifiers_Classifier_State_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Qos_Classifiers_Classifier_State_Type_Type_MIN;
  static const Type Type_MAX =
    Qos_Classifiers_Classifier_State_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Qos_Classifiers_Classifier_State_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Qos_Classifiers_Classifier_State_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Qos_Classifiers_Classifier_State_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Qos_Classifiers_Classifier_State_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue name = 242051611 [(.yext.schemapath) = "/qos/classifiers/classifier/state/name"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 242051611;
  const ::ywrapper::StringValue& name() const;
  ::ywrapper::StringValue* release_name();
  ::ywrapper::StringValue* mutable_name();
  void set_allocated_name(::ywrapper::StringValue* name);

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.State.Type type = 334844318 [(.yext.schemapath) = "/qos/classifiers/classifier/state/type"];
  void clear_type();
  static const int kTypeFieldNumber = 334844318;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_State_Type type() const;
  void set_type(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_State_Type value);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Classifiers.Classifier.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* name_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_StateImpl();
};
// -------------------------------------------------------------------

class Qos_Classifiers_Classifier_Terms_Term_Actions_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Config) */ {
 public:
  Qos_Classifiers_Classifier_Terms_Term_Actions_Config();
  virtual ~Qos_Classifiers_Classifier_Terms_Term_Actions_Config();

  Qos_Classifiers_Classifier_Terms_Term_Actions_Config(const Qos_Classifiers_Classifier_Terms_Term_Actions_Config& from);

  inline Qos_Classifiers_Classifier_Terms_Term_Actions_Config& operator=(const Qos_Classifiers_Classifier_Terms_Term_Actions_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Classifiers_Classifier_Terms_Term_Actions_Config(Qos_Classifiers_Classifier_Terms_Term_Actions_Config&& from) noexcept
    : Qos_Classifiers_Classifier_Terms_Term_Actions_Config() {
    *this = ::std::move(from);
  }

  inline Qos_Classifiers_Classifier_Terms_Term_Actions_Config& operator=(Qos_Classifiers_Classifier_Terms_Term_Actions_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Classifiers_Classifier_Terms_Term_Actions_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Classifiers_Classifier_Terms_Term_Actions_Config* internal_default_instance() {
    return reinterpret_cast<const Qos_Classifiers_Classifier_Terms_Term_Actions_Config*>(
               &_Qos_Classifiers_Classifier_Terms_Term_Actions_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Qos_Classifiers_Classifier_Terms_Term_Actions_Config* other);
  friend void swap(Qos_Classifiers_Classifier_Terms_Term_Actions_Config& a, Qos_Classifiers_Classifier_Terms_Term_Actions_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Classifiers_Classifier_Terms_Term_Actions_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Classifiers_Classifier_Terms_Term_Actions_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Actions_Config& from);
  void MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Actions_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Actions_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue target_group = 263567595 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/config/target-group"];
  bool has_target_group() const;
  void clear_target_group();
  static const int kTargetGroupFieldNumber = 263567595;
  const ::ywrapper::StringValue& target_group() const;
  ::ywrapper::StringValue* release_target_group();
  ::ywrapper::StringValue* mutable_target_group();
  void set_allocated_target_group(::ywrapper::StringValue* target_group);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* target_group_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_ConfigImpl();
};
// -------------------------------------------------------------------

class Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config) */ {
 public:
  Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config();
  virtual ~Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config();

  Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config(const Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config& from);

  inline Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config& operator=(const Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config(Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config&& from) noexcept
    : Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config() {
    *this = ::std::move(from);
  }

  inline Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config& operator=(Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config* internal_default_instance() {
    return reinterpret_cast<const Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config*>(
               &_Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config* other);
  friend void swap(Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config& a, Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config& from);
  void MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue set_mpls_tc = 115576782 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/config/set-mpls-tc"];
  bool has_set_mpls_tc() const;
  void clear_set_mpls_tc();
  static const int kSetMplsTcFieldNumber = 115576782;
  const ::ywrapper::UintValue& set_mpls_tc() const;
  ::ywrapper::UintValue* release_set_mpls_tc();
  ::ywrapper::UintValue* mutable_set_mpls_tc();
  void set_allocated_set_mpls_tc(::ywrapper::UintValue* set_mpls_tc);

  // .ywrapper.UintValue set_dot1p = 129420902 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/config/set-dot1p"];
  bool has_set_dot1p() const;
  void clear_set_dot1p();
  static const int kSetDot1PFieldNumber = 129420902;
  const ::ywrapper::UintValue& set_dot1p() const;
  ::ywrapper::UintValue* release_set_dot1p();
  ::ywrapper::UintValue* mutable_set_dot1p();
  void set_allocated_set_dot1p(::ywrapper::UintValue* set_dot1p);

  // .ywrapper.UintValue set_dscp = 184950326 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/config/set-dscp"];
  bool has_set_dscp() const;
  void clear_set_dscp();
  static const int kSetDscpFieldNumber = 184950326;
  const ::ywrapper::UintValue& set_dscp() const;
  ::ywrapper::UintValue* release_set_dscp();
  ::ywrapper::UintValue* mutable_set_dscp();
  void set_allocated_set_dscp(::ywrapper::UintValue* set_dscp);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* set_mpls_tc_;
  ::ywrapper::UintValue* set_dot1p_;
  ::ywrapper::UintValue* set_dscp_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_Remark_ConfigImpl();
};
// -------------------------------------------------------------------

class Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State) */ {
 public:
  Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State();
  virtual ~Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State();

  Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State(const Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State& from);

  inline Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State& operator=(const Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State(Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State&& from) noexcept
    : Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State() {
    *this = ::std::move(from);
  }

  inline Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State& operator=(Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State* internal_default_instance() {
    return reinterpret_cast<const Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State*>(
               &_Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State* other);
  friend void swap(Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State& a, Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State& from);
  void MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue set_mpls_tc = 103423347 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/state/set-mpls-tc"];
  bool has_set_mpls_tc() const;
  void clear_set_mpls_tc();
  static const int kSetMplsTcFieldNumber = 103423347;
  const ::ywrapper::UintValue& set_mpls_tc() const;
  ::ywrapper::UintValue* release_set_mpls_tc();
  ::ywrapper::UintValue* mutable_set_mpls_tc();
  void set_allocated_set_mpls_tc(::ywrapper::UintValue* set_mpls_tc);

  // .ywrapper.UintValue set_dot1p = 309389519 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/state/set-dot1p"];
  bool has_set_dot1p() const;
  void clear_set_dot1p();
  static const int kSetDot1PFieldNumber = 309389519;
  const ::ywrapper::UintValue& set_dot1p() const;
  ::ywrapper::UintValue* release_set_dot1p();
  ::ywrapper::UintValue* mutable_set_dot1p();
  void set_allocated_set_dot1p(::ywrapper::UintValue* set_dot1p);

  // .ywrapper.UintValue set_dscp = 509738221 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/state/set-dscp"];
  bool has_set_dscp() const;
  void clear_set_dscp();
  static const int kSetDscpFieldNumber = 509738221;
  const ::ywrapper::UintValue& set_dscp() const;
  ::ywrapper::UintValue* release_set_dscp();
  ::ywrapper::UintValue* mutable_set_dscp();
  void set_allocated_set_dscp(::ywrapper::UintValue* set_dscp);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* set_mpls_tc_;
  ::ywrapper::UintValue* set_dot1p_;
  ::ywrapper::UintValue* set_dscp_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_Remark_StateImpl();
};
// -------------------------------------------------------------------

class Qos_Classifiers_Classifier_Terms_Term_Actions_Remark : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark) */ {
 public:
  Qos_Classifiers_Classifier_Terms_Term_Actions_Remark();
  virtual ~Qos_Classifiers_Classifier_Terms_Term_Actions_Remark();

  Qos_Classifiers_Classifier_Terms_Term_Actions_Remark(const Qos_Classifiers_Classifier_Terms_Term_Actions_Remark& from);

  inline Qos_Classifiers_Classifier_Terms_Term_Actions_Remark& operator=(const Qos_Classifiers_Classifier_Terms_Term_Actions_Remark& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Classifiers_Classifier_Terms_Term_Actions_Remark(Qos_Classifiers_Classifier_Terms_Term_Actions_Remark&& from) noexcept
    : Qos_Classifiers_Classifier_Terms_Term_Actions_Remark() {
    *this = ::std::move(from);
  }

  inline Qos_Classifiers_Classifier_Terms_Term_Actions_Remark& operator=(Qos_Classifiers_Classifier_Terms_Term_Actions_Remark&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Classifiers_Classifier_Terms_Term_Actions_Remark& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Classifiers_Classifier_Terms_Term_Actions_Remark* internal_default_instance() {
    return reinterpret_cast<const Qos_Classifiers_Classifier_Terms_Term_Actions_Remark*>(
               &_Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Qos_Classifiers_Classifier_Terms_Term_Actions_Remark* other);
  friend void swap(Qos_Classifiers_Classifier_Terms_Term_Actions_Remark& a, Qos_Classifiers_Classifier_Terms_Term_Actions_Remark& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Classifiers_Classifier_Terms_Term_Actions_Remark* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Classifiers_Classifier_Terms_Term_Actions_Remark* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Actions_Remark& from);
  void MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Actions_Remark& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Actions_Remark* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config Config;
  typedef Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State state = 416672959 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 416672959;
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State& state() const;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State* release_state();
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State* state);

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config config = 535857410 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 535857410;
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config& config() const;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config* release_config();
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config* config);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State* state_;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config* config_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_RemarkImpl();
};
// -------------------------------------------------------------------

class Qos_Classifiers_Classifier_Terms_Term_Actions_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.State) */ {
 public:
  Qos_Classifiers_Classifier_Terms_Term_Actions_State();
  virtual ~Qos_Classifiers_Classifier_Terms_Term_Actions_State();

  Qos_Classifiers_Classifier_Terms_Term_Actions_State(const Qos_Classifiers_Classifier_Terms_Term_Actions_State& from);

  inline Qos_Classifiers_Classifier_Terms_Term_Actions_State& operator=(const Qos_Classifiers_Classifier_Terms_Term_Actions_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Classifiers_Classifier_Terms_Term_Actions_State(Qos_Classifiers_Classifier_Terms_Term_Actions_State&& from) noexcept
    : Qos_Classifiers_Classifier_Terms_Term_Actions_State() {
    *this = ::std::move(from);
  }

  inline Qos_Classifiers_Classifier_Terms_Term_Actions_State& operator=(Qos_Classifiers_Classifier_Terms_Term_Actions_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Classifiers_Classifier_Terms_Term_Actions_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Classifiers_Classifier_Terms_Term_Actions_State* internal_default_instance() {
    return reinterpret_cast<const Qos_Classifiers_Classifier_Terms_Term_Actions_State*>(
               &_Qos_Classifiers_Classifier_Terms_Term_Actions_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Qos_Classifiers_Classifier_Terms_Term_Actions_State* other);
  friend void swap(Qos_Classifiers_Classifier_Terms_Term_Actions_State& a, Qos_Classifiers_Classifier_Terms_Term_Actions_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Classifiers_Classifier_Terms_Term_Actions_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Classifiers_Classifier_Terms_Term_Actions_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Actions_State& from);
  void MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Actions_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Actions_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue target_group = 329531914 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/state/target-group"];
  bool has_target_group() const;
  void clear_target_group();
  static const int kTargetGroupFieldNumber = 329531914;
  const ::ywrapper::StringValue& target_group() const;
  ::ywrapper::StringValue* release_target_group();
  ::ywrapper::StringValue* mutable_target_group();
  void set_allocated_target_group(::ywrapper::StringValue* target_group);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* target_group_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Actions_StateImpl();
};
// -------------------------------------------------------------------

class Qos_Classifiers_Classifier_Terms_Term_Actions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions) */ {
 public:
  Qos_Classifiers_Classifier_Terms_Term_Actions();
  virtual ~Qos_Classifiers_Classifier_Terms_Term_Actions();

  Qos_Classifiers_Classifier_Terms_Term_Actions(const Qos_Classifiers_Classifier_Terms_Term_Actions& from);

  inline Qos_Classifiers_Classifier_Terms_Term_Actions& operator=(const Qos_Classifiers_Classifier_Terms_Term_Actions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Classifiers_Classifier_Terms_Term_Actions(Qos_Classifiers_Classifier_Terms_Term_Actions&& from) noexcept
    : Qos_Classifiers_Classifier_Terms_Term_Actions() {
    *this = ::std::move(from);
  }

  inline Qos_Classifiers_Classifier_Terms_Term_Actions& operator=(Qos_Classifiers_Classifier_Terms_Term_Actions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Classifiers_Classifier_Terms_Term_Actions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Classifiers_Classifier_Terms_Term_Actions* internal_default_instance() {
    return reinterpret_cast<const Qos_Classifiers_Classifier_Terms_Term_Actions*>(
               &_Qos_Classifiers_Classifier_Terms_Term_Actions_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Qos_Classifiers_Classifier_Terms_Term_Actions* other);
  friend void swap(Qos_Classifiers_Classifier_Terms_Term_Actions& a, Qos_Classifiers_Classifier_Terms_Term_Actions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Classifiers_Classifier_Terms_Term_Actions* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Classifiers_Classifier_Terms_Term_Actions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Actions& from);
  void MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Actions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Actions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Classifiers_Classifier_Terms_Term_Actions_Config Config;
  typedef Qos_Classifiers_Classifier_Terms_Term_Actions_Remark Remark;
  typedef Qos_Classifiers_Classifier_Terms_Term_Actions_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark remark = 45738605 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark"];
  bool has_remark() const;
  void clear_remark();
  static const int kRemarkFieldNumber = 45738605;
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark& remark() const;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark* release_remark();
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark* mutable_remark();
  void set_allocated_remark(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark* remark);

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Config config = 112958415 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 112958415;
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Config& config() const;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Config* release_config();
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Config* config);

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.State state = 404171968 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 404171968;
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_State& state() const;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_State* release_state();
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_State* state);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark* remark_;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Config* config_;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_State* state_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_ActionsImpl();
};
// -------------------------------------------------------------------

class Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config) */ {
 public:
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config();
  virtual ~Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config();

  Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config& from);

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config& operator=(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config&& from) noexcept
    : Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config() {
    *this = ::std::move(from);
  }

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config& operator=(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config& default_instance();

  enum ProtocolCase {
    kProtocolOpenconfigpacketmatchtypesipprotocol = 371958053,
    kProtocolUint64 = 488250108,
    PROTOCOL_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config* internal_default_instance() {
    return reinterpret_cast<const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config*>(
               &_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config* other);
  friend void swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config& a, Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config& from);
  void MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue hop_limit = 164634146 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/hop-limit"];
  bool has_hop_limit() const;
  void clear_hop_limit();
  static const int kHopLimitFieldNumber = 164634146;
  const ::ywrapper::UintValue& hop_limit() const;
  ::ywrapper::UintValue* release_hop_limit();
  ::ywrapper::UintValue* mutable_hop_limit();
  void set_allocated_hop_limit(::ywrapper::UintValue* hop_limit);

  // .ywrapper.StringValue source_address = 389228459 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/source-address"];
  bool has_source_address() const;
  void clear_source_address();
  static const int kSourceAddressFieldNumber = 389228459;
  const ::ywrapper::StringValue& source_address() const;
  ::ywrapper::StringValue* release_source_address();
  ::ywrapper::StringValue* mutable_source_address();
  void set_allocated_source_address(::ywrapper::StringValue* source_address);

  // .ywrapper.UintValue dscp = 459218869 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/dscp"];
  bool has_dscp() const;
  void clear_dscp();
  static const int kDscpFieldNumber = 459218869;
  const ::ywrapper::UintValue& dscp() const;
  ::ywrapper::UintValue* release_dscp();
  ::ywrapper::UintValue* mutable_dscp();
  void set_allocated_dscp(::ywrapper::UintValue* dscp);

  // .ywrapper.StringValue destination_address = 527978798 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/destination-address"];
  bool has_destination_address() const;
  void clear_destination_address();
  static const int kDestinationAddressFieldNumber = 527978798;
  const ::ywrapper::StringValue& destination_address() const;
  ::ywrapper::StringValue* release_destination_address();
  ::ywrapper::StringValue* mutable_destination_address();
  void set_allocated_destination_address(::ywrapper::StringValue* destination_address);

  // .openconfig.enums.OpenconfigPacketMatchTypesIPPROTOCOL protocol_openconfigpacketmatchtypesipprotocol = 371958053;
  private:
  bool has_protocol_openconfigpacketmatchtypesipprotocol() const;
  public:
  void clear_protocol_openconfigpacketmatchtypesipprotocol();
  static const int kProtocolOpenconfigpacketmatchtypesipprotocolFieldNumber = 371958053;
  ::openconfig::enums::OpenconfigPacketMatchTypesIPPROTOCOL protocol_openconfigpacketmatchtypesipprotocol() const;
  void set_protocol_openconfigpacketmatchtypesipprotocol(::openconfig::enums::OpenconfigPacketMatchTypesIPPROTOCOL value);

  // uint64 protocol_uint64 = 488250108;
  private:
  bool has_protocol_uint64() const;
  public:
  void clear_protocol_uint64();
  static const int kProtocolUint64FieldNumber = 488250108;
  ::google::protobuf::uint64 protocol_uint64() const;
  void set_protocol_uint64(::google::protobuf::uint64 value);

  ProtocolCase protocol_case() const;
  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config)
 private:
  void set_has_protocol_openconfigpacketmatchtypesipprotocol();
  void set_has_protocol_uint64();

  inline bool has_protocol() const;
  void clear_protocol();
  inline void clear_has_protocol();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* hop_limit_;
  ::ywrapper::StringValue* source_address_;
  ::ywrapper::UintValue* dscp_;
  ::ywrapper::StringValue* destination_address_;
  union ProtocolUnion {
    ProtocolUnion() {}
    int protocol_openconfigpacketmatchtypesipprotocol_;
    ::google::protobuf::uint64 protocol_uint64_;
  } protocol_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_ConfigImpl();
};
// -------------------------------------------------------------------

class Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State) */ {
 public:
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State();
  virtual ~Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State();

  Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State& from);

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State& operator=(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State&& from) noexcept
    : Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State() {
    *this = ::std::move(from);
  }

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State& operator=(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State& default_instance();

  enum ProtocolCase {
    kProtocolOpenconfigpacketmatchtypesipprotocol = 336703624,
    kProtocolUint64 = 139262509,
    PROTOCOL_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State* internal_default_instance() {
    return reinterpret_cast<const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State*>(
               &_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State* other);
  friend void swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State& a, Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State& from);
  void MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue source_address = 139081528 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/source-address"];
  bool has_source_address() const;
  void clear_source_address();
  static const int kSourceAddressFieldNumber = 139081528;
  const ::ywrapper::StringValue& source_address() const;
  ::ywrapper::StringValue* release_source_address();
  ::ywrapper::StringValue* mutable_source_address();
  void set_allocated_source_address(::ywrapper::StringValue* source_address);

  // .ywrapper.UintValue dscp = 215913306 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/dscp"];
  bool has_dscp() const;
  void clear_dscp();
  static const int kDscpFieldNumber = 215913306;
  const ::ywrapper::UintValue& dscp() const;
  ::ywrapper::UintValue* release_dscp();
  ::ywrapper::UintValue* mutable_dscp();
  void set_allocated_dscp(::ywrapper::UintValue* dscp);

  // .ywrapper.UintValue hop_limit = 362494135 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/hop-limit"];
  bool has_hop_limit() const;
  void clear_hop_limit();
  static const int kHopLimitFieldNumber = 362494135;
  const ::ywrapper::UintValue& hop_limit() const;
  ::ywrapper::UintValue* release_hop_limit();
  ::ywrapper::UintValue* mutable_hop_limit();
  void set_allocated_hop_limit(::ywrapper::UintValue* hop_limit);

  // .ywrapper.StringValue destination_address = 384655847 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/destination-address"];
  bool has_destination_address() const;
  void clear_destination_address();
  static const int kDestinationAddressFieldNumber = 384655847;
  const ::ywrapper::StringValue& destination_address() const;
  ::ywrapper::StringValue* release_destination_address();
  ::ywrapper::StringValue* mutable_destination_address();
  void set_allocated_destination_address(::ywrapper::StringValue* destination_address);

  // .openconfig.enums.OpenconfigPacketMatchTypesIPPROTOCOL protocol_openconfigpacketmatchtypesipprotocol = 336703624;
  private:
  bool has_protocol_openconfigpacketmatchtypesipprotocol() const;
  public:
  void clear_protocol_openconfigpacketmatchtypesipprotocol();
  static const int kProtocolOpenconfigpacketmatchtypesipprotocolFieldNumber = 336703624;
  ::openconfig::enums::OpenconfigPacketMatchTypesIPPROTOCOL protocol_openconfigpacketmatchtypesipprotocol() const;
  void set_protocol_openconfigpacketmatchtypesipprotocol(::openconfig::enums::OpenconfigPacketMatchTypesIPPROTOCOL value);

  // uint64 protocol_uint64 = 139262509;
  private:
  bool has_protocol_uint64() const;
  public:
  void clear_protocol_uint64();
  static const int kProtocolUint64FieldNumber = 139262509;
  ::google::protobuf::uint64 protocol_uint64() const;
  void set_protocol_uint64(::google::protobuf::uint64 value);

  ProtocolCase protocol_case() const;
  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State)
 private:
  void set_has_protocol_openconfigpacketmatchtypesipprotocol();
  void set_has_protocol_uint64();

  inline bool has_protocol() const;
  void clear_protocol();
  inline void clear_has_protocol();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* source_address_;
  ::ywrapper::UintValue* dscp_;
  ::ywrapper::UintValue* hop_limit_;
  ::ywrapper::StringValue* destination_address_;
  union ProtocolUnion {
    ProtocolUnion() {}
    int protocol_openconfigpacketmatchtypesipprotocol_;
    ::google::protobuf::uint64 protocol_uint64_;
  } protocol_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_StateImpl();
};
// -------------------------------------------------------------------

class Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4) */ {
 public:
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4();
  virtual ~Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4();

  Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4& from);

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4& operator=(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4&& from) noexcept
    : Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4() {
    *this = ::std::move(from);
  }

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4& operator=(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4* internal_default_instance() {
    return reinterpret_cast<const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4*>(
               &_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4* other);
  friend void swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4& a, Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4& from);
  void MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config Config;
  typedef Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State state = 26286517 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 26286517;
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State& state() const;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State* release_state();
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State* state);

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config config = 82051516 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 82051516;
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config& config() const;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config* release_config();
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config* config);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State* state_;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config* config_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4Impl();
};
// -------------------------------------------------------------------

class Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config) */ {
 public:
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config();
  virtual ~Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config();

  Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config& from);

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config& operator=(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config&& from) noexcept
    : Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config() {
    *this = ::std::move(from);
  }

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config& operator=(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config& default_instance();

  enum ProtocolCase {
    kProtocolOpenconfigpacketmatchtypesipprotocol = 483684219,
    kProtocolUint64 = 50630658,
    PROTOCOL_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config* internal_default_instance() {
    return reinterpret_cast<const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config*>(
               &_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config* other);
  friend void swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config& a, Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config& from);
  void MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue destination_flow_label = 26892661 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/destination-flow-label"];
  bool has_destination_flow_label() const;
  void clear_destination_flow_label();
  static const int kDestinationFlowLabelFieldNumber = 26892661;
  const ::ywrapper::UintValue& destination_flow_label() const;
  ::ywrapper::UintValue* release_destination_flow_label();
  ::ywrapper::UintValue* mutable_destination_flow_label();
  void set_allocated_destination_flow_label(::ywrapper::UintValue* destination_flow_label);

  // .ywrapper.StringValue destination_address = 139860024 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/destination-address"];
  bool has_destination_address() const;
  void clear_destination_address();
  static const int kDestinationAddressFieldNumber = 139860024;
  const ::ywrapper::StringValue& destination_address() const;
  ::ywrapper::StringValue* release_destination_address();
  ::ywrapper::StringValue* mutable_destination_address();
  void set_allocated_destination_address(::ywrapper::StringValue* destination_address);

  // .ywrapper.UintValue source_flow_label = 158748530 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/source-flow-label"];
  bool has_source_flow_label() const;
  void clear_source_flow_label();
  static const int kSourceFlowLabelFieldNumber = 158748530;
  const ::ywrapper::UintValue& source_flow_label() const;
  ::ywrapper::UintValue* release_source_flow_label();
  ::ywrapper::UintValue* mutable_source_flow_label();
  void set_allocated_source_flow_label(::ywrapper::UintValue* source_flow_label);

  // .ywrapper.UintValue hop_limit = 233120028 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/hop-limit"];
  bool has_hop_limit() const;
  void clear_hop_limit();
  static const int kHopLimitFieldNumber = 233120028;
  const ::ywrapper::UintValue& hop_limit() const;
  ::ywrapper::UintValue* release_hop_limit();
  ::ywrapper::UintValue* mutable_hop_limit();
  void set_allocated_hop_limit(::ywrapper::UintValue* hop_limit);

  // .ywrapper.UintValue dscp = 482221487 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/dscp"];
  bool has_dscp() const;
  void clear_dscp();
  static const int kDscpFieldNumber = 482221487;
  const ::ywrapper::UintValue& dscp() const;
  ::ywrapper::UintValue* release_dscp();
  ::ywrapper::UintValue* mutable_dscp();
  void set_allocated_dscp(::ywrapper::UintValue* dscp);

  // .ywrapper.StringValue source_address = 498643489 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/source-address"];
  bool has_source_address() const;
  void clear_source_address();
  static const int kSourceAddressFieldNumber = 498643489;
  const ::ywrapper::StringValue& source_address() const;
  ::ywrapper::StringValue* release_source_address();
  ::ywrapper::StringValue* mutable_source_address();
  void set_allocated_source_address(::ywrapper::StringValue* source_address);

  // .openconfig.enums.OpenconfigPacketMatchTypesIPPROTOCOL protocol_openconfigpacketmatchtypesipprotocol = 483684219;
  private:
  bool has_protocol_openconfigpacketmatchtypesipprotocol() const;
  public:
  void clear_protocol_openconfigpacketmatchtypesipprotocol();
  static const int kProtocolOpenconfigpacketmatchtypesipprotocolFieldNumber = 483684219;
  ::openconfig::enums::OpenconfigPacketMatchTypesIPPROTOCOL protocol_openconfigpacketmatchtypesipprotocol() const;
  void set_protocol_openconfigpacketmatchtypesipprotocol(::openconfig::enums::OpenconfigPacketMatchTypesIPPROTOCOL value);

  // uint64 protocol_uint64 = 50630658;
  private:
  bool has_protocol_uint64() const;
  public:
  void clear_protocol_uint64();
  static const int kProtocolUint64FieldNumber = 50630658;
  ::google::protobuf::uint64 protocol_uint64() const;
  void set_protocol_uint64(::google::protobuf::uint64 value);

  ProtocolCase protocol_case() const;
  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config)
 private:
  void set_has_protocol_openconfigpacketmatchtypesipprotocol();
  void set_has_protocol_uint64();

  inline bool has_protocol() const;
  void clear_protocol();
  inline void clear_has_protocol();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* destination_flow_label_;
  ::ywrapper::StringValue* destination_address_;
  ::ywrapper::UintValue* source_flow_label_;
  ::ywrapper::UintValue* hop_limit_;
  ::ywrapper::UintValue* dscp_;
  ::ywrapper::StringValue* source_address_;
  union ProtocolUnion {
    ProtocolUnion() {}
    int protocol_openconfigpacketmatchtypesipprotocol_;
    ::google::protobuf::uint64 protocol_uint64_;
  } protocol_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_ConfigImpl();
};
// -------------------------------------------------------------------

class Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State) */ {
 public:
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State();
  virtual ~Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State();

  Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State& from);

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State& operator=(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State&& from) noexcept
    : Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State() {
    *this = ::std::move(from);
  }

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State& operator=(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State& default_instance();

  enum ProtocolCase {
    kProtocolOpenconfigpacketmatchtypesipprotocol = 248928978,
    kProtocolUint64 = 136889423,
    PROTOCOL_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State* internal_default_instance() {
    return reinterpret_cast<const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State*>(
               &_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State* other);
  friend void swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State& a, Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State& from);
  void MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue source_flow_label = 218402383 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-flow-label"];
  bool has_source_flow_label() const;
  void clear_source_flow_label();
  static const int kSourceFlowLabelFieldNumber = 218402383;
  const ::ywrapper::UintValue& source_flow_label() const;
  ::ywrapper::UintValue* release_source_flow_label();
  ::ywrapper::UintValue* mutable_source_flow_label();
  void set_allocated_source_flow_label(::ywrapper::UintValue* source_flow_label);

  // .ywrapper.StringValue source_address = 239778034 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-address"];
  bool has_source_address() const;
  void clear_source_address();
  static const int kSourceAddressFieldNumber = 239778034;
  const ::ywrapper::StringValue& source_address() const;
  ::ywrapper::StringValue* release_source_address();
  ::ywrapper::StringValue* mutable_source_address();
  void set_allocated_source_address(::ywrapper::StringValue* source_address);

  // .ywrapper.StringValue destination_address = 268066477 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-address"];
  bool has_destination_address() const;
  void clear_destination_address();
  static const int kDestinationAddressFieldNumber = 268066477;
  const ::ywrapper::StringValue& destination_address() const;
  ::ywrapper::StringValue* release_destination_address();
  ::ywrapper::StringValue* mutable_destination_address();
  void set_allocated_destination_address(::ywrapper::StringValue* destination_address);

  // .ywrapper.UintValue dscp = 297057864 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/dscp"];
  bool has_dscp() const;
  void clear_dscp();
  static const int kDscpFieldNumber = 297057864;
  const ::ywrapper::UintValue& dscp() const;
  ::ywrapper::UintValue* release_dscp();
  ::ywrapper::UintValue* mutable_dscp();
  void set_allocated_dscp(::ywrapper::UintValue* dscp);

  // .ywrapper.UintValue destination_flow_label = 333529406 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-flow-label"];
  bool has_destination_flow_label() const;
  void clear_destination_flow_label();
  static const int kDestinationFlowLabelFieldNumber = 333529406;
  const ::ywrapper::UintValue& destination_flow_label() const;
  ::ywrapper::UintValue* release_destination_flow_label();
  ::ywrapper::UintValue* mutable_destination_flow_label();
  void set_allocated_destination_flow_label(::ywrapper::UintValue* destination_flow_label);

  // .ywrapper.UintValue hop_limit = 472314045 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/hop-limit"];
  bool has_hop_limit() const;
  void clear_hop_limit();
  static const int kHopLimitFieldNumber = 472314045;
  const ::ywrapper::UintValue& hop_limit() const;
  ::ywrapper::UintValue* release_hop_limit();
  ::ywrapper::UintValue* mutable_hop_limit();
  void set_allocated_hop_limit(::ywrapper::UintValue* hop_limit);

  // .openconfig.enums.OpenconfigPacketMatchTypesIPPROTOCOL protocol_openconfigpacketmatchtypesipprotocol = 248928978;
  private:
  bool has_protocol_openconfigpacketmatchtypesipprotocol() const;
  public:
  void clear_protocol_openconfigpacketmatchtypesipprotocol();
  static const int kProtocolOpenconfigpacketmatchtypesipprotocolFieldNumber = 248928978;
  ::openconfig::enums::OpenconfigPacketMatchTypesIPPROTOCOL protocol_openconfigpacketmatchtypesipprotocol() const;
  void set_protocol_openconfigpacketmatchtypesipprotocol(::openconfig::enums::OpenconfigPacketMatchTypesIPPROTOCOL value);

  // uint64 protocol_uint64 = 136889423;
  private:
  bool has_protocol_uint64() const;
  public:
  void clear_protocol_uint64();
  static const int kProtocolUint64FieldNumber = 136889423;
  ::google::protobuf::uint64 protocol_uint64() const;
  void set_protocol_uint64(::google::protobuf::uint64 value);

  ProtocolCase protocol_case() const;
  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State)
 private:
  void set_has_protocol_openconfigpacketmatchtypesipprotocol();
  void set_has_protocol_uint64();

  inline bool has_protocol() const;
  void clear_protocol();
  inline void clear_has_protocol();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* source_flow_label_;
  ::ywrapper::StringValue* source_address_;
  ::ywrapper::StringValue* destination_address_;
  ::ywrapper::UintValue* dscp_;
  ::ywrapper::UintValue* destination_flow_label_;
  ::ywrapper::UintValue* hop_limit_;
  union ProtocolUnion {
    ProtocolUnion() {}
    int protocol_openconfigpacketmatchtypesipprotocol_;
    ::google::protobuf::uint64 protocol_uint64_;
  } protocol_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_StateImpl();
};
// -------------------------------------------------------------------

class Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6) */ {
 public:
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6();
  virtual ~Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6();

  Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6& from);

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6& operator=(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6&& from) noexcept
    : Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6() {
    *this = ::std::move(from);
  }

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6& operator=(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6* internal_default_instance() {
    return reinterpret_cast<const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6*>(
               &_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6* other);
  friend void swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6& a, Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6& from);
  void MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config Config;
  typedef Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State state = 39645643 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 39645643;
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State& state() const;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State* release_state();
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State* state);

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config config = 464400478 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 464400478;
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config& config() const;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config* release_config();
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config* config);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State* state_;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config* config_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6Impl();
};
// -------------------------------------------------------------------

class Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config) */ {
 public:
  Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config();
  virtual ~Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config();

  Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config(const Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config& from);

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config& operator=(const Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config(Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config&& from) noexcept
    : Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config() {
    *this = ::std::move(from);
  }

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config& operator=(Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config& default_instance();

  enum EthertypeCase {
    kEthertypeOpenconfigpacketmatchtypesethertype = 245699045,
    kEthertypeUint64 = 132607809,
    ETHERTYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config* internal_default_instance() {
    return reinterpret_cast<const Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config*>(
               &_Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config* other);
  friend void swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config& a, Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config& from);
  void MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue source_mac = 658529 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/config/source-mac"];
  bool has_source_mac() const;
  void clear_source_mac();
  static const int kSourceMacFieldNumber = 658529;
  const ::ywrapper::StringValue& source_mac() const;
  ::ywrapper::StringValue* release_source_mac();
  ::ywrapper::StringValue* mutable_source_mac();
  void set_allocated_source_mac(::ywrapper::StringValue* source_mac);

  // .ywrapper.StringValue source_mac_mask = 49113846 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/config/source-mac-mask"];
  bool has_source_mac_mask() const;
  void clear_source_mac_mask();
  static const int kSourceMacMaskFieldNumber = 49113846;
  const ::ywrapper::StringValue& source_mac_mask() const;
  ::ywrapper::StringValue* release_source_mac_mask();
  ::ywrapper::StringValue* mutable_source_mac_mask();
  void set_allocated_source_mac_mask(::ywrapper::StringValue* source_mac_mask);

  // .ywrapper.StringValue destination_mac_mask = 287932171 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/config/destination-mac-mask"];
  bool has_destination_mac_mask() const;
  void clear_destination_mac_mask();
  static const int kDestinationMacMaskFieldNumber = 287932171;
  const ::ywrapper::StringValue& destination_mac_mask() const;
  ::ywrapper::StringValue* release_destination_mac_mask();
  ::ywrapper::StringValue* mutable_destination_mac_mask();
  void set_allocated_destination_mac_mask(::ywrapper::StringValue* destination_mac_mask);

  // .ywrapper.StringValue destination_mac = 515610502 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/config/destination-mac"];
  bool has_destination_mac() const;
  void clear_destination_mac();
  static const int kDestinationMacFieldNumber = 515610502;
  const ::ywrapper::StringValue& destination_mac() const;
  ::ywrapper::StringValue* release_destination_mac();
  ::ywrapper::StringValue* mutable_destination_mac();
  void set_allocated_destination_mac(::ywrapper::StringValue* destination_mac);

  // .openconfig.enums.OpenconfigPacketMatchTypesETHERTYPE ethertype_openconfigpacketmatchtypesethertype = 245699045;
  private:
  bool has_ethertype_openconfigpacketmatchtypesethertype() const;
  public:
  void clear_ethertype_openconfigpacketmatchtypesethertype();
  static const int kEthertypeOpenconfigpacketmatchtypesethertypeFieldNumber = 245699045;
  ::openconfig::enums::OpenconfigPacketMatchTypesETHERTYPE ethertype_openconfigpacketmatchtypesethertype() const;
  void set_ethertype_openconfigpacketmatchtypesethertype(::openconfig::enums::OpenconfigPacketMatchTypesETHERTYPE value);

  // uint64 ethertype_uint64 = 132607809;
  private:
  bool has_ethertype_uint64() const;
  public:
  void clear_ethertype_uint64();
  static const int kEthertypeUint64FieldNumber = 132607809;
  ::google::protobuf::uint64 ethertype_uint64() const;
  void set_ethertype_uint64(::google::protobuf::uint64 value);

  EthertypeCase ethertype_case() const;
  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config)
 private:
  void set_has_ethertype_openconfigpacketmatchtypesethertype();
  void set_has_ethertype_uint64();

  inline bool has_ethertype() const;
  void clear_ethertype();
  inline void clear_has_ethertype();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* source_mac_;
  ::ywrapper::StringValue* source_mac_mask_;
  ::ywrapper::StringValue* destination_mac_mask_;
  ::ywrapper::StringValue* destination_mac_;
  union EthertypeUnion {
    EthertypeUnion() {}
    int ethertype_openconfigpacketmatchtypesethertype_;
    ::google::protobuf::uint64 ethertype_uint64_;
  } ethertype_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_L2_ConfigImpl();
};
// -------------------------------------------------------------------

class Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State) */ {
 public:
  Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State();
  virtual ~Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State();

  Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State(const Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State& from);

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State& operator=(const Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State(Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State&& from) noexcept
    : Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State() {
    *this = ::std::move(from);
  }

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State& operator=(Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State& default_instance();

  enum EthertypeCase {
    kEthertypeOpenconfigpacketmatchtypesethertype = 405942806,
    kEthertypeUint64 = 461693036,
    ETHERTYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State* internal_default_instance() {
    return reinterpret_cast<const Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State*>(
               &_Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State* other);
  friend void swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State& a, Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State& from);
  void MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue destination_mac_mask = 85439306 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/state/destination-mac-mask"];
  bool has_destination_mac_mask() const;
  void clear_destination_mac_mask();
  static const int kDestinationMacMaskFieldNumber = 85439306;
  const ::ywrapper::StringValue& destination_mac_mask() const;
  ::ywrapper::StringValue* release_destination_mac_mask();
  ::ywrapper::StringValue* mutable_destination_mac_mask();
  void set_allocated_destination_mac_mask(::ywrapper::StringValue* destination_mac_mask);

  // .ywrapper.StringValue source_mac_mask = 219492717 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/state/source-mac-mask"];
  bool has_source_mac_mask() const;
  void clear_source_mac_mask();
  static const int kSourceMacMaskFieldNumber = 219492717;
  const ::ywrapper::StringValue& source_mac_mask() const;
  ::ywrapper::StringValue* release_source_mac_mask();
  ::ywrapper::StringValue* mutable_source_mac_mask();
  void set_allocated_source_mac_mask(::ywrapper::StringValue* source_mac_mask);

  // .ywrapper.StringValue destination_mac = 278919501 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/state/destination-mac"];
  bool has_destination_mac() const;
  void clear_destination_mac();
  static const int kDestinationMacFieldNumber = 278919501;
  const ::ywrapper::StringValue& destination_mac() const;
  ::ywrapper::StringValue* release_destination_mac();
  ::ywrapper::StringValue* mutable_destination_mac();
  void set_allocated_destination_mac(::ywrapper::StringValue* destination_mac);

  // .ywrapper.StringValue source_mac = 505619284 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/state/source-mac"];
  bool has_source_mac() const;
  void clear_source_mac();
  static const int kSourceMacFieldNumber = 505619284;
  const ::ywrapper::StringValue& source_mac() const;
  ::ywrapper::StringValue* release_source_mac();
  ::ywrapper::StringValue* mutable_source_mac();
  void set_allocated_source_mac(::ywrapper::StringValue* source_mac);

  // .openconfig.enums.OpenconfigPacketMatchTypesETHERTYPE ethertype_openconfigpacketmatchtypesethertype = 405942806;
  private:
  bool has_ethertype_openconfigpacketmatchtypesethertype() const;
  public:
  void clear_ethertype_openconfigpacketmatchtypesethertype();
  static const int kEthertypeOpenconfigpacketmatchtypesethertypeFieldNumber = 405942806;
  ::openconfig::enums::OpenconfigPacketMatchTypesETHERTYPE ethertype_openconfigpacketmatchtypesethertype() const;
  void set_ethertype_openconfigpacketmatchtypesethertype(::openconfig::enums::OpenconfigPacketMatchTypesETHERTYPE value);

  // uint64 ethertype_uint64 = 461693036;
  private:
  bool has_ethertype_uint64() const;
  public:
  void clear_ethertype_uint64();
  static const int kEthertypeUint64FieldNumber = 461693036;
  ::google::protobuf::uint64 ethertype_uint64() const;
  void set_ethertype_uint64(::google::protobuf::uint64 value);

  EthertypeCase ethertype_case() const;
  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State)
 private:
  void set_has_ethertype_openconfigpacketmatchtypesethertype();
  void set_has_ethertype_uint64();

  inline bool has_ethertype() const;
  void clear_ethertype();
  inline void clear_has_ethertype();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* destination_mac_mask_;
  ::ywrapper::StringValue* source_mac_mask_;
  ::ywrapper::StringValue* destination_mac_;
  ::ywrapper::StringValue* source_mac_;
  union EthertypeUnion {
    EthertypeUnion() {}
    int ethertype_openconfigpacketmatchtypesethertype_;
    ::google::protobuf::uint64 ethertype_uint64_;
  } ethertype_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_L2_StateImpl();
};
// -------------------------------------------------------------------

class Qos_Classifiers_Classifier_Terms_Term_Conditions_L2 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2) */ {
 public:
  Qos_Classifiers_Classifier_Terms_Term_Conditions_L2();
  virtual ~Qos_Classifiers_Classifier_Terms_Term_Conditions_L2();

  Qos_Classifiers_Classifier_Terms_Term_Conditions_L2(const Qos_Classifiers_Classifier_Terms_Term_Conditions_L2& from);

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_L2& operator=(const Qos_Classifiers_Classifier_Terms_Term_Conditions_L2& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Classifiers_Classifier_Terms_Term_Conditions_L2(Qos_Classifiers_Classifier_Terms_Term_Conditions_L2&& from) noexcept
    : Qos_Classifiers_Classifier_Terms_Term_Conditions_L2() {
    *this = ::std::move(from);
  }

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_L2& operator=(Qos_Classifiers_Classifier_Terms_Term_Conditions_L2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Classifiers_Classifier_Terms_Term_Conditions_L2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Classifiers_Classifier_Terms_Term_Conditions_L2* internal_default_instance() {
    return reinterpret_cast<const Qos_Classifiers_Classifier_Terms_Term_Conditions_L2*>(
               &_Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_L2* other);
  friend void swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_L2& a, Qos_Classifiers_Classifier_Terms_Term_Conditions_L2& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_L2* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Classifiers_Classifier_Terms_Term_Conditions_L2* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_L2& from);
  void MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_L2& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Conditions_L2* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config Config;
  typedef Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State state = 2053426 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2053426;
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State& state() const;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State* release_state();
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State* state);

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config config = 173916861 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 173916861;
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config& config() const;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config* release_config();
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config* config);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State* state_;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config* config_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_L2Impl();
};
// -------------------------------------------------------------------

class Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.Config) */ {
 public:
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config();
  virtual ~Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config();

  Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config& from);

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config& operator=(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config(Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config&& from) noexcept
    : Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config() {
    *this = ::std::move(from);
  }

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config& operator=(Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config* internal_default_instance() {
    return reinterpret_cast<const Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config*>(
               &_Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config* other);
  friend void swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config& a, Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config& from);
  void MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue traffic_class = 292059538 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/mpls/config/traffic-class"];
  bool has_traffic_class() const;
  void clear_traffic_class();
  static const int kTrafficClassFieldNumber = 292059538;
  const ::ywrapper::UintValue& traffic_class() const;
  ::ywrapper::UintValue* release_traffic_class();
  ::ywrapper::UintValue* mutable_traffic_class();
  void set_allocated_traffic_class(::ywrapper::UintValue* traffic_class);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* traffic_class_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_ConfigImpl();
};
// -------------------------------------------------------------------

class Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.State) */ {
 public:
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State();
  virtual ~Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State();

  Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State& from);

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State& operator=(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State(Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State&& from) noexcept
    : Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State() {
    *this = ::std::move(from);
  }

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State& operator=(Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State* internal_default_instance() {
    return reinterpret_cast<const Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State*>(
               &_Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State* other);
  friend void swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State& a, Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State& from);
  void MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue traffic_class = 380342165 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/mpls/state/traffic-class"];
  bool has_traffic_class() const;
  void clear_traffic_class();
  static const int kTrafficClassFieldNumber = 380342165;
  const ::ywrapper::UintValue& traffic_class() const;
  ::ywrapper::UintValue* release_traffic_class();
  ::ywrapper::UintValue* mutable_traffic_class();
  void set_allocated_traffic_class(::ywrapper::UintValue* traffic_class);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* traffic_class_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_StateImpl();
};
// -------------------------------------------------------------------

class Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls) */ {
 public:
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls();
  virtual ~Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls();

  Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls& from);

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls& operator=(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls(Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls&& from) noexcept
    : Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls() {
    *this = ::std::move(from);
  }

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls& operator=(Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls* internal_default_instance() {
    return reinterpret_cast<const Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls*>(
               &_Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls* other);
  friend void swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls& a, Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls& from);
  void MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config Config;
  typedef Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.State state = 254469620 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/mpls/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 254469620;
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State& state() const;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State* release_state();
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State* state);

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.Config config = 470766099 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/mpls/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 470766099;
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config& config() const;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config* release_config();
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config* config);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State* state_;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config* config_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_MplsImpl();
};
// -------------------------------------------------------------------

class Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config) */ {
 public:
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config();
  virtual ~Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config();

  Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config& from);

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config& operator=(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config(Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config&& from) noexcept
    : Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config() {
    *this = ::std::move(from);
  }

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config& operator=(Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config& default_instance();

  enum DestinationPortCase {
    kDestinationPortDestinationport = 61984185,
    kDestinationPortString = 43341491,
    kDestinationPortUint64 = 296926614,
    DESTINATION_PORT_NOT_SET = 0,
  };

  enum SourcePortCase {
    kSourcePortSourceport = 169477687,
    kSourcePortString = 342703790,
    kSourcePortUint64 = 278063023,
    SOURCE_PORT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config* internal_default_instance() {
    return reinterpret_cast<const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config*>(
               &_Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config* other);
  friend void swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config& a, Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config& from);
  void MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort DestinationPort;
  static const DestinationPort DESTINATIONPORT_UNSET =
    Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort_DESTINATIONPORT_UNSET;
  static const DestinationPort DESTINATIONPORT_ANY =
    Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort_DESTINATIONPORT_ANY;
  static inline bool DestinationPort_IsValid(int value) {
    return Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort_IsValid(value);
  }
  static const DestinationPort DestinationPort_MIN =
    Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort_DestinationPort_MIN;
  static const DestinationPort DestinationPort_MAX =
    Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort_DestinationPort_MAX;
  static const int DestinationPort_ARRAYSIZE =
    Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort_DestinationPort_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DestinationPort_descriptor() {
    return Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort_descriptor();
  }
  static inline const ::std::string& DestinationPort_Name(DestinationPort value) {
    return Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort_Name(value);
  }
  static inline bool DestinationPort_Parse(const ::std::string& name,
      DestinationPort* value) {
    return Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort_Parse(name, value);
  }

  typedef Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort SourcePort;
  static const SourcePort SOURCEPORT_UNSET =
    Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort_SOURCEPORT_UNSET;
  static const SourcePort SOURCEPORT_ANY =
    Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort_SOURCEPORT_ANY;
  static inline bool SourcePort_IsValid(int value) {
    return Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort_IsValid(value);
  }
  static const SourcePort SourcePort_MIN =
    Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort_SourcePort_MIN;
  static const SourcePort SourcePort_MAX =
    Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort_SourcePort_MAX;
  static const int SourcePort_ARRAYSIZE =
    Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort_SourcePort_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SourcePort_descriptor() {
    return Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort_descriptor();
  }
  static inline const ::std::string& SourcePort_Name(SourcePort value) {
    return Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort_Name(value);
  }
  static inline bool SourcePort_Parse(const ::std::string& name,
      SourcePort* value) {
    return Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .openconfig.enums.OpenconfigPacketMatchTypesTCPFLAGS tcp_flags = 82538752 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/transport/config/tcp-flags"];
  int tcp_flags_size() const;
  void clear_tcp_flags();
  static const int kTcpFlagsFieldNumber = 82538752;
  ::openconfig::enums::OpenconfigPacketMatchTypesTCPFLAGS tcp_flags(int index) const;
  void set_tcp_flags(int index, ::openconfig::enums::OpenconfigPacketMatchTypesTCPFLAGS value);
  void add_tcp_flags(::openconfig::enums::OpenconfigPacketMatchTypesTCPFLAGS value);
  const ::google::protobuf::RepeatedField<int>& tcp_flags() const;
  ::google::protobuf::RepeatedField<int>* mutable_tcp_flags();

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.DestinationPort destination_port_destinationport = 61984185;
  private:
  bool has_destination_port_destinationport() const;
  public:
  void clear_destination_port_destinationport();
  static const int kDestinationPortDestinationportFieldNumber = 61984185;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort destination_port_destinationport() const;
  void set_destination_port_destinationport(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort value);

  // string destination_port_string = 43341491;
  private:
  bool has_destination_port_string() const;
  public:
  void clear_destination_port_string();
  static const int kDestinationPortStringFieldNumber = 43341491;
  const ::std::string& destination_port_string() const;
  void set_destination_port_string(const ::std::string& value);
  #if LANG_CXX11
  void set_destination_port_string(::std::string&& value);
  #endif
  void set_destination_port_string(const char* value);
  void set_destination_port_string(const char* value, size_t size);
  ::std::string* mutable_destination_port_string();
  ::std::string* release_destination_port_string();
  void set_allocated_destination_port_string(::std::string* destination_port_string);

  // uint64 destination_port_uint64 = 296926614;
  private:
  bool has_destination_port_uint64() const;
  public:
  void clear_destination_port_uint64();
  static const int kDestinationPortUint64FieldNumber = 296926614;
  ::google::protobuf::uint64 destination_port_uint64() const;
  void set_destination_port_uint64(::google::protobuf::uint64 value);

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.SourcePort source_port_sourceport = 169477687;
  private:
  bool has_source_port_sourceport() const;
  public:
  void clear_source_port_sourceport();
  static const int kSourcePortSourceportFieldNumber = 169477687;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort source_port_sourceport() const;
  void set_source_port_sourceport(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort value);

  // string source_port_string = 342703790;
  private:
  bool has_source_port_string() const;
  public:
  void clear_source_port_string();
  static const int kSourcePortStringFieldNumber = 342703790;
  const ::std::string& source_port_string() const;
  void set_source_port_string(const ::std::string& value);
  #if LANG_CXX11
  void set_source_port_string(::std::string&& value);
  #endif
  void set_source_port_string(const char* value);
  void set_source_port_string(const char* value, size_t size);
  ::std::string* mutable_source_port_string();
  ::std::string* release_source_port_string();
  void set_allocated_source_port_string(::std::string* source_port_string);

  // uint64 source_port_uint64 = 278063023;
  private:
  bool has_source_port_uint64() const;
  public:
  void clear_source_port_uint64();
  static const int kSourcePortUint64FieldNumber = 278063023;
  ::google::protobuf::uint64 source_port_uint64() const;
  void set_source_port_uint64(::google::protobuf::uint64 value);

  DestinationPortCase destination_port_case() const;
  SourcePortCase source_port_case() const;
  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config)
 private:
  void set_has_destination_port_destinationport();
  void set_has_destination_port_string();
  void set_has_destination_port_uint64();
  void set_has_source_port_sourceport();
  void set_has_source_port_string();
  void set_has_source_port_uint64();

  inline bool has_destination_port() const;
  void clear_destination_port();
  inline void clear_has_destination_port();

  inline bool has_source_port() const;
  void clear_source_port();
  inline void clear_has_source_port();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> tcp_flags_;
  mutable int _tcp_flags_cached_byte_size_;
  union DestinationPortUnion {
    DestinationPortUnion() {}
    int destination_port_destinationport_;
    ::google::protobuf::internal::ArenaStringPtr destination_port_string_;
    ::google::protobuf::uint64 destination_port_uint64_;
  } destination_port_;
  union SourcePortUnion {
    SourcePortUnion() {}
    int source_port_sourceport_;
    ::google::protobuf::internal::ArenaStringPtr source_port_string_;
    ::google::protobuf::uint64 source_port_uint64_;
  } source_port_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[2];

  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_ConfigImpl();
};
// -------------------------------------------------------------------

class Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State) */ {
 public:
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State();
  virtual ~Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State();

  Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State& from);

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State& operator=(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State(Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State&& from) noexcept
    : Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State() {
    *this = ::std::move(from);
  }

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State& operator=(Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State& default_instance();

  enum DestinationPortCase {
    kDestinationPortDestinationport = 103011798,
    kDestinationPortString = 232129498,
    kDestinationPortUint64 = 150348603,
    DESTINATION_PORT_NOT_SET = 0,
  };

  enum SourcePortCase {
    kSourcePortSourceport = 434715756,
    kSourcePortString = 531489437,
    kSourcePortUint64 = 275615616,
    SOURCE_PORT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State* internal_default_instance() {
    return reinterpret_cast<const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State*>(
               &_Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State* other);
  friend void swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State& a, Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State& from);
  void MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort DestinationPort;
  static const DestinationPort DESTINATIONPORT_UNSET =
    Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort_DESTINATIONPORT_UNSET;
  static const DestinationPort DESTINATIONPORT_ANY =
    Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort_DESTINATIONPORT_ANY;
  static inline bool DestinationPort_IsValid(int value) {
    return Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort_IsValid(value);
  }
  static const DestinationPort DestinationPort_MIN =
    Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort_DestinationPort_MIN;
  static const DestinationPort DestinationPort_MAX =
    Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort_DestinationPort_MAX;
  static const int DestinationPort_ARRAYSIZE =
    Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort_DestinationPort_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DestinationPort_descriptor() {
    return Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort_descriptor();
  }
  static inline const ::std::string& DestinationPort_Name(DestinationPort value) {
    return Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort_Name(value);
  }
  static inline bool DestinationPort_Parse(const ::std::string& name,
      DestinationPort* value) {
    return Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort_Parse(name, value);
  }

  typedef Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort SourcePort;
  static const SourcePort SOURCEPORT_UNSET =
    Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort_SOURCEPORT_UNSET;
  static const SourcePort SOURCEPORT_ANY =
    Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort_SOURCEPORT_ANY;
  static inline bool SourcePort_IsValid(int value) {
    return Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort_IsValid(value);
  }
  static const SourcePort SourcePort_MIN =
    Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort_SourcePort_MIN;
  static const SourcePort SourcePort_MAX =
    Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort_SourcePort_MAX;
  static const int SourcePort_ARRAYSIZE =
    Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort_SourcePort_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SourcePort_descriptor() {
    return Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort_descriptor();
  }
  static inline const ::std::string& SourcePort_Name(SourcePort value) {
    return Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort_Name(value);
  }
  static inline bool SourcePort_Parse(const ::std::string& name,
      SourcePort* value) {
    return Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .openconfig.enums.OpenconfigPacketMatchTypesTCPFLAGS tcp_flags = 388480337 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/transport/state/tcp-flags"];
  int tcp_flags_size() const;
  void clear_tcp_flags();
  static const int kTcpFlagsFieldNumber = 388480337;
  ::openconfig::enums::OpenconfigPacketMatchTypesTCPFLAGS tcp_flags(int index) const;
  void set_tcp_flags(int index, ::openconfig::enums::OpenconfigPacketMatchTypesTCPFLAGS value);
  void add_tcp_flags(::openconfig::enums::OpenconfigPacketMatchTypesTCPFLAGS value);
  const ::google::protobuf::RepeatedField<int>& tcp_flags() const;
  ::google::protobuf::RepeatedField<int>* mutable_tcp_flags();

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.DestinationPort destination_port_destinationport = 103011798;
  private:
  bool has_destination_port_destinationport() const;
  public:
  void clear_destination_port_destinationport();
  static const int kDestinationPortDestinationportFieldNumber = 103011798;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort destination_port_destinationport() const;
  void set_destination_port_destinationport(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort value);

  // string destination_port_string = 232129498;
  private:
  bool has_destination_port_string() const;
  public:
  void clear_destination_port_string();
  static const int kDestinationPortStringFieldNumber = 232129498;
  const ::std::string& destination_port_string() const;
  void set_destination_port_string(const ::std::string& value);
  #if LANG_CXX11
  void set_destination_port_string(::std::string&& value);
  #endif
  void set_destination_port_string(const char* value);
  void set_destination_port_string(const char* value, size_t size);
  ::std::string* mutable_destination_port_string();
  ::std::string* release_destination_port_string();
  void set_allocated_destination_port_string(::std::string* destination_port_string);

  // uint64 destination_port_uint64 = 150348603;
  private:
  bool has_destination_port_uint64() const;
  public:
  void clear_destination_port_uint64();
  static const int kDestinationPortUint64FieldNumber = 150348603;
  ::google::protobuf::uint64 destination_port_uint64() const;
  void set_destination_port_uint64(::google::protobuf::uint64 value);

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.SourcePort source_port_sourceport = 434715756;
  private:
  bool has_source_port_sourceport() const;
  public:
  void clear_source_port_sourceport();
  static const int kSourcePortSourceportFieldNumber = 434715756;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort source_port_sourceport() const;
  void set_source_port_sourceport(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort value);

  // string source_port_string = 531489437;
  private:
  bool has_source_port_string() const;
  public:
  void clear_source_port_string();
  static const int kSourcePortStringFieldNumber = 531489437;
  const ::std::string& source_port_string() const;
  void set_source_port_string(const ::std::string& value);
  #if LANG_CXX11
  void set_source_port_string(::std::string&& value);
  #endif
  void set_source_port_string(const char* value);
  void set_source_port_string(const char* value, size_t size);
  ::std::string* mutable_source_port_string();
  ::std::string* release_source_port_string();
  void set_allocated_source_port_string(::std::string* source_port_string);

  // uint64 source_port_uint64 = 275615616;
  private:
  bool has_source_port_uint64() const;
  public:
  void clear_source_port_uint64();
  static const int kSourcePortUint64FieldNumber = 275615616;
  ::google::protobuf::uint64 source_port_uint64() const;
  void set_source_port_uint64(::google::protobuf::uint64 value);

  DestinationPortCase destination_port_case() const;
  SourcePortCase source_port_case() const;
  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State)
 private:
  void set_has_destination_port_destinationport();
  void set_has_destination_port_string();
  void set_has_destination_port_uint64();
  void set_has_source_port_sourceport();
  void set_has_source_port_string();
  void set_has_source_port_uint64();

  inline bool has_destination_port() const;
  void clear_destination_port();
  inline void clear_has_destination_port();

  inline bool has_source_port() const;
  void clear_source_port();
  inline void clear_has_source_port();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> tcp_flags_;
  mutable int _tcp_flags_cached_byte_size_;
  union DestinationPortUnion {
    DestinationPortUnion() {}
    int destination_port_destinationport_;
    ::google::protobuf::internal::ArenaStringPtr destination_port_string_;
    ::google::protobuf::uint64 destination_port_uint64_;
  } destination_port_;
  union SourcePortUnion {
    SourcePortUnion() {}
    int source_port_sourceport_;
    ::google::protobuf::internal::ArenaStringPtr source_port_string_;
    ::google::protobuf::uint64 source_port_uint64_;
  } source_port_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[2];

  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_Transport_StateImpl();
};
// -------------------------------------------------------------------

class Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport) */ {
 public:
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport();
  virtual ~Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport();

  Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport& from);

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport& operator=(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport(Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport&& from) noexcept
    : Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport() {
    *this = ::std::move(from);
  }

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport& operator=(Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport* internal_default_instance() {
    return reinterpret_cast<const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport*>(
               &_Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport* other);
  friend void swap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport& a, Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport& from);
  void MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config Config;
  typedef Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State state = 253249231 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/transport/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 253249231;
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State& state() const;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State* release_state();
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State* state);

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config config = 471168594 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/transport/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 471168594;
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config& config() const;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config* release_config();
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config* config);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State* state_;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config* config_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_Conditions_TransportImpl();
};
// -------------------------------------------------------------------

class Qos_Classifiers_Classifier_Terms_Term_Conditions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions) */ {
 public:
  Qos_Classifiers_Classifier_Terms_Term_Conditions();
  virtual ~Qos_Classifiers_Classifier_Terms_Term_Conditions();

  Qos_Classifiers_Classifier_Terms_Term_Conditions(const Qos_Classifiers_Classifier_Terms_Term_Conditions& from);

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions& operator=(const Qos_Classifiers_Classifier_Terms_Term_Conditions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Classifiers_Classifier_Terms_Term_Conditions(Qos_Classifiers_Classifier_Terms_Term_Conditions&& from) noexcept
    : Qos_Classifiers_Classifier_Terms_Term_Conditions() {
    *this = ::std::move(from);
  }

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions& operator=(Qos_Classifiers_Classifier_Terms_Term_Conditions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Classifiers_Classifier_Terms_Term_Conditions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Classifiers_Classifier_Terms_Term_Conditions* internal_default_instance() {
    return reinterpret_cast<const Qos_Classifiers_Classifier_Terms_Term_Conditions*>(
               &_Qos_Classifiers_Classifier_Terms_Term_Conditions_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(Qos_Classifiers_Classifier_Terms_Term_Conditions* other);
  friend void swap(Qos_Classifiers_Classifier_Terms_Term_Conditions& a, Qos_Classifiers_Classifier_Terms_Term_Conditions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Classifiers_Classifier_Terms_Term_Conditions* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Classifiers_Classifier_Terms_Term_Conditions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions& from);
  void MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Conditions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Conditions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4 Ipv4;
  typedef Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6 Ipv6;
  typedef Qos_Classifiers_Classifier_Terms_Term_Conditions_L2 L2;
  typedef Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls Mpls;
  typedef Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport Transport;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6 ipv6 = 10035433 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6"];
  bool has_ipv6() const;
  void clear_ipv6();
  static const int kIpv6FieldNumber = 10035433;
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6& ipv6() const;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6* release_ipv6();
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6* mutable_ipv6();
  void set_allocated_ipv6(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6* ipv6);

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4 ipv4 = 10035435 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4"];
  bool has_ipv4() const;
  void clear_ipv4();
  static const int kIpv4FieldNumber = 10035435;
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4& ipv4() const;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4* release_ipv4();
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4* mutable_ipv4();
  void set_allocated_ipv4(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4* ipv4);

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls mpls = 259157330 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/mpls"];
  bool has_mpls() const;
  void clear_mpls();
  static const int kMplsFieldNumber = 259157330;
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls& mpls() const;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls* release_mpls();
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls* mutable_mpls();
  void set_allocated_mpls(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls* mpls);

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2 l2 = 363202488 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2"];
  bool has_l2() const;
  void clear_l2();
  static const int kL2FieldNumber = 363202488;
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2& l2() const;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2* release_l2();
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2* mutable_l2();
  void set_allocated_l2(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2* l2);

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport transport = 396236957 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/transport"];
  bool has_transport() const;
  void clear_transport();
  static const int kTransportFieldNumber = 396236957;
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport& transport() const;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport* release_transport();
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport* mutable_transport();
  void set_allocated_transport(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport* transport);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6* ipv6_;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4* ipv4_;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls* mpls_;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2* l2_;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport* transport_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_ConditionsImpl();
};
// -------------------------------------------------------------------

class Qos_Classifiers_Classifier_Terms_Term_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Config) */ {
 public:
  Qos_Classifiers_Classifier_Terms_Term_Config();
  virtual ~Qos_Classifiers_Classifier_Terms_Term_Config();

  Qos_Classifiers_Classifier_Terms_Term_Config(const Qos_Classifiers_Classifier_Terms_Term_Config& from);

  inline Qos_Classifiers_Classifier_Terms_Term_Config& operator=(const Qos_Classifiers_Classifier_Terms_Term_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Classifiers_Classifier_Terms_Term_Config(Qos_Classifiers_Classifier_Terms_Term_Config&& from) noexcept
    : Qos_Classifiers_Classifier_Terms_Term_Config() {
    *this = ::std::move(from);
  }

  inline Qos_Classifiers_Classifier_Terms_Term_Config& operator=(Qos_Classifiers_Classifier_Terms_Term_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Classifiers_Classifier_Terms_Term_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Classifiers_Classifier_Terms_Term_Config* internal_default_instance() {
    return reinterpret_cast<const Qos_Classifiers_Classifier_Terms_Term_Config*>(
               &_Qos_Classifiers_Classifier_Terms_Term_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(Qos_Classifiers_Classifier_Terms_Term_Config* other);
  friend void swap(Qos_Classifiers_Classifier_Terms_Term_Config& a, Qos_Classifiers_Classifier_Terms_Term_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Classifiers_Classifier_Terms_Term_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Classifiers_Classifier_Terms_Term_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_Config& from);
  void MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Classifiers_Classifier_Terms_Term_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue id = 136646369 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/config/id"];
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 136646369;
  const ::ywrapper::StringValue& id() const;
  ::ywrapper::StringValue* release_id();
  ::ywrapper::StringValue* mutable_id();
  void set_allocated_id(::ywrapper::StringValue* id);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* id_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_ConfigImpl();
};
// -------------------------------------------------------------------

class Qos_Classifiers_Classifier_Terms_Term_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.State) */ {
 public:
  Qos_Classifiers_Classifier_Terms_Term_State();
  virtual ~Qos_Classifiers_Classifier_Terms_Term_State();

  Qos_Classifiers_Classifier_Terms_Term_State(const Qos_Classifiers_Classifier_Terms_Term_State& from);

  inline Qos_Classifiers_Classifier_Terms_Term_State& operator=(const Qos_Classifiers_Classifier_Terms_Term_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Classifiers_Classifier_Terms_Term_State(Qos_Classifiers_Classifier_Terms_Term_State&& from) noexcept
    : Qos_Classifiers_Classifier_Terms_Term_State() {
    *this = ::std::move(from);
  }

  inline Qos_Classifiers_Classifier_Terms_Term_State& operator=(Qos_Classifiers_Classifier_Terms_Term_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Classifiers_Classifier_Terms_Term_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Classifiers_Classifier_Terms_Term_State* internal_default_instance() {
    return reinterpret_cast<const Qos_Classifiers_Classifier_Terms_Term_State*>(
               &_Qos_Classifiers_Classifier_Terms_Term_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(Qos_Classifiers_Classifier_Terms_Term_State* other);
  friend void swap(Qos_Classifiers_Classifier_Terms_Term_State& a, Qos_Classifiers_Classifier_Terms_Term_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Classifiers_Classifier_Terms_Term_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Classifiers_Classifier_Terms_Term_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Classifiers_Classifier_Terms_Term_State& from);
  void MergeFrom(const Qos_Classifiers_Classifier_Terms_Term_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Classifiers_Classifier_Terms_Term_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue id = 281525904 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/state/id"];
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 281525904;
  const ::ywrapper::StringValue& id() const;
  ::ywrapper::StringValue* release_id();
  ::ywrapper::StringValue* mutable_id();
  void set_allocated_id(::ywrapper::StringValue* id);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* id_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_Term_StateImpl();
};
// -------------------------------------------------------------------

class Qos_Classifiers_Classifier_Terms_Term : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term) */ {
 public:
  Qos_Classifiers_Classifier_Terms_Term();
  virtual ~Qos_Classifiers_Classifier_Terms_Term();

  Qos_Classifiers_Classifier_Terms_Term(const Qos_Classifiers_Classifier_Terms_Term& from);

  inline Qos_Classifiers_Classifier_Terms_Term& operator=(const Qos_Classifiers_Classifier_Terms_Term& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Classifiers_Classifier_Terms_Term(Qos_Classifiers_Classifier_Terms_Term&& from) noexcept
    : Qos_Classifiers_Classifier_Terms_Term() {
    *this = ::std::move(from);
  }

  inline Qos_Classifiers_Classifier_Terms_Term& operator=(Qos_Classifiers_Classifier_Terms_Term&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Classifiers_Classifier_Terms_Term& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Classifiers_Classifier_Terms_Term* internal_default_instance() {
    return reinterpret_cast<const Qos_Classifiers_Classifier_Terms_Term*>(
               &_Qos_Classifiers_Classifier_Terms_Term_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(Qos_Classifiers_Classifier_Terms_Term* other);
  friend void swap(Qos_Classifiers_Classifier_Terms_Term& a, Qos_Classifiers_Classifier_Terms_Term& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Classifiers_Classifier_Terms_Term* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Classifiers_Classifier_Terms_Term* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Classifiers_Classifier_Terms_Term& from);
  void MergeFrom(const Qos_Classifiers_Classifier_Terms_Term& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Classifiers_Classifier_Terms_Term* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Classifiers_Classifier_Terms_Term_Actions Actions;
  typedef Qos_Classifiers_Classifier_Terms_Term_Conditions Conditions;
  typedef Qos_Classifiers_Classifier_Terms_Term_Config Config;
  typedef Qos_Classifiers_Classifier_Terms_Term_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions conditions = 14705347 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions"];
  bool has_conditions() const;
  void clear_conditions();
  static const int kConditionsFieldNumber = 14705347;
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions& conditions() const;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions* release_conditions();
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions* mutable_conditions();
  void set_allocated_conditions(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions* conditions);

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.State state = 18572232 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 18572232;
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_State& state() const;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_State* release_state();
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_State* state);

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions actions = 288444670 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions"];
  bool has_actions() const;
  void clear_actions();
  static const int kActionsFieldNumber = 288444670;
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions& actions() const;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions* release_actions();
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions* mutable_actions();
  void set_allocated_actions(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions* actions);

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Config config = 419346967 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 419346967;
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Config& config() const;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Config* release_config();
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Config* config);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions* conditions_;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_State* state_;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions* actions_;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Config* config_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_TermImpl();
};
// -------------------------------------------------------------------

class Qos_Classifiers_Classifier_Terms_TermKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey) */ {
 public:
  Qos_Classifiers_Classifier_Terms_TermKey();
  virtual ~Qos_Classifiers_Classifier_Terms_TermKey();

  Qos_Classifiers_Classifier_Terms_TermKey(const Qos_Classifiers_Classifier_Terms_TermKey& from);

  inline Qos_Classifiers_Classifier_Terms_TermKey& operator=(const Qos_Classifiers_Classifier_Terms_TermKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Classifiers_Classifier_Terms_TermKey(Qos_Classifiers_Classifier_Terms_TermKey&& from) noexcept
    : Qos_Classifiers_Classifier_Terms_TermKey() {
    *this = ::std::move(from);
  }

  inline Qos_Classifiers_Classifier_Terms_TermKey& operator=(Qos_Classifiers_Classifier_Terms_TermKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Classifiers_Classifier_Terms_TermKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Classifiers_Classifier_Terms_TermKey* internal_default_instance() {
    return reinterpret_cast<const Qos_Classifiers_Classifier_Terms_TermKey*>(
               &_Qos_Classifiers_Classifier_Terms_TermKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(Qos_Classifiers_Classifier_Terms_TermKey* other);
  friend void swap(Qos_Classifiers_Classifier_Terms_TermKey& a, Qos_Classifiers_Classifier_Terms_TermKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Classifiers_Classifier_Terms_TermKey* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Classifiers_Classifier_Terms_TermKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Classifiers_Classifier_Terms_TermKey& from);
  void MergeFrom(const Qos_Classifiers_Classifier_Terms_TermKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Classifiers_Classifier_Terms_TermKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/id"];
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term term = 2;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 2;
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term& term() const;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term* release_term();
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term* mutable_term();
  void set_allocated_term(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term* term);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term* term_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_Terms_TermKeyImpl();
};
// -------------------------------------------------------------------

class Qos_Classifiers_Classifier_Terms : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms) */ {
 public:
  Qos_Classifiers_Classifier_Terms();
  virtual ~Qos_Classifiers_Classifier_Terms();

  Qos_Classifiers_Classifier_Terms(const Qos_Classifiers_Classifier_Terms& from);

  inline Qos_Classifiers_Classifier_Terms& operator=(const Qos_Classifiers_Classifier_Terms& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Classifiers_Classifier_Terms(Qos_Classifiers_Classifier_Terms&& from) noexcept
    : Qos_Classifiers_Classifier_Terms() {
    *this = ::std::move(from);
  }

  inline Qos_Classifiers_Classifier_Terms& operator=(Qos_Classifiers_Classifier_Terms&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Classifiers_Classifier_Terms& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Classifiers_Classifier_Terms* internal_default_instance() {
    return reinterpret_cast<const Qos_Classifiers_Classifier_Terms*>(
               &_Qos_Classifiers_Classifier_Terms_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(Qos_Classifiers_Classifier_Terms* other);
  friend void swap(Qos_Classifiers_Classifier_Terms& a, Qos_Classifiers_Classifier_Terms& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Classifiers_Classifier_Terms* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Classifiers_Classifier_Terms* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Classifiers_Classifier_Terms& from);
  void MergeFrom(const Qos_Classifiers_Classifier_Terms& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Classifiers_Classifier_Terms* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Classifiers_Classifier_Terms_Term Term;
  typedef Qos_Classifiers_Classifier_Terms_TermKey TermKey;

  // accessors -------------------------------------------------------

  // repeated .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey term = 74659894 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term"];
  int term_size() const;
  void clear_term();
  static const int kTermFieldNumber = 74659894;
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_TermKey& term(int index) const;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_TermKey* mutable_term(int index);
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_TermKey* add_term();
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_TermKey >*
      mutable_term();
  const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_TermKey >&
      term() const;

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_TermKey > term_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_Classifier_TermsImpl();
};
// -------------------------------------------------------------------

class Qos_Classifiers_Classifier : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Classifiers.Classifier) */ {
 public:
  Qos_Classifiers_Classifier();
  virtual ~Qos_Classifiers_Classifier();

  Qos_Classifiers_Classifier(const Qos_Classifiers_Classifier& from);

  inline Qos_Classifiers_Classifier& operator=(const Qos_Classifiers_Classifier& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Classifiers_Classifier(Qos_Classifiers_Classifier&& from) noexcept
    : Qos_Classifiers_Classifier() {
    *this = ::std::move(from);
  }

  inline Qos_Classifiers_Classifier& operator=(Qos_Classifiers_Classifier&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Classifiers_Classifier& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Classifiers_Classifier* internal_default_instance() {
    return reinterpret_cast<const Qos_Classifiers_Classifier*>(
               &_Qos_Classifiers_Classifier_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(Qos_Classifiers_Classifier* other);
  friend void swap(Qos_Classifiers_Classifier& a, Qos_Classifiers_Classifier& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Classifiers_Classifier* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Classifiers_Classifier* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Classifiers_Classifier& from);
  void MergeFrom(const Qos_Classifiers_Classifier& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Classifiers_Classifier* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Classifiers_Classifier_Config Config;
  typedef Qos_Classifiers_Classifier_State State;
  typedef Qos_Classifiers_Classifier_Terms Terms;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.State state = 125517931 [(.yext.schemapath) = "/qos/classifiers/classifier/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 125517931;
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_State& state() const;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_State* release_state();
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_State* state);

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Config config = 505734526 [(.yext.schemapath) = "/qos/classifiers/classifier/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 505734526;
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Config& config() const;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Config* release_config();
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Config* config);

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms terms = 506313861 [(.yext.schemapath) = "/qos/classifiers/classifier/terms"];
  bool has_terms() const;
  void clear_terms();
  static const int kTermsFieldNumber = 506313861;
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms& terms() const;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms* release_terms();
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms* mutable_terms();
  void set_allocated_terms(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms* terms);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Classifiers.Classifier)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_State* state_;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Config* config_;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms* terms_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_ClassifierImpl();
};
// -------------------------------------------------------------------

class Qos_Classifiers_ClassifierKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey) */ {
 public:
  Qos_Classifiers_ClassifierKey();
  virtual ~Qos_Classifiers_ClassifierKey();

  Qos_Classifiers_ClassifierKey(const Qos_Classifiers_ClassifierKey& from);

  inline Qos_Classifiers_ClassifierKey& operator=(const Qos_Classifiers_ClassifierKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Classifiers_ClassifierKey(Qos_Classifiers_ClassifierKey&& from) noexcept
    : Qos_Classifiers_ClassifierKey() {
    *this = ::std::move(from);
  }

  inline Qos_Classifiers_ClassifierKey& operator=(Qos_Classifiers_ClassifierKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Classifiers_ClassifierKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Classifiers_ClassifierKey* internal_default_instance() {
    return reinterpret_cast<const Qos_Classifiers_ClassifierKey*>(
               &_Qos_Classifiers_ClassifierKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(Qos_Classifiers_ClassifierKey* other);
  friend void swap(Qos_Classifiers_ClassifierKey& a, Qos_Classifiers_ClassifierKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Classifiers_ClassifierKey* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Classifiers_ClassifierKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Classifiers_ClassifierKey& from);
  void MergeFrom(const Qos_Classifiers_ClassifierKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Classifiers_ClassifierKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1 [(.yext.schemapath) = "/qos/classifiers/classifier/name"];
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .openconfig.openconfig_qos.Qos.Classifiers.Classifier classifier = 2;
  bool has_classifier() const;
  void clear_classifier();
  static const int kClassifierFieldNumber = 2;
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier& classifier() const;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier* release_classifier();
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier* mutable_classifier();
  void set_allocated_classifier(::openconfig::openconfig_qos::Qos_Classifiers_Classifier* classifier);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier* classifier_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Classifiers_ClassifierKeyImpl();
};
// -------------------------------------------------------------------

class Qos_Classifiers : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Classifiers) */ {
 public:
  Qos_Classifiers();
  virtual ~Qos_Classifiers();

  Qos_Classifiers(const Qos_Classifiers& from);

  inline Qos_Classifiers& operator=(const Qos_Classifiers& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Classifiers(Qos_Classifiers&& from) noexcept
    : Qos_Classifiers() {
    *this = ::std::move(from);
  }

  inline Qos_Classifiers& operator=(Qos_Classifiers&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Classifiers& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Classifiers* internal_default_instance() {
    return reinterpret_cast<const Qos_Classifiers*>(
               &_Qos_Classifiers_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(Qos_Classifiers* other);
  friend void swap(Qos_Classifiers& a, Qos_Classifiers& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Classifiers* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Classifiers* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Classifiers& from);
  void MergeFrom(const Qos_Classifiers& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Classifiers* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Classifiers_Classifier Classifier;
  typedef Qos_Classifiers_ClassifierKey ClassifierKey;

  // accessors -------------------------------------------------------

  // repeated .openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey classifier = 281713417 [(.yext.schemapath) = "/qos/classifiers/classifier"];
  int classifier_size() const;
  void clear_classifier();
  static const int kClassifierFieldNumber = 281713417;
  const ::openconfig::openconfig_qos::Qos_Classifiers_ClassifierKey& classifier(int index) const;
  ::openconfig::openconfig_qos::Qos_Classifiers_ClassifierKey* mutable_classifier(int index);
  ::openconfig::openconfig_qos::Qos_Classifiers_ClassifierKey* add_classifier();
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Classifiers_ClassifierKey >*
      mutable_classifier();
  const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Classifiers_ClassifierKey >&
      classifier() const;

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Classifiers)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Classifiers_ClassifierKey > classifier_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_ClassifiersImpl();
};
// -------------------------------------------------------------------

class Qos_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Config) */ {
 public:
  Qos_Config();
  virtual ~Qos_Config();

  Qos_Config(const Qos_Config& from);

  inline Qos_Config& operator=(const Qos_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Config(Qos_Config&& from) noexcept
    : Qos_Config() {
    *this = ::std::move(from);
  }

  inline Qos_Config& operator=(Qos_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Config* internal_default_instance() {
    return reinterpret_cast<const Qos_Config*>(
               &_Qos_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(Qos_Config* other);
  friend void swap(Qos_Config& a, Qos_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Config& from);
  void MergeFrom(const Qos_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_ConfigImpl();
};
// -------------------------------------------------------------------

class Qos_ForwardingGroups_ForwardingGroup_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.Config) */ {
 public:
  Qos_ForwardingGroups_ForwardingGroup_Config();
  virtual ~Qos_ForwardingGroups_ForwardingGroup_Config();

  Qos_ForwardingGroups_ForwardingGroup_Config(const Qos_ForwardingGroups_ForwardingGroup_Config& from);

  inline Qos_ForwardingGroups_ForwardingGroup_Config& operator=(const Qos_ForwardingGroups_ForwardingGroup_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_ForwardingGroups_ForwardingGroup_Config(Qos_ForwardingGroups_ForwardingGroup_Config&& from) noexcept
    : Qos_ForwardingGroups_ForwardingGroup_Config() {
    *this = ::std::move(from);
  }

  inline Qos_ForwardingGroups_ForwardingGroup_Config& operator=(Qos_ForwardingGroups_ForwardingGroup_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_ForwardingGroups_ForwardingGroup_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_ForwardingGroups_ForwardingGroup_Config* internal_default_instance() {
    return reinterpret_cast<const Qos_ForwardingGroups_ForwardingGroup_Config*>(
               &_Qos_ForwardingGroups_ForwardingGroup_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(Qos_ForwardingGroups_ForwardingGroup_Config* other);
  friend void swap(Qos_ForwardingGroups_ForwardingGroup_Config& a, Qos_ForwardingGroups_ForwardingGroup_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_ForwardingGroups_ForwardingGroup_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_ForwardingGroups_ForwardingGroup_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_ForwardingGroups_ForwardingGroup_Config& from);
  void MergeFrom(const Qos_ForwardingGroups_ForwardingGroup_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_ForwardingGroups_ForwardingGroup_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue output_queue = 22359152 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/config/output-queue"];
  bool has_output_queue() const;
  void clear_output_queue();
  static const int kOutputQueueFieldNumber = 22359152;
  const ::ywrapper::StringValue& output_queue() const;
  ::ywrapper::StringValue* release_output_queue();
  ::ywrapper::StringValue* mutable_output_queue();
  void set_allocated_output_queue(::ywrapper::StringValue* output_queue);

  // .ywrapper.StringValue name = 179879028 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/config/name"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 179879028;
  const ::ywrapper::StringValue& name() const;
  ::ywrapper::StringValue* release_name();
  ::ywrapper::StringValue* mutable_name();
  void set_allocated_name(::ywrapper::StringValue* name);

  // .ywrapper.UintValue fabric_priority = 199494503 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/config/fabric-priority"];
  bool has_fabric_priority() const;
  void clear_fabric_priority();
  static const int kFabricPriorityFieldNumber = 199494503;
  const ::ywrapper::UintValue& fabric_priority() const;
  ::ywrapper::UintValue* release_fabric_priority();
  ::ywrapper::UintValue* mutable_fabric_priority();
  void set_allocated_fabric_priority(::ywrapper::UintValue* fabric_priority);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* output_queue_;
  ::ywrapper::StringValue* name_;
  ::ywrapper::UintValue* fabric_priority_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_ForwardingGroups_ForwardingGroup_ConfigImpl();
};
// -------------------------------------------------------------------

class Qos_ForwardingGroups_ForwardingGroup_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.State) */ {
 public:
  Qos_ForwardingGroups_ForwardingGroup_State();
  virtual ~Qos_ForwardingGroups_ForwardingGroup_State();

  Qos_ForwardingGroups_ForwardingGroup_State(const Qos_ForwardingGroups_ForwardingGroup_State& from);

  inline Qos_ForwardingGroups_ForwardingGroup_State& operator=(const Qos_ForwardingGroups_ForwardingGroup_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_ForwardingGroups_ForwardingGroup_State(Qos_ForwardingGroups_ForwardingGroup_State&& from) noexcept
    : Qos_ForwardingGroups_ForwardingGroup_State() {
    *this = ::std::move(from);
  }

  inline Qos_ForwardingGroups_ForwardingGroup_State& operator=(Qos_ForwardingGroups_ForwardingGroup_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_ForwardingGroups_ForwardingGroup_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_ForwardingGroups_ForwardingGroup_State* internal_default_instance() {
    return reinterpret_cast<const Qos_ForwardingGroups_ForwardingGroup_State*>(
               &_Qos_ForwardingGroups_ForwardingGroup_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(Qos_ForwardingGroups_ForwardingGroup_State* other);
  friend void swap(Qos_ForwardingGroups_ForwardingGroup_State& a, Qos_ForwardingGroups_ForwardingGroup_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_ForwardingGroups_ForwardingGroup_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_ForwardingGroups_ForwardingGroup_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_ForwardingGroups_ForwardingGroup_State& from);
  void MergeFrom(const Qos_ForwardingGroups_ForwardingGroup_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_ForwardingGroups_ForwardingGroup_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue output_queue = 104836423 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/state/output-queue"];
  bool has_output_queue() const;
  void clear_output_queue();
  static const int kOutputQueueFieldNumber = 104836423;
  const ::ywrapper::StringValue& output_queue() const;
  ::ywrapper::StringValue* release_output_queue();
  ::ywrapper::StringValue* mutable_output_queue();
  void set_allocated_output_queue(::ywrapper::StringValue* output_queue);

  // .ywrapper.StringValue name = 399045611 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/state/name"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 399045611;
  const ::ywrapper::StringValue& name() const;
  ::ywrapper::StringValue* release_name();
  ::ywrapper::StringValue* mutable_name();
  void set_allocated_name(::ywrapper::StringValue* name);

  // .ywrapper.UintValue fabric_priority = 435056042 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/state/fabric-priority"];
  bool has_fabric_priority() const;
  void clear_fabric_priority();
  static const int kFabricPriorityFieldNumber = 435056042;
  const ::ywrapper::UintValue& fabric_priority() const;
  ::ywrapper::UintValue* release_fabric_priority();
  ::ywrapper::UintValue* mutable_fabric_priority();
  void set_allocated_fabric_priority(::ywrapper::UintValue* fabric_priority);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* output_queue_;
  ::ywrapper::StringValue* name_;
  ::ywrapper::UintValue* fabric_priority_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_ForwardingGroups_ForwardingGroup_StateImpl();
};
// -------------------------------------------------------------------

class Qos_ForwardingGroups_ForwardingGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup) */ {
 public:
  Qos_ForwardingGroups_ForwardingGroup();
  virtual ~Qos_ForwardingGroups_ForwardingGroup();

  Qos_ForwardingGroups_ForwardingGroup(const Qos_ForwardingGroups_ForwardingGroup& from);

  inline Qos_ForwardingGroups_ForwardingGroup& operator=(const Qos_ForwardingGroups_ForwardingGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_ForwardingGroups_ForwardingGroup(Qos_ForwardingGroups_ForwardingGroup&& from) noexcept
    : Qos_ForwardingGroups_ForwardingGroup() {
    *this = ::std::move(from);
  }

  inline Qos_ForwardingGroups_ForwardingGroup& operator=(Qos_ForwardingGroups_ForwardingGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_ForwardingGroups_ForwardingGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_ForwardingGroups_ForwardingGroup* internal_default_instance() {
    return reinterpret_cast<const Qos_ForwardingGroups_ForwardingGroup*>(
               &_Qos_ForwardingGroups_ForwardingGroup_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void Swap(Qos_ForwardingGroups_ForwardingGroup* other);
  friend void swap(Qos_ForwardingGroups_ForwardingGroup& a, Qos_ForwardingGroups_ForwardingGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_ForwardingGroups_ForwardingGroup* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_ForwardingGroups_ForwardingGroup* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_ForwardingGroups_ForwardingGroup& from);
  void MergeFrom(const Qos_ForwardingGroups_ForwardingGroup& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_ForwardingGroups_ForwardingGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_ForwardingGroups_ForwardingGroup_Config Config;
  typedef Qos_ForwardingGroups_ForwardingGroup_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.Config config = 30587438 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 30587438;
  const ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_Config& config() const;
  ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_Config* release_config();
  ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_Config* config);

  // .openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.State state = 512276571 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 512276571;
  const ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_State& state() const;
  ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_State* release_state();
  ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_State* state);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_Config* config_;
  ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_State* state_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_ForwardingGroups_ForwardingGroupImpl();
};
// -------------------------------------------------------------------

class Qos_ForwardingGroups_ForwardingGroupKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey) */ {
 public:
  Qos_ForwardingGroups_ForwardingGroupKey();
  virtual ~Qos_ForwardingGroups_ForwardingGroupKey();

  Qos_ForwardingGroups_ForwardingGroupKey(const Qos_ForwardingGroups_ForwardingGroupKey& from);

  inline Qos_ForwardingGroups_ForwardingGroupKey& operator=(const Qos_ForwardingGroups_ForwardingGroupKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_ForwardingGroups_ForwardingGroupKey(Qos_ForwardingGroups_ForwardingGroupKey&& from) noexcept
    : Qos_ForwardingGroups_ForwardingGroupKey() {
    *this = ::std::move(from);
  }

  inline Qos_ForwardingGroups_ForwardingGroupKey& operator=(Qos_ForwardingGroups_ForwardingGroupKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_ForwardingGroups_ForwardingGroupKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_ForwardingGroups_ForwardingGroupKey* internal_default_instance() {
    return reinterpret_cast<const Qos_ForwardingGroups_ForwardingGroupKey*>(
               &_Qos_ForwardingGroups_ForwardingGroupKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void Swap(Qos_ForwardingGroups_ForwardingGroupKey* other);
  friend void swap(Qos_ForwardingGroups_ForwardingGroupKey& a, Qos_ForwardingGroups_ForwardingGroupKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_ForwardingGroups_ForwardingGroupKey* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_ForwardingGroups_ForwardingGroupKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_ForwardingGroups_ForwardingGroupKey& from);
  void MergeFrom(const Qos_ForwardingGroups_ForwardingGroupKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_ForwardingGroups_ForwardingGroupKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/name"];
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup forwarding_group = 2;
  bool has_forwarding_group() const;
  void clear_forwarding_group();
  static const int kForwardingGroupFieldNumber = 2;
  const ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup& forwarding_group() const;
  ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup* release_forwarding_group();
  ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup* mutable_forwarding_group();
  void set_allocated_forwarding_group(::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup* forwarding_group);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup* forwarding_group_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_ForwardingGroups_ForwardingGroupKeyImpl();
};
// -------------------------------------------------------------------

class Qos_ForwardingGroups : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.ForwardingGroups) */ {
 public:
  Qos_ForwardingGroups();
  virtual ~Qos_ForwardingGroups();

  Qos_ForwardingGroups(const Qos_ForwardingGroups& from);

  inline Qos_ForwardingGroups& operator=(const Qos_ForwardingGroups& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_ForwardingGroups(Qos_ForwardingGroups&& from) noexcept
    : Qos_ForwardingGroups() {
    *this = ::std::move(from);
  }

  inline Qos_ForwardingGroups& operator=(Qos_ForwardingGroups&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_ForwardingGroups& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_ForwardingGroups* internal_default_instance() {
    return reinterpret_cast<const Qos_ForwardingGroups*>(
               &_Qos_ForwardingGroups_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void Swap(Qos_ForwardingGroups* other);
  friend void swap(Qos_ForwardingGroups& a, Qos_ForwardingGroups& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_ForwardingGroups* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_ForwardingGroups* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_ForwardingGroups& from);
  void MergeFrom(const Qos_ForwardingGroups& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_ForwardingGroups* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_ForwardingGroups_ForwardingGroup ForwardingGroup;
  typedef Qos_ForwardingGroups_ForwardingGroupKey ForwardingGroupKey;

  // accessors -------------------------------------------------------

  // repeated .openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey forwarding_group = 454859993 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group"];
  int forwarding_group_size() const;
  void clear_forwarding_group();
  static const int kForwardingGroupFieldNumber = 454859993;
  const ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroupKey& forwarding_group(int index) const;
  ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroupKey* mutable_forwarding_group(int index);
  ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroupKey* add_forwarding_group();
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroupKey >*
      mutable_forwarding_group();
  const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroupKey >&
      forwarding_group() const;

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.ForwardingGroups)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroupKey > forwarding_group_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_ForwardingGroupsImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Config) */ {
 public:
  Qos_Interfaces_Interface_Config();
  virtual ~Qos_Interfaces_Interface_Config();

  Qos_Interfaces_Interface_Config(const Qos_Interfaces_Interface_Config& from);

  inline Qos_Interfaces_Interface_Config& operator=(const Qos_Interfaces_Interface_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Config(Qos_Interfaces_Interface_Config&& from) noexcept
    : Qos_Interfaces_Interface_Config() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Config& operator=(Qos_Interfaces_Interface_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Config* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Config*>(
               &_Qos_Interfaces_Interface_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    38;

  void Swap(Qos_Interfaces_Interface_Config* other);
  friend void swap(Qos_Interfaces_Interface_Config& a, Qos_Interfaces_Interface_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Config& from);
  void MergeFrom(const Qos_Interfaces_Interface_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue interface_id = 261126006 [(.yext.schemapath) = "/qos/interfaces/interface/config/interface-id"];
  bool has_interface_id() const;
  void clear_interface_id();
  static const int kInterfaceIdFieldNumber = 261126006;
  const ::ywrapper::StringValue& interface_id() const;
  ::ywrapper::StringValue* release_interface_id();
  ::ywrapper::StringValue* mutable_interface_id();
  void set_allocated_interface_id(::ywrapper::StringValue* interface_id);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* interface_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_ConfigImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Input_Classifers_Classifier_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Config) */ {
 public:
  Qos_Interfaces_Interface_Input_Classifers_Classifier_Config();
  virtual ~Qos_Interfaces_Interface_Input_Classifers_Classifier_Config();

  Qos_Interfaces_Interface_Input_Classifers_Classifier_Config(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Config& from);

  inline Qos_Interfaces_Interface_Input_Classifers_Classifier_Config& operator=(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Input_Classifers_Classifier_Config(Qos_Interfaces_Interface_Input_Classifers_Classifier_Config&& from) noexcept
    : Qos_Interfaces_Interface_Input_Classifers_Classifier_Config() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Input_Classifers_Classifier_Config& operator=(Qos_Interfaces_Interface_Input_Classifers_Classifier_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Input_Classifers_Classifier_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Input_Classifers_Classifier_Config* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Input_Classifers_Classifier_Config*>(
               &_Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    39;

  void Swap(Qos_Interfaces_Interface_Input_Classifers_Classifier_Config* other);
  friend void swap(Qos_Interfaces_Interface_Input_Classifers_Classifier_Config& a, Qos_Interfaces_Interface_Input_Classifers_Classifier_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Input_Classifers_Classifier_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Input_Classifers_Classifier_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Config& from);
  void MergeFrom(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Input_Classifers_Classifier_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type Type;
  static const Type TYPE_UNSET =
    Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type_TYPE_UNSET;
  static const Type TYPE_IPV4 =
    Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type_TYPE_IPV4;
  static const Type TYPE_IPV6 =
    Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type_TYPE_IPV6;
  static const Type TYPE_MPLS =
    Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type_TYPE_MPLS;
  static inline bool Type_IsValid(int value) {
    return Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type_Type_MIN;
  static const Type Type_MAX =
    Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue name = 147745567 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/config/name"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 147745567;
  const ::ywrapper::StringValue& name() const;
  ::ywrapper::StringValue* release_name();
  ::ywrapper::StringValue* mutable_name();
  void set_allocated_name(::ywrapper::StringValue* name);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Config.Type type = 527727482 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/config/type"];
  void clear_type();
  static const int kTypeFieldNumber = 527727482;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type type() const;
  void set_type(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type value);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* name_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_ConfigImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Input_Classifers_Classifier_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.State) */ {
 public:
  Qos_Interfaces_Interface_Input_Classifers_Classifier_State();
  virtual ~Qos_Interfaces_Interface_Input_Classifers_Classifier_State();

  Qos_Interfaces_Interface_Input_Classifers_Classifier_State(const Qos_Interfaces_Interface_Input_Classifers_Classifier_State& from);

  inline Qos_Interfaces_Interface_Input_Classifers_Classifier_State& operator=(const Qos_Interfaces_Interface_Input_Classifers_Classifier_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Input_Classifers_Classifier_State(Qos_Interfaces_Interface_Input_Classifers_Classifier_State&& from) noexcept
    : Qos_Interfaces_Interface_Input_Classifers_Classifier_State() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Input_Classifers_Classifier_State& operator=(Qos_Interfaces_Interface_Input_Classifers_Classifier_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Input_Classifers_Classifier_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Input_Classifers_Classifier_State* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Input_Classifers_Classifier_State*>(
               &_Qos_Interfaces_Interface_Input_Classifers_Classifier_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    40;

  void Swap(Qos_Interfaces_Interface_Input_Classifers_Classifier_State* other);
  friend void swap(Qos_Interfaces_Interface_Input_Classifers_Classifier_State& a, Qos_Interfaces_Interface_Input_Classifers_Classifier_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Input_Classifers_Classifier_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Input_Classifers_Classifier_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Input_Classifers_Classifier_State& from);
  void MergeFrom(const Qos_Interfaces_Interface_Input_Classifers_Classifier_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Input_Classifers_Classifier_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type Type;
  static const Type TYPE_UNSET =
    Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type_TYPE_UNSET;
  static const Type TYPE_IPV4 =
    Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type_TYPE_IPV4;
  static const Type TYPE_IPV6 =
    Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type_TYPE_IPV6;
  static const Type TYPE_MPLS =
    Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type_TYPE_MPLS;
  static inline bool Type_IsValid(int value) {
    return Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type_Type_MIN;
  static const Type Type_MAX =
    Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue name = 194613362 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/state/name"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 194613362;
  const ::ywrapper::StringValue& name() const;
  ::ywrapper::StringValue* release_name();
  ::ywrapper::StringValue* mutable_name();
  void set_allocated_name(::ywrapper::StringValue* name);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.State.Type type = 454489263 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/state/type"];
  void clear_type();
  static const int kTypeFieldNumber = 454489263;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type type() const;
  void set_type(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type value);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* name_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_StateImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.Config) */ {
 public:
  Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config();
  virtual ~Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config();

  Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config& from);

  inline Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config& operator=(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config(Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config&& from) noexcept
    : Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config& operator=(Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config*>(
               &_Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    41;

  void Swap(Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config* other);
  friend void swap(Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config& a, Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config& from);
  void MergeFrom(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue id = 326265552 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/config/id"];
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 326265552;
  const ::ywrapper::StringValue& id() const;
  ::ywrapper::StringValue* release_id();
  ::ywrapper::StringValue* mutable_id();
  void set_allocated_id(::ywrapper::StringValue* id);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* id_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_ConfigImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.State) */ {
 public:
  Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State();
  virtual ~Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State();

  Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State& from);

  inline Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State& operator=(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State(Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State&& from) noexcept
    : Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State& operator=(Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State*>(
               &_Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    42;

  void Swap(Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State* other);
  friend void swap(Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State& a, Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State& from);
  void MergeFrom(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue matched_octets = 188335353 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/state/matched-octets"];
  bool has_matched_octets() const;
  void clear_matched_octets();
  static const int kMatchedOctetsFieldNumber = 188335353;
  const ::ywrapper::UintValue& matched_octets() const;
  ::ywrapper::UintValue* release_matched_octets();
  ::ywrapper::UintValue* mutable_matched_octets();
  void set_allocated_matched_octets(::ywrapper::UintValue* matched_octets);

  // .ywrapper.StringValue id = 281042275 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/state/id"];
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 281042275;
  const ::ywrapper::StringValue& id() const;
  ::ywrapper::StringValue* release_id();
  ::ywrapper::StringValue* mutable_id();
  void set_allocated_id(::ywrapper::StringValue* id);

  // .ywrapper.UintValue matched_packets = 437259876 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/state/matched-packets"];
  bool has_matched_packets() const;
  void clear_matched_packets();
  static const int kMatchedPacketsFieldNumber = 437259876;
  const ::ywrapper::UintValue& matched_packets() const;
  ::ywrapper::UintValue* release_matched_packets();
  ::ywrapper::UintValue* mutable_matched_packets();
  void set_allocated_matched_packets(::ywrapper::UintValue* matched_packets);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* matched_octets_;
  ::ywrapper::StringValue* id_;
  ::ywrapper::UintValue* matched_packets_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_StateImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term) */ {
 public:
  Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term();
  virtual ~Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term();

  Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term& from);

  inline Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term& operator=(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term(Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term&& from) noexcept
    : Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term& operator=(Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term*>(
               &_Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    43;

  void Swap(Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term* other);
  friend void swap(Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term& a, Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term& from);
  void MergeFrom(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config Config;
  typedef Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.Config config = 435774088 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 435774088;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config& config() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config* release_config();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config* config);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.State state = 529706017 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 529706017;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State& state() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State* release_state();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State* state);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config* config_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State* state_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey) */ {
 public:
  Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey();
  virtual ~Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey();

  Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey& from);

  inline Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey& operator=(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey(Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey&& from) noexcept
    : Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey& operator=(Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey*>(
               &_Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    44;

  void Swap(Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey* other);
  friend void swap(Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey& a, Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey& from);
  void MergeFrom(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/id"];
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term term = 2;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 2;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term& term() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term* release_term();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term* mutable_term();
  void set_allocated_term(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term* term);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term* term_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKeyImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms) */ {
 public:
  Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms();
  virtual ~Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms();

  Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms& from);

  inline Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms& operator=(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms(Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms&& from) noexcept
    : Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms& operator=(Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms*>(
               &_Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    45;

  void Swap(Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms* other);
  friend void swap(Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms& a, Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms& from);
  void MergeFrom(const Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term Term;
  typedef Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey TermKey;

  // accessors -------------------------------------------------------

  // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey term = 256315543 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term"];
  int term_size() const;
  void clear_term();
  static const int kTermFieldNumber = 256315543;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey& term(int index) const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey* mutable_term(int index);
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey* add_term();
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey >*
      mutable_term();
  const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey >&
      term() const;

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey > term_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Classifers_Classifier_TermsImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Input_Classifers_Classifier : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier) */ {
 public:
  Qos_Interfaces_Interface_Input_Classifers_Classifier();
  virtual ~Qos_Interfaces_Interface_Input_Classifers_Classifier();

  Qos_Interfaces_Interface_Input_Classifers_Classifier(const Qos_Interfaces_Interface_Input_Classifers_Classifier& from);

  inline Qos_Interfaces_Interface_Input_Classifers_Classifier& operator=(const Qos_Interfaces_Interface_Input_Classifers_Classifier& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Input_Classifers_Classifier(Qos_Interfaces_Interface_Input_Classifers_Classifier&& from) noexcept
    : Qos_Interfaces_Interface_Input_Classifers_Classifier() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Input_Classifers_Classifier& operator=(Qos_Interfaces_Interface_Input_Classifers_Classifier&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Input_Classifers_Classifier& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Input_Classifers_Classifier* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Input_Classifers_Classifier*>(
               &_Qos_Interfaces_Interface_Input_Classifers_Classifier_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    46;

  void Swap(Qos_Interfaces_Interface_Input_Classifers_Classifier* other);
  friend void swap(Qos_Interfaces_Interface_Input_Classifers_Classifier& a, Qos_Interfaces_Interface_Input_Classifers_Classifier& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Input_Classifers_Classifier* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Input_Classifers_Classifier* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Input_Classifers_Classifier& from);
  void MergeFrom(const Qos_Interfaces_Interface_Input_Classifers_Classifier& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Input_Classifers_Classifier* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Interfaces_Interface_Input_Classifers_Classifier_Config Config;
  typedef Qos_Interfaces_Interface_Input_Classifers_Classifier_State State;
  typedef Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms Terms;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms terms = 21096446 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms"];
  bool has_terms() const;
  void clear_terms();
  static const int kTermsFieldNumber = 21096446;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms& terms() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms* release_terms();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms* mutable_terms();
  void set_allocated_terms(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms* terms);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.State state = 262213192 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 262213192;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_State& state() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_State* release_state();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_State* state);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Config config = 359276951 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 359276951;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Config& config() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Config* release_config();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Config* config);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms* terms_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_State* state_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Config* config_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Classifers_ClassifierImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Input_Classifers_ClassifierKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.ClassifierKey) */ {
 public:
  Qos_Interfaces_Interface_Input_Classifers_ClassifierKey();
  virtual ~Qos_Interfaces_Interface_Input_Classifers_ClassifierKey();

  Qos_Interfaces_Interface_Input_Classifers_ClassifierKey(const Qos_Interfaces_Interface_Input_Classifers_ClassifierKey& from);

  inline Qos_Interfaces_Interface_Input_Classifers_ClassifierKey& operator=(const Qos_Interfaces_Interface_Input_Classifers_ClassifierKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Input_Classifers_ClassifierKey(Qos_Interfaces_Interface_Input_Classifers_ClassifierKey&& from) noexcept
    : Qos_Interfaces_Interface_Input_Classifers_ClassifierKey() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Input_Classifers_ClassifierKey& operator=(Qos_Interfaces_Interface_Input_Classifers_ClassifierKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Input_Classifers_ClassifierKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Input_Classifers_ClassifierKey* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Input_Classifers_ClassifierKey*>(
               &_Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    47;

  void Swap(Qos_Interfaces_Interface_Input_Classifers_ClassifierKey* other);
  friend void swap(Qos_Interfaces_Interface_Input_Classifers_ClassifierKey& a, Qos_Interfaces_Interface_Input_Classifers_ClassifierKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Input_Classifers_ClassifierKey* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Input_Classifers_ClassifierKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Input_Classifers_ClassifierKey& from);
  void MergeFrom(const Qos_Interfaces_Interface_Input_Classifers_ClassifierKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Input_Classifers_ClassifierKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type Type;
  static const Type TYPE_UNSET =
    Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type_TYPE_UNSET;
  static const Type TYPE_IPV4 =
    Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type_TYPE_IPV4;
  static const Type TYPE_IPV6 =
    Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type_TYPE_IPV6;
  static const Type TYPE_MPLS =
    Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type_TYPE_MPLS;
  static inline bool Type_IsValid(int value) {
    return Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type_Type_MIN;
  static const Type Type_MAX =
    Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier classifier = 2;
  bool has_classifier() const;
  void clear_classifier();
  static const int kClassifierFieldNumber = 2;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier& classifier() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier* release_classifier();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier* mutable_classifier();
  void set_allocated_classifier(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier* classifier);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.ClassifierKey.Type type = 1 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/type"];
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type type() const;
  void set_type(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type value);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.ClassifierKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier* classifier_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Classifers_ClassifierKeyImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Input_Classifers : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers) */ {
 public:
  Qos_Interfaces_Interface_Input_Classifers();
  virtual ~Qos_Interfaces_Interface_Input_Classifers();

  Qos_Interfaces_Interface_Input_Classifers(const Qos_Interfaces_Interface_Input_Classifers& from);

  inline Qos_Interfaces_Interface_Input_Classifers& operator=(const Qos_Interfaces_Interface_Input_Classifers& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Input_Classifers(Qos_Interfaces_Interface_Input_Classifers&& from) noexcept
    : Qos_Interfaces_Interface_Input_Classifers() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Input_Classifers& operator=(Qos_Interfaces_Interface_Input_Classifers&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Input_Classifers& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Input_Classifers* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Input_Classifers*>(
               &_Qos_Interfaces_Interface_Input_Classifers_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    48;

  void Swap(Qos_Interfaces_Interface_Input_Classifers* other);
  friend void swap(Qos_Interfaces_Interface_Input_Classifers& a, Qos_Interfaces_Interface_Input_Classifers& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Input_Classifers* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Input_Classifers* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Input_Classifers& from);
  void MergeFrom(const Qos_Interfaces_Interface_Input_Classifers& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Input_Classifers* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Interfaces_Interface_Input_Classifers_Classifier Classifier;
  typedef Qos_Interfaces_Interface_Input_Classifers_ClassifierKey ClassifierKey;

  // accessors -------------------------------------------------------

  // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.ClassifierKey classifier = 140629686 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier"];
  int classifier_size() const;
  void clear_classifier();
  static const int kClassifierFieldNumber = 140629686;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_ClassifierKey& classifier(int index) const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_ClassifierKey* mutable_classifier(int index);
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_ClassifierKey* add_classifier();
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_ClassifierKey >*
      mutable_classifier();
  const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_ClassifierKey >&
      classifier() const;

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_ClassifierKey > classifier_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_ClassifersImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Input_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Config) */ {
 public:
  Qos_Interfaces_Interface_Input_Config();
  virtual ~Qos_Interfaces_Interface_Input_Config();

  Qos_Interfaces_Interface_Input_Config(const Qos_Interfaces_Interface_Input_Config& from);

  inline Qos_Interfaces_Interface_Input_Config& operator=(const Qos_Interfaces_Interface_Input_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Input_Config(Qos_Interfaces_Interface_Input_Config&& from) noexcept
    : Qos_Interfaces_Interface_Input_Config() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Input_Config& operator=(Qos_Interfaces_Interface_Input_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Input_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Input_Config* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Input_Config*>(
               &_Qos_Interfaces_Interface_Input_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    49;

  void Swap(Qos_Interfaces_Interface_Input_Config* other);
  friend void swap(Qos_Interfaces_Interface_Input_Config& a, Qos_Interfaces_Interface_Input_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Input_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Input_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Input_Config& from);
  void MergeFrom(const Qos_Interfaces_Interface_Input_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Input_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_ConfigImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Input_Queues_Queue_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.Config) */ {
 public:
  Qos_Interfaces_Interface_Input_Queues_Queue_Config();
  virtual ~Qos_Interfaces_Interface_Input_Queues_Queue_Config();

  Qos_Interfaces_Interface_Input_Queues_Queue_Config(const Qos_Interfaces_Interface_Input_Queues_Queue_Config& from);

  inline Qos_Interfaces_Interface_Input_Queues_Queue_Config& operator=(const Qos_Interfaces_Interface_Input_Queues_Queue_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Input_Queues_Queue_Config(Qos_Interfaces_Interface_Input_Queues_Queue_Config&& from) noexcept
    : Qos_Interfaces_Interface_Input_Queues_Queue_Config() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Input_Queues_Queue_Config& operator=(Qos_Interfaces_Interface_Input_Queues_Queue_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Input_Queues_Queue_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Input_Queues_Queue_Config* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Input_Queues_Queue_Config*>(
               &_Qos_Interfaces_Interface_Input_Queues_Queue_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    50;

  void Swap(Qos_Interfaces_Interface_Input_Queues_Queue_Config* other);
  friend void swap(Qos_Interfaces_Interface_Input_Queues_Queue_Config& a, Qos_Interfaces_Interface_Input_Queues_Queue_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Input_Queues_Queue_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Input_Queues_Queue_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Input_Queues_Queue_Config& from);
  void MergeFrom(const Qos_Interfaces_Interface_Input_Queues_Queue_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Input_Queues_Queue_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue name = 441396008 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/config/name"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 441396008;
  const ::ywrapper::StringValue& name() const;
  ::ywrapper::StringValue* release_name();
  ::ywrapper::StringValue* mutable_name();
  void set_allocated_name(::ywrapper::StringValue* name);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* name_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Queues_Queue_ConfigImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Input_Queues_Queue_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State) */ {
 public:
  Qos_Interfaces_Interface_Input_Queues_Queue_State();
  virtual ~Qos_Interfaces_Interface_Input_Queues_Queue_State();

  Qos_Interfaces_Interface_Input_Queues_Queue_State(const Qos_Interfaces_Interface_Input_Queues_Queue_State& from);

  inline Qos_Interfaces_Interface_Input_Queues_Queue_State& operator=(const Qos_Interfaces_Interface_Input_Queues_Queue_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Input_Queues_Queue_State(Qos_Interfaces_Interface_Input_Queues_Queue_State&& from) noexcept
    : Qos_Interfaces_Interface_Input_Queues_Queue_State() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Input_Queues_Queue_State& operator=(Qos_Interfaces_Interface_Input_Queues_Queue_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Input_Queues_Queue_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Input_Queues_Queue_State* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Input_Queues_Queue_State*>(
               &_Qos_Interfaces_Interface_Input_Queues_Queue_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    51;

  void Swap(Qos_Interfaces_Interface_Input_Queues_Queue_State* other);
  friend void swap(Qos_Interfaces_Interface_Input_Queues_Queue_State& a, Qos_Interfaces_Interface_Input_Queues_Queue_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Input_Queues_Queue_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Input_Queues_Queue_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Input_Queues_Queue_State& from);
  void MergeFrom(const Qos_Interfaces_Interface_Input_Queues_Queue_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Input_Queues_Queue_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue name = 147116895 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state/name"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 147116895;
  const ::ywrapper::StringValue& name() const;
  ::ywrapper::StringValue* release_name();
  ::ywrapper::StringValue* mutable_name();
  void set_allocated_name(::ywrapper::StringValue* name);

  // .ywrapper.UintValue transmit_octets = 237910979 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state/transmit-octets"];
  bool has_transmit_octets() const;
  void clear_transmit_octets();
  static const int kTransmitOctetsFieldNumber = 237910979;
  const ::ywrapper::UintValue& transmit_octets() const;
  ::ywrapper::UintValue* release_transmit_octets();
  ::ywrapper::UintValue* mutable_transmit_octets();
  void set_allocated_transmit_octets(::ywrapper::UintValue* transmit_octets);

  // .ywrapper.UintValue avg_queue_len = 357067202 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state/avg-queue-len"];
  bool has_avg_queue_len() const;
  void clear_avg_queue_len();
  static const int kAvgQueueLenFieldNumber = 357067202;
  const ::ywrapper::UintValue& avg_queue_len() const;
  ::ywrapper::UintValue* release_avg_queue_len();
  ::ywrapper::UintValue* mutable_avg_queue_len();
  void set_allocated_avg_queue_len(::ywrapper::UintValue* avg_queue_len);

  // .ywrapper.UintValue transmit_pkts = 368710075 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state/transmit-pkts"];
  bool has_transmit_pkts() const;
  void clear_transmit_pkts();
  static const int kTransmitPktsFieldNumber = 368710075;
  const ::ywrapper::UintValue& transmit_pkts() const;
  ::ywrapper::UintValue* release_transmit_pkts();
  ::ywrapper::UintValue* mutable_transmit_pkts();
  void set_allocated_transmit_pkts(::ywrapper::UintValue* transmit_pkts);

  // .ywrapper.UintValue dropped_pkts = 530366041 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state/dropped-pkts"];
  bool has_dropped_pkts() const;
  void clear_dropped_pkts();
  static const int kDroppedPktsFieldNumber = 530366041;
  const ::ywrapper::UintValue& dropped_pkts() const;
  ::ywrapper::UintValue* release_dropped_pkts();
  ::ywrapper::UintValue* mutable_dropped_pkts();
  void set_allocated_dropped_pkts(::ywrapper::UintValue* dropped_pkts);

  // .ywrapper.UintValue max_queue_len = 535584496 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state/max-queue-len"];
  bool has_max_queue_len() const;
  void clear_max_queue_len();
  static const int kMaxQueueLenFieldNumber = 535584496;
  const ::ywrapper::UintValue& max_queue_len() const;
  ::ywrapper::UintValue* release_max_queue_len();
  ::ywrapper::UintValue* mutable_max_queue_len();
  void set_allocated_max_queue_len(::ywrapper::UintValue* max_queue_len);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* name_;
  ::ywrapper::UintValue* transmit_octets_;
  ::ywrapper::UintValue* avg_queue_len_;
  ::ywrapper::UintValue* transmit_pkts_;
  ::ywrapper::UintValue* dropped_pkts_;
  ::ywrapper::UintValue* max_queue_len_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Queues_Queue_StateImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Input_Queues_Queue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue) */ {
 public:
  Qos_Interfaces_Interface_Input_Queues_Queue();
  virtual ~Qos_Interfaces_Interface_Input_Queues_Queue();

  Qos_Interfaces_Interface_Input_Queues_Queue(const Qos_Interfaces_Interface_Input_Queues_Queue& from);

  inline Qos_Interfaces_Interface_Input_Queues_Queue& operator=(const Qos_Interfaces_Interface_Input_Queues_Queue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Input_Queues_Queue(Qos_Interfaces_Interface_Input_Queues_Queue&& from) noexcept
    : Qos_Interfaces_Interface_Input_Queues_Queue() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Input_Queues_Queue& operator=(Qos_Interfaces_Interface_Input_Queues_Queue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Input_Queues_Queue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Input_Queues_Queue* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Input_Queues_Queue*>(
               &_Qos_Interfaces_Interface_Input_Queues_Queue_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    52;

  void Swap(Qos_Interfaces_Interface_Input_Queues_Queue* other);
  friend void swap(Qos_Interfaces_Interface_Input_Queues_Queue& a, Qos_Interfaces_Interface_Input_Queues_Queue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Input_Queues_Queue* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Input_Queues_Queue* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Input_Queues_Queue& from);
  void MergeFrom(const Qos_Interfaces_Interface_Input_Queues_Queue& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Input_Queues_Queue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Interfaces_Interface_Input_Queues_Queue_Config Config;
  typedef Qos_Interfaces_Interface_Input_Queues_Queue_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State state = 189832279 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 189832279;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_State& state() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_State* release_state();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_State* state);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.Config config = 503523130 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 503523130;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_Config& config() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_Config* release_config();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_Config* config);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_State* state_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_Config* config_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Queues_QueueImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Input_Queues_QueueKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey) */ {
 public:
  Qos_Interfaces_Interface_Input_Queues_QueueKey();
  virtual ~Qos_Interfaces_Interface_Input_Queues_QueueKey();

  Qos_Interfaces_Interface_Input_Queues_QueueKey(const Qos_Interfaces_Interface_Input_Queues_QueueKey& from);

  inline Qos_Interfaces_Interface_Input_Queues_QueueKey& operator=(const Qos_Interfaces_Interface_Input_Queues_QueueKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Input_Queues_QueueKey(Qos_Interfaces_Interface_Input_Queues_QueueKey&& from) noexcept
    : Qos_Interfaces_Interface_Input_Queues_QueueKey() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Input_Queues_QueueKey& operator=(Qos_Interfaces_Interface_Input_Queues_QueueKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Input_Queues_QueueKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Input_Queues_QueueKey* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Input_Queues_QueueKey*>(
               &_Qos_Interfaces_Interface_Input_Queues_QueueKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    53;

  void Swap(Qos_Interfaces_Interface_Input_Queues_QueueKey* other);
  friend void swap(Qos_Interfaces_Interface_Input_Queues_QueueKey& a, Qos_Interfaces_Interface_Input_Queues_QueueKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Input_Queues_QueueKey* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Input_Queues_QueueKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Input_Queues_QueueKey& from);
  void MergeFrom(const Qos_Interfaces_Interface_Input_Queues_QueueKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Input_Queues_QueueKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/name"];
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue queue = 2;
  bool has_queue() const;
  void clear_queue();
  static const int kQueueFieldNumber = 2;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue& queue() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue* release_queue();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue* mutable_queue();
  void set_allocated_queue(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue* queue);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue* queue_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_Queues_QueueKeyImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Input_Queues : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues) */ {
 public:
  Qos_Interfaces_Interface_Input_Queues();
  virtual ~Qos_Interfaces_Interface_Input_Queues();

  Qos_Interfaces_Interface_Input_Queues(const Qos_Interfaces_Interface_Input_Queues& from);

  inline Qos_Interfaces_Interface_Input_Queues& operator=(const Qos_Interfaces_Interface_Input_Queues& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Input_Queues(Qos_Interfaces_Interface_Input_Queues&& from) noexcept
    : Qos_Interfaces_Interface_Input_Queues() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Input_Queues& operator=(Qos_Interfaces_Interface_Input_Queues&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Input_Queues& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Input_Queues* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Input_Queues*>(
               &_Qos_Interfaces_Interface_Input_Queues_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    54;

  void Swap(Qos_Interfaces_Interface_Input_Queues* other);
  friend void swap(Qos_Interfaces_Interface_Input_Queues& a, Qos_Interfaces_Interface_Input_Queues& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Input_Queues* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Input_Queues* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Input_Queues& from);
  void MergeFrom(const Qos_Interfaces_Interface_Input_Queues& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Input_Queues* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Interfaces_Interface_Input_Queues_Queue Queue;
  typedef Qos_Interfaces_Interface_Input_Queues_QueueKey QueueKey;

  // accessors -------------------------------------------------------

  // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey queue = 103221525 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue"];
  int queue_size() const;
  void clear_queue();
  static const int kQueueFieldNumber = 103221525;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_QueueKey& queue(int index) const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_QueueKey* mutable_queue(int index);
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_QueueKey* add_queue();
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_QueueKey >*
      mutable_queue();
  const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_QueueKey >&
      queue() const;

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_QueueKey > queue_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_QueuesImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Input_SchedulerPolicy_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Config) */ {
 public:
  Qos_Interfaces_Interface_Input_SchedulerPolicy_Config();
  virtual ~Qos_Interfaces_Interface_Input_SchedulerPolicy_Config();

  Qos_Interfaces_Interface_Input_SchedulerPolicy_Config(const Qos_Interfaces_Interface_Input_SchedulerPolicy_Config& from);

  inline Qos_Interfaces_Interface_Input_SchedulerPolicy_Config& operator=(const Qos_Interfaces_Interface_Input_SchedulerPolicy_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Input_SchedulerPolicy_Config(Qos_Interfaces_Interface_Input_SchedulerPolicy_Config&& from) noexcept
    : Qos_Interfaces_Interface_Input_SchedulerPolicy_Config() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Input_SchedulerPolicy_Config& operator=(Qos_Interfaces_Interface_Input_SchedulerPolicy_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Input_SchedulerPolicy_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Input_SchedulerPolicy_Config* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Input_SchedulerPolicy_Config*>(
               &_Qos_Interfaces_Interface_Input_SchedulerPolicy_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    55;

  void Swap(Qos_Interfaces_Interface_Input_SchedulerPolicy_Config* other);
  friend void swap(Qos_Interfaces_Interface_Input_SchedulerPolicy_Config& a, Qos_Interfaces_Interface_Input_SchedulerPolicy_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Input_SchedulerPolicy_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Input_SchedulerPolicy_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Input_SchedulerPolicy_Config& from);
  void MergeFrom(const Qos_Interfaces_Interface_Input_SchedulerPolicy_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Input_SchedulerPolicy_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue name = 5527674 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/config/name"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 5527674;
  const ::ywrapper::StringValue& name() const;
  ::ywrapper::StringValue* release_name();
  ::ywrapper::StringValue* mutable_name();
  void set_allocated_name(::ywrapper::StringValue* name);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* name_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_ConfigImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State) */ {
 public:
  Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State();
  virtual ~Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State();

  Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State(const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State& from);

  inline Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State& operator=(const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State(Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State&& from) noexcept
    : Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State& operator=(Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State*>(
               &_Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    56;

  void Swap(Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State* other);
  friend void swap(Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State& a, Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State& from);
  void MergeFrom(const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue exceeding_octets = 22590706 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/exceeding-octets"];
  bool has_exceeding_octets() const;
  void clear_exceeding_octets();
  static const int kExceedingOctetsFieldNumber = 22590706;
  const ::ywrapper::UintValue& exceeding_octets() const;
  ::ywrapper::UintValue* release_exceeding_octets();
  ::ywrapper::UintValue* mutable_exceeding_octets();
  void set_allocated_exceeding_octets(::ywrapper::UintValue* exceeding_octets);

  // .ywrapper.UintValue exceeding_pkts = 80265874 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/exceeding-pkts"];
  bool has_exceeding_pkts() const;
  void clear_exceeding_pkts();
  static const int kExceedingPktsFieldNumber = 80265874;
  const ::ywrapper::UintValue& exceeding_pkts() const;
  ::ywrapper::UintValue* release_exceeding_pkts();
  ::ywrapper::UintValue* mutable_exceeding_pkts();
  void set_allocated_exceeding_pkts(::ywrapper::UintValue* exceeding_pkts);

  // .ywrapper.UintValue violating_pkts = 174860491 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/violating-pkts"];
  bool has_violating_pkts() const;
  void clear_violating_pkts();
  static const int kViolatingPktsFieldNumber = 174860491;
  const ::ywrapper::UintValue& violating_pkts() const;
  ::ywrapper::UintValue* release_violating_pkts();
  ::ywrapper::UintValue* mutable_violating_pkts();
  void set_allocated_violating_pkts(::ywrapper::UintValue* violating_pkts);

  // .ywrapper.UintValue conforming_octets = 204398478 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/conforming-octets"];
  bool has_conforming_octets() const;
  void clear_conforming_octets();
  static const int kConformingOctetsFieldNumber = 204398478;
  const ::ywrapper::UintValue& conforming_octets() const;
  ::ywrapper::UintValue* release_conforming_octets();
  ::ywrapper::UintValue* mutable_conforming_octets();
  void set_allocated_conforming_octets(::ywrapper::UintValue* conforming_octets);

  // .ywrapper.UintValue conforming_pkts = 395467958 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/conforming-pkts"];
  bool has_conforming_pkts() const;
  void clear_conforming_pkts();
  static const int kConformingPktsFieldNumber = 395467958;
  const ::ywrapper::UintValue& conforming_pkts() const;
  ::ywrapper::UintValue* release_conforming_pkts();
  ::ywrapper::UintValue* mutable_conforming_pkts();
  void set_allocated_conforming_pkts(::ywrapper::UintValue* conforming_pkts);

  // .ywrapper.UintValue violating_octets = 419767763 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/violating-octets"];
  bool has_violating_octets() const;
  void clear_violating_octets();
  static const int kViolatingOctetsFieldNumber = 419767763;
  const ::ywrapper::UintValue& violating_octets() const;
  ::ywrapper::UintValue* release_violating_octets();
  ::ywrapper::UintValue* mutable_violating_octets();
  void set_allocated_violating_octets(::ywrapper::UintValue* violating_octets);

  // .ywrapper.UintValue sequence = 466083128 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/sequence"];
  bool has_sequence() const;
  void clear_sequence();
  static const int kSequenceFieldNumber = 466083128;
  const ::ywrapper::UintValue& sequence() const;
  ::ywrapper::UintValue* release_sequence();
  ::ywrapper::UintValue* mutable_sequence();
  void set_allocated_sequence(::ywrapper::UintValue* sequence);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* exceeding_octets_;
  ::ywrapper::UintValue* exceeding_pkts_;
  ::ywrapper::UintValue* violating_pkts_;
  ::ywrapper::UintValue* conforming_octets_;
  ::ywrapper::UintValue* conforming_pkts_;
  ::ywrapper::UintValue* violating_octets_;
  ::ywrapper::UintValue* sequence_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_StateImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler) */ {
 public:
  Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler();
  virtual ~Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler();

  Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler(const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler& from);

  inline Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler& operator=(const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler(Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler&& from) noexcept
    : Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler& operator=(Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler*>(
               &_Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    57;

  void Swap(Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler* other);
  friend void swap(Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler& a, Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler& from);
  void MergeFrom(const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State state = 395252664 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 395252664;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State& state() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State* release_state();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State* state);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State* state_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.SchedulerKey) */ {
 public:
  Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey();
  virtual ~Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey();

  Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey(const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey& from);

  inline Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey& operator=(const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey(Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey&& from) noexcept
    : Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey& operator=(Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey*>(
               &_Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    58;

  void Swap(Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey* other);
  friend void swap(Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey& a, Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey& from);
  void MergeFrom(const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler scheduler = 2;
  bool has_scheduler() const;
  void clear_scheduler();
  static const int kSchedulerFieldNumber = 2;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler& scheduler() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler* release_scheduler();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler* mutable_scheduler();
  void set_allocated_scheduler(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler* scheduler);

  // uint64 sequence = 1 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/sequence"];
  void clear_sequence();
  static const int kSequenceFieldNumber = 1;
  ::google::protobuf::uint64 sequence() const;
  void set_sequence(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.SchedulerKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler* scheduler_;
  ::google::protobuf::uint64 sequence_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKeyImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers) */ {
 public:
  Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers();
  virtual ~Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers();

  Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers(const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers& from);

  inline Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers& operator=(const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers(Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers&& from) noexcept
    : Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers& operator=(Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers*>(
               &_Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    59;

  void Swap(Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers* other);
  friend void swap(Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers& a, Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers& from);
  void MergeFrom(const Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler Scheduler;
  typedef Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey SchedulerKey;

  // accessors -------------------------------------------------------

  // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.SchedulerKey scheduler = 306639558 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler"];
  int scheduler_size() const;
  void clear_scheduler();
  static const int kSchedulerFieldNumber = 306639558;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey& scheduler(int index) const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey* mutable_scheduler(int index);
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey* add_scheduler();
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey >*
      mutable_scheduler();
  const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey >&
      scheduler() const;

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey > scheduler_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_SchedulersImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Input_SchedulerPolicy_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.State) */ {
 public:
  Qos_Interfaces_Interface_Input_SchedulerPolicy_State();
  virtual ~Qos_Interfaces_Interface_Input_SchedulerPolicy_State();

  Qos_Interfaces_Interface_Input_SchedulerPolicy_State(const Qos_Interfaces_Interface_Input_SchedulerPolicy_State& from);

  inline Qos_Interfaces_Interface_Input_SchedulerPolicy_State& operator=(const Qos_Interfaces_Interface_Input_SchedulerPolicy_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Input_SchedulerPolicy_State(Qos_Interfaces_Interface_Input_SchedulerPolicy_State&& from) noexcept
    : Qos_Interfaces_Interface_Input_SchedulerPolicy_State() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Input_SchedulerPolicy_State& operator=(Qos_Interfaces_Interface_Input_SchedulerPolicy_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Input_SchedulerPolicy_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Input_SchedulerPolicy_State* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Input_SchedulerPolicy_State*>(
               &_Qos_Interfaces_Interface_Input_SchedulerPolicy_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    60;

  void Swap(Qos_Interfaces_Interface_Input_SchedulerPolicy_State* other);
  friend void swap(Qos_Interfaces_Interface_Input_SchedulerPolicy_State& a, Qos_Interfaces_Interface_Input_SchedulerPolicy_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Input_SchedulerPolicy_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Input_SchedulerPolicy_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Input_SchedulerPolicy_State& from);
  void MergeFrom(const Qos_Interfaces_Interface_Input_SchedulerPolicy_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Input_SchedulerPolicy_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue name = 120647037 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/state/name"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 120647037;
  const ::ywrapper::StringValue& name() const;
  ::ywrapper::StringValue* release_name();
  ::ywrapper::StringValue* mutable_name();
  void set_allocated_name(::ywrapper::StringValue* name);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* name_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicy_StateImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Input_SchedulerPolicy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy) */ {
 public:
  Qos_Interfaces_Interface_Input_SchedulerPolicy();
  virtual ~Qos_Interfaces_Interface_Input_SchedulerPolicy();

  Qos_Interfaces_Interface_Input_SchedulerPolicy(const Qos_Interfaces_Interface_Input_SchedulerPolicy& from);

  inline Qos_Interfaces_Interface_Input_SchedulerPolicy& operator=(const Qos_Interfaces_Interface_Input_SchedulerPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Input_SchedulerPolicy(Qos_Interfaces_Interface_Input_SchedulerPolicy&& from) noexcept
    : Qos_Interfaces_Interface_Input_SchedulerPolicy() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Input_SchedulerPolicy& operator=(Qos_Interfaces_Interface_Input_SchedulerPolicy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Input_SchedulerPolicy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Input_SchedulerPolicy* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Input_SchedulerPolicy*>(
               &_Qos_Interfaces_Interface_Input_SchedulerPolicy_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    61;

  void Swap(Qos_Interfaces_Interface_Input_SchedulerPolicy* other);
  friend void swap(Qos_Interfaces_Interface_Input_SchedulerPolicy& a, Qos_Interfaces_Interface_Input_SchedulerPolicy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Input_SchedulerPolicy* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Input_SchedulerPolicy* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Input_SchedulerPolicy& from);
  void MergeFrom(const Qos_Interfaces_Interface_Input_SchedulerPolicy& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Input_SchedulerPolicy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Interfaces_Interface_Input_SchedulerPolicy_Config Config;
  typedef Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers Schedulers;
  typedef Qos_Interfaces_Interface_Input_SchedulerPolicy_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers schedulers = 242022128 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers"];
  bool has_schedulers() const;
  void clear_schedulers();
  static const int kSchedulersFieldNumber = 242022128;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers& schedulers() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers* release_schedulers();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers* mutable_schedulers();
  void set_allocated_schedulers(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers* schedulers);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.State state = 403641417 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 403641417;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_State& state() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_State* release_state();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_State* state);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Config config = 506789456 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 506789456;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Config& config() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Config* release_config();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Config* config);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers* schedulers_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_State* state_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Config* config_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_SchedulerPolicyImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Input_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.State) */ {
 public:
  Qos_Interfaces_Interface_Input_State();
  virtual ~Qos_Interfaces_Interface_Input_State();

  Qos_Interfaces_Interface_Input_State(const Qos_Interfaces_Interface_Input_State& from);

  inline Qos_Interfaces_Interface_Input_State& operator=(const Qos_Interfaces_Interface_Input_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Input_State(Qos_Interfaces_Interface_Input_State&& from) noexcept
    : Qos_Interfaces_Interface_Input_State() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Input_State& operator=(Qos_Interfaces_Interface_Input_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Input_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Input_State* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Input_State*>(
               &_Qos_Interfaces_Interface_Input_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    62;

  void Swap(Qos_Interfaces_Interface_Input_State* other);
  friend void swap(Qos_Interfaces_Interface_Input_State& a, Qos_Interfaces_Interface_Input_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Input_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Input_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Input_State& from);
  void MergeFrom(const Qos_Interfaces_Interface_Input_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Input_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_StateImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Config) */ {
 public:
  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config();
  virtual ~Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config();

  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config& from);

  inline Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config& operator=(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config&& from) noexcept
    : Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config& operator=(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config*>(
               &_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    63;

  void Swap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config* other);
  friend void swap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config& a, Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config& from);
  void MergeFrom(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue name = 76520861 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/config/name"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 76520861;
  const ::ywrapper::StringValue& name() const;
  ::ywrapper::StringValue* release_name();
  ::ywrapper::StringValue* mutable_name();
  void set_allocated_name(::ywrapper::StringValue* name);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* name_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_ConfigImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.Config) */ {
 public:
  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config();
  virtual ~Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config();

  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config& from);

  inline Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config& operator=(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config&& from) noexcept
    : Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config& operator=(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config*>(
               &_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    64;

  void Swap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config* other);
  friend void swap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config& a, Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config& from);
  void MergeFrom(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue name = 410648534 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/config/name"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 410648534;
  const ::ywrapper::StringValue& name() const;
  ::ywrapper::StringValue* release_name();
  ::ywrapper::StringValue* mutable_name();
  void set_allocated_name(::ywrapper::StringValue* name);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* name_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_ConfigImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State) */ {
 public:
  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State();
  virtual ~Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State();

  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State& from);

  inline Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State& operator=(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State&& from) noexcept
    : Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State& operator=(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State*>(
               &_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    65;

  void Swap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State* other);
  friend void swap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State& a, Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State& from);
  void MergeFrom(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue transmit_octets = 19609109 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/transmit-octets"];
  bool has_transmit_octets() const;
  void clear_transmit_octets();
  static const int kTransmitOctetsFieldNumber = 19609109;
  const ::ywrapper::UintValue& transmit_octets() const;
  ::ywrapper::UintValue* release_transmit_octets();
  ::ywrapper::UintValue* mutable_transmit_octets();
  void set_allocated_transmit_octets(::ywrapper::UintValue* transmit_octets);

  // .ywrapper.UintValue transmit_pkts = 265927841 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/transmit-pkts"];
  bool has_transmit_pkts() const;
  void clear_transmit_pkts();
  static const int kTransmitPktsFieldNumber = 265927841;
  const ::ywrapper::UintValue& transmit_pkts() const;
  ::ywrapper::UintValue* release_transmit_pkts();
  ::ywrapper::UintValue* mutable_transmit_pkts();
  void set_allocated_transmit_pkts(::ywrapper::UintValue* transmit_pkts);

  // .ywrapper.UintValue dropped_pkts = 300610831 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/dropped-pkts"];
  bool has_dropped_pkts() const;
  void clear_dropped_pkts();
  static const int kDroppedPktsFieldNumber = 300610831;
  const ::ywrapper::UintValue& dropped_pkts() const;
  ::ywrapper::UintValue* release_dropped_pkts();
  ::ywrapper::UintValue* mutable_dropped_pkts();
  void set_allocated_dropped_pkts(::ywrapper::UintValue* dropped_pkts);

  // .ywrapper.UintValue avg_queue_len = 370597120 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/avg-queue-len"];
  bool has_avg_queue_len() const;
  void clear_avg_queue_len();
  static const int kAvgQueueLenFieldNumber = 370597120;
  const ::ywrapper::UintValue& avg_queue_len() const;
  ::ywrapper::UintValue* release_avg_queue_len();
  ::ywrapper::UintValue* mutable_avg_queue_len();
  void set_allocated_avg_queue_len(::ywrapper::UintValue* avg_queue_len);

  // .ywrapper.StringValue name = 379083081 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/name"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 379083081;
  const ::ywrapper::StringValue& name() const;
  ::ywrapper::StringValue* release_name();
  ::ywrapper::StringValue* mutable_name();
  void set_allocated_name(::ywrapper::StringValue* name);

  // .ywrapper.UintValue max_queue_len = 489510182 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/max-queue-len"];
  bool has_max_queue_len() const;
  void clear_max_queue_len();
  static const int kMaxQueueLenFieldNumber = 489510182;
  const ::ywrapper::UintValue& max_queue_len() const;
  ::ywrapper::UintValue* release_max_queue_len();
  ::ywrapper::UintValue* mutable_max_queue_len();
  void set_allocated_max_queue_len(::ywrapper::UintValue* max_queue_len);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* transmit_octets_;
  ::ywrapper::UintValue* transmit_pkts_;
  ::ywrapper::UintValue* dropped_pkts_;
  ::ywrapper::UintValue* avg_queue_len_;
  ::ywrapper::StringValue* name_;
  ::ywrapper::UintValue* max_queue_len_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_StateImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue) */ {
 public:
  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue();
  virtual ~Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue();

  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue& from);

  inline Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue& operator=(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue&& from) noexcept
    : Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue& operator=(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue*>(
               &_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    66;

  void Swap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue* other);
  friend void swap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue& a, Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue& from);
  void MergeFrom(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config Config;
  typedef Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State state = 208271053 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 208271053;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State& state() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State* release_state();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State* state);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.Config config = 422405812 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 422405812;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config& config() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config* release_config();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config* config);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State* state_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config* config_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey) */ {
 public:
  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey();
  virtual ~Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey();

  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey& from);

  inline Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey& operator=(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey&& from) noexcept
    : Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey& operator=(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey*>(
               &_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    67;

  void Swap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey* other);
  friend void swap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey& a, Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey& from);
  void MergeFrom(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/name"];
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue queue = 2;
  bool has_queue() const;
  void clear_queue();
  static const int kQueueFieldNumber = 2;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue& queue() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue* release_queue();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue* mutable_queue();
  void set_allocated_queue(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue* queue);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue* queue_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKeyImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues) */ {
 public:
  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues();
  virtual ~Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues();

  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues& from);

  inline Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues& operator=(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues&& from) noexcept
    : Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues& operator=(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues*>(
               &_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    68;

  void Swap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues* other);
  friend void swap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues& a, Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues& from);
  void MergeFrom(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue Queue;
  typedef Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey QueueKey;

  // accessors -------------------------------------------------------

  // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey queue = 80000787 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue"];
  int queue_size() const;
  void clear_queue();
  static const int kQueueFieldNumber = 80000787;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey& queue(int index) const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey* mutable_queue(int index);
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey* add_queue();
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey >*
      mutable_queue();
  const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey >&
      queue() const;

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey > queue_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_QueuesImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.State) */ {
 public:
  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State();
  virtual ~Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State();

  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State& from);

  inline Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State& operator=(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State&& from) noexcept
    : Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State& operator=(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State*>(
               &_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    69;

  void Swap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State* other);
  friend void swap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State& a, Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State& from);
  void MergeFrom(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue name = 75480420 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/state/name"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 75480420;
  const ::ywrapper::StringValue& name() const;
  ::ywrapper::StringValue* release_name();
  ::ywrapper::StringValue* mutable_name();
  void set_allocated_name(::ywrapper::StringValue* name);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* name_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_StateImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface) */ {
 public:
  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface();
  virtual ~Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface();

  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface& from);

  inline Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface& operator=(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface&& from) noexcept
    : Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface& operator=(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface*>(
               &_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    70;

  void Swap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface* other);
  friend void swap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface& a, Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface& from);
  void MergeFrom(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config Config;
  typedef Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues Queues;
  typedef Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues queues = 40799367 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues"];
  bool has_queues() const;
  void clear_queues();
  static const int kQueuesFieldNumber = 40799367;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues& queues() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues* release_queues();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues* mutable_queues();
  void set_allocated_queues(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues* queues);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Config config = 78813417 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 78813417;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config& config() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config* release_config();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config* config);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.State state = 323748030 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 323748030;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State& state() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State* release_state();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State* state);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues* queues_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config* config_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State* state_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey) */ {
 public:
  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey();
  virtual ~Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey();

  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey& from);

  inline Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey& operator=(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey&& from) noexcept
    : Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey& operator=(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey*>(
               &_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    71;

  void Swap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey* other);
  friend void swap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey& a, Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey& from);
  void MergeFrom(const Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/name"];
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface voq_interface = 2;
  bool has_voq_interface() const;
  void clear_voq_interface();
  static const int kVoqInterfaceFieldNumber = 2;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface& voq_interface() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface* release_voq_interface();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface* mutable_voq_interface();
  void set_allocated_voq_interface(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface* voq_interface);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface* voq_interface_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKeyImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Input_VirtualOutputQueues : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues) */ {
 public:
  Qos_Interfaces_Interface_Input_VirtualOutputQueues();
  virtual ~Qos_Interfaces_Interface_Input_VirtualOutputQueues();

  Qos_Interfaces_Interface_Input_VirtualOutputQueues(const Qos_Interfaces_Interface_Input_VirtualOutputQueues& from);

  inline Qos_Interfaces_Interface_Input_VirtualOutputQueues& operator=(const Qos_Interfaces_Interface_Input_VirtualOutputQueues& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Input_VirtualOutputQueues(Qos_Interfaces_Interface_Input_VirtualOutputQueues&& from) noexcept
    : Qos_Interfaces_Interface_Input_VirtualOutputQueues() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Input_VirtualOutputQueues& operator=(Qos_Interfaces_Interface_Input_VirtualOutputQueues&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Input_VirtualOutputQueues& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Input_VirtualOutputQueues* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Input_VirtualOutputQueues*>(
               &_Qos_Interfaces_Interface_Input_VirtualOutputQueues_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    72;

  void Swap(Qos_Interfaces_Interface_Input_VirtualOutputQueues* other);
  friend void swap(Qos_Interfaces_Interface_Input_VirtualOutputQueues& a, Qos_Interfaces_Interface_Input_VirtualOutputQueues& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Input_VirtualOutputQueues* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Input_VirtualOutputQueues* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Input_VirtualOutputQueues& from);
  void MergeFrom(const Qos_Interfaces_Interface_Input_VirtualOutputQueues& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Input_VirtualOutputQueues* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface VoqInterface;
  typedef Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey VoqInterfaceKey;

  // accessors -------------------------------------------------------

  // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey voq_interface = 134149572 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface"];
  int voq_interface_size() const;
  void clear_voq_interface();
  static const int kVoqInterfaceFieldNumber = 134149572;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey& voq_interface(int index) const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey* mutable_voq_interface(int index);
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey* add_voq_interface();
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey >*
      mutable_voq_interface();
  const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey >&
      voq_interface() const;

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey > voq_interface_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Input_VirtualOutputQueuesImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Input : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input) */ {
 public:
  Qos_Interfaces_Interface_Input();
  virtual ~Qos_Interfaces_Interface_Input();

  Qos_Interfaces_Interface_Input(const Qos_Interfaces_Interface_Input& from);

  inline Qos_Interfaces_Interface_Input& operator=(const Qos_Interfaces_Interface_Input& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Input(Qos_Interfaces_Interface_Input&& from) noexcept
    : Qos_Interfaces_Interface_Input() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Input& operator=(Qos_Interfaces_Interface_Input&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Input& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Input* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Input*>(
               &_Qos_Interfaces_Interface_Input_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    73;

  void Swap(Qos_Interfaces_Interface_Input* other);
  friend void swap(Qos_Interfaces_Interface_Input& a, Qos_Interfaces_Interface_Input& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Input* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Input* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Input& from);
  void MergeFrom(const Qos_Interfaces_Interface_Input& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Input* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Interfaces_Interface_Input_Classifers Classifers;
  typedef Qos_Interfaces_Interface_Input_Config Config;
  typedef Qos_Interfaces_Interface_Input_Queues Queues;
  typedef Qos_Interfaces_Interface_Input_SchedulerPolicy SchedulerPolicy;
  typedef Qos_Interfaces_Interface_Input_State State;
  typedef Qos_Interfaces_Interface_Input_VirtualOutputQueues VirtualOutputQueues;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers classifers = 158553614 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers"];
  bool has_classifers() const;
  void clear_classifers();
  static const int kClassifersFieldNumber = 158553614;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers& classifers() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers* release_classifers();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers* mutable_classifers();
  void set_allocated_classifers(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers* classifers);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Config config = 195844559 [(.yext.schemapath) = "/qos/interfaces/interface/input/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 195844559;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Config& config() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Config* release_config();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Config* config);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.State state = 273823424 [(.yext.schemapath) = "/qos/interfaces/interface/input/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 273823424;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_State& state() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_State* release_state();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_State* state);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues virtual_output_queues = 370520089 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues"];
  bool has_virtual_output_queues() const;
  void clear_virtual_output_queues();
  static const int kVirtualOutputQueuesFieldNumber = 370520089;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues& virtual_output_queues() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues* release_virtual_output_queues();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues* mutable_virtual_output_queues();
  void set_allocated_virtual_output_queues(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues* virtual_output_queues);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy scheduler_policy = 391585903 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy"];
  bool has_scheduler_policy() const;
  void clear_scheduler_policy();
  static const int kSchedulerPolicyFieldNumber = 391585903;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy& scheduler_policy() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy* release_scheduler_policy();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy* mutable_scheduler_policy();
  void set_allocated_scheduler_policy(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy* scheduler_policy);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues queues = 491614229 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues"];
  bool has_queues() const;
  void clear_queues();
  static const int kQueuesFieldNumber = 491614229;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues& queues() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues* release_queues();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues* mutable_queues();
  void set_allocated_queues(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues* queues);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers* classifers_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Config* config_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_State* state_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues* virtual_output_queues_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy* scheduler_policy_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues* queues_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_InputImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_InterfaceRef_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.Config) */ {
 public:
  Qos_Interfaces_Interface_InterfaceRef_Config();
  virtual ~Qos_Interfaces_Interface_InterfaceRef_Config();

  Qos_Interfaces_Interface_InterfaceRef_Config(const Qos_Interfaces_Interface_InterfaceRef_Config& from);

  inline Qos_Interfaces_Interface_InterfaceRef_Config& operator=(const Qos_Interfaces_Interface_InterfaceRef_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_InterfaceRef_Config(Qos_Interfaces_Interface_InterfaceRef_Config&& from) noexcept
    : Qos_Interfaces_Interface_InterfaceRef_Config() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_InterfaceRef_Config& operator=(Qos_Interfaces_Interface_InterfaceRef_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_InterfaceRef_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_InterfaceRef_Config* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_InterfaceRef_Config*>(
               &_Qos_Interfaces_Interface_InterfaceRef_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    74;

  void Swap(Qos_Interfaces_Interface_InterfaceRef_Config* other);
  friend void swap(Qos_Interfaces_Interface_InterfaceRef_Config& a, Qos_Interfaces_Interface_InterfaceRef_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_InterfaceRef_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_InterfaceRef_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_InterfaceRef_Config& from);
  void MergeFrom(const Qos_Interfaces_Interface_InterfaceRef_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_InterfaceRef_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue interface = 31011128 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref/config/interface"];
  bool has_interface() const;
  void clear_interface();
  static const int kInterfaceFieldNumber = 31011128;
  const ::ywrapper::StringValue& interface() const;
  ::ywrapper::StringValue* release_interface();
  ::ywrapper::StringValue* mutable_interface();
  void set_allocated_interface(::ywrapper::StringValue* interface);

  // .ywrapper.UintValue subinterface = 407353336 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref/config/subinterface"];
  bool has_subinterface() const;
  void clear_subinterface();
  static const int kSubinterfaceFieldNumber = 407353336;
  const ::ywrapper::UintValue& subinterface() const;
  ::ywrapper::UintValue* release_subinterface();
  ::ywrapper::UintValue* mutable_subinterface();
  void set_allocated_subinterface(::ywrapper::UintValue* subinterface);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* interface_;
  ::ywrapper::UintValue* subinterface_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_InterfaceRef_ConfigImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_InterfaceRef_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.State) */ {
 public:
  Qos_Interfaces_Interface_InterfaceRef_State();
  virtual ~Qos_Interfaces_Interface_InterfaceRef_State();

  Qos_Interfaces_Interface_InterfaceRef_State(const Qos_Interfaces_Interface_InterfaceRef_State& from);

  inline Qos_Interfaces_Interface_InterfaceRef_State& operator=(const Qos_Interfaces_Interface_InterfaceRef_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_InterfaceRef_State(Qos_Interfaces_Interface_InterfaceRef_State&& from) noexcept
    : Qos_Interfaces_Interface_InterfaceRef_State() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_InterfaceRef_State& operator=(Qos_Interfaces_Interface_InterfaceRef_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_InterfaceRef_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_InterfaceRef_State* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_InterfaceRef_State*>(
               &_Qos_Interfaces_Interface_InterfaceRef_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    75;

  void Swap(Qos_Interfaces_Interface_InterfaceRef_State* other);
  friend void swap(Qos_Interfaces_Interface_InterfaceRef_State& a, Qos_Interfaces_Interface_InterfaceRef_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_InterfaceRef_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_InterfaceRef_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_InterfaceRef_State& from);
  void MergeFrom(const Qos_Interfaces_Interface_InterfaceRef_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_InterfaceRef_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue interface = 75395573 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref/state/interface"];
  bool has_interface() const;
  void clear_interface();
  static const int kInterfaceFieldNumber = 75395573;
  const ::ywrapper::StringValue& interface() const;
  ::ywrapper::StringValue* release_interface();
  ::ywrapper::StringValue* mutable_interface();
  void set_allocated_interface(::ywrapper::StringValue* interface);

  // .ywrapper.UintValue subinterface = 380934871 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref/state/subinterface"];
  bool has_subinterface() const;
  void clear_subinterface();
  static const int kSubinterfaceFieldNumber = 380934871;
  const ::ywrapper::UintValue& subinterface() const;
  ::ywrapper::UintValue* release_subinterface();
  ::ywrapper::UintValue* mutable_subinterface();
  void set_allocated_subinterface(::ywrapper::UintValue* subinterface);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* interface_;
  ::ywrapper::UintValue* subinterface_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_InterfaceRef_StateImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_InterfaceRef : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef) */ {
 public:
  Qos_Interfaces_Interface_InterfaceRef();
  virtual ~Qos_Interfaces_Interface_InterfaceRef();

  Qos_Interfaces_Interface_InterfaceRef(const Qos_Interfaces_Interface_InterfaceRef& from);

  inline Qos_Interfaces_Interface_InterfaceRef& operator=(const Qos_Interfaces_Interface_InterfaceRef& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_InterfaceRef(Qos_Interfaces_Interface_InterfaceRef&& from) noexcept
    : Qos_Interfaces_Interface_InterfaceRef() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_InterfaceRef& operator=(Qos_Interfaces_Interface_InterfaceRef&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_InterfaceRef& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_InterfaceRef* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_InterfaceRef*>(
               &_Qos_Interfaces_Interface_InterfaceRef_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    76;

  void Swap(Qos_Interfaces_Interface_InterfaceRef* other);
  friend void swap(Qos_Interfaces_Interface_InterfaceRef& a, Qos_Interfaces_Interface_InterfaceRef& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_InterfaceRef* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_InterfaceRef* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_InterfaceRef& from);
  void MergeFrom(const Qos_Interfaces_Interface_InterfaceRef& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_InterfaceRef* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Interfaces_Interface_InterfaceRef_Config Config;
  typedef Qos_Interfaces_Interface_InterfaceRef_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.Config config = 115373008 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 115373008;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_Config& config() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_Config* release_config();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_Config* config);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.State state = 487930057 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 487930057;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_State& state() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_State* release_state();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_State* state);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_Config* config_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_State* state_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_InterfaceRefImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Output_Classifers_Classifier_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Config) */ {
 public:
  Qos_Interfaces_Interface_Output_Classifers_Classifier_Config();
  virtual ~Qos_Interfaces_Interface_Output_Classifers_Classifier_Config();

  Qos_Interfaces_Interface_Output_Classifers_Classifier_Config(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Config& from);

  inline Qos_Interfaces_Interface_Output_Classifers_Classifier_Config& operator=(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Output_Classifers_Classifier_Config(Qos_Interfaces_Interface_Output_Classifers_Classifier_Config&& from) noexcept
    : Qos_Interfaces_Interface_Output_Classifers_Classifier_Config() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Output_Classifers_Classifier_Config& operator=(Qos_Interfaces_Interface_Output_Classifers_Classifier_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Output_Classifers_Classifier_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Output_Classifers_Classifier_Config* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Output_Classifers_Classifier_Config*>(
               &_Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    77;

  void Swap(Qos_Interfaces_Interface_Output_Classifers_Classifier_Config* other);
  friend void swap(Qos_Interfaces_Interface_Output_Classifers_Classifier_Config& a, Qos_Interfaces_Interface_Output_Classifers_Classifier_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Output_Classifers_Classifier_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Output_Classifers_Classifier_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Config& from);
  void MergeFrom(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Output_Classifers_Classifier_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type Type;
  static const Type TYPE_UNSET =
    Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type_TYPE_UNSET;
  static const Type TYPE_IPV4 =
    Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type_TYPE_IPV4;
  static const Type TYPE_IPV6 =
    Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type_TYPE_IPV6;
  static const Type TYPE_MPLS =
    Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type_TYPE_MPLS;
  static inline bool Type_IsValid(int value) {
    return Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type_Type_MIN;
  static const Type Type_MAX =
    Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue name = 273984944 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/config/name"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 273984944;
  const ::ywrapper::StringValue& name() const;
  ::ywrapper::StringValue* release_name();
  ::ywrapper::StringValue* mutable_name();
  void set_allocated_name(::ywrapper::StringValue* name);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Config.Type type = 383113377 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/config/type"];
  void clear_type();
  static const int kTypeFieldNumber = 383113377;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type type() const;
  void set_type(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type value);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* name_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_ConfigImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Output_Classifers_Classifier_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.State) */ {
 public:
  Qos_Interfaces_Interface_Output_Classifers_Classifier_State();
  virtual ~Qos_Interfaces_Interface_Output_Classifers_Classifier_State();

  Qos_Interfaces_Interface_Output_Classifers_Classifier_State(const Qos_Interfaces_Interface_Output_Classifers_Classifier_State& from);

  inline Qos_Interfaces_Interface_Output_Classifers_Classifier_State& operator=(const Qos_Interfaces_Interface_Output_Classifers_Classifier_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Output_Classifers_Classifier_State(Qos_Interfaces_Interface_Output_Classifers_Classifier_State&& from) noexcept
    : Qos_Interfaces_Interface_Output_Classifers_Classifier_State() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Output_Classifers_Classifier_State& operator=(Qos_Interfaces_Interface_Output_Classifers_Classifier_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Output_Classifers_Classifier_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Output_Classifers_Classifier_State* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Output_Classifers_Classifier_State*>(
               &_Qos_Interfaces_Interface_Output_Classifers_Classifier_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    78;

  void Swap(Qos_Interfaces_Interface_Output_Classifers_Classifier_State* other);
  friend void swap(Qos_Interfaces_Interface_Output_Classifers_Classifier_State& a, Qos_Interfaces_Interface_Output_Classifers_Classifier_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Output_Classifers_Classifier_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Output_Classifers_Classifier_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Output_Classifers_Classifier_State& from);
  void MergeFrom(const Qos_Interfaces_Interface_Output_Classifers_Classifier_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Output_Classifers_Classifier_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type Type;
  static const Type TYPE_UNSET =
    Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type_TYPE_UNSET;
  static const Type TYPE_IPV4 =
    Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type_TYPE_IPV4;
  static const Type TYPE_IPV6 =
    Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type_TYPE_IPV6;
  static const Type TYPE_MPLS =
    Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type_TYPE_MPLS;
  static inline bool Type_IsValid(int value) {
    return Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type_Type_MIN;
  static const Type Type_MAX =
    Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue name = 43829575 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/state/name"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 43829575;
  const ::ywrapper::StringValue& name() const;
  ::ywrapper::StringValue* release_name();
  ::ywrapper::StringValue* mutable_name();
  void set_allocated_name(::ywrapper::StringValue* name);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.State.Type type = 458141842 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/state/type"];
  void clear_type();
  static const int kTypeFieldNumber = 458141842;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type type() const;
  void set_type(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type value);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* name_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_StateImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.Config) */ {
 public:
  Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config();
  virtual ~Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config();

  Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config& from);

  inline Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config& operator=(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config(Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config&& from) noexcept
    : Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config& operator=(Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config*>(
               &_Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    79;

  void Swap(Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config* other);
  friend void swap(Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config& a, Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config& from);
  void MergeFrom(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue id = 421370613 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/config/id"];
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 421370613;
  const ::ywrapper::StringValue& id() const;
  ::ywrapper::StringValue* release_id();
  ::ywrapper::StringValue* mutable_id();
  void set_allocated_id(::ywrapper::StringValue* id);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* id_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_ConfigImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.State) */ {
 public:
  Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State();
  virtual ~Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State();

  Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State& from);

  inline Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State& operator=(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State(Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State&& from) noexcept
    : Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State& operator=(Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State*>(
               &_Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    80;

  void Swap(Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State* other);
  friend void swap(Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State& a, Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State& from);
  void MergeFrom(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue id = 294625236 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/state/id"];
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 294625236;
  const ::ywrapper::StringValue& id() const;
  ::ywrapper::StringValue* release_id();
  ::ywrapper::StringValue* mutable_id();
  void set_allocated_id(::ywrapper::StringValue* id);

  // .ywrapper.UintValue matched_packets = 507671601 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/state/matched-packets"];
  bool has_matched_packets() const;
  void clear_matched_packets();
  static const int kMatchedPacketsFieldNumber = 507671601;
  const ::ywrapper::UintValue& matched_packets() const;
  ::ywrapper::UintValue* release_matched_packets();
  ::ywrapper::UintValue* mutable_matched_packets();
  void set_allocated_matched_packets(::ywrapper::UintValue* matched_packets);

  // .ywrapper.UintValue matched_octets = 525483634 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/state/matched-octets"];
  bool has_matched_octets() const;
  void clear_matched_octets();
  static const int kMatchedOctetsFieldNumber = 525483634;
  const ::ywrapper::UintValue& matched_octets() const;
  ::ywrapper::UintValue* release_matched_octets();
  ::ywrapper::UintValue* mutable_matched_octets();
  void set_allocated_matched_octets(::ywrapper::UintValue* matched_octets);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* id_;
  ::ywrapper::UintValue* matched_packets_;
  ::ywrapper::UintValue* matched_octets_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_StateImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term) */ {
 public:
  Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term();
  virtual ~Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term();

  Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term& from);

  inline Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term& operator=(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term(Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term&& from) noexcept
    : Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term& operator=(Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term*>(
               &_Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    81;

  void Swap(Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term* other);
  friend void swap(Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term& a, Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term& from);
  void MergeFrom(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config Config;
  typedef Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.Config config = 86353283 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 86353283;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config& config() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config* release_config();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config* config);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.State state = 254473188 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 254473188;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State& state() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State* release_state();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State* state);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config* config_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State* state_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey) */ {
 public:
  Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey();
  virtual ~Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey();

  Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey& from);

  inline Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey& operator=(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey(Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey&& from) noexcept
    : Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey& operator=(Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey*>(
               &_Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    82;

  void Swap(Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey* other);
  friend void swap(Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey& a, Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey& from);
  void MergeFrom(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/id"];
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term term = 2;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 2;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term& term() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term* release_term();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term* mutable_term();
  void set_allocated_term(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term* term);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term* term_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKeyImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms) */ {
 public:
  Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms();
  virtual ~Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms();

  Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms& from);

  inline Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms& operator=(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms(Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms&& from) noexcept
    : Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms& operator=(Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms*>(
               &_Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    83;

  void Swap(Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms* other);
  friend void swap(Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms& a, Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms& from);
  void MergeFrom(const Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term Term;
  typedef Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey TermKey;

  // accessors -------------------------------------------------------

  // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey term = 132412642 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term"];
  int term_size() const;
  void clear_term();
  static const int kTermFieldNumber = 132412642;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey& term(int index) const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey* mutable_term(int index);
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey* add_term();
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey >*
      mutable_term();
  const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey >&
      term() const;

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey > term_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Classifers_Classifier_TermsImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Output_Classifers_Classifier : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier) */ {
 public:
  Qos_Interfaces_Interface_Output_Classifers_Classifier();
  virtual ~Qos_Interfaces_Interface_Output_Classifers_Classifier();

  Qos_Interfaces_Interface_Output_Classifers_Classifier(const Qos_Interfaces_Interface_Output_Classifers_Classifier& from);

  inline Qos_Interfaces_Interface_Output_Classifers_Classifier& operator=(const Qos_Interfaces_Interface_Output_Classifers_Classifier& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Output_Classifers_Classifier(Qos_Interfaces_Interface_Output_Classifers_Classifier&& from) noexcept
    : Qos_Interfaces_Interface_Output_Classifers_Classifier() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Output_Classifers_Classifier& operator=(Qos_Interfaces_Interface_Output_Classifers_Classifier&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Output_Classifers_Classifier& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Output_Classifers_Classifier* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Output_Classifers_Classifier*>(
               &_Qos_Interfaces_Interface_Output_Classifers_Classifier_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    84;

  void Swap(Qos_Interfaces_Interface_Output_Classifers_Classifier* other);
  friend void swap(Qos_Interfaces_Interface_Output_Classifers_Classifier& a, Qos_Interfaces_Interface_Output_Classifers_Classifier& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Output_Classifers_Classifier* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Output_Classifers_Classifier* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Output_Classifers_Classifier& from);
  void MergeFrom(const Qos_Interfaces_Interface_Output_Classifers_Classifier& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Output_Classifers_Classifier* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Interfaces_Interface_Output_Classifers_Classifier_Config Config;
  typedef Qos_Interfaces_Interface_Output_Classifers_Classifier_State State;
  typedef Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms Terms;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.State state = 103030399 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 103030399;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_State& state() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_State* release_state();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_State* state);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Config config = 138687170 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 138687170;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Config& config() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Config* release_config();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Config* config);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms terms = 528362137 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms"];
  bool has_terms() const;
  void clear_terms();
  static const int kTermsFieldNumber = 528362137;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms& terms() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms* release_terms();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms* mutable_terms();
  void set_allocated_terms(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms* terms);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_State* state_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Config* config_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms* terms_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Classifers_ClassifierImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Output_Classifers_ClassifierKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.ClassifierKey) */ {
 public:
  Qos_Interfaces_Interface_Output_Classifers_ClassifierKey();
  virtual ~Qos_Interfaces_Interface_Output_Classifers_ClassifierKey();

  Qos_Interfaces_Interface_Output_Classifers_ClassifierKey(const Qos_Interfaces_Interface_Output_Classifers_ClassifierKey& from);

  inline Qos_Interfaces_Interface_Output_Classifers_ClassifierKey& operator=(const Qos_Interfaces_Interface_Output_Classifers_ClassifierKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Output_Classifers_ClassifierKey(Qos_Interfaces_Interface_Output_Classifers_ClassifierKey&& from) noexcept
    : Qos_Interfaces_Interface_Output_Classifers_ClassifierKey() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Output_Classifers_ClassifierKey& operator=(Qos_Interfaces_Interface_Output_Classifers_ClassifierKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Output_Classifers_ClassifierKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Output_Classifers_ClassifierKey* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Output_Classifers_ClassifierKey*>(
               &_Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    85;

  void Swap(Qos_Interfaces_Interface_Output_Classifers_ClassifierKey* other);
  friend void swap(Qos_Interfaces_Interface_Output_Classifers_ClassifierKey& a, Qos_Interfaces_Interface_Output_Classifers_ClassifierKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Output_Classifers_ClassifierKey* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Output_Classifers_ClassifierKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Output_Classifers_ClassifierKey& from);
  void MergeFrom(const Qos_Interfaces_Interface_Output_Classifers_ClassifierKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Output_Classifers_ClassifierKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type Type;
  static const Type TYPE_UNSET =
    Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type_TYPE_UNSET;
  static const Type TYPE_IPV4 =
    Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type_TYPE_IPV4;
  static const Type TYPE_IPV6 =
    Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type_TYPE_IPV6;
  static const Type TYPE_MPLS =
    Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type_TYPE_MPLS;
  static inline bool Type_IsValid(int value) {
    return Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type_Type_MIN;
  static const Type Type_MAX =
    Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier classifier = 2;
  bool has_classifier() const;
  void clear_classifier();
  static const int kClassifierFieldNumber = 2;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier& classifier() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier* release_classifier();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier* mutable_classifier();
  void set_allocated_classifier(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier* classifier);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.ClassifierKey.Type type = 1 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/type"];
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type type() const;
  void set_type(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type value);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.ClassifierKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier* classifier_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Classifers_ClassifierKeyImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Output_Classifers : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers) */ {
 public:
  Qos_Interfaces_Interface_Output_Classifers();
  virtual ~Qos_Interfaces_Interface_Output_Classifers();

  Qos_Interfaces_Interface_Output_Classifers(const Qos_Interfaces_Interface_Output_Classifers& from);

  inline Qos_Interfaces_Interface_Output_Classifers& operator=(const Qos_Interfaces_Interface_Output_Classifers& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Output_Classifers(Qos_Interfaces_Interface_Output_Classifers&& from) noexcept
    : Qos_Interfaces_Interface_Output_Classifers() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Output_Classifers& operator=(Qos_Interfaces_Interface_Output_Classifers&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Output_Classifers& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Output_Classifers* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Output_Classifers*>(
               &_Qos_Interfaces_Interface_Output_Classifers_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    86;

  void Swap(Qos_Interfaces_Interface_Output_Classifers* other);
  friend void swap(Qos_Interfaces_Interface_Output_Classifers& a, Qos_Interfaces_Interface_Output_Classifers& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Output_Classifers* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Output_Classifers* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Output_Classifers& from);
  void MergeFrom(const Qos_Interfaces_Interface_Output_Classifers& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Output_Classifers* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Interfaces_Interface_Output_Classifers_Classifier Classifier;
  typedef Qos_Interfaces_Interface_Output_Classifers_ClassifierKey ClassifierKey;

  // accessors -------------------------------------------------------

  // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.ClassifierKey classifier = 531213741 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier"];
  int classifier_size() const;
  void clear_classifier();
  static const int kClassifierFieldNumber = 531213741;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_ClassifierKey& classifier(int index) const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_ClassifierKey* mutable_classifier(int index);
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_ClassifierKey* add_classifier();
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_ClassifierKey >*
      mutable_classifier();
  const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_ClassifierKey >&
      classifier() const;

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_ClassifierKey > classifier_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_ClassifersImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Output_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Config) */ {
 public:
  Qos_Interfaces_Interface_Output_Config();
  virtual ~Qos_Interfaces_Interface_Output_Config();

  Qos_Interfaces_Interface_Output_Config(const Qos_Interfaces_Interface_Output_Config& from);

  inline Qos_Interfaces_Interface_Output_Config& operator=(const Qos_Interfaces_Interface_Output_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Output_Config(Qos_Interfaces_Interface_Output_Config&& from) noexcept
    : Qos_Interfaces_Interface_Output_Config() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Output_Config& operator=(Qos_Interfaces_Interface_Output_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Output_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Output_Config* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Output_Config*>(
               &_Qos_Interfaces_Interface_Output_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    87;

  void Swap(Qos_Interfaces_Interface_Output_Config* other);
  friend void swap(Qos_Interfaces_Interface_Output_Config& a, Qos_Interfaces_Interface_Output_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Output_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Output_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Output_Config& from);
  void MergeFrom(const Qos_Interfaces_Interface_Output_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Output_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_ConfigImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Output_InterfaceRef_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.Config) */ {
 public:
  Qos_Interfaces_Interface_Output_InterfaceRef_Config();
  virtual ~Qos_Interfaces_Interface_Output_InterfaceRef_Config();

  Qos_Interfaces_Interface_Output_InterfaceRef_Config(const Qos_Interfaces_Interface_Output_InterfaceRef_Config& from);

  inline Qos_Interfaces_Interface_Output_InterfaceRef_Config& operator=(const Qos_Interfaces_Interface_Output_InterfaceRef_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Output_InterfaceRef_Config(Qos_Interfaces_Interface_Output_InterfaceRef_Config&& from) noexcept
    : Qos_Interfaces_Interface_Output_InterfaceRef_Config() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Output_InterfaceRef_Config& operator=(Qos_Interfaces_Interface_Output_InterfaceRef_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Output_InterfaceRef_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Output_InterfaceRef_Config* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Output_InterfaceRef_Config*>(
               &_Qos_Interfaces_Interface_Output_InterfaceRef_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    88;

  void Swap(Qos_Interfaces_Interface_Output_InterfaceRef_Config* other);
  friend void swap(Qos_Interfaces_Interface_Output_InterfaceRef_Config& a, Qos_Interfaces_Interface_Output_InterfaceRef_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Output_InterfaceRef_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Output_InterfaceRef_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Output_InterfaceRef_Config& from);
  void MergeFrom(const Qos_Interfaces_Interface_Output_InterfaceRef_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Output_InterfaceRef_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue subinterface = 18610174 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref/config/subinterface"];
  bool has_subinterface() const;
  void clear_subinterface();
  static const int kSubinterfaceFieldNumber = 18610174;
  const ::ywrapper::UintValue& subinterface() const;
  ::ywrapper::UintValue* release_subinterface();
  ::ywrapper::UintValue* mutable_subinterface();
  void set_allocated_subinterface(::ywrapper::UintValue* subinterface);

  // .ywrapper.StringValue interface = 351351714 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref/config/interface"];
  bool has_interface() const;
  void clear_interface();
  static const int kInterfaceFieldNumber = 351351714;
  const ::ywrapper::StringValue& interface() const;
  ::ywrapper::StringValue* release_interface();
  ::ywrapper::StringValue* mutable_interface();
  void set_allocated_interface(::ywrapper::StringValue* interface);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* subinterface_;
  ::ywrapper::StringValue* interface_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_InterfaceRef_ConfigImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Output_InterfaceRef_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.State) */ {
 public:
  Qos_Interfaces_Interface_Output_InterfaceRef_State();
  virtual ~Qos_Interfaces_Interface_Output_InterfaceRef_State();

  Qos_Interfaces_Interface_Output_InterfaceRef_State(const Qos_Interfaces_Interface_Output_InterfaceRef_State& from);

  inline Qos_Interfaces_Interface_Output_InterfaceRef_State& operator=(const Qos_Interfaces_Interface_Output_InterfaceRef_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Output_InterfaceRef_State(Qos_Interfaces_Interface_Output_InterfaceRef_State&& from) noexcept
    : Qos_Interfaces_Interface_Output_InterfaceRef_State() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Output_InterfaceRef_State& operator=(Qos_Interfaces_Interface_Output_InterfaceRef_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Output_InterfaceRef_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Output_InterfaceRef_State* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Output_InterfaceRef_State*>(
               &_Qos_Interfaces_Interface_Output_InterfaceRef_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    89;

  void Swap(Qos_Interfaces_Interface_Output_InterfaceRef_State* other);
  friend void swap(Qos_Interfaces_Interface_Output_InterfaceRef_State& a, Qos_Interfaces_Interface_Output_InterfaceRef_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Output_InterfaceRef_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Output_InterfaceRef_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Output_InterfaceRef_State& from);
  void MergeFrom(const Qos_Interfaces_Interface_Output_InterfaceRef_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Output_InterfaceRef_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue interface = 287441027 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref/state/interface"];
  bool has_interface() const;
  void clear_interface();
  static const int kInterfaceFieldNumber = 287441027;
  const ::ywrapper::StringValue& interface() const;
  ::ywrapper::StringValue* release_interface();
  ::ywrapper::StringValue* mutable_interface();
  void set_allocated_interface(::ywrapper::StringValue* interface);

  // .ywrapper.UintValue subinterface = 418676689 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref/state/subinterface"];
  bool has_subinterface() const;
  void clear_subinterface();
  static const int kSubinterfaceFieldNumber = 418676689;
  const ::ywrapper::UintValue& subinterface() const;
  ::ywrapper::UintValue* release_subinterface();
  ::ywrapper::UintValue* mutable_subinterface();
  void set_allocated_subinterface(::ywrapper::UintValue* subinterface);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* interface_;
  ::ywrapper::UintValue* subinterface_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_InterfaceRef_StateImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Output_InterfaceRef : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef) */ {
 public:
  Qos_Interfaces_Interface_Output_InterfaceRef();
  virtual ~Qos_Interfaces_Interface_Output_InterfaceRef();

  Qos_Interfaces_Interface_Output_InterfaceRef(const Qos_Interfaces_Interface_Output_InterfaceRef& from);

  inline Qos_Interfaces_Interface_Output_InterfaceRef& operator=(const Qos_Interfaces_Interface_Output_InterfaceRef& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Output_InterfaceRef(Qos_Interfaces_Interface_Output_InterfaceRef&& from) noexcept
    : Qos_Interfaces_Interface_Output_InterfaceRef() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Output_InterfaceRef& operator=(Qos_Interfaces_Interface_Output_InterfaceRef&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Output_InterfaceRef& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Output_InterfaceRef* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Output_InterfaceRef*>(
               &_Qos_Interfaces_Interface_Output_InterfaceRef_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    90;

  void Swap(Qos_Interfaces_Interface_Output_InterfaceRef* other);
  friend void swap(Qos_Interfaces_Interface_Output_InterfaceRef& a, Qos_Interfaces_Interface_Output_InterfaceRef& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Output_InterfaceRef* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Output_InterfaceRef* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Output_InterfaceRef& from);
  void MergeFrom(const Qos_Interfaces_Interface_Output_InterfaceRef& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Output_InterfaceRef* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Interfaces_Interface_Output_InterfaceRef_Config Config;
  typedef Qos_Interfaces_Interface_Output_InterfaceRef_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.State state = 226867043 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 226867043;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_State& state() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_State* release_state();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_State* state);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.Config config = 412349494 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 412349494;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_Config& config() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_Config* release_config();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_Config* config);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_State* state_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_Config* config_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_InterfaceRefImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Output_Queues_Queue_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.Config) */ {
 public:
  Qos_Interfaces_Interface_Output_Queues_Queue_Config();
  virtual ~Qos_Interfaces_Interface_Output_Queues_Queue_Config();

  Qos_Interfaces_Interface_Output_Queues_Queue_Config(const Qos_Interfaces_Interface_Output_Queues_Queue_Config& from);

  inline Qos_Interfaces_Interface_Output_Queues_Queue_Config& operator=(const Qos_Interfaces_Interface_Output_Queues_Queue_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Output_Queues_Queue_Config(Qos_Interfaces_Interface_Output_Queues_Queue_Config&& from) noexcept
    : Qos_Interfaces_Interface_Output_Queues_Queue_Config() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Output_Queues_Queue_Config& operator=(Qos_Interfaces_Interface_Output_Queues_Queue_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Output_Queues_Queue_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Output_Queues_Queue_Config* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Output_Queues_Queue_Config*>(
               &_Qos_Interfaces_Interface_Output_Queues_Queue_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    91;

  void Swap(Qos_Interfaces_Interface_Output_Queues_Queue_Config* other);
  friend void swap(Qos_Interfaces_Interface_Output_Queues_Queue_Config& a, Qos_Interfaces_Interface_Output_Queues_Queue_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Output_Queues_Queue_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Output_Queues_Queue_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Output_Queues_Queue_Config& from);
  void MergeFrom(const Qos_Interfaces_Interface_Output_Queues_Queue_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Output_Queues_Queue_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue name = 149002045 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/config/name"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 149002045;
  const ::ywrapper::StringValue& name() const;
  ::ywrapper::StringValue* release_name();
  ::ywrapper::StringValue* mutable_name();
  void set_allocated_name(::ywrapper::StringValue* name);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* name_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Queues_Queue_ConfigImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Output_Queues_Queue_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State) */ {
 public:
  Qos_Interfaces_Interface_Output_Queues_Queue_State();
  virtual ~Qos_Interfaces_Interface_Output_Queues_Queue_State();

  Qos_Interfaces_Interface_Output_Queues_Queue_State(const Qos_Interfaces_Interface_Output_Queues_Queue_State& from);

  inline Qos_Interfaces_Interface_Output_Queues_Queue_State& operator=(const Qos_Interfaces_Interface_Output_Queues_Queue_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Output_Queues_Queue_State(Qos_Interfaces_Interface_Output_Queues_Queue_State&& from) noexcept
    : Qos_Interfaces_Interface_Output_Queues_Queue_State() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Output_Queues_Queue_State& operator=(Qos_Interfaces_Interface_Output_Queues_Queue_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Output_Queues_Queue_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Output_Queues_Queue_State* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Output_Queues_Queue_State*>(
               &_Qos_Interfaces_Interface_Output_Queues_Queue_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    92;

  void Swap(Qos_Interfaces_Interface_Output_Queues_Queue_State* other);
  friend void swap(Qos_Interfaces_Interface_Output_Queues_Queue_State& a, Qos_Interfaces_Interface_Output_Queues_Queue_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Output_Queues_Queue_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Output_Queues_Queue_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Output_Queues_Queue_State& from);
  void MergeFrom(const Qos_Interfaces_Interface_Output_Queues_Queue_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Output_Queues_Queue_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue transmit_pkts = 20090310 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state/transmit-pkts"];
  bool has_transmit_pkts() const;
  void clear_transmit_pkts();
  static const int kTransmitPktsFieldNumber = 20090310;
  const ::ywrapper::UintValue& transmit_pkts() const;
  ::ywrapper::UintValue* release_transmit_pkts();
  ::ywrapper::UintValue* mutable_transmit_pkts();
  void set_allocated_transmit_pkts(::ywrapper::UintValue* transmit_pkts);

  // .ywrapper.UintValue transmit_octets = 117378910 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state/transmit-octets"];
  bool has_transmit_octets() const;
  void clear_transmit_octets();
  static const int kTransmitOctetsFieldNumber = 117378910;
  const ::ywrapper::UintValue& transmit_octets() const;
  ::ywrapper::UintValue* release_transmit_octets();
  ::ywrapper::UintValue* mutable_transmit_octets();
  void set_allocated_transmit_octets(::ywrapper::UintValue* transmit_octets);

  // .ywrapper.UintValue dropped_pkts = 358084770 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state/dropped-pkts"];
  bool has_dropped_pkts() const;
  void clear_dropped_pkts();
  static const int kDroppedPktsFieldNumber = 358084770;
  const ::ywrapper::UintValue& dropped_pkts() const;
  ::ywrapper::UintValue* release_dropped_pkts();
  ::ywrapper::UintValue* mutable_dropped_pkts();
  void set_allocated_dropped_pkts(::ywrapper::UintValue* dropped_pkts);

  // .ywrapper.StringValue name = 422045572 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state/name"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 422045572;
  const ::ywrapper::StringValue& name() const;
  ::ywrapper::StringValue* release_name();
  ::ywrapper::StringValue* mutable_name();
  void set_allocated_name(::ywrapper::StringValue* name);

  // .ywrapper.UintValue avg_queue_len = 497534235 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state/avg-queue-len"];
  bool has_avg_queue_len() const;
  void clear_avg_queue_len();
  static const int kAvgQueueLenFieldNumber = 497534235;
  const ::ywrapper::UintValue& avg_queue_len() const;
  ::ywrapper::UintValue* release_avg_queue_len();
  ::ywrapper::UintValue* mutable_avg_queue_len();
  void set_allocated_avg_queue_len(::ywrapper::UintValue* avg_queue_len);

  // .ywrapper.UintValue max_queue_len = 509845137 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state/max-queue-len"];
  bool has_max_queue_len() const;
  void clear_max_queue_len();
  static const int kMaxQueueLenFieldNumber = 509845137;
  const ::ywrapper::UintValue& max_queue_len() const;
  ::ywrapper::UintValue* release_max_queue_len();
  ::ywrapper::UintValue* mutable_max_queue_len();
  void set_allocated_max_queue_len(::ywrapper::UintValue* max_queue_len);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* transmit_pkts_;
  ::ywrapper::UintValue* transmit_octets_;
  ::ywrapper::UintValue* dropped_pkts_;
  ::ywrapper::StringValue* name_;
  ::ywrapper::UintValue* avg_queue_len_;
  ::ywrapper::UintValue* max_queue_len_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Queues_Queue_StateImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Output_Queues_Queue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue) */ {
 public:
  Qos_Interfaces_Interface_Output_Queues_Queue();
  virtual ~Qos_Interfaces_Interface_Output_Queues_Queue();

  Qos_Interfaces_Interface_Output_Queues_Queue(const Qos_Interfaces_Interface_Output_Queues_Queue& from);

  inline Qos_Interfaces_Interface_Output_Queues_Queue& operator=(const Qos_Interfaces_Interface_Output_Queues_Queue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Output_Queues_Queue(Qos_Interfaces_Interface_Output_Queues_Queue&& from) noexcept
    : Qos_Interfaces_Interface_Output_Queues_Queue() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Output_Queues_Queue& operator=(Qos_Interfaces_Interface_Output_Queues_Queue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Output_Queues_Queue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Output_Queues_Queue* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Output_Queues_Queue*>(
               &_Qos_Interfaces_Interface_Output_Queues_Queue_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    93;

  void Swap(Qos_Interfaces_Interface_Output_Queues_Queue* other);
  friend void swap(Qos_Interfaces_Interface_Output_Queues_Queue& a, Qos_Interfaces_Interface_Output_Queues_Queue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Output_Queues_Queue* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Output_Queues_Queue* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Output_Queues_Queue& from);
  void MergeFrom(const Qos_Interfaces_Interface_Output_Queues_Queue& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Output_Queues_Queue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Interfaces_Interface_Output_Queues_Queue_Config Config;
  typedef Qos_Interfaces_Interface_Output_Queues_Queue_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State state = 122510046 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 122510046;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_State& state() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_State* release_state();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_State* state);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.Config config = 491134857 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 491134857;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_Config& config() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_Config* release_config();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_Config* config);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_State* state_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_Config* config_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Queues_QueueImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Output_Queues_QueueKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey) */ {
 public:
  Qos_Interfaces_Interface_Output_Queues_QueueKey();
  virtual ~Qos_Interfaces_Interface_Output_Queues_QueueKey();

  Qos_Interfaces_Interface_Output_Queues_QueueKey(const Qos_Interfaces_Interface_Output_Queues_QueueKey& from);

  inline Qos_Interfaces_Interface_Output_Queues_QueueKey& operator=(const Qos_Interfaces_Interface_Output_Queues_QueueKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Output_Queues_QueueKey(Qos_Interfaces_Interface_Output_Queues_QueueKey&& from) noexcept
    : Qos_Interfaces_Interface_Output_Queues_QueueKey() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Output_Queues_QueueKey& operator=(Qos_Interfaces_Interface_Output_Queues_QueueKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Output_Queues_QueueKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Output_Queues_QueueKey* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Output_Queues_QueueKey*>(
               &_Qos_Interfaces_Interface_Output_Queues_QueueKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    94;

  void Swap(Qos_Interfaces_Interface_Output_Queues_QueueKey* other);
  friend void swap(Qos_Interfaces_Interface_Output_Queues_QueueKey& a, Qos_Interfaces_Interface_Output_Queues_QueueKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Output_Queues_QueueKey* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Output_Queues_QueueKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Output_Queues_QueueKey& from);
  void MergeFrom(const Qos_Interfaces_Interface_Output_Queues_QueueKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Output_Queues_QueueKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/name"];
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue queue = 2;
  bool has_queue() const;
  void clear_queue();
  static const int kQueueFieldNumber = 2;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue& queue() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue* release_queue();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue* mutable_queue();
  void set_allocated_queue(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue* queue);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue* queue_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_Queues_QueueKeyImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Output_Queues : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues) */ {
 public:
  Qos_Interfaces_Interface_Output_Queues();
  virtual ~Qos_Interfaces_Interface_Output_Queues();

  Qos_Interfaces_Interface_Output_Queues(const Qos_Interfaces_Interface_Output_Queues& from);

  inline Qos_Interfaces_Interface_Output_Queues& operator=(const Qos_Interfaces_Interface_Output_Queues& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Output_Queues(Qos_Interfaces_Interface_Output_Queues&& from) noexcept
    : Qos_Interfaces_Interface_Output_Queues() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Output_Queues& operator=(Qos_Interfaces_Interface_Output_Queues&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Output_Queues& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Output_Queues* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Output_Queues*>(
               &_Qos_Interfaces_Interface_Output_Queues_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    95;

  void Swap(Qos_Interfaces_Interface_Output_Queues* other);
  friend void swap(Qos_Interfaces_Interface_Output_Queues& a, Qos_Interfaces_Interface_Output_Queues& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Output_Queues* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Output_Queues* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Output_Queues& from);
  void MergeFrom(const Qos_Interfaces_Interface_Output_Queues& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Output_Queues* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Interfaces_Interface_Output_Queues_Queue Queue;
  typedef Qos_Interfaces_Interface_Output_Queues_QueueKey QueueKey;

  // accessors -------------------------------------------------------

  // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey queue = 316768612 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue"];
  int queue_size() const;
  void clear_queue();
  static const int kQueueFieldNumber = 316768612;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_QueueKey& queue(int index) const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_QueueKey* mutable_queue(int index);
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_QueueKey* add_queue();
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_QueueKey >*
      mutable_queue();
  const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_QueueKey >&
      queue() const;

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_QueueKey > queue_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_QueuesImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Output_SchedulerPolicy_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Config) */ {
 public:
  Qos_Interfaces_Interface_Output_SchedulerPolicy_Config();
  virtual ~Qos_Interfaces_Interface_Output_SchedulerPolicy_Config();

  Qos_Interfaces_Interface_Output_SchedulerPolicy_Config(const Qos_Interfaces_Interface_Output_SchedulerPolicy_Config& from);

  inline Qos_Interfaces_Interface_Output_SchedulerPolicy_Config& operator=(const Qos_Interfaces_Interface_Output_SchedulerPolicy_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Output_SchedulerPolicy_Config(Qos_Interfaces_Interface_Output_SchedulerPolicy_Config&& from) noexcept
    : Qos_Interfaces_Interface_Output_SchedulerPolicy_Config() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Output_SchedulerPolicy_Config& operator=(Qos_Interfaces_Interface_Output_SchedulerPolicy_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Output_SchedulerPolicy_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Output_SchedulerPolicy_Config* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Output_SchedulerPolicy_Config*>(
               &_Qos_Interfaces_Interface_Output_SchedulerPolicy_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    96;

  void Swap(Qos_Interfaces_Interface_Output_SchedulerPolicy_Config* other);
  friend void swap(Qos_Interfaces_Interface_Output_SchedulerPolicy_Config& a, Qos_Interfaces_Interface_Output_SchedulerPolicy_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Output_SchedulerPolicy_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Output_SchedulerPolicy_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Output_SchedulerPolicy_Config& from);
  void MergeFrom(const Qos_Interfaces_Interface_Output_SchedulerPolicy_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Output_SchedulerPolicy_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue name = 32047975 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/config/name"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 32047975;
  const ::ywrapper::StringValue& name() const;
  ::ywrapper::StringValue* release_name();
  ::ywrapper::StringValue* mutable_name();
  void set_allocated_name(::ywrapper::StringValue* name);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* name_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_ConfigImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State) */ {
 public:
  Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State();
  virtual ~Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State();

  Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State(const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State& from);

  inline Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State& operator=(const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State(Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State&& from) noexcept
    : Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State& operator=(Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State*>(
               &_Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    97;

  void Swap(Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State* other);
  friend void swap(Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State& a, Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State& from);
  void MergeFrom(const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue exceeding_octets = 127842319 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-octets"];
  bool has_exceeding_octets() const;
  void clear_exceeding_octets();
  static const int kExceedingOctetsFieldNumber = 127842319;
  const ::ywrapper::UintValue& exceeding_octets() const;
  ::ywrapper::UintValue* release_exceeding_octets();
  ::ywrapper::UintValue* mutable_exceeding_octets();
  void set_allocated_exceeding_octets(::ywrapper::UintValue* exceeding_octets);

  // .ywrapper.UintValue exceeding_pkts = 174504655 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-pkts"];
  bool has_exceeding_pkts() const;
  void clear_exceeding_pkts();
  static const int kExceedingPktsFieldNumber = 174504655;
  const ::ywrapper::UintValue& exceeding_pkts() const;
  ::ywrapper::UintValue* release_exceeding_pkts();
  ::ywrapper::UintValue* mutable_exceeding_pkts();
  void set_allocated_exceeding_pkts(::ywrapper::UintValue* exceeding_pkts);

  // .ywrapper.UintValue conforming_octets = 190363557 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-octets"];
  bool has_conforming_octets() const;
  void clear_conforming_octets();
  static const int kConformingOctetsFieldNumber = 190363557;
  const ::ywrapper::UintValue& conforming_octets() const;
  ::ywrapper::UintValue* release_conforming_octets();
  ::ywrapper::UintValue* mutable_conforming_octets();
  void set_allocated_conforming_octets(::ywrapper::UintValue* conforming_octets);

  // .ywrapper.UintValue violating_octets = 334250126 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-octets"];
  bool has_violating_octets() const;
  void clear_violating_octets();
  static const int kViolatingOctetsFieldNumber = 334250126;
  const ::ywrapper::UintValue& violating_octets() const;
  ::ywrapper::UintValue* release_violating_octets();
  ::ywrapper::UintValue* mutable_violating_octets();
  void set_allocated_violating_octets(::ywrapper::UintValue* violating_octets);

  // .ywrapper.UintValue sequence = 379118145 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/sequence"];
  bool has_sequence() const;
  void clear_sequence();
  static const int kSequenceFieldNumber = 379118145;
  const ::ywrapper::UintValue& sequence() const;
  ::ywrapper::UintValue* release_sequence();
  ::ywrapper::UintValue* mutable_sequence();
  void set_allocated_sequence(::ywrapper::UintValue* sequence);

  // .ywrapper.UintValue violating_pkts = 380540342 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-pkts"];
  bool has_violating_pkts() const;
  void clear_violating_pkts();
  static const int kViolatingPktsFieldNumber = 380540342;
  const ::ywrapper::UintValue& violating_pkts() const;
  ::ywrapper::UintValue* release_violating_pkts();
  ::ywrapper::UintValue* mutable_violating_pkts();
  void set_allocated_violating_pkts(::ywrapper::UintValue* violating_pkts);

  // .ywrapper.UintValue conforming_pkts = 384889393 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-pkts"];
  bool has_conforming_pkts() const;
  void clear_conforming_pkts();
  static const int kConformingPktsFieldNumber = 384889393;
  const ::ywrapper::UintValue& conforming_pkts() const;
  ::ywrapper::UintValue* release_conforming_pkts();
  ::ywrapper::UintValue* mutable_conforming_pkts();
  void set_allocated_conforming_pkts(::ywrapper::UintValue* conforming_pkts);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* exceeding_octets_;
  ::ywrapper::UintValue* exceeding_pkts_;
  ::ywrapper::UintValue* conforming_octets_;
  ::ywrapper::UintValue* violating_octets_;
  ::ywrapper::UintValue* sequence_;
  ::ywrapper::UintValue* violating_pkts_;
  ::ywrapper::UintValue* conforming_pkts_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_StateImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler) */ {
 public:
  Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler();
  virtual ~Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler();

  Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler(const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler& from);

  inline Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler& operator=(const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler(Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler&& from) noexcept
    : Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler& operator=(Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler*>(
               &_Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    98;

  void Swap(Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler* other);
  friend void swap(Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler& a, Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler& from);
  void MergeFrom(const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State state = 352057387 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 352057387;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State& state() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State* release_state();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State* state);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State* state_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.SchedulerKey) */ {
 public:
  Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey();
  virtual ~Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey();

  Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey(const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey& from);

  inline Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey& operator=(const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey(Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey&& from) noexcept
    : Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey& operator=(Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey*>(
               &_Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    99;

  void Swap(Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey* other);
  friend void swap(Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey& a, Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey& from);
  void MergeFrom(const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler scheduler = 2;
  bool has_scheduler() const;
  void clear_scheduler();
  static const int kSchedulerFieldNumber = 2;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler& scheduler() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler* release_scheduler();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler* mutable_scheduler();
  void set_allocated_scheduler(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler* scheduler);

  // uint64 sequence = 1 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/sequence"];
  void clear_sequence();
  static const int kSequenceFieldNumber = 1;
  ::google::protobuf::uint64 sequence() const;
  void set_sequence(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.SchedulerKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler* scheduler_;
  ::google::protobuf::uint64 sequence_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKeyImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers) */ {
 public:
  Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers();
  virtual ~Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers();

  Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers(const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers& from);

  inline Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers& operator=(const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers(Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers&& from) noexcept
    : Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers& operator=(Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers*>(
               &_Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    100;

  void Swap(Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers* other);
  friend void swap(Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers& a, Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers& from);
  void MergeFrom(const Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler Scheduler;
  typedef Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey SchedulerKey;

  // accessors -------------------------------------------------------

  // repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.SchedulerKey scheduler = 208885833 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler"];
  int scheduler_size() const;
  void clear_scheduler();
  static const int kSchedulerFieldNumber = 208885833;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey& scheduler(int index) const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey* mutable_scheduler(int index);
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey* add_scheduler();
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey >*
      mutable_scheduler();
  const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey >&
      scheduler() const;

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey > scheduler_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_SchedulersImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Output_SchedulerPolicy_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.State) */ {
 public:
  Qos_Interfaces_Interface_Output_SchedulerPolicy_State();
  virtual ~Qos_Interfaces_Interface_Output_SchedulerPolicy_State();

  Qos_Interfaces_Interface_Output_SchedulerPolicy_State(const Qos_Interfaces_Interface_Output_SchedulerPolicy_State& from);

  inline Qos_Interfaces_Interface_Output_SchedulerPolicy_State& operator=(const Qos_Interfaces_Interface_Output_SchedulerPolicy_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Output_SchedulerPolicy_State(Qos_Interfaces_Interface_Output_SchedulerPolicy_State&& from) noexcept
    : Qos_Interfaces_Interface_Output_SchedulerPolicy_State() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Output_SchedulerPolicy_State& operator=(Qos_Interfaces_Interface_Output_SchedulerPolicy_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Output_SchedulerPolicy_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Output_SchedulerPolicy_State* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Output_SchedulerPolicy_State*>(
               &_Qos_Interfaces_Interface_Output_SchedulerPolicy_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    101;

  void Swap(Qos_Interfaces_Interface_Output_SchedulerPolicy_State* other);
  friend void swap(Qos_Interfaces_Interface_Output_SchedulerPolicy_State& a, Qos_Interfaces_Interface_Output_SchedulerPolicy_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Output_SchedulerPolicy_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Output_SchedulerPolicy_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Output_SchedulerPolicy_State& from);
  void MergeFrom(const Qos_Interfaces_Interface_Output_SchedulerPolicy_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Output_SchedulerPolicy_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue name = 131511290 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/state/name"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 131511290;
  const ::ywrapper::StringValue& name() const;
  ::ywrapper::StringValue* release_name();
  ::ywrapper::StringValue* mutable_name();
  void set_allocated_name(::ywrapper::StringValue* name);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* name_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicy_StateImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Output_SchedulerPolicy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy) */ {
 public:
  Qos_Interfaces_Interface_Output_SchedulerPolicy();
  virtual ~Qos_Interfaces_Interface_Output_SchedulerPolicy();

  Qos_Interfaces_Interface_Output_SchedulerPolicy(const Qos_Interfaces_Interface_Output_SchedulerPolicy& from);

  inline Qos_Interfaces_Interface_Output_SchedulerPolicy& operator=(const Qos_Interfaces_Interface_Output_SchedulerPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Output_SchedulerPolicy(Qos_Interfaces_Interface_Output_SchedulerPolicy&& from) noexcept
    : Qos_Interfaces_Interface_Output_SchedulerPolicy() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Output_SchedulerPolicy& operator=(Qos_Interfaces_Interface_Output_SchedulerPolicy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Output_SchedulerPolicy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Output_SchedulerPolicy* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Output_SchedulerPolicy*>(
               &_Qos_Interfaces_Interface_Output_SchedulerPolicy_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    102;

  void Swap(Qos_Interfaces_Interface_Output_SchedulerPolicy* other);
  friend void swap(Qos_Interfaces_Interface_Output_SchedulerPolicy& a, Qos_Interfaces_Interface_Output_SchedulerPolicy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Output_SchedulerPolicy* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Output_SchedulerPolicy* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Output_SchedulerPolicy& from);
  void MergeFrom(const Qos_Interfaces_Interface_Output_SchedulerPolicy& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Output_SchedulerPolicy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Interfaces_Interface_Output_SchedulerPolicy_Config Config;
  typedef Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers Schedulers;
  typedef Qos_Interfaces_Interface_Output_SchedulerPolicy_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers schedulers = 300824503 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers"];
  bool has_schedulers() const;
  void clear_schedulers();
  static const int kSchedulersFieldNumber = 300824503;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers& schedulers() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers* release_schedulers();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers* mutable_schedulers();
  void set_allocated_schedulers(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers* schedulers);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.State state = 422509776 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 422509776;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_State& state() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_State* release_state();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_State* state);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Config config = 507310111 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 507310111;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Config& config() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Config* release_config();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Config* config);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers* schedulers_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_State* state_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Config* config_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_SchedulerPolicyImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Output_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.State) */ {
 public:
  Qos_Interfaces_Interface_Output_State();
  virtual ~Qos_Interfaces_Interface_Output_State();

  Qos_Interfaces_Interface_Output_State(const Qos_Interfaces_Interface_Output_State& from);

  inline Qos_Interfaces_Interface_Output_State& operator=(const Qos_Interfaces_Interface_Output_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Output_State(Qos_Interfaces_Interface_Output_State&& from) noexcept
    : Qos_Interfaces_Interface_Output_State() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Output_State& operator=(Qos_Interfaces_Interface_Output_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Output_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Output_State* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Output_State*>(
               &_Qos_Interfaces_Interface_Output_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    103;

  void Swap(Qos_Interfaces_Interface_Output_State* other);
  friend void swap(Qos_Interfaces_Interface_Output_State& a, Qos_Interfaces_Interface_Output_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Output_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Output_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Output_State& from);
  void MergeFrom(const Qos_Interfaces_Interface_Output_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Output_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_Output_StateImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_Output : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output) */ {
 public:
  Qos_Interfaces_Interface_Output();
  virtual ~Qos_Interfaces_Interface_Output();

  Qos_Interfaces_Interface_Output(const Qos_Interfaces_Interface_Output& from);

  inline Qos_Interfaces_Interface_Output& operator=(const Qos_Interfaces_Interface_Output& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_Output(Qos_Interfaces_Interface_Output&& from) noexcept
    : Qos_Interfaces_Interface_Output() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_Output& operator=(Qos_Interfaces_Interface_Output&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_Output& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_Output* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_Output*>(
               &_Qos_Interfaces_Interface_Output_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    104;

  void Swap(Qos_Interfaces_Interface_Output* other);
  friend void swap(Qos_Interfaces_Interface_Output& a, Qos_Interfaces_Interface_Output& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_Output* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_Output* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_Output& from);
  void MergeFrom(const Qos_Interfaces_Interface_Output& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_Output* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Interfaces_Interface_Output_Classifers Classifers;
  typedef Qos_Interfaces_Interface_Output_Config Config;
  typedef Qos_Interfaces_Interface_Output_InterfaceRef InterfaceRef;
  typedef Qos_Interfaces_Interface_Output_Queues Queues;
  typedef Qos_Interfaces_Interface_Output_SchedulerPolicy SchedulerPolicy;
  typedef Qos_Interfaces_Interface_Output_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef interface_ref = 13944721 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref"];
  bool has_interface_ref() const;
  void clear_interface_ref();
  static const int kInterfaceRefFieldNumber = 13944721;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef& interface_ref() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef* release_interface_ref();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef* mutable_interface_ref();
  void set_allocated_interface_ref(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef* interface_ref);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.State state = 109678103 [(.yext.schemapath) = "/qos/interfaces/interface/output/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 109678103;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_State& state() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_State* release_state();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_State* state);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues queues = 208565052 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues"];
  bool has_queues() const;
  void clear_queues();
  static const int kQueuesFieldNumber = 208565052;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues& queues() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues* release_queues();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues* mutable_queues();
  void set_allocated_queues(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues* queues);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers classifers = 324405479 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers"];
  bool has_classifers() const;
  void clear_classifers();
  static const int kClassifersFieldNumber = 324405479;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers& classifers() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers* release_classifers();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers* mutable_classifers();
  void set_allocated_classifers(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers* classifers);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy scheduler_policy = 345632622 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy"];
  bool has_scheduler_policy() const;
  void clear_scheduler_policy();
  static const int kSchedulerPolicyFieldNumber = 345632622;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy& scheduler_policy() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy* release_scheduler_policy();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy* mutable_scheduler_policy();
  void set_allocated_scheduler_policy(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy* scheduler_policy);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Config config = 362175482 [(.yext.schemapath) = "/qos/interfaces/interface/output/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 362175482;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Config& config() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Config* release_config();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Config* config);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef* interface_ref_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_State* state_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues* queues_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers* classifers_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy* scheduler_policy_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Config* config_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_OutputImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface.State) */ {
 public:
  Qos_Interfaces_Interface_State();
  virtual ~Qos_Interfaces_Interface_State();

  Qos_Interfaces_Interface_State(const Qos_Interfaces_Interface_State& from);

  inline Qos_Interfaces_Interface_State& operator=(const Qos_Interfaces_Interface_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface_State(Qos_Interfaces_Interface_State&& from) noexcept
    : Qos_Interfaces_Interface_State() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface_State& operator=(Qos_Interfaces_Interface_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface_State* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface_State*>(
               &_Qos_Interfaces_Interface_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    105;

  void Swap(Qos_Interfaces_Interface_State* other);
  friend void swap(Qos_Interfaces_Interface_State& a, Qos_Interfaces_Interface_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface_State& from);
  void MergeFrom(const Qos_Interfaces_Interface_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue interface_id = 173808393 [(.yext.schemapath) = "/qos/interfaces/interface/state/interface-id"];
  bool has_interface_id() const;
  void clear_interface_id();
  static const int kInterfaceIdFieldNumber = 173808393;
  const ::ywrapper::StringValue& interface_id() const;
  ::ywrapper::StringValue* release_interface_id();
  ::ywrapper::StringValue* mutable_interface_id();
  void set_allocated_interface_id(::ywrapper::StringValue* interface_id);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* interface_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_Interface_StateImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_Interface : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.Interface) */ {
 public:
  Qos_Interfaces_Interface();
  virtual ~Qos_Interfaces_Interface();

  Qos_Interfaces_Interface(const Qos_Interfaces_Interface& from);

  inline Qos_Interfaces_Interface& operator=(const Qos_Interfaces_Interface& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_Interface(Qos_Interfaces_Interface&& from) noexcept
    : Qos_Interfaces_Interface() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_Interface& operator=(Qos_Interfaces_Interface&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_Interface& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_Interface* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_Interface*>(
               &_Qos_Interfaces_Interface_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    106;

  void Swap(Qos_Interfaces_Interface* other);
  friend void swap(Qos_Interfaces_Interface& a, Qos_Interfaces_Interface& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_Interface* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_Interface* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_Interface& from);
  void MergeFrom(const Qos_Interfaces_Interface& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_Interface* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Interfaces_Interface_Config Config;
  typedef Qos_Interfaces_Interface_Input Input;
  typedef Qos_Interfaces_Interface_InterfaceRef InterfaceRef;
  typedef Qos_Interfaces_Interface_Output Output;
  typedef Qos_Interfaces_Interface_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Config config = 151272640 [(.yext.schemapath) = "/qos/interfaces/interface/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 151272640;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Config& config() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Config* release_config();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Config* config);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input input = 185281278 [(.yext.schemapath) = "/qos/interfaces/interface/input"];
  bool has_input() const;
  void clear_input();
  static const int kInputFieldNumber = 185281278;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input& input() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input* release_input();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input* mutable_input();
  void set_allocated_input(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input* input);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.State state = 236972729 [(.yext.schemapath) = "/qos/interfaces/interface/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 236972729;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_State& state() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_State* release_state();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_Interfaces_Interface_State* state);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef interface_ref = 340560111 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref"];
  bool has_interface_ref() const;
  void clear_interface_ref();
  static const int kInterfaceRefFieldNumber = 340560111;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef& interface_ref() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef* release_interface_ref();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef* mutable_interface_ref();
  void set_allocated_interface_ref(::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef* interface_ref);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output output = 494792021 [(.yext.schemapath) = "/qos/interfaces/interface/output"];
  bool has_output() const;
  void clear_output();
  static const int kOutputFieldNumber = 494792021;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output& output() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output* release_output();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output* mutable_output();
  void set_allocated_output(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output* output);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.Interface)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Config* config_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input* input_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_State* state_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef* interface_ref_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output* output_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_InterfaceImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces_InterfaceKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey) */ {
 public:
  Qos_Interfaces_InterfaceKey();
  virtual ~Qos_Interfaces_InterfaceKey();

  Qos_Interfaces_InterfaceKey(const Qos_Interfaces_InterfaceKey& from);

  inline Qos_Interfaces_InterfaceKey& operator=(const Qos_Interfaces_InterfaceKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces_InterfaceKey(Qos_Interfaces_InterfaceKey&& from) noexcept
    : Qos_Interfaces_InterfaceKey() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces_InterfaceKey& operator=(Qos_Interfaces_InterfaceKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces_InterfaceKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces_InterfaceKey* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces_InterfaceKey*>(
               &_Qos_Interfaces_InterfaceKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    107;

  void Swap(Qos_Interfaces_InterfaceKey* other);
  friend void swap(Qos_Interfaces_InterfaceKey& a, Qos_Interfaces_InterfaceKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces_InterfaceKey* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces_InterfaceKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces_InterfaceKey& from);
  void MergeFrom(const Qos_Interfaces_InterfaceKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces_InterfaceKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string interface_id = 1 [(.yext.schemapath) = "/qos/interfaces/interface/interface-id"];
  void clear_interface_id();
  static const int kInterfaceIdFieldNumber = 1;
  const ::std::string& interface_id() const;
  void set_interface_id(const ::std::string& value);
  #if LANG_CXX11
  void set_interface_id(::std::string&& value);
  #endif
  void set_interface_id(const char* value);
  void set_interface_id(const char* value, size_t size);
  ::std::string* mutable_interface_id();
  ::std::string* release_interface_id();
  void set_allocated_interface_id(::std::string* interface_id);

  // .openconfig.openconfig_qos.Qos.Interfaces.Interface interface = 2;
  bool has_interface() const;
  void clear_interface();
  static const int kInterfaceFieldNumber = 2;
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface& interface() const;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface* release_interface();
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface* mutable_interface();
  void set_allocated_interface(::openconfig::openconfig_qos::Qos_Interfaces_Interface* interface);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr interface_id_;
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface* interface_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Interfaces_InterfaceKeyImpl();
};
// -------------------------------------------------------------------

class Qos_Interfaces : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Interfaces) */ {
 public:
  Qos_Interfaces();
  virtual ~Qos_Interfaces();

  Qos_Interfaces(const Qos_Interfaces& from);

  inline Qos_Interfaces& operator=(const Qos_Interfaces& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Interfaces(Qos_Interfaces&& from) noexcept
    : Qos_Interfaces() {
    *this = ::std::move(from);
  }

  inline Qos_Interfaces& operator=(Qos_Interfaces&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Interfaces& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Interfaces* internal_default_instance() {
    return reinterpret_cast<const Qos_Interfaces*>(
               &_Qos_Interfaces_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    108;

  void Swap(Qos_Interfaces* other);
  friend void swap(Qos_Interfaces& a, Qos_Interfaces& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Interfaces* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Interfaces* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Interfaces& from);
  void MergeFrom(const Qos_Interfaces& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Interfaces* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Interfaces_Interface Interface;
  typedef Qos_Interfaces_InterfaceKey InterfaceKey;

  // accessors -------------------------------------------------------

  // repeated .openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey interface = 178908543 [(.yext.schemapath) = "/qos/interfaces/interface"];
  int interface_size() const;
  void clear_interface();
  static const int kInterfaceFieldNumber = 178908543;
  const ::openconfig::openconfig_qos::Qos_Interfaces_InterfaceKey& interface(int index) const;
  ::openconfig::openconfig_qos::Qos_Interfaces_InterfaceKey* mutable_interface(int index);
  ::openconfig::openconfig_qos::Qos_Interfaces_InterfaceKey* add_interface();
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_InterfaceKey >*
      mutable_interface();
  const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_InterfaceKey >&
      interface() const;

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Interfaces)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_InterfaceKey > interface_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_InterfacesImpl();
};
// -------------------------------------------------------------------

class Qos_Queues_Queue_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Queues.Queue.Config) */ {
 public:
  Qos_Queues_Queue_Config();
  virtual ~Qos_Queues_Queue_Config();

  Qos_Queues_Queue_Config(const Qos_Queues_Queue_Config& from);

  inline Qos_Queues_Queue_Config& operator=(const Qos_Queues_Queue_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Queues_Queue_Config(Qos_Queues_Queue_Config&& from) noexcept
    : Qos_Queues_Queue_Config() {
    *this = ::std::move(from);
  }

  inline Qos_Queues_Queue_Config& operator=(Qos_Queues_Queue_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Queues_Queue_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Queues_Queue_Config* internal_default_instance() {
    return reinterpret_cast<const Qos_Queues_Queue_Config*>(
               &_Qos_Queues_Queue_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    109;

  void Swap(Qos_Queues_Queue_Config* other);
  friend void swap(Qos_Queues_Queue_Config& a, Qos_Queues_Queue_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Queues_Queue_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Queues_Queue_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Queues_Queue_Config& from);
  void MergeFrom(const Qos_Queues_Queue_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Queues_Queue_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue name = 135146606 [(.yext.schemapath) = "/qos/queues/queue/config/name"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 135146606;
  const ::ywrapper::StringValue& name() const;
  ::ywrapper::StringValue* release_name();
  ::ywrapper::StringValue* mutable_name();
  void set_allocated_name(::ywrapper::StringValue* name);

  // .openconfig.enums.OpenconfigQosTypesQOSQUEUETYPE queue_type = 351938521 [(.yext.schemapath) = "/qos/queues/queue/config/queue-type"];
  void clear_queue_type();
  static const int kQueueTypeFieldNumber = 351938521;
  ::openconfig::enums::OpenconfigQosTypesQOSQUEUETYPE queue_type() const;
  void set_queue_type(::openconfig::enums::OpenconfigQosTypesQOSQUEUETYPE value);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Queues.Queue.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* name_;
  int queue_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues_Queue_ConfigImpl();
};
// -------------------------------------------------------------------

class Qos_Queues_Queue_Red_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Queues.Queue.Red.Config) */ {
 public:
  Qos_Queues_Queue_Red_Config();
  virtual ~Qos_Queues_Queue_Red_Config();

  Qos_Queues_Queue_Red_Config(const Qos_Queues_Queue_Red_Config& from);

  inline Qos_Queues_Queue_Red_Config& operator=(const Qos_Queues_Queue_Red_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Queues_Queue_Red_Config(Qos_Queues_Queue_Red_Config&& from) noexcept
    : Qos_Queues_Queue_Red_Config() {
    *this = ::std::move(from);
  }

  inline Qos_Queues_Queue_Red_Config& operator=(Qos_Queues_Queue_Red_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Queues_Queue_Red_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Queues_Queue_Red_Config* internal_default_instance() {
    return reinterpret_cast<const Qos_Queues_Queue_Red_Config*>(
               &_Qos_Queues_Queue_Red_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    110;

  void Swap(Qos_Queues_Queue_Red_Config* other);
  friend void swap(Qos_Queues_Queue_Red_Config& a, Qos_Queues_Queue_Red_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Queues_Queue_Red_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Queues_Queue_Red_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Queues_Queue_Red_Config& from);
  void MergeFrom(const Qos_Queues_Queue_Red_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Queues_Queue_Red_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue maxth = 77750307 [(.yext.schemapath) = "/qos/queues/queue/red/config/maxth"];
  bool has_maxth() const;
  void clear_maxth();
  static const int kMaxthFieldNumber = 77750307;
  const ::ywrapper::UintValue& maxth() const;
  ::ywrapper::UintValue* release_maxth();
  ::ywrapper::UintValue* mutable_maxth();
  void set_allocated_maxth(::ywrapper::UintValue* maxth);

  // .ywrapper.UintValue minth = 301751197 [(.yext.schemapath) = "/qos/queues/queue/red/config/minth"];
  bool has_minth() const;
  void clear_minth();
  static const int kMinthFieldNumber = 301751197;
  const ::ywrapper::UintValue& minth() const;
  ::ywrapper::UintValue* release_minth();
  ::ywrapper::UintValue* mutable_minth();
  void set_allocated_minth(::ywrapper::UintValue* minth);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Queues.Queue.Red.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* maxth_;
  ::ywrapper::UintValue* minth_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues_Queue_Red_ConfigImpl();
};
// -------------------------------------------------------------------

class Qos_Queues_Queue_Red_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Queues.Queue.Red.State) */ {
 public:
  Qos_Queues_Queue_Red_State();
  virtual ~Qos_Queues_Queue_Red_State();

  Qos_Queues_Queue_Red_State(const Qos_Queues_Queue_Red_State& from);

  inline Qos_Queues_Queue_Red_State& operator=(const Qos_Queues_Queue_Red_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Queues_Queue_Red_State(Qos_Queues_Queue_Red_State&& from) noexcept
    : Qos_Queues_Queue_Red_State() {
    *this = ::std::move(from);
  }

  inline Qos_Queues_Queue_Red_State& operator=(Qos_Queues_Queue_Red_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Queues_Queue_Red_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Queues_Queue_Red_State* internal_default_instance() {
    return reinterpret_cast<const Qos_Queues_Queue_Red_State*>(
               &_Qos_Queues_Queue_Red_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    111;

  void Swap(Qos_Queues_Queue_Red_State* other);
  friend void swap(Qos_Queues_Queue_Red_State& a, Qos_Queues_Queue_Red_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Queues_Queue_Red_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Queues_Queue_Red_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Queues_Queue_Red_State& from);
  void MergeFrom(const Qos_Queues_Queue_Red_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Queues_Queue_Red_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue minth = 316915032 [(.yext.schemapath) = "/qos/queues/queue/red/state/minth"];
  bool has_minth() const;
  void clear_minth();
  static const int kMinthFieldNumber = 316915032;
  const ::ywrapper::UintValue& minth() const;
  ::ywrapper::UintValue* release_minth();
  ::ywrapper::UintValue* mutable_minth();
  void set_allocated_minth(::ywrapper::UintValue* minth);

  // .ywrapper.UintValue maxth = 499507070 [(.yext.schemapath) = "/qos/queues/queue/red/state/maxth"];
  bool has_maxth() const;
  void clear_maxth();
  static const int kMaxthFieldNumber = 499507070;
  const ::ywrapper::UintValue& maxth() const;
  ::ywrapper::UintValue* release_maxth();
  ::ywrapper::UintValue* mutable_maxth();
  void set_allocated_maxth(::ywrapper::UintValue* maxth);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Queues.Queue.Red.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* minth_;
  ::ywrapper::UintValue* maxth_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues_Queue_Red_StateImpl();
};
// -------------------------------------------------------------------

class Qos_Queues_Queue_Red : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Queues.Queue.Red) */ {
 public:
  Qos_Queues_Queue_Red();
  virtual ~Qos_Queues_Queue_Red();

  Qos_Queues_Queue_Red(const Qos_Queues_Queue_Red& from);

  inline Qos_Queues_Queue_Red& operator=(const Qos_Queues_Queue_Red& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Queues_Queue_Red(Qos_Queues_Queue_Red&& from) noexcept
    : Qos_Queues_Queue_Red() {
    *this = ::std::move(from);
  }

  inline Qos_Queues_Queue_Red& operator=(Qos_Queues_Queue_Red&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Queues_Queue_Red& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Queues_Queue_Red* internal_default_instance() {
    return reinterpret_cast<const Qos_Queues_Queue_Red*>(
               &_Qos_Queues_Queue_Red_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    112;

  void Swap(Qos_Queues_Queue_Red* other);
  friend void swap(Qos_Queues_Queue_Red& a, Qos_Queues_Queue_Red& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Queues_Queue_Red* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Queues_Queue_Red* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Queues_Queue_Red& from);
  void MergeFrom(const Qos_Queues_Queue_Red& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Queues_Queue_Red* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Queues_Queue_Red_Config Config;
  typedef Qos_Queues_Queue_Red_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.Queues.Queue.Red.State state = 443004749 [(.yext.schemapath) = "/qos/queues/queue/red/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 443004749;
  const ::openconfig::openconfig_qos::Qos_Queues_Queue_Red_State& state() const;
  ::openconfig::openconfig_qos::Qos_Queues_Queue_Red_State* release_state();
  ::openconfig::openconfig_qos::Qos_Queues_Queue_Red_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_Queues_Queue_Red_State* state);

  // .openconfig.openconfig_qos.Qos.Queues.Queue.Red.Config config = 530804788 [(.yext.schemapath) = "/qos/queues/queue/red/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 530804788;
  const ::openconfig::openconfig_qos::Qos_Queues_Queue_Red_Config& config() const;
  ::openconfig::openconfig_qos::Qos_Queues_Queue_Red_Config* release_config();
  ::openconfig::openconfig_qos::Qos_Queues_Queue_Red_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_qos::Qos_Queues_Queue_Red_Config* config);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Queues.Queue.Red)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_Queues_Queue_Red_State* state_;
  ::openconfig::openconfig_qos::Qos_Queues_Queue_Red_Config* config_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues_Queue_RedImpl();
};
// -------------------------------------------------------------------

class Qos_Queues_Queue_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Queues.Queue.State) */ {
 public:
  Qos_Queues_Queue_State();
  virtual ~Qos_Queues_Queue_State();

  Qos_Queues_Queue_State(const Qos_Queues_Queue_State& from);

  inline Qos_Queues_Queue_State& operator=(const Qos_Queues_Queue_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Queues_Queue_State(Qos_Queues_Queue_State&& from) noexcept
    : Qos_Queues_Queue_State() {
    *this = ::std::move(from);
  }

  inline Qos_Queues_Queue_State& operator=(Qos_Queues_Queue_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Queues_Queue_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Queues_Queue_State* internal_default_instance() {
    return reinterpret_cast<const Qos_Queues_Queue_State*>(
               &_Qos_Queues_Queue_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    113;

  void Swap(Qos_Queues_Queue_State* other);
  friend void swap(Qos_Queues_Queue_State& a, Qos_Queues_Queue_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Queues_Queue_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Queues_Queue_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Queues_Queue_State& from);
  void MergeFrom(const Qos_Queues_Queue_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Queues_Queue_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue name = 454266209 [(.yext.schemapath) = "/qos/queues/queue/state/name"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 454266209;
  const ::ywrapper::StringValue& name() const;
  ::ywrapper::StringValue* release_name();
  ::ywrapper::StringValue* mutable_name();
  void set_allocated_name(::ywrapper::StringValue* name);

  // .openconfig.enums.OpenconfigQosTypesQOSQUEUETYPE queue_type = 390406498 [(.yext.schemapath) = "/qos/queues/queue/state/queue-type"];
  void clear_queue_type();
  static const int kQueueTypeFieldNumber = 390406498;
  ::openconfig::enums::OpenconfigQosTypesQOSQUEUETYPE queue_type() const;
  void set_queue_type(::openconfig::enums::OpenconfigQosTypesQOSQUEUETYPE value);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Queues.Queue.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* name_;
  int queue_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues_Queue_StateImpl();
};
// -------------------------------------------------------------------

class Qos_Queues_Queue_Wred_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.Config) */ {
 public:
  Qos_Queues_Queue_Wred_Config();
  virtual ~Qos_Queues_Queue_Wred_Config();

  Qos_Queues_Queue_Wred_Config(const Qos_Queues_Queue_Wred_Config& from);

  inline Qos_Queues_Queue_Wred_Config& operator=(const Qos_Queues_Queue_Wred_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Queues_Queue_Wred_Config(Qos_Queues_Queue_Wred_Config&& from) noexcept
    : Qos_Queues_Queue_Wred_Config() {
    *this = ::std::move(from);
  }

  inline Qos_Queues_Queue_Wred_Config& operator=(Qos_Queues_Queue_Wred_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Queues_Queue_Wred_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Queues_Queue_Wred_Config* internal_default_instance() {
    return reinterpret_cast<const Qos_Queues_Queue_Wred_Config*>(
               &_Qos_Queues_Queue_Wred_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    114;

  void Swap(Qos_Queues_Queue_Wred_Config* other);
  friend void swap(Qos_Queues_Queue_Wred_Config& a, Qos_Queues_Queue_Wred_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Queues_Queue_Wred_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Queues_Queue_Wred_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Queues_Queue_Wred_Config& from);
  void MergeFrom(const Qos_Queues_Queue_Wred_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Queues_Queue_Wred_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues_Queue_Wred_ConfigImpl();
};
// -------------------------------------------------------------------

class Qos_Queues_Queue_Wred_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.State) */ {
 public:
  Qos_Queues_Queue_Wred_State();
  virtual ~Qos_Queues_Queue_Wred_State();

  Qos_Queues_Queue_Wred_State(const Qos_Queues_Queue_Wred_State& from);

  inline Qos_Queues_Queue_Wred_State& operator=(const Qos_Queues_Queue_Wred_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Queues_Queue_Wred_State(Qos_Queues_Queue_Wred_State&& from) noexcept
    : Qos_Queues_Queue_Wred_State() {
    *this = ::std::move(from);
  }

  inline Qos_Queues_Queue_Wred_State& operator=(Qos_Queues_Queue_Wred_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Queues_Queue_Wred_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Queues_Queue_Wred_State* internal_default_instance() {
    return reinterpret_cast<const Qos_Queues_Queue_Wred_State*>(
               &_Qos_Queues_Queue_Wred_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    115;

  void Swap(Qos_Queues_Queue_Wred_State* other);
  friend void swap(Qos_Queues_Queue_Wred_State& a, Qos_Queues_Queue_Wred_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Queues_Queue_Wred_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Queues_Queue_Wred_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Queues_Queue_Wred_State& from);
  void MergeFrom(const Qos_Queues_Queue_Wred_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Queues_Queue_Wred_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues_Queue_Wred_StateImpl();
};
// -------------------------------------------------------------------

class Qos_Queues_Queue_Wred : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Queues.Queue.Wred) */ {
 public:
  Qos_Queues_Queue_Wred();
  virtual ~Qos_Queues_Queue_Wred();

  Qos_Queues_Queue_Wred(const Qos_Queues_Queue_Wred& from);

  inline Qos_Queues_Queue_Wred& operator=(const Qos_Queues_Queue_Wred& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Queues_Queue_Wred(Qos_Queues_Queue_Wred&& from) noexcept
    : Qos_Queues_Queue_Wred() {
    *this = ::std::move(from);
  }

  inline Qos_Queues_Queue_Wred& operator=(Qos_Queues_Queue_Wred&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Queues_Queue_Wred& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Queues_Queue_Wred* internal_default_instance() {
    return reinterpret_cast<const Qos_Queues_Queue_Wred*>(
               &_Qos_Queues_Queue_Wred_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    116;

  void Swap(Qos_Queues_Queue_Wred* other);
  friend void swap(Qos_Queues_Queue_Wred& a, Qos_Queues_Queue_Wred& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Queues_Queue_Wred* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Queues_Queue_Wred* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Queues_Queue_Wred& from);
  void MergeFrom(const Qos_Queues_Queue_Wred& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Queues_Queue_Wred* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Queues_Queue_Wred_Config Config;
  typedef Qos_Queues_Queue_Wred_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.Queues.Queue.Wred.Config config = 22449995 [(.yext.schemapath) = "/qos/queues/queue/wred/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 22449995;
  const ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_Config& config() const;
  ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_Config* release_config();
  ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_Config* config);

  // .openconfig.openconfig_qos.Qos.Queues.Queue.Wred.State state = 29756812 [(.yext.schemapath) = "/qos/queues/queue/wred/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 29756812;
  const ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_State& state() const;
  ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_State* release_state();
  ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_State* state);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Queues.Queue.Wred)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_Config* config_;
  ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_State* state_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues_Queue_WredImpl();
};
// -------------------------------------------------------------------

class Qos_Queues_Queue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Queues.Queue) */ {
 public:
  Qos_Queues_Queue();
  virtual ~Qos_Queues_Queue();

  Qos_Queues_Queue(const Qos_Queues_Queue& from);

  inline Qos_Queues_Queue& operator=(const Qos_Queues_Queue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Queues_Queue(Qos_Queues_Queue&& from) noexcept
    : Qos_Queues_Queue() {
    *this = ::std::move(from);
  }

  inline Qos_Queues_Queue& operator=(Qos_Queues_Queue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Queues_Queue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Queues_Queue* internal_default_instance() {
    return reinterpret_cast<const Qos_Queues_Queue*>(
               &_Qos_Queues_Queue_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    117;

  void Swap(Qos_Queues_Queue* other);
  friend void swap(Qos_Queues_Queue& a, Qos_Queues_Queue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Queues_Queue* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Queues_Queue* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Queues_Queue& from);
  void MergeFrom(const Qos_Queues_Queue& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Queues_Queue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Queues_Queue_Config Config;
  typedef Qos_Queues_Queue_Red Red;
  typedef Qos_Queues_Queue_State State;
  typedef Qos_Queues_Queue_Wred Wred;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.Queues.Queue.Red red = 36543379 [(.yext.schemapath) = "/qos/queues/queue/red"];
  bool has_red() const;
  void clear_red();
  static const int kRedFieldNumber = 36543379;
  const ::openconfig::openconfig_qos::Qos_Queues_Queue_Red& red() const;
  ::openconfig::openconfig_qos::Qos_Queues_Queue_Red* release_red();
  ::openconfig::openconfig_qos::Qos_Queues_Queue_Red* mutable_red();
  void set_allocated_red(::openconfig::openconfig_qos::Qos_Queues_Queue_Red* red);

  // .openconfig.openconfig_qos.Qos.Queues.Queue.Config config = 173754668 [(.yext.schemapath) = "/qos/queues/queue/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 173754668;
  const ::openconfig::openconfig_qos::Qos_Queues_Queue_Config& config() const;
  ::openconfig::openconfig_qos::Qos_Queues_Queue_Config* release_config();
  ::openconfig::openconfig_qos::Qos_Queues_Queue_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_qos::Qos_Queues_Queue_Config* config);

  // .openconfig.openconfig_qos.Qos.Queues.Queue.State state = 213681445 [(.yext.schemapath) = "/qos/queues/queue/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 213681445;
  const ::openconfig::openconfig_qos::Qos_Queues_Queue_State& state() const;
  ::openconfig::openconfig_qos::Qos_Queues_Queue_State* release_state();
  ::openconfig::openconfig_qos::Qos_Queues_Queue_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_Queues_Queue_State* state);

  // .openconfig.openconfig_qos.Qos.Queues.Queue.Wred wred = 285364058 [(.yext.schemapath) = "/qos/queues/queue/wred"];
  bool has_wred() const;
  void clear_wred();
  static const int kWredFieldNumber = 285364058;
  const ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred& wred() const;
  ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred* release_wred();
  ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred* mutable_wred();
  void set_allocated_wred(::openconfig::openconfig_qos::Qos_Queues_Queue_Wred* wred);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Queues.Queue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_Queues_Queue_Red* red_;
  ::openconfig::openconfig_qos::Qos_Queues_Queue_Config* config_;
  ::openconfig::openconfig_qos::Qos_Queues_Queue_State* state_;
  ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred* wred_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues_QueueImpl();
};
// -------------------------------------------------------------------

class Qos_Queues_QueueKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Queues.QueueKey) */ {
 public:
  Qos_Queues_QueueKey();
  virtual ~Qos_Queues_QueueKey();

  Qos_Queues_QueueKey(const Qos_Queues_QueueKey& from);

  inline Qos_Queues_QueueKey& operator=(const Qos_Queues_QueueKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Queues_QueueKey(Qos_Queues_QueueKey&& from) noexcept
    : Qos_Queues_QueueKey() {
    *this = ::std::move(from);
  }

  inline Qos_Queues_QueueKey& operator=(Qos_Queues_QueueKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Queues_QueueKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Queues_QueueKey* internal_default_instance() {
    return reinterpret_cast<const Qos_Queues_QueueKey*>(
               &_Qos_Queues_QueueKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    118;

  void Swap(Qos_Queues_QueueKey* other);
  friend void swap(Qos_Queues_QueueKey& a, Qos_Queues_QueueKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Queues_QueueKey* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Queues_QueueKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Queues_QueueKey& from);
  void MergeFrom(const Qos_Queues_QueueKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Queues_QueueKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1 [(.yext.schemapath) = "/qos/queues/queue/name"];
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .openconfig.openconfig_qos.Qos.Queues.Queue queue = 2;
  bool has_queue() const;
  void clear_queue();
  static const int kQueueFieldNumber = 2;
  const ::openconfig::openconfig_qos::Qos_Queues_Queue& queue() const;
  ::openconfig::openconfig_qos::Qos_Queues_Queue* release_queue();
  ::openconfig::openconfig_qos::Qos_Queues_Queue* mutable_queue();
  void set_allocated_queue(::openconfig::openconfig_qos::Qos_Queues_Queue* queue);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Queues.QueueKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::openconfig::openconfig_qos::Qos_Queues_Queue* queue_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_Queues_QueueKeyImpl();
};
// -------------------------------------------------------------------

class Qos_Queues : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.Queues) */ {
 public:
  Qos_Queues();
  virtual ~Qos_Queues();

  Qos_Queues(const Qos_Queues& from);

  inline Qos_Queues& operator=(const Qos_Queues& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_Queues(Qos_Queues&& from) noexcept
    : Qos_Queues() {
    *this = ::std::move(from);
  }

  inline Qos_Queues& operator=(Qos_Queues&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_Queues& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_Queues* internal_default_instance() {
    return reinterpret_cast<const Qos_Queues*>(
               &_Qos_Queues_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    119;

  void Swap(Qos_Queues* other);
  friend void swap(Qos_Queues& a, Qos_Queues& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_Queues* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_Queues* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_Queues& from);
  void MergeFrom(const Qos_Queues& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_Queues* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Queues_Queue Queue;
  typedef Qos_Queues_QueueKey QueueKey;

  // accessors -------------------------------------------------------

  // repeated .openconfig.openconfig_qos.Qos.Queues.QueueKey queue = 108026875 [(.yext.schemapath) = "/qos/queues/queue"];
  int queue_size() const;
  void clear_queue();
  static const int kQueueFieldNumber = 108026875;
  const ::openconfig::openconfig_qos::Qos_Queues_QueueKey& queue(int index) const;
  ::openconfig::openconfig_qos::Qos_Queues_QueueKey* mutable_queue(int index);
  ::openconfig::openconfig_qos::Qos_Queues_QueueKey* add_queue();
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Queues_QueueKey >*
      mutable_queue();
  const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Queues_QueueKey >&
      queue() const;

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.Queues)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Queues_QueueKey > queue_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_QueuesImpl();
};
// -------------------------------------------------------------------

class Qos_SchedulerPolicies_SchedulerPolicy_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Config) */ {
 public:
  Qos_SchedulerPolicies_SchedulerPolicy_Config();
  virtual ~Qos_SchedulerPolicies_SchedulerPolicy_Config();

  Qos_SchedulerPolicies_SchedulerPolicy_Config(const Qos_SchedulerPolicies_SchedulerPolicy_Config& from);

  inline Qos_SchedulerPolicies_SchedulerPolicy_Config& operator=(const Qos_SchedulerPolicies_SchedulerPolicy_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_SchedulerPolicies_SchedulerPolicy_Config(Qos_SchedulerPolicies_SchedulerPolicy_Config&& from) noexcept
    : Qos_SchedulerPolicies_SchedulerPolicy_Config() {
    *this = ::std::move(from);
  }

  inline Qos_SchedulerPolicies_SchedulerPolicy_Config& operator=(Qos_SchedulerPolicies_SchedulerPolicy_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_SchedulerPolicies_SchedulerPolicy_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_SchedulerPolicies_SchedulerPolicy_Config* internal_default_instance() {
    return reinterpret_cast<const Qos_SchedulerPolicies_SchedulerPolicy_Config*>(
               &_Qos_SchedulerPolicies_SchedulerPolicy_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    120;

  void Swap(Qos_SchedulerPolicies_SchedulerPolicy_Config* other);
  friend void swap(Qos_SchedulerPolicies_SchedulerPolicy_Config& a, Qos_SchedulerPolicies_SchedulerPolicy_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_SchedulerPolicies_SchedulerPolicy_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_SchedulerPolicies_SchedulerPolicy_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Config& from);
  void MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue name = 15306115 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/config/name"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 15306115;
  const ::ywrapper::StringValue& name() const;
  ::ywrapper::StringValue* release_name();
  ::ywrapper::StringValue* mutable_name();
  void set_allocated_name(::ywrapper::StringValue* name);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* name_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_ConfigImpl();
};
// -------------------------------------------------------------------

class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config) */ {
 public:
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config();
  virtual ~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config();

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config& from);

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config& operator=(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config&& from) noexcept
    : Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config() {
    *this = ::std::move(from);
  }

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config& operator=(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config* internal_default_instance() {
    return reinterpret_cast<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config*>(
               &_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    121;

  void Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config* other);
  friend void swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config& a, Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config& from);
  void MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority Priority;
  static const Priority PRIORITY_UNSET =
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority_PRIORITY_UNSET;
  static const Priority PRIORITY_STRICT =
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority_PRIORITY_STRICT;
  static inline bool Priority_IsValid(int value) {
    return Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority_IsValid(value);
  }
  static const Priority Priority_MIN =
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority_Priority_MIN;
  static const Priority Priority_MAX =
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority_Priority_MAX;
  static const int Priority_ARRAYSIZE =
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority_Priority_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Priority_descriptor() {
    return Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority_descriptor();
  }
  static inline const ::std::string& Priority_Name(Priority value) {
    return Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority_Name(value);
  }
  static inline bool Priority_Parse(const ::std::string& name,
      Priority* value) {
    return Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue sequence = 189420374 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/sequence"];
  bool has_sequence() const;
  void clear_sequence();
  static const int kSequenceFieldNumber = 189420374;
  const ::ywrapper::UintValue& sequence() const;
  ::ywrapper::UintValue* release_sequence();
  ::ywrapper::UintValue* mutable_sequence();
  void set_allocated_sequence(::ywrapper::UintValue* sequence);

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config.Priority priority = 116027193 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/priority"];
  void clear_priority();
  static const int kPriorityFieldNumber = 116027193;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority priority() const;
  void set_priority(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority value);

  // .openconfig.enums.OpenconfigQosTypesQOSSCHEDULERTYPE type = 125973545 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/type"];
  void clear_type();
  static const int kTypeFieldNumber = 125973545;
  ::openconfig::enums::OpenconfigQosTypesQOSSCHEDULERTYPE type() const;
  void set_type(::openconfig::enums::OpenconfigQosTypesQOSSCHEDULERTYPE value);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* sequence_;
  int priority_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_ConfigImpl();
};
// -------------------------------------------------------------------

class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config) */ {
 public:
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config();
  virtual ~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config();

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config& from);

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config& operator=(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config&& from) noexcept
    : Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config() {
    *this = ::std::move(from);
  }

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config& operator=(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config* internal_default_instance() {
    return reinterpret_cast<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config*>(
               &_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    122;

  void Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config* other);
  friend void swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config& a, Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config& from);
  void MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType InputType;
  static const InputType INPUTTYPE_UNSET =
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType_INPUTTYPE_UNSET;
  static const InputType INPUTTYPE_QUEUE =
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType_INPUTTYPE_QUEUE;
  static const InputType INPUTTYPE_IN_PROFILE =
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType_INPUTTYPE_IN_PROFILE;
  static const InputType INPUTTYPE_OUT_PROFILE =
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType_INPUTTYPE_OUT_PROFILE;
  static inline bool InputType_IsValid(int value) {
    return Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType_IsValid(value);
  }
  static const InputType InputType_MIN =
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType_InputType_MIN;
  static const InputType InputType_MAX =
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType_InputType_MAX;
  static const int InputType_ARRAYSIZE =
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType_InputType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  InputType_descriptor() {
    return Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType_descriptor();
  }
  static inline const ::std::string& InputType_Name(InputType value) {
    return Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType_Name(value);
  }
  static inline bool InputType_Parse(const ::std::string& name,
      InputType* value) {
    return Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue weight = 396218658 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/weight"];
  bool has_weight() const;
  void clear_weight();
  static const int kWeightFieldNumber = 396218658;
  const ::ywrapper::UintValue& weight() const;
  ::ywrapper::UintValue* release_weight();
  ::ywrapper::UintValue* mutable_weight();
  void set_allocated_weight(::ywrapper::UintValue* weight);

  // .ywrapper.StringValue id = 424446001 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/id"];
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 424446001;
  const ::ywrapper::StringValue& id() const;
  ::ywrapper::StringValue* release_id();
  ::ywrapper::StringValue* mutable_id();
  void set_allocated_id(::ywrapper::StringValue* id);

  // .ywrapper.StringValue queue = 442686099 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/queue"];
  bool has_queue() const;
  void clear_queue();
  static const int kQueueFieldNumber = 442686099;
  const ::ywrapper::StringValue& queue() const;
  ::ywrapper::StringValue* release_queue();
  ::ywrapper::StringValue* mutable_queue();
  void set_allocated_queue(::ywrapper::StringValue* queue);

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config.InputType input_type = 323155511 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/input-type"];
  void clear_input_type();
  static const int kInputTypeFieldNumber = 323155511;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType input_type() const;
  void set_input_type(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType value);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* weight_;
  ::ywrapper::StringValue* id_;
  ::ywrapper::StringValue* queue_;
  int input_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_ConfigImpl();
};
// -------------------------------------------------------------------

class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State) */ {
 public:
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State();
  virtual ~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State();

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State& from);

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State& operator=(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State&& from) noexcept
    : Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State() {
    *this = ::std::move(from);
  }

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State& operator=(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State* internal_default_instance() {
    return reinterpret_cast<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State*>(
               &_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    123;

  void Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State* other);
  friend void swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State& a, Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State& from);
  void MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType InputType;
  static const InputType INPUTTYPE_UNSET =
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType_INPUTTYPE_UNSET;
  static const InputType INPUTTYPE_QUEUE =
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType_INPUTTYPE_QUEUE;
  static const InputType INPUTTYPE_IN_PROFILE =
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType_INPUTTYPE_IN_PROFILE;
  static const InputType INPUTTYPE_OUT_PROFILE =
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType_INPUTTYPE_OUT_PROFILE;
  static inline bool InputType_IsValid(int value) {
    return Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType_IsValid(value);
  }
  static const InputType InputType_MIN =
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType_InputType_MIN;
  static const InputType InputType_MAX =
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType_InputType_MAX;
  static const int InputType_ARRAYSIZE =
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType_InputType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  InputType_descriptor() {
    return Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType_descriptor();
  }
  static inline const ::std::string& InputType_Name(InputType value) {
    return Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType_Name(value);
  }
  static inline bool InputType_Parse(const ::std::string& name,
      InputType* value) {
    return Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue weight = 141802883 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/weight"];
  bool has_weight() const;
  void clear_weight();
  static const int kWeightFieldNumber = 141802883;
  const ::ywrapper::UintValue& weight() const;
  ::ywrapper::UintValue* release_weight();
  ::ywrapper::UintValue* mutable_weight();
  void set_allocated_weight(::ywrapper::UintValue* weight);

  // .ywrapper.StringValue queue = 285927912 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/queue"];
  bool has_queue() const;
  void clear_queue();
  static const int kQueueFieldNumber = 285927912;
  const ::ywrapper::StringValue& queue() const;
  ::ywrapper::StringValue* release_queue();
  ::ywrapper::StringValue* mutable_queue();
  void set_allocated_queue(::ywrapper::StringValue* queue);

  // .ywrapper.StringValue id = 321502496 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/id"];
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 321502496;
  const ::ywrapper::StringValue& id() const;
  ::ywrapper::StringValue* release_id();
  ::ywrapper::StringValue* mutable_id();
  void set_allocated_id(::ywrapper::StringValue* id);

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State.InputType input_type = 255095878 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/input-type"];
  void clear_input_type();
  static const int kInputTypeFieldNumber = 255095878;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType input_type() const;
  void set_input_type(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType value);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* weight_;
  ::ywrapper::StringValue* queue_;
  ::ywrapper::StringValue* id_;
  int input_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_StateImpl();
};
// -------------------------------------------------------------------

class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input) */ {
 public:
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input();
  virtual ~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input();

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input& from);

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input& operator=(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input&& from) noexcept
    : Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input() {
    *this = ::std::move(from);
  }

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input& operator=(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input* internal_default_instance() {
    return reinterpret_cast<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input*>(
               &_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    124;

  void Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input* other);
  friend void swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input& a, Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input& from);
  void MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config Config;
  typedef Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State state = 308364152 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 308364152;
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State& state() const;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State* release_state();
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State* state);

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config config = 362916871 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 362916871;
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config& config() const;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config* release_config();
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config* config);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State* state_;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config* config_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputImpl();
};
// -------------------------------------------------------------------

class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey) */ {
 public:
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey();
  virtual ~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey();

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey& from);

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey& operator=(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey&& from) noexcept
    : Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey() {
    *this = ::std::move(from);
  }

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey& operator=(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey* internal_default_instance() {
    return reinterpret_cast<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey*>(
               &_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    125;

  void Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey* other);
  friend void swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey& a, Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey& from);
  void MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/id"];
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input input = 2;
  bool has_input() const;
  void clear_input();
  static const int kInputFieldNumber = 2;
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input& input() const;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input* release_input();
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input* mutable_input();
  void set_allocated_input(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input* input);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input* input_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKeyImpl();
};
// -------------------------------------------------------------------

class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs) */ {
 public:
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs();
  virtual ~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs();

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs& from);

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs& operator=(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs&& from) noexcept
    : Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs() {
    *this = ::std::move(from);
  }

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs& operator=(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs* internal_default_instance() {
    return reinterpret_cast<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs*>(
               &_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    126;

  void Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs* other);
  friend void swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs& a, Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs& from);
  void MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input Input;
  typedef Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey InputKey;

  // accessors -------------------------------------------------------

  // repeated .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey input = 224691974 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input"];
  int input_size() const;
  void clear_input();
  static const int kInputFieldNumber = 224691974;
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey& input(int index) const;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey* mutable_input(int index);
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey* add_input();
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey >*
      mutable_input();
  const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey >&
      input() const;

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey > input_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_InputsImpl();
};
// -------------------------------------------------------------------

class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config) */ {
 public:
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config();
  virtual ~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config();

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config& from);

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config& operator=(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config&& from) noexcept
    : Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config() {
    *this = ::std::move(from);
  }

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config& operator=(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config* internal_default_instance() {
    return reinterpret_cast<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config*>(
               &_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    127;

  void Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config* other);
  friend void swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config& a, Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config& from);
  void MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue max_queue_depth_packets = 38247640 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/max-queue-depth-packets"];
  bool has_max_queue_depth_packets() const;
  void clear_max_queue_depth_packets();
  static const int kMaxQueueDepthPacketsFieldNumber = 38247640;
  const ::ywrapper::UintValue& max_queue_depth_packets() const;
  ::ywrapper::UintValue* release_max_queue_depth_packets();
  ::ywrapper::UintValue* mutable_max_queue_depth_packets();
  void set_allocated_max_queue_depth_packets(::ywrapper::UintValue* max_queue_depth_packets);

  // .ywrapper.UintValue bc = 100183769 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/bc"];
  bool has_bc() const;
  void clear_bc();
  static const int kBcFieldNumber = 100183769;
  const ::ywrapper::UintValue& bc() const;
  ::ywrapper::UintValue* release_bc();
  ::ywrapper::UintValue* mutable_bc();
  void set_allocated_bc(::ywrapper::UintValue* bc);

  // .ywrapper.UintValue cir_pct_remaining = 206933707 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/cir-pct-remaining"];
  bool has_cir_pct_remaining() const;
  void clear_cir_pct_remaining();
  static const int kCirPctRemainingFieldNumber = 206933707;
  const ::ywrapper::UintValue& cir_pct_remaining() const;
  ::ywrapper::UintValue* release_cir_pct_remaining();
  ::ywrapper::UintValue* mutable_cir_pct_remaining();
  void set_allocated_cir_pct_remaining(::ywrapper::UintValue* cir_pct_remaining);

  // .ywrapper.UintValue max_queue_depth_bytes = 279197854 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/max-queue-depth-bytes"];
  bool has_max_queue_depth_bytes() const;
  void clear_max_queue_depth_bytes();
  static const int kMaxQueueDepthBytesFieldNumber = 279197854;
  const ::ywrapper::UintValue& max_queue_depth_bytes() const;
  ::ywrapper::UintValue* release_max_queue_depth_bytes();
  ::ywrapper::UintValue* mutable_max_queue_depth_bytes();
  void set_allocated_max_queue_depth_bytes(::ywrapper::UintValue* max_queue_depth_bytes);

  // .ywrapper.UintValue cir_pct = 315109376 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/cir-pct"];
  bool has_cir_pct() const;
  void clear_cir_pct();
  static const int kCirPctFieldNumber = 315109376;
  const ::ywrapper::UintValue& cir_pct() const;
  ::ywrapper::UintValue* release_cir_pct();
  ::ywrapper::UintValue* mutable_cir_pct();
  void set_allocated_cir_pct(::ywrapper::UintValue* cir_pct);

  // .ywrapper.UintValue max_queue_depth_percent = 466868204 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/max-queue-depth-percent"];
  bool has_max_queue_depth_percent() const;
  void clear_max_queue_depth_percent();
  static const int kMaxQueueDepthPercentFieldNumber = 466868204;
  const ::ywrapper::UintValue& max_queue_depth_percent() const;
  ::ywrapper::UintValue* release_max_queue_depth_percent();
  ::ywrapper::UintValue* mutable_max_queue_depth_percent();
  void set_allocated_max_queue_depth_percent(::ywrapper::UintValue* max_queue_depth_percent);

  // .ywrapper.UintValue cir = 494749918 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/cir"];
  bool has_cir() const;
  void clear_cir();
  static const int kCirFieldNumber = 494749918;
  const ::ywrapper::UintValue& cir() const;
  ::ywrapper::UintValue* release_cir();
  ::ywrapper::UintValue* mutable_cir();
  void set_allocated_cir(::ywrapper::UintValue* cir);

  // .openconfig.enums.OpenconfigQosQueueBehavior queuing_behavior = 78239583 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/queuing-behavior"];
  void clear_queuing_behavior();
  static const int kQueuingBehaviorFieldNumber = 78239583;
  ::openconfig::enums::OpenconfigQosQueueBehavior queuing_behavior() const;
  void set_queuing_behavior(::openconfig::enums::OpenconfigQosQueueBehavior value);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* max_queue_depth_packets_;
  ::ywrapper::UintValue* bc_;
  ::ywrapper::UintValue* cir_pct_remaining_;
  ::ywrapper::UintValue* max_queue_depth_bytes_;
  ::ywrapper::UintValue* cir_pct_;
  ::ywrapper::UintValue* max_queue_depth_percent_;
  ::ywrapper::UintValue* cir_;
  int queuing_behavior_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConfigImpl();
};
// -------------------------------------------------------------------

class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config) */ {
 public:
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config();
  virtual ~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config();

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config& from);

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config& operator=(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config&& from) noexcept
    : Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config() {
    *this = ::std::move(from);
  }

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config& operator=(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config* internal_default_instance() {
    return reinterpret_cast<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config*>(
               &_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    128;

  void Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config* other);
  friend void swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config& a, Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config& from);
  void MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue set_dscp = 274036909 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/config/set-dscp"];
  bool has_set_dscp() const;
  void clear_set_dscp();
  static const int kSetDscpFieldNumber = 274036909;
  const ::ywrapper::UintValue& set_dscp() const;
  ::ywrapper::UintValue* release_set_dscp();
  ::ywrapper::UintValue* mutable_set_dscp();
  void set_allocated_set_dscp(::ywrapper::UintValue* set_dscp);

  // .ywrapper.UintValue set_dot1p = 347963663 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/config/set-dot1p"];
  bool has_set_dot1p() const;
  void clear_set_dot1p();
  static const int kSetDot1PFieldNumber = 347963663;
  const ::ywrapper::UintValue& set_dot1p() const;
  ::ywrapper::UintValue* release_set_dot1p();
  ::ywrapper::UintValue* mutable_set_dot1p();
  void set_allocated_set_dot1p(::ywrapper::UintValue* set_dot1p);

  // .ywrapper.UintValue set_mpls_tc = 407069875 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/config/set-mpls-tc"];
  bool has_set_mpls_tc() const;
  void clear_set_mpls_tc();
  static const int kSetMplsTcFieldNumber = 407069875;
  const ::ywrapper::UintValue& set_mpls_tc() const;
  ::ywrapper::UintValue* release_set_mpls_tc();
  ::ywrapper::UintValue* mutable_set_mpls_tc();
  void set_allocated_set_mpls_tc(::ywrapper::UintValue* set_mpls_tc);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* set_dscp_;
  ::ywrapper::UintValue* set_dot1p_;
  ::ywrapper::UintValue* set_mpls_tc_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_ConfigImpl();
};
// -------------------------------------------------------------------

class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State) */ {
 public:
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State();
  virtual ~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State();

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State& from);

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State& operator=(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State&& from) noexcept
    : Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State() {
    *this = ::std::move(from);
  }

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State& operator=(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State* internal_default_instance() {
    return reinterpret_cast<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State*>(
               &_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    129;

  void Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State* other);
  friend void swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State& a, Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State& from);
  void MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue set_dscp = 167728608 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-dscp"];
  bool has_set_dscp() const;
  void clear_set_dscp();
  static const int kSetDscpFieldNumber = 167728608;
  const ::ywrapper::UintValue& set_dscp() const;
  ::ywrapper::UintValue* release_set_dscp();
  ::ywrapper::UintValue* mutable_set_dscp();
  void set_allocated_set_dscp(::ywrapper::UintValue* set_dscp);

  // .ywrapper.UintValue set_mpls_tc = 205338668 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-mpls-tc"];
  bool has_set_mpls_tc() const;
  void clear_set_mpls_tc();
  static const int kSetMplsTcFieldNumber = 205338668;
  const ::ywrapper::UintValue& set_mpls_tc() const;
  ::ywrapper::UintValue* release_set_mpls_tc();
  ::ywrapper::UintValue* mutable_set_mpls_tc();
  void set_allocated_set_mpls_tc(::ywrapper::UintValue* set_mpls_tc);

  // .ywrapper.UintValue set_dot1p = 381011320 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-dot1p"];
  bool has_set_dot1p() const;
  void clear_set_dot1p();
  static const int kSetDot1PFieldNumber = 381011320;
  const ::ywrapper::UintValue& set_dot1p() const;
  ::ywrapper::UintValue* release_set_dot1p();
  ::ywrapper::UintValue* mutable_set_dot1p();
  void set_allocated_set_dot1p(::ywrapper::UintValue* set_dot1p);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* set_dscp_;
  ::ywrapper::UintValue* set_mpls_tc_;
  ::ywrapper::UintValue* set_dot1p_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_StateImpl();
};
// -------------------------------------------------------------------

class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction) */ {
 public:
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction();
  virtual ~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction();

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction& from);

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction& operator=(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction&& from) noexcept
    : Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction() {
    *this = ::std::move(from);
  }

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction& operator=(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction* internal_default_instance() {
    return reinterpret_cast<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction*>(
               &_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    130;

  void Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction* other);
  friend void swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction& a, Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction& from);
  void MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config Config;
  typedef Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config config = 263196799 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 263196799;
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config& config() const;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config* release_config();
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config* config);

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State state = 488106672 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 488106672;
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State& state() const;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State* release_state();
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State* state);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config* config_;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State* state_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformActionImpl();
};
// -------------------------------------------------------------------

class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config) */ {
 public:
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config();
  virtual ~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config();

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config& from);

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config& operator=(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config&& from) noexcept
    : Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config() {
    *this = ::std::move(from);
  }

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config& operator=(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config* internal_default_instance() {
    return reinterpret_cast<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config*>(
               &_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    131;

  void Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config* other);
  friend void swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config& a, Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config& from);
  void MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue set_dscp = 70544401 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config/set-dscp"];
  bool has_set_dscp() const;
  void clear_set_dscp();
  static const int kSetDscpFieldNumber = 70544401;
  const ::ywrapper::UintValue& set_dscp() const;
  ::ywrapper::UintValue* release_set_dscp();
  ::ywrapper::UintValue* mutable_set_dscp();
  void set_allocated_set_dscp(::ywrapper::UintValue* set_dscp);

  // .ywrapper.BoolValue drop = 131419485 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config/drop"];
  bool has_drop() const;
  void clear_drop();
  static const int kDropFieldNumber = 131419485;
  const ::ywrapper::BoolValue& drop() const;
  ::ywrapper::BoolValue* release_drop();
  ::ywrapper::BoolValue* mutable_drop();
  void set_allocated_drop(::ywrapper::BoolValue* drop);

  // .ywrapper.UintValue set_mpls_tc = 156774487 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config/set-mpls-tc"];
  bool has_set_mpls_tc() const;
  void clear_set_mpls_tc();
  static const int kSetMplsTcFieldNumber = 156774487;
  const ::ywrapper::UintValue& set_mpls_tc() const;
  ::ywrapper::UintValue* release_set_mpls_tc();
  ::ywrapper::UintValue* mutable_set_mpls_tc();
  void set_allocated_set_mpls_tc(::ywrapper::UintValue* set_mpls_tc);

  // .ywrapper.UintValue set_dot1p = 431798715 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config/set-dot1p"];
  bool has_set_dot1p() const;
  void clear_set_dot1p();
  static const int kSetDot1PFieldNumber = 431798715;
  const ::ywrapper::UintValue& set_dot1p() const;
  ::ywrapper::UintValue* release_set_dot1p();
  ::ywrapper::UintValue* mutable_set_dot1p();
  void set_allocated_set_dot1p(::ywrapper::UintValue* set_dot1p);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* set_dscp_;
  ::ywrapper::BoolValue* drop_;
  ::ywrapper::UintValue* set_mpls_tc_;
  ::ywrapper::UintValue* set_dot1p_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_ConfigImpl();
};
// -------------------------------------------------------------------

class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State) */ {
 public:
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State();
  virtual ~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State();

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State& from);

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State& operator=(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State&& from) noexcept
    : Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State() {
    *this = ::std::move(from);
  }

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State& operator=(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State* internal_default_instance() {
    return reinterpret_cast<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State*>(
               &_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    132;

  void Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State* other);
  friend void swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State& a, Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State& from);
  void MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue set_mpls_tc = 94135584 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-mpls-tc"];
  bool has_set_mpls_tc() const;
  void clear_set_mpls_tc();
  static const int kSetMplsTcFieldNumber = 94135584;
  const ::ywrapper::UintValue& set_mpls_tc() const;
  ::ywrapper::UintValue* release_set_mpls_tc();
  ::ywrapper::UintValue* mutable_set_mpls_tc();
  void set_allocated_set_mpls_tc(::ywrapper::UintValue* set_mpls_tc);

  // .ywrapper.UintValue set_dot1p = 132458132 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-dot1p"];
  bool has_set_dot1p() const;
  void clear_set_dot1p();
  static const int kSetDot1PFieldNumber = 132458132;
  const ::ywrapper::UintValue& set_dot1p() const;
  ::ywrapper::UintValue* release_set_dot1p();
  ::ywrapper::UintValue* mutable_set_dot1p();
  void set_allocated_set_dot1p(::ywrapper::UintValue* set_dot1p);

  // .ywrapper.BoolValue drop = 168830944 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/drop"];
  bool has_drop() const;
  void clear_drop();
  static const int kDropFieldNumber = 168830944;
  const ::ywrapper::BoolValue& drop() const;
  ::ywrapper::BoolValue* release_drop();
  ::ywrapper::BoolValue* mutable_drop();
  void set_allocated_drop(::ywrapper::BoolValue* drop);

  // .ywrapper.UintValue set_dscp = 500275780 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-dscp"];
  bool has_set_dscp() const;
  void clear_set_dscp();
  static const int kSetDscpFieldNumber = 500275780;
  const ::ywrapper::UintValue& set_dscp() const;
  ::ywrapper::UintValue* release_set_dscp();
  ::ywrapper::UintValue* mutable_set_dscp();
  void set_allocated_set_dscp(::ywrapper::UintValue* set_dscp);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* set_mpls_tc_;
  ::ywrapper::UintValue* set_dot1p_;
  ::ywrapper::BoolValue* drop_;
  ::ywrapper::UintValue* set_dscp_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_StateImpl();
};
// -------------------------------------------------------------------

class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction) */ {
 public:
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction();
  virtual ~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction();

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction& from);

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction& operator=(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction&& from) noexcept
    : Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction() {
    *this = ::std::move(from);
  }

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction& operator=(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction* internal_default_instance() {
    return reinterpret_cast<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction*>(
               &_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    133;

  void Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction* other);
  friend void swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction& a, Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction& from);
  void MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config Config;
  typedef Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config config = 333494515 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 333494515;
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config& config() const;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config* release_config();
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config* config);

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State state = 362036052 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 362036052;
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State& state() const;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State* release_state();
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State* state);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config* config_;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State* state_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedActionImpl();
};
// -------------------------------------------------------------------

class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State) */ {
 public:
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State();
  virtual ~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State();

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State& from);

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State& operator=(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State&& from) noexcept
    : Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State() {
    *this = ::std::move(from);
  }

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State& operator=(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State* internal_default_instance() {
    return reinterpret_cast<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State*>(
               &_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    134;

  void Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State* other);
  friend void swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State& a, Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State& from);
  void MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue bc = 76345220 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/bc"];
  bool has_bc() const;
  void clear_bc();
  static const int kBcFieldNumber = 76345220;
  const ::ywrapper::UintValue& bc() const;
  ::ywrapper::UintValue* release_bc();
  ::ywrapper::UintValue* mutable_bc();
  void set_allocated_bc(::ywrapper::UintValue* bc);

  // .ywrapper.UintValue max_queue_depth_percent = 99186575 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-percent"];
  bool has_max_queue_depth_percent() const;
  void clear_max_queue_depth_percent();
  static const int kMaxQueueDepthPercentFieldNumber = 99186575;
  const ::ywrapper::UintValue& max_queue_depth_percent() const;
  ::ywrapper::UintValue* release_max_queue_depth_percent();
  ::ywrapper::UintValue* mutable_max_queue_depth_percent();
  void set_allocated_max_queue_depth_percent(::ywrapper::UintValue* max_queue_depth_percent);

  // .ywrapper.UintValue cir_pct = 102978535 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir-pct"];
  bool has_cir_pct() const;
  void clear_cir_pct();
  static const int kCirPctFieldNumber = 102978535;
  const ::ywrapper::UintValue& cir_pct() const;
  ::ywrapper::UintValue* release_cir_pct();
  ::ywrapper::UintValue* mutable_cir_pct();
  void set_allocated_cir_pct(::ywrapper::UintValue* cir_pct);

  // .ywrapper.UintValue max_queue_depth_bytes = 118786445 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-bytes"];
  bool has_max_queue_depth_bytes() const;
  void clear_max_queue_depth_bytes();
  static const int kMaxQueueDepthBytesFieldNumber = 118786445;
  const ::ywrapper::UintValue& max_queue_depth_bytes() const;
  ::ywrapper::UintValue* release_max_queue_depth_bytes();
  ::ywrapper::UintValue* mutable_max_queue_depth_bytes();
  void set_allocated_max_queue_depth_bytes(::ywrapper::UintValue* max_queue_depth_bytes);

  // .ywrapper.UintValue cir_pct_remaining = 286997148 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir-pct-remaining"];
  bool has_cir_pct_remaining() const;
  void clear_cir_pct_remaining();
  static const int kCirPctRemainingFieldNumber = 286997148;
  const ::ywrapper::UintValue& cir_pct_remaining() const;
  ::ywrapper::UintValue* release_cir_pct_remaining();
  ::ywrapper::UintValue* mutable_cir_pct_remaining();
  void set_allocated_cir_pct_remaining(::ywrapper::UintValue* cir_pct_remaining);

  // .ywrapper.UintValue cir = 333122165 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir"];
  bool has_cir() const;
  void clear_cir();
  static const int kCirFieldNumber = 333122165;
  const ::ywrapper::UintValue& cir() const;
  ::ywrapper::UintValue* release_cir();
  ::ywrapper::UintValue* mutable_cir();
  void set_allocated_cir(::ywrapper::UintValue* cir);

  // .ywrapper.UintValue max_queue_depth_packets = 339691679 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-packets"];
  bool has_max_queue_depth_packets() const;
  void clear_max_queue_depth_packets();
  static const int kMaxQueueDepthPacketsFieldNumber = 339691679;
  const ::ywrapper::UintValue& max_queue_depth_packets() const;
  ::ywrapper::UintValue* release_max_queue_depth_packets();
  ::ywrapper::UintValue* mutable_max_queue_depth_packets();
  void set_allocated_max_queue_depth_packets(::ywrapper::UintValue* max_queue_depth_packets);

  // .openconfig.enums.OpenconfigQosQueueBehavior queuing_behavior = 225811202 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/queuing-behavior"];
  void clear_queuing_behavior();
  static const int kQueuingBehaviorFieldNumber = 225811202;
  ::openconfig::enums::OpenconfigQosQueueBehavior queuing_behavior() const;
  void set_queuing_behavior(::openconfig::enums::OpenconfigQosQueueBehavior value);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* bc_;
  ::ywrapper::UintValue* max_queue_depth_percent_;
  ::ywrapper::UintValue* cir_pct_;
  ::ywrapper::UintValue* max_queue_depth_bytes_;
  ::ywrapper::UintValue* cir_pct_remaining_;
  ::ywrapper::UintValue* cir_;
  ::ywrapper::UintValue* max_queue_depth_packets_;
  int queuing_behavior_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_StateImpl();
};
// -------------------------------------------------------------------

class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor) */ {
 public:
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor();
  virtual ~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor();

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor& from);

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor& operator=(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor&& from) noexcept
    : Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor() {
    *this = ::std::move(from);
  }

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor& operator=(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor* internal_default_instance() {
    return reinterpret_cast<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor*>(
               &_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    135;

  void Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor* other);
  friend void swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor& a, Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor& from);
  void MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config Config;
  typedef Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction ConformAction;
  typedef Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction ExceedAction;
  typedef Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction conform_action = 29149902 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action"];
  bool has_conform_action() const;
  void clear_conform_action();
  static const int kConformActionFieldNumber = 29149902;
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction& conform_action() const;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction* release_conform_action();
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction* mutable_conform_action();
  void set_allocated_conform_action(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction* conform_action);

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction exceed_action = 297338034 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action"];
  bool has_exceed_action() const;
  void clear_exceed_action();
  static const int kExceedActionFieldNumber = 297338034;
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction& exceed_action() const;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction* release_exceed_action();
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction* mutable_exceed_action();
  void set_allocated_exceed_action(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction* exceed_action);

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State state = 437562510 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 437562510;
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State& state() const;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State* release_state();
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State* state);

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config config = 473487161 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 473487161;
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config& config() const;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config* release_config();
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config* config);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction* conform_action_;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction* exceed_action_;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State* state_;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config* config_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColorImpl();
};
// -------------------------------------------------------------------

class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config) */ {
 public:
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config();
  virtual ~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config();

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config& from);

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config& operator=(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config&& from) noexcept
    : Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config() {
    *this = ::std::move(from);
  }

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config& operator=(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config* internal_default_instance() {
    return reinterpret_cast<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config*>(
               &_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    136;

  void Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config* other);
  friend void swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config& a, Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config& from);
  void MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType OutputType;
  static const OutputType OUTPUTTYPE_UNSET =
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType_OUTPUTTYPE_UNSET;
  static const OutputType OUTPUTTYPE_SCHEDULER =
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType_OUTPUTTYPE_SCHEDULER;
  static const OutputType OUTPUTTYPE_FWD_GROUP =
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType_OUTPUTTYPE_FWD_GROUP;
  static const OutputType OUTPUTTYPE_INTERFACE =
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType_OUTPUTTYPE_INTERFACE;
  static inline bool OutputType_IsValid(int value) {
    return Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType_IsValid(value);
  }
  static const OutputType OutputType_MIN =
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType_OutputType_MIN;
  static const OutputType OutputType_MAX =
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType_OutputType_MAX;
  static const int OutputType_ARRAYSIZE =
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType_OutputType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OutputType_descriptor() {
    return Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType_descriptor();
  }
  static inline const ::std::string& OutputType_Name(OutputType value) {
    return Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType_Name(value);
  }
  static inline bool OutputType_Parse(const ::std::string& name,
      OutputType* value) {
    return Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue child_scheduler = 101554311 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config/child-scheduler"];
  bool has_child_scheduler() const;
  void clear_child_scheduler();
  static const int kChildSchedulerFieldNumber = 101554311;
  const ::ywrapper::StringValue& child_scheduler() const;
  ::ywrapper::StringValue* release_child_scheduler();
  ::ywrapper::StringValue* mutable_child_scheduler();
  void set_allocated_child_scheduler(::ywrapper::StringValue* child_scheduler);

  // .ywrapper.StringValue output_fwd_group = 283910326 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config/output-fwd-group"];
  bool has_output_fwd_group() const;
  void clear_output_fwd_group();
  static const int kOutputFwdGroupFieldNumber = 283910326;
  const ::ywrapper::StringValue& output_fwd_group() const;
  ::ywrapper::StringValue* release_output_fwd_group();
  ::ywrapper::StringValue* mutable_output_fwd_group();
  void set_allocated_output_fwd_group(::ywrapper::StringValue* output_fwd_group);

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config.OutputType output_type = 485674633 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config/output-type"];
  void clear_output_type();
  static const int kOutputTypeFieldNumber = 485674633;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType output_type() const;
  void set_output_type(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType value);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* child_scheduler_;
  ::ywrapper::StringValue* output_fwd_group_;
  int output_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_ConfigImpl();
};
// -------------------------------------------------------------------

class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State) */ {
 public:
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State();
  virtual ~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State();

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State& from);

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State& operator=(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State&& from) noexcept
    : Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State() {
    *this = ::std::move(from);
  }

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State& operator=(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State* internal_default_instance() {
    return reinterpret_cast<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State*>(
               &_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    137;

  void Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State* other);
  friend void swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State& a, Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State& from);
  void MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType OutputType;
  static const OutputType OUTPUTTYPE_UNSET =
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType_OUTPUTTYPE_UNSET;
  static const OutputType OUTPUTTYPE_SCHEDULER =
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType_OUTPUTTYPE_SCHEDULER;
  static const OutputType OUTPUTTYPE_FWD_GROUP =
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType_OUTPUTTYPE_FWD_GROUP;
  static const OutputType OUTPUTTYPE_INTERFACE =
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType_OUTPUTTYPE_INTERFACE;
  static inline bool OutputType_IsValid(int value) {
    return Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType_IsValid(value);
  }
  static const OutputType OutputType_MIN =
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType_OutputType_MIN;
  static const OutputType OutputType_MAX =
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType_OutputType_MAX;
  static const int OutputType_ARRAYSIZE =
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType_OutputType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OutputType_descriptor() {
    return Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType_descriptor();
  }
  static inline const ::std::string& OutputType_Name(OutputType value) {
    return Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType_Name(value);
  }
  static inline bool OutputType_Parse(const ::std::string& name,
      OutputType* value) {
    return Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue output_fwd_group = 475276361 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/output-fwd-group"];
  bool has_output_fwd_group() const;
  void clear_output_fwd_group();
  static const int kOutputFwdGroupFieldNumber = 475276361;
  const ::ywrapper::StringValue& output_fwd_group() const;
  ::ywrapper::StringValue* release_output_fwd_group();
  ::ywrapper::StringValue* mutable_output_fwd_group();
  void set_allocated_output_fwd_group(::ywrapper::StringValue* output_fwd_group);

  // .ywrapper.StringValue child_scheduler = 493732510 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/child-scheduler"];
  bool has_child_scheduler() const;
  void clear_child_scheduler();
  static const int kChildSchedulerFieldNumber = 493732510;
  const ::ywrapper::StringValue& child_scheduler() const;
  ::ywrapper::StringValue* release_child_scheduler();
  ::ywrapper::StringValue* mutable_child_scheduler();
  void set_allocated_child_scheduler(::ywrapper::StringValue* child_scheduler);

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State.OutputType output_type = 322389940 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/output-type"];
  void clear_output_type();
  static const int kOutputTypeFieldNumber = 322389940;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType output_type() const;
  void set_output_type(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType value);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* output_fwd_group_;
  ::ywrapper::StringValue* child_scheduler_;
  int output_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_StateImpl();
};
// -------------------------------------------------------------------

class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output) */ {
 public:
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output();
  virtual ~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output();

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output& from);

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output& operator=(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output&& from) noexcept
    : Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output() {
    *this = ::std::move(from);
  }

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output& operator=(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output* internal_default_instance() {
    return reinterpret_cast<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output*>(
               &_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    138;

  void Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output* other);
  friend void swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output& a, Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output& from);
  void MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config Config;
  typedef Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config config = 210934496 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 210934496;
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config& config() const;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config* release_config();
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config* config);

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State state = 378101593 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 378101593;
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State& state() const;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State* release_state();
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State* state);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config* config_;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State* state_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OutputImpl();
};
// -------------------------------------------------------------------

class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State) */ {
 public:
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State();
  virtual ~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State();

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State& from);

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State& operator=(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State&& from) noexcept
    : Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State() {
    *this = ::std::move(from);
  }

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State& operator=(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State* internal_default_instance() {
    return reinterpret_cast<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State*>(
               &_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    139;

  void Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State* other);
  friend void swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State& a, Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State& from);
  void MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority Priority;
  static const Priority PRIORITY_UNSET =
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority_PRIORITY_UNSET;
  static const Priority PRIORITY_STRICT =
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority_PRIORITY_STRICT;
  static inline bool Priority_IsValid(int value) {
    return Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority_IsValid(value);
  }
  static const Priority Priority_MIN =
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority_Priority_MIN;
  static const Priority Priority_MAX =
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority_Priority_MAX;
  static const int Priority_ARRAYSIZE =
    Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority_Priority_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Priority_descriptor() {
    return Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority_descriptor();
  }
  static inline const ::std::string& Priority_Name(Priority value) {
    return Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority_Name(value);
  }
  static inline bool Priority_Parse(const ::std::string& name,
      Priority* value) {
    return Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue sequence = 280455557 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/sequence"];
  bool has_sequence() const;
  void clear_sequence();
  static const int kSequenceFieldNumber = 280455557;
  const ::ywrapper::UintValue& sequence() const;
  ::ywrapper::UintValue* release_sequence();
  ::ywrapper::UintValue* mutable_sequence();
  void set_allocated_sequence(::ywrapper::UintValue* sequence);

  // .openconfig.enums.OpenconfigQosTypesQOSSCHEDULERTYPE type = 13202618 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/type"];
  void clear_type();
  static const int kTypeFieldNumber = 13202618;
  ::openconfig::enums::OpenconfigQosTypesQOSSCHEDULERTYPE type() const;
  void set_type(::openconfig::enums::OpenconfigQosTypesQOSSCHEDULERTYPE value);

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State.Priority priority = 187259654 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/priority"];
  void clear_priority();
  static const int kPriorityFieldNumber = 187259654;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority priority() const;
  void set_priority(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority value);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* sequence_;
  int type_;
  int priority_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_StateImpl();
};
// -------------------------------------------------------------------

class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config) */ {
 public:
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config();
  virtual ~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config();

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config& from);

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config& operator=(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config&& from) noexcept
    : Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config() {
    *this = ::std::move(from);
  }

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config& operator=(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config* internal_default_instance() {
    return reinterpret_cast<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config*>(
               &_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    140;

  void Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config* other);
  friend void swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config& a, Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config& from);
  void MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue pir = 69260261 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/pir"];
  bool has_pir() const;
  void clear_pir();
  static const int kPirFieldNumber = 69260261;
  const ::ywrapper::UintValue& pir() const;
  ::ywrapper::UintValue* release_pir();
  ::ywrapper::UintValue* mutable_pir();
  void set_allocated_pir(::ywrapper::UintValue* pir);

  // .ywrapper.UintValue cir = 72261310 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/cir"];
  bool has_cir() const;
  void clear_cir();
  static const int kCirFieldNumber = 72261310;
  const ::ywrapper::UintValue& cir() const;
  ::ywrapper::UintValue* release_cir();
  ::ywrapper::UintValue* mutable_cir();
  void set_allocated_cir(::ywrapper::UintValue* cir);

  // .ywrapper.UintValue pir_pct = 115916567 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/pir-pct"];
  bool has_pir_pct() const;
  void clear_pir_pct();
  static const int kPirPctFieldNumber = 115916567;
  const ::ywrapper::UintValue& pir_pct() const;
  ::ywrapper::UintValue* release_pir_pct();
  ::ywrapper::UintValue* mutable_pir_pct();
  void set_allocated_pir_pct(::ywrapper::UintValue* pir_pct);

  // .ywrapper.UintValue cir_pct = 148455776 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/cir-pct"];
  bool has_cir_pct() const;
  void clear_cir_pct();
  static const int kCirPctFieldNumber = 148455776;
  const ::ywrapper::UintValue& cir_pct() const;
  ::ywrapper::UintValue* release_cir_pct();
  ::ywrapper::UintValue* mutable_cir_pct();
  void set_allocated_cir_pct(::ywrapper::UintValue* cir_pct);

  // .ywrapper.UintValue cir_pct_remaining = 426598443 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/cir-pct-remaining"];
  bool has_cir_pct_remaining() const;
  void clear_cir_pct_remaining();
  static const int kCirPctRemainingFieldNumber = 426598443;
  const ::ywrapper::UintValue& cir_pct_remaining() const;
  ::ywrapper::UintValue* release_cir_pct_remaining();
  ::ywrapper::UintValue* mutable_cir_pct_remaining();
  void set_allocated_cir_pct_remaining(::ywrapper::UintValue* cir_pct_remaining);

  // .ywrapper.UintValue bc = 488133689 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/bc"];
  bool has_bc() const;
  void clear_bc();
  static const int kBcFieldNumber = 488133689;
  const ::ywrapper::UintValue& bc() const;
  ::ywrapper::UintValue* release_bc();
  ::ywrapper::UintValue* mutable_bc();
  void set_allocated_bc(::ywrapper::UintValue* bc);

  // .ywrapper.UintValue be = 488133695 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/be"];
  bool has_be() const;
  void clear_be();
  static const int kBeFieldNumber = 488133695;
  const ::ywrapper::UintValue& be() const;
  ::ywrapper::UintValue* release_be();
  ::ywrapper::UintValue* mutable_be();
  void set_allocated_be(::ywrapper::UintValue* be);

  // .ywrapper.UintValue pir_pct_remaining = 517108460 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/pir-pct-remaining"];
  bool has_pir_pct_remaining() const;
  void clear_pir_pct_remaining();
  static const int kPirPctRemainingFieldNumber = 517108460;
  const ::ywrapper::UintValue& pir_pct_remaining() const;
  ::ywrapper::UintValue* release_pir_pct_remaining();
  ::ywrapper::UintValue* mutable_pir_pct_remaining();
  void set_allocated_pir_pct_remaining(::ywrapper::UintValue* pir_pct_remaining);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* pir_;
  ::ywrapper::UintValue* cir_;
  ::ywrapper::UintValue* pir_pct_;
  ::ywrapper::UintValue* cir_pct_;
  ::ywrapper::UintValue* cir_pct_remaining_;
  ::ywrapper::UintValue* bc_;
  ::ywrapper::UintValue* be_;
  ::ywrapper::UintValue* pir_pct_remaining_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConfigImpl();
};
// -------------------------------------------------------------------

class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config) */ {
 public:
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config();
  virtual ~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config();

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config& from);

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config& operator=(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config&& from) noexcept
    : Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config() {
    *this = ::std::move(from);
  }

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config& operator=(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config* internal_default_instance() {
    return reinterpret_cast<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config*>(
               &_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    141;

  void Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config* other);
  friend void swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config& a, Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config& from);
  void MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue set_dot1p = 106933487 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/config/set-dot1p"];
  bool has_set_dot1p() const;
  void clear_set_dot1p();
  static const int kSetDot1PFieldNumber = 106933487;
  const ::ywrapper::UintValue& set_dot1p() const;
  ::ywrapper::UintValue* release_set_dot1p();
  ::ywrapper::UintValue* mutable_set_dot1p();
  void set_allocated_set_dot1p(::ywrapper::UintValue* set_dot1p);

  // .ywrapper.UintValue set_mpls_tc = 301290899 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/config/set-mpls-tc"];
  bool has_set_mpls_tc() const;
  void clear_set_mpls_tc();
  static const int kSetMplsTcFieldNumber = 301290899;
  const ::ywrapper::UintValue& set_mpls_tc() const;
  ::ywrapper::UintValue* release_set_mpls_tc();
  ::ywrapper::UintValue* mutable_set_mpls_tc();
  void set_allocated_set_mpls_tc(::ywrapper::UintValue* set_mpls_tc);

  // .ywrapper.UintValue set_dscp = 410653965 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/config/set-dscp"];
  bool has_set_dscp() const;
  void clear_set_dscp();
  static const int kSetDscpFieldNumber = 410653965;
  const ::ywrapper::UintValue& set_dscp() const;
  ::ywrapper::UintValue* release_set_dscp();
  ::ywrapper::UintValue* mutable_set_dscp();
  void set_allocated_set_dscp(::ywrapper::UintValue* set_dscp);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* set_dot1p_;
  ::ywrapper::UintValue* set_mpls_tc_;
  ::ywrapper::UintValue* set_dscp_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_ConfigImpl();
};
// -------------------------------------------------------------------

class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State) */ {
 public:
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State();
  virtual ~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State();

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State& from);

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State& operator=(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State&& from) noexcept
    : Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State() {
    *this = ::std::move(from);
  }

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State& operator=(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State* internal_default_instance() {
    return reinterpret_cast<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State*>(
               &_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    142;

  void Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State* other);
  friend void swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State& a, Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State& from);
  void MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue set_mpls_tc = 213542028 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-mpls-tc"];
  bool has_set_mpls_tc() const;
  void clear_set_mpls_tc();
  static const int kSetMplsTcFieldNumber = 213542028;
  const ::ywrapper::UintValue& set_mpls_tc() const;
  ::ywrapper::UintValue* release_set_mpls_tc();
  ::ywrapper::UintValue* mutable_set_mpls_tc();
  void set_allocated_set_mpls_tc(::ywrapper::UintValue* set_mpls_tc);

  // .ywrapper.UintValue set_dot1p = 287866712 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-dot1p"];
  bool has_set_dot1p() const;
  void clear_set_dot1p();
  static const int kSetDot1PFieldNumber = 287866712;
  const ::ywrapper::UintValue& set_dot1p() const;
  ::ywrapper::UintValue* release_set_dot1p();
  ::ywrapper::UintValue* mutable_set_dot1p();
  void set_allocated_set_dot1p(::ywrapper::UintValue* set_dot1p);

  // .ywrapper.UintValue set_dscp = 308605888 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-dscp"];
  bool has_set_dscp() const;
  void clear_set_dscp();
  static const int kSetDscpFieldNumber = 308605888;
  const ::ywrapper::UintValue& set_dscp() const;
  ::ywrapper::UintValue* release_set_dscp();
  ::ywrapper::UintValue* mutable_set_dscp();
  void set_allocated_set_dscp(::ywrapper::UintValue* set_dscp);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* set_mpls_tc_;
  ::ywrapper::UintValue* set_dot1p_;
  ::ywrapper::UintValue* set_dscp_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_StateImpl();
};
// -------------------------------------------------------------------

class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction) */ {
 public:
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction();
  virtual ~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction();

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction& from);

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction& operator=(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction&& from) noexcept
    : Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction() {
    *this = ::std::move(from);
  }

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction& operator=(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction* internal_default_instance() {
    return reinterpret_cast<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction*>(
               &_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    143;

  void Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction* other);
  friend void swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction& a, Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction& from);
  void MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config Config;
  typedef Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State state = 49137552 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 49137552;
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State& state() const;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State* release_state();
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State* state);

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config config = 320685791 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 320685791;
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config& config() const;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config* release_config();
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config* config);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State* state_;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config* config_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformActionImpl();
};
// -------------------------------------------------------------------

class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config) */ {
 public:
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config();
  virtual ~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config();

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config& from);

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config& operator=(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config&& from) noexcept
    : Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config() {
    *this = ::std::move(from);
  }

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config& operator=(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config* internal_default_instance() {
    return reinterpret_cast<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config*>(
               &_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    144;

  void Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config* other);
  friend void swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config& a, Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config& from);
  void MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue set_dot1p = 143535771 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config/set-dot1p"];
  bool has_set_dot1p() const;
  void clear_set_dot1p();
  static const int kSetDot1PFieldNumber = 143535771;
  const ::ywrapper::UintValue& set_dot1p() const;
  ::ywrapper::UintValue* release_set_dot1p();
  ::ywrapper::UintValue* mutable_set_dot1p();
  void set_allocated_set_dot1p(::ywrapper::UintValue* set_dot1p);

  // .ywrapper.BoolValue drop = 299899453 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config/drop"];
  bool has_drop() const;
  void clear_drop();
  static const int kDropFieldNumber = 299899453;
  const ::ywrapper::BoolValue& drop() const;
  ::ywrapper::BoolValue* release_drop();
  ::ywrapper::BoolValue* mutable_drop();
  void set_allocated_drop(::ywrapper::BoolValue* drop);

  // .ywrapper.UintValue set_mpls_tc = 435204023 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config/set-mpls-tc"];
  bool has_set_mpls_tc() const;
  void clear_set_mpls_tc();
  static const int kSetMplsTcFieldNumber = 435204023;
  const ::ywrapper::UintValue& set_mpls_tc() const;
  ::ywrapper::UintValue* release_set_mpls_tc();
  ::ywrapper::UintValue* mutable_set_mpls_tc();
  void set_allocated_set_mpls_tc(::ywrapper::UintValue* set_mpls_tc);

  // .ywrapper.UintValue set_dscp = 530765681 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config/set-dscp"];
  bool has_set_dscp() const;
  void clear_set_dscp();
  static const int kSetDscpFieldNumber = 530765681;
  const ::ywrapper::UintValue& set_dscp() const;
  ::ywrapper::UintValue* release_set_dscp();
  ::ywrapper::UintValue* mutable_set_dscp();
  void set_allocated_set_dscp(::ywrapper::UintValue* set_dscp);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* set_dot1p_;
  ::ywrapper::BoolValue* drop_;
  ::ywrapper::UintValue* set_mpls_tc_;
  ::ywrapper::UintValue* set_dscp_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_ConfigImpl();
};
// -------------------------------------------------------------------

class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State) */ {
 public:
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State();
  virtual ~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State();

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State& from);

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State& operator=(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State&& from) noexcept
    : Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State() {
    *this = ::std::move(from);
  }

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State& operator=(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State* internal_default_instance() {
    return reinterpret_cast<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State*>(
               &_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    145;

  void Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State* other);
  friend void swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State& a, Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State& from);
  void MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.BoolValue drop = 190345152 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/drop"];
  bool has_drop() const;
  void clear_drop();
  static const int kDropFieldNumber = 190345152;
  const ::ywrapper::BoolValue& drop() const;
  ::ywrapper::BoolValue* release_drop();
  ::ywrapper::BoolValue* mutable_drop();
  void set_allocated_drop(::ywrapper::BoolValue* drop);

  // .ywrapper.UintValue set_mpls_tc = 313456384 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-mpls-tc"];
  bool has_set_mpls_tc() const;
  void clear_set_mpls_tc();
  static const int kSetMplsTcFieldNumber = 313456384;
  const ::ywrapper::UintValue& set_mpls_tc() const;
  ::ywrapper::UintValue* release_set_mpls_tc();
  ::ywrapper::UintValue* mutable_set_mpls_tc();
  void set_allocated_set_mpls_tc(::ywrapper::UintValue* set_mpls_tc);

  // .ywrapper.UintValue set_dscp = 329397924 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-dscp"];
  bool has_set_dscp() const;
  void clear_set_dscp();
  static const int kSetDscpFieldNumber = 329397924;
  const ::ywrapper::UintValue& set_dscp() const;
  ::ywrapper::UintValue* release_set_dscp();
  ::ywrapper::UintValue* mutable_set_dscp();
  void set_allocated_set_dscp(::ywrapper::UintValue* set_dscp);

  // .ywrapper.UintValue set_dot1p = 525081588 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-dot1p"];
  bool has_set_dot1p() const;
  void clear_set_dot1p();
  static const int kSetDot1PFieldNumber = 525081588;
  const ::ywrapper::UintValue& set_dot1p() const;
  ::ywrapper::UintValue* release_set_dot1p();
  ::ywrapper::UintValue* mutable_set_dot1p();
  void set_allocated_set_dot1p(::ywrapper::UintValue* set_dot1p);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::BoolValue* drop_;
  ::ywrapper::UintValue* set_mpls_tc_;
  ::ywrapper::UintValue* set_dscp_;
  ::ywrapper::UintValue* set_dot1p_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_StateImpl();
};
// -------------------------------------------------------------------

class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction) */ {
 public:
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction();
  virtual ~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction();

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction& from);

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction& operator=(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction&& from) noexcept
    : Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction() {
    *this = ::std::move(from);
  }

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction& operator=(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction* internal_default_instance() {
    return reinterpret_cast<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction*>(
               &_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    146;

  void Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction* other);
  friend void swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction& a, Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction& from);
  void MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config Config;
  typedef Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State state = 230070580 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 230070580;
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State& state() const;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State* release_state();
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State* state);

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config config = 520730451 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 520730451;
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config& config() const;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config* release_config();
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config* config);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State* state_;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config* config_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedActionImpl();
};
// -------------------------------------------------------------------

class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State) */ {
 public:
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State();
  virtual ~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State();

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State& from);

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State& operator=(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State&& from) noexcept
    : Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State() {
    *this = ::std::move(from);
  }

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State& operator=(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State* internal_default_instance() {
    return reinterpret_cast<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State*>(
               &_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    147;

  void Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State* other);
  friend void swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State& a, Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State& from);
  void MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue be = 15153378 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/be"];
  bool has_be() const;
  void clear_be();
  static const int kBeFieldNumber = 15153378;
  const ::ywrapper::UintValue& be() const;
  ::ywrapper::UintValue* release_be();
  ::ywrapper::UintValue* mutable_be();
  void set_allocated_be(::ywrapper::UintValue* be);

  // .ywrapper.UintValue bc = 15153380 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/bc"];
  bool has_bc() const;
  void clear_bc();
  static const int kBcFieldNumber = 15153380;
  const ::ywrapper::UintValue& bc() const;
  ::ywrapper::UintValue* release_bc();
  ::ywrapper::UintValue* mutable_bc();
  void set_allocated_bc(::ywrapper::UintValue* bc);

  // .ywrapper.UintValue pir_pct_remaining = 223122459 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir-pct-remaining"];
  bool has_pir_pct_remaining() const;
  void clear_pir_pct_remaining();
  static const int kPirPctRemainingFieldNumber = 223122459;
  const ::ywrapper::UintValue& pir_pct_remaining() const;
  ::ywrapper::UintValue* release_pir_pct_remaining();
  ::ywrapper::UintValue* mutable_pir_pct_remaining();
  void set_allocated_pir_pct_remaining(::ywrapper::UintValue* pir_pct_remaining);

  // .ywrapper.UintValue cir_pct = 228243271 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir-pct"];
  bool has_cir_pct() const;
  void clear_cir_pct();
  static const int kCirPctFieldNumber = 228243271;
  const ::ywrapper::UintValue& cir_pct() const;
  ::ywrapper::UintValue* release_cir_pct();
  ::ywrapper::UintValue* mutable_cir_pct();
  void set_allocated_cir_pct(::ywrapper::UintValue* cir_pct);

  // .ywrapper.UintValue cir_pct_remaining = 276174460 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir-pct-remaining"];
  bool has_cir_pct_remaining() const;
  void clear_cir_pct_remaining();
  static const int kCirPctRemainingFieldNumber = 276174460;
  const ::ywrapper::UintValue& cir_pct_remaining() const;
  ::ywrapper::UintValue* release_cir_pct_remaining();
  ::ywrapper::UintValue* mutable_cir_pct_remaining();
  void set_allocated_cir_pct_remaining(::ywrapper::UintValue* cir_pct_remaining);

  // .ywrapper.UintValue pir = 366650638 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir"];
  bool has_pir() const;
  void clear_pir();
  static const int kPirFieldNumber = 366650638;
  const ::ywrapper::UintValue& pir() const;
  ::ywrapper::UintValue* release_pir();
  ::ywrapper::UintValue* mutable_pir();
  void set_allocated_pir(::ywrapper::UintValue* pir);

  // .ywrapper.UintValue cir = 368769365 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir"];
  bool has_cir() const;
  void clear_cir();
  static const int kCirFieldNumber = 368769365;
  const ::ywrapper::UintValue& cir() const;
  ::ywrapper::UintValue* release_cir();
  ::ywrapper::UintValue* mutable_cir();
  void set_allocated_cir(::ywrapper::UintValue* cir);

  // .ywrapper.UintValue pir_pct = 484968816 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir-pct"];
  bool has_pir_pct() const;
  void clear_pir_pct();
  static const int kPirPctFieldNumber = 484968816;
  const ::ywrapper::UintValue& pir_pct() const;
  ::ywrapper::UintValue* release_pir_pct();
  ::ywrapper::UintValue* mutable_pir_pct();
  void set_allocated_pir_pct(::ywrapper::UintValue* pir_pct);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* be_;
  ::ywrapper::UintValue* bc_;
  ::ywrapper::UintValue* pir_pct_remaining_;
  ::ywrapper::UintValue* cir_pct_;
  ::ywrapper::UintValue* cir_pct_remaining_;
  ::ywrapper::UintValue* pir_;
  ::ywrapper::UintValue* cir_;
  ::ywrapper::UintValue* pir_pct_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_StateImpl();
};
// -------------------------------------------------------------------

class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config) */ {
 public:
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config();
  virtual ~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config();

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config& from);

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config& operator=(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config&& from) noexcept
    : Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config() {
    *this = ::std::move(from);
  }

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config& operator=(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config* internal_default_instance() {
    return reinterpret_cast<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config*>(
               &_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    148;

  void Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config* other);
  friend void swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config& a, Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config& from);
  void MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue set_dscp = 77658205 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config/set-dscp"];
  bool has_set_dscp() const;
  void clear_set_dscp();
  static const int kSetDscpFieldNumber = 77658205;
  const ::ywrapper::UintValue& set_dscp() const;
  ::ywrapper::UintValue* release_set_dscp();
  ::ywrapper::UintValue* mutable_set_dscp();
  void set_allocated_set_dscp(::ywrapper::UintValue* set_dscp);

  // .ywrapper.BoolValue drop = 230160201 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config/drop"];
  bool has_drop() const;
  void clear_drop();
  static const int kDropFieldNumber = 230160201;
  const ::ywrapper::BoolValue& drop() const;
  ::ywrapper::BoolValue* release_drop();
  ::ywrapper::BoolValue* mutable_drop();
  void set_allocated_drop(::ywrapper::BoolValue* drop);

  // .ywrapper.UintValue set_dot1p = 433219903 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config/set-dot1p"];
  bool has_set_dot1p() const;
  void clear_set_dot1p();
  static const int kSetDot1PFieldNumber = 433219903;
  const ::ywrapper::UintValue& set_dot1p() const;
  ::ywrapper::UintValue* release_set_dot1p();
  ::ywrapper::UintValue* mutable_set_dot1p();
  void set_allocated_set_dot1p(::ywrapper::UintValue* set_dot1p);

  // .ywrapper.UintValue set_mpls_tc = 446571619 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config/set-mpls-tc"];
  bool has_set_mpls_tc() const;
  void clear_set_mpls_tc();
  static const int kSetMplsTcFieldNumber = 446571619;
  const ::ywrapper::UintValue& set_mpls_tc() const;
  ::ywrapper::UintValue* release_set_mpls_tc();
  ::ywrapper::UintValue* mutable_set_mpls_tc();
  void set_allocated_set_mpls_tc(::ywrapper::UintValue* set_mpls_tc);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* set_dscp_;
  ::ywrapper::BoolValue* drop_;
  ::ywrapper::UintValue* set_dot1p_;
  ::ywrapper::UintValue* set_mpls_tc_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_ConfigImpl();
};
// -------------------------------------------------------------------

class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State) */ {
 public:
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State();
  virtual ~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State();

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State& from);

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State& operator=(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State&& from) noexcept
    : Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State() {
    *this = ::std::move(from);
  }

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State& operator=(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State* internal_default_instance() {
    return reinterpret_cast<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State*>(
               &_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    149;

  void Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State* other);
  friend void swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State& a, Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State& from);
  void MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.BoolValue drop = 94921628 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/drop"];
  bool has_drop() const;
  void clear_drop();
  static const int kDropFieldNumber = 94921628;
  const ::ywrapper::BoolValue& drop() const;
  ::ywrapper::BoolValue* release_drop();
  ::ywrapper::BoolValue* mutable_drop();
  void set_allocated_drop(::ywrapper::BoolValue* drop);

  // .ywrapper.UintValue set_dscp = 206736528 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-dscp"];
  bool has_set_dscp() const;
  void clear_set_dscp();
  static const int kSetDscpFieldNumber = 206736528;
  const ::ywrapper::UintValue& set_dscp() const;
  ::ywrapper::UintValue* release_set_dscp();
  ::ywrapper::UintValue* mutable_set_dscp();
  void set_allocated_set_dscp(::ywrapper::UintValue* set_dscp);

  // .ywrapper.UintValue set_dot1p = 311422824 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-dot1p"];
  bool has_set_dot1p() const;
  void clear_set_dot1p();
  static const int kSetDot1PFieldNumber = 311422824;
  const ::ywrapper::UintValue& set_dot1p() const;
  ::ywrapper::UintValue* release_set_dot1p();
  ::ywrapper::UintValue* mutable_set_dot1p();
  void set_allocated_set_dot1p(::ywrapper::UintValue* set_dot1p);

  // .ywrapper.UintValue set_mpls_tc = 425194396 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-mpls-tc"];
  bool has_set_mpls_tc() const;
  void clear_set_mpls_tc();
  static const int kSetMplsTcFieldNumber = 425194396;
  const ::ywrapper::UintValue& set_mpls_tc() const;
  ::ywrapper::UintValue* release_set_mpls_tc();
  ::ywrapper::UintValue* mutable_set_mpls_tc();
  void set_allocated_set_mpls_tc(::ywrapper::UintValue* set_mpls_tc);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::BoolValue* drop_;
  ::ywrapper::UintValue* set_dscp_;
  ::ywrapper::UintValue* set_dot1p_;
  ::ywrapper::UintValue* set_mpls_tc_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_StateImpl();
};
// -------------------------------------------------------------------

class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction) */ {
 public:
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction();
  virtual ~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction();

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction& from);

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction& operator=(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction&& from) noexcept
    : Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction() {
    *this = ::std::move(from);
  }

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction& operator=(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction* internal_default_instance() {
    return reinterpret_cast<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction*>(
               &_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    150;

  void Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction* other);
  friend void swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction& a, Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction& from);
  void MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config Config;
  typedef Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State state = 142023808 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 142023808;
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State& state() const;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State* release_state();
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State* state);

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config config = 491497103 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 491497103;
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config& config() const;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config* release_config();
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config* config);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State* state_;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config* config_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateActionImpl();
};
// -------------------------------------------------------------------

class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor) */ {
 public:
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor();
  virtual ~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor();

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor& from);

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor& operator=(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor&& from) noexcept
    : Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor() {
    *this = ::std::move(from);
  }

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor& operator=(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor* internal_default_instance() {
    return reinterpret_cast<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor*>(
               &_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    151;

  void Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor* other);
  friend void swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor& a, Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor& from);
  void MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config Config;
  typedef Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction ConformAction;
  typedef Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction ExceedAction;
  typedef Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State State;
  typedef Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction ViolateAction;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction violate_action = 110529342 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action"];
  bool has_violate_action() const;
  void clear_violate_action();
  static const int kViolateActionFieldNumber = 110529342;
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction& violate_action() const;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction* release_violate_action();
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction* mutable_violate_action();
  void set_allocated_violate_action(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction* violate_action);

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State state = 264511342 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 264511342;
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State& state() const;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State* release_state();
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State* state);

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction exceed_action = 447571730 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action"];
  bool has_exceed_action() const;
  void clear_exceed_action();
  static const int kExceedActionFieldNumber = 447571730;
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction& exceed_action() const;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction* release_exceed_action();
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction* mutable_exceed_action();
  void set_allocated_exceed_action(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction* exceed_action);

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction conform_action = 482658734 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action"];
  bool has_conform_action() const;
  void clear_conform_action();
  static const int kConformActionFieldNumber = 482658734;
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction& conform_action() const;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction* release_conform_action();
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction* mutable_conform_action();
  void set_allocated_conform_action(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction* conform_action);

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config config = 526981785 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 526981785;
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config& config() const;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config* release_config();
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config* config);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction* violate_action_;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State* state_;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction* exceed_action_;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction* conform_action_;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config* config_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColorImpl();
};
// -------------------------------------------------------------------

class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler) */ {
 public:
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler();
  virtual ~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler();

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler& from);

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler& operator=(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler&& from) noexcept
    : Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler() {
    *this = ::std::move(from);
  }

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler& operator=(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler* internal_default_instance() {
    return reinterpret_cast<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler*>(
               &_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    152;

  void Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler* other);
  friend void swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler& a, Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler& from);
  void MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config Config;
  typedef Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs Inputs;
  typedef Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor OneRateTwoColor;
  typedef Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output Output;
  typedef Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State State;
  typedef Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor TwoRateThreeColor;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor two_rate_three_color = 10046740 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color"];
  bool has_two_rate_three_color() const;
  void clear_two_rate_three_color();
  static const int kTwoRateThreeColorFieldNumber = 10046740;
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor& two_rate_three_color() const;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor* release_two_rate_three_color();
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor* mutable_two_rate_three_color();
  void set_allocated_two_rate_three_color(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor* two_rate_three_color);

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output output = 46224159 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output"];
  bool has_output() const;
  void clear_output();
  static const int kOutputFieldNumber = 46224159;
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output& output() const;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output* release_output();
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output* mutable_output();
  void set_allocated_output(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output* output);

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs inputs = 152276279 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs"];
  bool has_inputs() const;
  void clear_inputs();
  static const int kInputsFieldNumber = 152276279;
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs& inputs() const;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs* release_inputs();
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs* mutable_inputs();
  void set_allocated_inputs(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs* inputs);

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config config = 235323450 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 235323450;
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config& config() const;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config* release_config();
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config* config);

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State state = 237125463 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 237125463;
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State& state() const;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State* release_state();
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State* state);

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor one_rate_two_color = 502240564 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color"];
  bool has_one_rate_two_color() const;
  void clear_one_rate_two_color();
  static const int kOneRateTwoColorFieldNumber = 502240564;
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor& one_rate_two_color() const;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor* release_one_rate_two_color();
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor* mutable_one_rate_two_color();
  void set_allocated_one_rate_two_color(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor* one_rate_two_color);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor* two_rate_three_color_;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output* output_;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs* inputs_;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config* config_;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State* state_;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor* one_rate_two_color_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerImpl();
};
// -------------------------------------------------------------------

class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.SchedulerKey) */ {
 public:
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey();
  virtual ~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey();

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey& from);

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey& operator=(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey&& from) noexcept
    : Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey() {
    *this = ::std::move(from);
  }

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey& operator=(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey* internal_default_instance() {
    return reinterpret_cast<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey*>(
               &_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    153;

  void Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey* other);
  friend void swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey& a, Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey& from);
  void MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler scheduler = 2;
  bool has_scheduler() const;
  void clear_scheduler();
  static const int kSchedulerFieldNumber = 2;
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler& scheduler() const;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler* release_scheduler();
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler* mutable_scheduler();
  void set_allocated_scheduler(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler* scheduler);

  // uint64 sequence = 1 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/sequence"];
  void clear_sequence();
  static const int kSequenceFieldNumber = 1;
  ::google::protobuf::uint64 sequence() const;
  void set_sequence(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.SchedulerKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler* scheduler_;
  ::google::protobuf::uint64 sequence_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKeyImpl();
};
// -------------------------------------------------------------------

class Qos_SchedulerPolicies_SchedulerPolicy_Schedulers : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers) */ {
 public:
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers();
  virtual ~Qos_SchedulerPolicies_SchedulerPolicy_Schedulers();

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers& from);

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers& operator=(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers&& from) noexcept
    : Qos_SchedulerPolicies_SchedulerPolicy_Schedulers() {
    *this = ::std::move(from);
  }

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers& operator=(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers* internal_default_instance() {
    return reinterpret_cast<const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers*>(
               &_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    154;

  void Swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers* other);
  friend void swap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers& a, Qos_SchedulerPolicies_SchedulerPolicy_Schedulers& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_SchedulerPolicies_SchedulerPolicy_Schedulers* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_SchedulerPolicies_SchedulerPolicy_Schedulers* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers& from);
  void MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_Schedulers& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_Schedulers* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler Scheduler;
  typedef Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey SchedulerKey;

  // accessors -------------------------------------------------------

  // repeated .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.SchedulerKey scheduler = 494699541 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler"];
  int scheduler_size() const;
  void clear_scheduler();
  static const int kSchedulerFieldNumber = 494699541;
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey& scheduler(int index) const;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey* mutable_scheduler(int index);
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey* add_scheduler();
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey >*
      mutable_scheduler();
  const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey >&
      scheduler() const;

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey > scheduler_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_SchedulersImpl();
};
// -------------------------------------------------------------------

class Qos_SchedulerPolicies_SchedulerPolicy_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.State) */ {
 public:
  Qos_SchedulerPolicies_SchedulerPolicy_State();
  virtual ~Qos_SchedulerPolicies_SchedulerPolicy_State();

  Qos_SchedulerPolicies_SchedulerPolicy_State(const Qos_SchedulerPolicies_SchedulerPolicy_State& from);

  inline Qos_SchedulerPolicies_SchedulerPolicy_State& operator=(const Qos_SchedulerPolicies_SchedulerPolicy_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_SchedulerPolicies_SchedulerPolicy_State(Qos_SchedulerPolicies_SchedulerPolicy_State&& from) noexcept
    : Qos_SchedulerPolicies_SchedulerPolicy_State() {
    *this = ::std::move(from);
  }

  inline Qos_SchedulerPolicies_SchedulerPolicy_State& operator=(Qos_SchedulerPolicies_SchedulerPolicy_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_SchedulerPolicies_SchedulerPolicy_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_SchedulerPolicies_SchedulerPolicy_State* internal_default_instance() {
    return reinterpret_cast<const Qos_SchedulerPolicies_SchedulerPolicy_State*>(
               &_Qos_SchedulerPolicies_SchedulerPolicy_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    155;

  void Swap(Qos_SchedulerPolicies_SchedulerPolicy_State* other);
  friend void swap(Qos_SchedulerPolicies_SchedulerPolicy_State& a, Qos_SchedulerPolicies_SchedulerPolicy_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_SchedulerPolicies_SchedulerPolicy_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_SchedulerPolicies_SchedulerPolicy_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy_State& from);
  void MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue name = 1534422 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/state/name"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1534422;
  const ::ywrapper::StringValue& name() const;
  ::ywrapper::StringValue* release_name();
  ::ywrapper::StringValue* mutable_name();
  void set_allocated_name(::ywrapper::StringValue* name);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* name_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicy_StateImpl();
};
// -------------------------------------------------------------------

class Qos_SchedulerPolicies_SchedulerPolicy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy) */ {
 public:
  Qos_SchedulerPolicies_SchedulerPolicy();
  virtual ~Qos_SchedulerPolicies_SchedulerPolicy();

  Qos_SchedulerPolicies_SchedulerPolicy(const Qos_SchedulerPolicies_SchedulerPolicy& from);

  inline Qos_SchedulerPolicies_SchedulerPolicy& operator=(const Qos_SchedulerPolicies_SchedulerPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_SchedulerPolicies_SchedulerPolicy(Qos_SchedulerPolicies_SchedulerPolicy&& from) noexcept
    : Qos_SchedulerPolicies_SchedulerPolicy() {
    *this = ::std::move(from);
  }

  inline Qos_SchedulerPolicies_SchedulerPolicy& operator=(Qos_SchedulerPolicies_SchedulerPolicy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_SchedulerPolicies_SchedulerPolicy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_SchedulerPolicies_SchedulerPolicy* internal_default_instance() {
    return reinterpret_cast<const Qos_SchedulerPolicies_SchedulerPolicy*>(
               &_Qos_SchedulerPolicies_SchedulerPolicy_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    156;

  void Swap(Qos_SchedulerPolicies_SchedulerPolicy* other);
  friend void swap(Qos_SchedulerPolicies_SchedulerPolicy& a, Qos_SchedulerPolicies_SchedulerPolicy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_SchedulerPolicies_SchedulerPolicy* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_SchedulerPolicies_SchedulerPolicy* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicy& from);
  void MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicy& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_SchedulerPolicies_SchedulerPolicy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_SchedulerPolicies_SchedulerPolicy_Config Config;
  typedef Qos_SchedulerPolicies_SchedulerPolicy_Schedulers Schedulers;
  typedef Qos_SchedulerPolicies_SchedulerPolicy_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.State state = 242070708 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 242070708;
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_State& state() const;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_State* release_state();
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_State* state);

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers schedulers = 419692355 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers"];
  bool has_schedulers() const;
  void clear_schedulers();
  static const int kSchedulersFieldNumber = 419692355;
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers& schedulers() const;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers* release_schedulers();
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers* mutable_schedulers();
  void set_allocated_schedulers(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers* schedulers);

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Config config = 524943827 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 524943827;
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Config& config() const;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Config* release_config();
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Config* config);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_State* state_;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers* schedulers_;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Config* config_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicyImpl();
};
// -------------------------------------------------------------------

class Qos_SchedulerPolicies_SchedulerPolicyKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey) */ {
 public:
  Qos_SchedulerPolicies_SchedulerPolicyKey();
  virtual ~Qos_SchedulerPolicies_SchedulerPolicyKey();

  Qos_SchedulerPolicies_SchedulerPolicyKey(const Qos_SchedulerPolicies_SchedulerPolicyKey& from);

  inline Qos_SchedulerPolicies_SchedulerPolicyKey& operator=(const Qos_SchedulerPolicies_SchedulerPolicyKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_SchedulerPolicies_SchedulerPolicyKey(Qos_SchedulerPolicies_SchedulerPolicyKey&& from) noexcept
    : Qos_SchedulerPolicies_SchedulerPolicyKey() {
    *this = ::std::move(from);
  }

  inline Qos_SchedulerPolicies_SchedulerPolicyKey& operator=(Qos_SchedulerPolicies_SchedulerPolicyKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_SchedulerPolicies_SchedulerPolicyKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_SchedulerPolicies_SchedulerPolicyKey* internal_default_instance() {
    return reinterpret_cast<const Qos_SchedulerPolicies_SchedulerPolicyKey*>(
               &_Qos_SchedulerPolicies_SchedulerPolicyKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    157;

  void Swap(Qos_SchedulerPolicies_SchedulerPolicyKey* other);
  friend void swap(Qos_SchedulerPolicies_SchedulerPolicyKey& a, Qos_SchedulerPolicies_SchedulerPolicyKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_SchedulerPolicies_SchedulerPolicyKey* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_SchedulerPolicies_SchedulerPolicyKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_SchedulerPolicies_SchedulerPolicyKey& from);
  void MergeFrom(const Qos_SchedulerPolicies_SchedulerPolicyKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_SchedulerPolicies_SchedulerPolicyKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/name"];
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy scheduler_policy = 2;
  bool has_scheduler_policy() const;
  void clear_scheduler_policy();
  static const int kSchedulerPolicyFieldNumber = 2;
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy& scheduler_policy() const;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy* release_scheduler_policy();
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy* mutable_scheduler_policy();
  void set_allocated_scheduler_policy(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy* scheduler_policy);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy* scheduler_policy_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPolicies_SchedulerPolicyKeyImpl();
};
// -------------------------------------------------------------------

class Qos_SchedulerPolicies : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.SchedulerPolicies) */ {
 public:
  Qos_SchedulerPolicies();
  virtual ~Qos_SchedulerPolicies();

  Qos_SchedulerPolicies(const Qos_SchedulerPolicies& from);

  inline Qos_SchedulerPolicies& operator=(const Qos_SchedulerPolicies& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_SchedulerPolicies(Qos_SchedulerPolicies&& from) noexcept
    : Qos_SchedulerPolicies() {
    *this = ::std::move(from);
  }

  inline Qos_SchedulerPolicies& operator=(Qos_SchedulerPolicies&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_SchedulerPolicies& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_SchedulerPolicies* internal_default_instance() {
    return reinterpret_cast<const Qos_SchedulerPolicies*>(
               &_Qos_SchedulerPolicies_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    158;

  void Swap(Qos_SchedulerPolicies* other);
  friend void swap(Qos_SchedulerPolicies& a, Qos_SchedulerPolicies& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_SchedulerPolicies* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_SchedulerPolicies* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_SchedulerPolicies& from);
  void MergeFrom(const Qos_SchedulerPolicies& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_SchedulerPolicies* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_SchedulerPolicies_SchedulerPolicy SchedulerPolicy;
  typedef Qos_SchedulerPolicies_SchedulerPolicyKey SchedulerPolicyKey;

  // accessors -------------------------------------------------------

  // repeated .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey scheduler_policy = 422526610 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy"];
  int scheduler_policy_size() const;
  void clear_scheduler_policy();
  static const int kSchedulerPolicyFieldNumber = 422526610;
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicyKey& scheduler_policy(int index) const;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicyKey* mutable_scheduler_policy(int index);
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicyKey* add_scheduler_policy();
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicyKey >*
      mutable_scheduler_policy();
  const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicyKey >&
      scheduler_policy() const;

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.SchedulerPolicies)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicyKey > scheduler_policy_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_SchedulerPoliciesImpl();
};
// -------------------------------------------------------------------

class Qos_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos.State) */ {
 public:
  Qos_State();
  virtual ~Qos_State();

  Qos_State(const Qos_State& from);

  inline Qos_State& operator=(const Qos_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos_State(Qos_State&& from) noexcept
    : Qos_State() {
    *this = ::std::move(from);
  }

  inline Qos_State& operator=(Qos_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos_State* internal_default_instance() {
    return reinterpret_cast<const Qos_State*>(
               &_Qos_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    159;

  void Swap(Qos_State* other);
  friend void swap(Qos_State& a, Qos_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos_State& from);
  void MergeFrom(const Qos_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQos_StateImpl();
};
// -------------------------------------------------------------------

class Qos : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_qos.Qos) */ {
 public:
  Qos();
  virtual ~Qos();

  Qos(const Qos& from);

  inline Qos& operator=(const Qos& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qos(Qos&& from) noexcept
    : Qos() {
    *this = ::std::move(from);
  }

  inline Qos& operator=(Qos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Qos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Qos* internal_default_instance() {
    return reinterpret_cast<const Qos*>(
               &_Qos_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    160;

  void Swap(Qos* other);
  friend void swap(Qos& a, Qos& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qos* New() const PROTOBUF_FINAL { return New(NULL); }

  Qos* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qos& from);
  void MergeFrom(const Qos& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qos* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Qos_Classifiers Classifiers;
  typedef Qos_Config Config;
  typedef Qos_ForwardingGroups ForwardingGroups;
  typedef Qos_Interfaces Interfaces;
  typedef Qos_Queues Queues;
  typedef Qos_SchedulerPolicies SchedulerPolicies;
  typedef Qos_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_qos.Qos.Classifiers classifiers = 90288891 [(.yext.schemapath) = "/qos/classifiers"];
  bool has_classifiers() const;
  void clear_classifiers();
  static const int kClassifiersFieldNumber = 90288891;
  const ::openconfig::openconfig_qos::Qos_Classifiers& classifiers() const;
  ::openconfig::openconfig_qos::Qos_Classifiers* release_classifiers();
  ::openconfig::openconfig_qos::Qos_Classifiers* mutable_classifiers();
  void set_allocated_classifiers(::openconfig::openconfig_qos::Qos_Classifiers* classifiers);

  // .openconfig.openconfig_qos.Qos.State state = 139048646 [(.yext.schemapath) = "/qos/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 139048646;
  const ::openconfig::openconfig_qos::Qos_State& state() const;
  ::openconfig::openconfig_qos::Qos_State* release_state();
  ::openconfig::openconfig_qos::Qos_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_qos::Qos_State* state);

  // .openconfig.openconfig_qos.Qos.SchedulerPolicies scheduler_policies = 191956329 [(.yext.schemapath) = "/qos/scheduler-policies"];
  bool has_scheduler_policies() const;
  void clear_scheduler_policies();
  static const int kSchedulerPoliciesFieldNumber = 191956329;
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies& scheduler_policies() const;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies* release_scheduler_policies();
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies* mutable_scheduler_policies();
  void set_allocated_scheduler_policies(::openconfig::openconfig_qos::Qos_SchedulerPolicies* scheduler_policies);

  // .openconfig.openconfig_qos.Qos.Queues queues = 244490847 [(.yext.schemapath) = "/qos/queues"];
  bool has_queues() const;
  void clear_queues();
  static const int kQueuesFieldNumber = 244490847;
  const ::openconfig::openconfig_qos::Qos_Queues& queues() const;
  ::openconfig::openconfig_qos::Qos_Queues* release_queues();
  ::openconfig::openconfig_qos::Qos_Queues* mutable_queues();
  void set_allocated_queues(::openconfig::openconfig_qos::Qos_Queues* queues);

  // .openconfig.openconfig_qos.Qos.Config config = 254929617 [(.yext.schemapath) = "/qos/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 254929617;
  const ::openconfig::openconfig_qos::Qos_Config& config() const;
  ::openconfig::openconfig_qos::Qos_Config* release_config();
  ::openconfig::openconfig_qos::Qos_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_qos::Qos_Config* config);

  // .openconfig.openconfig_qos.Qos.ForwardingGroups forwarding_groups = 328718935 [(.yext.schemapath) = "/qos/forwarding-groups"];
  bool has_forwarding_groups() const;
  void clear_forwarding_groups();
  static const int kForwardingGroupsFieldNumber = 328718935;
  const ::openconfig::openconfig_qos::Qos_ForwardingGroups& forwarding_groups() const;
  ::openconfig::openconfig_qos::Qos_ForwardingGroups* release_forwarding_groups();
  ::openconfig::openconfig_qos::Qos_ForwardingGroups* mutable_forwarding_groups();
  void set_allocated_forwarding_groups(::openconfig::openconfig_qos::Qos_ForwardingGroups* forwarding_groups);

  // .openconfig.openconfig_qos.Qos.Interfaces interfaces = 329973087 [(.yext.schemapath) = "/qos/interfaces"];
  bool has_interfaces() const;
  void clear_interfaces();
  static const int kInterfacesFieldNumber = 329973087;
  const ::openconfig::openconfig_qos::Qos_Interfaces& interfaces() const;
  ::openconfig::openconfig_qos::Qos_Interfaces* release_interfaces();
  ::openconfig::openconfig_qos::Qos_Interfaces* mutable_interfaces();
  void set_allocated_interfaces(::openconfig::openconfig_qos::Qos_Interfaces* interfaces);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_qos.Qos)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_qos::Qos_Classifiers* classifiers_;
  ::openconfig::openconfig_qos::Qos_State* state_;
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies* scheduler_policies_;
  ::openconfig::openconfig_qos::Qos_Queues* queues_;
  ::openconfig::openconfig_qos::Qos_Config* config_;
  ::openconfig::openconfig_qos::Qos_ForwardingGroups* forwarding_groups_;
  ::openconfig::openconfig_qos::Qos_Interfaces* interfaces_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto::InitDefaultsQosImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Qos_Classifiers_Classifier_Config

// .ywrapper.StringValue name = 444888484 [(.yext.schemapath) = "/qos/classifiers/classifier/config/name"];
inline bool Qos_Classifiers_Classifier_Config::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Classifiers_Classifier_Config::name() const {
  const ::ywrapper::StringValue* p = name_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Config.name)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Config::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Config.name)
  
  ::ywrapper::StringValue* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Config::mutable_name() {
  
  if (name_ == NULL) {
    name_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Config.name)
  return name_;
}
inline void Qos_Classifiers_Classifier_Config::set_allocated_name(::ywrapper::StringValue* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Config.name)
}

// .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Config.Type type = 422459117 [(.yext.schemapath) = "/qos/classifiers/classifier/config/type"];
inline void Qos_Classifiers_Classifier_Config::clear_type() {
  type_ = 0;
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Config_Type Qos_Classifiers_Classifier_Config::type() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Config.type)
  return static_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Config_Type >(type_);
}
inline void Qos_Classifiers_Classifier_Config::set_type(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Config_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Config.type)
}

// -------------------------------------------------------------------

// Qos_Classifiers_Classifier_State

// .ywrapper.StringValue name = 242051611 [(.yext.schemapath) = "/qos/classifiers/classifier/state/name"];
inline bool Qos_Classifiers_Classifier_State::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Classifiers_Classifier_State::name() const {
  const ::ywrapper::StringValue* p = name_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.State.name)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_State::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.State.name)
  
  ::ywrapper::StringValue* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_State::mutable_name() {
  
  if (name_ == NULL) {
    name_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.State.name)
  return name_;
}
inline void Qos_Classifiers_Classifier_State::set_allocated_name(::ywrapper::StringValue* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.State.name)
}

// .openconfig.openconfig_qos.Qos.Classifiers.Classifier.State.Type type = 334844318 [(.yext.schemapath) = "/qos/classifiers/classifier/state/type"];
inline void Qos_Classifiers_Classifier_State::clear_type() {
  type_ = 0;
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_State_Type Qos_Classifiers_Classifier_State::type() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.State.type)
  return static_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_State_Type >(type_);
}
inline void Qos_Classifiers_Classifier_State::set_type(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_State_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Classifiers.Classifier.State.type)
}

// -------------------------------------------------------------------

// Qos_Classifiers_Classifier_Terms_Term_Actions_Config

// .ywrapper.StringValue target_group = 263567595 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/config/target-group"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Actions_Config::has_target_group() const {
  return this != internal_default_instance() && target_group_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Classifiers_Classifier_Terms_Term_Actions_Config::target_group() const {
  const ::ywrapper::StringValue* p = target_group_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Config.target_group)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Terms_Term_Actions_Config::release_target_group() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Config.target_group)
  
  ::ywrapper::StringValue* temp = target_group_;
  target_group_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Terms_Term_Actions_Config::mutable_target_group() {
  
  if (target_group_ == NULL) {
    target_group_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Config.target_group)
  return target_group_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Actions_Config::set_allocated_target_group(::ywrapper::StringValue* target_group) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(target_group_);
  }
  if (target_group) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      target_group = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, target_group, submessage_arena);
    }
    
  } else {
    
  }
  target_group_ = target_group;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Config.target_group)
}

// -------------------------------------------------------------------

// Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config

// .ywrapper.UintValue set_dot1p = 129420902 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/config/set-dot1p"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::has_set_dot1p() const {
  return this != internal_default_instance() && set_dot1p_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::set_dot1p() const {
  const ::ywrapper::UintValue* p = set_dot1p_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config.set_dot1p)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::release_set_dot1p() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config.set_dot1p)
  
  ::ywrapper::UintValue* temp = set_dot1p_;
  set_dot1p_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::mutable_set_dot1p() {
  
  if (set_dot1p_ == NULL) {
    set_dot1p_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config.set_dot1p)
  return set_dot1p_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::set_allocated_set_dot1p(::ywrapper::UintValue* set_dot1p) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(set_dot1p_);
  }
  if (set_dot1p) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_dot1p = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_dot1p, submessage_arena);
    }
    
  } else {
    
  }
  set_dot1p_ = set_dot1p;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config.set_dot1p)
}

// .ywrapper.UintValue set_dscp = 184950326 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/config/set-dscp"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::has_set_dscp() const {
  return this != internal_default_instance() && set_dscp_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::set_dscp() const {
  const ::ywrapper::UintValue* p = set_dscp_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config.set_dscp)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::release_set_dscp() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config.set_dscp)
  
  ::ywrapper::UintValue* temp = set_dscp_;
  set_dscp_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::mutable_set_dscp() {
  
  if (set_dscp_ == NULL) {
    set_dscp_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config.set_dscp)
  return set_dscp_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::set_allocated_set_dscp(::ywrapper::UintValue* set_dscp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(set_dscp_);
  }
  if (set_dscp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_dscp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_dscp, submessage_arena);
    }
    
  } else {
    
  }
  set_dscp_ = set_dscp;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config.set_dscp)
}

// .ywrapper.UintValue set_mpls_tc = 115576782 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/config/set-mpls-tc"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::has_set_mpls_tc() const {
  return this != internal_default_instance() && set_mpls_tc_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::set_mpls_tc() const {
  const ::ywrapper::UintValue* p = set_mpls_tc_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config.set_mpls_tc)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::release_set_mpls_tc() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config.set_mpls_tc)
  
  ::ywrapper::UintValue* temp = set_mpls_tc_;
  set_mpls_tc_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::mutable_set_mpls_tc() {
  
  if (set_mpls_tc_ == NULL) {
    set_mpls_tc_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config.set_mpls_tc)
  return set_mpls_tc_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config::set_allocated_set_mpls_tc(::ywrapper::UintValue* set_mpls_tc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(set_mpls_tc_);
  }
  if (set_mpls_tc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_mpls_tc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_mpls_tc, submessage_arena);
    }
    
  } else {
    
  }
  set_mpls_tc_ = set_mpls_tc;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config.set_mpls_tc)
}

// -------------------------------------------------------------------

// Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State

// .ywrapper.UintValue set_dot1p = 309389519 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/state/set-dot1p"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::has_set_dot1p() const {
  return this != internal_default_instance() && set_dot1p_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::set_dot1p() const {
  const ::ywrapper::UintValue* p = set_dot1p_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State.set_dot1p)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::release_set_dot1p() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State.set_dot1p)
  
  ::ywrapper::UintValue* temp = set_dot1p_;
  set_dot1p_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::mutable_set_dot1p() {
  
  if (set_dot1p_ == NULL) {
    set_dot1p_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State.set_dot1p)
  return set_dot1p_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::set_allocated_set_dot1p(::ywrapper::UintValue* set_dot1p) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(set_dot1p_);
  }
  if (set_dot1p) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_dot1p = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_dot1p, submessage_arena);
    }
    
  } else {
    
  }
  set_dot1p_ = set_dot1p;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State.set_dot1p)
}

// .ywrapper.UintValue set_dscp = 509738221 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/state/set-dscp"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::has_set_dscp() const {
  return this != internal_default_instance() && set_dscp_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::set_dscp() const {
  const ::ywrapper::UintValue* p = set_dscp_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State.set_dscp)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::release_set_dscp() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State.set_dscp)
  
  ::ywrapper::UintValue* temp = set_dscp_;
  set_dscp_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::mutable_set_dscp() {
  
  if (set_dscp_ == NULL) {
    set_dscp_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State.set_dscp)
  return set_dscp_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::set_allocated_set_dscp(::ywrapper::UintValue* set_dscp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(set_dscp_);
  }
  if (set_dscp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_dscp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_dscp, submessage_arena);
    }
    
  } else {
    
  }
  set_dscp_ = set_dscp;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State.set_dscp)
}

// .ywrapper.UintValue set_mpls_tc = 103423347 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/state/set-mpls-tc"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::has_set_mpls_tc() const {
  return this != internal_default_instance() && set_mpls_tc_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::set_mpls_tc() const {
  const ::ywrapper::UintValue* p = set_mpls_tc_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State.set_mpls_tc)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::release_set_mpls_tc() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State.set_mpls_tc)
  
  ::ywrapper::UintValue* temp = set_mpls_tc_;
  set_mpls_tc_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::mutable_set_mpls_tc() {
  
  if (set_mpls_tc_ == NULL) {
    set_mpls_tc_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State.set_mpls_tc)
  return set_mpls_tc_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State::set_allocated_set_mpls_tc(::ywrapper::UintValue* set_mpls_tc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(set_mpls_tc_);
  }
  if (set_mpls_tc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_mpls_tc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_mpls_tc, submessage_arena);
    }
    
  } else {
    
  }
  set_mpls_tc_ = set_mpls_tc;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State.set_mpls_tc)
}

// -------------------------------------------------------------------

// Qos_Classifiers_Classifier_Terms_Term_Actions_Remark

// .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.Config config = 535857410 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/config"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Actions_Remark::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config& Qos_Classifiers_Classifier_Terms_Term_Actions_Remark::config() const {
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config*>(
      &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config* Qos_Classifiers_Classifier_Terms_Term_Actions_Remark::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.config)
  
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config* Qos_Classifiers_Classifier_Terms_Term_Actions_Remark::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.config)
  return config_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark::set_allocated_config(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.config)
}

// .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.State state = 416672959 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark/state"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Actions_Remark::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State& Qos_Classifiers_Classifier_Terms_Term_Actions_Remark::state() const {
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State*>(
      &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State* Qos_Classifiers_Classifier_Terms_Term_Actions_Remark::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.state)
  
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State* Qos_Classifiers_Classifier_Terms_Term_Actions_Remark::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.state)
  return state_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Actions_Remark::set_allocated_state(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark.state)
}

// -------------------------------------------------------------------

// Qos_Classifiers_Classifier_Terms_Term_Actions_State

// .ywrapper.StringValue target_group = 329531914 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/state/target-group"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Actions_State::has_target_group() const {
  return this != internal_default_instance() && target_group_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Classifiers_Classifier_Terms_Term_Actions_State::target_group() const {
  const ::ywrapper::StringValue* p = target_group_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.State.target_group)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Terms_Term_Actions_State::release_target_group() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.State.target_group)
  
  ::ywrapper::StringValue* temp = target_group_;
  target_group_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Terms_Term_Actions_State::mutable_target_group() {
  
  if (target_group_ == NULL) {
    target_group_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.State.target_group)
  return target_group_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Actions_State::set_allocated_target_group(::ywrapper::StringValue* target_group) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(target_group_);
  }
  if (target_group) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      target_group = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, target_group, submessage_arena);
    }
    
  } else {
    
  }
  target_group_ = target_group;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.State.target_group)
}

// -------------------------------------------------------------------

// Qos_Classifiers_Classifier_Terms_Term_Actions

// .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Config config = 112958415 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/config"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Actions::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Actions::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Config& Qos_Classifiers_Classifier_Terms_Term_Actions::config() const {
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Config*>(
      &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Actions_Config_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Config* Qos_Classifiers_Classifier_Terms_Term_Actions::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.config)
  
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Config* Qos_Classifiers_Classifier_Terms_Term_Actions::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.config)
  return config_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Actions::set_allocated_config(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.config)
}

// .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.Remark remark = 45738605 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/remark"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Actions::has_remark() const {
  return this != internal_default_instance() && remark_ != NULL;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Actions::clear_remark() {
  if (GetArenaNoVirtual() == NULL && remark_ != NULL) {
    delete remark_;
  }
  remark_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark& Qos_Classifiers_Classifier_Terms_Term_Actions::remark() const {
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark* p = remark_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.remark)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark*>(
      &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Actions_Remark_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark* Qos_Classifiers_Classifier_Terms_Term_Actions::release_remark() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.remark)
  
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark* temp = remark_;
  remark_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark* Qos_Classifiers_Classifier_Terms_Term_Actions::mutable_remark() {
  
  if (remark_ == NULL) {
    remark_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.remark)
  return remark_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Actions::set_allocated_remark(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_Remark* remark) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete remark_;
  }
  if (remark) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      remark = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, remark, submessage_arena);
    }
    
  } else {
    
  }
  remark_ = remark;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.remark)
}

// .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.State state = 404171968 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions/state"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Actions::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Actions::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_State& Qos_Classifiers_Classifier_Terms_Term_Actions::state() const {
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_State*>(
      &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Actions_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_State* Qos_Classifiers_Classifier_Terms_Term_Actions::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.state)
  
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_State* Qos_Classifiers_Classifier_Terms_Term_Actions::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.state)
  return state_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Actions::set_allocated_state(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions.state)
}

// -------------------------------------------------------------------

// Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config

// .ywrapper.StringValue destination_address = 527978798 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/destination-address"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::has_destination_address() const {
  return this != internal_default_instance() && destination_address_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::destination_address() const {
  const ::ywrapper::StringValue* p = destination_address_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config.destination_address)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::release_destination_address() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config.destination_address)
  
  ::ywrapper::StringValue* temp = destination_address_;
  destination_address_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::mutable_destination_address() {
  
  if (destination_address_ == NULL) {
    destination_address_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config.destination_address)
  return destination_address_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::set_allocated_destination_address(::ywrapper::StringValue* destination_address) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(destination_address_);
  }
  if (destination_address) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      destination_address = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, destination_address, submessage_arena);
    }
    
  } else {
    
  }
  destination_address_ = destination_address;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config.destination_address)
}

// .ywrapper.UintValue dscp = 459218869 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/dscp"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::has_dscp() const {
  return this != internal_default_instance() && dscp_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::dscp() const {
  const ::ywrapper::UintValue* p = dscp_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config.dscp)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::release_dscp() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config.dscp)
  
  ::ywrapper::UintValue* temp = dscp_;
  dscp_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::mutable_dscp() {
  
  if (dscp_ == NULL) {
    dscp_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config.dscp)
  return dscp_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::set_allocated_dscp(::ywrapper::UintValue* dscp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dscp_);
  }
  if (dscp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dscp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dscp, submessage_arena);
    }
    
  } else {
    
  }
  dscp_ = dscp;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config.dscp)
}

// .ywrapper.UintValue hop_limit = 164634146 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/hop-limit"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::has_hop_limit() const {
  return this != internal_default_instance() && hop_limit_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::hop_limit() const {
  const ::ywrapper::UintValue* p = hop_limit_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config.hop_limit)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::release_hop_limit() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config.hop_limit)
  
  ::ywrapper::UintValue* temp = hop_limit_;
  hop_limit_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::mutable_hop_limit() {
  
  if (hop_limit_ == NULL) {
    hop_limit_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config.hop_limit)
  return hop_limit_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::set_allocated_hop_limit(::ywrapper::UintValue* hop_limit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(hop_limit_);
  }
  if (hop_limit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hop_limit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hop_limit, submessage_arena);
    }
    
  } else {
    
  }
  hop_limit_ = hop_limit;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config.hop_limit)
}

// .openconfig.enums.OpenconfigPacketMatchTypesIPPROTOCOL protocol_openconfigpacketmatchtypesipprotocol = 371958053;
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::has_protocol_openconfigpacketmatchtypesipprotocol() const {
  return protocol_case() == kProtocolOpenconfigpacketmatchtypesipprotocol;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::set_has_protocol_openconfigpacketmatchtypesipprotocol() {
  _oneof_case_[0] = kProtocolOpenconfigpacketmatchtypesipprotocol;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::clear_protocol_openconfigpacketmatchtypesipprotocol() {
  if (has_protocol_openconfigpacketmatchtypesipprotocol()) {
    protocol_.protocol_openconfigpacketmatchtypesipprotocol_ = 0;
    clear_has_protocol();
  }
}
inline ::openconfig::enums::OpenconfigPacketMatchTypesIPPROTOCOL Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::protocol_openconfigpacketmatchtypesipprotocol() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config.protocol_openconfigpacketmatchtypesipprotocol)
  if (has_protocol_openconfigpacketmatchtypesipprotocol()) {
    return static_cast< ::openconfig::enums::OpenconfigPacketMatchTypesIPPROTOCOL >(protocol_.protocol_openconfigpacketmatchtypesipprotocol_);
  }
  return static_cast< ::openconfig::enums::OpenconfigPacketMatchTypesIPPROTOCOL >(0);
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::set_protocol_openconfigpacketmatchtypesipprotocol(::openconfig::enums::OpenconfigPacketMatchTypesIPPROTOCOL value) {
  if (!has_protocol_openconfigpacketmatchtypesipprotocol()) {
    clear_protocol();
    set_has_protocol_openconfigpacketmatchtypesipprotocol();
  }
  protocol_.protocol_openconfigpacketmatchtypesipprotocol_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config.protocol_openconfigpacketmatchtypesipprotocol)
}

// uint64 protocol_uint64 = 488250108;
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::has_protocol_uint64() const {
  return protocol_case() == kProtocolUint64;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::set_has_protocol_uint64() {
  _oneof_case_[0] = kProtocolUint64;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::clear_protocol_uint64() {
  if (has_protocol_uint64()) {
    protocol_.protocol_uint64_ = GOOGLE_ULONGLONG(0);
    clear_has_protocol();
  }
}
inline ::google::protobuf::uint64 Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::protocol_uint64() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config.protocol_uint64)
  if (has_protocol_uint64()) {
    return protocol_.protocol_uint64_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::set_protocol_uint64(::google::protobuf::uint64 value) {
  if (!has_protocol_uint64()) {
    clear_protocol();
    set_has_protocol_uint64();
  }
  protocol_.protocol_uint64_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config.protocol_uint64)
}

// .ywrapper.StringValue source_address = 389228459 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/config/source-address"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::has_source_address() const {
  return this != internal_default_instance() && source_address_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::source_address() const {
  const ::ywrapper::StringValue* p = source_address_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config.source_address)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::release_source_address() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config.source_address)
  
  ::ywrapper::StringValue* temp = source_address_;
  source_address_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::mutable_source_address() {
  
  if (source_address_ == NULL) {
    source_address_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config.source_address)
  return source_address_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::set_allocated_source_address(::ywrapper::StringValue* source_address) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(source_address_);
  }
  if (source_address) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      source_address = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, source_address, submessage_arena);
    }
    
  } else {
    
  }
  source_address_ = source_address;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config.source_address)
}

inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::has_protocol() const {
  return protocol_case() != PROTOCOL_NOT_SET;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::clear_has_protocol() {
  _oneof_case_[0] = PROTOCOL_NOT_SET;
}
inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::ProtocolCase Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::protocol_case() const {
  return Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config::ProtocolCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State

// .ywrapper.StringValue destination_address = 384655847 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/destination-address"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::has_destination_address() const {
  return this != internal_default_instance() && destination_address_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::destination_address() const {
  const ::ywrapper::StringValue* p = destination_address_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State.destination_address)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::release_destination_address() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State.destination_address)
  
  ::ywrapper::StringValue* temp = destination_address_;
  destination_address_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::mutable_destination_address() {
  
  if (destination_address_ == NULL) {
    destination_address_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State.destination_address)
  return destination_address_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::set_allocated_destination_address(::ywrapper::StringValue* destination_address) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(destination_address_);
  }
  if (destination_address) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      destination_address = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, destination_address, submessage_arena);
    }
    
  } else {
    
  }
  destination_address_ = destination_address;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State.destination_address)
}

// .ywrapper.UintValue dscp = 215913306 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/dscp"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::has_dscp() const {
  return this != internal_default_instance() && dscp_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::dscp() const {
  const ::ywrapper::UintValue* p = dscp_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State.dscp)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::release_dscp() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State.dscp)
  
  ::ywrapper::UintValue* temp = dscp_;
  dscp_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::mutable_dscp() {
  
  if (dscp_ == NULL) {
    dscp_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State.dscp)
  return dscp_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::set_allocated_dscp(::ywrapper::UintValue* dscp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dscp_);
  }
  if (dscp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dscp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dscp, submessage_arena);
    }
    
  } else {
    
  }
  dscp_ = dscp;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State.dscp)
}

// .ywrapper.UintValue hop_limit = 362494135 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/hop-limit"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::has_hop_limit() const {
  return this != internal_default_instance() && hop_limit_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::hop_limit() const {
  const ::ywrapper::UintValue* p = hop_limit_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State.hop_limit)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::release_hop_limit() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State.hop_limit)
  
  ::ywrapper::UintValue* temp = hop_limit_;
  hop_limit_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::mutable_hop_limit() {
  
  if (hop_limit_ == NULL) {
    hop_limit_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State.hop_limit)
  return hop_limit_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::set_allocated_hop_limit(::ywrapper::UintValue* hop_limit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(hop_limit_);
  }
  if (hop_limit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hop_limit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hop_limit, submessage_arena);
    }
    
  } else {
    
  }
  hop_limit_ = hop_limit;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State.hop_limit)
}

// .openconfig.enums.OpenconfigPacketMatchTypesIPPROTOCOL protocol_openconfigpacketmatchtypesipprotocol = 336703624;
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::has_protocol_openconfigpacketmatchtypesipprotocol() const {
  return protocol_case() == kProtocolOpenconfigpacketmatchtypesipprotocol;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::set_has_protocol_openconfigpacketmatchtypesipprotocol() {
  _oneof_case_[0] = kProtocolOpenconfigpacketmatchtypesipprotocol;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::clear_protocol_openconfigpacketmatchtypesipprotocol() {
  if (has_protocol_openconfigpacketmatchtypesipprotocol()) {
    protocol_.protocol_openconfigpacketmatchtypesipprotocol_ = 0;
    clear_has_protocol();
  }
}
inline ::openconfig::enums::OpenconfigPacketMatchTypesIPPROTOCOL Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::protocol_openconfigpacketmatchtypesipprotocol() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State.protocol_openconfigpacketmatchtypesipprotocol)
  if (has_protocol_openconfigpacketmatchtypesipprotocol()) {
    return static_cast< ::openconfig::enums::OpenconfigPacketMatchTypesIPPROTOCOL >(protocol_.protocol_openconfigpacketmatchtypesipprotocol_);
  }
  return static_cast< ::openconfig::enums::OpenconfigPacketMatchTypesIPPROTOCOL >(0);
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::set_protocol_openconfigpacketmatchtypesipprotocol(::openconfig::enums::OpenconfigPacketMatchTypesIPPROTOCOL value) {
  if (!has_protocol_openconfigpacketmatchtypesipprotocol()) {
    clear_protocol();
    set_has_protocol_openconfigpacketmatchtypesipprotocol();
  }
  protocol_.protocol_openconfigpacketmatchtypesipprotocol_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State.protocol_openconfigpacketmatchtypesipprotocol)
}

// uint64 protocol_uint64 = 139262509;
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::has_protocol_uint64() const {
  return protocol_case() == kProtocolUint64;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::set_has_protocol_uint64() {
  _oneof_case_[0] = kProtocolUint64;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::clear_protocol_uint64() {
  if (has_protocol_uint64()) {
    protocol_.protocol_uint64_ = GOOGLE_ULONGLONG(0);
    clear_has_protocol();
  }
}
inline ::google::protobuf::uint64 Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::protocol_uint64() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State.protocol_uint64)
  if (has_protocol_uint64()) {
    return protocol_.protocol_uint64_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::set_protocol_uint64(::google::protobuf::uint64 value) {
  if (!has_protocol_uint64()) {
    clear_protocol();
    set_has_protocol_uint64();
  }
  protocol_.protocol_uint64_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State.protocol_uint64)
}

// .ywrapper.StringValue source_address = 139081528 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/state/source-address"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::has_source_address() const {
  return this != internal_default_instance() && source_address_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::source_address() const {
  const ::ywrapper::StringValue* p = source_address_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State.source_address)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::release_source_address() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State.source_address)
  
  ::ywrapper::StringValue* temp = source_address_;
  source_address_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::mutable_source_address() {
  
  if (source_address_ == NULL) {
    source_address_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State.source_address)
  return source_address_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::set_allocated_source_address(::ywrapper::StringValue* source_address) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(source_address_);
  }
  if (source_address) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      source_address = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, source_address, submessage_arena);
    }
    
  } else {
    
  }
  source_address_ = source_address;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State.source_address)
}

inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::has_protocol() const {
  return protocol_case() != PROTOCOL_NOT_SET;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::clear_has_protocol() {
  _oneof_case_[0] = PROTOCOL_NOT_SET;
}
inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::ProtocolCase Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::protocol_case() const {
  return Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State::ProtocolCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4

// .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.Config config = 82051516 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/config"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config& Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4::config() const {
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config*>(
      &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.config)
  
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.config)
  return config_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4::set_allocated_config(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.config)
}

// .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.State state = 26286517 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4/state"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State& Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4::state() const {
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State*>(
      &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.state)
  
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.state)
  return state_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4::set_allocated_state(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4.state)
}

// -------------------------------------------------------------------

// Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config

// .ywrapper.StringValue destination_address = 139860024 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/destination-address"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::has_destination_address() const {
  return this != internal_default_instance() && destination_address_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::destination_address() const {
  const ::ywrapper::StringValue* p = destination_address_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config.destination_address)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::release_destination_address() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config.destination_address)
  
  ::ywrapper::StringValue* temp = destination_address_;
  destination_address_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::mutable_destination_address() {
  
  if (destination_address_ == NULL) {
    destination_address_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config.destination_address)
  return destination_address_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::set_allocated_destination_address(::ywrapper::StringValue* destination_address) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(destination_address_);
  }
  if (destination_address) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      destination_address = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, destination_address, submessage_arena);
    }
    
  } else {
    
  }
  destination_address_ = destination_address;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config.destination_address)
}

// .ywrapper.UintValue destination_flow_label = 26892661 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/destination-flow-label"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::has_destination_flow_label() const {
  return this != internal_default_instance() && destination_flow_label_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::destination_flow_label() const {
  const ::ywrapper::UintValue* p = destination_flow_label_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config.destination_flow_label)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::release_destination_flow_label() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config.destination_flow_label)
  
  ::ywrapper::UintValue* temp = destination_flow_label_;
  destination_flow_label_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::mutable_destination_flow_label() {
  
  if (destination_flow_label_ == NULL) {
    destination_flow_label_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config.destination_flow_label)
  return destination_flow_label_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::set_allocated_destination_flow_label(::ywrapper::UintValue* destination_flow_label) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(destination_flow_label_);
  }
  if (destination_flow_label) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      destination_flow_label = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, destination_flow_label, submessage_arena);
    }
    
  } else {
    
  }
  destination_flow_label_ = destination_flow_label;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config.destination_flow_label)
}

// .ywrapper.UintValue dscp = 482221487 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/dscp"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::has_dscp() const {
  return this != internal_default_instance() && dscp_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::dscp() const {
  const ::ywrapper::UintValue* p = dscp_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config.dscp)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::release_dscp() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config.dscp)
  
  ::ywrapper::UintValue* temp = dscp_;
  dscp_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::mutable_dscp() {
  
  if (dscp_ == NULL) {
    dscp_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config.dscp)
  return dscp_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::set_allocated_dscp(::ywrapper::UintValue* dscp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dscp_);
  }
  if (dscp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dscp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dscp, submessage_arena);
    }
    
  } else {
    
  }
  dscp_ = dscp;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config.dscp)
}

// .ywrapper.UintValue hop_limit = 233120028 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/hop-limit"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::has_hop_limit() const {
  return this != internal_default_instance() && hop_limit_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::hop_limit() const {
  const ::ywrapper::UintValue* p = hop_limit_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config.hop_limit)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::release_hop_limit() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config.hop_limit)
  
  ::ywrapper::UintValue* temp = hop_limit_;
  hop_limit_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::mutable_hop_limit() {
  
  if (hop_limit_ == NULL) {
    hop_limit_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config.hop_limit)
  return hop_limit_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::set_allocated_hop_limit(::ywrapper::UintValue* hop_limit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(hop_limit_);
  }
  if (hop_limit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hop_limit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hop_limit, submessage_arena);
    }
    
  } else {
    
  }
  hop_limit_ = hop_limit;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config.hop_limit)
}

// .openconfig.enums.OpenconfigPacketMatchTypesIPPROTOCOL protocol_openconfigpacketmatchtypesipprotocol = 483684219;
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::has_protocol_openconfigpacketmatchtypesipprotocol() const {
  return protocol_case() == kProtocolOpenconfigpacketmatchtypesipprotocol;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::set_has_protocol_openconfigpacketmatchtypesipprotocol() {
  _oneof_case_[0] = kProtocolOpenconfigpacketmatchtypesipprotocol;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::clear_protocol_openconfigpacketmatchtypesipprotocol() {
  if (has_protocol_openconfigpacketmatchtypesipprotocol()) {
    protocol_.protocol_openconfigpacketmatchtypesipprotocol_ = 0;
    clear_has_protocol();
  }
}
inline ::openconfig::enums::OpenconfigPacketMatchTypesIPPROTOCOL Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::protocol_openconfigpacketmatchtypesipprotocol() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config.protocol_openconfigpacketmatchtypesipprotocol)
  if (has_protocol_openconfigpacketmatchtypesipprotocol()) {
    return static_cast< ::openconfig::enums::OpenconfigPacketMatchTypesIPPROTOCOL >(protocol_.protocol_openconfigpacketmatchtypesipprotocol_);
  }
  return static_cast< ::openconfig::enums::OpenconfigPacketMatchTypesIPPROTOCOL >(0);
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::set_protocol_openconfigpacketmatchtypesipprotocol(::openconfig::enums::OpenconfigPacketMatchTypesIPPROTOCOL value) {
  if (!has_protocol_openconfigpacketmatchtypesipprotocol()) {
    clear_protocol();
    set_has_protocol_openconfigpacketmatchtypesipprotocol();
  }
  protocol_.protocol_openconfigpacketmatchtypesipprotocol_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config.protocol_openconfigpacketmatchtypesipprotocol)
}

// uint64 protocol_uint64 = 50630658;
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::has_protocol_uint64() const {
  return protocol_case() == kProtocolUint64;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::set_has_protocol_uint64() {
  _oneof_case_[0] = kProtocolUint64;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::clear_protocol_uint64() {
  if (has_protocol_uint64()) {
    protocol_.protocol_uint64_ = GOOGLE_ULONGLONG(0);
    clear_has_protocol();
  }
}
inline ::google::protobuf::uint64 Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::protocol_uint64() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config.protocol_uint64)
  if (has_protocol_uint64()) {
    return protocol_.protocol_uint64_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::set_protocol_uint64(::google::protobuf::uint64 value) {
  if (!has_protocol_uint64()) {
    clear_protocol();
    set_has_protocol_uint64();
  }
  protocol_.protocol_uint64_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config.protocol_uint64)
}

// .ywrapper.StringValue source_address = 498643489 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/source-address"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::has_source_address() const {
  return this != internal_default_instance() && source_address_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::source_address() const {
  const ::ywrapper::StringValue* p = source_address_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config.source_address)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::release_source_address() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config.source_address)
  
  ::ywrapper::StringValue* temp = source_address_;
  source_address_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::mutable_source_address() {
  
  if (source_address_ == NULL) {
    source_address_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config.source_address)
  return source_address_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::set_allocated_source_address(::ywrapper::StringValue* source_address) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(source_address_);
  }
  if (source_address) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      source_address = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, source_address, submessage_arena);
    }
    
  } else {
    
  }
  source_address_ = source_address;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config.source_address)
}

// .ywrapper.UintValue source_flow_label = 158748530 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config/source-flow-label"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::has_source_flow_label() const {
  return this != internal_default_instance() && source_flow_label_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::source_flow_label() const {
  const ::ywrapper::UintValue* p = source_flow_label_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config.source_flow_label)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::release_source_flow_label() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config.source_flow_label)
  
  ::ywrapper::UintValue* temp = source_flow_label_;
  source_flow_label_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::mutable_source_flow_label() {
  
  if (source_flow_label_ == NULL) {
    source_flow_label_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config.source_flow_label)
  return source_flow_label_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::set_allocated_source_flow_label(::ywrapper::UintValue* source_flow_label) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(source_flow_label_);
  }
  if (source_flow_label) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      source_flow_label = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, source_flow_label, submessage_arena);
    }
    
  } else {
    
  }
  source_flow_label_ = source_flow_label;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config.source_flow_label)
}

inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::has_protocol() const {
  return protocol_case() != PROTOCOL_NOT_SET;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::clear_has_protocol() {
  _oneof_case_[0] = PROTOCOL_NOT_SET;
}
inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::ProtocolCase Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::protocol_case() const {
  return Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config::ProtocolCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State

// .ywrapper.StringValue destination_address = 268066477 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-address"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::has_destination_address() const {
  return this != internal_default_instance() && destination_address_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::destination_address() const {
  const ::ywrapper::StringValue* p = destination_address_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State.destination_address)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::release_destination_address() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State.destination_address)
  
  ::ywrapper::StringValue* temp = destination_address_;
  destination_address_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::mutable_destination_address() {
  
  if (destination_address_ == NULL) {
    destination_address_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State.destination_address)
  return destination_address_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::set_allocated_destination_address(::ywrapper::StringValue* destination_address) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(destination_address_);
  }
  if (destination_address) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      destination_address = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, destination_address, submessage_arena);
    }
    
  } else {
    
  }
  destination_address_ = destination_address;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State.destination_address)
}

// .ywrapper.UintValue destination_flow_label = 333529406 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/destination-flow-label"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::has_destination_flow_label() const {
  return this != internal_default_instance() && destination_flow_label_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::destination_flow_label() const {
  const ::ywrapper::UintValue* p = destination_flow_label_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State.destination_flow_label)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::release_destination_flow_label() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State.destination_flow_label)
  
  ::ywrapper::UintValue* temp = destination_flow_label_;
  destination_flow_label_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::mutable_destination_flow_label() {
  
  if (destination_flow_label_ == NULL) {
    destination_flow_label_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State.destination_flow_label)
  return destination_flow_label_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::set_allocated_destination_flow_label(::ywrapper::UintValue* destination_flow_label) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(destination_flow_label_);
  }
  if (destination_flow_label) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      destination_flow_label = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, destination_flow_label, submessage_arena);
    }
    
  } else {
    
  }
  destination_flow_label_ = destination_flow_label;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State.destination_flow_label)
}

// .ywrapper.UintValue dscp = 297057864 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/dscp"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::has_dscp() const {
  return this != internal_default_instance() && dscp_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::dscp() const {
  const ::ywrapper::UintValue* p = dscp_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State.dscp)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::release_dscp() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State.dscp)
  
  ::ywrapper::UintValue* temp = dscp_;
  dscp_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::mutable_dscp() {
  
  if (dscp_ == NULL) {
    dscp_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State.dscp)
  return dscp_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::set_allocated_dscp(::ywrapper::UintValue* dscp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dscp_);
  }
  if (dscp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dscp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dscp, submessage_arena);
    }
    
  } else {
    
  }
  dscp_ = dscp;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State.dscp)
}

// .ywrapper.UintValue hop_limit = 472314045 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/hop-limit"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::has_hop_limit() const {
  return this != internal_default_instance() && hop_limit_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::hop_limit() const {
  const ::ywrapper::UintValue* p = hop_limit_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State.hop_limit)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::release_hop_limit() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State.hop_limit)
  
  ::ywrapper::UintValue* temp = hop_limit_;
  hop_limit_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::mutable_hop_limit() {
  
  if (hop_limit_ == NULL) {
    hop_limit_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State.hop_limit)
  return hop_limit_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::set_allocated_hop_limit(::ywrapper::UintValue* hop_limit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(hop_limit_);
  }
  if (hop_limit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hop_limit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hop_limit, submessage_arena);
    }
    
  } else {
    
  }
  hop_limit_ = hop_limit;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State.hop_limit)
}

// .openconfig.enums.OpenconfigPacketMatchTypesIPPROTOCOL protocol_openconfigpacketmatchtypesipprotocol = 248928978;
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::has_protocol_openconfigpacketmatchtypesipprotocol() const {
  return protocol_case() == kProtocolOpenconfigpacketmatchtypesipprotocol;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::set_has_protocol_openconfigpacketmatchtypesipprotocol() {
  _oneof_case_[0] = kProtocolOpenconfigpacketmatchtypesipprotocol;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::clear_protocol_openconfigpacketmatchtypesipprotocol() {
  if (has_protocol_openconfigpacketmatchtypesipprotocol()) {
    protocol_.protocol_openconfigpacketmatchtypesipprotocol_ = 0;
    clear_has_protocol();
  }
}
inline ::openconfig::enums::OpenconfigPacketMatchTypesIPPROTOCOL Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::protocol_openconfigpacketmatchtypesipprotocol() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State.protocol_openconfigpacketmatchtypesipprotocol)
  if (has_protocol_openconfigpacketmatchtypesipprotocol()) {
    return static_cast< ::openconfig::enums::OpenconfigPacketMatchTypesIPPROTOCOL >(protocol_.protocol_openconfigpacketmatchtypesipprotocol_);
  }
  return static_cast< ::openconfig::enums::OpenconfigPacketMatchTypesIPPROTOCOL >(0);
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::set_protocol_openconfigpacketmatchtypesipprotocol(::openconfig::enums::OpenconfigPacketMatchTypesIPPROTOCOL value) {
  if (!has_protocol_openconfigpacketmatchtypesipprotocol()) {
    clear_protocol();
    set_has_protocol_openconfigpacketmatchtypesipprotocol();
  }
  protocol_.protocol_openconfigpacketmatchtypesipprotocol_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State.protocol_openconfigpacketmatchtypesipprotocol)
}

// uint64 protocol_uint64 = 136889423;
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::has_protocol_uint64() const {
  return protocol_case() == kProtocolUint64;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::set_has_protocol_uint64() {
  _oneof_case_[0] = kProtocolUint64;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::clear_protocol_uint64() {
  if (has_protocol_uint64()) {
    protocol_.protocol_uint64_ = GOOGLE_ULONGLONG(0);
    clear_has_protocol();
  }
}
inline ::google::protobuf::uint64 Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::protocol_uint64() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State.protocol_uint64)
  if (has_protocol_uint64()) {
    return protocol_.protocol_uint64_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::set_protocol_uint64(::google::protobuf::uint64 value) {
  if (!has_protocol_uint64()) {
    clear_protocol();
    set_has_protocol_uint64();
  }
  protocol_.protocol_uint64_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State.protocol_uint64)
}

// .ywrapper.StringValue source_address = 239778034 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-address"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::has_source_address() const {
  return this != internal_default_instance() && source_address_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::source_address() const {
  const ::ywrapper::StringValue* p = source_address_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State.source_address)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::release_source_address() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State.source_address)
  
  ::ywrapper::StringValue* temp = source_address_;
  source_address_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::mutable_source_address() {
  
  if (source_address_ == NULL) {
    source_address_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State.source_address)
  return source_address_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::set_allocated_source_address(::ywrapper::StringValue* source_address) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(source_address_);
  }
  if (source_address) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      source_address = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, source_address, submessage_arena);
    }
    
  } else {
    
  }
  source_address_ = source_address;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State.source_address)
}

// .ywrapper.UintValue source_flow_label = 218402383 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state/source-flow-label"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::has_source_flow_label() const {
  return this != internal_default_instance() && source_flow_label_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::source_flow_label() const {
  const ::ywrapper::UintValue* p = source_flow_label_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State.source_flow_label)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::release_source_flow_label() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State.source_flow_label)
  
  ::ywrapper::UintValue* temp = source_flow_label_;
  source_flow_label_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::mutable_source_flow_label() {
  
  if (source_flow_label_ == NULL) {
    source_flow_label_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State.source_flow_label)
  return source_flow_label_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::set_allocated_source_flow_label(::ywrapper::UintValue* source_flow_label) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(source_flow_label_);
  }
  if (source_flow_label) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      source_flow_label = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, source_flow_label, submessage_arena);
    }
    
  } else {
    
  }
  source_flow_label_ = source_flow_label;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State.source_flow_label)
}

inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::has_protocol() const {
  return protocol_case() != PROTOCOL_NOT_SET;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::clear_has_protocol() {
  _oneof_case_[0] = PROTOCOL_NOT_SET;
}
inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::ProtocolCase Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::protocol_case() const {
  return Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State::ProtocolCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6

// .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.Config config = 464400478 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/config"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config& Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6::config() const {
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config*>(
      &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.config)
  
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.config)
  return config_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6::set_allocated_config(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.config)
}

// .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.State state = 39645643 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6/state"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State& Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6::state() const {
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State*>(
      &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.state)
  
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State* Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.state)
  return state_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6::set_allocated_state(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6.state)
}

// -------------------------------------------------------------------

// Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config

// .ywrapper.StringValue destination_mac = 515610502 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/config/destination-mac"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::has_destination_mac() const {
  return this != internal_default_instance() && destination_mac_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::destination_mac() const {
  const ::ywrapper::StringValue* p = destination_mac_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config.destination_mac)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::release_destination_mac() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config.destination_mac)
  
  ::ywrapper::StringValue* temp = destination_mac_;
  destination_mac_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::mutable_destination_mac() {
  
  if (destination_mac_ == NULL) {
    destination_mac_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config.destination_mac)
  return destination_mac_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::set_allocated_destination_mac(::ywrapper::StringValue* destination_mac) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(destination_mac_);
  }
  if (destination_mac) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      destination_mac = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, destination_mac, submessage_arena);
    }
    
  } else {
    
  }
  destination_mac_ = destination_mac;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config.destination_mac)
}

// .ywrapper.StringValue destination_mac_mask = 287932171 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/config/destination-mac-mask"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::has_destination_mac_mask() const {
  return this != internal_default_instance() && destination_mac_mask_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::destination_mac_mask() const {
  const ::ywrapper::StringValue* p = destination_mac_mask_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config.destination_mac_mask)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::release_destination_mac_mask() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config.destination_mac_mask)
  
  ::ywrapper::StringValue* temp = destination_mac_mask_;
  destination_mac_mask_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::mutable_destination_mac_mask() {
  
  if (destination_mac_mask_ == NULL) {
    destination_mac_mask_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config.destination_mac_mask)
  return destination_mac_mask_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::set_allocated_destination_mac_mask(::ywrapper::StringValue* destination_mac_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(destination_mac_mask_);
  }
  if (destination_mac_mask) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      destination_mac_mask = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, destination_mac_mask, submessage_arena);
    }
    
  } else {
    
  }
  destination_mac_mask_ = destination_mac_mask;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config.destination_mac_mask)
}

// .openconfig.enums.OpenconfigPacketMatchTypesETHERTYPE ethertype_openconfigpacketmatchtypesethertype = 245699045;
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::has_ethertype_openconfigpacketmatchtypesethertype() const {
  return ethertype_case() == kEthertypeOpenconfigpacketmatchtypesethertype;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::set_has_ethertype_openconfigpacketmatchtypesethertype() {
  _oneof_case_[0] = kEthertypeOpenconfigpacketmatchtypesethertype;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::clear_ethertype_openconfigpacketmatchtypesethertype() {
  if (has_ethertype_openconfigpacketmatchtypesethertype()) {
    ethertype_.ethertype_openconfigpacketmatchtypesethertype_ = 0;
    clear_has_ethertype();
  }
}
inline ::openconfig::enums::OpenconfigPacketMatchTypesETHERTYPE Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::ethertype_openconfigpacketmatchtypesethertype() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config.ethertype_openconfigpacketmatchtypesethertype)
  if (has_ethertype_openconfigpacketmatchtypesethertype()) {
    return static_cast< ::openconfig::enums::OpenconfigPacketMatchTypesETHERTYPE >(ethertype_.ethertype_openconfigpacketmatchtypesethertype_);
  }
  return static_cast< ::openconfig::enums::OpenconfigPacketMatchTypesETHERTYPE >(0);
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::set_ethertype_openconfigpacketmatchtypesethertype(::openconfig::enums::OpenconfigPacketMatchTypesETHERTYPE value) {
  if (!has_ethertype_openconfigpacketmatchtypesethertype()) {
    clear_ethertype();
    set_has_ethertype_openconfigpacketmatchtypesethertype();
  }
  ethertype_.ethertype_openconfigpacketmatchtypesethertype_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config.ethertype_openconfigpacketmatchtypesethertype)
}

// uint64 ethertype_uint64 = 132607809;
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::has_ethertype_uint64() const {
  return ethertype_case() == kEthertypeUint64;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::set_has_ethertype_uint64() {
  _oneof_case_[0] = kEthertypeUint64;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::clear_ethertype_uint64() {
  if (has_ethertype_uint64()) {
    ethertype_.ethertype_uint64_ = GOOGLE_ULONGLONG(0);
    clear_has_ethertype();
  }
}
inline ::google::protobuf::uint64 Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::ethertype_uint64() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config.ethertype_uint64)
  if (has_ethertype_uint64()) {
    return ethertype_.ethertype_uint64_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::set_ethertype_uint64(::google::protobuf::uint64 value) {
  if (!has_ethertype_uint64()) {
    clear_ethertype();
    set_has_ethertype_uint64();
  }
  ethertype_.ethertype_uint64_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config.ethertype_uint64)
}

// .ywrapper.StringValue source_mac = 658529 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/config/source-mac"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::has_source_mac() const {
  return this != internal_default_instance() && source_mac_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::source_mac() const {
  const ::ywrapper::StringValue* p = source_mac_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config.source_mac)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::release_source_mac() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config.source_mac)
  
  ::ywrapper::StringValue* temp = source_mac_;
  source_mac_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::mutable_source_mac() {
  
  if (source_mac_ == NULL) {
    source_mac_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config.source_mac)
  return source_mac_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::set_allocated_source_mac(::ywrapper::StringValue* source_mac) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(source_mac_);
  }
  if (source_mac) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      source_mac = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, source_mac, submessage_arena);
    }
    
  } else {
    
  }
  source_mac_ = source_mac;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config.source_mac)
}

// .ywrapper.StringValue source_mac_mask = 49113846 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/config/source-mac-mask"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::has_source_mac_mask() const {
  return this != internal_default_instance() && source_mac_mask_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::source_mac_mask() const {
  const ::ywrapper::StringValue* p = source_mac_mask_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config.source_mac_mask)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::release_source_mac_mask() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config.source_mac_mask)
  
  ::ywrapper::StringValue* temp = source_mac_mask_;
  source_mac_mask_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::mutable_source_mac_mask() {
  
  if (source_mac_mask_ == NULL) {
    source_mac_mask_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config.source_mac_mask)
  return source_mac_mask_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::set_allocated_source_mac_mask(::ywrapper::StringValue* source_mac_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(source_mac_mask_);
  }
  if (source_mac_mask) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      source_mac_mask = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, source_mac_mask, submessage_arena);
    }
    
  } else {
    
  }
  source_mac_mask_ = source_mac_mask;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config.source_mac_mask)
}

inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::has_ethertype() const {
  return ethertype_case() != ETHERTYPE_NOT_SET;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::clear_has_ethertype() {
  _oneof_case_[0] = ETHERTYPE_NOT_SET;
}
inline Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::EthertypeCase Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::ethertype_case() const {
  return Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config::EthertypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State

// .ywrapper.StringValue destination_mac = 278919501 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/state/destination-mac"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::has_destination_mac() const {
  return this != internal_default_instance() && destination_mac_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::destination_mac() const {
  const ::ywrapper::StringValue* p = destination_mac_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State.destination_mac)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::release_destination_mac() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State.destination_mac)
  
  ::ywrapper::StringValue* temp = destination_mac_;
  destination_mac_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::mutable_destination_mac() {
  
  if (destination_mac_ == NULL) {
    destination_mac_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State.destination_mac)
  return destination_mac_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::set_allocated_destination_mac(::ywrapper::StringValue* destination_mac) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(destination_mac_);
  }
  if (destination_mac) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      destination_mac = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, destination_mac, submessage_arena);
    }
    
  } else {
    
  }
  destination_mac_ = destination_mac;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State.destination_mac)
}

// .ywrapper.StringValue destination_mac_mask = 85439306 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/state/destination-mac-mask"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::has_destination_mac_mask() const {
  return this != internal_default_instance() && destination_mac_mask_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::destination_mac_mask() const {
  const ::ywrapper::StringValue* p = destination_mac_mask_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State.destination_mac_mask)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::release_destination_mac_mask() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State.destination_mac_mask)
  
  ::ywrapper::StringValue* temp = destination_mac_mask_;
  destination_mac_mask_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::mutable_destination_mac_mask() {
  
  if (destination_mac_mask_ == NULL) {
    destination_mac_mask_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State.destination_mac_mask)
  return destination_mac_mask_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::set_allocated_destination_mac_mask(::ywrapper::StringValue* destination_mac_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(destination_mac_mask_);
  }
  if (destination_mac_mask) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      destination_mac_mask = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, destination_mac_mask, submessage_arena);
    }
    
  } else {
    
  }
  destination_mac_mask_ = destination_mac_mask;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State.destination_mac_mask)
}

// .openconfig.enums.OpenconfigPacketMatchTypesETHERTYPE ethertype_openconfigpacketmatchtypesethertype = 405942806;
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::has_ethertype_openconfigpacketmatchtypesethertype() const {
  return ethertype_case() == kEthertypeOpenconfigpacketmatchtypesethertype;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::set_has_ethertype_openconfigpacketmatchtypesethertype() {
  _oneof_case_[0] = kEthertypeOpenconfigpacketmatchtypesethertype;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::clear_ethertype_openconfigpacketmatchtypesethertype() {
  if (has_ethertype_openconfigpacketmatchtypesethertype()) {
    ethertype_.ethertype_openconfigpacketmatchtypesethertype_ = 0;
    clear_has_ethertype();
  }
}
inline ::openconfig::enums::OpenconfigPacketMatchTypesETHERTYPE Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::ethertype_openconfigpacketmatchtypesethertype() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State.ethertype_openconfigpacketmatchtypesethertype)
  if (has_ethertype_openconfigpacketmatchtypesethertype()) {
    return static_cast< ::openconfig::enums::OpenconfigPacketMatchTypesETHERTYPE >(ethertype_.ethertype_openconfigpacketmatchtypesethertype_);
  }
  return static_cast< ::openconfig::enums::OpenconfigPacketMatchTypesETHERTYPE >(0);
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::set_ethertype_openconfigpacketmatchtypesethertype(::openconfig::enums::OpenconfigPacketMatchTypesETHERTYPE value) {
  if (!has_ethertype_openconfigpacketmatchtypesethertype()) {
    clear_ethertype();
    set_has_ethertype_openconfigpacketmatchtypesethertype();
  }
  ethertype_.ethertype_openconfigpacketmatchtypesethertype_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State.ethertype_openconfigpacketmatchtypesethertype)
}

// uint64 ethertype_uint64 = 461693036;
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::has_ethertype_uint64() const {
  return ethertype_case() == kEthertypeUint64;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::set_has_ethertype_uint64() {
  _oneof_case_[0] = kEthertypeUint64;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::clear_ethertype_uint64() {
  if (has_ethertype_uint64()) {
    ethertype_.ethertype_uint64_ = GOOGLE_ULONGLONG(0);
    clear_has_ethertype();
  }
}
inline ::google::protobuf::uint64 Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::ethertype_uint64() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State.ethertype_uint64)
  if (has_ethertype_uint64()) {
    return ethertype_.ethertype_uint64_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::set_ethertype_uint64(::google::protobuf::uint64 value) {
  if (!has_ethertype_uint64()) {
    clear_ethertype();
    set_has_ethertype_uint64();
  }
  ethertype_.ethertype_uint64_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State.ethertype_uint64)
}

// .ywrapper.StringValue source_mac = 505619284 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/state/source-mac"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::has_source_mac() const {
  return this != internal_default_instance() && source_mac_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::source_mac() const {
  const ::ywrapper::StringValue* p = source_mac_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State.source_mac)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::release_source_mac() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State.source_mac)
  
  ::ywrapper::StringValue* temp = source_mac_;
  source_mac_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::mutable_source_mac() {
  
  if (source_mac_ == NULL) {
    source_mac_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State.source_mac)
  return source_mac_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::set_allocated_source_mac(::ywrapper::StringValue* source_mac) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(source_mac_);
  }
  if (source_mac) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      source_mac = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, source_mac, submessage_arena);
    }
    
  } else {
    
  }
  source_mac_ = source_mac;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State.source_mac)
}

// .ywrapper.StringValue source_mac_mask = 219492717 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/state/source-mac-mask"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::has_source_mac_mask() const {
  return this != internal_default_instance() && source_mac_mask_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::source_mac_mask() const {
  const ::ywrapper::StringValue* p = source_mac_mask_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State.source_mac_mask)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::release_source_mac_mask() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State.source_mac_mask)
  
  ::ywrapper::StringValue* temp = source_mac_mask_;
  source_mac_mask_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::mutable_source_mac_mask() {
  
  if (source_mac_mask_ == NULL) {
    source_mac_mask_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State.source_mac_mask)
  return source_mac_mask_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::set_allocated_source_mac_mask(::ywrapper::StringValue* source_mac_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(source_mac_mask_);
  }
  if (source_mac_mask) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      source_mac_mask = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, source_mac_mask, submessage_arena);
    }
    
  } else {
    
  }
  source_mac_mask_ = source_mac_mask;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State.source_mac_mask)
}

inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::has_ethertype() const {
  return ethertype_case() != ETHERTYPE_NOT_SET;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::clear_has_ethertype() {
  _oneof_case_[0] = ETHERTYPE_NOT_SET;
}
inline Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::EthertypeCase Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::ethertype_case() const {
  return Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State::EthertypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Qos_Classifiers_Classifier_Terms_Term_Conditions_L2

// .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.Config config = 173916861 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/config"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_L2::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config& Qos_Classifiers_Classifier_Terms_Term_Conditions_L2::config() const {
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config*>(
      &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config* Qos_Classifiers_Classifier_Terms_Term_Conditions_L2::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.config)
  
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config* Qos_Classifiers_Classifier_Terms_Term_Conditions_L2::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.config)
  return config_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2::set_allocated_config(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.config)
}

// .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.State state = 2053426 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2/state"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_L2::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State& Qos_Classifiers_Classifier_Terms_Term_Conditions_L2::state() const {
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State*>(
      &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State* Qos_Classifiers_Classifier_Terms_Term_Conditions_L2::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.state)
  
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State* Qos_Classifiers_Classifier_Terms_Term_Conditions_L2::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.state)
  return state_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_L2::set_allocated_state(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2.state)
}

// -------------------------------------------------------------------

// Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config

// .ywrapper.UintValue traffic_class = 292059538 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/mpls/config/traffic-class"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config::has_traffic_class() const {
  return this != internal_default_instance() && traffic_class_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config::traffic_class() const {
  const ::ywrapper::UintValue* p = traffic_class_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.Config.traffic_class)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config::release_traffic_class() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.Config.traffic_class)
  
  ::ywrapper::UintValue* temp = traffic_class_;
  traffic_class_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config::mutable_traffic_class() {
  
  if (traffic_class_ == NULL) {
    traffic_class_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.Config.traffic_class)
  return traffic_class_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config::set_allocated_traffic_class(::ywrapper::UintValue* traffic_class) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(traffic_class_);
  }
  if (traffic_class) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      traffic_class = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, traffic_class, submessage_arena);
    }
    
  } else {
    
  }
  traffic_class_ = traffic_class;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.Config.traffic_class)
}

// -------------------------------------------------------------------

// Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State

// .ywrapper.UintValue traffic_class = 380342165 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/mpls/state/traffic-class"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State::has_traffic_class() const {
  return this != internal_default_instance() && traffic_class_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State::traffic_class() const {
  const ::ywrapper::UintValue* p = traffic_class_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.State.traffic_class)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State::release_traffic_class() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.State.traffic_class)
  
  ::ywrapper::UintValue* temp = traffic_class_;
  traffic_class_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State::mutable_traffic_class() {
  
  if (traffic_class_ == NULL) {
    traffic_class_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.State.traffic_class)
  return traffic_class_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State::set_allocated_traffic_class(::ywrapper::UintValue* traffic_class) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(traffic_class_);
  }
  if (traffic_class) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      traffic_class = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, traffic_class, submessage_arena);
    }
    
  } else {
    
  }
  traffic_class_ = traffic_class;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.State.traffic_class)
}

// -------------------------------------------------------------------

// Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls

// .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.Config config = 470766099 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/mpls/config"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config& Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls::config() const {
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config*>(
      &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config* Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.config)
  
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config* Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.config)
  return config_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls::set_allocated_config(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.config)
}

// .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.State state = 254469620 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/mpls/state"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State& Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls::state() const {
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State*>(
      &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State* Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.state)
  
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State* Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.state)
  return state_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls::set_allocated_state(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls.state)
}

// -------------------------------------------------------------------

// Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config

// .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.DestinationPort destination_port_destinationport = 61984185;
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::has_destination_port_destinationport() const {
  return destination_port_case() == kDestinationPortDestinationport;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::set_has_destination_port_destinationport() {
  _oneof_case_[0] = kDestinationPortDestinationport;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::clear_destination_port_destinationport() {
  if (has_destination_port_destinationport()) {
    destination_port_.destination_port_destinationport_ = 0;
    clear_has_destination_port();
  }
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::destination_port_destinationport() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.destination_port_destinationport)
  if (has_destination_port_destinationport()) {
    return static_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort >(destination_port_.destination_port_destinationport_);
  }
  return static_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort >(0);
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::set_destination_port_destinationport(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort value) {
  if (!has_destination_port_destinationport()) {
    clear_destination_port();
    set_has_destination_port_destinationport();
  }
  destination_port_.destination_port_destinationport_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.destination_port_destinationport)
}

// string destination_port_string = 43341491;
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::has_destination_port_string() const {
  return destination_port_case() == kDestinationPortString;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::set_has_destination_port_string() {
  _oneof_case_[0] = kDestinationPortString;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::clear_destination_port_string() {
  if (has_destination_port_string()) {
    destination_port_.destination_port_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_destination_port();
  }
}
inline const ::std::string& Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::destination_port_string() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.destination_port_string)
  if (has_destination_port_string()) {
    return destination_port_.destination_port_string_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::set_destination_port_string(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.destination_port_string)
  if (!has_destination_port_string()) {
    clear_destination_port();
    set_has_destination_port_string();
    destination_port_.destination_port_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  destination_port_.destination_port_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.destination_port_string)
}
#if LANG_CXX11
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::set_destination_port_string(::std::string&& value) {
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.destination_port_string)
  if (!has_destination_port_string()) {
    clear_destination_port();
    set_has_destination_port_string();
    destination_port_.destination_port_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  destination_port_.destination_port_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.destination_port_string)
}
#endif
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::set_destination_port_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_destination_port_string()) {
    clear_destination_port();
    set_has_destination_port_string();
    destination_port_.destination_port_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  destination_port_.destination_port_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.destination_port_string)
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::set_destination_port_string(const char* value, size_t size) {
  if (!has_destination_port_string()) {
    clear_destination_port();
    set_has_destination_port_string();
    destination_port_.destination_port_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  destination_port_.destination_port_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.destination_port_string)
}
inline ::std::string* Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::mutable_destination_port_string() {
  if (!has_destination_port_string()) {
    clear_destination_port();
    set_has_destination_port_string();
    destination_port_.destination_port_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.destination_port_string)
  return destination_port_.destination_port_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::release_destination_port_string() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.destination_port_string)
  if (has_destination_port_string()) {
    clear_has_destination_port();
    return destination_port_.destination_port_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::set_allocated_destination_port_string(::std::string* destination_port_string) {
  if (!has_destination_port_string()) {
    destination_port_.destination_port_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_destination_port();
  if (destination_port_string != NULL) {
    set_has_destination_port_string();
    destination_port_.destination_port_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        destination_port_string);
  }
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.destination_port_string)
}

// uint64 destination_port_uint64 = 296926614;
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::has_destination_port_uint64() const {
  return destination_port_case() == kDestinationPortUint64;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::set_has_destination_port_uint64() {
  _oneof_case_[0] = kDestinationPortUint64;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::clear_destination_port_uint64() {
  if (has_destination_port_uint64()) {
    destination_port_.destination_port_uint64_ = GOOGLE_ULONGLONG(0);
    clear_has_destination_port();
  }
}
inline ::google::protobuf::uint64 Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::destination_port_uint64() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.destination_port_uint64)
  if (has_destination_port_uint64()) {
    return destination_port_.destination_port_uint64_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::set_destination_port_uint64(::google::protobuf::uint64 value) {
  if (!has_destination_port_uint64()) {
    clear_destination_port();
    set_has_destination_port_uint64();
  }
  destination_port_.destination_port_uint64_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.destination_port_uint64)
}

// .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.SourcePort source_port_sourceport = 169477687;
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::has_source_port_sourceport() const {
  return source_port_case() == kSourcePortSourceport;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::set_has_source_port_sourceport() {
  _oneof_case_[1] = kSourcePortSourceport;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::clear_source_port_sourceport() {
  if (has_source_port_sourceport()) {
    source_port_.source_port_sourceport_ = 0;
    clear_has_source_port();
  }
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::source_port_sourceport() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.source_port_sourceport)
  if (has_source_port_sourceport()) {
    return static_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort >(source_port_.source_port_sourceport_);
  }
  return static_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort >(0);
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::set_source_port_sourceport(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort value) {
  if (!has_source_port_sourceport()) {
    clear_source_port();
    set_has_source_port_sourceport();
  }
  source_port_.source_port_sourceport_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.source_port_sourceport)
}

// string source_port_string = 342703790;
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::has_source_port_string() const {
  return source_port_case() == kSourcePortString;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::set_has_source_port_string() {
  _oneof_case_[1] = kSourcePortString;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::clear_source_port_string() {
  if (has_source_port_string()) {
    source_port_.source_port_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_source_port();
  }
}
inline const ::std::string& Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::source_port_string() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.source_port_string)
  if (has_source_port_string()) {
    return source_port_.source_port_string_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::set_source_port_string(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.source_port_string)
  if (!has_source_port_string()) {
    clear_source_port();
    set_has_source_port_string();
    source_port_.source_port_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  source_port_.source_port_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.source_port_string)
}
#if LANG_CXX11
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::set_source_port_string(::std::string&& value) {
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.source_port_string)
  if (!has_source_port_string()) {
    clear_source_port();
    set_has_source_port_string();
    source_port_.source_port_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  source_port_.source_port_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.source_port_string)
}
#endif
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::set_source_port_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_source_port_string()) {
    clear_source_port();
    set_has_source_port_string();
    source_port_.source_port_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  source_port_.source_port_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.source_port_string)
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::set_source_port_string(const char* value, size_t size) {
  if (!has_source_port_string()) {
    clear_source_port();
    set_has_source_port_string();
    source_port_.source_port_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  source_port_.source_port_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.source_port_string)
}
inline ::std::string* Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::mutable_source_port_string() {
  if (!has_source_port_string()) {
    clear_source_port();
    set_has_source_port_string();
    source_port_.source_port_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.source_port_string)
  return source_port_.source_port_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::release_source_port_string() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.source_port_string)
  if (has_source_port_string()) {
    clear_has_source_port();
    return source_port_.source_port_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::set_allocated_source_port_string(::std::string* source_port_string) {
  if (!has_source_port_string()) {
    source_port_.source_port_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_source_port();
  if (source_port_string != NULL) {
    set_has_source_port_string();
    source_port_.source_port_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        source_port_string);
  }
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.source_port_string)
}

// uint64 source_port_uint64 = 278063023;
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::has_source_port_uint64() const {
  return source_port_case() == kSourcePortUint64;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::set_has_source_port_uint64() {
  _oneof_case_[1] = kSourcePortUint64;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::clear_source_port_uint64() {
  if (has_source_port_uint64()) {
    source_port_.source_port_uint64_ = GOOGLE_ULONGLONG(0);
    clear_has_source_port();
  }
}
inline ::google::protobuf::uint64 Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::source_port_uint64() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.source_port_uint64)
  if (has_source_port_uint64()) {
    return source_port_.source_port_uint64_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::set_source_port_uint64(::google::protobuf::uint64 value) {
  if (!has_source_port_uint64()) {
    clear_source_port();
    set_has_source_port_uint64();
  }
  source_port_.source_port_uint64_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.source_port_uint64)
}

// repeated .openconfig.enums.OpenconfigPacketMatchTypesTCPFLAGS tcp_flags = 82538752 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/transport/config/tcp-flags"];
inline int Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::tcp_flags_size() const {
  return tcp_flags_.size();
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::clear_tcp_flags() {
  tcp_flags_.Clear();
}
inline ::openconfig::enums::OpenconfigPacketMatchTypesTCPFLAGS Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::tcp_flags(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.tcp_flags)
  return static_cast< ::openconfig::enums::OpenconfigPacketMatchTypesTCPFLAGS >(tcp_flags_.Get(index));
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::set_tcp_flags(int index, ::openconfig::enums::OpenconfigPacketMatchTypesTCPFLAGS value) {
  tcp_flags_.Set(index, value);
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.tcp_flags)
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::add_tcp_flags(::openconfig::enums::OpenconfigPacketMatchTypesTCPFLAGS value) {
  tcp_flags_.Add(value);
  // @@protoc_insertion_point(field_add:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.tcp_flags)
}
inline const ::google::protobuf::RepeatedField<int>&
Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::tcp_flags() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.tcp_flags)
  return tcp_flags_;
}
inline ::google::protobuf::RepeatedField<int>*
Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::mutable_tcp_flags() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config.tcp_flags)
  return &tcp_flags_;
}

inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::has_destination_port() const {
  return destination_port_case() != DESTINATION_PORT_NOT_SET;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::clear_has_destination_port() {
  _oneof_case_[0] = DESTINATION_PORT_NOT_SET;
}
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::has_source_port() const {
  return source_port_case() != SOURCE_PORT_NOT_SET;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::clear_has_source_port() {
  _oneof_case_[1] = SOURCE_PORT_NOT_SET;
}
inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::DestinationPortCase Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::destination_port_case() const {
  return Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::DestinationPortCase(_oneof_case_[0]);
}
inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::SourcePortCase Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::source_port_case() const {
  return Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config::SourcePortCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State

// .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.DestinationPort destination_port_destinationport = 103011798;
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::has_destination_port_destinationport() const {
  return destination_port_case() == kDestinationPortDestinationport;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::set_has_destination_port_destinationport() {
  _oneof_case_[0] = kDestinationPortDestinationport;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::clear_destination_port_destinationport() {
  if (has_destination_port_destinationport()) {
    destination_port_.destination_port_destinationport_ = 0;
    clear_has_destination_port();
  }
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::destination_port_destinationport() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.destination_port_destinationport)
  if (has_destination_port_destinationport()) {
    return static_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort >(destination_port_.destination_port_destinationport_);
  }
  return static_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort >(0);
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::set_destination_port_destinationport(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort value) {
  if (!has_destination_port_destinationport()) {
    clear_destination_port();
    set_has_destination_port_destinationport();
  }
  destination_port_.destination_port_destinationport_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.destination_port_destinationport)
}

// string destination_port_string = 232129498;
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::has_destination_port_string() const {
  return destination_port_case() == kDestinationPortString;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::set_has_destination_port_string() {
  _oneof_case_[0] = kDestinationPortString;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::clear_destination_port_string() {
  if (has_destination_port_string()) {
    destination_port_.destination_port_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_destination_port();
  }
}
inline const ::std::string& Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::destination_port_string() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.destination_port_string)
  if (has_destination_port_string()) {
    return destination_port_.destination_port_string_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::set_destination_port_string(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.destination_port_string)
  if (!has_destination_port_string()) {
    clear_destination_port();
    set_has_destination_port_string();
    destination_port_.destination_port_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  destination_port_.destination_port_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.destination_port_string)
}
#if LANG_CXX11
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::set_destination_port_string(::std::string&& value) {
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.destination_port_string)
  if (!has_destination_port_string()) {
    clear_destination_port();
    set_has_destination_port_string();
    destination_port_.destination_port_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  destination_port_.destination_port_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.destination_port_string)
}
#endif
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::set_destination_port_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_destination_port_string()) {
    clear_destination_port();
    set_has_destination_port_string();
    destination_port_.destination_port_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  destination_port_.destination_port_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.destination_port_string)
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::set_destination_port_string(const char* value, size_t size) {
  if (!has_destination_port_string()) {
    clear_destination_port();
    set_has_destination_port_string();
    destination_port_.destination_port_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  destination_port_.destination_port_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.destination_port_string)
}
inline ::std::string* Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::mutable_destination_port_string() {
  if (!has_destination_port_string()) {
    clear_destination_port();
    set_has_destination_port_string();
    destination_port_.destination_port_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.destination_port_string)
  return destination_port_.destination_port_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::release_destination_port_string() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.destination_port_string)
  if (has_destination_port_string()) {
    clear_has_destination_port();
    return destination_port_.destination_port_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::set_allocated_destination_port_string(::std::string* destination_port_string) {
  if (!has_destination_port_string()) {
    destination_port_.destination_port_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_destination_port();
  if (destination_port_string != NULL) {
    set_has_destination_port_string();
    destination_port_.destination_port_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        destination_port_string);
  }
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.destination_port_string)
}

// uint64 destination_port_uint64 = 150348603;
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::has_destination_port_uint64() const {
  return destination_port_case() == kDestinationPortUint64;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::set_has_destination_port_uint64() {
  _oneof_case_[0] = kDestinationPortUint64;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::clear_destination_port_uint64() {
  if (has_destination_port_uint64()) {
    destination_port_.destination_port_uint64_ = GOOGLE_ULONGLONG(0);
    clear_has_destination_port();
  }
}
inline ::google::protobuf::uint64 Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::destination_port_uint64() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.destination_port_uint64)
  if (has_destination_port_uint64()) {
    return destination_port_.destination_port_uint64_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::set_destination_port_uint64(::google::protobuf::uint64 value) {
  if (!has_destination_port_uint64()) {
    clear_destination_port();
    set_has_destination_port_uint64();
  }
  destination_port_.destination_port_uint64_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.destination_port_uint64)
}

// .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.SourcePort source_port_sourceport = 434715756;
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::has_source_port_sourceport() const {
  return source_port_case() == kSourcePortSourceport;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::set_has_source_port_sourceport() {
  _oneof_case_[1] = kSourcePortSourceport;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::clear_source_port_sourceport() {
  if (has_source_port_sourceport()) {
    source_port_.source_port_sourceport_ = 0;
    clear_has_source_port();
  }
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::source_port_sourceport() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.source_port_sourceport)
  if (has_source_port_sourceport()) {
    return static_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort >(source_port_.source_port_sourceport_);
  }
  return static_cast< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort >(0);
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::set_source_port_sourceport(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort value) {
  if (!has_source_port_sourceport()) {
    clear_source_port();
    set_has_source_port_sourceport();
  }
  source_port_.source_port_sourceport_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.source_port_sourceport)
}

// string source_port_string = 531489437;
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::has_source_port_string() const {
  return source_port_case() == kSourcePortString;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::set_has_source_port_string() {
  _oneof_case_[1] = kSourcePortString;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::clear_source_port_string() {
  if (has_source_port_string()) {
    source_port_.source_port_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_source_port();
  }
}
inline const ::std::string& Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::source_port_string() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.source_port_string)
  if (has_source_port_string()) {
    return source_port_.source_port_string_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::set_source_port_string(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.source_port_string)
  if (!has_source_port_string()) {
    clear_source_port();
    set_has_source_port_string();
    source_port_.source_port_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  source_port_.source_port_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.source_port_string)
}
#if LANG_CXX11
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::set_source_port_string(::std::string&& value) {
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.source_port_string)
  if (!has_source_port_string()) {
    clear_source_port();
    set_has_source_port_string();
    source_port_.source_port_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  source_port_.source_port_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.source_port_string)
}
#endif
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::set_source_port_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_source_port_string()) {
    clear_source_port();
    set_has_source_port_string();
    source_port_.source_port_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  source_port_.source_port_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.source_port_string)
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::set_source_port_string(const char* value, size_t size) {
  if (!has_source_port_string()) {
    clear_source_port();
    set_has_source_port_string();
    source_port_.source_port_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  source_port_.source_port_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.source_port_string)
}
inline ::std::string* Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::mutable_source_port_string() {
  if (!has_source_port_string()) {
    clear_source_port();
    set_has_source_port_string();
    source_port_.source_port_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.source_port_string)
  return source_port_.source_port_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::release_source_port_string() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.source_port_string)
  if (has_source_port_string()) {
    clear_has_source_port();
    return source_port_.source_port_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::set_allocated_source_port_string(::std::string* source_port_string) {
  if (!has_source_port_string()) {
    source_port_.source_port_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_source_port();
  if (source_port_string != NULL) {
    set_has_source_port_string();
    source_port_.source_port_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        source_port_string);
  }
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.source_port_string)
}

// uint64 source_port_uint64 = 275615616;
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::has_source_port_uint64() const {
  return source_port_case() == kSourcePortUint64;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::set_has_source_port_uint64() {
  _oneof_case_[1] = kSourcePortUint64;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::clear_source_port_uint64() {
  if (has_source_port_uint64()) {
    source_port_.source_port_uint64_ = GOOGLE_ULONGLONG(0);
    clear_has_source_port();
  }
}
inline ::google::protobuf::uint64 Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::source_port_uint64() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.source_port_uint64)
  if (has_source_port_uint64()) {
    return source_port_.source_port_uint64_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::set_source_port_uint64(::google::protobuf::uint64 value) {
  if (!has_source_port_uint64()) {
    clear_source_port();
    set_has_source_port_uint64();
  }
  source_port_.source_port_uint64_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.source_port_uint64)
}

// repeated .openconfig.enums.OpenconfigPacketMatchTypesTCPFLAGS tcp_flags = 388480337 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/transport/state/tcp-flags"];
inline int Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::tcp_flags_size() const {
  return tcp_flags_.size();
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::clear_tcp_flags() {
  tcp_flags_.Clear();
}
inline ::openconfig::enums::OpenconfigPacketMatchTypesTCPFLAGS Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::tcp_flags(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.tcp_flags)
  return static_cast< ::openconfig::enums::OpenconfigPacketMatchTypesTCPFLAGS >(tcp_flags_.Get(index));
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::set_tcp_flags(int index, ::openconfig::enums::OpenconfigPacketMatchTypesTCPFLAGS value) {
  tcp_flags_.Set(index, value);
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.tcp_flags)
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::add_tcp_flags(::openconfig::enums::OpenconfigPacketMatchTypesTCPFLAGS value) {
  tcp_flags_.Add(value);
  // @@protoc_insertion_point(field_add:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.tcp_flags)
}
inline const ::google::protobuf::RepeatedField<int>&
Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::tcp_flags() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.tcp_flags)
  return tcp_flags_;
}
inline ::google::protobuf::RepeatedField<int>*
Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::mutable_tcp_flags() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State.tcp_flags)
  return &tcp_flags_;
}

inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::has_destination_port() const {
  return destination_port_case() != DESTINATION_PORT_NOT_SET;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::clear_has_destination_port() {
  _oneof_case_[0] = DESTINATION_PORT_NOT_SET;
}
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::has_source_port() const {
  return source_port_case() != SOURCE_PORT_NOT_SET;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::clear_has_source_port() {
  _oneof_case_[1] = SOURCE_PORT_NOT_SET;
}
inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::DestinationPortCase Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::destination_port_case() const {
  return Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::DestinationPortCase(_oneof_case_[0]);
}
inline Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::SourcePortCase Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::source_port_case() const {
  return Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State::SourcePortCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport

// .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.Config config = 471168594 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/transport/config"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config& Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport::config() const {
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config*>(
      &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config* Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.config)
  
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config* Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.config)
  return config_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport::set_allocated_config(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.config)
}

// .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.State state = 253249231 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/transport/state"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State& Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport::state() const {
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State*>(
      &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State* Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.state)
  
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State* Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.state)
  return state_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport::set_allocated_state(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport.state)
}

// -------------------------------------------------------------------

// Qos_Classifiers_Classifier_Terms_Term_Conditions

// .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv4 ipv4 = 10035435 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv4"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions::has_ipv4() const {
  return this != internal_default_instance() && ipv4_ != NULL;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions::clear_ipv4() {
  if (GetArenaNoVirtual() == NULL && ipv4_ != NULL) {
    delete ipv4_;
  }
  ipv4_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4& Qos_Classifiers_Classifier_Terms_Term_Conditions::ipv4() const {
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4* p = ipv4_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.ipv4)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4*>(
      &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4* Qos_Classifiers_Classifier_Terms_Term_Conditions::release_ipv4() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.ipv4)
  
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4* temp = ipv4_;
  ipv4_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4* Qos_Classifiers_Classifier_Terms_Term_Conditions::mutable_ipv4() {
  
  if (ipv4_ == NULL) {
    ipv4_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.ipv4)
  return ipv4_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions::set_allocated_ipv4(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv4* ipv4) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ipv4_;
  }
  if (ipv4) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ipv4 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ipv4, submessage_arena);
    }
    
  } else {
    
  }
  ipv4_ = ipv4;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.ipv4)
}

// .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Ipv6 ipv6 = 10035433 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/ipv6"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions::has_ipv6() const {
  return this != internal_default_instance() && ipv6_ != NULL;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions::clear_ipv6() {
  if (GetArenaNoVirtual() == NULL && ipv6_ != NULL) {
    delete ipv6_;
  }
  ipv6_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6& Qos_Classifiers_Classifier_Terms_Term_Conditions::ipv6() const {
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6* p = ipv6_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.ipv6)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6*>(
      &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6* Qos_Classifiers_Classifier_Terms_Term_Conditions::release_ipv6() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.ipv6)
  
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6* temp = ipv6_;
  ipv6_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6* Qos_Classifiers_Classifier_Terms_Term_Conditions::mutable_ipv6() {
  
  if (ipv6_ == NULL) {
    ipv6_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.ipv6)
  return ipv6_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions::set_allocated_ipv6(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Ipv6* ipv6) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ipv6_;
  }
  if (ipv6) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ipv6 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ipv6, submessage_arena);
    }
    
  } else {
    
  }
  ipv6_ = ipv6;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.ipv6)
}

// .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.L2 l2 = 363202488 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/l2"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions::has_l2() const {
  return this != internal_default_instance() && l2_ != NULL;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions::clear_l2() {
  if (GetArenaNoVirtual() == NULL && l2_ != NULL) {
    delete l2_;
  }
  l2_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2& Qos_Classifiers_Classifier_Terms_Term_Conditions::l2() const {
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2* p = l2_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.l2)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2*>(
      &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_L2_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2* Qos_Classifiers_Classifier_Terms_Term_Conditions::release_l2() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.l2)
  
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2* temp = l2_;
  l2_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2* Qos_Classifiers_Classifier_Terms_Term_Conditions::mutable_l2() {
  
  if (l2_ == NULL) {
    l2_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.l2)
  return l2_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions::set_allocated_l2(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_L2* l2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete l2_;
  }
  if (l2) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      l2 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, l2, submessage_arena);
    }
    
  } else {
    
  }
  l2_ = l2;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.l2)
}

// .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Mpls mpls = 259157330 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/mpls"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions::has_mpls() const {
  return this != internal_default_instance() && mpls_ != NULL;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions::clear_mpls() {
  if (GetArenaNoVirtual() == NULL && mpls_ != NULL) {
    delete mpls_;
  }
  mpls_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls& Qos_Classifiers_Classifier_Terms_Term_Conditions::mpls() const {
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls* p = mpls_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.mpls)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls*>(
      &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls* Qos_Classifiers_Classifier_Terms_Term_Conditions::release_mpls() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.mpls)
  
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls* temp = mpls_;
  mpls_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls* Qos_Classifiers_Classifier_Terms_Term_Conditions::mutable_mpls() {
  
  if (mpls_ == NULL) {
    mpls_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.mpls)
  return mpls_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions::set_allocated_mpls(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Mpls* mpls) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mpls_;
  }
  if (mpls) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mpls = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mpls, submessage_arena);
    }
    
  } else {
    
  }
  mpls_ = mpls;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.mpls)
}

// .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.Transport transport = 396236957 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions/transport"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Conditions::has_transport() const {
  return this != internal_default_instance() && transport_ != NULL;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions::clear_transport() {
  if (GetArenaNoVirtual() == NULL && transport_ != NULL) {
    delete transport_;
  }
  transport_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport& Qos_Classifiers_Classifier_Terms_Term_Conditions::transport() const {
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport* p = transport_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.transport)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport*>(
      &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport* Qos_Classifiers_Classifier_Terms_Term_Conditions::release_transport() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.transport)
  
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport* temp = transport_;
  transport_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport* Qos_Classifiers_Classifier_Terms_Term_Conditions::mutable_transport() {
  
  if (transport_ == NULL) {
    transport_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.transport)
  return transport_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Conditions::set_allocated_transport(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport* transport) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete transport_;
  }
  if (transport) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transport = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transport, submessage_arena);
    }
    
  } else {
    
  }
  transport_ = transport;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions.transport)
}

// -------------------------------------------------------------------

// Qos_Classifiers_Classifier_Terms_Term_Config

// .ywrapper.StringValue id = 136646369 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/config/id"];
inline bool Qos_Classifiers_Classifier_Terms_Term_Config::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Classifiers_Classifier_Terms_Term_Config::id() const {
  const ::ywrapper::StringValue* p = id_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Config.id)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Terms_Term_Config::release_id() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Config.id)
  
  ::ywrapper::StringValue* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Terms_Term_Config::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Config.id)
  return id_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_Config::set_allocated_id(::ywrapper::StringValue* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Config.id)
}

// -------------------------------------------------------------------

// Qos_Classifiers_Classifier_Terms_Term_State

// .ywrapper.StringValue id = 281525904 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/state/id"];
inline bool Qos_Classifiers_Classifier_Terms_Term_State::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Classifiers_Classifier_Terms_Term_State::id() const {
  const ::ywrapper::StringValue* p = id_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.State.id)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Terms_Term_State::release_id() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.State.id)
  
  ::ywrapper::StringValue* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Classifiers_Classifier_Terms_Term_State::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.State.id)
  return id_;
}
inline void Qos_Classifiers_Classifier_Terms_Term_State::set_allocated_id(::ywrapper::StringValue* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.State.id)
}

// -------------------------------------------------------------------

// Qos_Classifiers_Classifier_Terms_Term

// .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Actions actions = 288444670 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/actions"];
inline bool Qos_Classifiers_Classifier_Terms_Term::has_actions() const {
  return this != internal_default_instance() && actions_ != NULL;
}
inline void Qos_Classifiers_Classifier_Terms_Term::clear_actions() {
  if (GetArenaNoVirtual() == NULL && actions_ != NULL) {
    delete actions_;
  }
  actions_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions& Qos_Classifiers_Classifier_Terms_Term::actions() const {
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions* p = actions_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.actions)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions*>(
      &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Actions_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions* Qos_Classifiers_Classifier_Terms_Term::release_actions() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.actions)
  
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions* temp = actions_;
  actions_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions* Qos_Classifiers_Classifier_Terms_Term::mutable_actions() {
  
  if (actions_ == NULL) {
    actions_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.actions)
  return actions_;
}
inline void Qos_Classifiers_Classifier_Terms_Term::set_allocated_actions(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Actions* actions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete actions_;
  }
  if (actions) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      actions = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, actions, submessage_arena);
    }
    
  } else {
    
  }
  actions_ = actions;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.actions)
}

// .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Conditions conditions = 14705347 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/conditions"];
inline bool Qos_Classifiers_Classifier_Terms_Term::has_conditions() const {
  return this != internal_default_instance() && conditions_ != NULL;
}
inline void Qos_Classifiers_Classifier_Terms_Term::clear_conditions() {
  if (GetArenaNoVirtual() == NULL && conditions_ != NULL) {
    delete conditions_;
  }
  conditions_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions& Qos_Classifiers_Classifier_Terms_Term::conditions() const {
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions* p = conditions_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.conditions)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions*>(
      &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Conditions_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions* Qos_Classifiers_Classifier_Terms_Term::release_conditions() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.conditions)
  
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions* temp = conditions_;
  conditions_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions* Qos_Classifiers_Classifier_Terms_Term::mutable_conditions() {
  
  if (conditions_ == NULL) {
    conditions_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.conditions)
  return conditions_;
}
inline void Qos_Classifiers_Classifier_Terms_Term::set_allocated_conditions(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions* conditions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete conditions_;
  }
  if (conditions) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      conditions = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, conditions, submessage_arena);
    }
    
  } else {
    
  }
  conditions_ = conditions;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.conditions)
}

// .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.Config config = 419346967 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/config"];
inline bool Qos_Classifiers_Classifier_Terms_Term::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Qos_Classifiers_Classifier_Terms_Term::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Config& Qos_Classifiers_Classifier_Terms_Term::config() const {
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Config*>(
      &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_Config_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Config* Qos_Classifiers_Classifier_Terms_Term::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.config)
  
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Config* Qos_Classifiers_Classifier_Terms_Term::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.config)
  return config_;
}
inline void Qos_Classifiers_Classifier_Terms_Term::set_allocated_config(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.config)
}

// .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.State state = 18572232 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/state"];
inline bool Qos_Classifiers_Classifier_Terms_Term::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_Classifiers_Classifier_Terms_Term::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_State& Qos_Classifiers_Classifier_Terms_Term::state() const {
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_State*>(
      &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_State* Qos_Classifiers_Classifier_Terms_Term::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.state)
  
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_State* Qos_Classifiers_Classifier_Terms_Term::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.state)
  return state_;
}
inline void Qos_Classifiers_Classifier_Terms_Term::set_allocated_state(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term.state)
}

// -------------------------------------------------------------------

// Qos_Classifiers_Classifier_Terms_TermKey

// string id = 1 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term/id"];
inline void Qos_Classifiers_Classifier_Terms_TermKey::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Qos_Classifiers_Classifier_Terms_TermKey::id() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey.id)
  return id_.GetNoArena();
}
inline void Qos_Classifiers_Classifier_Terms_TermKey::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey.id)
}
#if LANG_CXX11
inline void Qos_Classifiers_Classifier_Terms_TermKey::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey.id)
}
#endif
inline void Qos_Classifiers_Classifier_Terms_TermKey::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey.id)
}
inline void Qos_Classifiers_Classifier_Terms_TermKey::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey.id)
}
inline ::std::string* Qos_Classifiers_Classifier_Terms_TermKey::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Qos_Classifiers_Classifier_Terms_TermKey::release_id() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Qos_Classifiers_Classifier_Terms_TermKey::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey.id)
}

// .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.Term term = 2;
inline bool Qos_Classifiers_Classifier_Terms_TermKey::has_term() const {
  return this != internal_default_instance() && term_ != NULL;
}
inline void Qos_Classifiers_Classifier_Terms_TermKey::clear_term() {
  if (GetArenaNoVirtual() == NULL && term_ != NULL) {
    delete term_;
  }
  term_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term& Qos_Classifiers_Classifier_Terms_TermKey::term() const {
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term* p = term_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey.term)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term*>(
      &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_Term_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term* Qos_Classifiers_Classifier_Terms_TermKey::release_term() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey.term)
  
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term* temp = term_;
  term_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term* Qos_Classifiers_Classifier_Terms_TermKey::mutable_term() {
  
  if (term_ == NULL) {
    term_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey.term)
  return term_;
}
inline void Qos_Classifiers_Classifier_Terms_TermKey::set_allocated_term(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term* term) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete term_;
  }
  if (term) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      term = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, term, submessage_arena);
    }
    
  } else {
    
  }
  term_ = term;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey.term)
}

// -------------------------------------------------------------------

// Qos_Classifiers_Classifier_Terms

// repeated .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.TermKey term = 74659894 [(.yext.schemapath) = "/qos/classifiers/classifier/terms/term"];
inline int Qos_Classifiers_Classifier_Terms::term_size() const {
  return term_.size();
}
inline void Qos_Classifiers_Classifier_Terms::clear_term() {
  term_.Clear();
}
inline const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_TermKey& Qos_Classifiers_Classifier_Terms::term(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.term)
  return term_.Get(index);
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_TermKey* Qos_Classifiers_Classifier_Terms::mutable_term(int index) {
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.term)
  return term_.Mutable(index);
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_TermKey* Qos_Classifiers_Classifier_Terms::add_term() {
  // @@protoc_insertion_point(field_add:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.term)
  return term_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_TermKey >*
Qos_Classifiers_Classifier_Terms::mutable_term() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.term)
  return &term_;
}
inline const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_TermKey >&
Qos_Classifiers_Classifier_Terms::term() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms.term)
  return term_;
}

// -------------------------------------------------------------------

// Qos_Classifiers_Classifier

// .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Config config = 505734526 [(.yext.schemapath) = "/qos/classifiers/classifier/config"];
inline bool Qos_Classifiers_Classifier::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Qos_Classifiers_Classifier::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Config& Qos_Classifiers_Classifier::config() const {
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Config*>(
      &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Config_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Config* Qos_Classifiers_Classifier::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.config)
  
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Config* Qos_Classifiers_Classifier::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.config)
  return config_;
}
inline void Qos_Classifiers_Classifier::set_allocated_config(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.config)
}

// .openconfig.openconfig_qos.Qos.Classifiers.Classifier.State state = 125517931 [(.yext.schemapath) = "/qos/classifiers/classifier/state"];
inline bool Qos_Classifiers_Classifier::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_Classifiers_Classifier::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_State& Qos_Classifiers_Classifier::state() const {
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_State*>(
      &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_State* Qos_Classifiers_Classifier::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.state)
  
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_State* Qos_Classifiers_Classifier::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.state)
  return state_;
}
inline void Qos_Classifiers_Classifier::set_allocated_state(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.state)
}

// .openconfig.openconfig_qos.Qos.Classifiers.Classifier.Terms terms = 506313861 [(.yext.schemapath) = "/qos/classifiers/classifier/terms"];
inline bool Qos_Classifiers_Classifier::has_terms() const {
  return this != internal_default_instance() && terms_ != NULL;
}
inline void Qos_Classifiers_Classifier::clear_terms() {
  if (GetArenaNoVirtual() == NULL && terms_ != NULL) {
    delete terms_;
  }
  terms_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms& Qos_Classifiers_Classifier::terms() const {
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms* p = terms_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.Classifier.terms)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms*>(
      &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_Terms_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms* Qos_Classifiers_Classifier::release_terms() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.Classifier.terms)
  
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms* temp = terms_;
  terms_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms* Qos_Classifiers_Classifier::mutable_terms() {
  
  if (terms_ == NULL) {
    terms_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.Classifier.terms)
  return terms_;
}
inline void Qos_Classifiers_Classifier::set_allocated_terms(::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms* terms) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete terms_;
  }
  if (terms) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      terms = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, terms, submessage_arena);
    }
    
  } else {
    
  }
  terms_ = terms;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.Classifier.terms)
}

// -------------------------------------------------------------------

// Qos_Classifiers_ClassifierKey

// string name = 1 [(.yext.schemapath) = "/qos/classifiers/classifier/name"];
inline void Qos_Classifiers_ClassifierKey::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Qos_Classifiers_ClassifierKey::name() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey.name)
  return name_.GetNoArena();
}
inline void Qos_Classifiers_ClassifierKey::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey.name)
}
#if LANG_CXX11
inline void Qos_Classifiers_ClassifierKey::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey.name)
}
#endif
inline void Qos_Classifiers_ClassifierKey::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey.name)
}
inline void Qos_Classifiers_ClassifierKey::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey.name)
}
inline ::std::string* Qos_Classifiers_ClassifierKey::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Qos_Classifiers_ClassifierKey::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Qos_Classifiers_ClassifierKey::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey.name)
}

// .openconfig.openconfig_qos.Qos.Classifiers.Classifier classifier = 2;
inline bool Qos_Classifiers_ClassifierKey::has_classifier() const {
  return this != internal_default_instance() && classifier_ != NULL;
}
inline void Qos_Classifiers_ClassifierKey::clear_classifier() {
  if (GetArenaNoVirtual() == NULL && classifier_ != NULL) {
    delete classifier_;
  }
  classifier_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier& Qos_Classifiers_ClassifierKey::classifier() const {
  const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier* p = classifier_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey.classifier)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Classifiers_Classifier*>(
      &::openconfig::openconfig_qos::_Qos_Classifiers_Classifier_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier* Qos_Classifiers_ClassifierKey::release_classifier() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey.classifier)
  
  ::openconfig::openconfig_qos::Qos_Classifiers_Classifier* temp = classifier_;
  classifier_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_Classifier* Qos_Classifiers_ClassifierKey::mutable_classifier() {
  
  if (classifier_ == NULL) {
    classifier_ = new ::openconfig::openconfig_qos::Qos_Classifiers_Classifier;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey.classifier)
  return classifier_;
}
inline void Qos_Classifiers_ClassifierKey::set_allocated_classifier(::openconfig::openconfig_qos::Qos_Classifiers_Classifier* classifier) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete classifier_;
  }
  if (classifier) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      classifier = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, classifier, submessage_arena);
    }
    
  } else {
    
  }
  classifier_ = classifier;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey.classifier)
}

// -------------------------------------------------------------------

// Qos_Classifiers

// repeated .openconfig.openconfig_qos.Qos.Classifiers.ClassifierKey classifier = 281713417 [(.yext.schemapath) = "/qos/classifiers/classifier"];
inline int Qos_Classifiers::classifier_size() const {
  return classifier_.size();
}
inline void Qos_Classifiers::clear_classifier() {
  classifier_.Clear();
}
inline const ::openconfig::openconfig_qos::Qos_Classifiers_ClassifierKey& Qos_Classifiers::classifier(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Classifiers.classifier)
  return classifier_.Get(index);
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_ClassifierKey* Qos_Classifiers::mutable_classifier(int index) {
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Classifiers.classifier)
  return classifier_.Mutable(index);
}
inline ::openconfig::openconfig_qos::Qos_Classifiers_ClassifierKey* Qos_Classifiers::add_classifier() {
  // @@protoc_insertion_point(field_add:openconfig.openconfig_qos.Qos.Classifiers.classifier)
  return classifier_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Classifiers_ClassifierKey >*
Qos_Classifiers::mutable_classifier() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_qos.Qos.Classifiers.classifier)
  return &classifier_;
}
inline const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Classifiers_ClassifierKey >&
Qos_Classifiers::classifier() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_qos.Qos.Classifiers.classifier)
  return classifier_;
}

// -------------------------------------------------------------------

// Qos_Config

// -------------------------------------------------------------------

// Qos_ForwardingGroups_ForwardingGroup_Config

// .ywrapper.UintValue fabric_priority = 199494503 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/config/fabric-priority"];
inline bool Qos_ForwardingGroups_ForwardingGroup_Config::has_fabric_priority() const {
  return this != internal_default_instance() && fabric_priority_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_ForwardingGroups_ForwardingGroup_Config::fabric_priority() const {
  const ::ywrapper::UintValue* p = fabric_priority_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.Config.fabric_priority)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_ForwardingGroups_ForwardingGroup_Config::release_fabric_priority() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.Config.fabric_priority)
  
  ::ywrapper::UintValue* temp = fabric_priority_;
  fabric_priority_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_ForwardingGroups_ForwardingGroup_Config::mutable_fabric_priority() {
  
  if (fabric_priority_ == NULL) {
    fabric_priority_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.Config.fabric_priority)
  return fabric_priority_;
}
inline void Qos_ForwardingGroups_ForwardingGroup_Config::set_allocated_fabric_priority(::ywrapper::UintValue* fabric_priority) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(fabric_priority_);
  }
  if (fabric_priority) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fabric_priority = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fabric_priority, submessage_arena);
    }
    
  } else {
    
  }
  fabric_priority_ = fabric_priority;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.Config.fabric_priority)
}

// .ywrapper.StringValue name = 179879028 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/config/name"];
inline bool Qos_ForwardingGroups_ForwardingGroup_Config::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_ForwardingGroups_ForwardingGroup_Config::name() const {
  const ::ywrapper::StringValue* p = name_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.Config.name)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_ForwardingGroups_ForwardingGroup_Config::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.Config.name)
  
  ::ywrapper::StringValue* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_ForwardingGroups_ForwardingGroup_Config::mutable_name() {
  
  if (name_ == NULL) {
    name_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.Config.name)
  return name_;
}
inline void Qos_ForwardingGroups_ForwardingGroup_Config::set_allocated_name(::ywrapper::StringValue* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.Config.name)
}

// .ywrapper.StringValue output_queue = 22359152 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/config/output-queue"];
inline bool Qos_ForwardingGroups_ForwardingGroup_Config::has_output_queue() const {
  return this != internal_default_instance() && output_queue_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_ForwardingGroups_ForwardingGroup_Config::output_queue() const {
  const ::ywrapper::StringValue* p = output_queue_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.Config.output_queue)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_ForwardingGroups_ForwardingGroup_Config::release_output_queue() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.Config.output_queue)
  
  ::ywrapper::StringValue* temp = output_queue_;
  output_queue_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_ForwardingGroups_ForwardingGroup_Config::mutable_output_queue() {
  
  if (output_queue_ == NULL) {
    output_queue_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.Config.output_queue)
  return output_queue_;
}
inline void Qos_ForwardingGroups_ForwardingGroup_Config::set_allocated_output_queue(::ywrapper::StringValue* output_queue) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(output_queue_);
  }
  if (output_queue) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      output_queue = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, output_queue, submessage_arena);
    }
    
  } else {
    
  }
  output_queue_ = output_queue;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.Config.output_queue)
}

// -------------------------------------------------------------------

// Qos_ForwardingGroups_ForwardingGroup_State

// .ywrapper.UintValue fabric_priority = 435056042 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/state/fabric-priority"];
inline bool Qos_ForwardingGroups_ForwardingGroup_State::has_fabric_priority() const {
  return this != internal_default_instance() && fabric_priority_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_ForwardingGroups_ForwardingGroup_State::fabric_priority() const {
  const ::ywrapper::UintValue* p = fabric_priority_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.State.fabric_priority)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_ForwardingGroups_ForwardingGroup_State::release_fabric_priority() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.State.fabric_priority)
  
  ::ywrapper::UintValue* temp = fabric_priority_;
  fabric_priority_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_ForwardingGroups_ForwardingGroup_State::mutable_fabric_priority() {
  
  if (fabric_priority_ == NULL) {
    fabric_priority_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.State.fabric_priority)
  return fabric_priority_;
}
inline void Qos_ForwardingGroups_ForwardingGroup_State::set_allocated_fabric_priority(::ywrapper::UintValue* fabric_priority) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(fabric_priority_);
  }
  if (fabric_priority) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fabric_priority = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fabric_priority, submessage_arena);
    }
    
  } else {
    
  }
  fabric_priority_ = fabric_priority;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.State.fabric_priority)
}

// .ywrapper.StringValue name = 399045611 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/state/name"];
inline bool Qos_ForwardingGroups_ForwardingGroup_State::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_ForwardingGroups_ForwardingGroup_State::name() const {
  const ::ywrapper::StringValue* p = name_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.State.name)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_ForwardingGroups_ForwardingGroup_State::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.State.name)
  
  ::ywrapper::StringValue* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_ForwardingGroups_ForwardingGroup_State::mutable_name() {
  
  if (name_ == NULL) {
    name_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.State.name)
  return name_;
}
inline void Qos_ForwardingGroups_ForwardingGroup_State::set_allocated_name(::ywrapper::StringValue* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.State.name)
}

// .ywrapper.StringValue output_queue = 104836423 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/state/output-queue"];
inline bool Qos_ForwardingGroups_ForwardingGroup_State::has_output_queue() const {
  return this != internal_default_instance() && output_queue_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_ForwardingGroups_ForwardingGroup_State::output_queue() const {
  const ::ywrapper::StringValue* p = output_queue_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.State.output_queue)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_ForwardingGroups_ForwardingGroup_State::release_output_queue() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.State.output_queue)
  
  ::ywrapper::StringValue* temp = output_queue_;
  output_queue_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_ForwardingGroups_ForwardingGroup_State::mutable_output_queue() {
  
  if (output_queue_ == NULL) {
    output_queue_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.State.output_queue)
  return output_queue_;
}
inline void Qos_ForwardingGroups_ForwardingGroup_State::set_allocated_output_queue(::ywrapper::StringValue* output_queue) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(output_queue_);
  }
  if (output_queue) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      output_queue = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, output_queue, submessage_arena);
    }
    
  } else {
    
  }
  output_queue_ = output_queue;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.State.output_queue)
}

// -------------------------------------------------------------------

// Qos_ForwardingGroups_ForwardingGroup

// .openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.Config config = 30587438 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/config"];
inline bool Qos_ForwardingGroups_ForwardingGroup::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Qos_ForwardingGroups_ForwardingGroup::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_Config& Qos_ForwardingGroups_ForwardingGroup::config() const {
  const ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_Config*>(
      &::openconfig::openconfig_qos::_Qos_ForwardingGroups_ForwardingGroup_Config_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_Config* Qos_ForwardingGroups_ForwardingGroup::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.config)
  
  ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_Config* Qos_ForwardingGroups_ForwardingGroup::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.config)
  return config_;
}
inline void Qos_ForwardingGroups_ForwardingGroup::set_allocated_config(::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.config)
}

// .openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.State state = 512276571 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/state"];
inline bool Qos_ForwardingGroups_ForwardingGroup::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_ForwardingGroups_ForwardingGroup::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_State& Qos_ForwardingGroups_ForwardingGroup::state() const {
  const ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_State*>(
      &::openconfig::openconfig_qos::_Qos_ForwardingGroups_ForwardingGroup_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_State* Qos_ForwardingGroups_ForwardingGroup::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.state)
  
  ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_State* Qos_ForwardingGroups_ForwardingGroup::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.state)
  return state_;
}
inline void Qos_ForwardingGroups_ForwardingGroup::set_allocated_state(::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup.state)
}

// -------------------------------------------------------------------

// Qos_ForwardingGroups_ForwardingGroupKey

// string name = 1 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group/name"];
inline void Qos_ForwardingGroups_ForwardingGroupKey::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Qos_ForwardingGroups_ForwardingGroupKey::name() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey.name)
  return name_.GetNoArena();
}
inline void Qos_ForwardingGroups_ForwardingGroupKey::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey.name)
}
#if LANG_CXX11
inline void Qos_ForwardingGroups_ForwardingGroupKey::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey.name)
}
#endif
inline void Qos_ForwardingGroups_ForwardingGroupKey::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey.name)
}
inline void Qos_ForwardingGroups_ForwardingGroupKey::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey.name)
}
inline ::std::string* Qos_ForwardingGroups_ForwardingGroupKey::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Qos_ForwardingGroups_ForwardingGroupKey::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Qos_ForwardingGroups_ForwardingGroupKey::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey.name)
}

// .openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroup forwarding_group = 2;
inline bool Qos_ForwardingGroups_ForwardingGroupKey::has_forwarding_group() const {
  return this != internal_default_instance() && forwarding_group_ != NULL;
}
inline void Qos_ForwardingGroups_ForwardingGroupKey::clear_forwarding_group() {
  if (GetArenaNoVirtual() == NULL && forwarding_group_ != NULL) {
    delete forwarding_group_;
  }
  forwarding_group_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup& Qos_ForwardingGroups_ForwardingGroupKey::forwarding_group() const {
  const ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup* p = forwarding_group_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey.forwarding_group)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup*>(
      &::openconfig::openconfig_qos::_Qos_ForwardingGroups_ForwardingGroup_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup* Qos_ForwardingGroups_ForwardingGroupKey::release_forwarding_group() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey.forwarding_group)
  
  ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup* temp = forwarding_group_;
  forwarding_group_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup* Qos_ForwardingGroups_ForwardingGroupKey::mutable_forwarding_group() {
  
  if (forwarding_group_ == NULL) {
    forwarding_group_ = new ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey.forwarding_group)
  return forwarding_group_;
}
inline void Qos_ForwardingGroups_ForwardingGroupKey::set_allocated_forwarding_group(::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroup* forwarding_group) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete forwarding_group_;
  }
  if (forwarding_group) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      forwarding_group = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, forwarding_group, submessage_arena);
    }
    
  } else {
    
  }
  forwarding_group_ = forwarding_group;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey.forwarding_group)
}

// -------------------------------------------------------------------

// Qos_ForwardingGroups

// repeated .openconfig.openconfig_qos.Qos.ForwardingGroups.ForwardingGroupKey forwarding_group = 454859993 [(.yext.schemapath) = "/qos/forwarding-groups/forwarding-group"];
inline int Qos_ForwardingGroups::forwarding_group_size() const {
  return forwarding_group_.size();
}
inline void Qos_ForwardingGroups::clear_forwarding_group() {
  forwarding_group_.Clear();
}
inline const ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroupKey& Qos_ForwardingGroups::forwarding_group(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.ForwardingGroups.forwarding_group)
  return forwarding_group_.Get(index);
}
inline ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroupKey* Qos_ForwardingGroups::mutable_forwarding_group(int index) {
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.ForwardingGroups.forwarding_group)
  return forwarding_group_.Mutable(index);
}
inline ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroupKey* Qos_ForwardingGroups::add_forwarding_group() {
  // @@protoc_insertion_point(field_add:openconfig.openconfig_qos.Qos.ForwardingGroups.forwarding_group)
  return forwarding_group_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroupKey >*
Qos_ForwardingGroups::mutable_forwarding_group() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_qos.Qos.ForwardingGroups.forwarding_group)
  return &forwarding_group_;
}
inline const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_ForwardingGroups_ForwardingGroupKey >&
Qos_ForwardingGroups::forwarding_group() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_qos.Qos.ForwardingGroups.forwarding_group)
  return forwarding_group_;
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Config

// .ywrapper.StringValue interface_id = 261126006 [(.yext.schemapath) = "/qos/interfaces/interface/config/interface-id"];
inline bool Qos_Interfaces_Interface_Config::has_interface_id() const {
  return this != internal_default_instance() && interface_id_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Interfaces_Interface_Config::interface_id() const {
  const ::ywrapper::StringValue* p = interface_id_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Config.interface_id)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Config::release_interface_id() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Config.interface_id)
  
  ::ywrapper::StringValue* temp = interface_id_;
  interface_id_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Config::mutable_interface_id() {
  
  if (interface_id_ == NULL) {
    interface_id_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Config.interface_id)
  return interface_id_;
}
inline void Qos_Interfaces_Interface_Config::set_allocated_interface_id(::ywrapper::StringValue* interface_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(interface_id_);
  }
  if (interface_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      interface_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, interface_id, submessage_arena);
    }
    
  } else {
    
  }
  interface_id_ = interface_id;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Config.interface_id)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Input_Classifers_Classifier_Config

// .ywrapper.StringValue name = 147745567 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/config/name"];
inline bool Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::name() const {
  const ::ywrapper::StringValue* p = name_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Config.name)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Config.name)
  
  ::ywrapper::StringValue* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::mutable_name() {
  
  if (name_ == NULL) {
    name_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Config.name)
  return name_;
}
inline void Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::set_allocated_name(::ywrapper::StringValue* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Config.name)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Config.Type type = 527727482 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/config/type"];
inline void Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::clear_type() {
  type_ = 0;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::type() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Config.type)
  return static_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type >(type_);
}
inline void Qos_Interfaces_Interface_Input_Classifers_Classifier_Config::set_type(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Config.type)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Input_Classifers_Classifier_State

// .ywrapper.StringValue name = 194613362 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/state/name"];
inline bool Qos_Interfaces_Interface_Input_Classifers_Classifier_State::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Interfaces_Interface_Input_Classifers_Classifier_State::name() const {
  const ::ywrapper::StringValue* p = name_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.State.name)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Input_Classifers_Classifier_State::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.State.name)
  
  ::ywrapper::StringValue* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Input_Classifers_Classifier_State::mutable_name() {
  
  if (name_ == NULL) {
    name_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.State.name)
  return name_;
}
inline void Qos_Interfaces_Interface_Input_Classifers_Classifier_State::set_allocated_name(::ywrapper::StringValue* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.State.name)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.State.Type type = 454489263 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/state/type"];
inline void Qos_Interfaces_Interface_Input_Classifers_Classifier_State::clear_type() {
  type_ = 0;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type Qos_Interfaces_Interface_Input_Classifers_Classifier_State::type() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.State.type)
  return static_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type >(type_);
}
inline void Qos_Interfaces_Interface_Input_Classifers_Classifier_State::set_type(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.State.type)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config

// .ywrapper.StringValue id = 326265552 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/config/id"];
inline bool Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config::id() const {
  const ::ywrapper::StringValue* p = id_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.Config.id)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config::release_id() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.Config.id)
  
  ::ywrapper::StringValue* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.Config.id)
  return id_;
}
inline void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config::set_allocated_id(::ywrapper::StringValue* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.Config.id)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State

// .ywrapper.StringValue id = 281042275 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/state/id"];
inline bool Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::id() const {
  const ::ywrapper::StringValue* p = id_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.State.id)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::release_id() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.State.id)
  
  ::ywrapper::StringValue* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.State.id)
  return id_;
}
inline void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::set_allocated_id(::ywrapper::StringValue* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.State.id)
}

// .ywrapper.UintValue matched_octets = 188335353 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/state/matched-octets"];
inline bool Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::has_matched_octets() const {
  return this != internal_default_instance() && matched_octets_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::matched_octets() const {
  const ::ywrapper::UintValue* p = matched_octets_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.State.matched_octets)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::release_matched_octets() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.State.matched_octets)
  
  ::ywrapper::UintValue* temp = matched_octets_;
  matched_octets_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::mutable_matched_octets() {
  
  if (matched_octets_ == NULL) {
    matched_octets_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.State.matched_octets)
  return matched_octets_;
}
inline void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::set_allocated_matched_octets(::ywrapper::UintValue* matched_octets) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(matched_octets_);
  }
  if (matched_octets) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      matched_octets = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, matched_octets, submessage_arena);
    }
    
  } else {
    
  }
  matched_octets_ = matched_octets;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.State.matched_octets)
}

// .ywrapper.UintValue matched_packets = 437259876 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/state/matched-packets"];
inline bool Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::has_matched_packets() const {
  return this != internal_default_instance() && matched_packets_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::matched_packets() const {
  const ::ywrapper::UintValue* p = matched_packets_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.State.matched_packets)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::release_matched_packets() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.State.matched_packets)
  
  ::ywrapper::UintValue* temp = matched_packets_;
  matched_packets_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::mutable_matched_packets() {
  
  if (matched_packets_ == NULL) {
    matched_packets_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.State.matched_packets)
  return matched_packets_;
}
inline void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State::set_allocated_matched_packets(::ywrapper::UintValue* matched_packets) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(matched_packets_);
  }
  if (matched_packets) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      matched_packets = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, matched_packets, submessage_arena);
    }
    
  } else {
    
  }
  matched_packets_ = matched_packets;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.State.matched_packets)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.Config config = 435774088 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/config"];
inline bool Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config& Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term::config() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config* Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.config)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config* Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.config)
  return config_;
}
inline void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term::set_allocated_config(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.config)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.State state = 529706017 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/state"];
inline bool Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State& Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term::state() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State* Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.state)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State* Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.state)
  return state_;
}
inline void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term::set_allocated_state(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term.state)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey

// string id = 1 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term/id"];
inline void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::id() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey.id)
  return id_.GetNoArena();
}
inline void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey.id)
}
#if LANG_CXX11
inline void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey.id)
}
#endif
inline void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey.id)
}
inline void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey.id)
}
inline ::std::string* Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::release_id() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey.id)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.Term term = 2;
inline bool Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::has_term() const {
  return this != internal_default_instance() && term_ != NULL;
}
inline void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::clear_term() {
  if (GetArenaNoVirtual() == NULL && term_ != NULL) {
    delete term_;
  }
  term_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term& Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::term() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term* p = term_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey.term)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term* Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::release_term() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey.term)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term* temp = term_;
  term_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term* Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::mutable_term() {
  
  if (term_ == NULL) {
    term_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey.term)
  return term_;
}
inline void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey::set_allocated_term(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_Term* term) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete term_;
  }
  if (term) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      term = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, term, submessage_arena);
    }
    
  } else {
    
  }
  term_ = term;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey.term)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms

// repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.TermKey term = 256315543 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms/term"];
inline int Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms::term_size() const {
  return term_.size();
}
inline void Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms::clear_term() {
  term_.Clear();
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey& Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms::term(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.term)
  return term_.Get(index);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey* Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms::mutable_term(int index) {
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.term)
  return term_.Mutable(index);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey* Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms::add_term() {
  // @@protoc_insertion_point(field_add:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.term)
  return term_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey >*
Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms::mutable_term() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.term)
  return &term_;
}
inline const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_TermKey >&
Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms::term() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms.term)
  return term_;
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Input_Classifers_Classifier

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Config config = 359276951 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/config"];
inline bool Qos_Interfaces_Interface_Input_Classifers_Classifier::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Qos_Interfaces_Interface_Input_Classifers_Classifier::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Config& Qos_Interfaces_Interface_Input_Classifers_Classifier::config() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Config*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Config* Qos_Interfaces_Interface_Input_Classifers_Classifier::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.config)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Config* Qos_Interfaces_Interface_Input_Classifers_Classifier::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.config)
  return config_;
}
inline void Qos_Interfaces_Interface_Input_Classifers_Classifier::set_allocated_config(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.config)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.State state = 262213192 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/state"];
inline bool Qos_Interfaces_Interface_Input_Classifers_Classifier::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_Interfaces_Interface_Input_Classifers_Classifier::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_State& Qos_Interfaces_Interface_Input_Classifers_Classifier::state() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_State*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_Classifier_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_State* Qos_Interfaces_Interface_Input_Classifers_Classifier::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.state)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_State* Qos_Interfaces_Interface_Input_Classifers_Classifier::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.state)
  return state_;
}
inline void Qos_Interfaces_Interface_Input_Classifers_Classifier::set_allocated_state(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.state)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.Terms terms = 21096446 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/terms"];
inline bool Qos_Interfaces_Interface_Input_Classifers_Classifier::has_terms() const {
  return this != internal_default_instance() && terms_ != NULL;
}
inline void Qos_Interfaces_Interface_Input_Classifers_Classifier::clear_terms() {
  if (GetArenaNoVirtual() == NULL && terms_ != NULL) {
    delete terms_;
  }
  terms_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms& Qos_Interfaces_Interface_Input_Classifers_Classifier::terms() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms* p = terms_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.terms)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms* Qos_Interfaces_Interface_Input_Classifers_Classifier::release_terms() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.terms)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms* temp = terms_;
  terms_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms* Qos_Interfaces_Interface_Input_Classifers_Classifier::mutable_terms() {
  
  if (terms_ == NULL) {
    terms_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.terms)
  return terms_;
}
inline void Qos_Interfaces_Interface_Input_Classifers_Classifier::set_allocated_terms(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Terms* terms) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete terms_;
  }
  if (terms) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      terms = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, terms, submessage_arena);
    }
    
  } else {
    
  }
  terms_ = terms;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier.terms)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Input_Classifers_ClassifierKey

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.ClassifierKey.Type type = 1 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier/type"];
inline void Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::clear_type() {
  type_ = 0;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::type() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.ClassifierKey.type)
  return static_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type >(type_);
}
inline void Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::set_type(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.ClassifierKey.type)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.Classifier classifier = 2;
inline bool Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::has_classifier() const {
  return this != internal_default_instance() && classifier_ != NULL;
}
inline void Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::clear_classifier() {
  if (GetArenaNoVirtual() == NULL && classifier_ != NULL) {
    delete classifier_;
  }
  classifier_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier& Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::classifier() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier* p = classifier_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.ClassifierKey.classifier)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_Classifier_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier* Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::release_classifier() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.ClassifierKey.classifier)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier* temp = classifier_;
  classifier_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier* Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::mutable_classifier() {
  
  if (classifier_ == NULL) {
    classifier_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.ClassifierKey.classifier)
  return classifier_;
}
inline void Qos_Interfaces_Interface_Input_Classifers_ClassifierKey::set_allocated_classifier(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier* classifier) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete classifier_;
  }
  if (classifier) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      classifier = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, classifier, submessage_arena);
    }
    
  } else {
    
  }
  classifier_ = classifier;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.ClassifierKey.classifier)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Input_Classifers

// repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.ClassifierKey classifier = 140629686 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers/classifier"];
inline int Qos_Interfaces_Interface_Input_Classifers::classifier_size() const {
  return classifier_.size();
}
inline void Qos_Interfaces_Interface_Input_Classifers::clear_classifier() {
  classifier_.Clear();
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_ClassifierKey& Qos_Interfaces_Interface_Input_Classifers::classifier(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.classifier)
  return classifier_.Get(index);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_ClassifierKey* Qos_Interfaces_Interface_Input_Classifers::mutable_classifier(int index) {
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.classifier)
  return classifier_.Mutable(index);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_ClassifierKey* Qos_Interfaces_Interface_Input_Classifers::add_classifier() {
  // @@protoc_insertion_point(field_add:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.classifier)
  return classifier_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_ClassifierKey >*
Qos_Interfaces_Interface_Input_Classifers::mutable_classifier() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.classifier)
  return &classifier_;
}
inline const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_ClassifierKey >&
Qos_Interfaces_Interface_Input_Classifers::classifier() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers.classifier)
  return classifier_;
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Input_Config

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Input_Queues_Queue_Config

// .ywrapper.StringValue name = 441396008 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/config/name"];
inline bool Qos_Interfaces_Interface_Input_Queues_Queue_Config::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Interfaces_Interface_Input_Queues_Queue_Config::name() const {
  const ::ywrapper::StringValue* p = name_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.Config.name)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Input_Queues_Queue_Config::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.Config.name)
  
  ::ywrapper::StringValue* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Input_Queues_Queue_Config::mutable_name() {
  
  if (name_ == NULL) {
    name_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.Config.name)
  return name_;
}
inline void Qos_Interfaces_Interface_Input_Queues_Queue_Config::set_allocated_name(::ywrapper::StringValue* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.Config.name)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Input_Queues_Queue_State

// .ywrapper.UintValue avg_queue_len = 357067202 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state/avg-queue-len"];
inline bool Qos_Interfaces_Interface_Input_Queues_Queue_State::has_avg_queue_len() const {
  return this != internal_default_instance() && avg_queue_len_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Interfaces_Interface_Input_Queues_Queue_State::avg_queue_len() const {
  const ::ywrapper::UintValue* p = avg_queue_len_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State.avg_queue_len)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Input_Queues_Queue_State::release_avg_queue_len() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State.avg_queue_len)
  
  ::ywrapper::UintValue* temp = avg_queue_len_;
  avg_queue_len_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Input_Queues_Queue_State::mutable_avg_queue_len() {
  
  if (avg_queue_len_ == NULL) {
    avg_queue_len_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State.avg_queue_len)
  return avg_queue_len_;
}
inline void Qos_Interfaces_Interface_Input_Queues_Queue_State::set_allocated_avg_queue_len(::ywrapper::UintValue* avg_queue_len) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(avg_queue_len_);
  }
  if (avg_queue_len) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      avg_queue_len = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, avg_queue_len, submessage_arena);
    }
    
  } else {
    
  }
  avg_queue_len_ = avg_queue_len;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State.avg_queue_len)
}

// .ywrapper.UintValue dropped_pkts = 530366041 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state/dropped-pkts"];
inline bool Qos_Interfaces_Interface_Input_Queues_Queue_State::has_dropped_pkts() const {
  return this != internal_default_instance() && dropped_pkts_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Interfaces_Interface_Input_Queues_Queue_State::dropped_pkts() const {
  const ::ywrapper::UintValue* p = dropped_pkts_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State.dropped_pkts)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Input_Queues_Queue_State::release_dropped_pkts() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State.dropped_pkts)
  
  ::ywrapper::UintValue* temp = dropped_pkts_;
  dropped_pkts_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Input_Queues_Queue_State::mutable_dropped_pkts() {
  
  if (dropped_pkts_ == NULL) {
    dropped_pkts_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State.dropped_pkts)
  return dropped_pkts_;
}
inline void Qos_Interfaces_Interface_Input_Queues_Queue_State::set_allocated_dropped_pkts(::ywrapper::UintValue* dropped_pkts) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dropped_pkts_);
  }
  if (dropped_pkts) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dropped_pkts = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dropped_pkts, submessage_arena);
    }
    
  } else {
    
  }
  dropped_pkts_ = dropped_pkts;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State.dropped_pkts)
}

// .ywrapper.UintValue max_queue_len = 535584496 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state/max-queue-len"];
inline bool Qos_Interfaces_Interface_Input_Queues_Queue_State::has_max_queue_len() const {
  return this != internal_default_instance() && max_queue_len_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Interfaces_Interface_Input_Queues_Queue_State::max_queue_len() const {
  const ::ywrapper::UintValue* p = max_queue_len_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State.max_queue_len)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Input_Queues_Queue_State::release_max_queue_len() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State.max_queue_len)
  
  ::ywrapper::UintValue* temp = max_queue_len_;
  max_queue_len_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Input_Queues_Queue_State::mutable_max_queue_len() {
  
  if (max_queue_len_ == NULL) {
    max_queue_len_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State.max_queue_len)
  return max_queue_len_;
}
inline void Qos_Interfaces_Interface_Input_Queues_Queue_State::set_allocated_max_queue_len(::ywrapper::UintValue* max_queue_len) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(max_queue_len_);
  }
  if (max_queue_len) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      max_queue_len = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, max_queue_len, submessage_arena);
    }
    
  } else {
    
  }
  max_queue_len_ = max_queue_len;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State.max_queue_len)
}

// .ywrapper.StringValue name = 147116895 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state/name"];
inline bool Qos_Interfaces_Interface_Input_Queues_Queue_State::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Interfaces_Interface_Input_Queues_Queue_State::name() const {
  const ::ywrapper::StringValue* p = name_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State.name)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Input_Queues_Queue_State::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State.name)
  
  ::ywrapper::StringValue* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Input_Queues_Queue_State::mutable_name() {
  
  if (name_ == NULL) {
    name_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State.name)
  return name_;
}
inline void Qos_Interfaces_Interface_Input_Queues_Queue_State::set_allocated_name(::ywrapper::StringValue* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State.name)
}

// .ywrapper.UintValue transmit_octets = 237910979 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state/transmit-octets"];
inline bool Qos_Interfaces_Interface_Input_Queues_Queue_State::has_transmit_octets() const {
  return this != internal_default_instance() && transmit_octets_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Interfaces_Interface_Input_Queues_Queue_State::transmit_octets() const {
  const ::ywrapper::UintValue* p = transmit_octets_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State.transmit_octets)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Input_Queues_Queue_State::release_transmit_octets() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State.transmit_octets)
  
  ::ywrapper::UintValue* temp = transmit_octets_;
  transmit_octets_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Input_Queues_Queue_State::mutable_transmit_octets() {
  
  if (transmit_octets_ == NULL) {
    transmit_octets_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State.transmit_octets)
  return transmit_octets_;
}
inline void Qos_Interfaces_Interface_Input_Queues_Queue_State::set_allocated_transmit_octets(::ywrapper::UintValue* transmit_octets) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(transmit_octets_);
  }
  if (transmit_octets) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transmit_octets = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transmit_octets, submessage_arena);
    }
    
  } else {
    
  }
  transmit_octets_ = transmit_octets;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State.transmit_octets)
}

// .ywrapper.UintValue transmit_pkts = 368710075 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state/transmit-pkts"];
inline bool Qos_Interfaces_Interface_Input_Queues_Queue_State::has_transmit_pkts() const {
  return this != internal_default_instance() && transmit_pkts_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Interfaces_Interface_Input_Queues_Queue_State::transmit_pkts() const {
  const ::ywrapper::UintValue* p = transmit_pkts_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State.transmit_pkts)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Input_Queues_Queue_State::release_transmit_pkts() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State.transmit_pkts)
  
  ::ywrapper::UintValue* temp = transmit_pkts_;
  transmit_pkts_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Input_Queues_Queue_State::mutable_transmit_pkts() {
  
  if (transmit_pkts_ == NULL) {
    transmit_pkts_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State.transmit_pkts)
  return transmit_pkts_;
}
inline void Qos_Interfaces_Interface_Input_Queues_Queue_State::set_allocated_transmit_pkts(::ywrapper::UintValue* transmit_pkts) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(transmit_pkts_);
  }
  if (transmit_pkts) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transmit_pkts = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transmit_pkts, submessage_arena);
    }
    
  } else {
    
  }
  transmit_pkts_ = transmit_pkts;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State.transmit_pkts)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Input_Queues_Queue

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.Config config = 503523130 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/config"];
inline bool Qos_Interfaces_Interface_Input_Queues_Queue::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Qos_Interfaces_Interface_Input_Queues_Queue::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_Config& Qos_Interfaces_Interface_Input_Queues_Queue::config() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_Config*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Queues_Queue_Config_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_Config* Qos_Interfaces_Interface_Input_Queues_Queue::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.config)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_Config* Qos_Interfaces_Interface_Input_Queues_Queue::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.config)
  return config_;
}
inline void Qos_Interfaces_Interface_Input_Queues_Queue::set_allocated_config(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.config)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.State state = 189832279 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/state"];
inline bool Qos_Interfaces_Interface_Input_Queues_Queue::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_Interfaces_Interface_Input_Queues_Queue::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_State& Qos_Interfaces_Interface_Input_Queues_Queue::state() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_State*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Queues_Queue_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_State* Qos_Interfaces_Interface_Input_Queues_Queue::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.state)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_State* Qos_Interfaces_Interface_Input_Queues_Queue::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.state)
  return state_;
}
inline void Qos_Interfaces_Interface_Input_Queues_Queue::set_allocated_state(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue.state)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Input_Queues_QueueKey

// string name = 1 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue/name"];
inline void Qos_Interfaces_Interface_Input_Queues_QueueKey::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Qos_Interfaces_Interface_Input_Queues_QueueKey::name() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey.name)
  return name_.GetNoArena();
}
inline void Qos_Interfaces_Interface_Input_Queues_QueueKey::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey.name)
}
#if LANG_CXX11
inline void Qos_Interfaces_Interface_Input_Queues_QueueKey::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey.name)
}
#endif
inline void Qos_Interfaces_Interface_Input_Queues_QueueKey::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey.name)
}
inline void Qos_Interfaces_Interface_Input_Queues_QueueKey::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey.name)
}
inline ::std::string* Qos_Interfaces_Interface_Input_Queues_QueueKey::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Qos_Interfaces_Interface_Input_Queues_QueueKey::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Qos_Interfaces_Interface_Input_Queues_QueueKey::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey.name)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.Queue queue = 2;
inline bool Qos_Interfaces_Interface_Input_Queues_QueueKey::has_queue() const {
  return this != internal_default_instance() && queue_ != NULL;
}
inline void Qos_Interfaces_Interface_Input_Queues_QueueKey::clear_queue() {
  if (GetArenaNoVirtual() == NULL && queue_ != NULL) {
    delete queue_;
  }
  queue_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue& Qos_Interfaces_Interface_Input_Queues_QueueKey::queue() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue* p = queue_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey.queue)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Queues_Queue_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue* Qos_Interfaces_Interface_Input_Queues_QueueKey::release_queue() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey.queue)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue* temp = queue_;
  queue_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue* Qos_Interfaces_Interface_Input_Queues_QueueKey::mutable_queue() {
  
  if (queue_ == NULL) {
    queue_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey.queue)
  return queue_;
}
inline void Qos_Interfaces_Interface_Input_Queues_QueueKey::set_allocated_queue(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_Queue* queue) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete queue_;
  }
  if (queue) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      queue = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, queue, submessage_arena);
    }
    
  } else {
    
  }
  queue_ = queue;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey.queue)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Input_Queues

// repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.QueueKey queue = 103221525 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues/queue"];
inline int Qos_Interfaces_Interface_Input_Queues::queue_size() const {
  return queue_.size();
}
inline void Qos_Interfaces_Interface_Input_Queues::clear_queue() {
  queue_.Clear();
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_QueueKey& Qos_Interfaces_Interface_Input_Queues::queue(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.queue)
  return queue_.Get(index);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_QueueKey* Qos_Interfaces_Interface_Input_Queues::mutable_queue(int index) {
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.queue)
  return queue_.Mutable(index);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_QueueKey* Qos_Interfaces_Interface_Input_Queues::add_queue() {
  // @@protoc_insertion_point(field_add:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.queue)
  return queue_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_QueueKey >*
Qos_Interfaces_Interface_Input_Queues::mutable_queue() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.queue)
  return &queue_;
}
inline const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues_QueueKey >&
Qos_Interfaces_Interface_Input_Queues::queue() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues.queue)
  return queue_;
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Input_SchedulerPolicy_Config

// .ywrapper.StringValue name = 5527674 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/config/name"];
inline bool Qos_Interfaces_Interface_Input_SchedulerPolicy_Config::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Interfaces_Interface_Input_SchedulerPolicy_Config::name() const {
  const ::ywrapper::StringValue* p = name_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Config.name)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Input_SchedulerPolicy_Config::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Config.name)
  
  ::ywrapper::StringValue* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Input_SchedulerPolicy_Config::mutable_name() {
  
  if (name_ == NULL) {
    name_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Config.name)
  return name_;
}
inline void Qos_Interfaces_Interface_Input_SchedulerPolicy_Config::set_allocated_name(::ywrapper::StringValue* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Config.name)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State

// .ywrapper.UintValue conforming_octets = 204398478 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/conforming-octets"];
inline bool Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::has_conforming_octets() const {
  return this != internal_default_instance() && conforming_octets_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::conforming_octets() const {
  const ::ywrapper::UintValue* p = conforming_octets_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State.conforming_octets)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::release_conforming_octets() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State.conforming_octets)
  
  ::ywrapper::UintValue* temp = conforming_octets_;
  conforming_octets_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::mutable_conforming_octets() {
  
  if (conforming_octets_ == NULL) {
    conforming_octets_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State.conforming_octets)
  return conforming_octets_;
}
inline void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::set_allocated_conforming_octets(::ywrapper::UintValue* conforming_octets) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(conforming_octets_);
  }
  if (conforming_octets) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      conforming_octets = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, conforming_octets, submessage_arena);
    }
    
  } else {
    
  }
  conforming_octets_ = conforming_octets;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State.conforming_octets)
}

// .ywrapper.UintValue conforming_pkts = 395467958 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/conforming-pkts"];
inline bool Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::has_conforming_pkts() const {
  return this != internal_default_instance() && conforming_pkts_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::conforming_pkts() const {
  const ::ywrapper::UintValue* p = conforming_pkts_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State.conforming_pkts)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::release_conforming_pkts() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State.conforming_pkts)
  
  ::ywrapper::UintValue* temp = conforming_pkts_;
  conforming_pkts_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::mutable_conforming_pkts() {
  
  if (conforming_pkts_ == NULL) {
    conforming_pkts_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State.conforming_pkts)
  return conforming_pkts_;
}
inline void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::set_allocated_conforming_pkts(::ywrapper::UintValue* conforming_pkts) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(conforming_pkts_);
  }
  if (conforming_pkts) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      conforming_pkts = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, conforming_pkts, submessage_arena);
    }
    
  } else {
    
  }
  conforming_pkts_ = conforming_pkts;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State.conforming_pkts)
}

// .ywrapper.UintValue exceeding_octets = 22590706 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/exceeding-octets"];
inline bool Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::has_exceeding_octets() const {
  return this != internal_default_instance() && exceeding_octets_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::exceeding_octets() const {
  const ::ywrapper::UintValue* p = exceeding_octets_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State.exceeding_octets)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::release_exceeding_octets() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State.exceeding_octets)
  
  ::ywrapper::UintValue* temp = exceeding_octets_;
  exceeding_octets_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::mutable_exceeding_octets() {
  
  if (exceeding_octets_ == NULL) {
    exceeding_octets_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State.exceeding_octets)
  return exceeding_octets_;
}
inline void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::set_allocated_exceeding_octets(::ywrapper::UintValue* exceeding_octets) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(exceeding_octets_);
  }
  if (exceeding_octets) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      exceeding_octets = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exceeding_octets, submessage_arena);
    }
    
  } else {
    
  }
  exceeding_octets_ = exceeding_octets;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State.exceeding_octets)
}

// .ywrapper.UintValue exceeding_pkts = 80265874 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/exceeding-pkts"];
inline bool Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::has_exceeding_pkts() const {
  return this != internal_default_instance() && exceeding_pkts_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::exceeding_pkts() const {
  const ::ywrapper::UintValue* p = exceeding_pkts_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State.exceeding_pkts)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::release_exceeding_pkts() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State.exceeding_pkts)
  
  ::ywrapper::UintValue* temp = exceeding_pkts_;
  exceeding_pkts_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::mutable_exceeding_pkts() {
  
  if (exceeding_pkts_ == NULL) {
    exceeding_pkts_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State.exceeding_pkts)
  return exceeding_pkts_;
}
inline void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::set_allocated_exceeding_pkts(::ywrapper::UintValue* exceeding_pkts) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(exceeding_pkts_);
  }
  if (exceeding_pkts) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      exceeding_pkts = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exceeding_pkts, submessage_arena);
    }
    
  } else {
    
  }
  exceeding_pkts_ = exceeding_pkts;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State.exceeding_pkts)
}

// .ywrapper.UintValue sequence = 466083128 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/sequence"];
inline bool Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::has_sequence() const {
  return this != internal_default_instance() && sequence_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::sequence() const {
  const ::ywrapper::UintValue* p = sequence_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State.sequence)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::release_sequence() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State.sequence)
  
  ::ywrapper::UintValue* temp = sequence_;
  sequence_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::mutable_sequence() {
  
  if (sequence_ == NULL) {
    sequence_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State.sequence)
  return sequence_;
}
inline void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::set_allocated_sequence(::ywrapper::UintValue* sequence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(sequence_);
  }
  if (sequence) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sequence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sequence, submessage_arena);
    }
    
  } else {
    
  }
  sequence_ = sequence;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State.sequence)
}

// .ywrapper.UintValue violating_octets = 419767763 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/violating-octets"];
inline bool Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::has_violating_octets() const {
  return this != internal_default_instance() && violating_octets_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::violating_octets() const {
  const ::ywrapper::UintValue* p = violating_octets_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State.violating_octets)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::release_violating_octets() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State.violating_octets)
  
  ::ywrapper::UintValue* temp = violating_octets_;
  violating_octets_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::mutable_violating_octets() {
  
  if (violating_octets_ == NULL) {
    violating_octets_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State.violating_octets)
  return violating_octets_;
}
inline void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::set_allocated_violating_octets(::ywrapper::UintValue* violating_octets) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(violating_octets_);
  }
  if (violating_octets) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      violating_octets = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, violating_octets, submessage_arena);
    }
    
  } else {
    
  }
  violating_octets_ = violating_octets;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State.violating_octets)
}

// .ywrapper.UintValue violating_pkts = 174860491 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state/violating-pkts"];
inline bool Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::has_violating_pkts() const {
  return this != internal_default_instance() && violating_pkts_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::violating_pkts() const {
  const ::ywrapper::UintValue* p = violating_pkts_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State.violating_pkts)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::release_violating_pkts() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State.violating_pkts)
  
  ::ywrapper::UintValue* temp = violating_pkts_;
  violating_pkts_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::mutable_violating_pkts() {
  
  if (violating_pkts_ == NULL) {
    violating_pkts_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State.violating_pkts)
  return violating_pkts_;
}
inline void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State::set_allocated_violating_pkts(::ywrapper::UintValue* violating_pkts) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(violating_pkts_);
  }
  if (violating_pkts) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      violating_pkts = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, violating_pkts, submessage_arena);
    }
    
  } else {
    
  }
  violating_pkts_ = violating_pkts;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State.violating_pkts)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.State state = 395252664 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/state"];
inline bool Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State& Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler::state() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State* Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.state)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State* Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.state)
  return state_;
}
inline void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler::set_allocated_state(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler.state)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey

// uint64 sequence = 1 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler/sequence"];
inline void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey::clear_sequence() {
  sequence_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey::sequence() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.SchedulerKey.sequence)
  return sequence_;
}
inline void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey::set_sequence(::google::protobuf::uint64 value) {
  
  sequence_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.SchedulerKey.sequence)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.Scheduler scheduler = 2;
inline bool Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey::has_scheduler() const {
  return this != internal_default_instance() && scheduler_ != NULL;
}
inline void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey::clear_scheduler() {
  if (GetArenaNoVirtual() == NULL && scheduler_ != NULL) {
    delete scheduler_;
  }
  scheduler_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler& Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey::scheduler() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler* p = scheduler_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.SchedulerKey.scheduler)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler* Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey::release_scheduler() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.SchedulerKey.scheduler)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler* temp = scheduler_;
  scheduler_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler* Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey::mutable_scheduler() {
  
  if (scheduler_ == NULL) {
    scheduler_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.SchedulerKey.scheduler)
  return scheduler_;
}
inline void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey::set_allocated_scheduler(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_Scheduler* scheduler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scheduler_;
  }
  if (scheduler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scheduler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scheduler, submessage_arena);
    }
    
  } else {
    
  }
  scheduler_ = scheduler;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.SchedulerKey.scheduler)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers

// repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.SchedulerKey scheduler = 306639558 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler"];
inline int Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers::scheduler_size() const {
  return scheduler_.size();
}
inline void Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers::clear_scheduler() {
  scheduler_.Clear();
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey& Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers::scheduler(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.scheduler)
  return scheduler_.Get(index);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey* Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers::mutable_scheduler(int index) {
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.scheduler)
  return scheduler_.Mutable(index);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey* Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers::add_scheduler() {
  // @@protoc_insertion_point(field_add:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.scheduler)
  return scheduler_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey >*
Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers::mutable_scheduler() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.scheduler)
  return &scheduler_;
}
inline const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_SchedulerKey >&
Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers::scheduler() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers.scheduler)
  return scheduler_;
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Input_SchedulerPolicy_State

// .ywrapper.StringValue name = 120647037 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/state/name"];
inline bool Qos_Interfaces_Interface_Input_SchedulerPolicy_State::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Interfaces_Interface_Input_SchedulerPolicy_State::name() const {
  const ::ywrapper::StringValue* p = name_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.State.name)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Input_SchedulerPolicy_State::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.State.name)
  
  ::ywrapper::StringValue* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Input_SchedulerPolicy_State::mutable_name() {
  
  if (name_ == NULL) {
    name_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.State.name)
  return name_;
}
inline void Qos_Interfaces_Interface_Input_SchedulerPolicy_State::set_allocated_name(::ywrapper::StringValue* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.State.name)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Input_SchedulerPolicy

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Config config = 506789456 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/config"];
inline bool Qos_Interfaces_Interface_Input_SchedulerPolicy::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Qos_Interfaces_Interface_Input_SchedulerPolicy::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Config& Qos_Interfaces_Interface_Input_SchedulerPolicy::config() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Config*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_SchedulerPolicy_Config_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Config* Qos_Interfaces_Interface_Input_SchedulerPolicy::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.config)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Config* Qos_Interfaces_Interface_Input_SchedulerPolicy::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.config)
  return config_;
}
inline void Qos_Interfaces_Interface_Input_SchedulerPolicy::set_allocated_config(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.config)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.Schedulers schedulers = 242022128 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/schedulers"];
inline bool Qos_Interfaces_Interface_Input_SchedulerPolicy::has_schedulers() const {
  return this != internal_default_instance() && schedulers_ != NULL;
}
inline void Qos_Interfaces_Interface_Input_SchedulerPolicy::clear_schedulers() {
  if (GetArenaNoVirtual() == NULL && schedulers_ != NULL) {
    delete schedulers_;
  }
  schedulers_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers& Qos_Interfaces_Interface_Input_SchedulerPolicy::schedulers() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers* p = schedulers_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.schedulers)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers* Qos_Interfaces_Interface_Input_SchedulerPolicy::release_schedulers() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.schedulers)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers* temp = schedulers_;
  schedulers_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers* Qos_Interfaces_Interface_Input_SchedulerPolicy::mutable_schedulers() {
  
  if (schedulers_ == NULL) {
    schedulers_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.schedulers)
  return schedulers_;
}
inline void Qos_Interfaces_Interface_Input_SchedulerPolicy::set_allocated_schedulers(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_Schedulers* schedulers) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete schedulers_;
  }
  if (schedulers) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      schedulers = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, schedulers, submessage_arena);
    }
    
  } else {
    
  }
  schedulers_ = schedulers;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.schedulers)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.State state = 403641417 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy/state"];
inline bool Qos_Interfaces_Interface_Input_SchedulerPolicy::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_Interfaces_Interface_Input_SchedulerPolicy::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_State& Qos_Interfaces_Interface_Input_SchedulerPolicy::state() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_State*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_SchedulerPolicy_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_State* Qos_Interfaces_Interface_Input_SchedulerPolicy::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.state)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_State* Qos_Interfaces_Interface_Input_SchedulerPolicy::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.state)
  return state_;
}
inline void Qos_Interfaces_Interface_Input_SchedulerPolicy::set_allocated_state(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy.state)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Input_State

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config

// .ywrapper.StringValue name = 76520861 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/config/name"];
inline bool Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config::name() const {
  const ::ywrapper::StringValue* p = name_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Config.name)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Config.name)
  
  ::ywrapper::StringValue* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config::mutable_name() {
  
  if (name_ == NULL) {
    name_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Config.name)
  return name_;
}
inline void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config::set_allocated_name(::ywrapper::StringValue* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Config.name)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config

// .ywrapper.StringValue name = 410648534 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/config/name"];
inline bool Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config::name() const {
  const ::ywrapper::StringValue* p = name_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.Config.name)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.Config.name)
  
  ::ywrapper::StringValue* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config::mutable_name() {
  
  if (name_ == NULL) {
    name_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.Config.name)
  return name_;
}
inline void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config::set_allocated_name(::ywrapper::StringValue* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.Config.name)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State

// .ywrapper.UintValue avg_queue_len = 370597120 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/avg-queue-len"];
inline bool Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::has_avg_queue_len() const {
  return this != internal_default_instance() && avg_queue_len_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::avg_queue_len() const {
  const ::ywrapper::UintValue* p = avg_queue_len_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State.avg_queue_len)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::release_avg_queue_len() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State.avg_queue_len)
  
  ::ywrapper::UintValue* temp = avg_queue_len_;
  avg_queue_len_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::mutable_avg_queue_len() {
  
  if (avg_queue_len_ == NULL) {
    avg_queue_len_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State.avg_queue_len)
  return avg_queue_len_;
}
inline void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::set_allocated_avg_queue_len(::ywrapper::UintValue* avg_queue_len) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(avg_queue_len_);
  }
  if (avg_queue_len) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      avg_queue_len = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, avg_queue_len, submessage_arena);
    }
    
  } else {
    
  }
  avg_queue_len_ = avg_queue_len;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State.avg_queue_len)
}

// .ywrapper.UintValue dropped_pkts = 300610831 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/dropped-pkts"];
inline bool Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::has_dropped_pkts() const {
  return this != internal_default_instance() && dropped_pkts_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::dropped_pkts() const {
  const ::ywrapper::UintValue* p = dropped_pkts_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State.dropped_pkts)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::release_dropped_pkts() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State.dropped_pkts)
  
  ::ywrapper::UintValue* temp = dropped_pkts_;
  dropped_pkts_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::mutable_dropped_pkts() {
  
  if (dropped_pkts_ == NULL) {
    dropped_pkts_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State.dropped_pkts)
  return dropped_pkts_;
}
inline void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::set_allocated_dropped_pkts(::ywrapper::UintValue* dropped_pkts) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dropped_pkts_);
  }
  if (dropped_pkts) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dropped_pkts = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dropped_pkts, submessage_arena);
    }
    
  } else {
    
  }
  dropped_pkts_ = dropped_pkts;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State.dropped_pkts)
}

// .ywrapper.UintValue max_queue_len = 489510182 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/max-queue-len"];
inline bool Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::has_max_queue_len() const {
  return this != internal_default_instance() && max_queue_len_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::max_queue_len() const {
  const ::ywrapper::UintValue* p = max_queue_len_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State.max_queue_len)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::release_max_queue_len() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State.max_queue_len)
  
  ::ywrapper::UintValue* temp = max_queue_len_;
  max_queue_len_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::mutable_max_queue_len() {
  
  if (max_queue_len_ == NULL) {
    max_queue_len_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State.max_queue_len)
  return max_queue_len_;
}
inline void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::set_allocated_max_queue_len(::ywrapper::UintValue* max_queue_len) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(max_queue_len_);
  }
  if (max_queue_len) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      max_queue_len = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, max_queue_len, submessage_arena);
    }
    
  } else {
    
  }
  max_queue_len_ = max_queue_len;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State.max_queue_len)
}

// .ywrapper.StringValue name = 379083081 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/name"];
inline bool Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::name() const {
  const ::ywrapper::StringValue* p = name_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State.name)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State.name)
  
  ::ywrapper::StringValue* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::mutable_name() {
  
  if (name_ == NULL) {
    name_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State.name)
  return name_;
}
inline void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::set_allocated_name(::ywrapper::StringValue* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State.name)
}

// .ywrapper.UintValue transmit_octets = 19609109 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/transmit-octets"];
inline bool Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::has_transmit_octets() const {
  return this != internal_default_instance() && transmit_octets_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::transmit_octets() const {
  const ::ywrapper::UintValue* p = transmit_octets_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State.transmit_octets)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::release_transmit_octets() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State.transmit_octets)
  
  ::ywrapper::UintValue* temp = transmit_octets_;
  transmit_octets_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::mutable_transmit_octets() {
  
  if (transmit_octets_ == NULL) {
    transmit_octets_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State.transmit_octets)
  return transmit_octets_;
}
inline void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::set_allocated_transmit_octets(::ywrapper::UintValue* transmit_octets) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(transmit_octets_);
  }
  if (transmit_octets) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transmit_octets = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transmit_octets, submessage_arena);
    }
    
  } else {
    
  }
  transmit_octets_ = transmit_octets;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State.transmit_octets)
}

// .ywrapper.UintValue transmit_pkts = 265927841 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/transmit-pkts"];
inline bool Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::has_transmit_pkts() const {
  return this != internal_default_instance() && transmit_pkts_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::transmit_pkts() const {
  const ::ywrapper::UintValue* p = transmit_pkts_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State.transmit_pkts)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::release_transmit_pkts() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State.transmit_pkts)
  
  ::ywrapper::UintValue* temp = transmit_pkts_;
  transmit_pkts_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::mutable_transmit_pkts() {
  
  if (transmit_pkts_ == NULL) {
    transmit_pkts_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State.transmit_pkts)
  return transmit_pkts_;
}
inline void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State::set_allocated_transmit_pkts(::ywrapper::UintValue* transmit_pkts) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(transmit_pkts_);
  }
  if (transmit_pkts) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transmit_pkts = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transmit_pkts, submessage_arena);
    }
    
  } else {
    
  }
  transmit_pkts_ = transmit_pkts;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State.transmit_pkts)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.Config config = 422405812 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/config"];
inline bool Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config& Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue::config() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.config)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.config)
  return config_;
}
inline void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue::set_allocated_config(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.config)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.State state = 208271053 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state"];
inline bool Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State& Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue::state() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.state)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.state)
  return state_;
}
inline void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue::set_allocated_state(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue.state)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey

// string name = 1 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/name"];
inline void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::name() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey.name)
  return name_.GetNoArena();
}
inline void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey.name)
}
#if LANG_CXX11
inline void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey.name)
}
#endif
inline void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey.name)
}
inline void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey.name)
}
inline ::std::string* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey.name)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.Queue queue = 2;
inline bool Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::has_queue() const {
  return this != internal_default_instance() && queue_ != NULL;
}
inline void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::clear_queue() {
  if (GetArenaNoVirtual() == NULL && queue_ != NULL) {
    delete queue_;
  }
  queue_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue& Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::queue() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue* p = queue_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey.queue)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::release_queue() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey.queue)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue* temp = queue_;
  queue_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::mutable_queue() {
  
  if (queue_ == NULL) {
    queue_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey.queue)
  return queue_;
}
inline void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey::set_allocated_queue(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_Queue* queue) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete queue_;
  }
  if (queue) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      queue = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, queue, submessage_arena);
    }
    
  } else {
    
  }
  queue_ = queue;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey.queue)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues

// repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.QueueKey queue = 80000787 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue"];
inline int Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues::queue_size() const {
  return queue_.size();
}
inline void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues::clear_queue() {
  queue_.Clear();
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey& Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues::queue(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.queue)
  return queue_.Get(index);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues::mutable_queue(int index) {
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.queue)
  return queue_.Mutable(index);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues::add_queue() {
  // @@protoc_insertion_point(field_add:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.queue)
  return queue_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey >*
Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues::mutable_queue() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.queue)
  return &queue_;
}
inline const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_QueueKey >&
Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues::queue() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues.queue)
  return queue_;
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State

// .ywrapper.StringValue name = 75480420 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/state/name"];
inline bool Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State::name() const {
  const ::ywrapper::StringValue* p = name_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.State.name)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.State.name)
  
  ::ywrapper::StringValue* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State::mutable_name() {
  
  if (name_ == NULL) {
    name_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.State.name)
  return name_;
}
inline void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State::set_allocated_name(::ywrapper::StringValue* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.State.name)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Config config = 78813417 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/config"];
inline bool Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config& Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::config() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.config)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.config)
  return config_;
}
inline void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::set_allocated_config(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.config)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.Queues queues = 40799367 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues"];
inline bool Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::has_queues() const {
  return this != internal_default_instance() && queues_ != NULL;
}
inline void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::clear_queues() {
  if (GetArenaNoVirtual() == NULL && queues_ != NULL) {
    delete queues_;
  }
  queues_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues& Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::queues() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues* p = queues_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.queues)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::release_queues() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.queues)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues* temp = queues_;
  queues_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::mutable_queues() {
  
  if (queues_ == NULL) {
    queues_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.queues)
  return queues_;
}
inline void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::set_allocated_queues(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_Queues* queues) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete queues_;
  }
  if (queues) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      queues = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, queues, submessage_arena);
    }
    
  } else {
    
  }
  queues_ = queues;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.queues)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.State state = 323748030 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/state"];
inline bool Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State& Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::state() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.state)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.state)
  return state_;
}
inline void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface::set_allocated_state(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface.state)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey

// string name = 1 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface/name"];
inline void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::name() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey.name)
  return name_.GetNoArena();
}
inline void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey.name)
}
#if LANG_CXX11
inline void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey.name)
}
#endif
inline void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey.name)
}
inline void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey.name)
}
inline ::std::string* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey.name)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterface voq_interface = 2;
inline bool Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::has_voq_interface() const {
  return this != internal_default_instance() && voq_interface_ != NULL;
}
inline void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::clear_voq_interface() {
  if (GetArenaNoVirtual() == NULL && voq_interface_ != NULL) {
    delete voq_interface_;
  }
  voq_interface_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface& Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::voq_interface() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface* p = voq_interface_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey.voq_interface)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::release_voq_interface() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey.voq_interface)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface* temp = voq_interface_;
  voq_interface_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface* Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::mutable_voq_interface() {
  
  if (voq_interface_ == NULL) {
    voq_interface_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey.voq_interface)
  return voq_interface_;
}
inline void Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey::set_allocated_voq_interface(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterface* voq_interface) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete voq_interface_;
  }
  if (voq_interface) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      voq_interface = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, voq_interface, submessage_arena);
    }
    
  } else {
    
  }
  voq_interface_ = voq_interface;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey.voq_interface)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Input_VirtualOutputQueues

// repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.VoqInterfaceKey voq_interface = 134149572 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues/voq-interface"];
inline int Qos_Interfaces_Interface_Input_VirtualOutputQueues::voq_interface_size() const {
  return voq_interface_.size();
}
inline void Qos_Interfaces_Interface_Input_VirtualOutputQueues::clear_voq_interface() {
  voq_interface_.Clear();
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey& Qos_Interfaces_Interface_Input_VirtualOutputQueues::voq_interface(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.voq_interface)
  return voq_interface_.Get(index);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey* Qos_Interfaces_Interface_Input_VirtualOutputQueues::mutable_voq_interface(int index) {
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.voq_interface)
  return voq_interface_.Mutable(index);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey* Qos_Interfaces_Interface_Input_VirtualOutputQueues::add_voq_interface() {
  // @@protoc_insertion_point(field_add:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.voq_interface)
  return voq_interface_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey >*
Qos_Interfaces_Interface_Input_VirtualOutputQueues::mutable_voq_interface() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.voq_interface)
  return &voq_interface_;
}
inline const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues_VoqInterfaceKey >&
Qos_Interfaces_Interface_Input_VirtualOutputQueues::voq_interface() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues.voq_interface)
  return voq_interface_;
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Input

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Classifers classifers = 158553614 [(.yext.schemapath) = "/qos/interfaces/interface/input/classifers"];
inline bool Qos_Interfaces_Interface_Input::has_classifers() const {
  return this != internal_default_instance() && classifers_ != NULL;
}
inline void Qos_Interfaces_Interface_Input::clear_classifers() {
  if (GetArenaNoVirtual() == NULL && classifers_ != NULL) {
    delete classifers_;
  }
  classifers_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers& Qos_Interfaces_Interface_Input::classifers() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers* p = classifers_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.classifers)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Classifers_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers* Qos_Interfaces_Interface_Input::release_classifers() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.classifers)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers* temp = classifers_;
  classifers_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers* Qos_Interfaces_Interface_Input::mutable_classifers() {
  
  if (classifers_ == NULL) {
    classifers_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.classifers)
  return classifers_;
}
inline void Qos_Interfaces_Interface_Input::set_allocated_classifers(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers* classifers) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete classifers_;
  }
  if (classifers) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      classifers = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, classifers, submessage_arena);
    }
    
  } else {
    
  }
  classifers_ = classifers;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.classifers)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Config config = 195844559 [(.yext.schemapath) = "/qos/interfaces/interface/input/config"];
inline bool Qos_Interfaces_Interface_Input::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Qos_Interfaces_Interface_Input::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Config& Qos_Interfaces_Interface_Input::config() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Config*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Config_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Config* Qos_Interfaces_Interface_Input::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.config)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Config* Qos_Interfaces_Interface_Input::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.config)
  return config_;
}
inline void Qos_Interfaces_Interface_Input::set_allocated_config(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.config)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.Queues queues = 491614229 [(.yext.schemapath) = "/qos/interfaces/interface/input/queues"];
inline bool Qos_Interfaces_Interface_Input::has_queues() const {
  return this != internal_default_instance() && queues_ != NULL;
}
inline void Qos_Interfaces_Interface_Input::clear_queues() {
  if (GetArenaNoVirtual() == NULL && queues_ != NULL) {
    delete queues_;
  }
  queues_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues& Qos_Interfaces_Interface_Input::queues() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues* p = queues_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.queues)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_Queues_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues* Qos_Interfaces_Interface_Input::release_queues() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.queues)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues* temp = queues_;
  queues_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues* Qos_Interfaces_Interface_Input::mutable_queues() {
  
  if (queues_ == NULL) {
    queues_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.queues)
  return queues_;
}
inline void Qos_Interfaces_Interface_Input::set_allocated_queues(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Queues* queues) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete queues_;
  }
  if (queues) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      queues = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, queues, submessage_arena);
    }
    
  } else {
    
  }
  queues_ = queues;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.queues)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.SchedulerPolicy scheduler_policy = 391585903 [(.yext.schemapath) = "/qos/interfaces/interface/input/scheduler-policy"];
inline bool Qos_Interfaces_Interface_Input::has_scheduler_policy() const {
  return this != internal_default_instance() && scheduler_policy_ != NULL;
}
inline void Qos_Interfaces_Interface_Input::clear_scheduler_policy() {
  if (GetArenaNoVirtual() == NULL && scheduler_policy_ != NULL) {
    delete scheduler_policy_;
  }
  scheduler_policy_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy& Qos_Interfaces_Interface_Input::scheduler_policy() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy* p = scheduler_policy_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.scheduler_policy)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_SchedulerPolicy_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy* Qos_Interfaces_Interface_Input::release_scheduler_policy() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.scheduler_policy)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy* temp = scheduler_policy_;
  scheduler_policy_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy* Qos_Interfaces_Interface_Input::mutable_scheduler_policy() {
  
  if (scheduler_policy_ == NULL) {
    scheduler_policy_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.scheduler_policy)
  return scheduler_policy_;
}
inline void Qos_Interfaces_Interface_Input::set_allocated_scheduler_policy(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_SchedulerPolicy* scheduler_policy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scheduler_policy_;
  }
  if (scheduler_policy) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scheduler_policy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scheduler_policy, submessage_arena);
    }
    
  } else {
    
  }
  scheduler_policy_ = scheduler_policy;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.scheduler_policy)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.State state = 273823424 [(.yext.schemapath) = "/qos/interfaces/interface/input/state"];
inline bool Qos_Interfaces_Interface_Input::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_Interfaces_Interface_Input::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_State& Qos_Interfaces_Interface_Input::state() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_State*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_State* Qos_Interfaces_Interface_Input::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.state)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_State* Qos_Interfaces_Interface_Input::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.state)
  return state_;
}
inline void Qos_Interfaces_Interface_Input::set_allocated_state(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.state)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.VirtualOutputQueues virtual_output_queues = 370520089 [(.yext.schemapath) = "/qos/interfaces/interface/input/virtual-output-queues"];
inline bool Qos_Interfaces_Interface_Input::has_virtual_output_queues() const {
  return this != internal_default_instance() && virtual_output_queues_ != NULL;
}
inline void Qos_Interfaces_Interface_Input::clear_virtual_output_queues() {
  if (GetArenaNoVirtual() == NULL && virtual_output_queues_ != NULL) {
    delete virtual_output_queues_;
  }
  virtual_output_queues_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues& Qos_Interfaces_Interface_Input::virtual_output_queues() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues* p = virtual_output_queues_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.virtual_output_queues)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_VirtualOutputQueues_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues* Qos_Interfaces_Interface_Input::release_virtual_output_queues() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.virtual_output_queues)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues* temp = virtual_output_queues_;
  virtual_output_queues_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues* Qos_Interfaces_Interface_Input::mutable_virtual_output_queues() {
  
  if (virtual_output_queues_ == NULL) {
    virtual_output_queues_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.virtual_output_queues)
  return virtual_output_queues_;
}
inline void Qos_Interfaces_Interface_Input::set_allocated_virtual_output_queues(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_VirtualOutputQueues* virtual_output_queues) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete virtual_output_queues_;
  }
  if (virtual_output_queues) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      virtual_output_queues = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, virtual_output_queues, submessage_arena);
    }
    
  } else {
    
  }
  virtual_output_queues_ = virtual_output_queues;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Input.virtual_output_queues)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_InterfaceRef_Config

// .ywrapper.StringValue interface = 31011128 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref/config/interface"];
inline bool Qos_Interfaces_Interface_InterfaceRef_Config::has_interface() const {
  return this != internal_default_instance() && interface_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Interfaces_Interface_InterfaceRef_Config::interface() const {
  const ::ywrapper::StringValue* p = interface_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.Config.interface)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_InterfaceRef_Config::release_interface() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.Config.interface)
  
  ::ywrapper::StringValue* temp = interface_;
  interface_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_InterfaceRef_Config::mutable_interface() {
  
  if (interface_ == NULL) {
    interface_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.Config.interface)
  return interface_;
}
inline void Qos_Interfaces_Interface_InterfaceRef_Config::set_allocated_interface(::ywrapper::StringValue* interface) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(interface_);
  }
  if (interface) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      interface = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, interface, submessage_arena);
    }
    
  } else {
    
  }
  interface_ = interface;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.Config.interface)
}

// .ywrapper.UintValue subinterface = 407353336 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref/config/subinterface"];
inline bool Qos_Interfaces_Interface_InterfaceRef_Config::has_subinterface() const {
  return this != internal_default_instance() && subinterface_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Interfaces_Interface_InterfaceRef_Config::subinterface() const {
  const ::ywrapper::UintValue* p = subinterface_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.Config.subinterface)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_InterfaceRef_Config::release_subinterface() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.Config.subinterface)
  
  ::ywrapper::UintValue* temp = subinterface_;
  subinterface_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_InterfaceRef_Config::mutable_subinterface() {
  
  if (subinterface_ == NULL) {
    subinterface_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.Config.subinterface)
  return subinterface_;
}
inline void Qos_Interfaces_Interface_InterfaceRef_Config::set_allocated_subinterface(::ywrapper::UintValue* subinterface) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(subinterface_);
  }
  if (subinterface) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      subinterface = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, subinterface, submessage_arena);
    }
    
  } else {
    
  }
  subinterface_ = subinterface;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.Config.subinterface)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_InterfaceRef_State

// .ywrapper.StringValue interface = 75395573 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref/state/interface"];
inline bool Qos_Interfaces_Interface_InterfaceRef_State::has_interface() const {
  return this != internal_default_instance() && interface_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Interfaces_Interface_InterfaceRef_State::interface() const {
  const ::ywrapper::StringValue* p = interface_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.State.interface)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_InterfaceRef_State::release_interface() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.State.interface)
  
  ::ywrapper::StringValue* temp = interface_;
  interface_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_InterfaceRef_State::mutable_interface() {
  
  if (interface_ == NULL) {
    interface_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.State.interface)
  return interface_;
}
inline void Qos_Interfaces_Interface_InterfaceRef_State::set_allocated_interface(::ywrapper::StringValue* interface) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(interface_);
  }
  if (interface) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      interface = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, interface, submessage_arena);
    }
    
  } else {
    
  }
  interface_ = interface;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.State.interface)
}

// .ywrapper.UintValue subinterface = 380934871 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref/state/subinterface"];
inline bool Qos_Interfaces_Interface_InterfaceRef_State::has_subinterface() const {
  return this != internal_default_instance() && subinterface_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Interfaces_Interface_InterfaceRef_State::subinterface() const {
  const ::ywrapper::UintValue* p = subinterface_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.State.subinterface)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_InterfaceRef_State::release_subinterface() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.State.subinterface)
  
  ::ywrapper::UintValue* temp = subinterface_;
  subinterface_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_InterfaceRef_State::mutable_subinterface() {
  
  if (subinterface_ == NULL) {
    subinterface_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.State.subinterface)
  return subinterface_;
}
inline void Qos_Interfaces_Interface_InterfaceRef_State::set_allocated_subinterface(::ywrapper::UintValue* subinterface) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(subinterface_);
  }
  if (subinterface) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      subinterface = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, subinterface, submessage_arena);
    }
    
  } else {
    
  }
  subinterface_ = subinterface;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.State.subinterface)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_InterfaceRef

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.Config config = 115373008 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref/config"];
inline bool Qos_Interfaces_Interface_InterfaceRef::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Qos_Interfaces_Interface_InterfaceRef::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_Config& Qos_Interfaces_Interface_InterfaceRef::config() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_Config*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_InterfaceRef_Config_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_Config* Qos_Interfaces_Interface_InterfaceRef::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.config)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_Config* Qos_Interfaces_Interface_InterfaceRef::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.config)
  return config_;
}
inline void Qos_Interfaces_Interface_InterfaceRef::set_allocated_config(::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.config)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.State state = 487930057 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref/state"];
inline bool Qos_Interfaces_Interface_InterfaceRef::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_Interfaces_Interface_InterfaceRef::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_State& Qos_Interfaces_Interface_InterfaceRef::state() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_State*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_InterfaceRef_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_State* Qos_Interfaces_Interface_InterfaceRef::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.state)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_State* Qos_Interfaces_Interface_InterfaceRef::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.state)
  return state_;
}
inline void Qos_Interfaces_Interface_InterfaceRef::set_allocated_state(::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef.state)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Output_Classifers_Classifier_Config

// .ywrapper.StringValue name = 273984944 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/config/name"];
inline bool Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::name() const {
  const ::ywrapper::StringValue* p = name_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Config.name)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Config.name)
  
  ::ywrapper::StringValue* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::mutable_name() {
  
  if (name_ == NULL) {
    name_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Config.name)
  return name_;
}
inline void Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::set_allocated_name(::ywrapper::StringValue* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Config.name)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Config.Type type = 383113377 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/config/type"];
inline void Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::clear_type() {
  type_ = 0;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::type() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Config.type)
  return static_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type >(type_);
}
inline void Qos_Interfaces_Interface_Output_Classifers_Classifier_Config::set_type(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Config.type)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Output_Classifers_Classifier_State

// .ywrapper.StringValue name = 43829575 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/state/name"];
inline bool Qos_Interfaces_Interface_Output_Classifers_Classifier_State::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Interfaces_Interface_Output_Classifers_Classifier_State::name() const {
  const ::ywrapper::StringValue* p = name_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.State.name)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Output_Classifers_Classifier_State::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.State.name)
  
  ::ywrapper::StringValue* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Output_Classifers_Classifier_State::mutable_name() {
  
  if (name_ == NULL) {
    name_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.State.name)
  return name_;
}
inline void Qos_Interfaces_Interface_Output_Classifers_Classifier_State::set_allocated_name(::ywrapper::StringValue* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.State.name)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.State.Type type = 458141842 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/state/type"];
inline void Qos_Interfaces_Interface_Output_Classifers_Classifier_State::clear_type() {
  type_ = 0;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type Qos_Interfaces_Interface_Output_Classifers_Classifier_State::type() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.State.type)
  return static_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type >(type_);
}
inline void Qos_Interfaces_Interface_Output_Classifers_Classifier_State::set_type(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.State.type)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config

// .ywrapper.StringValue id = 421370613 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/config/id"];
inline bool Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config::id() const {
  const ::ywrapper::StringValue* p = id_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.Config.id)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config::release_id() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.Config.id)
  
  ::ywrapper::StringValue* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.Config.id)
  return id_;
}
inline void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config::set_allocated_id(::ywrapper::StringValue* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.Config.id)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State

// .ywrapper.StringValue id = 294625236 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/state/id"];
inline bool Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::id() const {
  const ::ywrapper::StringValue* p = id_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.State.id)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::release_id() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.State.id)
  
  ::ywrapper::StringValue* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.State.id)
  return id_;
}
inline void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::set_allocated_id(::ywrapper::StringValue* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.State.id)
}

// .ywrapper.UintValue matched_octets = 525483634 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/state/matched-octets"];
inline bool Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::has_matched_octets() const {
  return this != internal_default_instance() && matched_octets_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::matched_octets() const {
  const ::ywrapper::UintValue* p = matched_octets_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.State.matched_octets)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::release_matched_octets() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.State.matched_octets)
  
  ::ywrapper::UintValue* temp = matched_octets_;
  matched_octets_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::mutable_matched_octets() {
  
  if (matched_octets_ == NULL) {
    matched_octets_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.State.matched_octets)
  return matched_octets_;
}
inline void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::set_allocated_matched_octets(::ywrapper::UintValue* matched_octets) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(matched_octets_);
  }
  if (matched_octets) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      matched_octets = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, matched_octets, submessage_arena);
    }
    
  } else {
    
  }
  matched_octets_ = matched_octets;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.State.matched_octets)
}

// .ywrapper.UintValue matched_packets = 507671601 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/state/matched-packets"];
inline bool Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::has_matched_packets() const {
  return this != internal_default_instance() && matched_packets_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::matched_packets() const {
  const ::ywrapper::UintValue* p = matched_packets_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.State.matched_packets)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::release_matched_packets() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.State.matched_packets)
  
  ::ywrapper::UintValue* temp = matched_packets_;
  matched_packets_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::mutable_matched_packets() {
  
  if (matched_packets_ == NULL) {
    matched_packets_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.State.matched_packets)
  return matched_packets_;
}
inline void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State::set_allocated_matched_packets(::ywrapper::UintValue* matched_packets) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(matched_packets_);
  }
  if (matched_packets) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      matched_packets = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, matched_packets, submessage_arena);
    }
    
  } else {
    
  }
  matched_packets_ = matched_packets;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.State.matched_packets)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.Config config = 86353283 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/config"];
inline bool Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config& Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term::config() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config* Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.config)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config* Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.config)
  return config_;
}
inline void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term::set_allocated_config(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.config)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.State state = 254473188 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/state"];
inline bool Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State& Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term::state() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State* Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.state)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State* Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.state)
  return state_;
}
inline void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term::set_allocated_state(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term.state)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey

// string id = 1 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term/id"];
inline void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::id() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey.id)
  return id_.GetNoArena();
}
inline void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey.id)
}
#if LANG_CXX11
inline void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey.id)
}
#endif
inline void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey.id)
}
inline void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey.id)
}
inline ::std::string* Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::release_id() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey.id)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.Term term = 2;
inline bool Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::has_term() const {
  return this != internal_default_instance() && term_ != NULL;
}
inline void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::clear_term() {
  if (GetArenaNoVirtual() == NULL && term_ != NULL) {
    delete term_;
  }
  term_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term& Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::term() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term* p = term_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey.term)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term* Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::release_term() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey.term)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term* temp = term_;
  term_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term* Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::mutable_term() {
  
  if (term_ == NULL) {
    term_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey.term)
  return term_;
}
inline void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey::set_allocated_term(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_Term* term) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete term_;
  }
  if (term) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      term = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, term, submessage_arena);
    }
    
  } else {
    
  }
  term_ = term;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey.term)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms

// repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.TermKey term = 132412642 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms/term"];
inline int Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms::term_size() const {
  return term_.size();
}
inline void Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms::clear_term() {
  term_.Clear();
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey& Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms::term(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.term)
  return term_.Get(index);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey* Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms::mutable_term(int index) {
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.term)
  return term_.Mutable(index);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey* Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms::add_term() {
  // @@protoc_insertion_point(field_add:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.term)
  return term_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey >*
Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms::mutable_term() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.term)
  return &term_;
}
inline const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_TermKey >&
Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms::term() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms.term)
  return term_;
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Output_Classifers_Classifier

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Config config = 138687170 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/config"];
inline bool Qos_Interfaces_Interface_Output_Classifers_Classifier::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Qos_Interfaces_Interface_Output_Classifers_Classifier::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Config& Qos_Interfaces_Interface_Output_Classifers_Classifier::config() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Config*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Config* Qos_Interfaces_Interface_Output_Classifers_Classifier::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.config)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Config* Qos_Interfaces_Interface_Output_Classifers_Classifier::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.config)
  return config_;
}
inline void Qos_Interfaces_Interface_Output_Classifers_Classifier::set_allocated_config(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.config)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.State state = 103030399 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/state"];
inline bool Qos_Interfaces_Interface_Output_Classifers_Classifier::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_Interfaces_Interface_Output_Classifers_Classifier::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_State& Qos_Interfaces_Interface_Output_Classifers_Classifier::state() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_State*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_Classifier_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_State* Qos_Interfaces_Interface_Output_Classifers_Classifier::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.state)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_State* Qos_Interfaces_Interface_Output_Classifers_Classifier::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.state)
  return state_;
}
inline void Qos_Interfaces_Interface_Output_Classifers_Classifier::set_allocated_state(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.state)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.Terms terms = 528362137 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/terms"];
inline bool Qos_Interfaces_Interface_Output_Classifers_Classifier::has_terms() const {
  return this != internal_default_instance() && terms_ != NULL;
}
inline void Qos_Interfaces_Interface_Output_Classifers_Classifier::clear_terms() {
  if (GetArenaNoVirtual() == NULL && terms_ != NULL) {
    delete terms_;
  }
  terms_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms& Qos_Interfaces_Interface_Output_Classifers_Classifier::terms() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms* p = terms_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.terms)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms* Qos_Interfaces_Interface_Output_Classifers_Classifier::release_terms() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.terms)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms* temp = terms_;
  terms_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms* Qos_Interfaces_Interface_Output_Classifers_Classifier::mutable_terms() {
  
  if (terms_ == NULL) {
    terms_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.terms)
  return terms_;
}
inline void Qos_Interfaces_Interface_Output_Classifers_Classifier::set_allocated_terms(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Terms* terms) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete terms_;
  }
  if (terms) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      terms = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, terms, submessage_arena);
    }
    
  } else {
    
  }
  terms_ = terms;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier.terms)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Output_Classifers_ClassifierKey

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.ClassifierKey.Type type = 1 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier/type"];
inline void Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::clear_type() {
  type_ = 0;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::type() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.ClassifierKey.type)
  return static_cast< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type >(type_);
}
inline void Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::set_type(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.ClassifierKey.type)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.Classifier classifier = 2;
inline bool Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::has_classifier() const {
  return this != internal_default_instance() && classifier_ != NULL;
}
inline void Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::clear_classifier() {
  if (GetArenaNoVirtual() == NULL && classifier_ != NULL) {
    delete classifier_;
  }
  classifier_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier& Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::classifier() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier* p = classifier_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.ClassifierKey.classifier)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_Classifier_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier* Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::release_classifier() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.ClassifierKey.classifier)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier* temp = classifier_;
  classifier_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier* Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::mutable_classifier() {
  
  if (classifier_ == NULL) {
    classifier_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.ClassifierKey.classifier)
  return classifier_;
}
inline void Qos_Interfaces_Interface_Output_Classifers_ClassifierKey::set_allocated_classifier(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier* classifier) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete classifier_;
  }
  if (classifier) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      classifier = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, classifier, submessage_arena);
    }
    
  } else {
    
  }
  classifier_ = classifier;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.ClassifierKey.classifier)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Output_Classifers

// repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.ClassifierKey classifier = 531213741 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers/classifier"];
inline int Qos_Interfaces_Interface_Output_Classifers::classifier_size() const {
  return classifier_.size();
}
inline void Qos_Interfaces_Interface_Output_Classifers::clear_classifier() {
  classifier_.Clear();
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_ClassifierKey& Qos_Interfaces_Interface_Output_Classifers::classifier(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.classifier)
  return classifier_.Get(index);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_ClassifierKey* Qos_Interfaces_Interface_Output_Classifers::mutable_classifier(int index) {
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.classifier)
  return classifier_.Mutable(index);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_ClassifierKey* Qos_Interfaces_Interface_Output_Classifers::add_classifier() {
  // @@protoc_insertion_point(field_add:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.classifier)
  return classifier_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_ClassifierKey >*
Qos_Interfaces_Interface_Output_Classifers::mutable_classifier() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.classifier)
  return &classifier_;
}
inline const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_ClassifierKey >&
Qos_Interfaces_Interface_Output_Classifers::classifier() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers.classifier)
  return classifier_;
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Output_Config

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Output_InterfaceRef_Config

// .ywrapper.StringValue interface = 351351714 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref/config/interface"];
inline bool Qos_Interfaces_Interface_Output_InterfaceRef_Config::has_interface() const {
  return this != internal_default_instance() && interface_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Interfaces_Interface_Output_InterfaceRef_Config::interface() const {
  const ::ywrapper::StringValue* p = interface_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.Config.interface)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Output_InterfaceRef_Config::release_interface() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.Config.interface)
  
  ::ywrapper::StringValue* temp = interface_;
  interface_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Output_InterfaceRef_Config::mutable_interface() {
  
  if (interface_ == NULL) {
    interface_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.Config.interface)
  return interface_;
}
inline void Qos_Interfaces_Interface_Output_InterfaceRef_Config::set_allocated_interface(::ywrapper::StringValue* interface) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(interface_);
  }
  if (interface) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      interface = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, interface, submessage_arena);
    }
    
  } else {
    
  }
  interface_ = interface;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.Config.interface)
}

// .ywrapper.UintValue subinterface = 18610174 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref/config/subinterface"];
inline bool Qos_Interfaces_Interface_Output_InterfaceRef_Config::has_subinterface() const {
  return this != internal_default_instance() && subinterface_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Interfaces_Interface_Output_InterfaceRef_Config::subinterface() const {
  const ::ywrapper::UintValue* p = subinterface_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.Config.subinterface)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Output_InterfaceRef_Config::release_subinterface() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.Config.subinterface)
  
  ::ywrapper::UintValue* temp = subinterface_;
  subinterface_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Output_InterfaceRef_Config::mutable_subinterface() {
  
  if (subinterface_ == NULL) {
    subinterface_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.Config.subinterface)
  return subinterface_;
}
inline void Qos_Interfaces_Interface_Output_InterfaceRef_Config::set_allocated_subinterface(::ywrapper::UintValue* subinterface) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(subinterface_);
  }
  if (subinterface) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      subinterface = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, subinterface, submessage_arena);
    }
    
  } else {
    
  }
  subinterface_ = subinterface;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.Config.subinterface)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Output_InterfaceRef_State

// .ywrapper.StringValue interface = 287441027 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref/state/interface"];
inline bool Qos_Interfaces_Interface_Output_InterfaceRef_State::has_interface() const {
  return this != internal_default_instance() && interface_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Interfaces_Interface_Output_InterfaceRef_State::interface() const {
  const ::ywrapper::StringValue* p = interface_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.State.interface)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Output_InterfaceRef_State::release_interface() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.State.interface)
  
  ::ywrapper::StringValue* temp = interface_;
  interface_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Output_InterfaceRef_State::mutable_interface() {
  
  if (interface_ == NULL) {
    interface_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.State.interface)
  return interface_;
}
inline void Qos_Interfaces_Interface_Output_InterfaceRef_State::set_allocated_interface(::ywrapper::StringValue* interface) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(interface_);
  }
  if (interface) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      interface = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, interface, submessage_arena);
    }
    
  } else {
    
  }
  interface_ = interface;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.State.interface)
}

// .ywrapper.UintValue subinterface = 418676689 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref/state/subinterface"];
inline bool Qos_Interfaces_Interface_Output_InterfaceRef_State::has_subinterface() const {
  return this != internal_default_instance() && subinterface_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Interfaces_Interface_Output_InterfaceRef_State::subinterface() const {
  const ::ywrapper::UintValue* p = subinterface_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.State.subinterface)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Output_InterfaceRef_State::release_subinterface() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.State.subinterface)
  
  ::ywrapper::UintValue* temp = subinterface_;
  subinterface_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Output_InterfaceRef_State::mutable_subinterface() {
  
  if (subinterface_ == NULL) {
    subinterface_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.State.subinterface)
  return subinterface_;
}
inline void Qos_Interfaces_Interface_Output_InterfaceRef_State::set_allocated_subinterface(::ywrapper::UintValue* subinterface) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(subinterface_);
  }
  if (subinterface) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      subinterface = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, subinterface, submessage_arena);
    }
    
  } else {
    
  }
  subinterface_ = subinterface;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.State.subinterface)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Output_InterfaceRef

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.Config config = 412349494 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref/config"];
inline bool Qos_Interfaces_Interface_Output_InterfaceRef::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Qos_Interfaces_Interface_Output_InterfaceRef::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_Config& Qos_Interfaces_Interface_Output_InterfaceRef::config() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_Config*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_InterfaceRef_Config_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_Config* Qos_Interfaces_Interface_Output_InterfaceRef::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.config)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_Config* Qos_Interfaces_Interface_Output_InterfaceRef::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.config)
  return config_;
}
inline void Qos_Interfaces_Interface_Output_InterfaceRef::set_allocated_config(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.config)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.State state = 226867043 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref/state"];
inline bool Qos_Interfaces_Interface_Output_InterfaceRef::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_Interfaces_Interface_Output_InterfaceRef::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_State& Qos_Interfaces_Interface_Output_InterfaceRef::state() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_State*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_InterfaceRef_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_State* Qos_Interfaces_Interface_Output_InterfaceRef::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.state)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_State* Qos_Interfaces_Interface_Output_InterfaceRef::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.state)
  return state_;
}
inline void Qos_Interfaces_Interface_Output_InterfaceRef::set_allocated_state(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef.state)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Output_Queues_Queue_Config

// .ywrapper.StringValue name = 149002045 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/config/name"];
inline bool Qos_Interfaces_Interface_Output_Queues_Queue_Config::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Interfaces_Interface_Output_Queues_Queue_Config::name() const {
  const ::ywrapper::StringValue* p = name_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.Config.name)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Output_Queues_Queue_Config::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.Config.name)
  
  ::ywrapper::StringValue* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Output_Queues_Queue_Config::mutable_name() {
  
  if (name_ == NULL) {
    name_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.Config.name)
  return name_;
}
inline void Qos_Interfaces_Interface_Output_Queues_Queue_Config::set_allocated_name(::ywrapper::StringValue* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.Config.name)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Output_Queues_Queue_State

// .ywrapper.UintValue avg_queue_len = 497534235 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state/avg-queue-len"];
inline bool Qos_Interfaces_Interface_Output_Queues_Queue_State::has_avg_queue_len() const {
  return this != internal_default_instance() && avg_queue_len_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Interfaces_Interface_Output_Queues_Queue_State::avg_queue_len() const {
  const ::ywrapper::UintValue* p = avg_queue_len_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State.avg_queue_len)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Output_Queues_Queue_State::release_avg_queue_len() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State.avg_queue_len)
  
  ::ywrapper::UintValue* temp = avg_queue_len_;
  avg_queue_len_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Output_Queues_Queue_State::mutable_avg_queue_len() {
  
  if (avg_queue_len_ == NULL) {
    avg_queue_len_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State.avg_queue_len)
  return avg_queue_len_;
}
inline void Qos_Interfaces_Interface_Output_Queues_Queue_State::set_allocated_avg_queue_len(::ywrapper::UintValue* avg_queue_len) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(avg_queue_len_);
  }
  if (avg_queue_len) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      avg_queue_len = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, avg_queue_len, submessage_arena);
    }
    
  } else {
    
  }
  avg_queue_len_ = avg_queue_len;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State.avg_queue_len)
}

// .ywrapper.UintValue dropped_pkts = 358084770 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state/dropped-pkts"];
inline bool Qos_Interfaces_Interface_Output_Queues_Queue_State::has_dropped_pkts() const {
  return this != internal_default_instance() && dropped_pkts_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Interfaces_Interface_Output_Queues_Queue_State::dropped_pkts() const {
  const ::ywrapper::UintValue* p = dropped_pkts_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State.dropped_pkts)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Output_Queues_Queue_State::release_dropped_pkts() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State.dropped_pkts)
  
  ::ywrapper::UintValue* temp = dropped_pkts_;
  dropped_pkts_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Output_Queues_Queue_State::mutable_dropped_pkts() {
  
  if (dropped_pkts_ == NULL) {
    dropped_pkts_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State.dropped_pkts)
  return dropped_pkts_;
}
inline void Qos_Interfaces_Interface_Output_Queues_Queue_State::set_allocated_dropped_pkts(::ywrapper::UintValue* dropped_pkts) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dropped_pkts_);
  }
  if (dropped_pkts) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dropped_pkts = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dropped_pkts, submessage_arena);
    }
    
  } else {
    
  }
  dropped_pkts_ = dropped_pkts;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State.dropped_pkts)
}

// .ywrapper.UintValue max_queue_len = 509845137 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state/max-queue-len"];
inline bool Qos_Interfaces_Interface_Output_Queues_Queue_State::has_max_queue_len() const {
  return this != internal_default_instance() && max_queue_len_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Interfaces_Interface_Output_Queues_Queue_State::max_queue_len() const {
  const ::ywrapper::UintValue* p = max_queue_len_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State.max_queue_len)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Output_Queues_Queue_State::release_max_queue_len() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State.max_queue_len)
  
  ::ywrapper::UintValue* temp = max_queue_len_;
  max_queue_len_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Output_Queues_Queue_State::mutable_max_queue_len() {
  
  if (max_queue_len_ == NULL) {
    max_queue_len_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State.max_queue_len)
  return max_queue_len_;
}
inline void Qos_Interfaces_Interface_Output_Queues_Queue_State::set_allocated_max_queue_len(::ywrapper::UintValue* max_queue_len) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(max_queue_len_);
  }
  if (max_queue_len) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      max_queue_len = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, max_queue_len, submessage_arena);
    }
    
  } else {
    
  }
  max_queue_len_ = max_queue_len;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State.max_queue_len)
}

// .ywrapper.StringValue name = 422045572 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state/name"];
inline bool Qos_Interfaces_Interface_Output_Queues_Queue_State::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Interfaces_Interface_Output_Queues_Queue_State::name() const {
  const ::ywrapper::StringValue* p = name_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State.name)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Output_Queues_Queue_State::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State.name)
  
  ::ywrapper::StringValue* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Output_Queues_Queue_State::mutable_name() {
  
  if (name_ == NULL) {
    name_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State.name)
  return name_;
}
inline void Qos_Interfaces_Interface_Output_Queues_Queue_State::set_allocated_name(::ywrapper::StringValue* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State.name)
}

// .ywrapper.UintValue transmit_octets = 117378910 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state/transmit-octets"];
inline bool Qos_Interfaces_Interface_Output_Queues_Queue_State::has_transmit_octets() const {
  return this != internal_default_instance() && transmit_octets_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Interfaces_Interface_Output_Queues_Queue_State::transmit_octets() const {
  const ::ywrapper::UintValue* p = transmit_octets_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State.transmit_octets)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Output_Queues_Queue_State::release_transmit_octets() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State.transmit_octets)
  
  ::ywrapper::UintValue* temp = transmit_octets_;
  transmit_octets_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Output_Queues_Queue_State::mutable_transmit_octets() {
  
  if (transmit_octets_ == NULL) {
    transmit_octets_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State.transmit_octets)
  return transmit_octets_;
}
inline void Qos_Interfaces_Interface_Output_Queues_Queue_State::set_allocated_transmit_octets(::ywrapper::UintValue* transmit_octets) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(transmit_octets_);
  }
  if (transmit_octets) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transmit_octets = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transmit_octets, submessage_arena);
    }
    
  } else {
    
  }
  transmit_octets_ = transmit_octets;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State.transmit_octets)
}

// .ywrapper.UintValue transmit_pkts = 20090310 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state/transmit-pkts"];
inline bool Qos_Interfaces_Interface_Output_Queues_Queue_State::has_transmit_pkts() const {
  return this != internal_default_instance() && transmit_pkts_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Interfaces_Interface_Output_Queues_Queue_State::transmit_pkts() const {
  const ::ywrapper::UintValue* p = transmit_pkts_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State.transmit_pkts)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Output_Queues_Queue_State::release_transmit_pkts() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State.transmit_pkts)
  
  ::ywrapper::UintValue* temp = transmit_pkts_;
  transmit_pkts_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Output_Queues_Queue_State::mutable_transmit_pkts() {
  
  if (transmit_pkts_ == NULL) {
    transmit_pkts_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State.transmit_pkts)
  return transmit_pkts_;
}
inline void Qos_Interfaces_Interface_Output_Queues_Queue_State::set_allocated_transmit_pkts(::ywrapper::UintValue* transmit_pkts) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(transmit_pkts_);
  }
  if (transmit_pkts) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transmit_pkts = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transmit_pkts, submessage_arena);
    }
    
  } else {
    
  }
  transmit_pkts_ = transmit_pkts;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State.transmit_pkts)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Output_Queues_Queue

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.Config config = 491134857 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/config"];
inline bool Qos_Interfaces_Interface_Output_Queues_Queue::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Qos_Interfaces_Interface_Output_Queues_Queue::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_Config& Qos_Interfaces_Interface_Output_Queues_Queue::config() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_Config*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Queues_Queue_Config_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_Config* Qos_Interfaces_Interface_Output_Queues_Queue::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.config)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_Config* Qos_Interfaces_Interface_Output_Queues_Queue::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.config)
  return config_;
}
inline void Qos_Interfaces_Interface_Output_Queues_Queue::set_allocated_config(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.config)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.State state = 122510046 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/state"];
inline bool Qos_Interfaces_Interface_Output_Queues_Queue::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_Interfaces_Interface_Output_Queues_Queue::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_State& Qos_Interfaces_Interface_Output_Queues_Queue::state() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_State*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Queues_Queue_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_State* Qos_Interfaces_Interface_Output_Queues_Queue::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.state)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_State* Qos_Interfaces_Interface_Output_Queues_Queue::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.state)
  return state_;
}
inline void Qos_Interfaces_Interface_Output_Queues_Queue::set_allocated_state(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue.state)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Output_Queues_QueueKey

// string name = 1 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue/name"];
inline void Qos_Interfaces_Interface_Output_Queues_QueueKey::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Qos_Interfaces_Interface_Output_Queues_QueueKey::name() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey.name)
  return name_.GetNoArena();
}
inline void Qos_Interfaces_Interface_Output_Queues_QueueKey::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey.name)
}
#if LANG_CXX11
inline void Qos_Interfaces_Interface_Output_Queues_QueueKey::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey.name)
}
#endif
inline void Qos_Interfaces_Interface_Output_Queues_QueueKey::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey.name)
}
inline void Qos_Interfaces_Interface_Output_Queues_QueueKey::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey.name)
}
inline ::std::string* Qos_Interfaces_Interface_Output_Queues_QueueKey::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Qos_Interfaces_Interface_Output_Queues_QueueKey::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Qos_Interfaces_Interface_Output_Queues_QueueKey::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey.name)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.Queue queue = 2;
inline bool Qos_Interfaces_Interface_Output_Queues_QueueKey::has_queue() const {
  return this != internal_default_instance() && queue_ != NULL;
}
inline void Qos_Interfaces_Interface_Output_Queues_QueueKey::clear_queue() {
  if (GetArenaNoVirtual() == NULL && queue_ != NULL) {
    delete queue_;
  }
  queue_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue& Qos_Interfaces_Interface_Output_Queues_QueueKey::queue() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue* p = queue_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey.queue)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Queues_Queue_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue* Qos_Interfaces_Interface_Output_Queues_QueueKey::release_queue() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey.queue)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue* temp = queue_;
  queue_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue* Qos_Interfaces_Interface_Output_Queues_QueueKey::mutable_queue() {
  
  if (queue_ == NULL) {
    queue_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey.queue)
  return queue_;
}
inline void Qos_Interfaces_Interface_Output_Queues_QueueKey::set_allocated_queue(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_Queue* queue) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete queue_;
  }
  if (queue) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      queue = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, queue, submessage_arena);
    }
    
  } else {
    
  }
  queue_ = queue;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey.queue)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Output_Queues

// repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.QueueKey queue = 316768612 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues/queue"];
inline int Qos_Interfaces_Interface_Output_Queues::queue_size() const {
  return queue_.size();
}
inline void Qos_Interfaces_Interface_Output_Queues::clear_queue() {
  queue_.Clear();
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_QueueKey& Qos_Interfaces_Interface_Output_Queues::queue(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.queue)
  return queue_.Get(index);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_QueueKey* Qos_Interfaces_Interface_Output_Queues::mutable_queue(int index) {
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.queue)
  return queue_.Mutable(index);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_QueueKey* Qos_Interfaces_Interface_Output_Queues::add_queue() {
  // @@protoc_insertion_point(field_add:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.queue)
  return queue_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_QueueKey >*
Qos_Interfaces_Interface_Output_Queues::mutable_queue() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.queue)
  return &queue_;
}
inline const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues_QueueKey >&
Qos_Interfaces_Interface_Output_Queues::queue() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues.queue)
  return queue_;
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Output_SchedulerPolicy_Config

// .ywrapper.StringValue name = 32047975 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/config/name"];
inline bool Qos_Interfaces_Interface_Output_SchedulerPolicy_Config::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Interfaces_Interface_Output_SchedulerPolicy_Config::name() const {
  const ::ywrapper::StringValue* p = name_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Config.name)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Output_SchedulerPolicy_Config::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Config.name)
  
  ::ywrapper::StringValue* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Output_SchedulerPolicy_Config::mutable_name() {
  
  if (name_ == NULL) {
    name_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Config.name)
  return name_;
}
inline void Qos_Interfaces_Interface_Output_SchedulerPolicy_Config::set_allocated_name(::ywrapper::StringValue* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Config.name)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State

// .ywrapper.UintValue conforming_octets = 190363557 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-octets"];
inline bool Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::has_conforming_octets() const {
  return this != internal_default_instance() && conforming_octets_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::conforming_octets() const {
  const ::ywrapper::UintValue* p = conforming_octets_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State.conforming_octets)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::release_conforming_octets() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State.conforming_octets)
  
  ::ywrapper::UintValue* temp = conforming_octets_;
  conforming_octets_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::mutable_conforming_octets() {
  
  if (conforming_octets_ == NULL) {
    conforming_octets_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State.conforming_octets)
  return conforming_octets_;
}
inline void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::set_allocated_conforming_octets(::ywrapper::UintValue* conforming_octets) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(conforming_octets_);
  }
  if (conforming_octets) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      conforming_octets = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, conforming_octets, submessage_arena);
    }
    
  } else {
    
  }
  conforming_octets_ = conforming_octets;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State.conforming_octets)
}

// .ywrapper.UintValue conforming_pkts = 384889393 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/conforming-pkts"];
inline bool Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::has_conforming_pkts() const {
  return this != internal_default_instance() && conforming_pkts_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::conforming_pkts() const {
  const ::ywrapper::UintValue* p = conforming_pkts_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State.conforming_pkts)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::release_conforming_pkts() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State.conforming_pkts)
  
  ::ywrapper::UintValue* temp = conforming_pkts_;
  conforming_pkts_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::mutable_conforming_pkts() {
  
  if (conforming_pkts_ == NULL) {
    conforming_pkts_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State.conforming_pkts)
  return conforming_pkts_;
}
inline void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::set_allocated_conforming_pkts(::ywrapper::UintValue* conforming_pkts) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(conforming_pkts_);
  }
  if (conforming_pkts) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      conforming_pkts = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, conforming_pkts, submessage_arena);
    }
    
  } else {
    
  }
  conforming_pkts_ = conforming_pkts;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State.conforming_pkts)
}

// .ywrapper.UintValue exceeding_octets = 127842319 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-octets"];
inline bool Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::has_exceeding_octets() const {
  return this != internal_default_instance() && exceeding_octets_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::exceeding_octets() const {
  const ::ywrapper::UintValue* p = exceeding_octets_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State.exceeding_octets)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::release_exceeding_octets() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State.exceeding_octets)
  
  ::ywrapper::UintValue* temp = exceeding_octets_;
  exceeding_octets_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::mutable_exceeding_octets() {
  
  if (exceeding_octets_ == NULL) {
    exceeding_octets_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State.exceeding_octets)
  return exceeding_octets_;
}
inline void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::set_allocated_exceeding_octets(::ywrapper::UintValue* exceeding_octets) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(exceeding_octets_);
  }
  if (exceeding_octets) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      exceeding_octets = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exceeding_octets, submessage_arena);
    }
    
  } else {
    
  }
  exceeding_octets_ = exceeding_octets;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State.exceeding_octets)
}

// .ywrapper.UintValue exceeding_pkts = 174504655 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/exceeding-pkts"];
inline bool Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::has_exceeding_pkts() const {
  return this != internal_default_instance() && exceeding_pkts_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::exceeding_pkts() const {
  const ::ywrapper::UintValue* p = exceeding_pkts_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State.exceeding_pkts)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::release_exceeding_pkts() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State.exceeding_pkts)
  
  ::ywrapper::UintValue* temp = exceeding_pkts_;
  exceeding_pkts_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::mutable_exceeding_pkts() {
  
  if (exceeding_pkts_ == NULL) {
    exceeding_pkts_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State.exceeding_pkts)
  return exceeding_pkts_;
}
inline void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::set_allocated_exceeding_pkts(::ywrapper::UintValue* exceeding_pkts) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(exceeding_pkts_);
  }
  if (exceeding_pkts) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      exceeding_pkts = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exceeding_pkts, submessage_arena);
    }
    
  } else {
    
  }
  exceeding_pkts_ = exceeding_pkts;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State.exceeding_pkts)
}

// .ywrapper.UintValue sequence = 379118145 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/sequence"];
inline bool Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::has_sequence() const {
  return this != internal_default_instance() && sequence_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::sequence() const {
  const ::ywrapper::UintValue* p = sequence_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State.sequence)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::release_sequence() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State.sequence)
  
  ::ywrapper::UintValue* temp = sequence_;
  sequence_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::mutable_sequence() {
  
  if (sequence_ == NULL) {
    sequence_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State.sequence)
  return sequence_;
}
inline void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::set_allocated_sequence(::ywrapper::UintValue* sequence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(sequence_);
  }
  if (sequence) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sequence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sequence, submessage_arena);
    }
    
  } else {
    
  }
  sequence_ = sequence;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State.sequence)
}

// .ywrapper.UintValue violating_octets = 334250126 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-octets"];
inline bool Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::has_violating_octets() const {
  return this != internal_default_instance() && violating_octets_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::violating_octets() const {
  const ::ywrapper::UintValue* p = violating_octets_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State.violating_octets)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::release_violating_octets() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State.violating_octets)
  
  ::ywrapper::UintValue* temp = violating_octets_;
  violating_octets_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::mutable_violating_octets() {
  
  if (violating_octets_ == NULL) {
    violating_octets_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State.violating_octets)
  return violating_octets_;
}
inline void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::set_allocated_violating_octets(::ywrapper::UintValue* violating_octets) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(violating_octets_);
  }
  if (violating_octets) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      violating_octets = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, violating_octets, submessage_arena);
    }
    
  } else {
    
  }
  violating_octets_ = violating_octets;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State.violating_octets)
}

// .ywrapper.UintValue violating_pkts = 380540342 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state/violating-pkts"];
inline bool Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::has_violating_pkts() const {
  return this != internal_default_instance() && violating_pkts_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::violating_pkts() const {
  const ::ywrapper::UintValue* p = violating_pkts_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State.violating_pkts)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::release_violating_pkts() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State.violating_pkts)
  
  ::ywrapper::UintValue* temp = violating_pkts_;
  violating_pkts_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::mutable_violating_pkts() {
  
  if (violating_pkts_ == NULL) {
    violating_pkts_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State.violating_pkts)
  return violating_pkts_;
}
inline void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State::set_allocated_violating_pkts(::ywrapper::UintValue* violating_pkts) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(violating_pkts_);
  }
  if (violating_pkts) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      violating_pkts = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, violating_pkts, submessage_arena);
    }
    
  } else {
    
  }
  violating_pkts_ = violating_pkts;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State.violating_pkts)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.State state = 352057387 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state"];
inline bool Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State& Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler::state() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State* Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.state)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State* Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.state)
  return state_;
}
inline void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler::set_allocated_state(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler.state)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey

// uint64 sequence = 1 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/sequence"];
inline void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey::clear_sequence() {
  sequence_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey::sequence() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.SchedulerKey.sequence)
  return sequence_;
}
inline void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey::set_sequence(::google::protobuf::uint64 value) {
  
  sequence_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.SchedulerKey.sequence)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.Scheduler scheduler = 2;
inline bool Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey::has_scheduler() const {
  return this != internal_default_instance() && scheduler_ != NULL;
}
inline void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey::clear_scheduler() {
  if (GetArenaNoVirtual() == NULL && scheduler_ != NULL) {
    delete scheduler_;
  }
  scheduler_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler& Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey::scheduler() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler* p = scheduler_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.SchedulerKey.scheduler)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler* Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey::release_scheduler() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.SchedulerKey.scheduler)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler* temp = scheduler_;
  scheduler_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler* Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey::mutable_scheduler() {
  
  if (scheduler_ == NULL) {
    scheduler_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.SchedulerKey.scheduler)
  return scheduler_;
}
inline void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey::set_allocated_scheduler(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_Scheduler* scheduler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scheduler_;
  }
  if (scheduler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scheduler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scheduler, submessage_arena);
    }
    
  } else {
    
  }
  scheduler_ = scheduler;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.SchedulerKey.scheduler)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers

// repeated .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.SchedulerKey scheduler = 208885833 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler"];
inline int Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers::scheduler_size() const {
  return scheduler_.size();
}
inline void Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers::clear_scheduler() {
  scheduler_.Clear();
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey& Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers::scheduler(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.scheduler)
  return scheduler_.Get(index);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey* Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers::mutable_scheduler(int index) {
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.scheduler)
  return scheduler_.Mutable(index);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey* Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers::add_scheduler() {
  // @@protoc_insertion_point(field_add:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.scheduler)
  return scheduler_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey >*
Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers::mutable_scheduler() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.scheduler)
  return &scheduler_;
}
inline const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_SchedulerKey >&
Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers::scheduler() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers.scheduler)
  return scheduler_;
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Output_SchedulerPolicy_State

// .ywrapper.StringValue name = 131511290 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/state/name"];
inline bool Qos_Interfaces_Interface_Output_SchedulerPolicy_State::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Interfaces_Interface_Output_SchedulerPolicy_State::name() const {
  const ::ywrapper::StringValue* p = name_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.State.name)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Output_SchedulerPolicy_State::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.State.name)
  
  ::ywrapper::StringValue* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_Output_SchedulerPolicy_State::mutable_name() {
  
  if (name_ == NULL) {
    name_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.State.name)
  return name_;
}
inline void Qos_Interfaces_Interface_Output_SchedulerPolicy_State::set_allocated_name(::ywrapper::StringValue* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.State.name)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Output_SchedulerPolicy

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Config config = 507310111 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/config"];
inline bool Qos_Interfaces_Interface_Output_SchedulerPolicy::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Qos_Interfaces_Interface_Output_SchedulerPolicy::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Config& Qos_Interfaces_Interface_Output_SchedulerPolicy::config() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Config*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_SchedulerPolicy_Config_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Config* Qos_Interfaces_Interface_Output_SchedulerPolicy::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.config)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Config* Qos_Interfaces_Interface_Output_SchedulerPolicy::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.config)
  return config_;
}
inline void Qos_Interfaces_Interface_Output_SchedulerPolicy::set_allocated_config(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.config)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.Schedulers schedulers = 300824503 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/schedulers"];
inline bool Qos_Interfaces_Interface_Output_SchedulerPolicy::has_schedulers() const {
  return this != internal_default_instance() && schedulers_ != NULL;
}
inline void Qos_Interfaces_Interface_Output_SchedulerPolicy::clear_schedulers() {
  if (GetArenaNoVirtual() == NULL && schedulers_ != NULL) {
    delete schedulers_;
  }
  schedulers_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers& Qos_Interfaces_Interface_Output_SchedulerPolicy::schedulers() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers* p = schedulers_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.schedulers)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers* Qos_Interfaces_Interface_Output_SchedulerPolicy::release_schedulers() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.schedulers)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers* temp = schedulers_;
  schedulers_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers* Qos_Interfaces_Interface_Output_SchedulerPolicy::mutable_schedulers() {
  
  if (schedulers_ == NULL) {
    schedulers_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.schedulers)
  return schedulers_;
}
inline void Qos_Interfaces_Interface_Output_SchedulerPolicy::set_allocated_schedulers(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_Schedulers* schedulers) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete schedulers_;
  }
  if (schedulers) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      schedulers = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, schedulers, submessage_arena);
    }
    
  } else {
    
  }
  schedulers_ = schedulers;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.schedulers)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.State state = 422509776 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy/state"];
inline bool Qos_Interfaces_Interface_Output_SchedulerPolicy::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_Interfaces_Interface_Output_SchedulerPolicy::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_State& Qos_Interfaces_Interface_Output_SchedulerPolicy::state() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_State*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_SchedulerPolicy_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_State* Qos_Interfaces_Interface_Output_SchedulerPolicy::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.state)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_State* Qos_Interfaces_Interface_Output_SchedulerPolicy::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.state)
  return state_;
}
inline void Qos_Interfaces_Interface_Output_SchedulerPolicy::set_allocated_state(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy.state)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Output_State

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_Output

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Classifers classifers = 324405479 [(.yext.schemapath) = "/qos/interfaces/interface/output/classifers"];
inline bool Qos_Interfaces_Interface_Output::has_classifers() const {
  return this != internal_default_instance() && classifers_ != NULL;
}
inline void Qos_Interfaces_Interface_Output::clear_classifers() {
  if (GetArenaNoVirtual() == NULL && classifers_ != NULL) {
    delete classifers_;
  }
  classifers_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers& Qos_Interfaces_Interface_Output::classifers() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers* p = classifers_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.classifers)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Classifers_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers* Qos_Interfaces_Interface_Output::release_classifers() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.classifers)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers* temp = classifers_;
  classifers_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers* Qos_Interfaces_Interface_Output::mutable_classifers() {
  
  if (classifers_ == NULL) {
    classifers_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.classifers)
  return classifers_;
}
inline void Qos_Interfaces_Interface_Output::set_allocated_classifers(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers* classifers) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete classifers_;
  }
  if (classifers) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      classifers = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, classifers, submessage_arena);
    }
    
  } else {
    
  }
  classifers_ = classifers;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.classifers)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Config config = 362175482 [(.yext.schemapath) = "/qos/interfaces/interface/output/config"];
inline bool Qos_Interfaces_Interface_Output::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Qos_Interfaces_Interface_Output::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Config& Qos_Interfaces_Interface_Output::config() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Config*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Config_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Config* Qos_Interfaces_Interface_Output::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.config)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Config* Qos_Interfaces_Interface_Output::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.config)
  return config_;
}
inline void Qos_Interfaces_Interface_Output::set_allocated_config(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.config)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.InterfaceRef interface_ref = 13944721 [(.yext.schemapath) = "/qos/interfaces/interface/output/interface-ref"];
inline bool Qos_Interfaces_Interface_Output::has_interface_ref() const {
  return this != internal_default_instance() && interface_ref_ != NULL;
}
inline void Qos_Interfaces_Interface_Output::clear_interface_ref() {
  if (GetArenaNoVirtual() == NULL && interface_ref_ != NULL) {
    delete interface_ref_;
  }
  interface_ref_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef& Qos_Interfaces_Interface_Output::interface_ref() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef* p = interface_ref_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.interface_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_InterfaceRef_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef* Qos_Interfaces_Interface_Output::release_interface_ref() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.interface_ref)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef* temp = interface_ref_;
  interface_ref_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef* Qos_Interfaces_Interface_Output::mutable_interface_ref() {
  
  if (interface_ref_ == NULL) {
    interface_ref_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.interface_ref)
  return interface_ref_;
}
inline void Qos_Interfaces_Interface_Output::set_allocated_interface_ref(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_InterfaceRef* interface_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete interface_ref_;
  }
  if (interface_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      interface_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, interface_ref, submessage_arena);
    }
    
  } else {
    
  }
  interface_ref_ = interface_ref;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.interface_ref)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.Queues queues = 208565052 [(.yext.schemapath) = "/qos/interfaces/interface/output/queues"];
inline bool Qos_Interfaces_Interface_Output::has_queues() const {
  return this != internal_default_instance() && queues_ != NULL;
}
inline void Qos_Interfaces_Interface_Output::clear_queues() {
  if (GetArenaNoVirtual() == NULL && queues_ != NULL) {
    delete queues_;
  }
  queues_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues& Qos_Interfaces_Interface_Output::queues() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues* p = queues_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.queues)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_Queues_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues* Qos_Interfaces_Interface_Output::release_queues() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.queues)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues* temp = queues_;
  queues_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues* Qos_Interfaces_Interface_Output::mutable_queues() {
  
  if (queues_ == NULL) {
    queues_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.queues)
  return queues_;
}
inline void Qos_Interfaces_Interface_Output::set_allocated_queues(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Queues* queues) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete queues_;
  }
  if (queues) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      queues = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, queues, submessage_arena);
    }
    
  } else {
    
  }
  queues_ = queues;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.queues)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.SchedulerPolicy scheduler_policy = 345632622 [(.yext.schemapath) = "/qos/interfaces/interface/output/scheduler-policy"];
inline bool Qos_Interfaces_Interface_Output::has_scheduler_policy() const {
  return this != internal_default_instance() && scheduler_policy_ != NULL;
}
inline void Qos_Interfaces_Interface_Output::clear_scheduler_policy() {
  if (GetArenaNoVirtual() == NULL && scheduler_policy_ != NULL) {
    delete scheduler_policy_;
  }
  scheduler_policy_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy& Qos_Interfaces_Interface_Output::scheduler_policy() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy* p = scheduler_policy_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.scheduler_policy)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_SchedulerPolicy_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy* Qos_Interfaces_Interface_Output::release_scheduler_policy() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.scheduler_policy)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy* temp = scheduler_policy_;
  scheduler_policy_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy* Qos_Interfaces_Interface_Output::mutable_scheduler_policy() {
  
  if (scheduler_policy_ == NULL) {
    scheduler_policy_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.scheduler_policy)
  return scheduler_policy_;
}
inline void Qos_Interfaces_Interface_Output::set_allocated_scheduler_policy(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_SchedulerPolicy* scheduler_policy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scheduler_policy_;
  }
  if (scheduler_policy) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scheduler_policy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scheduler_policy, submessage_arena);
    }
    
  } else {
    
  }
  scheduler_policy_ = scheduler_policy;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.scheduler_policy)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.State state = 109678103 [(.yext.schemapath) = "/qos/interfaces/interface/output/state"];
inline bool Qos_Interfaces_Interface_Output::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_Interfaces_Interface_Output::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_State& Qos_Interfaces_Interface_Output::state() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_State*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_State* Qos_Interfaces_Interface_Output::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.state)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_State* Qos_Interfaces_Interface_Output::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.state)
  return state_;
}
inline void Qos_Interfaces_Interface_Output::set_allocated_state(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.Output.state)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface_State

// .ywrapper.StringValue interface_id = 173808393 [(.yext.schemapath) = "/qos/interfaces/interface/state/interface-id"];
inline bool Qos_Interfaces_Interface_State::has_interface_id() const {
  return this != internal_default_instance() && interface_id_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Interfaces_Interface_State::interface_id() const {
  const ::ywrapper::StringValue* p = interface_id_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.State.interface_id)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_State::release_interface_id() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.State.interface_id)
  
  ::ywrapper::StringValue* temp = interface_id_;
  interface_id_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Interfaces_Interface_State::mutable_interface_id() {
  
  if (interface_id_ == NULL) {
    interface_id_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.State.interface_id)
  return interface_id_;
}
inline void Qos_Interfaces_Interface_State::set_allocated_interface_id(::ywrapper::StringValue* interface_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(interface_id_);
  }
  if (interface_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      interface_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, interface_id, submessage_arena);
    }
    
  } else {
    
  }
  interface_id_ = interface_id;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.State.interface_id)
}

// -------------------------------------------------------------------

// Qos_Interfaces_Interface

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Config config = 151272640 [(.yext.schemapath) = "/qos/interfaces/interface/config"];
inline bool Qos_Interfaces_Interface::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Qos_Interfaces_Interface::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Config& Qos_Interfaces_Interface::config() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Config*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Config_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Config* Qos_Interfaces_Interface::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.config)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Config* Qos_Interfaces_Interface::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.config)
  return config_;
}
inline void Qos_Interfaces_Interface::set_allocated_config(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.config)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Input input = 185281278 [(.yext.schemapath) = "/qos/interfaces/interface/input"];
inline bool Qos_Interfaces_Interface::has_input() const {
  return this != internal_default_instance() && input_ != NULL;
}
inline void Qos_Interfaces_Interface::clear_input() {
  if (GetArenaNoVirtual() == NULL && input_ != NULL) {
    delete input_;
  }
  input_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input& Qos_Interfaces_Interface::input() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input* p = input_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.input)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Input_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input* Qos_Interfaces_Interface::release_input() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.input)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input* temp = input_;
  input_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input* Qos_Interfaces_Interface::mutable_input() {
  
  if (input_ == NULL) {
    input_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.input)
  return input_;
}
inline void Qos_Interfaces_Interface::set_allocated_input(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input* input) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete input_;
  }
  if (input) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      input = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.input)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.InterfaceRef interface_ref = 340560111 [(.yext.schemapath) = "/qos/interfaces/interface/interface-ref"];
inline bool Qos_Interfaces_Interface::has_interface_ref() const {
  return this != internal_default_instance() && interface_ref_ != NULL;
}
inline void Qos_Interfaces_Interface::clear_interface_ref() {
  if (GetArenaNoVirtual() == NULL && interface_ref_ != NULL) {
    delete interface_ref_;
  }
  interface_ref_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef& Qos_Interfaces_Interface::interface_ref() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef* p = interface_ref_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.interface_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_InterfaceRef_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef* Qos_Interfaces_Interface::release_interface_ref() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.interface_ref)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef* temp = interface_ref_;
  interface_ref_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef* Qos_Interfaces_Interface::mutable_interface_ref() {
  
  if (interface_ref_ == NULL) {
    interface_ref_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.interface_ref)
  return interface_ref_;
}
inline void Qos_Interfaces_Interface::set_allocated_interface_ref(::openconfig::openconfig_qos::Qos_Interfaces_Interface_InterfaceRef* interface_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete interface_ref_;
  }
  if (interface_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      interface_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, interface_ref, submessage_arena);
    }
    
  } else {
    
  }
  interface_ref_ = interface_ref;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.interface_ref)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.Output output = 494792021 [(.yext.schemapath) = "/qos/interfaces/interface/output"];
inline bool Qos_Interfaces_Interface::has_output() const {
  return this != internal_default_instance() && output_ != NULL;
}
inline void Qos_Interfaces_Interface::clear_output() {
  if (GetArenaNoVirtual() == NULL && output_ != NULL) {
    delete output_;
  }
  output_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output& Qos_Interfaces_Interface::output() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output* p = output_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.output)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_Output_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output* Qos_Interfaces_Interface::release_output() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.output)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output* temp = output_;
  output_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output* Qos_Interfaces_Interface::mutable_output() {
  
  if (output_ == NULL) {
    output_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.output)
  return output_;
}
inline void Qos_Interfaces_Interface::set_allocated_output(::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output* output) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete output_;
  }
  if (output) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      output = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, output, submessage_arena);
    }
    
  } else {
    
  }
  output_ = output;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.output)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface.State state = 236972729 [(.yext.schemapath) = "/qos/interfaces/interface/state"];
inline bool Qos_Interfaces_Interface::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_Interfaces_Interface::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_State& Qos_Interfaces_Interface::state() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.Interface.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface_State*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_State* Qos_Interfaces_Interface::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.Interface.state)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface_State* Qos_Interfaces_Interface::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.Interface.state)
  return state_;
}
inline void Qos_Interfaces_Interface::set_allocated_state(::openconfig::openconfig_qos::Qos_Interfaces_Interface_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.Interface.state)
}

// -------------------------------------------------------------------

// Qos_Interfaces_InterfaceKey

// string interface_id = 1 [(.yext.schemapath) = "/qos/interfaces/interface/interface-id"];
inline void Qos_Interfaces_InterfaceKey::clear_interface_id() {
  interface_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Qos_Interfaces_InterfaceKey::interface_id() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey.interface_id)
  return interface_id_.GetNoArena();
}
inline void Qos_Interfaces_InterfaceKey::set_interface_id(const ::std::string& value) {
  
  interface_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey.interface_id)
}
#if LANG_CXX11
inline void Qos_Interfaces_InterfaceKey::set_interface_id(::std::string&& value) {
  
  interface_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey.interface_id)
}
#endif
inline void Qos_Interfaces_InterfaceKey::set_interface_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  interface_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey.interface_id)
}
inline void Qos_Interfaces_InterfaceKey::set_interface_id(const char* value, size_t size) {
  
  interface_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey.interface_id)
}
inline ::std::string* Qos_Interfaces_InterfaceKey::mutable_interface_id() {
  
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey.interface_id)
  return interface_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Qos_Interfaces_InterfaceKey::release_interface_id() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey.interface_id)
  
  return interface_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Qos_Interfaces_InterfaceKey::set_allocated_interface_id(::std::string* interface_id) {
  if (interface_id != NULL) {
    
  } else {
    
  }
  interface_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interface_id);
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey.interface_id)
}

// .openconfig.openconfig_qos.Qos.Interfaces.Interface interface = 2;
inline bool Qos_Interfaces_InterfaceKey::has_interface() const {
  return this != internal_default_instance() && interface_ != NULL;
}
inline void Qos_Interfaces_InterfaceKey::clear_interface() {
  if (GetArenaNoVirtual() == NULL && interface_ != NULL) {
    delete interface_;
  }
  interface_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_Interface& Qos_Interfaces_InterfaceKey::interface() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces_Interface* p = interface_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey.interface)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces_Interface*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_Interface_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface* Qos_Interfaces_InterfaceKey::release_interface() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey.interface)
  
  ::openconfig::openconfig_qos::Qos_Interfaces_Interface* temp = interface_;
  interface_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_Interface* Qos_Interfaces_InterfaceKey::mutable_interface() {
  
  if (interface_ == NULL) {
    interface_ = new ::openconfig::openconfig_qos::Qos_Interfaces_Interface;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey.interface)
  return interface_;
}
inline void Qos_Interfaces_InterfaceKey::set_allocated_interface(::openconfig::openconfig_qos::Qos_Interfaces_Interface* interface) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete interface_;
  }
  if (interface) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      interface = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, interface, submessage_arena);
    }
    
  } else {
    
  }
  interface_ = interface;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey.interface)
}

// -------------------------------------------------------------------

// Qos_Interfaces

// repeated .openconfig.openconfig_qos.Qos.Interfaces.InterfaceKey interface = 178908543 [(.yext.schemapath) = "/qos/interfaces/interface"];
inline int Qos_Interfaces::interface_size() const {
  return interface_.size();
}
inline void Qos_Interfaces::clear_interface() {
  interface_.Clear();
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces_InterfaceKey& Qos_Interfaces::interface(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Interfaces.interface)
  return interface_.Get(index);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_InterfaceKey* Qos_Interfaces::mutable_interface(int index) {
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Interfaces.interface)
  return interface_.Mutable(index);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces_InterfaceKey* Qos_Interfaces::add_interface() {
  // @@protoc_insertion_point(field_add:openconfig.openconfig_qos.Qos.Interfaces.interface)
  return interface_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_InterfaceKey >*
Qos_Interfaces::mutable_interface() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_qos.Qos.Interfaces.interface)
  return &interface_;
}
inline const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Interfaces_InterfaceKey >&
Qos_Interfaces::interface() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_qos.Qos.Interfaces.interface)
  return interface_;
}

// -------------------------------------------------------------------

// Qos_Queues_Queue_Config

// .ywrapper.StringValue name = 135146606 [(.yext.schemapath) = "/qos/queues/queue/config/name"];
inline bool Qos_Queues_Queue_Config::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Queues_Queue_Config::name() const {
  const ::ywrapper::StringValue* p = name_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Queues.Queue.Config.name)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Queues_Queue_Config::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Queues.Queue.Config.name)
  
  ::ywrapper::StringValue* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Queues_Queue_Config::mutable_name() {
  
  if (name_ == NULL) {
    name_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Queues.Queue.Config.name)
  return name_;
}
inline void Qos_Queues_Queue_Config::set_allocated_name(::ywrapper::StringValue* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Queues.Queue.Config.name)
}

// .openconfig.enums.OpenconfigQosTypesQOSQUEUETYPE queue_type = 351938521 [(.yext.schemapath) = "/qos/queues/queue/config/queue-type"];
inline void Qos_Queues_Queue_Config::clear_queue_type() {
  queue_type_ = 0;
}
inline ::openconfig::enums::OpenconfigQosTypesQOSQUEUETYPE Qos_Queues_Queue_Config::queue_type() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Queues.Queue.Config.queue_type)
  return static_cast< ::openconfig::enums::OpenconfigQosTypesQOSQUEUETYPE >(queue_type_);
}
inline void Qos_Queues_Queue_Config::set_queue_type(::openconfig::enums::OpenconfigQosTypesQOSQUEUETYPE value) {
  
  queue_type_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Queues.Queue.Config.queue_type)
}

// -------------------------------------------------------------------

// Qos_Queues_Queue_Red_Config

// .ywrapper.UintValue maxth = 77750307 [(.yext.schemapath) = "/qos/queues/queue/red/config/maxth"];
inline bool Qos_Queues_Queue_Red_Config::has_maxth() const {
  return this != internal_default_instance() && maxth_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Queues_Queue_Red_Config::maxth() const {
  const ::ywrapper::UintValue* p = maxth_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Queues.Queue.Red.Config.maxth)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Queues_Queue_Red_Config::release_maxth() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Queues.Queue.Red.Config.maxth)
  
  ::ywrapper::UintValue* temp = maxth_;
  maxth_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Queues_Queue_Red_Config::mutable_maxth() {
  
  if (maxth_ == NULL) {
    maxth_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Queues.Queue.Red.Config.maxth)
  return maxth_;
}
inline void Qos_Queues_Queue_Red_Config::set_allocated_maxth(::ywrapper::UintValue* maxth) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(maxth_);
  }
  if (maxth) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      maxth = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, maxth, submessage_arena);
    }
    
  } else {
    
  }
  maxth_ = maxth;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Queues.Queue.Red.Config.maxth)
}

// .ywrapper.UintValue minth = 301751197 [(.yext.schemapath) = "/qos/queues/queue/red/config/minth"];
inline bool Qos_Queues_Queue_Red_Config::has_minth() const {
  return this != internal_default_instance() && minth_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Queues_Queue_Red_Config::minth() const {
  const ::ywrapper::UintValue* p = minth_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Queues.Queue.Red.Config.minth)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Queues_Queue_Red_Config::release_minth() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Queues.Queue.Red.Config.minth)
  
  ::ywrapper::UintValue* temp = minth_;
  minth_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Queues_Queue_Red_Config::mutable_minth() {
  
  if (minth_ == NULL) {
    minth_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Queues.Queue.Red.Config.minth)
  return minth_;
}
inline void Qos_Queues_Queue_Red_Config::set_allocated_minth(::ywrapper::UintValue* minth) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(minth_);
  }
  if (minth) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      minth = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, minth, submessage_arena);
    }
    
  } else {
    
  }
  minth_ = minth;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Queues.Queue.Red.Config.minth)
}

// -------------------------------------------------------------------

// Qos_Queues_Queue_Red_State

// .ywrapper.UintValue maxth = 499507070 [(.yext.schemapath) = "/qos/queues/queue/red/state/maxth"];
inline bool Qos_Queues_Queue_Red_State::has_maxth() const {
  return this != internal_default_instance() && maxth_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Queues_Queue_Red_State::maxth() const {
  const ::ywrapper::UintValue* p = maxth_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Queues.Queue.Red.State.maxth)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Queues_Queue_Red_State::release_maxth() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Queues.Queue.Red.State.maxth)
  
  ::ywrapper::UintValue* temp = maxth_;
  maxth_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Queues_Queue_Red_State::mutable_maxth() {
  
  if (maxth_ == NULL) {
    maxth_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Queues.Queue.Red.State.maxth)
  return maxth_;
}
inline void Qos_Queues_Queue_Red_State::set_allocated_maxth(::ywrapper::UintValue* maxth) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(maxth_);
  }
  if (maxth) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      maxth = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, maxth, submessage_arena);
    }
    
  } else {
    
  }
  maxth_ = maxth;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Queues.Queue.Red.State.maxth)
}

// .ywrapper.UintValue minth = 316915032 [(.yext.schemapath) = "/qos/queues/queue/red/state/minth"];
inline bool Qos_Queues_Queue_Red_State::has_minth() const {
  return this != internal_default_instance() && minth_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_Queues_Queue_Red_State::minth() const {
  const ::ywrapper::UintValue* p = minth_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Queues.Queue.Red.State.minth)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_Queues_Queue_Red_State::release_minth() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Queues.Queue.Red.State.minth)
  
  ::ywrapper::UintValue* temp = minth_;
  minth_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_Queues_Queue_Red_State::mutable_minth() {
  
  if (minth_ == NULL) {
    minth_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Queues.Queue.Red.State.minth)
  return minth_;
}
inline void Qos_Queues_Queue_Red_State::set_allocated_minth(::ywrapper::UintValue* minth) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(minth_);
  }
  if (minth) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      minth = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, minth, submessage_arena);
    }
    
  } else {
    
  }
  minth_ = minth;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Queues.Queue.Red.State.minth)
}

// -------------------------------------------------------------------

// Qos_Queues_Queue_Red

// .openconfig.openconfig_qos.Qos.Queues.Queue.Red.Config config = 530804788 [(.yext.schemapath) = "/qos/queues/queue/red/config"];
inline bool Qos_Queues_Queue_Red::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Qos_Queues_Queue_Red::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Queues_Queue_Red_Config& Qos_Queues_Queue_Red::config() const {
  const ::openconfig::openconfig_qos::Qos_Queues_Queue_Red_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Queues.Queue.Red.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Queues_Queue_Red_Config*>(
      &::openconfig::openconfig_qos::_Qos_Queues_Queue_Red_Config_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Queues_Queue_Red_Config* Qos_Queues_Queue_Red::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Queues.Queue.Red.config)
  
  ::openconfig::openconfig_qos::Qos_Queues_Queue_Red_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Queues_Queue_Red_Config* Qos_Queues_Queue_Red::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_qos::Qos_Queues_Queue_Red_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Queues.Queue.Red.config)
  return config_;
}
inline void Qos_Queues_Queue_Red::set_allocated_config(::openconfig::openconfig_qos::Qos_Queues_Queue_Red_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Queues.Queue.Red.config)
}

// .openconfig.openconfig_qos.Qos.Queues.Queue.Red.State state = 443004749 [(.yext.schemapath) = "/qos/queues/queue/red/state"];
inline bool Qos_Queues_Queue_Red::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_Queues_Queue_Red::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Queues_Queue_Red_State& Qos_Queues_Queue_Red::state() const {
  const ::openconfig::openconfig_qos::Qos_Queues_Queue_Red_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Queues.Queue.Red.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Queues_Queue_Red_State*>(
      &::openconfig::openconfig_qos::_Qos_Queues_Queue_Red_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Queues_Queue_Red_State* Qos_Queues_Queue_Red::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Queues.Queue.Red.state)
  
  ::openconfig::openconfig_qos::Qos_Queues_Queue_Red_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Queues_Queue_Red_State* Qos_Queues_Queue_Red::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_Queues_Queue_Red_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Queues.Queue.Red.state)
  return state_;
}
inline void Qos_Queues_Queue_Red::set_allocated_state(::openconfig::openconfig_qos::Qos_Queues_Queue_Red_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Queues.Queue.Red.state)
}

// -------------------------------------------------------------------

// Qos_Queues_Queue_State

// .ywrapper.StringValue name = 454266209 [(.yext.schemapath) = "/qos/queues/queue/state/name"];
inline bool Qos_Queues_Queue_State::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_Queues_Queue_State::name() const {
  const ::ywrapper::StringValue* p = name_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Queues.Queue.State.name)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_Queues_Queue_State::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Queues.Queue.State.name)
  
  ::ywrapper::StringValue* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_Queues_Queue_State::mutable_name() {
  
  if (name_ == NULL) {
    name_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Queues.Queue.State.name)
  return name_;
}
inline void Qos_Queues_Queue_State::set_allocated_name(::ywrapper::StringValue* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Queues.Queue.State.name)
}

// .openconfig.enums.OpenconfigQosTypesQOSQUEUETYPE queue_type = 390406498 [(.yext.schemapath) = "/qos/queues/queue/state/queue-type"];
inline void Qos_Queues_Queue_State::clear_queue_type() {
  queue_type_ = 0;
}
inline ::openconfig::enums::OpenconfigQosTypesQOSQUEUETYPE Qos_Queues_Queue_State::queue_type() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Queues.Queue.State.queue_type)
  return static_cast< ::openconfig::enums::OpenconfigQosTypesQOSQUEUETYPE >(queue_type_);
}
inline void Qos_Queues_Queue_State::set_queue_type(::openconfig::enums::OpenconfigQosTypesQOSQUEUETYPE value) {
  
  queue_type_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Queues.Queue.State.queue_type)
}

// -------------------------------------------------------------------

// Qos_Queues_Queue_Wred_Config

// -------------------------------------------------------------------

// Qos_Queues_Queue_Wred_State

// -------------------------------------------------------------------

// Qos_Queues_Queue_Wred

// .openconfig.openconfig_qos.Qos.Queues.Queue.Wred.Config config = 22449995 [(.yext.schemapath) = "/qos/queues/queue/wred/config"];
inline bool Qos_Queues_Queue_Wred::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Qos_Queues_Queue_Wred::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_Config& Qos_Queues_Queue_Wred::config() const {
  const ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_Config*>(
      &::openconfig::openconfig_qos::_Qos_Queues_Queue_Wred_Config_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_Config* Qos_Queues_Queue_Wred::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.config)
  
  ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_Config* Qos_Queues_Queue_Wred::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.config)
  return config_;
}
inline void Qos_Queues_Queue_Wred::set_allocated_config(::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.config)
}

// .openconfig.openconfig_qos.Qos.Queues.Queue.Wred.State state = 29756812 [(.yext.schemapath) = "/qos/queues/queue/wred/state"];
inline bool Qos_Queues_Queue_Wred::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_Queues_Queue_Wred::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_State& Qos_Queues_Queue_Wred::state() const {
  const ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_State*>(
      &::openconfig::openconfig_qos::_Qos_Queues_Queue_Wred_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_State* Qos_Queues_Queue_Wred::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.state)
  
  ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_State* Qos_Queues_Queue_Wred::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.state)
  return state_;
}
inline void Qos_Queues_Queue_Wred::set_allocated_state(::openconfig::openconfig_qos::Qos_Queues_Queue_Wred_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Queues.Queue.Wred.state)
}

// -------------------------------------------------------------------

// Qos_Queues_Queue

// .openconfig.openconfig_qos.Qos.Queues.Queue.Config config = 173754668 [(.yext.schemapath) = "/qos/queues/queue/config"];
inline bool Qos_Queues_Queue::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Qos_Queues_Queue::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Queues_Queue_Config& Qos_Queues_Queue::config() const {
  const ::openconfig::openconfig_qos::Qos_Queues_Queue_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Queues.Queue.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Queues_Queue_Config*>(
      &::openconfig::openconfig_qos::_Qos_Queues_Queue_Config_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Queues_Queue_Config* Qos_Queues_Queue::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Queues.Queue.config)
  
  ::openconfig::openconfig_qos::Qos_Queues_Queue_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Queues_Queue_Config* Qos_Queues_Queue::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_qos::Qos_Queues_Queue_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Queues.Queue.config)
  return config_;
}
inline void Qos_Queues_Queue::set_allocated_config(::openconfig::openconfig_qos::Qos_Queues_Queue_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Queues.Queue.config)
}

// .openconfig.openconfig_qos.Qos.Queues.Queue.Red red = 36543379 [(.yext.schemapath) = "/qos/queues/queue/red"];
inline bool Qos_Queues_Queue::has_red() const {
  return this != internal_default_instance() && red_ != NULL;
}
inline void Qos_Queues_Queue::clear_red() {
  if (GetArenaNoVirtual() == NULL && red_ != NULL) {
    delete red_;
  }
  red_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Queues_Queue_Red& Qos_Queues_Queue::red() const {
  const ::openconfig::openconfig_qos::Qos_Queues_Queue_Red* p = red_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Queues.Queue.red)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Queues_Queue_Red*>(
      &::openconfig::openconfig_qos::_Qos_Queues_Queue_Red_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Queues_Queue_Red* Qos_Queues_Queue::release_red() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Queues.Queue.red)
  
  ::openconfig::openconfig_qos::Qos_Queues_Queue_Red* temp = red_;
  red_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Queues_Queue_Red* Qos_Queues_Queue::mutable_red() {
  
  if (red_ == NULL) {
    red_ = new ::openconfig::openconfig_qos::Qos_Queues_Queue_Red;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Queues.Queue.red)
  return red_;
}
inline void Qos_Queues_Queue::set_allocated_red(::openconfig::openconfig_qos::Qos_Queues_Queue_Red* red) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete red_;
  }
  if (red) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      red = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, red, submessage_arena);
    }
    
  } else {
    
  }
  red_ = red;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Queues.Queue.red)
}

// .openconfig.openconfig_qos.Qos.Queues.Queue.State state = 213681445 [(.yext.schemapath) = "/qos/queues/queue/state"];
inline bool Qos_Queues_Queue::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_Queues_Queue::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Queues_Queue_State& Qos_Queues_Queue::state() const {
  const ::openconfig::openconfig_qos::Qos_Queues_Queue_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Queues.Queue.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Queues_Queue_State*>(
      &::openconfig::openconfig_qos::_Qos_Queues_Queue_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Queues_Queue_State* Qos_Queues_Queue::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Queues.Queue.state)
  
  ::openconfig::openconfig_qos::Qos_Queues_Queue_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Queues_Queue_State* Qos_Queues_Queue::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_Queues_Queue_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Queues.Queue.state)
  return state_;
}
inline void Qos_Queues_Queue::set_allocated_state(::openconfig::openconfig_qos::Qos_Queues_Queue_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Queues.Queue.state)
}

// .openconfig.openconfig_qos.Qos.Queues.Queue.Wred wred = 285364058 [(.yext.schemapath) = "/qos/queues/queue/wred"];
inline bool Qos_Queues_Queue::has_wred() const {
  return this != internal_default_instance() && wred_ != NULL;
}
inline void Qos_Queues_Queue::clear_wred() {
  if (GetArenaNoVirtual() == NULL && wred_ != NULL) {
    delete wred_;
  }
  wred_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred& Qos_Queues_Queue::wred() const {
  const ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred* p = wred_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Queues.Queue.wred)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred*>(
      &::openconfig::openconfig_qos::_Qos_Queues_Queue_Wred_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred* Qos_Queues_Queue::release_wred() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Queues.Queue.wred)
  
  ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred* temp = wred_;
  wred_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred* Qos_Queues_Queue::mutable_wred() {
  
  if (wred_ == NULL) {
    wred_ = new ::openconfig::openconfig_qos::Qos_Queues_Queue_Wred;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Queues.Queue.wred)
  return wred_;
}
inline void Qos_Queues_Queue::set_allocated_wred(::openconfig::openconfig_qos::Qos_Queues_Queue_Wred* wred) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete wred_;
  }
  if (wred) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      wred = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, wred, submessage_arena);
    }
    
  } else {
    
  }
  wred_ = wred;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Queues.Queue.wred)
}

// -------------------------------------------------------------------

// Qos_Queues_QueueKey

// string name = 1 [(.yext.schemapath) = "/qos/queues/queue/name"];
inline void Qos_Queues_QueueKey::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Qos_Queues_QueueKey::name() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Queues.QueueKey.name)
  return name_.GetNoArena();
}
inline void Qos_Queues_QueueKey::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.Queues.QueueKey.name)
}
#if LANG_CXX11
inline void Qos_Queues_QueueKey::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openconfig.openconfig_qos.Qos.Queues.QueueKey.name)
}
#endif
inline void Qos_Queues_QueueKey::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openconfig.openconfig_qos.Qos.Queues.QueueKey.name)
}
inline void Qos_Queues_QueueKey::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openconfig.openconfig_qos.Qos.Queues.QueueKey.name)
}
inline ::std::string* Qos_Queues_QueueKey::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Queues.QueueKey.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Qos_Queues_QueueKey::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Queues.QueueKey.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Qos_Queues_QueueKey::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Queues.QueueKey.name)
}

// .openconfig.openconfig_qos.Qos.Queues.Queue queue = 2;
inline bool Qos_Queues_QueueKey::has_queue() const {
  return this != internal_default_instance() && queue_ != NULL;
}
inline void Qos_Queues_QueueKey::clear_queue() {
  if (GetArenaNoVirtual() == NULL && queue_ != NULL) {
    delete queue_;
  }
  queue_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Queues_Queue& Qos_Queues_QueueKey::queue() const {
  const ::openconfig::openconfig_qos::Qos_Queues_Queue* p = queue_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Queues.QueueKey.queue)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Queues_Queue*>(
      &::openconfig::openconfig_qos::_Qos_Queues_Queue_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Queues_Queue* Qos_Queues_QueueKey::release_queue() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.Queues.QueueKey.queue)
  
  ::openconfig::openconfig_qos::Qos_Queues_Queue* temp = queue_;
  queue_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Queues_Queue* Qos_Queues_QueueKey::mutable_queue() {
  
  if (queue_ == NULL) {
    queue_ = new ::openconfig::openconfig_qos::Qos_Queues_Queue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Queues.QueueKey.queue)
  return queue_;
}
inline void Qos_Queues_QueueKey::set_allocated_queue(::openconfig::openconfig_qos::Qos_Queues_Queue* queue) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete queue_;
  }
  if (queue) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      queue = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, queue, submessage_arena);
    }
    
  } else {
    
  }
  queue_ = queue;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.Queues.QueueKey.queue)
}

// -------------------------------------------------------------------

// Qos_Queues

// repeated .openconfig.openconfig_qos.Qos.Queues.QueueKey queue = 108026875 [(.yext.schemapath) = "/qos/queues/queue"];
inline int Qos_Queues::queue_size() const {
  return queue_.size();
}
inline void Qos_Queues::clear_queue() {
  queue_.Clear();
}
inline const ::openconfig::openconfig_qos::Qos_Queues_QueueKey& Qos_Queues::queue(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.Queues.queue)
  return queue_.Get(index);
}
inline ::openconfig::openconfig_qos::Qos_Queues_QueueKey* Qos_Queues::mutable_queue(int index) {
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.Queues.queue)
  return queue_.Mutable(index);
}
inline ::openconfig::openconfig_qos::Qos_Queues_QueueKey* Qos_Queues::add_queue() {
  // @@protoc_insertion_point(field_add:openconfig.openconfig_qos.Qos.Queues.queue)
  return queue_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Queues_QueueKey >*
Qos_Queues::mutable_queue() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_qos.Qos.Queues.queue)
  return &queue_;
}
inline const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_Queues_QueueKey >&
Qos_Queues::queue() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_qos.Qos.Queues.queue)
  return queue_;
}

// -------------------------------------------------------------------

// Qos_SchedulerPolicies_SchedulerPolicy_Config

// .ywrapper.StringValue name = 15306115 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/config/name"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Config::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_SchedulerPolicies_SchedulerPolicy_Config::name() const {
  const ::ywrapper::StringValue* p = name_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Config.name)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_SchedulerPolicies_SchedulerPolicy_Config::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Config.name)
  
  ::ywrapper::StringValue* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_SchedulerPolicies_SchedulerPolicy_Config::mutable_name() {
  
  if (name_ == NULL) {
    name_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Config.name)
  return name_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Config::set_allocated_name(::ywrapper::StringValue* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Config.name)
}

// -------------------------------------------------------------------

// Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config.Priority priority = 116027193 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/priority"];
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::clear_priority() {
  priority_ = 0;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::priority() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config.priority)
  return static_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority >(priority_);
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::set_priority(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config.priority)
}

// .ywrapper.UintValue sequence = 189420374 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/sequence"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::has_sequence() const {
  return this != internal_default_instance() && sequence_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::sequence() const {
  const ::ywrapper::UintValue* p = sequence_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config.sequence)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::release_sequence() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config.sequence)
  
  ::ywrapper::UintValue* temp = sequence_;
  sequence_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::mutable_sequence() {
  
  if (sequence_ == NULL) {
    sequence_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config.sequence)
  return sequence_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::set_allocated_sequence(::ywrapper::UintValue* sequence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(sequence_);
  }
  if (sequence) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sequence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sequence, submessage_arena);
    }
    
  } else {
    
  }
  sequence_ = sequence;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config.sequence)
}

// .openconfig.enums.OpenconfigQosTypesQOSSCHEDULERTYPE type = 125973545 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/type"];
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::clear_type() {
  type_ = 0;
}
inline ::openconfig::enums::OpenconfigQosTypesQOSSCHEDULERTYPE Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::type() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config.type)
  return static_cast< ::openconfig::enums::OpenconfigQosTypesQOSSCHEDULERTYPE >(type_);
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config::set_type(::openconfig::enums::OpenconfigQosTypesQOSSCHEDULERTYPE value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config.type)
}

// -------------------------------------------------------------------

// Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config

// .ywrapper.StringValue id = 424446001 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/id"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::id() const {
  const ::ywrapper::StringValue* p = id_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config.id)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::release_id() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config.id)
  
  ::ywrapper::StringValue* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config.id)
  return id_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::set_allocated_id(::ywrapper::StringValue* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config.id)
}

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config.InputType input_type = 323155511 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/input-type"];
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::clear_input_type() {
  input_type_ = 0;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::input_type() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config.input_type)
  return static_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType >(input_type_);
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::set_input_type(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType value) {
  
  input_type_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config.input_type)
}

// .ywrapper.StringValue queue = 442686099 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/queue"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::has_queue() const {
  return this != internal_default_instance() && queue_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::queue() const {
  const ::ywrapper::StringValue* p = queue_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config.queue)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::release_queue() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config.queue)
  
  ::ywrapper::StringValue* temp = queue_;
  queue_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::mutable_queue() {
  
  if (queue_ == NULL) {
    queue_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config.queue)
  return queue_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::set_allocated_queue(::ywrapper::StringValue* queue) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(queue_);
  }
  if (queue) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      queue = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, queue, submessage_arena);
    }
    
  } else {
    
  }
  queue_ = queue;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config.queue)
}

// .ywrapper.UintValue weight = 396218658 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/weight"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::has_weight() const {
  return this != internal_default_instance() && weight_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::weight() const {
  const ::ywrapper::UintValue* p = weight_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config.weight)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::release_weight() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config.weight)
  
  ::ywrapper::UintValue* temp = weight_;
  weight_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::mutable_weight() {
  
  if (weight_ == NULL) {
    weight_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config.weight)
  return weight_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config::set_allocated_weight(::ywrapper::UintValue* weight) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(weight_);
  }
  if (weight) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      weight = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, weight, submessage_arena);
    }
    
  } else {
    
  }
  weight_ = weight;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config.weight)
}

// -------------------------------------------------------------------

// Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State

// .ywrapper.StringValue id = 321502496 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/id"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::id() const {
  const ::ywrapper::StringValue* p = id_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State.id)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::release_id() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State.id)
  
  ::ywrapper::StringValue* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State.id)
  return id_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::set_allocated_id(::ywrapper::StringValue* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State.id)
}

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State.InputType input_type = 255095878 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/input-type"];
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::clear_input_type() {
  input_type_ = 0;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::input_type() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State.input_type)
  return static_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType >(input_type_);
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::set_input_type(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType value) {
  
  input_type_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State.input_type)
}

// .ywrapper.StringValue queue = 285927912 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/queue"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::has_queue() const {
  return this != internal_default_instance() && queue_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::queue() const {
  const ::ywrapper::StringValue* p = queue_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State.queue)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::release_queue() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State.queue)
  
  ::ywrapper::StringValue* temp = queue_;
  queue_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::mutable_queue() {
  
  if (queue_ == NULL) {
    queue_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State.queue)
  return queue_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::set_allocated_queue(::ywrapper::StringValue* queue) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(queue_);
  }
  if (queue) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      queue = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, queue, submessage_arena);
    }
    
  } else {
    
  }
  queue_ = queue;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State.queue)
}

// .ywrapper.UintValue weight = 141802883 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/weight"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::has_weight() const {
  return this != internal_default_instance() && weight_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::weight() const {
  const ::ywrapper::UintValue* p = weight_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State.weight)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::release_weight() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State.weight)
  
  ::ywrapper::UintValue* temp = weight_;
  weight_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::mutable_weight() {
  
  if (weight_ == NULL) {
    weight_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State.weight)
  return weight_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State::set_allocated_weight(::ywrapper::UintValue* weight) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(weight_);
  }
  if (weight) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      weight = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, weight, submessage_arena);
    }
    
  } else {
    
  }
  weight_ = weight;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State.weight)
}

// -------------------------------------------------------------------

// Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.Config config = 362916871 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input::config() const {
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config*>(
      &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.config)
  
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.config)
  return config_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input::set_allocated_config(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.config)
}

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.State state = 308364152 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input::state() const {
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State*>(
      &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.state)
  
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.state)
  return state_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input::set_allocated_state(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input.state)
}

// -------------------------------------------------------------------

// Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey

// string id = 1 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/id"];
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::id() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey.id)
  return id_.GetNoArena();
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey.id)
}
#if LANG_CXX11
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey.id)
}
#endif
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey.id)
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey.id)
}
inline ::std::string* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::release_id() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey.id)
}

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.Input input = 2;
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::has_input() const {
  return this != internal_default_instance() && input_ != NULL;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::clear_input() {
  if (GetArenaNoVirtual() == NULL && input_ != NULL) {
    delete input_;
  }
  input_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::input() const {
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input* p = input_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey.input)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input*>(
      &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::release_input() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey.input)
  
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input* temp = input_;
  input_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::mutable_input() {
  
  if (input_ == NULL) {
    input_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey.input)
  return input_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey::set_allocated_input(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input* input) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete input_;
  }
  if (input) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      input = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey.input)
}

// -------------------------------------------------------------------

// Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs

// repeated .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.InputKey input = 224691974 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input"];
inline int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs::input_size() const {
  return input_.size();
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs::clear_input() {
  input_.Clear();
}
inline const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs::input(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.input)
  return input_.Get(index);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.input)
  return input_.Mutable(index);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs::add_input() {
  // @@protoc_insertion_point(field_add:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.input)
  return input_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey >*
Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.input)
  return &input_;
}
inline const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_InputKey >&
Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs::input() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs.input)
  return input_;
}

// -------------------------------------------------------------------

// Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config

// .ywrapper.UintValue bc = 100183769 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/bc"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::has_bc() const {
  return this != internal_default_instance() && bc_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::bc() const {
  const ::ywrapper::UintValue* p = bc_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config.bc)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::release_bc() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config.bc)
  
  ::ywrapper::UintValue* temp = bc_;
  bc_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::mutable_bc() {
  
  if (bc_ == NULL) {
    bc_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config.bc)
  return bc_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::set_allocated_bc(::ywrapper::UintValue* bc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(bc_);
  }
  if (bc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bc, submessage_arena);
    }
    
  } else {
    
  }
  bc_ = bc;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config.bc)
}

// .ywrapper.UintValue cir = 494749918 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/cir"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::has_cir() const {
  return this != internal_default_instance() && cir_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::cir() const {
  const ::ywrapper::UintValue* p = cir_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config.cir)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::release_cir() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config.cir)
  
  ::ywrapper::UintValue* temp = cir_;
  cir_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::mutable_cir() {
  
  if (cir_ == NULL) {
    cir_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config.cir)
  return cir_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::set_allocated_cir(::ywrapper::UintValue* cir) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(cir_);
  }
  if (cir) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cir = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cir, submessage_arena);
    }
    
  } else {
    
  }
  cir_ = cir;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config.cir)
}

// .ywrapper.UintValue cir_pct = 315109376 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/cir-pct"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::has_cir_pct() const {
  return this != internal_default_instance() && cir_pct_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::cir_pct() const {
  const ::ywrapper::UintValue* p = cir_pct_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config.cir_pct)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::release_cir_pct() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config.cir_pct)
  
  ::ywrapper::UintValue* temp = cir_pct_;
  cir_pct_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::mutable_cir_pct() {
  
  if (cir_pct_ == NULL) {
    cir_pct_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config.cir_pct)
  return cir_pct_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::set_allocated_cir_pct(::ywrapper::UintValue* cir_pct) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(cir_pct_);
  }
  if (cir_pct) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cir_pct = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cir_pct, submessage_arena);
    }
    
  } else {
    
  }
  cir_pct_ = cir_pct;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config.cir_pct)
}

// .ywrapper.UintValue cir_pct_remaining = 206933707 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/cir-pct-remaining"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::has_cir_pct_remaining() const {
  return this != internal_default_instance() && cir_pct_remaining_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::cir_pct_remaining() const {
  const ::ywrapper::UintValue* p = cir_pct_remaining_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config.cir_pct_remaining)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::release_cir_pct_remaining() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config.cir_pct_remaining)
  
  ::ywrapper::UintValue* temp = cir_pct_remaining_;
  cir_pct_remaining_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::mutable_cir_pct_remaining() {
  
  if (cir_pct_remaining_ == NULL) {
    cir_pct_remaining_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config.cir_pct_remaining)
  return cir_pct_remaining_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::set_allocated_cir_pct_remaining(::ywrapper::UintValue* cir_pct_remaining) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(cir_pct_remaining_);
  }
  if (cir_pct_remaining) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cir_pct_remaining = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cir_pct_remaining, submessage_arena);
    }
    
  } else {
    
  }
  cir_pct_remaining_ = cir_pct_remaining;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config.cir_pct_remaining)
}

// .ywrapper.UintValue max_queue_depth_bytes = 279197854 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/max-queue-depth-bytes"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::has_max_queue_depth_bytes() const {
  return this != internal_default_instance() && max_queue_depth_bytes_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::max_queue_depth_bytes() const {
  const ::ywrapper::UintValue* p = max_queue_depth_bytes_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config.max_queue_depth_bytes)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::release_max_queue_depth_bytes() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config.max_queue_depth_bytes)
  
  ::ywrapper::UintValue* temp = max_queue_depth_bytes_;
  max_queue_depth_bytes_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::mutable_max_queue_depth_bytes() {
  
  if (max_queue_depth_bytes_ == NULL) {
    max_queue_depth_bytes_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config.max_queue_depth_bytes)
  return max_queue_depth_bytes_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::set_allocated_max_queue_depth_bytes(::ywrapper::UintValue* max_queue_depth_bytes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(max_queue_depth_bytes_);
  }
  if (max_queue_depth_bytes) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      max_queue_depth_bytes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, max_queue_depth_bytes, submessage_arena);
    }
    
  } else {
    
  }
  max_queue_depth_bytes_ = max_queue_depth_bytes;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config.max_queue_depth_bytes)
}

// .ywrapper.UintValue max_queue_depth_packets = 38247640 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/max-queue-depth-packets"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::has_max_queue_depth_packets() const {
  return this != internal_default_instance() && max_queue_depth_packets_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::max_queue_depth_packets() const {
  const ::ywrapper::UintValue* p = max_queue_depth_packets_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config.max_queue_depth_packets)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::release_max_queue_depth_packets() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config.max_queue_depth_packets)
  
  ::ywrapper::UintValue* temp = max_queue_depth_packets_;
  max_queue_depth_packets_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::mutable_max_queue_depth_packets() {
  
  if (max_queue_depth_packets_ == NULL) {
    max_queue_depth_packets_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config.max_queue_depth_packets)
  return max_queue_depth_packets_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::set_allocated_max_queue_depth_packets(::ywrapper::UintValue* max_queue_depth_packets) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(max_queue_depth_packets_);
  }
  if (max_queue_depth_packets) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      max_queue_depth_packets = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, max_queue_depth_packets, submessage_arena);
    }
    
  } else {
    
  }
  max_queue_depth_packets_ = max_queue_depth_packets;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config.max_queue_depth_packets)
}

// .ywrapper.UintValue max_queue_depth_percent = 466868204 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/max-queue-depth-percent"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::has_max_queue_depth_percent() const {
  return this != internal_default_instance() && max_queue_depth_percent_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::max_queue_depth_percent() const {
  const ::ywrapper::UintValue* p = max_queue_depth_percent_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config.max_queue_depth_percent)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::release_max_queue_depth_percent() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config.max_queue_depth_percent)
  
  ::ywrapper::UintValue* temp = max_queue_depth_percent_;
  max_queue_depth_percent_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::mutable_max_queue_depth_percent() {
  
  if (max_queue_depth_percent_ == NULL) {
    max_queue_depth_percent_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config.max_queue_depth_percent)
  return max_queue_depth_percent_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::set_allocated_max_queue_depth_percent(::ywrapper::UintValue* max_queue_depth_percent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(max_queue_depth_percent_);
  }
  if (max_queue_depth_percent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      max_queue_depth_percent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, max_queue_depth_percent, submessage_arena);
    }
    
  } else {
    
  }
  max_queue_depth_percent_ = max_queue_depth_percent;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config.max_queue_depth_percent)
}

// .openconfig.enums.OpenconfigQosQueueBehavior queuing_behavior = 78239583 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config/queuing-behavior"];
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::clear_queuing_behavior() {
  queuing_behavior_ = 0;
}
inline ::openconfig::enums::OpenconfigQosQueueBehavior Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::queuing_behavior() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config.queuing_behavior)
  return static_cast< ::openconfig::enums::OpenconfigQosQueueBehavior >(queuing_behavior_);
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config::set_queuing_behavior(::openconfig::enums::OpenconfigQosQueueBehavior value) {
  
  queuing_behavior_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config.queuing_behavior)
}

// -------------------------------------------------------------------

// Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config

// .ywrapper.UintValue set_dot1p = 347963663 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/config/set-dot1p"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::has_set_dot1p() const {
  return this != internal_default_instance() && set_dot1p_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::set_dot1p() const {
  const ::ywrapper::UintValue* p = set_dot1p_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config.set_dot1p)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::release_set_dot1p() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config.set_dot1p)
  
  ::ywrapper::UintValue* temp = set_dot1p_;
  set_dot1p_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::mutable_set_dot1p() {
  
  if (set_dot1p_ == NULL) {
    set_dot1p_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config.set_dot1p)
  return set_dot1p_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::set_allocated_set_dot1p(::ywrapper::UintValue* set_dot1p) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(set_dot1p_);
  }
  if (set_dot1p) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_dot1p = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_dot1p, submessage_arena);
    }
    
  } else {
    
  }
  set_dot1p_ = set_dot1p;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config.set_dot1p)
}

// .ywrapper.UintValue set_dscp = 274036909 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/config/set-dscp"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::has_set_dscp() const {
  return this != internal_default_instance() && set_dscp_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::set_dscp() const {
  const ::ywrapper::UintValue* p = set_dscp_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config.set_dscp)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::release_set_dscp() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config.set_dscp)
  
  ::ywrapper::UintValue* temp = set_dscp_;
  set_dscp_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::mutable_set_dscp() {
  
  if (set_dscp_ == NULL) {
    set_dscp_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config.set_dscp)
  return set_dscp_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::set_allocated_set_dscp(::ywrapper::UintValue* set_dscp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(set_dscp_);
  }
  if (set_dscp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_dscp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_dscp, submessage_arena);
    }
    
  } else {
    
  }
  set_dscp_ = set_dscp;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config.set_dscp)
}

// .ywrapper.UintValue set_mpls_tc = 407069875 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/config/set-mpls-tc"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::has_set_mpls_tc() const {
  return this != internal_default_instance() && set_mpls_tc_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::set_mpls_tc() const {
  const ::ywrapper::UintValue* p = set_mpls_tc_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config.set_mpls_tc)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::release_set_mpls_tc() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config.set_mpls_tc)
  
  ::ywrapper::UintValue* temp = set_mpls_tc_;
  set_mpls_tc_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::mutable_set_mpls_tc() {
  
  if (set_mpls_tc_ == NULL) {
    set_mpls_tc_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config.set_mpls_tc)
  return set_mpls_tc_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config::set_allocated_set_mpls_tc(::ywrapper::UintValue* set_mpls_tc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(set_mpls_tc_);
  }
  if (set_mpls_tc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_mpls_tc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_mpls_tc, submessage_arena);
    }
    
  } else {
    
  }
  set_mpls_tc_ = set_mpls_tc;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config.set_mpls_tc)
}

// -------------------------------------------------------------------

// Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State

// .ywrapper.UintValue set_dot1p = 381011320 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-dot1p"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::has_set_dot1p() const {
  return this != internal_default_instance() && set_dot1p_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::set_dot1p() const {
  const ::ywrapper::UintValue* p = set_dot1p_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State.set_dot1p)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::release_set_dot1p() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State.set_dot1p)
  
  ::ywrapper::UintValue* temp = set_dot1p_;
  set_dot1p_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::mutable_set_dot1p() {
  
  if (set_dot1p_ == NULL) {
    set_dot1p_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State.set_dot1p)
  return set_dot1p_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::set_allocated_set_dot1p(::ywrapper::UintValue* set_dot1p) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(set_dot1p_);
  }
  if (set_dot1p) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_dot1p = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_dot1p, submessage_arena);
    }
    
  } else {
    
  }
  set_dot1p_ = set_dot1p;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State.set_dot1p)
}

// .ywrapper.UintValue set_dscp = 167728608 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-dscp"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::has_set_dscp() const {
  return this != internal_default_instance() && set_dscp_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::set_dscp() const {
  const ::ywrapper::UintValue* p = set_dscp_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State.set_dscp)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::release_set_dscp() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State.set_dscp)
  
  ::ywrapper::UintValue* temp = set_dscp_;
  set_dscp_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::mutable_set_dscp() {
  
  if (set_dscp_ == NULL) {
    set_dscp_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State.set_dscp)
  return set_dscp_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::set_allocated_set_dscp(::ywrapper::UintValue* set_dscp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(set_dscp_);
  }
  if (set_dscp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_dscp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_dscp, submessage_arena);
    }
    
  } else {
    
  }
  set_dscp_ = set_dscp;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State.set_dscp)
}

// .ywrapper.UintValue set_mpls_tc = 205338668 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state/set-mpls-tc"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::has_set_mpls_tc() const {
  return this != internal_default_instance() && set_mpls_tc_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::set_mpls_tc() const {
  const ::ywrapper::UintValue* p = set_mpls_tc_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State.set_mpls_tc)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::release_set_mpls_tc() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State.set_mpls_tc)
  
  ::ywrapper::UintValue* temp = set_mpls_tc_;
  set_mpls_tc_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::mutable_set_mpls_tc() {
  
  if (set_mpls_tc_ == NULL) {
    set_mpls_tc_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State.set_mpls_tc)
  return set_mpls_tc_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State::set_allocated_set_mpls_tc(::ywrapper::UintValue* set_mpls_tc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(set_mpls_tc_);
  }
  if (set_mpls_tc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_mpls_tc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_mpls_tc, submessage_arena);
    }
    
  } else {
    
  }
  set_mpls_tc_ = set_mpls_tc;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State.set_mpls_tc)
}

// -------------------------------------------------------------------

// Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.Config config = 263196799 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/config"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction::config() const {
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config*>(
      &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.config)
  
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.config)
  return config_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction::set_allocated_config(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.config)
}

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.State state = 488106672 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction::state() const {
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State*>(
      &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.state)
  
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.state)
  return state_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction::set_allocated_state(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction.state)
}

// -------------------------------------------------------------------

// Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config

// .ywrapper.BoolValue drop = 131419485 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config/drop"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::has_drop() const {
  return this != internal_default_instance() && drop_ != NULL;
}
inline const ::ywrapper::BoolValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::drop() const {
  const ::ywrapper::BoolValue* p = drop_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config.drop)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::release_drop() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config.drop)
  
  ::ywrapper::BoolValue* temp = drop_;
  drop_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::mutable_drop() {
  
  if (drop_ == NULL) {
    drop_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config.drop)
  return drop_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::set_allocated_drop(::ywrapper::BoolValue* drop) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(drop_);
  }
  if (drop) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      drop = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, drop, submessage_arena);
    }
    
  } else {
    
  }
  drop_ = drop;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config.drop)
}

// .ywrapper.UintValue set_dot1p = 431798715 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config/set-dot1p"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::has_set_dot1p() const {
  return this != internal_default_instance() && set_dot1p_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::set_dot1p() const {
  const ::ywrapper::UintValue* p = set_dot1p_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config.set_dot1p)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::release_set_dot1p() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config.set_dot1p)
  
  ::ywrapper::UintValue* temp = set_dot1p_;
  set_dot1p_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::mutable_set_dot1p() {
  
  if (set_dot1p_ == NULL) {
    set_dot1p_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config.set_dot1p)
  return set_dot1p_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::set_allocated_set_dot1p(::ywrapper::UintValue* set_dot1p) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(set_dot1p_);
  }
  if (set_dot1p) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_dot1p = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_dot1p, submessage_arena);
    }
    
  } else {
    
  }
  set_dot1p_ = set_dot1p;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config.set_dot1p)
}

// .ywrapper.UintValue set_dscp = 70544401 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config/set-dscp"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::has_set_dscp() const {
  return this != internal_default_instance() && set_dscp_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::set_dscp() const {
  const ::ywrapper::UintValue* p = set_dscp_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config.set_dscp)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::release_set_dscp() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config.set_dscp)
  
  ::ywrapper::UintValue* temp = set_dscp_;
  set_dscp_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::mutable_set_dscp() {
  
  if (set_dscp_ == NULL) {
    set_dscp_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config.set_dscp)
  return set_dscp_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::set_allocated_set_dscp(::ywrapper::UintValue* set_dscp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(set_dscp_);
  }
  if (set_dscp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_dscp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_dscp, submessage_arena);
    }
    
  } else {
    
  }
  set_dscp_ = set_dscp;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config.set_dscp)
}

// .ywrapper.UintValue set_mpls_tc = 156774487 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config/set-mpls-tc"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::has_set_mpls_tc() const {
  return this != internal_default_instance() && set_mpls_tc_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::set_mpls_tc() const {
  const ::ywrapper::UintValue* p = set_mpls_tc_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config.set_mpls_tc)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::release_set_mpls_tc() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config.set_mpls_tc)
  
  ::ywrapper::UintValue* temp = set_mpls_tc_;
  set_mpls_tc_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::mutable_set_mpls_tc() {
  
  if (set_mpls_tc_ == NULL) {
    set_mpls_tc_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config.set_mpls_tc)
  return set_mpls_tc_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config::set_allocated_set_mpls_tc(::ywrapper::UintValue* set_mpls_tc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(set_mpls_tc_);
  }
  if (set_mpls_tc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_mpls_tc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_mpls_tc, submessage_arena);
    }
    
  } else {
    
  }
  set_mpls_tc_ = set_mpls_tc;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config.set_mpls_tc)
}

// -------------------------------------------------------------------

// Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State

// .ywrapper.BoolValue drop = 168830944 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/drop"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::has_drop() const {
  return this != internal_default_instance() && drop_ != NULL;
}
inline const ::ywrapper::BoolValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::drop() const {
  const ::ywrapper::BoolValue* p = drop_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State.drop)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::release_drop() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State.drop)
  
  ::ywrapper::BoolValue* temp = drop_;
  drop_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::mutable_drop() {
  
  if (drop_ == NULL) {
    drop_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State.drop)
  return drop_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::set_allocated_drop(::ywrapper::BoolValue* drop) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(drop_);
  }
  if (drop) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      drop = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, drop, submessage_arena);
    }
    
  } else {
    
  }
  drop_ = drop;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State.drop)
}

// .ywrapper.UintValue set_dot1p = 132458132 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-dot1p"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::has_set_dot1p() const {
  return this != internal_default_instance() && set_dot1p_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::set_dot1p() const {
  const ::ywrapper::UintValue* p = set_dot1p_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State.set_dot1p)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::release_set_dot1p() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State.set_dot1p)
  
  ::ywrapper::UintValue* temp = set_dot1p_;
  set_dot1p_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::mutable_set_dot1p() {
  
  if (set_dot1p_ == NULL) {
    set_dot1p_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State.set_dot1p)
  return set_dot1p_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::set_allocated_set_dot1p(::ywrapper::UintValue* set_dot1p) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(set_dot1p_);
  }
  if (set_dot1p) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_dot1p = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_dot1p, submessage_arena);
    }
    
  } else {
    
  }
  set_dot1p_ = set_dot1p;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State.set_dot1p)
}

// .ywrapper.UintValue set_dscp = 500275780 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-dscp"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::has_set_dscp() const {
  return this != internal_default_instance() && set_dscp_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::set_dscp() const {
  const ::ywrapper::UintValue* p = set_dscp_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State.set_dscp)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::release_set_dscp() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State.set_dscp)
  
  ::ywrapper::UintValue* temp = set_dscp_;
  set_dscp_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::mutable_set_dscp() {
  
  if (set_dscp_ == NULL) {
    set_dscp_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State.set_dscp)
  return set_dscp_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::set_allocated_set_dscp(::ywrapper::UintValue* set_dscp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(set_dscp_);
  }
  if (set_dscp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_dscp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_dscp, submessage_arena);
    }
    
  } else {
    
  }
  set_dscp_ = set_dscp;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State.set_dscp)
}

// .ywrapper.UintValue set_mpls_tc = 94135584 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state/set-mpls-tc"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::has_set_mpls_tc() const {
  return this != internal_default_instance() && set_mpls_tc_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::set_mpls_tc() const {
  const ::ywrapper::UintValue* p = set_mpls_tc_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State.set_mpls_tc)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::release_set_mpls_tc() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State.set_mpls_tc)
  
  ::ywrapper::UintValue* temp = set_mpls_tc_;
  set_mpls_tc_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::mutable_set_mpls_tc() {
  
  if (set_mpls_tc_ == NULL) {
    set_mpls_tc_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State.set_mpls_tc)
  return set_mpls_tc_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State::set_allocated_set_mpls_tc(::ywrapper::UintValue* set_mpls_tc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(set_mpls_tc_);
  }
  if (set_mpls_tc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_mpls_tc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_mpls_tc, submessage_arena);
    }
    
  } else {
    
  }
  set_mpls_tc_ = set_mpls_tc;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State.set_mpls_tc)
}

// -------------------------------------------------------------------

// Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.Config config = 333494515 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction::config() const {
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config*>(
      &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.config)
  
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.config)
  return config_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction::set_allocated_config(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.config)
}

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.State state = 362036052 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction::state() const {
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State*>(
      &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.state)
  
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.state)
  return state_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction::set_allocated_state(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction.state)
}

// -------------------------------------------------------------------

// Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State

// .ywrapper.UintValue bc = 76345220 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/bc"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::has_bc() const {
  return this != internal_default_instance() && bc_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::bc() const {
  const ::ywrapper::UintValue* p = bc_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State.bc)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::release_bc() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State.bc)
  
  ::ywrapper::UintValue* temp = bc_;
  bc_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::mutable_bc() {
  
  if (bc_ == NULL) {
    bc_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State.bc)
  return bc_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::set_allocated_bc(::ywrapper::UintValue* bc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(bc_);
  }
  if (bc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bc, submessage_arena);
    }
    
  } else {
    
  }
  bc_ = bc;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State.bc)
}

// .ywrapper.UintValue cir = 333122165 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::has_cir() const {
  return this != internal_default_instance() && cir_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::cir() const {
  const ::ywrapper::UintValue* p = cir_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State.cir)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::release_cir() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State.cir)
  
  ::ywrapper::UintValue* temp = cir_;
  cir_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::mutable_cir() {
  
  if (cir_ == NULL) {
    cir_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State.cir)
  return cir_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::set_allocated_cir(::ywrapper::UintValue* cir) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(cir_);
  }
  if (cir) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cir = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cir, submessage_arena);
    }
    
  } else {
    
  }
  cir_ = cir;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State.cir)
}

// .ywrapper.UintValue cir_pct = 102978535 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir-pct"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::has_cir_pct() const {
  return this != internal_default_instance() && cir_pct_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::cir_pct() const {
  const ::ywrapper::UintValue* p = cir_pct_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State.cir_pct)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::release_cir_pct() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State.cir_pct)
  
  ::ywrapper::UintValue* temp = cir_pct_;
  cir_pct_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::mutable_cir_pct() {
  
  if (cir_pct_ == NULL) {
    cir_pct_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State.cir_pct)
  return cir_pct_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::set_allocated_cir_pct(::ywrapper::UintValue* cir_pct) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(cir_pct_);
  }
  if (cir_pct) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cir_pct = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cir_pct, submessage_arena);
    }
    
  } else {
    
  }
  cir_pct_ = cir_pct;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State.cir_pct)
}

// .ywrapper.UintValue cir_pct_remaining = 286997148 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir-pct-remaining"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::has_cir_pct_remaining() const {
  return this != internal_default_instance() && cir_pct_remaining_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::cir_pct_remaining() const {
  const ::ywrapper::UintValue* p = cir_pct_remaining_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State.cir_pct_remaining)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::release_cir_pct_remaining() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State.cir_pct_remaining)
  
  ::ywrapper::UintValue* temp = cir_pct_remaining_;
  cir_pct_remaining_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::mutable_cir_pct_remaining() {
  
  if (cir_pct_remaining_ == NULL) {
    cir_pct_remaining_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State.cir_pct_remaining)
  return cir_pct_remaining_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::set_allocated_cir_pct_remaining(::ywrapper::UintValue* cir_pct_remaining) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(cir_pct_remaining_);
  }
  if (cir_pct_remaining) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cir_pct_remaining = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cir_pct_remaining, submessage_arena);
    }
    
  } else {
    
  }
  cir_pct_remaining_ = cir_pct_remaining;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State.cir_pct_remaining)
}

// .ywrapper.UintValue max_queue_depth_bytes = 118786445 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-bytes"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::has_max_queue_depth_bytes() const {
  return this != internal_default_instance() && max_queue_depth_bytes_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::max_queue_depth_bytes() const {
  const ::ywrapper::UintValue* p = max_queue_depth_bytes_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State.max_queue_depth_bytes)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::release_max_queue_depth_bytes() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State.max_queue_depth_bytes)
  
  ::ywrapper::UintValue* temp = max_queue_depth_bytes_;
  max_queue_depth_bytes_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::mutable_max_queue_depth_bytes() {
  
  if (max_queue_depth_bytes_ == NULL) {
    max_queue_depth_bytes_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State.max_queue_depth_bytes)
  return max_queue_depth_bytes_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::set_allocated_max_queue_depth_bytes(::ywrapper::UintValue* max_queue_depth_bytes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(max_queue_depth_bytes_);
  }
  if (max_queue_depth_bytes) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      max_queue_depth_bytes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, max_queue_depth_bytes, submessage_arena);
    }
    
  } else {
    
  }
  max_queue_depth_bytes_ = max_queue_depth_bytes;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State.max_queue_depth_bytes)
}

// .ywrapper.UintValue max_queue_depth_packets = 339691679 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-packets"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::has_max_queue_depth_packets() const {
  return this != internal_default_instance() && max_queue_depth_packets_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::max_queue_depth_packets() const {
  const ::ywrapper::UintValue* p = max_queue_depth_packets_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State.max_queue_depth_packets)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::release_max_queue_depth_packets() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State.max_queue_depth_packets)
  
  ::ywrapper::UintValue* temp = max_queue_depth_packets_;
  max_queue_depth_packets_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::mutable_max_queue_depth_packets() {
  
  if (max_queue_depth_packets_ == NULL) {
    max_queue_depth_packets_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State.max_queue_depth_packets)
  return max_queue_depth_packets_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::set_allocated_max_queue_depth_packets(::ywrapper::UintValue* max_queue_depth_packets) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(max_queue_depth_packets_);
  }
  if (max_queue_depth_packets) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      max_queue_depth_packets = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, max_queue_depth_packets, submessage_arena);
    }
    
  } else {
    
  }
  max_queue_depth_packets_ = max_queue_depth_packets;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State.max_queue_depth_packets)
}

// .ywrapper.UintValue max_queue_depth_percent = 99186575 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-percent"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::has_max_queue_depth_percent() const {
  return this != internal_default_instance() && max_queue_depth_percent_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::max_queue_depth_percent() const {
  const ::ywrapper::UintValue* p = max_queue_depth_percent_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State.max_queue_depth_percent)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::release_max_queue_depth_percent() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State.max_queue_depth_percent)
  
  ::ywrapper::UintValue* temp = max_queue_depth_percent_;
  max_queue_depth_percent_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::mutable_max_queue_depth_percent() {
  
  if (max_queue_depth_percent_ == NULL) {
    max_queue_depth_percent_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State.max_queue_depth_percent)
  return max_queue_depth_percent_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::set_allocated_max_queue_depth_percent(::ywrapper::UintValue* max_queue_depth_percent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(max_queue_depth_percent_);
  }
  if (max_queue_depth_percent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      max_queue_depth_percent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, max_queue_depth_percent, submessage_arena);
    }
    
  } else {
    
  }
  max_queue_depth_percent_ = max_queue_depth_percent;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State.max_queue_depth_percent)
}

// .openconfig.enums.OpenconfigQosQueueBehavior queuing_behavior = 225811202 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/queuing-behavior"];
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::clear_queuing_behavior() {
  queuing_behavior_ = 0;
}
inline ::openconfig::enums::OpenconfigQosQueueBehavior Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::queuing_behavior() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State.queuing_behavior)
  return static_cast< ::openconfig::enums::OpenconfigQosQueueBehavior >(queuing_behavior_);
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State::set_queuing_behavior(::openconfig::enums::OpenconfigQosQueueBehavior value) {
  
  queuing_behavior_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State.queuing_behavior)
}

// -------------------------------------------------------------------

// Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.Config config = 473487161 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::config() const {
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config*>(
      &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.config)
  
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.config)
  return config_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::set_allocated_config(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.config)
}

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ConformAction conform_action = 29149902 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::has_conform_action() const {
  return this != internal_default_instance() && conform_action_ != NULL;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::clear_conform_action() {
  if (GetArenaNoVirtual() == NULL && conform_action_ != NULL) {
    delete conform_action_;
  }
  conform_action_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::conform_action() const {
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction* p = conform_action_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.conform_action)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction*>(
      &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::release_conform_action() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.conform_action)
  
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction* temp = conform_action_;
  conform_action_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::mutable_conform_action() {
  
  if (conform_action_ == NULL) {
    conform_action_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.conform_action)
  return conform_action_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::set_allocated_conform_action(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ConformAction* conform_action) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete conform_action_;
  }
  if (conform_action) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      conform_action = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, conform_action, submessage_arena);
    }
    
  } else {
    
  }
  conform_action_ = conform_action;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.conform_action)
}

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.ExceedAction exceed_action = 297338034 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::has_exceed_action() const {
  return this != internal_default_instance() && exceed_action_ != NULL;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::clear_exceed_action() {
  if (GetArenaNoVirtual() == NULL && exceed_action_ != NULL) {
    delete exceed_action_;
  }
  exceed_action_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::exceed_action() const {
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction* p = exceed_action_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.exceed_action)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction*>(
      &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::release_exceed_action() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.exceed_action)
  
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction* temp = exceed_action_;
  exceed_action_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::mutable_exceed_action() {
  
  if (exceed_action_ == NULL) {
    exceed_action_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.exceed_action)
  return exceed_action_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::set_allocated_exceed_action(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_ExceedAction* exceed_action) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete exceed_action_;
  }
  if (exceed_action) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      exceed_action = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exceed_action, submessage_arena);
    }
    
  } else {
    
  }
  exceed_action_ = exceed_action;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.exceed_action)
}

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.State state = 437562510 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::state() const {
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State*>(
      &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.state)
  
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.state)
  return state_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor::set_allocated_state(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor.state)
}

// -------------------------------------------------------------------

// Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config

// .ywrapper.StringValue child_scheduler = 101554311 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config/child-scheduler"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::has_child_scheduler() const {
  return this != internal_default_instance() && child_scheduler_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::child_scheduler() const {
  const ::ywrapper::StringValue* p = child_scheduler_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config.child_scheduler)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::release_child_scheduler() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config.child_scheduler)
  
  ::ywrapper::StringValue* temp = child_scheduler_;
  child_scheduler_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::mutable_child_scheduler() {
  
  if (child_scheduler_ == NULL) {
    child_scheduler_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config.child_scheduler)
  return child_scheduler_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::set_allocated_child_scheduler(::ywrapper::StringValue* child_scheduler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(child_scheduler_);
  }
  if (child_scheduler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      child_scheduler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, child_scheduler, submessage_arena);
    }
    
  } else {
    
  }
  child_scheduler_ = child_scheduler;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config.child_scheduler)
}

// .ywrapper.StringValue output_fwd_group = 283910326 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config/output-fwd-group"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::has_output_fwd_group() const {
  return this != internal_default_instance() && output_fwd_group_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::output_fwd_group() const {
  const ::ywrapper::StringValue* p = output_fwd_group_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config.output_fwd_group)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::release_output_fwd_group() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config.output_fwd_group)
  
  ::ywrapper::StringValue* temp = output_fwd_group_;
  output_fwd_group_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::mutable_output_fwd_group() {
  
  if (output_fwd_group_ == NULL) {
    output_fwd_group_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config.output_fwd_group)
  return output_fwd_group_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::set_allocated_output_fwd_group(::ywrapper::StringValue* output_fwd_group) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(output_fwd_group_);
  }
  if (output_fwd_group) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      output_fwd_group = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, output_fwd_group, submessage_arena);
    }
    
  } else {
    
  }
  output_fwd_group_ = output_fwd_group;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config.output_fwd_group)
}

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config.OutputType output_type = 485674633 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config/output-type"];
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::clear_output_type() {
  output_type_ = 0;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::output_type() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config.output_type)
  return static_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType >(output_type_);
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config::set_output_type(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType value) {
  
  output_type_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config.output_type)
}

// -------------------------------------------------------------------

// Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State

// .ywrapper.StringValue child_scheduler = 493732510 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/child-scheduler"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::has_child_scheduler() const {
  return this != internal_default_instance() && child_scheduler_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::child_scheduler() const {
  const ::ywrapper::StringValue* p = child_scheduler_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State.child_scheduler)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::release_child_scheduler() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State.child_scheduler)
  
  ::ywrapper::StringValue* temp = child_scheduler_;
  child_scheduler_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::mutable_child_scheduler() {
  
  if (child_scheduler_ == NULL) {
    child_scheduler_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State.child_scheduler)
  return child_scheduler_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::set_allocated_child_scheduler(::ywrapper::StringValue* child_scheduler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(child_scheduler_);
  }
  if (child_scheduler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      child_scheduler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, child_scheduler, submessage_arena);
    }
    
  } else {
    
  }
  child_scheduler_ = child_scheduler;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State.child_scheduler)
}

// .ywrapper.StringValue output_fwd_group = 475276361 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/output-fwd-group"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::has_output_fwd_group() const {
  return this != internal_default_instance() && output_fwd_group_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::output_fwd_group() const {
  const ::ywrapper::StringValue* p = output_fwd_group_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State.output_fwd_group)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::release_output_fwd_group() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State.output_fwd_group)
  
  ::ywrapper::StringValue* temp = output_fwd_group_;
  output_fwd_group_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::mutable_output_fwd_group() {
  
  if (output_fwd_group_ == NULL) {
    output_fwd_group_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State.output_fwd_group)
  return output_fwd_group_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::set_allocated_output_fwd_group(::ywrapper::StringValue* output_fwd_group) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(output_fwd_group_);
  }
  if (output_fwd_group) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      output_fwd_group = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, output_fwd_group, submessage_arena);
    }
    
  } else {
    
  }
  output_fwd_group_ = output_fwd_group;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State.output_fwd_group)
}

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State.OutputType output_type = 322389940 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/output-type"];
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::clear_output_type() {
  output_type_ = 0;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::output_type() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State.output_type)
  return static_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType >(output_type_);
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State::set_output_type(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType value) {
  
  output_type_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State.output_type)
}

// -------------------------------------------------------------------

// Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.Config config = 210934496 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output::config() const {
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config*>(
      &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.config)
  
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.config)
  return config_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output::set_allocated_config(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.config)
}

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.State state = 378101593 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output::state() const {
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State*>(
      &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.state)
  
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.state)
  return state_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output::set_allocated_state(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output.state)
}

// -------------------------------------------------------------------

// Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State.Priority priority = 187259654 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/priority"];
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::clear_priority() {
  priority_ = 0;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::priority() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State.priority)
  return static_cast< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority >(priority_);
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::set_priority(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State.priority)
}

// .ywrapper.UintValue sequence = 280455557 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/sequence"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::has_sequence() const {
  return this != internal_default_instance() && sequence_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::sequence() const {
  const ::ywrapper::UintValue* p = sequence_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State.sequence)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::release_sequence() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State.sequence)
  
  ::ywrapper::UintValue* temp = sequence_;
  sequence_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::mutable_sequence() {
  
  if (sequence_ == NULL) {
    sequence_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State.sequence)
  return sequence_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::set_allocated_sequence(::ywrapper::UintValue* sequence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(sequence_);
  }
  if (sequence) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sequence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sequence, submessage_arena);
    }
    
  } else {
    
  }
  sequence_ = sequence;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State.sequence)
}

// .openconfig.enums.OpenconfigQosTypesQOSSCHEDULERTYPE type = 13202618 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/type"];
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::clear_type() {
  type_ = 0;
}
inline ::openconfig::enums::OpenconfigQosTypesQOSSCHEDULERTYPE Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::type() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State.type)
  return static_cast< ::openconfig::enums::OpenconfigQosTypesQOSSCHEDULERTYPE >(type_);
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State::set_type(::openconfig::enums::OpenconfigQosTypesQOSSCHEDULERTYPE value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State.type)
}

// -------------------------------------------------------------------

// Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config

// .ywrapper.UintValue bc = 488133689 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/bc"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::has_bc() const {
  return this != internal_default_instance() && bc_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::bc() const {
  const ::ywrapper::UintValue* p = bc_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config.bc)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::release_bc() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config.bc)
  
  ::ywrapper::UintValue* temp = bc_;
  bc_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::mutable_bc() {
  
  if (bc_ == NULL) {
    bc_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config.bc)
  return bc_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::set_allocated_bc(::ywrapper::UintValue* bc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(bc_);
  }
  if (bc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bc, submessage_arena);
    }
    
  } else {
    
  }
  bc_ = bc;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config.bc)
}

// .ywrapper.UintValue be = 488133695 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/be"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::has_be() const {
  return this != internal_default_instance() && be_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::be() const {
  const ::ywrapper::UintValue* p = be_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config.be)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::release_be() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config.be)
  
  ::ywrapper::UintValue* temp = be_;
  be_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::mutable_be() {
  
  if (be_ == NULL) {
    be_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config.be)
  return be_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::set_allocated_be(::ywrapper::UintValue* be) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(be_);
  }
  if (be) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      be = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, be, submessage_arena);
    }
    
  } else {
    
  }
  be_ = be;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config.be)
}

// .ywrapper.UintValue cir = 72261310 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/cir"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::has_cir() const {
  return this != internal_default_instance() && cir_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::cir() const {
  const ::ywrapper::UintValue* p = cir_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config.cir)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::release_cir() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config.cir)
  
  ::ywrapper::UintValue* temp = cir_;
  cir_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::mutable_cir() {
  
  if (cir_ == NULL) {
    cir_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config.cir)
  return cir_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::set_allocated_cir(::ywrapper::UintValue* cir) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(cir_);
  }
  if (cir) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cir = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cir, submessage_arena);
    }
    
  } else {
    
  }
  cir_ = cir;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config.cir)
}

// .ywrapper.UintValue cir_pct = 148455776 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/cir-pct"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::has_cir_pct() const {
  return this != internal_default_instance() && cir_pct_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::cir_pct() const {
  const ::ywrapper::UintValue* p = cir_pct_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config.cir_pct)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::release_cir_pct() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config.cir_pct)
  
  ::ywrapper::UintValue* temp = cir_pct_;
  cir_pct_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::mutable_cir_pct() {
  
  if (cir_pct_ == NULL) {
    cir_pct_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config.cir_pct)
  return cir_pct_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::set_allocated_cir_pct(::ywrapper::UintValue* cir_pct) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(cir_pct_);
  }
  if (cir_pct) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cir_pct = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cir_pct, submessage_arena);
    }
    
  } else {
    
  }
  cir_pct_ = cir_pct;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config.cir_pct)
}

// .ywrapper.UintValue cir_pct_remaining = 426598443 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/cir-pct-remaining"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::has_cir_pct_remaining() const {
  return this != internal_default_instance() && cir_pct_remaining_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::cir_pct_remaining() const {
  const ::ywrapper::UintValue* p = cir_pct_remaining_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config.cir_pct_remaining)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::release_cir_pct_remaining() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config.cir_pct_remaining)
  
  ::ywrapper::UintValue* temp = cir_pct_remaining_;
  cir_pct_remaining_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::mutable_cir_pct_remaining() {
  
  if (cir_pct_remaining_ == NULL) {
    cir_pct_remaining_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config.cir_pct_remaining)
  return cir_pct_remaining_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::set_allocated_cir_pct_remaining(::ywrapper::UintValue* cir_pct_remaining) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(cir_pct_remaining_);
  }
  if (cir_pct_remaining) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cir_pct_remaining = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cir_pct_remaining, submessage_arena);
    }
    
  } else {
    
  }
  cir_pct_remaining_ = cir_pct_remaining;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config.cir_pct_remaining)
}

// .ywrapper.UintValue pir = 69260261 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/pir"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::has_pir() const {
  return this != internal_default_instance() && pir_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::pir() const {
  const ::ywrapper::UintValue* p = pir_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config.pir)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::release_pir() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config.pir)
  
  ::ywrapper::UintValue* temp = pir_;
  pir_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::mutable_pir() {
  
  if (pir_ == NULL) {
    pir_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config.pir)
  return pir_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::set_allocated_pir(::ywrapper::UintValue* pir) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pir_);
  }
  if (pir) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pir = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pir, submessage_arena);
    }
    
  } else {
    
  }
  pir_ = pir;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config.pir)
}

// .ywrapper.UintValue pir_pct = 115916567 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/pir-pct"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::has_pir_pct() const {
  return this != internal_default_instance() && pir_pct_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::pir_pct() const {
  const ::ywrapper::UintValue* p = pir_pct_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config.pir_pct)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::release_pir_pct() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config.pir_pct)
  
  ::ywrapper::UintValue* temp = pir_pct_;
  pir_pct_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::mutable_pir_pct() {
  
  if (pir_pct_ == NULL) {
    pir_pct_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config.pir_pct)
  return pir_pct_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::set_allocated_pir_pct(::ywrapper::UintValue* pir_pct) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pir_pct_);
  }
  if (pir_pct) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pir_pct = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pir_pct, submessage_arena);
    }
    
  } else {
    
  }
  pir_pct_ = pir_pct;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config.pir_pct)
}

// .ywrapper.UintValue pir_pct_remaining = 517108460 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config/pir-pct-remaining"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::has_pir_pct_remaining() const {
  return this != internal_default_instance() && pir_pct_remaining_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::pir_pct_remaining() const {
  const ::ywrapper::UintValue* p = pir_pct_remaining_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config.pir_pct_remaining)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::release_pir_pct_remaining() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config.pir_pct_remaining)
  
  ::ywrapper::UintValue* temp = pir_pct_remaining_;
  pir_pct_remaining_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::mutable_pir_pct_remaining() {
  
  if (pir_pct_remaining_ == NULL) {
    pir_pct_remaining_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config.pir_pct_remaining)
  return pir_pct_remaining_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config::set_allocated_pir_pct_remaining(::ywrapper::UintValue* pir_pct_remaining) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pir_pct_remaining_);
  }
  if (pir_pct_remaining) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pir_pct_remaining = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pir_pct_remaining, submessage_arena);
    }
    
  } else {
    
  }
  pir_pct_remaining_ = pir_pct_remaining;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config.pir_pct_remaining)
}

// -------------------------------------------------------------------

// Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config

// .ywrapper.UintValue set_dot1p = 106933487 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/config/set-dot1p"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::has_set_dot1p() const {
  return this != internal_default_instance() && set_dot1p_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::set_dot1p() const {
  const ::ywrapper::UintValue* p = set_dot1p_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config.set_dot1p)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::release_set_dot1p() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config.set_dot1p)
  
  ::ywrapper::UintValue* temp = set_dot1p_;
  set_dot1p_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::mutable_set_dot1p() {
  
  if (set_dot1p_ == NULL) {
    set_dot1p_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config.set_dot1p)
  return set_dot1p_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::set_allocated_set_dot1p(::ywrapper::UintValue* set_dot1p) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(set_dot1p_);
  }
  if (set_dot1p) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_dot1p = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_dot1p, submessage_arena);
    }
    
  } else {
    
  }
  set_dot1p_ = set_dot1p;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config.set_dot1p)
}

// .ywrapper.UintValue set_dscp = 410653965 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/config/set-dscp"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::has_set_dscp() const {
  return this != internal_default_instance() && set_dscp_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::set_dscp() const {
  const ::ywrapper::UintValue* p = set_dscp_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config.set_dscp)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::release_set_dscp() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config.set_dscp)
  
  ::ywrapper::UintValue* temp = set_dscp_;
  set_dscp_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::mutable_set_dscp() {
  
  if (set_dscp_ == NULL) {
    set_dscp_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config.set_dscp)
  return set_dscp_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::set_allocated_set_dscp(::ywrapper::UintValue* set_dscp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(set_dscp_);
  }
  if (set_dscp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_dscp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_dscp, submessage_arena);
    }
    
  } else {
    
  }
  set_dscp_ = set_dscp;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config.set_dscp)
}

// .ywrapper.UintValue set_mpls_tc = 301290899 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/config/set-mpls-tc"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::has_set_mpls_tc() const {
  return this != internal_default_instance() && set_mpls_tc_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::set_mpls_tc() const {
  const ::ywrapper::UintValue* p = set_mpls_tc_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config.set_mpls_tc)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::release_set_mpls_tc() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config.set_mpls_tc)
  
  ::ywrapper::UintValue* temp = set_mpls_tc_;
  set_mpls_tc_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::mutable_set_mpls_tc() {
  
  if (set_mpls_tc_ == NULL) {
    set_mpls_tc_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config.set_mpls_tc)
  return set_mpls_tc_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config::set_allocated_set_mpls_tc(::ywrapper::UintValue* set_mpls_tc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(set_mpls_tc_);
  }
  if (set_mpls_tc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_mpls_tc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_mpls_tc, submessage_arena);
    }
    
  } else {
    
  }
  set_mpls_tc_ = set_mpls_tc;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config.set_mpls_tc)
}

// -------------------------------------------------------------------

// Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State

// .ywrapper.UintValue set_dot1p = 287866712 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-dot1p"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::has_set_dot1p() const {
  return this != internal_default_instance() && set_dot1p_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::set_dot1p() const {
  const ::ywrapper::UintValue* p = set_dot1p_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State.set_dot1p)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::release_set_dot1p() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State.set_dot1p)
  
  ::ywrapper::UintValue* temp = set_dot1p_;
  set_dot1p_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::mutable_set_dot1p() {
  
  if (set_dot1p_ == NULL) {
    set_dot1p_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State.set_dot1p)
  return set_dot1p_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::set_allocated_set_dot1p(::ywrapper::UintValue* set_dot1p) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(set_dot1p_);
  }
  if (set_dot1p) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_dot1p = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_dot1p, submessage_arena);
    }
    
  } else {
    
  }
  set_dot1p_ = set_dot1p;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State.set_dot1p)
}

// .ywrapper.UintValue set_dscp = 308605888 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-dscp"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::has_set_dscp() const {
  return this != internal_default_instance() && set_dscp_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::set_dscp() const {
  const ::ywrapper::UintValue* p = set_dscp_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State.set_dscp)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::release_set_dscp() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State.set_dscp)
  
  ::ywrapper::UintValue* temp = set_dscp_;
  set_dscp_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::mutable_set_dscp() {
  
  if (set_dscp_ == NULL) {
    set_dscp_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State.set_dscp)
  return set_dscp_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::set_allocated_set_dscp(::ywrapper::UintValue* set_dscp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(set_dscp_);
  }
  if (set_dscp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_dscp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_dscp, submessage_arena);
    }
    
  } else {
    
  }
  set_dscp_ = set_dscp;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State.set_dscp)
}

// .ywrapper.UintValue set_mpls_tc = 213542028 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state/set-mpls-tc"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::has_set_mpls_tc() const {
  return this != internal_default_instance() && set_mpls_tc_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::set_mpls_tc() const {
  const ::ywrapper::UintValue* p = set_mpls_tc_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State.set_mpls_tc)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::release_set_mpls_tc() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State.set_mpls_tc)
  
  ::ywrapper::UintValue* temp = set_mpls_tc_;
  set_mpls_tc_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::mutable_set_mpls_tc() {
  
  if (set_mpls_tc_ == NULL) {
    set_mpls_tc_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State.set_mpls_tc)
  return set_mpls_tc_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State::set_allocated_set_mpls_tc(::ywrapper::UintValue* set_mpls_tc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(set_mpls_tc_);
  }
  if (set_mpls_tc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_mpls_tc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_mpls_tc, submessage_arena);
    }
    
  } else {
    
  }
  set_mpls_tc_ = set_mpls_tc;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State.set_mpls_tc)
}

// -------------------------------------------------------------------

// Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.Config config = 320685791 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/config"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction::config() const {
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config*>(
      &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.config)
  
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.config)
  return config_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction::set_allocated_config(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.config)
}

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.State state = 49137552 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction::state() const {
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State*>(
      &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.state)
  
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.state)
  return state_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction::set_allocated_state(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction.state)
}

// -------------------------------------------------------------------

// Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config

// .ywrapper.BoolValue drop = 299899453 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config/drop"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::has_drop() const {
  return this != internal_default_instance() && drop_ != NULL;
}
inline const ::ywrapper::BoolValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::drop() const {
  const ::ywrapper::BoolValue* p = drop_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config.drop)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::release_drop() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config.drop)
  
  ::ywrapper::BoolValue* temp = drop_;
  drop_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::mutable_drop() {
  
  if (drop_ == NULL) {
    drop_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config.drop)
  return drop_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::set_allocated_drop(::ywrapper::BoolValue* drop) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(drop_);
  }
  if (drop) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      drop = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, drop, submessage_arena);
    }
    
  } else {
    
  }
  drop_ = drop;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config.drop)
}

// .ywrapper.UintValue set_dot1p = 143535771 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config/set-dot1p"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::has_set_dot1p() const {
  return this != internal_default_instance() && set_dot1p_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::set_dot1p() const {
  const ::ywrapper::UintValue* p = set_dot1p_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config.set_dot1p)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::release_set_dot1p() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config.set_dot1p)
  
  ::ywrapper::UintValue* temp = set_dot1p_;
  set_dot1p_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::mutable_set_dot1p() {
  
  if (set_dot1p_ == NULL) {
    set_dot1p_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config.set_dot1p)
  return set_dot1p_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::set_allocated_set_dot1p(::ywrapper::UintValue* set_dot1p) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(set_dot1p_);
  }
  if (set_dot1p) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_dot1p = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_dot1p, submessage_arena);
    }
    
  } else {
    
  }
  set_dot1p_ = set_dot1p;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config.set_dot1p)
}

// .ywrapper.UintValue set_dscp = 530765681 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config/set-dscp"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::has_set_dscp() const {
  return this != internal_default_instance() && set_dscp_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::set_dscp() const {
  const ::ywrapper::UintValue* p = set_dscp_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config.set_dscp)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::release_set_dscp() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config.set_dscp)
  
  ::ywrapper::UintValue* temp = set_dscp_;
  set_dscp_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::mutable_set_dscp() {
  
  if (set_dscp_ == NULL) {
    set_dscp_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config.set_dscp)
  return set_dscp_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::set_allocated_set_dscp(::ywrapper::UintValue* set_dscp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(set_dscp_);
  }
  if (set_dscp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_dscp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_dscp, submessage_arena);
    }
    
  } else {
    
  }
  set_dscp_ = set_dscp;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config.set_dscp)
}

// .ywrapper.UintValue set_mpls_tc = 435204023 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config/set-mpls-tc"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::has_set_mpls_tc() const {
  return this != internal_default_instance() && set_mpls_tc_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::set_mpls_tc() const {
  const ::ywrapper::UintValue* p = set_mpls_tc_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config.set_mpls_tc)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::release_set_mpls_tc() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config.set_mpls_tc)
  
  ::ywrapper::UintValue* temp = set_mpls_tc_;
  set_mpls_tc_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::mutable_set_mpls_tc() {
  
  if (set_mpls_tc_ == NULL) {
    set_mpls_tc_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config.set_mpls_tc)
  return set_mpls_tc_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config::set_allocated_set_mpls_tc(::ywrapper::UintValue* set_mpls_tc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(set_mpls_tc_);
  }
  if (set_mpls_tc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_mpls_tc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_mpls_tc, submessage_arena);
    }
    
  } else {
    
  }
  set_mpls_tc_ = set_mpls_tc;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config.set_mpls_tc)
}

// -------------------------------------------------------------------

// Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State

// .ywrapper.BoolValue drop = 190345152 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/drop"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::has_drop() const {
  return this != internal_default_instance() && drop_ != NULL;
}
inline const ::ywrapper::BoolValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::drop() const {
  const ::ywrapper::BoolValue* p = drop_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State.drop)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::release_drop() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State.drop)
  
  ::ywrapper::BoolValue* temp = drop_;
  drop_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::mutable_drop() {
  
  if (drop_ == NULL) {
    drop_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State.drop)
  return drop_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::set_allocated_drop(::ywrapper::BoolValue* drop) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(drop_);
  }
  if (drop) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      drop = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, drop, submessage_arena);
    }
    
  } else {
    
  }
  drop_ = drop;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State.drop)
}

// .ywrapper.UintValue set_dot1p = 525081588 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-dot1p"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::has_set_dot1p() const {
  return this != internal_default_instance() && set_dot1p_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::set_dot1p() const {
  const ::ywrapper::UintValue* p = set_dot1p_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State.set_dot1p)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::release_set_dot1p() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State.set_dot1p)
  
  ::ywrapper::UintValue* temp = set_dot1p_;
  set_dot1p_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::mutable_set_dot1p() {
  
  if (set_dot1p_ == NULL) {
    set_dot1p_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State.set_dot1p)
  return set_dot1p_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::set_allocated_set_dot1p(::ywrapper::UintValue* set_dot1p) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(set_dot1p_);
  }
  if (set_dot1p) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_dot1p = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_dot1p, submessage_arena);
    }
    
  } else {
    
  }
  set_dot1p_ = set_dot1p;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State.set_dot1p)
}

// .ywrapper.UintValue set_dscp = 329397924 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-dscp"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::has_set_dscp() const {
  return this != internal_default_instance() && set_dscp_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::set_dscp() const {
  const ::ywrapper::UintValue* p = set_dscp_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State.set_dscp)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::release_set_dscp() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State.set_dscp)
  
  ::ywrapper::UintValue* temp = set_dscp_;
  set_dscp_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::mutable_set_dscp() {
  
  if (set_dscp_ == NULL) {
    set_dscp_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State.set_dscp)
  return set_dscp_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::set_allocated_set_dscp(::ywrapper::UintValue* set_dscp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(set_dscp_);
  }
  if (set_dscp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_dscp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_dscp, submessage_arena);
    }
    
  } else {
    
  }
  set_dscp_ = set_dscp;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State.set_dscp)
}

// .ywrapper.UintValue set_mpls_tc = 313456384 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state/set-mpls-tc"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::has_set_mpls_tc() const {
  return this != internal_default_instance() && set_mpls_tc_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::set_mpls_tc() const {
  const ::ywrapper::UintValue* p = set_mpls_tc_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State.set_mpls_tc)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::release_set_mpls_tc() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State.set_mpls_tc)
  
  ::ywrapper::UintValue* temp = set_mpls_tc_;
  set_mpls_tc_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::mutable_set_mpls_tc() {
  
  if (set_mpls_tc_ == NULL) {
    set_mpls_tc_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State.set_mpls_tc)
  return set_mpls_tc_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State::set_allocated_set_mpls_tc(::ywrapper::UintValue* set_mpls_tc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(set_mpls_tc_);
  }
  if (set_mpls_tc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_mpls_tc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_mpls_tc, submessage_arena);
    }
    
  } else {
    
  }
  set_mpls_tc_ = set_mpls_tc;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State.set_mpls_tc)
}

// -------------------------------------------------------------------

// Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.Config config = 520730451 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction::config() const {
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config*>(
      &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.config)
  
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.config)
  return config_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction::set_allocated_config(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.config)
}

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.State state = 230070580 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction::state() const {
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State*>(
      &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.state)
  
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.state)
  return state_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction::set_allocated_state(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction.state)
}

// -------------------------------------------------------------------

// Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State

// .ywrapper.UintValue bc = 15153380 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/bc"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::has_bc() const {
  return this != internal_default_instance() && bc_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::bc() const {
  const ::ywrapper::UintValue* p = bc_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State.bc)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::release_bc() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State.bc)
  
  ::ywrapper::UintValue* temp = bc_;
  bc_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::mutable_bc() {
  
  if (bc_ == NULL) {
    bc_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State.bc)
  return bc_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::set_allocated_bc(::ywrapper::UintValue* bc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(bc_);
  }
  if (bc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bc, submessage_arena);
    }
    
  } else {
    
  }
  bc_ = bc;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State.bc)
}

// .ywrapper.UintValue be = 15153378 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/be"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::has_be() const {
  return this != internal_default_instance() && be_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::be() const {
  const ::ywrapper::UintValue* p = be_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State.be)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::release_be() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State.be)
  
  ::ywrapper::UintValue* temp = be_;
  be_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::mutable_be() {
  
  if (be_ == NULL) {
    be_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State.be)
  return be_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::set_allocated_be(::ywrapper::UintValue* be) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(be_);
  }
  if (be) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      be = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, be, submessage_arena);
    }
    
  } else {
    
  }
  be_ = be;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State.be)
}

// .ywrapper.UintValue cir = 368769365 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::has_cir() const {
  return this != internal_default_instance() && cir_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::cir() const {
  const ::ywrapper::UintValue* p = cir_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State.cir)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::release_cir() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State.cir)
  
  ::ywrapper::UintValue* temp = cir_;
  cir_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::mutable_cir() {
  
  if (cir_ == NULL) {
    cir_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State.cir)
  return cir_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::set_allocated_cir(::ywrapper::UintValue* cir) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(cir_);
  }
  if (cir) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cir = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cir, submessage_arena);
    }
    
  } else {
    
  }
  cir_ = cir;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State.cir)
}

// .ywrapper.UintValue cir_pct = 228243271 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir-pct"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::has_cir_pct() const {
  return this != internal_default_instance() && cir_pct_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::cir_pct() const {
  const ::ywrapper::UintValue* p = cir_pct_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State.cir_pct)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::release_cir_pct() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State.cir_pct)
  
  ::ywrapper::UintValue* temp = cir_pct_;
  cir_pct_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::mutable_cir_pct() {
  
  if (cir_pct_ == NULL) {
    cir_pct_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State.cir_pct)
  return cir_pct_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::set_allocated_cir_pct(::ywrapper::UintValue* cir_pct) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(cir_pct_);
  }
  if (cir_pct) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cir_pct = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cir_pct, submessage_arena);
    }
    
  } else {
    
  }
  cir_pct_ = cir_pct;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State.cir_pct)
}

// .ywrapper.UintValue cir_pct_remaining = 276174460 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir-pct-remaining"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::has_cir_pct_remaining() const {
  return this != internal_default_instance() && cir_pct_remaining_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::cir_pct_remaining() const {
  const ::ywrapper::UintValue* p = cir_pct_remaining_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State.cir_pct_remaining)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::release_cir_pct_remaining() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State.cir_pct_remaining)
  
  ::ywrapper::UintValue* temp = cir_pct_remaining_;
  cir_pct_remaining_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::mutable_cir_pct_remaining() {
  
  if (cir_pct_remaining_ == NULL) {
    cir_pct_remaining_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State.cir_pct_remaining)
  return cir_pct_remaining_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::set_allocated_cir_pct_remaining(::ywrapper::UintValue* cir_pct_remaining) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(cir_pct_remaining_);
  }
  if (cir_pct_remaining) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cir_pct_remaining = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cir_pct_remaining, submessage_arena);
    }
    
  } else {
    
  }
  cir_pct_remaining_ = cir_pct_remaining;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State.cir_pct_remaining)
}

// .ywrapper.UintValue pir = 366650638 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::has_pir() const {
  return this != internal_default_instance() && pir_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::pir() const {
  const ::ywrapper::UintValue* p = pir_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State.pir)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::release_pir() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State.pir)
  
  ::ywrapper::UintValue* temp = pir_;
  pir_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::mutable_pir() {
  
  if (pir_ == NULL) {
    pir_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State.pir)
  return pir_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::set_allocated_pir(::ywrapper::UintValue* pir) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pir_);
  }
  if (pir) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pir = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pir, submessage_arena);
    }
    
  } else {
    
  }
  pir_ = pir;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State.pir)
}

// .ywrapper.UintValue pir_pct = 484968816 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir-pct"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::has_pir_pct() const {
  return this != internal_default_instance() && pir_pct_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::pir_pct() const {
  const ::ywrapper::UintValue* p = pir_pct_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State.pir_pct)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::release_pir_pct() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State.pir_pct)
  
  ::ywrapper::UintValue* temp = pir_pct_;
  pir_pct_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::mutable_pir_pct() {
  
  if (pir_pct_ == NULL) {
    pir_pct_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State.pir_pct)
  return pir_pct_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::set_allocated_pir_pct(::ywrapper::UintValue* pir_pct) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pir_pct_);
  }
  if (pir_pct) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pir_pct = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pir_pct, submessage_arena);
    }
    
  } else {
    
  }
  pir_pct_ = pir_pct;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State.pir_pct)
}

// .ywrapper.UintValue pir_pct_remaining = 223122459 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir-pct-remaining"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::has_pir_pct_remaining() const {
  return this != internal_default_instance() && pir_pct_remaining_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::pir_pct_remaining() const {
  const ::ywrapper::UintValue* p = pir_pct_remaining_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State.pir_pct_remaining)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::release_pir_pct_remaining() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State.pir_pct_remaining)
  
  ::ywrapper::UintValue* temp = pir_pct_remaining_;
  pir_pct_remaining_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::mutable_pir_pct_remaining() {
  
  if (pir_pct_remaining_ == NULL) {
    pir_pct_remaining_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State.pir_pct_remaining)
  return pir_pct_remaining_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State::set_allocated_pir_pct_remaining(::ywrapper::UintValue* pir_pct_remaining) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pir_pct_remaining_);
  }
  if (pir_pct_remaining) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pir_pct_remaining = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pir_pct_remaining, submessage_arena);
    }
    
  } else {
    
  }
  pir_pct_remaining_ = pir_pct_remaining;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State.pir_pct_remaining)
}

// -------------------------------------------------------------------

// Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config

// .ywrapper.BoolValue drop = 230160201 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config/drop"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::has_drop() const {
  return this != internal_default_instance() && drop_ != NULL;
}
inline const ::ywrapper::BoolValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::drop() const {
  const ::ywrapper::BoolValue* p = drop_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config.drop)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::release_drop() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config.drop)
  
  ::ywrapper::BoolValue* temp = drop_;
  drop_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::mutable_drop() {
  
  if (drop_ == NULL) {
    drop_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config.drop)
  return drop_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::set_allocated_drop(::ywrapper::BoolValue* drop) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(drop_);
  }
  if (drop) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      drop = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, drop, submessage_arena);
    }
    
  } else {
    
  }
  drop_ = drop;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config.drop)
}

// .ywrapper.UintValue set_dot1p = 433219903 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config/set-dot1p"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::has_set_dot1p() const {
  return this != internal_default_instance() && set_dot1p_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::set_dot1p() const {
  const ::ywrapper::UintValue* p = set_dot1p_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config.set_dot1p)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::release_set_dot1p() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config.set_dot1p)
  
  ::ywrapper::UintValue* temp = set_dot1p_;
  set_dot1p_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::mutable_set_dot1p() {
  
  if (set_dot1p_ == NULL) {
    set_dot1p_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config.set_dot1p)
  return set_dot1p_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::set_allocated_set_dot1p(::ywrapper::UintValue* set_dot1p) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(set_dot1p_);
  }
  if (set_dot1p) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_dot1p = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_dot1p, submessage_arena);
    }
    
  } else {
    
  }
  set_dot1p_ = set_dot1p;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config.set_dot1p)
}

// .ywrapper.UintValue set_dscp = 77658205 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config/set-dscp"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::has_set_dscp() const {
  return this != internal_default_instance() && set_dscp_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::set_dscp() const {
  const ::ywrapper::UintValue* p = set_dscp_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config.set_dscp)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::release_set_dscp() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config.set_dscp)
  
  ::ywrapper::UintValue* temp = set_dscp_;
  set_dscp_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::mutable_set_dscp() {
  
  if (set_dscp_ == NULL) {
    set_dscp_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config.set_dscp)
  return set_dscp_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::set_allocated_set_dscp(::ywrapper::UintValue* set_dscp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(set_dscp_);
  }
  if (set_dscp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_dscp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_dscp, submessage_arena);
    }
    
  } else {
    
  }
  set_dscp_ = set_dscp;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config.set_dscp)
}

// .ywrapper.UintValue set_mpls_tc = 446571619 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config/set-mpls-tc"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::has_set_mpls_tc() const {
  return this != internal_default_instance() && set_mpls_tc_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::set_mpls_tc() const {
  const ::ywrapper::UintValue* p = set_mpls_tc_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config.set_mpls_tc)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::release_set_mpls_tc() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config.set_mpls_tc)
  
  ::ywrapper::UintValue* temp = set_mpls_tc_;
  set_mpls_tc_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::mutable_set_mpls_tc() {
  
  if (set_mpls_tc_ == NULL) {
    set_mpls_tc_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config.set_mpls_tc)
  return set_mpls_tc_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config::set_allocated_set_mpls_tc(::ywrapper::UintValue* set_mpls_tc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(set_mpls_tc_);
  }
  if (set_mpls_tc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_mpls_tc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_mpls_tc, submessage_arena);
    }
    
  } else {
    
  }
  set_mpls_tc_ = set_mpls_tc;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config.set_mpls_tc)
}

// -------------------------------------------------------------------

// Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State

// .ywrapper.BoolValue drop = 94921628 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/drop"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::has_drop() const {
  return this != internal_default_instance() && drop_ != NULL;
}
inline const ::ywrapper::BoolValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::drop() const {
  const ::ywrapper::BoolValue* p = drop_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State.drop)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::release_drop() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State.drop)
  
  ::ywrapper::BoolValue* temp = drop_;
  drop_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::mutable_drop() {
  
  if (drop_ == NULL) {
    drop_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State.drop)
  return drop_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::set_allocated_drop(::ywrapper::BoolValue* drop) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(drop_);
  }
  if (drop) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      drop = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, drop, submessage_arena);
    }
    
  } else {
    
  }
  drop_ = drop;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State.drop)
}

// .ywrapper.UintValue set_dot1p = 311422824 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-dot1p"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::has_set_dot1p() const {
  return this != internal_default_instance() && set_dot1p_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::set_dot1p() const {
  const ::ywrapper::UintValue* p = set_dot1p_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State.set_dot1p)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::release_set_dot1p() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State.set_dot1p)
  
  ::ywrapper::UintValue* temp = set_dot1p_;
  set_dot1p_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::mutable_set_dot1p() {
  
  if (set_dot1p_ == NULL) {
    set_dot1p_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State.set_dot1p)
  return set_dot1p_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::set_allocated_set_dot1p(::ywrapper::UintValue* set_dot1p) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(set_dot1p_);
  }
  if (set_dot1p) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_dot1p = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_dot1p, submessage_arena);
    }
    
  } else {
    
  }
  set_dot1p_ = set_dot1p;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State.set_dot1p)
}

// .ywrapper.UintValue set_dscp = 206736528 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-dscp"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::has_set_dscp() const {
  return this != internal_default_instance() && set_dscp_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::set_dscp() const {
  const ::ywrapper::UintValue* p = set_dscp_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State.set_dscp)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::release_set_dscp() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State.set_dscp)
  
  ::ywrapper::UintValue* temp = set_dscp_;
  set_dscp_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::mutable_set_dscp() {
  
  if (set_dscp_ == NULL) {
    set_dscp_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State.set_dscp)
  return set_dscp_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::set_allocated_set_dscp(::ywrapper::UintValue* set_dscp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(set_dscp_);
  }
  if (set_dscp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_dscp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_dscp, submessage_arena);
    }
    
  } else {
    
  }
  set_dscp_ = set_dscp;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State.set_dscp)
}

// .ywrapper.UintValue set_mpls_tc = 425194396 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state/set-mpls-tc"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::has_set_mpls_tc() const {
  return this != internal_default_instance() && set_mpls_tc_ != NULL;
}
inline const ::ywrapper::UintValue& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::set_mpls_tc() const {
  const ::ywrapper::UintValue* p = set_mpls_tc_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State.set_mpls_tc)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::release_set_mpls_tc() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State.set_mpls_tc)
  
  ::ywrapper::UintValue* temp = set_mpls_tc_;
  set_mpls_tc_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::mutable_set_mpls_tc() {
  
  if (set_mpls_tc_ == NULL) {
    set_mpls_tc_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State.set_mpls_tc)
  return set_mpls_tc_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State::set_allocated_set_mpls_tc(::ywrapper::UintValue* set_mpls_tc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(set_mpls_tc_);
  }
  if (set_mpls_tc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_mpls_tc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_mpls_tc, submessage_arena);
    }
    
  } else {
    
  }
  set_mpls_tc_ = set_mpls_tc;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State.set_mpls_tc)
}

// -------------------------------------------------------------------

// Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.Config config = 491497103 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction::config() const {
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config*>(
      &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.config)
  
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.config)
  return config_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction::set_allocated_config(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.config)
}

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.State state = 142023808 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction::state() const {
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State*>(
      &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.state)
  
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.state)
  return state_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction::set_allocated_state(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction.state)
}

// -------------------------------------------------------------------

// Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.Config config = 526981785 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::config() const {
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config*>(
      &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.config)
  
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.config)
  return config_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::set_allocated_config(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.config)
}

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ConformAction conform_action = 482658734 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::has_conform_action() const {
  return this != internal_default_instance() && conform_action_ != NULL;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::clear_conform_action() {
  if (GetArenaNoVirtual() == NULL && conform_action_ != NULL) {
    delete conform_action_;
  }
  conform_action_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::conform_action() const {
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction* p = conform_action_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.conform_action)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction*>(
      &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::release_conform_action() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.conform_action)
  
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction* temp = conform_action_;
  conform_action_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::mutable_conform_action() {
  
  if (conform_action_ == NULL) {
    conform_action_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.conform_action)
  return conform_action_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::set_allocated_conform_action(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ConformAction* conform_action) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete conform_action_;
  }
  if (conform_action) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      conform_action = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, conform_action, submessage_arena);
    }
    
  } else {
    
  }
  conform_action_ = conform_action;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.conform_action)
}

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ExceedAction exceed_action = 447571730 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::has_exceed_action() const {
  return this != internal_default_instance() && exceed_action_ != NULL;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::clear_exceed_action() {
  if (GetArenaNoVirtual() == NULL && exceed_action_ != NULL) {
    delete exceed_action_;
  }
  exceed_action_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::exceed_action() const {
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction* p = exceed_action_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.exceed_action)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction*>(
      &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::release_exceed_action() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.exceed_action)
  
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction* temp = exceed_action_;
  exceed_action_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::mutable_exceed_action() {
  
  if (exceed_action_ == NULL) {
    exceed_action_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.exceed_action)
  return exceed_action_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::set_allocated_exceed_action(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ExceedAction* exceed_action) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete exceed_action_;
  }
  if (exceed_action) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      exceed_action = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exceed_action, submessage_arena);
    }
    
  } else {
    
  }
  exceed_action_ = exceed_action;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.exceed_action)
}

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.State state = 264511342 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::state() const {
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State*>(
      &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.state)
  
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.state)
  return state_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::set_allocated_state(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.state)
}

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.ViolateAction violate_action = 110529342 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::has_violate_action() const {
  return this != internal_default_instance() && violate_action_ != NULL;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::clear_violate_action() {
  if (GetArenaNoVirtual() == NULL && violate_action_ != NULL) {
    delete violate_action_;
  }
  violate_action_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::violate_action() const {
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction* p = violate_action_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.violate_action)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction*>(
      &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::release_violate_action() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.violate_action)
  
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction* temp = violate_action_;
  violate_action_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::mutable_violate_action() {
  
  if (violate_action_ == NULL) {
    violate_action_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.violate_action)
  return violate_action_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor::set_allocated_violate_action(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_ViolateAction* violate_action) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete violate_action_;
  }
  if (violate_action) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      violate_action = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, violate_action, submessage_arena);
    }
    
  } else {
    
  }
  violate_action_ = violate_action;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor.violate_action)
}

// -------------------------------------------------------------------

// Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Config config = 235323450 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::config() const {
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config*>(
      &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.config)
  
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.config)
  return config_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::set_allocated_config(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.config)
}

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Inputs inputs = 152276279 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::has_inputs() const {
  return this != internal_default_instance() && inputs_ != NULL;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::clear_inputs() {
  if (GetArenaNoVirtual() == NULL && inputs_ != NULL) {
    delete inputs_;
  }
  inputs_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::inputs() const {
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs* p = inputs_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.inputs)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs*>(
      &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::release_inputs() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.inputs)
  
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs* temp = inputs_;
  inputs_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::mutable_inputs() {
  
  if (inputs_ == NULL) {
    inputs_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.inputs)
  return inputs_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::set_allocated_inputs(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs* inputs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete inputs_;
  }
  if (inputs) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      inputs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inputs, submessage_arena);
    }
    
  } else {
    
  }
  inputs_ = inputs;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.inputs)
}

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.OneRateTwoColor one_rate_two_color = 502240564 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::has_one_rate_two_color() const {
  return this != internal_default_instance() && one_rate_two_color_ != NULL;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::clear_one_rate_two_color() {
  if (GetArenaNoVirtual() == NULL && one_rate_two_color_ != NULL) {
    delete one_rate_two_color_;
  }
  one_rate_two_color_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::one_rate_two_color() const {
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor* p = one_rate_two_color_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.one_rate_two_color)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor*>(
      &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::release_one_rate_two_color() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.one_rate_two_color)
  
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor* temp = one_rate_two_color_;
  one_rate_two_color_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::mutable_one_rate_two_color() {
  
  if (one_rate_two_color_ == NULL) {
    one_rate_two_color_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.one_rate_two_color)
  return one_rate_two_color_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::set_allocated_one_rate_two_color(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_OneRateTwoColor* one_rate_two_color) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete one_rate_two_color_;
  }
  if (one_rate_two_color) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      one_rate_two_color = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, one_rate_two_color, submessage_arena);
    }
    
  } else {
    
  }
  one_rate_two_color_ = one_rate_two_color;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.one_rate_two_color)
}

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.Output output = 46224159 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::has_output() const {
  return this != internal_default_instance() && output_ != NULL;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::clear_output() {
  if (GetArenaNoVirtual() == NULL && output_ != NULL) {
    delete output_;
  }
  output_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::output() const {
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output* p = output_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.output)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output*>(
      &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::release_output() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.output)
  
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output* temp = output_;
  output_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::mutable_output() {
  
  if (output_ == NULL) {
    output_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.output)
  return output_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::set_allocated_output(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output* output) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete output_;
  }
  if (output) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      output = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, output, submessage_arena);
    }
    
  } else {
    
  }
  output_ = output;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.output)
}

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.State state = 237125463 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::state() const {
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State*>(
      &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.state)
  
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.state)
  return state_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::set_allocated_state(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.state)
}

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.TwoRateThreeColor two_rate_three_color = 10046740 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::has_two_rate_three_color() const {
  return this != internal_default_instance() && two_rate_three_color_ != NULL;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::clear_two_rate_three_color() {
  if (GetArenaNoVirtual() == NULL && two_rate_three_color_ != NULL) {
    delete two_rate_three_color_;
  }
  two_rate_three_color_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::two_rate_three_color() const {
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor* p = two_rate_three_color_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.two_rate_three_color)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor*>(
      &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::release_two_rate_three_color() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.two_rate_three_color)
  
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor* temp = two_rate_three_color_;
  two_rate_three_color_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::mutable_two_rate_three_color() {
  
  if (two_rate_three_color_ == NULL) {
    two_rate_three_color_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.two_rate_three_color)
  return two_rate_three_color_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler::set_allocated_two_rate_three_color(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_TwoRateThreeColor* two_rate_three_color) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete two_rate_three_color_;
  }
  if (two_rate_three_color) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      two_rate_three_color = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, two_rate_three_color, submessage_arena);
    }
    
  } else {
    
  }
  two_rate_three_color_ = two_rate_three_color;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler.two_rate_three_color)
}

// -------------------------------------------------------------------

// Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey

// uint64 sequence = 1 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/sequence"];
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey::clear_sequence() {
  sequence_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey::sequence() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.SchedulerKey.sequence)
  return sequence_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey::set_sequence(::google::protobuf::uint64 value) {
  
  sequence_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.SchedulerKey.sequence)
}

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.Scheduler scheduler = 2;
inline bool Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey::has_scheduler() const {
  return this != internal_default_instance() && scheduler_ != NULL;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey::clear_scheduler() {
  if (GetArenaNoVirtual() == NULL && scheduler_ != NULL) {
    delete scheduler_;
  }
  scheduler_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey::scheduler() const {
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler* p = scheduler_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.SchedulerKey.scheduler)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler*>(
      &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey::release_scheduler() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.SchedulerKey.scheduler)
  
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler* temp = scheduler_;
  scheduler_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey::mutable_scheduler() {
  
  if (scheduler_ == NULL) {
    scheduler_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.SchedulerKey.scheduler)
  return scheduler_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey::set_allocated_scheduler(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler* scheduler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scheduler_;
  }
  if (scheduler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scheduler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scheduler, submessage_arena);
    }
    
  } else {
    
  }
  scheduler_ = scheduler;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.SchedulerKey.scheduler)
}

// -------------------------------------------------------------------

// Qos_SchedulerPolicies_SchedulerPolicy_Schedulers

// repeated .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.SchedulerKey scheduler = 494699541 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers/scheduler"];
inline int Qos_SchedulerPolicies_SchedulerPolicy_Schedulers::scheduler_size() const {
  return scheduler_.size();
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_Schedulers::clear_scheduler() {
  scheduler_.Clear();
}
inline const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey& Qos_SchedulerPolicies_SchedulerPolicy_Schedulers::scheduler(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.scheduler)
  return scheduler_.Get(index);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers::mutable_scheduler(int index) {
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.scheduler)
  return scheduler_.Mutable(index);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey* Qos_SchedulerPolicies_SchedulerPolicy_Schedulers::add_scheduler() {
  // @@protoc_insertion_point(field_add:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.scheduler)
  return scheduler_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey >*
Qos_SchedulerPolicies_SchedulerPolicy_Schedulers::mutable_scheduler() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.scheduler)
  return &scheduler_;
}
inline const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_SchedulerKey >&
Qos_SchedulerPolicies_SchedulerPolicy_Schedulers::scheduler() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers.scheduler)
  return scheduler_;
}

// -------------------------------------------------------------------

// Qos_SchedulerPolicies_SchedulerPolicy_State

// .ywrapper.StringValue name = 1534422 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/state/name"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy_State::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::ywrapper::StringValue& Qos_SchedulerPolicies_SchedulerPolicy_State::name() const {
  const ::ywrapper::StringValue* p = name_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.State.name)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Qos_SchedulerPolicies_SchedulerPolicy_State::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.State.name)
  
  ::ywrapper::StringValue* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Qos_SchedulerPolicies_SchedulerPolicy_State::mutable_name() {
  
  if (name_ == NULL) {
    name_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.State.name)
  return name_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy_State::set_allocated_name(::ywrapper::StringValue* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.State.name)
}

// -------------------------------------------------------------------

// Qos_SchedulerPolicies_SchedulerPolicy

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Config config = 524943827 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/config"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Config& Qos_SchedulerPolicies_SchedulerPolicy::config() const {
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Config*>(
      &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Config_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Config* Qos_SchedulerPolicies_SchedulerPolicy::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.config)
  
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Config* Qos_SchedulerPolicies_SchedulerPolicy::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.config)
  return config_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy::set_allocated_config(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.config)
}

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.Schedulers schedulers = 419692355 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/schedulers"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy::has_schedulers() const {
  return this != internal_default_instance() && schedulers_ != NULL;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy::clear_schedulers() {
  if (GetArenaNoVirtual() == NULL && schedulers_ != NULL) {
    delete schedulers_;
  }
  schedulers_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers& Qos_SchedulerPolicies_SchedulerPolicy::schedulers() const {
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers* p = schedulers_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.schedulers)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers*>(
      &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers* Qos_SchedulerPolicies_SchedulerPolicy::release_schedulers() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.schedulers)
  
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers* temp = schedulers_;
  schedulers_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers* Qos_SchedulerPolicies_SchedulerPolicy::mutable_schedulers() {
  
  if (schedulers_ == NULL) {
    schedulers_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.schedulers)
  return schedulers_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy::set_allocated_schedulers(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers* schedulers) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete schedulers_;
  }
  if (schedulers) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      schedulers = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, schedulers, submessage_arena);
    }
    
  } else {
    
  }
  schedulers_ = schedulers;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.schedulers)
}

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.State state = 242070708 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/state"];
inline bool Qos_SchedulerPolicies_SchedulerPolicy::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_State& Qos_SchedulerPolicies_SchedulerPolicy::state() const {
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_State*>(
      &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_State* Qos_SchedulerPolicies_SchedulerPolicy::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.state)
  
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_State* Qos_SchedulerPolicies_SchedulerPolicy::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.state)
  return state_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicy::set_allocated_state(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy.state)
}

// -------------------------------------------------------------------

// Qos_SchedulerPolicies_SchedulerPolicyKey

// string name = 1 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy/name"];
inline void Qos_SchedulerPolicies_SchedulerPolicyKey::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Qos_SchedulerPolicies_SchedulerPolicyKey::name() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey.name)
  return name_.GetNoArena();
}
inline void Qos_SchedulerPolicies_SchedulerPolicyKey::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey.name)
}
#if LANG_CXX11
inline void Qos_SchedulerPolicies_SchedulerPolicyKey::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey.name)
}
#endif
inline void Qos_SchedulerPolicies_SchedulerPolicyKey::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey.name)
}
inline void Qos_SchedulerPolicies_SchedulerPolicyKey::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey.name)
}
inline ::std::string* Qos_SchedulerPolicies_SchedulerPolicyKey::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Qos_SchedulerPolicies_SchedulerPolicyKey::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Qos_SchedulerPolicies_SchedulerPolicyKey::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey.name)
}

// .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicy scheduler_policy = 2;
inline bool Qos_SchedulerPolicies_SchedulerPolicyKey::has_scheduler_policy() const {
  return this != internal_default_instance() && scheduler_policy_ != NULL;
}
inline void Qos_SchedulerPolicies_SchedulerPolicyKey::clear_scheduler_policy() {
  if (GetArenaNoVirtual() == NULL && scheduler_policy_ != NULL) {
    delete scheduler_policy_;
  }
  scheduler_policy_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy& Qos_SchedulerPolicies_SchedulerPolicyKey::scheduler_policy() const {
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy* p = scheduler_policy_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey.scheduler_policy)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy*>(
      &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_SchedulerPolicy_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy* Qos_SchedulerPolicies_SchedulerPolicyKey::release_scheduler_policy() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey.scheduler_policy)
  
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy* temp = scheduler_policy_;
  scheduler_policy_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy* Qos_SchedulerPolicies_SchedulerPolicyKey::mutable_scheduler_policy() {
  
  if (scheduler_policy_ == NULL) {
    scheduler_policy_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey.scheduler_policy)
  return scheduler_policy_;
}
inline void Qos_SchedulerPolicies_SchedulerPolicyKey::set_allocated_scheduler_policy(::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy* scheduler_policy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scheduler_policy_;
  }
  if (scheduler_policy) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scheduler_policy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scheduler_policy, submessage_arena);
    }
    
  } else {
    
  }
  scheduler_policy_ = scheduler_policy;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey.scheduler_policy)
}

// -------------------------------------------------------------------

// Qos_SchedulerPolicies

// repeated .openconfig.openconfig_qos.Qos.SchedulerPolicies.SchedulerPolicyKey scheduler_policy = 422526610 [(.yext.schemapath) = "/qos/scheduler-policies/scheduler-policy"];
inline int Qos_SchedulerPolicies::scheduler_policy_size() const {
  return scheduler_policy_.size();
}
inline void Qos_SchedulerPolicies::clear_scheduler_policy() {
  scheduler_policy_.Clear();
}
inline const ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicyKey& Qos_SchedulerPolicies::scheduler_policy(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.SchedulerPolicies.scheduler_policy)
  return scheduler_policy_.Get(index);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicyKey* Qos_SchedulerPolicies::mutable_scheduler_policy(int index) {
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.SchedulerPolicies.scheduler_policy)
  return scheduler_policy_.Mutable(index);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicyKey* Qos_SchedulerPolicies::add_scheduler_policy() {
  // @@protoc_insertion_point(field_add:openconfig.openconfig_qos.Qos.SchedulerPolicies.scheduler_policy)
  return scheduler_policy_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicyKey >*
Qos_SchedulerPolicies::mutable_scheduler_policy() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_qos.Qos.SchedulerPolicies.scheduler_policy)
  return &scheduler_policy_;
}
inline const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicyKey >&
Qos_SchedulerPolicies::scheduler_policy() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_qos.Qos.SchedulerPolicies.scheduler_policy)
  return scheduler_policy_;
}

// -------------------------------------------------------------------

// Qos_State

// -------------------------------------------------------------------

// Qos

// .openconfig.openconfig_qos.Qos.Classifiers classifiers = 90288891 [(.yext.schemapath) = "/qos/classifiers"];
inline bool Qos::has_classifiers() const {
  return this != internal_default_instance() && classifiers_ != NULL;
}
inline void Qos::clear_classifiers() {
  if (GetArenaNoVirtual() == NULL && classifiers_ != NULL) {
    delete classifiers_;
  }
  classifiers_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Classifiers& Qos::classifiers() const {
  const ::openconfig::openconfig_qos::Qos_Classifiers* p = classifiers_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.classifiers)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Classifiers*>(
      &::openconfig::openconfig_qos::_Qos_Classifiers_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Classifiers* Qos::release_classifiers() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.classifiers)
  
  ::openconfig::openconfig_qos::Qos_Classifiers* temp = classifiers_;
  classifiers_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Classifiers* Qos::mutable_classifiers() {
  
  if (classifiers_ == NULL) {
    classifiers_ = new ::openconfig::openconfig_qos::Qos_Classifiers;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.classifiers)
  return classifiers_;
}
inline void Qos::set_allocated_classifiers(::openconfig::openconfig_qos::Qos_Classifiers* classifiers) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete classifiers_;
  }
  if (classifiers) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      classifiers = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, classifiers, submessage_arena);
    }
    
  } else {
    
  }
  classifiers_ = classifiers;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.classifiers)
}

// .openconfig.openconfig_qos.Qos.Config config = 254929617 [(.yext.schemapath) = "/qos/config"];
inline bool Qos::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Qos::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Config& Qos::config() const {
  const ::openconfig::openconfig_qos::Qos_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Config*>(
      &::openconfig::openconfig_qos::_Qos_Config_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Config* Qos::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.config)
  
  ::openconfig::openconfig_qos::Qos_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Config* Qos::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_qos::Qos_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.config)
  return config_;
}
inline void Qos::set_allocated_config(::openconfig::openconfig_qos::Qos_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.config)
}

// .openconfig.openconfig_qos.Qos.ForwardingGroups forwarding_groups = 328718935 [(.yext.schemapath) = "/qos/forwarding-groups"];
inline bool Qos::has_forwarding_groups() const {
  return this != internal_default_instance() && forwarding_groups_ != NULL;
}
inline void Qos::clear_forwarding_groups() {
  if (GetArenaNoVirtual() == NULL && forwarding_groups_ != NULL) {
    delete forwarding_groups_;
  }
  forwarding_groups_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_ForwardingGroups& Qos::forwarding_groups() const {
  const ::openconfig::openconfig_qos::Qos_ForwardingGroups* p = forwarding_groups_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.forwarding_groups)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_ForwardingGroups*>(
      &::openconfig::openconfig_qos::_Qos_ForwardingGroups_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_ForwardingGroups* Qos::release_forwarding_groups() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.forwarding_groups)
  
  ::openconfig::openconfig_qos::Qos_ForwardingGroups* temp = forwarding_groups_;
  forwarding_groups_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_ForwardingGroups* Qos::mutable_forwarding_groups() {
  
  if (forwarding_groups_ == NULL) {
    forwarding_groups_ = new ::openconfig::openconfig_qos::Qos_ForwardingGroups;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.forwarding_groups)
  return forwarding_groups_;
}
inline void Qos::set_allocated_forwarding_groups(::openconfig::openconfig_qos::Qos_ForwardingGroups* forwarding_groups) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete forwarding_groups_;
  }
  if (forwarding_groups) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      forwarding_groups = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, forwarding_groups, submessage_arena);
    }
    
  } else {
    
  }
  forwarding_groups_ = forwarding_groups;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.forwarding_groups)
}

// .openconfig.openconfig_qos.Qos.Interfaces interfaces = 329973087 [(.yext.schemapath) = "/qos/interfaces"];
inline bool Qos::has_interfaces() const {
  return this != internal_default_instance() && interfaces_ != NULL;
}
inline void Qos::clear_interfaces() {
  if (GetArenaNoVirtual() == NULL && interfaces_ != NULL) {
    delete interfaces_;
  }
  interfaces_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Interfaces& Qos::interfaces() const {
  const ::openconfig::openconfig_qos::Qos_Interfaces* p = interfaces_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.interfaces)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Interfaces*>(
      &::openconfig::openconfig_qos::_Qos_Interfaces_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Interfaces* Qos::release_interfaces() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.interfaces)
  
  ::openconfig::openconfig_qos::Qos_Interfaces* temp = interfaces_;
  interfaces_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Interfaces* Qos::mutable_interfaces() {
  
  if (interfaces_ == NULL) {
    interfaces_ = new ::openconfig::openconfig_qos::Qos_Interfaces;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.interfaces)
  return interfaces_;
}
inline void Qos::set_allocated_interfaces(::openconfig::openconfig_qos::Qos_Interfaces* interfaces) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete interfaces_;
  }
  if (interfaces) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      interfaces = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, interfaces, submessage_arena);
    }
    
  } else {
    
  }
  interfaces_ = interfaces;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.interfaces)
}

// .openconfig.openconfig_qos.Qos.Queues queues = 244490847 [(.yext.schemapath) = "/qos/queues"];
inline bool Qos::has_queues() const {
  return this != internal_default_instance() && queues_ != NULL;
}
inline void Qos::clear_queues() {
  if (GetArenaNoVirtual() == NULL && queues_ != NULL) {
    delete queues_;
  }
  queues_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_Queues& Qos::queues() const {
  const ::openconfig::openconfig_qos::Qos_Queues* p = queues_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.queues)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_Queues*>(
      &::openconfig::openconfig_qos::_Qos_Queues_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_Queues* Qos::release_queues() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.queues)
  
  ::openconfig::openconfig_qos::Qos_Queues* temp = queues_;
  queues_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_Queues* Qos::mutable_queues() {
  
  if (queues_ == NULL) {
    queues_ = new ::openconfig::openconfig_qos::Qos_Queues;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.queues)
  return queues_;
}
inline void Qos::set_allocated_queues(::openconfig::openconfig_qos::Qos_Queues* queues) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete queues_;
  }
  if (queues) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      queues = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, queues, submessage_arena);
    }
    
  } else {
    
  }
  queues_ = queues;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.queues)
}

// .openconfig.openconfig_qos.Qos.SchedulerPolicies scheduler_policies = 191956329 [(.yext.schemapath) = "/qos/scheduler-policies"];
inline bool Qos::has_scheduler_policies() const {
  return this != internal_default_instance() && scheduler_policies_ != NULL;
}
inline void Qos::clear_scheduler_policies() {
  if (GetArenaNoVirtual() == NULL && scheduler_policies_ != NULL) {
    delete scheduler_policies_;
  }
  scheduler_policies_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_SchedulerPolicies& Qos::scheduler_policies() const {
  const ::openconfig::openconfig_qos::Qos_SchedulerPolicies* p = scheduler_policies_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.scheduler_policies)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_SchedulerPolicies*>(
      &::openconfig::openconfig_qos::_Qos_SchedulerPolicies_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies* Qos::release_scheduler_policies() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.scheduler_policies)
  
  ::openconfig::openconfig_qos::Qos_SchedulerPolicies* temp = scheduler_policies_;
  scheduler_policies_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_SchedulerPolicies* Qos::mutable_scheduler_policies() {
  
  if (scheduler_policies_ == NULL) {
    scheduler_policies_ = new ::openconfig::openconfig_qos::Qos_SchedulerPolicies;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.scheduler_policies)
  return scheduler_policies_;
}
inline void Qos::set_allocated_scheduler_policies(::openconfig::openconfig_qos::Qos_SchedulerPolicies* scheduler_policies) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scheduler_policies_;
  }
  if (scheduler_policies) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scheduler_policies = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scheduler_policies, submessage_arena);
    }
    
  } else {
    
  }
  scheduler_policies_ = scheduler_policies;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.scheduler_policies)
}

// .openconfig.openconfig_qos.Qos.State state = 139048646 [(.yext.schemapath) = "/qos/state"];
inline bool Qos::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Qos::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_qos::Qos_State& Qos::state() const {
  const ::openconfig::openconfig_qos::Qos_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_qos.Qos.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_qos::Qos_State*>(
      &::openconfig::openconfig_qos::_Qos_State_default_instance_);
}
inline ::openconfig::openconfig_qos::Qos_State* Qos::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_qos.Qos.state)
  
  ::openconfig::openconfig_qos::Qos_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_qos::Qos_State* Qos::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_qos::Qos_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_qos.Qos.state)
  return state_;
}
inline void Qos::set_allocated_state(::openconfig::openconfig_qos::Qos_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_qos.Qos.state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace openconfig_qos
}  // namespace openconfig

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Config_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Config_Type>() {
  return ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Config_Type_descriptor();
}
template <> struct is_proto_enum< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_State_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_State_Type>() {
  return ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_State_Type_descriptor();
}
template <> struct is_proto_enum< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort>() {
  return ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_DestinationPort_descriptor();
}
template <> struct is_proto_enum< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort>() {
  return ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_Config_SourcePort_descriptor();
}
template <> struct is_proto_enum< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort>() {
  return ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_DestinationPort_descriptor();
}
template <> struct is_proto_enum< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort>() {
  return ::openconfig::openconfig_qos::Qos_Classifiers_Classifier_Terms_Term_Conditions_Transport_State_SourcePort_descriptor();
}
template <> struct is_proto_enum< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type>() {
  return ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_Config_Type_descriptor();
}
template <> struct is_proto_enum< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type>() {
  return ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_Classifier_State_Type_descriptor();
}
template <> struct is_proto_enum< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type>() {
  return ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Input_Classifers_ClassifierKey_Type_descriptor();
}
template <> struct is_proto_enum< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type>() {
  return ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_Config_Type_descriptor();
}
template <> struct is_proto_enum< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type>() {
  return ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_Classifier_State_Type_descriptor();
}
template <> struct is_proto_enum< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type>() {
  return ::openconfig::openconfig_qos::Qos_Interfaces_Interface_Output_Classifers_ClassifierKey_Type_descriptor();
}
template <> struct is_proto_enum< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority>() {
  return ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Config_Priority_descriptor();
}
template <> struct is_proto_enum< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType>() {
  return ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_Config_InputType_descriptor();
}
template <> struct is_proto_enum< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType>() {
  return ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Inputs_Input_State_InputType_descriptor();
}
template <> struct is_proto_enum< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType>() {
  return ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_Config_OutputType_descriptor();
}
template <> struct is_proto_enum< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType>() {
  return ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_Output_State_OutputType_descriptor();
}
template <> struct is_proto_enum< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority>() {
  return ::openconfig::openconfig_qos::Qos_SchedulerPolicies_SchedulerPolicy_Schedulers_Scheduler_State_Priority_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_openconfig_2fopenconfig_5fqos_2fopenconfig_5fqos_2eproto__INCLUDED
