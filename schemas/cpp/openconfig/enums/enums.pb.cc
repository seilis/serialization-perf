// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openconfig/enums/enums.proto

#include "openconfig/enums/enums.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace openconfig {
namespace enums {
}  // namespace enums
}  // namespace openconfig
namespace protobuf_openconfig_2fenums_2fenums_2eproto {
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[83];
const ::google::protobuf::uint32 TableStruct::offsets[1] = {};
static const ::google::protobuf::internal::MigrationSchema* schemas = NULL;
static const ::google::protobuf::Message* const* file_default_instances = NULL;

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "openconfig/enums/enums.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      NULL, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\034openconfig/enums/enums.proto\022\020openconf"
      "ig.enums\0328github.com/openconfig/ygot/pro"
      "to/ywrapper/ywrapper.proto\0320github.com/o"
      "penconfig/ygot/proto/yext/yext.proto*\252\202\001"
      "\n\033IETFInterfacesInterfaceType\022%\n!IETFINT"
      "ERFACESINTERFACETYPE_UNSET\020\000\022G\n,IETFINTE"
      "RFACESINTERFACETYPE_VMWAREVIRTUALNIC\020\316\302_"
      "\032\023\202A\020vmwareVirtualNic\0220\n IETFINTERFACESI"
      "NTERFACETYPE_SDSL\020\363\254\215\003\032\007\202A\004sdsl\0222\n!IETFI"
      "NTERFACESINTERFACETYPE_RADSL\020\251\267\233\003\032\010\202A\005ra"
      "dsl\0226\n#IETFINTERFACESINTERFACETYPE_X86LA"
      "PS\020\221\247\240\003\032\n\202A\007x86Laps\022:\n%IETFINTERFACESINT"
      "ERFACETYPE_LOCALTALK\020\246\206\213\004\032\014\202A\tlocalTalk\022"
      "0\n IETFINTERFACESINTERFACETYPE_DLSW\020\271\361\340\004"
      "\032\007\202A\004dlsw\0220\n IETFINTERFACESINTERFACETYPE"
      "_IDSL\020\251\306\305\005\032\007\202A\004idsl\0220\n IETFINTERFACESINT"
      "ERFACETYPE_NFAS\020\263\375\305\007\032\007\202A\004nfas\0224\n\"IETFINT"
      "ERFACESINTERFACETYPE_BRIDGE\020\334\372\340\007\032\t\202A\006bri"
      "dge\022B\n)IETFINTERFACESINTERFACETYPE_IEEE8"
      "0216WMAN\020\313\341\370\014\032\020\202A\rieee80216WMAN\0222\n!IETFI"
      "NTERFACESINTERFACETYPE_TR008\020\307\342\245\016\032\010\202A\005tr"
      "008\022D\n*IETFINTERFACESINTERFACETYPE_DVBRC"
      "CUPSTREAM\020\344\217\317\017\032\021\202A\016dvbRccUpstream\022\\\n6IET"
      "FINTERFACESINTERFACETYPE_PROPDOCSWIRELES"
      "SDOWNSTREAM\020\301\342\340\017\032\035\202A\032propDocsWirelessDow"
      "nstream\022D\n*IETFINTERFACESINTERFACETYPE_F"
      "RF16MFRBUNDLE\020\243\315\372\017\032\021\202A\016frf16MfrBundle\022F\n"
      "+IETFINTERFACESINTERFACETYPE_ACTELISMETA"
      "LOOP\020\207\325\223\020\032\022\202A\017actelisMetaLOOP\022H\n,IETFINT"
      "ERFACESINTERFACETYPE_VIRTUALIPADDRESS\020\205\245"
      "\316\020\032\023\202A\020virtualIpAddress\0222\n!IETFINTERFACE"
      "SINTERFACETYPE_HDSL2\020\300\212\352\020\032\010\202A\005hdsl2\022:\n%I"
      "ETFINTERFACESINTERFACETYPE_VIRTUALTG\020\273\222\264"
      "\021\032\014\202A\tvirtualTg\022B\n)IETFINTERFACESINTERFA"
      "CETYPE_PDNETHERLOOP1\020\234\306\360\022\032\020\202A\rpdnEtherLo"
      "op1\022B\n)IETFINTERFACESINTERFACETYPE_PDNET"
      "HERLOOP2\020\237\306\360\022\032\020\202A\rpdnEtherLoop2\022J\n-IETFI"
      "NTERFACESINTERFACETYPE_DOCSCABLEUPSTREAM"
      "\020\222\346\234\023\032\024\202A\021docsCableUpstream\0222\n!IETFINTER"
      "FACESINTERFACETYPE_MSDSL\020\274\210\225\024\032\010\202A\005msdsl\022"
      "0\n IETFINTERFACESINTERFACETYPE_FDDI\020\234\356\333\025"
      "\032\007\202A\004fddi\022.\n\037IETFINTERFACESINTERFACETYPE"
      "_GFP\020\214\220\255\026\032\006\202A\003gfp\022F\n+IETFINTERFACESINTER"
      "FACETYPE_PROPWIRELESSP2P\020\352\246\305\026\032\022\202A\017propWi"
      "relessP2P\022@\n(IETFINTERFACESINTERFACETYPE"
      "_FIBRECHANNEL\020\312\202\216\027\032\017\202A\014fibreChannel\022>\n\'I"
      "ETFINTERFACESINTERFACETYPE_PROPBWAP2MP\020\243"
      "\340\272\031\032\016\202A\013propBWAp2Mp\0220\n IETFINTERFACESINT"
      "ERFACETYPE_MPLS\020\303\255\265\034\032\007\202A\004mpls\0220\n IETFINT"
      "ERFACESINTERFACETYPE_FAST\020\271\351\366\035\032\007\202A\004fast\022"
      "6\n#IETFINTERFACESINTERFACETYPE_VOICEEM\020\275"
      "\325\325 \032\n\202A\007voiceEM\0226\n#IETFINTERFACESINTERFA"
      "CETYPE_RFC1483\020\326\265\247\"\032\n\202A\007rfc1483\022H\n,IETFI"
      "NTERFACESINTERFACETYPE_OPTICALTRANSPORT\020"
      "\344\261\263\"\032\023\202A\020opticalTransport\0228\n$IETFINTERFA"
      "CESINTERFACETYPE_IPSWITCH\020\314\214\366#\032\013\202A\010ipSwi"
      "tch\022J\n-IETFINTERFACESINTERFACETYPE_FRAME"
      "RELAYSERVICE\020\362\316\303$\032\024\202A\021frameRelayService\022"
      "N\n/IETFINTERFACESINTERFACETYPE_DOCSCABLE"
      "DOWNSTREAM\020\365\211\222\'\032\026\202A\023docsCableDownstream\022"
      "6\n#IETFINTERFACESINTERFACETYPE_SMDSDXI\020\201"
      "\245\306\'\032\n\202A\007smdsDxi\0220\n IETFINTERFACESINTERFA"
      "CETYPE_X213\020\275\260\271)\032\007\202A\004x213\022<\n&IETFINTERFA"
      "CESINTERFACETYPE_DVBRCSTDMA\020\365\266\313)\032\r\202A\ndvb"
      "RcsTdma\0228\n$IETFINTERFACESINTERFACETYPE_R"
      "EACHDSL\020\325\300\242-\032\013\202A\010reachDSL\022B\n)IETFINTERFA"
      "CESINTERFACETYPE_ISO88025FIBER\020\255\207\330-\032\020\202A\r"
      "iso88025Fiber\022.\n\037IETFINTERFACESINTERFACE"
      "TYPE_CES\020\212\300\210.\032\006\202A\003ces\0222\n!IETFINTERFACESI"
      "NTERFACETYPE_ISDNS\020\300\226\353.\032\010\202A\005isdns\0222\n!IET"
      "FINTERFACESINTERFACETYPE_ISDNU\020\306\226\353.\032\010\202A\005"
      "isdnu\022@\n(IETFINTERFACESINTERFACETYPE_CIS"
      "COISLVLAN\020\247\345\202/\032\017\202A\014ciscoISLvlan\022,\n\036IETFI"
      "NTERFACESINTERFACETYPE_E1\020\375\240\227/\032\005\202A\002e1\0222\n"
      "!IETFINTERFACESINTERFACETYPE_OTHER\020\333\330\2071\032"
      "\010\202A\005other\022F\n+IETFINTERFACESINTERFACETYPE"
      "_PROPMULTIPLEXOR\020\247\370\2002\032\022\202A\017propMultiplexo"
      "r\022F\n+IETFINTERFACESINTERFACETYPE_ISO8802"
      "5CRFPINT\020\313\307\2333\032\022\202A\017iso88025CRFPInt\022N\n/IET"
      "FINTERFACESINTERFACETYPE_OPTICALCHANNELG"
      "ROUP\020\313\375\2346\032\026\202A\023opticalChannelGroup\022.\n\037IET"
      "FINTERFACESINTERFACETYPE_DTM\020\334\240\2446\032\006\202A\003dt"
      "m\022T\n2IETFINTERFACESINTERFACETYPE_FRAMERE"
      "LAYINTERCONNECT\020\345\223\3066\032\031\202A\026frameRelayInter"
      "connect\0222\n!IETFINTERFACESINTERFACETYPE_V"
      "DSL2\020\306\347\3156\032\010\202A\005vdsl2\0222\n!IETFINTERFACESINT"
      "ERFACETYPE_ESCON\020\321\271\3566\032\010\202A\005escon\022:\n%IETFI"
      "NTERFACESINTERFACETYPE_RFC877X25\020\257\262\2377\032\014\202"
      "A\trfc877x25\0224\n\"IETFINTERFACESINTERFACETY"
      "PE_X25MLP\020\213\357\345:\032\t\202A\006x25mlp\022J\n-IETFINTERFA"
      "CESINTERFACETYPE_DOCSCABLEMACLAYER\020\311\273\352:\032"
      "\024\202A\021docsCableMaclayer\022N\n/IETFINTERFACESI"
      "NTERFACETYPE_BGPPOLICYACCOUNTING\020\303\215\217;\032\026\202"
      "A\023bgppolicyaccounting\022@\n(IETFINTERFACESI"
      "NTERFACETYPE_A12MPPSWITCH\020\266\361\257;\032\017\202A\014a12Mp"
      "pSwitch\0222\n!IETFINTERFACESINTERFACETYPE_R"
      "S232\020\227\225\354;\032\010\202A\005rs232\022:\n%IETFINTERFACESINT"
      "ERFACETYPE_IFVFITYPE\020\367\353\361;\032\014\202A\tifVfiType\022"
      "<\n&IETFINTERFACESINTERFACETYPE_ATMVIRTUA"
      "L\020\362\231\303<\032\r\202A\natmVirtual\022.\n\037IETFINTERFACESI"
      "NTERFACETYPE_DS0\020\364\243\244>\032\006\202A\003ds0\022.\n\037IETFINT"
      "ERFACESINTERFACETYPE_DS1\020\365\243\244>\032\006\202A\003ds1\022.\n"
      "\037IETFINTERFACESINTERFACETYPE_DS3\020\367\243\244>\032\006\202"
      "A\003ds3\022.\n\037IETFINTERFACESINTERFACETYPE_USB"
      "\020\377\305\267\?\032\006\202A\003usb\0224\n\"IETFINTERFACESINTERFACE"
      "TYPE_L2VLAN\020\242\203\243A\032\t\202A\006l2vlan\022<\n&IETFINTER"
      "FACESINTERFACETYPE_ALUGPONONU\020\235\230\216D\032\r\202A\na"
      "luGponOnu\022B\n)IETFINTERFACESINTERFACETYPE"
      "_IBM370PARCHAN\020\224\250\346D\032\020\202A\ribm370parChan\0224\n"
      "\"IETFINTERFACESINTERFACETYPE_IF_GSN\020\361\347\375D"
      "\032\t\202A\006if-gsn\022>\n\'IETFINTERFACESINTERFACETY"
      "PE_PROPVIRTUAL\020\365\340\223H\032\016\202A\013propVirtual\022V\n3I"
      "ETFINTERFACESINTERFACETYPE_DOCSCABLEUPST"
      "REAMRFPORT\020\303\341\306H\032\032\202A\027docsCableUpstreamRfP"
      "ort\0228\n$IETFINTERFACESINTERFACETYPE_GR303"
      "IDT\020\321\241\341H\032\013\202A\010gr303IDT\0224\n\"IETFINTERFACESI"
      "NTERFACETYPE_DVBTDM\020\346\254\300I\032\t\202A\006dvbTdm\022@\n(I"
      "ETFINTERFACESINTERFACETYPE_HYPERCHANNEL\020"
      "\254\376\307I\032\017\202A\014hyperchannel\0224\n\"IETFINTERFACESI"
      "NTERFACETYPE_X25PLE\020\223\316\344I\032\t\202A\006x25ple\022:\n%I"
      "ETFINTERFACESINTERFACETYPE_FASTETHER\020\213\266\354"
      "I\032\014\202A\tfastEther\0220\n IETFINTERFACESINTERFA"
      "CETYPE_ADSL\020\241\343\354K\032\007\202A\004adsl\022@\n(IETFINTERFA"
      "CESINTERFACETYPE_STACKTOSTACK\020\342\322\225L\032\017\202A\014s"
      "tackToStack\022:\n%IETFINTERFACESINTERFACETY"
      "PE_ADSL2PLUS\020\335\215\377L\032\014\202A\tadsl2plus\022:\n%IETFI"
      "NTERFACESINTERFACETYPE_IPFORWARD\020\307\375\261N\032\014\202"
      "A\tipForward\022.\n\037IETFINTERFACESINTERFACETY"
      "PE_IMT\020\333\307\305N\032\006\202A\003imt\022,\n\036IETFINTERFACESINT"
      "ERFACETYPE_IP\020\350\255\227O\032\005\202A\002ip\022.\n\037IETFINTERFA"
      "CESINTERFACETYPE_PIP\020\356\357\233O\032\006\202A\003pip\022@\n(IET"
      "FINTERFACESINTERFACETYPE_X25HUNTGROUP\020\316\255"
      "\204P\032\017\202A\014x25huntGroup\0226\n#IETFINTERFACESINT"
      "ERFACETYPE_ALUEPON\020\245\333\243P\032\n\202A\007aluEpon\022L\n.I"
      "ETFINTERFACESINTERFACETYPE_ALUEPONPHYSIC"
      "ALUNI\020\300\311\304R\032\025\202A\022aluEponPhysicalUni\0228\n$IET"
      "FINTERFACESINTERFACETYPE_PROPCNLS\020\274\343\337S\032\013"
      "\202A\010propCnls\022L\n.IETFINTERFACESINTERFACETY"
      "PE_CAPWAPDOT11PROFILE\020\345\307\234U\032\025\202A\022capwapDot"
      "11Profile\0228\n$IETFINTERFACESINTERFACETYPE"
      "_VOICEDID\020\272\203\351U\032\013\202A\010voiceDID\022.\n\037IETFINTER"
      "FACESINTERFACETYPE_CNR\020\252\320\210V\032\006\202A\003cnr\0226\n#I"
      "ETFINTERFACESINTERFACETYPE_HDH1822\020\216\216\320V\032"
      "\n\202A\007hdh1822\0224\n\"IETFINTERFACESINTERFACETY"
      "PE_ATMDXI\020\316\307\245X\032\t\202A\006atmDxi\022<\n&IETFINTERFA"
      "CESINTERFACETYPE_ARCNETPLUS\020\362\356\310X\032\r\202A\narc"
      "netPlus\022<\n&IETFINTERFACESINTERFACETYPE_I"
      "POVERCDLC\020\250\333\300Y\032\r\202A\nipOverCdlc\022:\n%IETFINT"
      "ERFACESINTERFACETYPE_LINEGROUP\020\246\324\371Y\032\014\202A\t"
      "linegroup\022D\n*IETFINTERFACESINTERFACETYPE"
      "_DVBRCCMACLAYER\020\253\333\332Z\032\021\202A\016dvbRccMacLayer\022"
      "<\n&IETFINTERFACESINTERFACETYPE_FRAMERELA"
      "Y\020\301\261\337[\032\r\202A\nframeRelay\0220\n IETFINTERFACESI"
      "NTERFACETYPE_ISDN\020\341\247\232\\\032\007\202A\004isdn\022D\n*IETFI"
      "NTERFACESINTERFACETYPE_VOICEOVERCABLE\020\304\224"
      "\241\\\032\021\202A\016voiceOverCable\0220\n IETFINTERFACESI"
      "NTERFACETYPE_ARAP\020\305\216\367\\\032\007\202A\004arap\022.\n\037IETFI"
      "NTERFACESINTERFACETYPE_EON\020\367\316\232^\032\006\202A\003eon\022"
      "P\n0IETFINTERFACESINTERFACETYPE_SONETOVER"
      "HEADCHANNEL\020\213\347\330^\032\027\202A\024sonetOverheadChanne"
      "l\022:\n%IETFINTERFACESINTERFACETYPE_SIXTOFO"
      "UR\020\276\356\330^\032\014\202A\tsixToFour\022.\n\037IETFINTERFACESI"
      "NTERFACETYPE_POS\020\267\365\233_\032\006\202A\003pos\022D\n*IETFINT"
      "ERFACESINTERFACETYPE_ETHERNETCSMACD\020\237\223\326_"
      "\032\021\202A\016ethernetCsmacd\022:\n%IETFINTERFACESINT"
      "ERFACETYPE_DS0BUNDLE\020\304\340\216`\032\014\202A\tds0Bundle\022"
      "<\n&IETFINTERFACESINTERFACETYPE_ATMLOGICA"
      "L\020\336\322\352c\032\r\202A\natmLogical\0228\n$IETFINTERFACESI"
      "NTERFACETYPE_RADIOMAC\020\311\222\313d\032\013\202A\010radioMAC\022"
      "X\n4IETFINTERFACESINTERFACETYPE_PROPDOCSW"
      "IRELESSMACLAYER\020\205\335\240e\032\033\202A\030propDocsWireles"
      "sMaclayer\0224\n\"IETFINTERFACESINTERFACETYPE"
      "_PON622\020\314\232\223f\032\t\202A\006pon622\0220\n IETFINTERFACE"
      "SINTERFACETYPE_NSIP\020\211\373\304f\032\007\202A\004nsip\0222\n!IET"
      "FINTERFACESINTERFACETYPE_MODEM\020\323\226\243i\032\010\202A\005"
      "modem\0224\n\"IETFINTERFACESINTERFACETYPE_OTN"
      "ODU\020\202\250\333i\032\t\202A\006otnOdu\022H\n,IETFINTERFACESINT"
      "ERFACETYPE_ISO88024TOKENBUS\020\303\257\212l\032\023\202A\020iso"
      "88024TokenBus\0224\n\"IETFINTERFACESINTERFACE"
      "TYPE_COFFEE\020\267\237\203m\032\t\202A\006coffee\022X\n4IETFINTER"
      "FACESINTERFACETYPE_DOCSCABLEUPSTREAMCHAN"
      "NEL\020\313\354\204n\032\033\202A\030docsCableUpstreamChannel\0226\n"
      "#IETFINTERFACESINTERFACETYPE_ATMFUNI\020\331\370\235"
      "n\032\n\202A\007atmFuni\022.\n\037IETFINTERFACESINTERFACE"
      "TYPE_LMP\020\236\305\362n\032\006\202A\003lmp\0222\n!IETFINTERFACESI"
      "NTERFACETYPE_ADSL2\020\301\300\274o\032\010\202A\005adsl2\022R\n1IET"
      "FINTERFACESINTERFACETYPE_CABLEDOWNSTREAM"
      "RFPORT\020\327\231\211p\032\030\202A\025cableDownstreamRfPort\022H\n"
      ",IETFINTERFACESINTERFACETYPE_DVBRCCDOWNS"
      "TREAM\020\243\337\214q\032\023\202A\020dvbRccDownstream\022F\n+IETFI"
      "NTERFACESINTERFACETYPE_MEDIAMAILOVERIP\020\321"
      "\331\223q\032\022\202A\017mediaMailOverIp\022:\n%IETFINTERFACE"
      "SINTERFACETYPE_BASICISDN\020\341\224\351r\032\014\202A\tbasicI"
      "SDN\022.\n\037IETFINTERFACESINTERFACETYPE_PLC\020\236"
      "\376\233w\032\006\202A\003plc\022X\n4IETFINTERFACESINTERFACETY"
      "PE_PROPDOCSWIRELESSUPSTREAM\020\366\360\371{\032\033\202A\030pro"
      "pDocsWirelessUpstream\0224\n\"IETFINTERFACESI"
      "NTERFACETYPE_TELINK\020\222\301\326}\032\t\202A\006teLink\0224\n\"I"
      "ETFINTERFACESINTERFACETYPE_PON155\020\355\266\330~\032\t"
      "\202A\006pon155\022<\n&IETFINTERFACESINTERFACETYPE"
      "_TRANSPHDLC\020\316\360\367~\032\r\202A\ntranspHdlc\0227\n#IETFI"
      "NTERFACESINTERFACETYPE_SONETVT\020\314\364\245\200\001\032\n\202A"
      "\007sonetVT\022c\n9IETFINTERFACESINTERFACETYPE_"
      "DIGITALWRAPPEROVERHEADCHANNEL\020\343\227\325\200\001\032 \202A\035"
      "digitalWrapperOverheadChannel\022A\n(IETFINT"
      "ERFACESINTERFACETYPE_VOICEFGDEANA\020\317\314\263\201\001\032"
      "\017\202A\014voiceFGDEANA\022\?\n\'IETFINTERFACESINTERF"
      "ACETYPE_PRIMARYISDN\020\255\273\377\202\001\032\016\202A\013primaryISD"
      "N\022\?\n\'IETFINTERFACESINTERFACETYPE_REGULAR"
      "1822\020\202\220\237\203\001\032\016\202A\013regular1822\0221\n IETFINTERF"
      "ACESINTERFACETYPE_AAL5\020\270\202\322\203\001\032\007\202A\004aal5\0221\n"
      " IETFINTERFACESINTERFACETYPE_AAL2\020\277\202\322\203\001\032"
      "\007\202A\004aal2\022;\n%IETFINTERFACESINTERFACETYPE_"
      "SONETPATH\020\267\336\351\204\001\032\014\202A\tsonetPath\022=\n&IETFINT"
      "ERFACESINTERFACETYPE_MPLSTUNNEL\020\351\260\332\205\001\032\r\202"
      "A\nmplsTunnel\022/\n\037IETFINTERFACESINTERFACET"
      "YPE_ATM\020\361\351\366\205\001\032\006\202A\003atm\0223\n!IETFINTERFACESI"
      "NTERFACETYPE_SONET\020\352\204\252\206\001\032\010\202A\005sonet\0225\n\"IE"
      "TFINTERFACESINTERFACETYPE_ECONET\020\303\253\355\206\001\032\t"
      "\202A\006econet\0229\n$IETFINTERFACESINTERFACETYPE"
      "_L3IPVLAN\020\334\235\217\207\001\032\013\202A\010l3ipvlan\022\?\n\'IETFINTE"
      "RFACESINTERFACETYPE_ISO88026MAN\020\216\367\326\207\001\032\016\202"
      "A\013iso88026Man\022E\n*IETFINTERFACESINTERFACE"
      "TYPE_CAPWAPDOT11BSS\020\272\256\364\210\001\032\021\202A\016capwapDot1"
      "1Bss\0223\n!IETFINTERFACESINTERFACETYPE_ASYN"
      "C\020\371\271\307\211\001\032\010\202A\005async\022I\n,IETFINTERFACESINTER"
      "FACETYPE_DIGITALPOWERLINE\020\236\217\274\212\001\032\023\202A\020digi"
      "talPowerline\022C\n)IETFINTERFACESINTERFACET"
      "YPE_ETHERNET3MBIT\020\277\261\225\214\001\032\020\202A\rethernet3Mbi"
      "t\022;\n%IETFINTERFACESINTERFACETYPE_G703AT6"
      "4K\020\306\370\342\214\001\032\014\202A\tg703at64k\022M\n.IETFINTERFACES"
      "INTERFACETYPE_ALUGPONPHYSICALUNI\020\222\315\324\216\001\032\025"
      "\202A\022aluGponPhysicalUni\0227\n#IETFINTERFACESI"
      "NTERFACETYPE_HOMEPNA\020\311\267\376\216\001\032\n\202A\007homepna\022/"
      "\n\037IETFINTERFACESINTERFACETYPE_SIP\020\335\352\245\217\001\032"
      "\006\202A\003sip\0223\n!IETFINTERFACESINTERFACETYPE_E"
      "PLRS\020\275\303\307\217\001\032\010\202A\005eplrs\0227\n#IETFINTERFACESIN"
      "TERFACETYPE_PROPATM\020\244\355\347\217\001\032\n\202A\007propAtm\022C\n"
      ")IETFINTERFACESINTERFACETYPE_PROTEON10MB"
      "IT\020\367\202\240\220\001\032\020\202A\rproteon10Mbit\022\?\n\'IETFINTERF"
      "ACESINTERFACETYPE_ISO88022LLC\020\361\312\330\220\001\032\016\202A\013"
      "iso88022llc\022\?\n\'IETFINTERFACESINTERFACETY"
      "PE_FASTETHERFX\020\355\364\333\221\001\032\016\202A\013fastEtherFX\0229\n$"
      "IETFINTERFACESINTERFACETYPE_ATMRADIO\020\262\375\351"
      "\221\001\032\013\202A\010atmRadio\022A\n(IETFINTERFACESINTERFA"
      "CETYPE_CBLVECTASTAR\020\217\321\311\222\001\032\017\202A\014cblVectaSt"
      "ar\0221\n IETFINTERFACESINTERFACETYPE_PARA\020\375"
      "\317\222\224\001\032\007\202A\004para\0225\n\"IETFINTERFACESINTERFACE"
      "TYPE_TUNNEL\020\221\326\233\224\001\032\t\202A\006tunnel\022\?\n\'IETFINTE"
      "RFACESINTERFACETYPE_VOICEOVERIP\020\362\314\267\224\001\032\016\202"
      "A\013voiceOverIp\022E\n*IETFINTERFACESINTERFACE"
      "TYPE_OPTICALCHANNEL\020\312\340\336\225\001\032\021\202A\016opticalCha"
      "nnel\0223\n!IETFINTERFACESINTERFACETYPE_Q293"
      "1\020\353\267\273\226\001\032\010\202A\005q2931\022/\n\037IETFINTERFACESINTER"
      "FACETYPE_MVL\020\272\363\350\226\001\032\006\202A\003mvl\022/\n\037IETFINTERF"
      "ACESINTERFACETYPE_PPP\020\271\213\234\227\001\032\006\202A\003ppp\022;\n%I"
      "ETFINTERFACESINTERFACETYPE_FRFORWARD\020\216\246\272"
      "\227\001\032\014\202A\tfrForward\0229\n$IETFINTERFACESINTERF"
      "ACETYPE_IEEE1394\020\214\304\337\227\001\032\013\202A\010ieee1394\022=\n&I"
      "ETFINTERFACESINTERFACETYPE_AFLANE8025\020\303\274"
      "\244\230\001\032\r\202A\naflane8025\022=\n&IETFINTERFACESINTE"
      "RFACETYPE_AFLANE8023\020\305\274\244\230\001\032\r\202A\naflane802"
      "3\0225\n\"IETFINTERFACESINTERFACETYPE_ARCNET\020"
      "\226\371\267\230\001\032\t\202A\006arcnet\022=\n&IETFINTERFACESINTERF"
      "ACETYPE_VOICEENCAP\020\376\275\320\230\001\032\r\202A\nvoiceEncap\022"
      "\?\n\'IETFINTERFACESINTERFACETYPE_ATMVCIEND"
      "PT\020\310\307\253\231\001\032\016\202A\013atmVciEndPt\022E\n*IETFINTERFAC"
      "ESINTERFACETYPE_ISO88023CSMACD\020\262\377\210\232\001\032\021\202A"
      "\016iso88023Csmacd\022Y\n4IETFINTERFACESINTERFA"
      "CETYPE_DOCSCABLEMCMTSDOWNSTREAM\020\305\203\303\232\001\032\033\202"
      "A\030docsCableMCmtsDownstream\022\?\n\'IETFINTERF"
      "ACESINTERFACETYPE_FRDLCIENDPT\020\316\206\237\236\001\032\016\202A\013"
      "frDlciEndPt\022M\n.IETFINTERFACESINTERFACETY"
      "PE_ALUEPONLOGICALLINK\020\322\375\342\237\001\032\025\202A\022aluEponL"
      "ogicalLink\022A\n(IETFINTERFACESINTERFACETYP"
      "E_MOCAVERSION1\020\226\305\235\240\001\032\017\202A\014mocaVersion1\022;\n"
      "%IETFINTERFACESINTERFACETYPE_MFSIGLINK\020\321"
      "\216\373\240\001\032\014\202A\tmfSigLink\0223\n!IETFINTERFACESINTE"
      "RFACETYPE_G9981\020\361\376\263\245\001\032\010\202A\005g9981\0223\n!IETFI"
      "NTERFACESINTERFACETYPE_G9982\020\362\376\263\245\001\032\010\202A\005g"
      "9982\0223\n!IETFINTERFACESINTERFACETYPE_G998"
      "3\020\363\376\263\245\001\032\010\202A\005g9983\022/\n\037IETFINTERFACESINTER"
      "FACETYPE_GTP\020\202\344\254\246\001\032\006\202A\003gtp\022/\n\037IETFINTERF"
      "ACESINTERFACETYPE_MPC\020\237\371\350\246\001\032\006\202A\003mpc\0229\n$I"
      "ETFINTERFACESINTERFACETYPE_DVBASIIN\020\247\224\224\250"
      "\001\032\013\202A\010dvbAsiIn\022;\n%IETFINTERFACESINTERFAC"
      "ETYPE_HIPERLAN2\020\262\323\270\250\001\032\014\202A\thiperlan2\0221\n I"
      "ETFINTERFACESINTERFACETYPE_HSSI\020\310\302\301\250\001\032\007\202"
      "A\004hssi\022=\n&IETFINTERFACESINTERFACETYPE_VO"
      "ICEEMFGD\020\270\211\227\252\001\032\r\202A\nvoiceEMFGD\0221\n IETFINT"
      "ERFACESINTERFACETYPE_SDLC\020\315\356\215\253\001\032\007\202A\004sdlc"
      "\022C\n)IETFINTERFACESINTERFACETYPE_FRAMEREL"
      "AYMPI\020\227\316\271\254\001\032\020\202A\rframeRelayMPI\0229\n$IETFINT"
      "ERFACESINTERFACETYPE_IFPWTYPE\020\301\314\265\255\001\032\013\202A\010"
      "ifPwType\0227\n#IETFINTERFACESINTERFACETYPE_"
      "CHANNEL\020\230\224\256\256\001\032\n\202A\007channel\022C\n)IETFINTERFA"
      "CESINTERFACETYPE_PROTEON80MBIT\020\350\303\320\257\001\032\020\202A"
      "\rproteon80Mbit\022/\n\037IETFINTERFACESINTERFAC"
      "ETYPE_V11\020\375\340\326\257\001\032\006\202A\003v11\022=\n&IETFINTERFACE"
      "SINTERFACETYPE_INTERLEAVE\020\220\364\350\260\001\032\r\202A\ninte"
      "rleave\022O\n/IETFINTERFACESINTERFACETYPE_VO"
      "ICEOVERFRAMERELAY\020\207\210\361\260\001\032\026\202A\023voiceOverFra"
      "meRelay\022=\n&IETFINTERFACESINTERFACETYPE_I"
      "POVERCLAW\020\303\362\217\262\001\032\r\202A\nipOverClaw\022K\n-IETFIN"
      "TERFACESINTERFACETYPE_ISO88025TOKENRING\020"
      "\276\276\260\262\001\032\024\202A\021iso88025TokenRing\022S\n1IETFINTER"
      "FACESINTERFACETYPE_CAPWAPWTPVIRTUALRADIO"
      "\020\254\216\230\264\001\032\030\202A\025capwapWtpVirtualRadio\022;\n%IETF"
      "INTERFACESINTERFACETYPE_IEEE80211\020\221\310\221\265\001\032"
      "\014\202A\tieee80211\022;\n%IETFINTERFACESINTERFACE"
      "TYPE_IEEE80212\020\222\310\221\265\001\032\014\202A\tieee80212\0227\n#IE"
      "TFINTERFACESINTERFACETYPE_HOSTPAD\020\364\306\306\266\001\032"
      "\n\202A\007hostPad\0229\n$IETFINTERFACESINTERFACETY"
      "PE_SMDSICIP\020\377\210\210\267\001\032\013\202A\010smdsIcip\022/\n\037IETFIN"
      "TERFACESINTERFACETYPE_SRP\020\334\225\245\267\001\032\006\202A\003srp\022"
      "G\n+IETFINTERFACESINTERFACETYPE_GIGABITET"
      "HERNET\020\275\256\255\267\001\032\022\202A\017gigabitEthernet\022;\n%IETF"
      "INTERFACESINTERFACETYPE_DVBASIOUT\020\232\277\316\267\001\032"
      "\014\202A\tdvbAsiOut\022M\n.IETFINTERFACESINTERFACE"
      "TYPE_MACSECCONTROLLEDIF\020\300\272\343\267\001\032\025\202A\022macSec"
      "ControlledIF\0229\n$IETFINTERFACESINTERFACET"
      "YPE_GR303RDT\020\332\351\236\270\001\032\013\202A\010gr303RDT\022M\n.IETFI"
      "NTERFACESINTERFACETYPE_PPPMULTILINKBUNDL"
      "E\020\224\205\360\271\001\032\025\202A\022pppMultilinkBundle\0227\n#IETFIN"
      "TERFACESINTERFACETYPE_STARLAN\020\300\310\370\272\001\032\n\202A\007"
      "starLan\0229\n$IETFINTERFACESINTERFACETYPE_V"
      "OICEFXO\020\254\360\374\275\001\032\013\202A\010voiceFXO\0229\n$IETFINTERF"
      "ACESINTERFACETYPE_VOICEFXS\020\260\360\374\275\001\032\013\202A\010voi"
      "ceFXS\022/\n\037IETFINTERFACESINTERFACETYPE_DCN"
      "\020\232\325\244\276\001\032\006\202A\003dcn\022/\n\037IETFINTERFACESINTERFAC"
      "ETYPE_V36\020\304\346\326\277\001\032\006\202A\003v36\022/\n\037IETFINTERFACE"
      "SINTERFACETYPE_V37\020\305\346\326\277\001\032\006\202A\003v37\022/\n\037IETF"
      "INTERFACESINTERFACETYPE_V35\020\307\346\326\277\001\032\006\202A\003v3"
      "5\022=\n&IETFINTERFACESINTERFACETYPE_VOICEFG"
      "DOS\020\254\252\240\300\001\032\r\202A\nvoiceFGDOS\0225\n\"IETFINTERFAC"
      "ESINTERFACETYPE_DS1FDL\020\321\336\217\301\001\032\t\202A\006ds1FDL\022"
      ";\n%IETFINTERFACESINTERFACETYPE_H323PROXY"
      "\020\253\362\242\301\001\032\014\202A\th323Proxy\022I\n,IETFINTERFACESIN"
      "TERFACETYPE_SOFTWARELOOPBACK\020\263\351\264\301\001\032\023\202A\020s"
      "oftwareLoopback\0221\n IETFINTERFACESINTERFA"
      "CETYPE_LAPF\020\360\275\253\302\001\032\007\202A\004lapf\0221\n IETFINTERF"
      "ACESINTERFACETYPE_LAPD\020\362\275\253\302\001\032\007\202A\004lapd\0221\n"
      " IETFINTERFACESINTERFACETYPE_LAPB\020\364\275\253\302\001\032"
      "\007\202A\004lapb\0221\n IETFINTERFACESINTERFACETYPE_"
      "QLLC\020\313\331\357\302\001\032\007\202A\004qllc\0227\n#IETFINTERFACESINT"
      "ERFACETYPE_TERMPAD\020\204\224\376\302\001\032\n\202A\007termPad\0221\n "
      "IETFINTERFACESINTERFACETYPE_BITS\020\277\222\301\303\001\032\007"
      "\202A\004bits\0225\n\"IETFINTERFACESINTERFACETYPE_D"
      "DNX25\020\342\365\206\304\001\032\t\202A\006ddnX25\022C\n)IETFINTERFACES"
      "INTERFACETYPE_IEEE8023ADLAG\020\343\254\201\305\001\032\020\202A\rie"
      "ee8023adLag\022;\n%IETFINTERFACESINTERFACETY"
      "PE_G703AT2MB\020\254\314\210\305\001\032\014\202A\tg703at2mb\0221\n IETF"
      "INTERFACESINTERFACETYPE_GPON\020\205\355\332\306\001\032\007\202A\004g"
      "pon\022\?\n\'IETFINTERFACESINTERFACETYPE_ISO88"
      "025DTR\020\321\305\262\310\001\032\016\202A\013iso88025Dtr\022G\n+IETFINTE"
      "RFACESINTERFACETYPE_ATMSUBINTERFACE\020\322\245\312\310"
      "\001\032\022\202A\017atmSubInterface\0221\n IETFINTERFACESI"
      "NTERFACETYPE_VDSL\020\274\211\220\314\001\032\007\202A\004vdsl\022C\n)IETF"
      "INTERFACESINTERFACETYPE_VMWARENICTEAM\020\320\331"
      "\227\315\001\032\020\202A\rvmwareNicTeam\022=\n&IETFINTERFACESI"
      "NTERFACETYPE_IEEE802154\020\273\232\246\316\001\032\r\202A\nieee80"
      "2154\022;\n%IETFINTERFACESINTERFACETYPE_L3IP"
      "XVLAN\020\302\351\245\317\001\032\014\202A\tl3ipxvlan\0225\n\"IETFINTERFA"
      "CESINTERFACETYPE_ATMIMA\020\350\224\307\320\001\032\t\202A\006atmIma"
      "\022Q\n0IETFINTERFACESINTERFACETYPE_MACSECUN"
      "CONTROLLEDIF\020\301\215\376\320\001\032\027\202A\024macSecUncontrolle"
      "dIF\0229\n$IETFINTERFACESINTERFACETYPE_FCIPL"
      "INK\020\335\263\276\322\001\032\013\202A\010fcipLink\0221\n IETFINTERFACES"
      "INTERFACETYPE_SLIP\020\225\250\333\323\001\032\007\202A\004slip\0225\n\"IET"
      "FINTERFACESINTERFACETYPE_SIPSIG\020\210\221\223\324\001\032\t\202"
      "A\006sipSig\022C\n)IETFINTERFACESINTERFACETYPE_"
      "MPEGTRANSPORT\020\233\225\223\324\001\032\020\202A\rmpegTransport\0221\n"
      " IETFINTERFACESINTERFACETYPE_ISUP\020\274\361\231\324\001\032"
      "\007\202A\004isup\0227\n#IETFINTERFACESINTERFACETYPE_"
      "CCTEMUL\020\216\376\360\325\001\032\n\202A\007cctEmul\0223\n!IETFINTERFA"
      "CESINTERFACETYPE_ULTRA\020\273\366\216\327\001\032\010\202A\005ultra\022O"
      "\n/IETFINTERFACESINTERFACETYPE_IANA_INTER"
      "FACE_TYPE\020\245\277\215\331\001\032\026\202A\023iana-interface-type\022"
      "1\n IETFINTERFACESINTERFACETYPE_TDLC\020\304\221\320\332"
      "\001\032\007\202A\004tdlc\022A\n(IETFINTERFACESINTERFACETYP"
      "E_VOICEOVERATM\020\307\331\325\333\001\032\017\202A\014voiceOverAtm\022=\n"
      "&IETFINTERFACESINTERFACETYPE_ALUEPONONU\020"
      "\357\240\375\333\001\032\r\202A\naluEponOnu\0221\n IETFINTERFACESIN"
      "TERFACETYPE_RSRB\020\366\302\373\336\001\032\007\202A\004rsrb\0223\n!IETFI"
      "NTERFACESINTERFACETYPE_SHDSL\020\347\244\215\340\001\032\010\202A\005s"
      "hdsl\022U\n2IETFINTERFACESINTERFACETYPE_PROP"
      "POINTTOPOINTSERIAL\020\221\246\215\340\001\032\031\202A\026propPointTo"
      "PointSerial\0227\n#IETFINTERFACESINTERFACETY"
      "PE_MYRINET\020\267\247\354\343\001\032\n\202A\007myrinet\022E\n*IETFINTE"
      "RFACESINTERFACETYPE_H323GATEKEEPER\020\256\377\234\350\001"
      "\032\021\202A\016h323Gatekeeper\022;\n%IETFINTERFACESINT"
      "ERFACETYPE_IPOVERATM\020\252\303\277\350\001\032\014\202A\tipOverAtm"
      "\0225\n\"IETFINTERFACESINTERFACETYPE_OTNOTU\020\322"
      "\333\333\351\001\032\t\202A\006otnOtu\0225\n\"IETFINTERFACESINTERFA"
      "CETYPE_ALUELP\020\352\276\227\352\001\032\t\202A\006aluELP\022C\n)IETFIN"
      "TERFACESINTERFACETYPE_COMPOSITELINK\020\220\213\216\356"
      "\001\032\020\202A\rcompositeLink\022/\n\037IETFINTERFACESINT"
      "ERFACETYPE_QAM\020\356\261\223\357\001\032\006\202A\003qam\022=\n&IETFINTE"
      "RFACESINTERFACETYPE_INFINIBAND\020\367\310\273\357\001\032\r\202A"
      "\ninfiniband\0223\n!IETFINTERFACESINTERFACETY"
      "PE_HIPPI\020\377\230\312\360\001\032\010\202A\005hippi\022E\n*IETFINTERFAC"
      "ESINTERFACETYPE_DVBRCSMACLAYER\020\273\307\356\360\001\032\021\202A"
      "\016dvbRcsMacLayer\0227\n#IETFINTERFACESINTERFA"
      "CETYPE_ATMBOND\020\312\302\200\362\001\032\n\202A\007atmbond\0221\n IETF"
      "INTERFACESINTERFACETYPE_ILAN\020\251\225\370\364\001\032\007\202A\004i"
      "lan\022=\n&IETFINTERFACESINTERFACETYPE_SS7SI"
      "GLINK\020\373\320\200\365\001\032\r\202A\nss7SigLink\022K\n-IETFINTERF"
      "ACESINTERFACETYPE_AVICIOPTICALETHER\020\313\345\212\366"
      "\001\032\024\202A\021aviciOpticalEther\022/\n\037IETFINTERFACE"
      "SINTERFACETYPE_RPR\020\251\253\256\367\001\032\006\202A\003rpr\0223\n!IETF"
      "INTERFACESINTERFACETYPE_SIPTG\020\256\306\244\373\001\032\010\202A\005"
      "sipTg\0225\n\"IETFINTERFACESINTERFACETYPE_WWA"
      "NPP\020\304\356\273\373\001\032\t\202A\006wwanPP\022E\n*IETFINTERFACESIN"
      "TERFACETYPE_HIPPIINTERFACE\020\370\327\322\374\001\032\021\202A\016hip"
      "piInterface\0227\n#IETFINTERFACESINTERFACETY"
      "PE_WWANPP2\020\276\200\275\375\001\032\n\202A\007wwanPP2\0229\n$IETFINTE"
      "RFACESINTERFACETYPE_VOICEEBS\020\345\354\333\375\001\032\013\202A\010v"
      "oiceEBS\022/\n\037IETFINTERFACESINTERFACETYPE_B"
      "SC\020\235\217\222\376\001\032\006\202A\003bsc\0225\n\"IETFINTERFACESINTERF"
      "ACETYPE_MIOX25\020\263\344\271\377\001\032\t\202A\006miox25\0221\n IETFI"
      "NTERFACESINTERFACETYPE_HDLC\020\300\262\344\377\001\032\007\202A\004hd"
      "lc*\242\004\n(OpenconfigAaaTypesAAAACCOUNTINGEV"
      "ENTTYPE\0222\n.OPENCONFIGAAATYPESAAAACCOUNTI"
      "NGEVENTTYPE_UNSET\020\000\022i\nCOPENCONFIGAAATYPE"
      "SAAAACCOUNTINGEVENTTYPE_AAA_ACCOUNTING_E"
      "VENT_LOGIN\020\202\210\260\017\032\035\202A\032AAA_ACCOUNTING_EVENT"
      "_LOGIN\022m\nEOPENCONFIGAAATYPESAAAACCOUNTIN"
      "GEVENTTYPE_AAA_ACCOUNTING_EVENT_COMMAND\020"
      "\352\253\241\024\032\037\202A\034AAA_ACCOUNTING_EVENT_COMMAND\022r\n"
      "GOPENCONFIGAAATYPESAAAACCOUNTINGEVENTTYP"
      "E_AAA_AUTHORIZATION_EVENT_CONFIG\020\351\245\231\304\001\032!"
      "\202A\036AAA_AUTHORIZATION_EVENT_CONFIG\022t\nHOPE"
      "NCONFIGAAATYPESAAAACCOUNTINGEVENTTYPE_AA"
      "A_AUTHORIZATION_EVENT_COMMAND\020\322\205\204\342\001\032\"\202A\037"
      "AAA_AUTHORIZATION_EVENT_COMMAND*d\n+Openc"
      "onfigAaaTypesAAAAUTHORIZATIONEVENTTYPE\0225"
      "\n1OPENCONFIGAAATYPESAAAAUTHORIZATIONEVEN"
      "TTYPE_UNSET\020\000*\213\002\n\037OpenconfigAaaTypesAAAM"
      "ETHODTYPE\022)\n%OPENCONFIGAAATYPESAAAMETHOD"
      "TYPE_UNSET\020\000\022A\n*OPENCONFIGAAATYPESAAAMET"
      "HODTYPE_TACACS_ALL\020\344\342\357\307\001\032\r\202A\nTACACS_ALL\022"
      "A\n*OPENCONFIGAAATYPESAAAMETHODTYPE_RADIU"
      "S_ALL\020\315\361\323\352\001\032\r\202A\nRADIUS_ALL\0227\n%OPENCONFIG"
      "AAATYPESAAAMETHODTYPE_LOCAL\020\340\321\343\372\001\032\010\202A\005LO"
      "CAL*\300\001\n\037OpenconfigAaaTypesAAASERVERTYPE\022"
      ")\n%OPENCONFIGAAATYPESAAASERVERTYPE_UNSET"
      "\020\000\0228\n&OPENCONFIGAAATYPESAAASERVERTYPE_TA"
      "CACS\020\212\276\352\002\032\t\202A\006TACACS\0228\n&OPENCONFIGAAATYP"
      "ESAAASERVERTYPE_RADIUS\020\327\333\220\t\032\t\202A\006RADIUS*\254"
      "\001\n$OpenconfigAaaTypesSYSTEMDEFINEDROLES\022"
      ".\n*OPENCONFIGAAATYPESSYSTEMDEFINEDROLES_"
      "UNSET\020\000\022T\n6OPENCONFIGAAATYPESSYSTEMDEFIN"
      "EDROLES_SYSTEM_ROLE_ADMIN\020\270\273\255\272\001\032\024\202A\021SYST"
      "EM_ROLE_ADMIN*\372\001\nDOpenconfigAccessPoints"
      "AccessPointsAccessPointSystemCpusCpuStat"
      "eIndex\022U\nQOPENCONFIGACCESSPOINTS_ACCESSP"
      "OINTS_ACCESSPOINT_SYSTEM_CPUS_CPU_STATE_"
      "INDEX_UNSET\020\000\022[\nOOPENCONFIGACCESSPOINTS_"
      "ACCESSPOINTS_ACCESSPOINT_SYSTEM_CPUS_CPU"
      "_STATE_INDEX_ALL\020\001\032\006\202A\003ALL*\276\002\n!Openconfi"
      "gAclACLCOUNTERCAPABILITY\022+\n\'OPENCONFIGAC"
      "LACLCOUNTERCAPABILITY_UNSET\020\000\022J\n0OPENCON"
      "FIGACLACLCOUNTERCAPABILITY_INTERFACE_ONL"
      "Y\020\375\232\245/\032\021\202A\016INTERFACE_ONLY\022T\n5OPENCONFIGA"
      "CLACLCOUNTERCAPABILITY_INTERFACE_AGGREGA"
      "TE\020\210\335\255\?\032\026\202A\023INTERFACE_AGGREGATE\022J\n0OPENC"
      "ONFIGACLACLCOUNTERCAPABILITY_AGGREGATE_O"
      "NLY\020\205\350\210\177\032\021\202A\016AGGREGATE_ONLY*\203\002\n\024Openconf"
      "igAclACLTYPE\022\036\n\032OPENCONFIGACLACLTYPE_UNS"
      "ET\020\000\022-\n\033OPENCONFIGACLACLTYPE_ACL_L2\020\323\207\222\?"
      "\032\t\202A\006ACL_L2\0222\n\035OPENCONFIGACLACLTYPE_ACL_"
      "IPV4\020\314\256\377\303\001\032\013\202A\010ACL_IPV4\0222\n\035OPENCONFIGACL"
      "ACLTYPE_ACL_IPV6\020\316\256\377\303\001\032\013\202A\010ACL_IPV6\0224\n\036O"
      "PENCONFIGACLACLTYPE_ACL_MIXED\020\302\311\202\340\001\032\014\202A\t"
      "ACL_MIXED*\227\002\nMOpenconfigAclAclAclSetsAcl"
      "SetAclEntriesAclEntryTransportConfigDest"
      "inationPort\022_\n[OPENCONFIGACL_ACL_ACLSETS"
      "_ACLSET_ACLENTRIES_ACLENTRY_TRANSPORT_CO"
      "NFIG_DESTINATIONPORT_UNSET\020\000\022e\nYOPENCONF"
      "IGACL_ACL_ACLSETS_ACLSET_ACLENTRIES_ACLE"
      "NTRY_TRANSPORT_CONFIG_DESTINATIONPORT_AN"
      "Y\020\001\032\006\202A\003ANY*\210\002\nHOpenconfigAclAclAclSetsA"
      "clSetAclEntriesAclEntryTransportConfigSo"
      "urcePort\022Z\nVOPENCONFIGACL_ACL_ACLSETS_AC"
      "LSET_ACLENTRIES_ACLENTRY_TRANSPORT_CONFI"
      "G_SOURCEPORT_UNSET\020\000\022`\nTOPENCONFIGACL_AC"
      "L_ACLSETS_ACLSET_ACLENTRIES_ACLENTRY_TRA"
      "NSPORT_CONFIG_SOURCEPORT_ANY\020\001\032\006\202A\003ANY*\356"
      "\001\n\035OpenconfigAclFORWARDINGACTION\022\'\n#OPEN"
      "CONFIGACLFORWARDINGACTION_UNSET\020\000\0226\n$OPE"
      "NCONFIGACLFORWARDINGACTION_REJECT\020\220\275\343\'\032\t"
      "\202A\006REJECT\0223\n\"OPENCONFIGACLFORWARDINGACTI"
      "ON_DROP\020\246\333\315\220\001\032\007\202A\004DROP\0227\n$OPENCONFIGACLF"
      "ORWARDINGACTION_ACCEPT\020\225\322\332\335\001\032\t\202A\006ACCEPT*"
      "\251\001\n\026OpenconfigAclLOGACTION\022 \n\034OPENCONFIG"
      "ACLLOGACTION_UNSET\020\000\0223\n\037OPENCONFIGACLLOG"
      "ACTION_LOG_NONE\020\341\343\225X\032\013\202A\010LOG_NONE\0228\n!OPE"
      "NCONFIGACLLOGACTION_LOG_SYSLOG\020\274\360\337\364\001\032\r\202A"
      "\nLOG_SYSLOG*\310\003\n+OpenconfigAlarmTypesOPEN"
      "CONFIGALARMSEVERITY\0225\n1OPENCONFIGALARMTY"
      "PESOPENCONFIGALARMSEVERITY_UNSET\020\000\022F\n3OP"
      "ENCONFIGALARMTYPESOPENCONFIGALARMSEVERIT"
      "Y_UNKNOWN\020\255\306\316!\032\n\202A\007UNKNOWN\022H\n4OPENCONFIG"
      "ALARMTYPESOPENCONFIGALARMSEVERITY_CRITIC"
      "AL\020\232\345\377:\032\013\202A\010CRITICAL\022B\n1OPENCONFIGALARMT"
      "YPESOPENCONFIGALARMSEVERITY_MAJOR\020\204\323\377J\032\010"
      "\202A\005MAJOR\022C\n1OPENCONFIGALARMTYPESOPENCONF"
      "IGALARMSEVERITY_MINOR\020\300\224\223\203\001\032\010\202A\005MINOR\022G\n"
      "3OPENCONFIGALARMTYPESOPENCONFIGALARMSEVE"
      "RITY_WARNING\020\263\262\264\265\001\032\n\202A\007WARNING*\335\002\n)Openc"
      "onfigAlarmTypesOPENCONFIGALARMTYPEID\0223\n/"
      "OPENCONFIGALARMTYPESOPENCONFIGALARMTYPEI"
      "D_UNSET\020\000\022>\n.OPENCONFIGALARMTYPESOPENCON"
      "FIGALARMTYPEID_EQPT\020\242\320\231\032\032\007\202A\004EQPT\022=\n-OPE"
      "NCONFIGALARMTYPESOPENCONFIGALARMTYPEID_A"
      "IS\020\345\217\372\251\001\032\006\202A\003AIS\022=\n-OPENCONFIGALARMTYPES"
      "OPENCONFIGALARMTYPEID_LOS\020\372\332\313\271\001\032\006\202A\003LOS\022"
      "=\n-OPENCONFIGALARMTYPESOPENCONFIGALARMTY"
      "PEID_OTS\020\300\203\346\361\001\032\006\202A\003OTS*\302\002\n\'OpenconfigCat"
      "alogTypesCATALOGMEMBERTYPE\0221\n-OPENCONFIG"
      "CATALOGTYPESCATALOGMEMBERTYPE_UNSET\020\000\022P\n"
      "6OPENCONFIGCATALOGTYPESCATALOGMEMBERTYPE"
      "_FEATURE_BUNDLE\020\317\216\336D\032\021\202A\016FEATURE_BUNDLE\022"
      "P\n6OPENCONFIGCATALOGTYPESCATALOGMEMBERTY"
      "PE_RELEASE_BUNDLE\020\260\216\244R\032\021\202A\016RELEASE_BUNDL"
      "E\022@\n.OPENCONFIGCATALOGTYPESCATALOGMEMBER"
      "TYPE_MODULE\020\256\331\203g\032\t\202A\006MODULE*\241\003\n.Openconf"
      "igCatalogTypesIMPLEMENTATIONSTATUSTYPE\0228"
      "\n4OPENCONFIGCATALOGTYPESIMPLEMENTATIONST"
      "ATUSTYPE_UNSET\020\000\022I\n6OPENCONFIGCATALOGTYP"
      "ESIMPLEMENTATIONSTATUSTYPE_PLANNED\020\357\247\335\027\032"
      "\n\202A\007PLANNED\022I\n6OPENCONFIGCATALOGTYPESIMP"
      "LEMENTATIONSTATUSTYPE_PARTIAL\020\266\337\337p\032\n\202A\007P"
      "ARTIAL\022K\n7OPENCONFIGCATALOGTYPESIMPLEMEN"
      "TATIONSTATUSTYPE_COMPLETE\020\256\203\270}\032\013\202A\010COMPL"
      "ETE\022R\n:OPENCONFIGCATALOGTYPESIMPLEMENTAT"
      "IONSTATUSTYPE_IN_PROGRESS\020\274\377\226\372\001\032\016\202A\013IN_P"
      "ROGRESS*\365\002\n(OpenconfigCatalogTypesMODULE"
      "CATEGORYBASE\0222\n.OPENCONFIGCATALOGTYPESMO"
      "DULECATEGORYBASE_UNSET\020\000\022U\n9OPENCONFIGCA"
      "TALOGTYPESMODULECATEGORYBASE_IETF_MODEL_"
      "LAYER\020\240\320\322-\032\023\202A\020IETF_MODEL_LAYER\022^\n=OPENC"
      "ONFIGCATALOGTYPESMODULECATEGORYBASE_IETF"
      "_NETWORK_ELEMENT\020\222\240\207\265\001\032\027\202A\024IETF_NETWORK_"
      "ELEMENT\022^\n=OPENCONFIGCATALOGTYPESMODULEC"
      "ATEGORYBASE_IETF_NETWORK_SERVICE\020\367\374\313\277\001\032\027"
      "\202A\024IETF_NETWORK_SERVICE*\361\001\n&OpenconfigCa"
      "talogTypesMODULESTATUSTYPE\0220\n,OPENCONFIG"
      "CATALOGTYPESMODULESTATUSTYPE_UNSET\020\000\022K\n3"
      "OPENCONFIGCATALOGTYPESMODULESTATUSTYPE_E"
      "XPERIMENTAL\020\237\260\256-\032\017\202A\014EXPERIMENTAL\022H\n1OPE"
      "NCONFIGCATALOGTYPESMODULESTATUSTYPE_PROD"
      "UCTION\020\234\262\355\325\001\032\r\202A\nPRODUCTION*\315\003\n+Openconf"
      "igCatalogTypesMODULESUBCATEGORYBASE\0225\n1O"
      "PENCONFIGCATALOGTYPESMODULESUBCATEGORYBA"
      "SE_UNSET\020\000\022T\n:OPENCONFIGCATALOGTYPESMODU"
      "LESUBCATEGORYBASE_IETF_TYPE_USER\020\375\344\341@\032\021\202"
      "A\016IETF_TYPE_USER\022]\n>OPENCONFIGCATALOGTYP"
      "ESMODULESUBCATEGORYBASE_IETF_TYPE_STANDA"
      "RD\020\363\303\351\227\001\032\025\202A\022IETF_TYPE_STANDARD\022W\n;OPENC"
      "ONFIGCATALOGTYPESMODULESUBCATEGORYBASE_I"
      "ETF_MODEL_TYPE\020\317\224\340\314\001\032\022\202A\017IETF_MODEL_TYPE"
      "\022Y\n<OPENCONFIGCATALOGTYPESMODULESUBCATEG"
      "ORYBASE_IETF_TYPE_VENDOR\020\246\325\204\373\001\032\023\202A\020IETF_"
      "TYPE_VENDOR*\371\002\n&OpenconfigCatalogTypesOR"
      "GANIZATIONTYPE\0220\n,OPENCONFIGCATALOGTYPES"
      "ORGANIZATIONTYPE_UNSET\020\000\022G\n1OPENCONFIGCA"
      "TALOGTYPESORGANIZATIONTYPE_COMMERCIAL\020\321\240"
      "\245\032\032\r\202A\nCOMMERCIAL\022E\n0OPENCONFIGCATALOGTY"
      "PESORGANIZATIONTYPE_STANDARDS\020\273\226\2048\032\014\202A\tS"
      "TANDARDS\022C\n/OPENCONFIGCATALOGTYPESORGANI"
      "ZATIONTYPE_INDUSTRY\020\205\215\227E\032\013\202A\010INDUSTRY\022H\n"
      "1OPENCONFIGCATALOGTYPESORGANIZATIONTYPE_"
      "INDIVIDUAL\020\302\230\266\244\001\032\r\202A\nINDIVIDUAL*\312\001\n$Open"
      "configIfAggregateAggregationType\022.\n*OPEN"
      "CONFIGIFAGGREGATEAGGREGATIONTYPE_UNSET\020\000"
      "\0226\n)OPENCONFIGIFAGGREGATEAGGREGATIONTYPE"
      "_LACP\020\001\032\007\202A\004LACP\022:\n+OPENCONFIGIFAGGREGAT"
      "EAGGREGATIONTYPE_STATIC\020\002\032\t\202A\006STATIC*\300\005\n"
      "!OpenconfigIfEthernetETHERNETSPEED\022+\n\'OP"
      "ENCONFIGIFETHERNETETHERNETSPEED_UNSET\020\000\022"
      "H\n/OPENCONFIGIFETHERNETETHERNETSPEED_SPE"
      "ED_UNKNOWN\020\252\304\275\036\032\020\202A\rSPEED_UNKNOWN\022@\n+OPE"
      "NCONFIGIFETHERNETETHERNETSPEED_SPEED_1GB"
      "\020\262\373\263K\032\014\202A\tSPEED_1GB\022B\n,OPENCONFIGIFETHER"
      "NETETHERNETSPEED_SPEED_25GB\020\374\215\306N\032\r\202A\nSPE"
      "ED_25GB\022D\n-OPENCONFIGIFETHERNETETHERNETS"
      "PEED_SPEED_100MB\020\344\341\366S\032\016\202A\013SPEED_100MB\022B\n"
      ",OPENCONFIGIFETHERNETETHERNETSPEED_SPEED"
      "_10GB\020\304\371\266i\032\r\202A\nSPEED_10GB\022E\n-OPENCONFIGI"
      "FETHERNETETHERNETSPEED_SPEED_100GB\020\332\364\366\203\001"
      "\032\016\202A\013SPEED_100GB\022C\n,OPENCONFIGIFETHERNET"
      "ETHERNETSPEED_SPEED_10MB\020\272\213\267\231\001\032\r\202A\nSPEED"
      "_10MB\022C\n,OPENCONFIGIFETHERNETETHERNETSPE"
      "ED_SPEED_50GB\020\320\245\214\317\001\032\r\202A\nSPEED_50GB\022C\n,OP"
      "ENCONFIGIFETHERNETETHERNETSPEED_SPEED_40"
      "GB\020\317\366\271\340\001\032\r\202A\nSPEED_40GB*\323\002\n\035OpenconfigIf"
      "IpIpAddressOrigin\022\'\n#OPENCONFIGIFIPIPADD"
      "RESSORIGIN_UNSET\020\000\0221\n#OPENCONFIGIFIPIPAD"
      "DRESSORIGIN_OTHER\020\001\032\010\202A\005OTHER\0223\n$OPENCON"
      "FIGIFIPIPADDRESSORIGIN_STATIC\020\002\032\t\202A\006STAT"
      "IC\022/\n\"OPENCONFIGIFIPIPADDRESSORIGIN_DHCP"
      "\020\003\032\007\202A\004DHCP\022;\n(OPENCONFIGIFIPIPADDRESSOR"
      "IGIN_LINK_LAYER\020\004\032\r\202A\nLINK_LAYER\0223\n$OPEN"
      "CONFIGIFIPIPADDRESSORIGIN_RANDOM\020\005\032\t\202A\006R"
      "ANDOM*\342\001\n\034OpenconfigIfIpNeighborOrigin\022&"
      "\n\"OPENCONFIGIFIPNEIGHBORORIGIN_UNSET\020\000\0220"
      "\n\"OPENCONFIGIFIPNEIGHBORORIGIN_OTHER\020\001\032\010"
      "\202A\005OTHER\0222\n#OPENCONFIGIFIPNEIGHBORORIGIN"
      "_STATIC\020\002\032\t\202A\006STATIC\0224\n$OPENCONFIGIFIPNE"
      "IGHBORORIGIN_DYNAMIC\020\003\032\n\202A\007DYNAMIC*\216\001\n\036O"
      "penconfigLacpLacpActivityType\0224\n%OPENCON"
      "FIGLACPLACPACTIVITYTYPE_ACTIVE\020\000\032\t\202A\006ACT"
      "IVE\0226\n&OPENCONFIGLACPLACPACTIVITYTYPE_PA"
      "SSIVE\020\002\032\n\202A\007PASSIVE*~\n\034OpenconfigLacpLac"
      "pPeriodType\022.\n!OPENCONFIGLACPLACPPERIODT"
      "YPE_SLOW\020\000\032\007\202A\004SLOW\022.\n!OPENCONFIGLACPLAC"
      "PPERIODTYPE_FAST\020\001\032\007\202A\004FAST*\330\001\n%Openconf"
      "igLacpLacpSynchronizationType\022/\n+OPENCON"
      "FIGLACPLACPSYNCHRONIZATIONTYPE_UNSET\020\000\022="
      "\n-OPENCONFIGLACPLACPSYNCHRONIZATIONTYPE_"
      "IN_SYNC\020\001\032\n\202A\007IN_SYNC\022\?\n.OPENCONFIGLACPL"
      "ACPSYNCHRONIZATIONTYPE_OUT_SYNC\020\002\032\013\202A\010OU"
      "T_SYNC*\254\001\n\035OpenconfigLacpLacpTimeoutType"
      "\022\'\n#OPENCONFIGLACPLACPTIMEOUTTYPE_UNSET\020"
      "\000\022/\n\"OPENCONFIGLACPLACPTIMEOUTTYPE_LONG\020"
      "\001\032\007\202A\004LONG\0221\n#OPENCONFIGLACPLACPTIMEOUTT"
      "YPE_SHORT\020\002\032\010\202A\005SHORT*\213\004\n\033OpenconfigLldp"
      "ChassisIdType\022%\n!OPENCONFIGLLDPCHASSISID"
      "TYPE_UNSET\020\000\022G\n-OPENCONFIGLLDPCHASSISIDT"
      "YPE_CHASSIS_COMPONENT\020\001\032\024\202A\021CHASSIS_COMP"
      "ONENT\022C\n+OPENCONFIGLLDPCHASSISIDTYPE_INT"
      "ERFACE_ALIAS\020\002\032\022\202A\017INTERFACE_ALIAS\022A\n*OP"
      "ENCONFIGLLDPCHASSISIDTYPE_PORT_COMPONENT"
      "\020\003\032\021\202A\016PORT_COMPONENT\022;\n\'OPENCONFIGLLDPC"
      "HASSISIDTYPE_MAC_ADDRESS\020\004\032\016\202A\013MAC_ADDRE"
      "SS\022C\n+OPENCONFIGLLDPCHASSISIDTYPE_NETWOR"
      "K_ADDRESS\020\005\032\022\202A\017NETWORK_ADDRESS\022A\n*OPENC"
      "ONFIGLLDPCHASSISIDTYPE_INTERFACE_NAME\020\006\032"
      "\021\202A\016INTERFACE_NAME\022/\n!OPENCONFIGLLDPCHAS"
      "SISIDTYPE_LOCAL\020\007\032\010\202A\005LOCAL*\356\003\n\030Openconf"
      "igLldpPortIdType\022\"\n\036OPENCONFIGLLDPPORTID"
      "TYPE_UNSET\020\000\022@\n(OPENCONFIGLLDPPORTIDTYPE"
      "_INTERFACE_ALIAS\020\001\032\022\202A\017INTERFACE_ALIAS\022>"
      "\n\'OPENCONFIGLLDPPORTIDTYPE_PORT_COMPONEN"
      "T\020\002\032\021\202A\016PORT_COMPONENT\0228\n$OPENCONFIGLLDP"
      "PORTIDTYPE_MAC_ADDRESS\020\003\032\016\202A\013MAC_ADDRESS"
      "\022@\n(OPENCONFIGLLDPPORTIDTYPE_NETWORK_ADD"
      "RESS\020\004\032\022\202A\017NETWORK_ADDRESS\022>\n\'OPENCONFIG"
      "LLDPPORTIDTYPE_INTERFACE_NAME\020\005\032\021\202A\016INTE"
      "RFACE_NAME\022B\n)OPENCONFIGLLDPPORTIDTYPE_A"
      "GENT_CIRCUIT_ID\020\006\032\023\202A\020AGENT_CIRCUIT_ID\022,"
      "\n\036OPENCONFIGLLDPPORTIDTYPE_LOCAL\020\007\032\010\202A\005L"
      "OCAL*\234\007\n\'OpenconfigLldpTypesLLDPSYSTEMCA"
      "PABILITY\0221\n-OPENCONFIGLLDPTYPESLLDPSYSTE"
      "MCAPABILITY_UNSET\020\000\022@\n.OPENCONFIGLLDPTYP"
      "ESLLDPSYSTEMCAPABILITY_ROUTER\020\263\265\246\005\032\t\202A\006R"
      "OUTER\022@\n.OPENCONFIGLLDPTYPESLLDPSYSTEMCA"
      "PABILITY_S_VLAN\020\341\224\215.\032\t\202A\006S_VLAN\022H\n2OPENC"
      "ONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_MAC_B"
      "RIDGE\020\347\262\346.\032\r\202A\nMAC_BRIDGE\022L\n4OPENCONFIGL"
      "LDPTYPESLLDPSYSTEMCAPABILITY_STATION_ONL"
      "Y\020\305\204\2153\032\017\202A\014STATION_ONLY\022Z\n;OPENCONFIGLLD"
      "PTYPESLLDPSYSTEMCAPABILITY_DOCSIS_CABLE_"
      "DEVICE\020\324\254\344n\032\026\202A\023DOCSIS_CABLE_DEVICE\022E\n0O"
      "PENCONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_R"
      "EPEATER\020\320\245\205\211\001\032\013\202A\010REPEATER\022W\n9OPENCONFIG"
      "LLDPTYPESLLDPSYSTEMCAPABILITY_WLAN_ACCES"
      "S_POINT\020\222\223\205\236\001\032\024\202A\021WLAN_ACCESS_POINT\022G\n1O"
      "PENCONFIGLLDPTYPESLLDPSYSTEMCAPABILITY_T"
      "ELEPHONE\020\250\336\322\245\001\032\014\202A\tTELEPHONE\022A\n.OPENCONF"
      "IGLLDPTYPESLLDPSYSTEMCAPABILITY_C_VLAN\020\321"
      "\270\215\261\001\032\t\202A\006C_VLAN\022\?\n-OPENCONFIGLLDPTYPESLL"
      "DPSYSTEMCAPABILITY_OTHER\020\372\350\361\344\001\032\010\202A\005OTHER"
      "\022Y\n:OPENCONFIGLLDPTYPESLLDPSYSTEMCAPABIL"
      "ITY_TWO_PORT_MAC_RELAY\020\342\324\342\357\001\032\025\202A\022TWO_POR"
      "T_MAC_RELAY*\252\004\n\032OpenconfigLldpTypesLLDPT"
      "LV\022$\n OPENCONFIGLLDPTYPESLLDPTLV_UNSET\020\000"
      "\022G\n+OPENCONFIGLLDPTYPESLLDPTLV_PORT_DESC"
      "RIPTION\020\224\276\247\007\032\023\202A\020PORT_DESCRIPTION\022M\n.OPE"
      "NCONFIGLLDPTYPESLLDPTLV_SYSTEM_CAPABILIT"
      "IES\020\212\222\321\r\032\026\202A\023SYSTEM_CAPABILITIES\022K\n-OPEN"
      "CONFIGLLDPTYPESLLDPTLV_MANAGEMENT_ADDRES"
      "S\020\252\266\221$\032\025\202A\022MANAGEMENT_ADDRESS\0225\n\"OPENCON"
      "FIGLLDPTYPESLLDPTLV_PORT_ID\020\315\246\361Z\032\n\202A\007POR"
      "T_ID\022L\n-OPENCONFIGLLDPTYPESLLDPTLV_SYSTE"
      "M_DESCRIPTION\020\306\377\220\203\001\032\025\202A\022SYSTEM_DESCRIPTI"
      "ON\022>\n&OPENCONFIGLLDPTYPESLLDPTLV_SYSTEM_"
      "NAME\020\271\256\375\213\001\032\016\202A\013SYSTEM_NAME\022<\n%OPENCONFIG"
      "LLDPTYPESLLDPTLV_CHASSIS_ID\020\232\352\271\302\001\032\r\202A\nCH"
      "ASSIS_ID*\272\001\n\035OpenconfigOpenflowFailureMo"
      "de\022\'\n#OPENCONFIGOPENFLOWFAILUREMODE_UNSE"
      "T\020\000\0223\n$OPENCONFIGOPENFLOWFAILUREMODE_SEC"
      "URE\020\001\032\t\202A\006SECURE\022;\n(OPENCONFIGOPENFLOWFA"
      "ILUREMODE_STANDALONE\020\002\032\r\202A\nSTANDALONE*w\n"
      "\033OpenconfigOpenflowTransport\022+\n\037OPENCONF"
      "IGOPENFLOWTRANSPORT_TCP\020\000\032\006\202A\003TCP\022+\n\037OPE"
      "NCONFIGOPENFLOWTRANSPORT_TLS\020\002\032\006\202A\003TLS*\243"
      "\003\n*OpenconfigOpticalAmplifierFIBERTYPEPR"
      "OFILE\0224\n0OPENCONFIGOPTICALAMPLIFIERFIBER"
      "TYPEPROFILE_UNSET\020\000\022\?\n/OPENCONFIGOPTICAL"
      "AMPLIFIERFIBERTYPEPROFILE_TWRS\020\364\236\341\r\032\007\202A\004"
      "TWRS\022\?\n/OPENCONFIGOPTICALAMPLIFIERFIBERT"
      "YPEPROFILE_SSMF\020\341\335\237\021\032\007\202A\004SSMF\022\?\n/OPENCON"
      "FIGOPTICALAMPLIFIERFIBERTYPEPROFILE_LEAF"
      "\020\262\355\2121\032\007\202A\004LEAF\022=\n.OPENCONFIGOPTICALAMPLI"
      "FIERFIBERTYPEPROFILE_DSF\020\325\300\346Q\032\006\202A\003DSF\022=\n"
      ".OPENCONFIGOPTICALAMPLIFIERFIBERTYPEPROF"
      "ILE_TWC\020\214\221\211s\032\006\202A\003TWC*\224\003\n#OpenconfigOptic"
      "alAmplifierGAINRANGE\022-\n)OPENCONFIGOPTICA"
      "LAMPLIFIERGAINRANGE_UNSET\020\000\022L\n2OPENCONFI"
      "GOPTICALAMPLIFIERGAINRANGE_MID_GAIN_RANG"
      "E\020\230\330\311S\032\021\202A\016MID_GAIN_RANGE\022N\n3OPENCONFIGO"
      "PTICALAMPLIFIERGAINRANGE_HIGH_GAIN_RANGE"
      "\020\266\233\330r\032\022\202A\017HIGH_GAIN_RANGE\022M\n2OPENCONFIGO"
      "PTICALAMPLIFIERGAINRANGE_LOW_GAIN_RANGE\020"
      "\210\277\324\213\001\032\021\202A\016LOW_GAIN_RANGE\022Q\n4OPENCONFIGOP"
      "TICALAMPLIFIERGAINRANGE_FIXED_GAIN_RANGE"
      "\020\364\357\266\356\001\032\023\202A\020FIXED_GAIN_RANGE*\233\002\n.Openconf"
      "igOpticalAmplifierOPTICALAMPLIFIERMODE\0228"
      "\n4OPENCONFIGOPTICALAMPLIFIEROPTICALAMPLI"
      "FIERMODE_UNSET\020\000\022W\n=OPENCONFIGOPTICALAMP"
      "LIFIEROPTICALAMPLIFIERMODE_CONSTANT_POWE"
      "R\020\305\375\352\033\032\021\202A\016CONSTANT_POWER\022V\n<OPENCONFIGO"
      "PTICALAMPLIFIEROPTICALAMPLIFIERMODE_CONS"
      "TANT_GAIN\020\273\313\315\340\001\032\020\202A\rCONSTANT_GAIN*\252\003\n.Op"
      "enconfigOpticalAmplifierOPTICALAMPLIFIER"
      "TYPE\0228\n4OPENCONFIGOPTICALAMPLIFIEROPTICA"
      "LAMPLIFIERTYPE_UNSET\020\000\022C\n3OPENCONFIGOPTI"
      "CALAMPLIFIEROPTICALAMPLIFIERTYPE_EDFA\020\272\320"
      "\3678\032\007\202A\004EDFA\022W\n=OPENCONFIGOPTICALAMPLIFIE"
      "ROPTICALAMPLIFIERTYPE_BACKWARD_RAMAN\020\241\230\326"
      "X\032\021\202A\016BACKWARD_RAMAN\022H\n5OPENCONFIGOPTICA"
      "LAMPLIFIEROPTICALAMPLIFIERTYPE_HYBRID\020\354\224"
      "\343\366\001\032\t\202A\006HYBRID\022V\n<OPENCONFIGOPTICALAMPLI"
      "FIEROPTICALAMPLIFIERTYPE_FORWARD_RAMAN\020\371"
      "\274\216\373\001\032\020\202A\rFORWARD_RAMAN*\367\004\n#OpenconfigPac"
      "ketMatchTypesETHERTYPE\022-\n)OPENCONFIGPACK"
      "ETMATCHTYPESETHERTYPE_UNSET\020\000\022L\n2OPENCON"
      "FIGPACKETMATCHTYPESETHERTYPE_ETHERTYPE_R"
      "OCE\020\221\344\333\006\032\021\202A\016ETHERTYPE_ROCE\022L\n2OPENCONFI"
      "GPACKETMATCHTYPESETHERTYPE_ETHERTYPE_LLD"
      "P\020\200\360\271\036\032\021\202A\016ETHERTYPE_LLDP\022L\n2OPENCONFIGP"
      "ACKETMATCHTYPESETHERTYPE_ETHERTYPE_IPV4\020"
      "\365\375\347B\032\021\202A\016ETHERTYPE_IPV4\022L\n2OPENCONFIGPAC"
      "KETMATCHTYPESETHERTYPE_ETHERTYPE_IPV6\020\367\375"
      "\347B\032\021\202A\016ETHERTYPE_IPV6\022K\n1OPENCONFIGPACKE"
      "TMATCHTYPESETHERTYPE_ETHERTYPE_ARP\020\377\245\341\266\001"
      "\032\020\202A\rETHERTYPE_ARP\022M\n2OPENCONFIGPACKETMA"
      "TCHTYPESETHERTYPE_ETHERTYPE_MPLS\020\354\256\204\314\001\032\021"
      "\202A\016ETHERTYPE_MPLS\022M\n2OPENCONFIGPACKETMAT"
      "CHTYPESETHERTYPE_ETHERTYPE_VLAN\020\333\222\250\371\001\032\021\202"
      "A\016ETHERTYPE_VLAN*\234\005\n$OpenconfigPacketMat"
      "chTypesIPPROTOCOL\022.\n*OPENCONFIGPACKETMAT"
      "CHTYPESIPPROTOCOL_UNSET\020\000\022=\n+OPENCONFIGP"
      "ACKETMATCHTYPESIPPROTOCOL_IP_GRE\020\327\362\273\013\032\t\202"
      "A\006IP_GRE\022=\n+OPENCONFIGPACKETMATCHTYPESIP"
      "PROTOCOL_IP_TCP\020\212\262\273\022\032\t\202A\006IP_TCP\022\?\n,OPENC"
      "ONFIGPACKETMATCHTYPESIPPROTOCOL_IP_L2TP\020"
      "\263\202\207\'\032\n\202A\007IP_L2TP\022\?\n,OPENCONFIGPACKETMATC"
      "HTYPESIPPROTOCOL_IP_AUTH\020\307\251\235a\032\n\202A\007IP_AUT"
      "H\022>\n+OPENCONFIGPACKETMATCHTYPESIPPROTOCO"
      "L_IP_PIM\020\345\337\220\202\001\032\t\202A\006IP_PIM\022@\n,OPENCONFIGP"
      "ACKETMATCHTYPESIPPROTOCOL_IP_IGMP\020\372\313\242\364\001\032"
      "\n\202A\007IP_IGMP\022@\n,OPENCONFIGPACKETMATCHTYPE"
      "SIPPROTOCOL_IP_ICMP\020\326\300\306\364\001\032\n\202A\007IP_ICMP\022>\n"
      "+OPENCONFIGPACKETMATCHTYPESIPPROTOCOL_IP"
      "_UDP\020\372\307\261\372\001\032\t\202A\006IP_UDP\022@\n,OPENCONFIGPACKE"
      "TMATCHTYPESIPPROTOCOL_IP_RSVP\020\352\366\340\374\001\032\n\202A\007"
      "IP_RSVP*\314\004\n\"OpenconfigPacketMatchTypesTC"
      "PFLAGS\022,\n(OPENCONFIGPACKETMATCHTYPESTCPF"
      "LAGS_UNSET\020\000\022=\n*OPENCONFIGPACKETMATCHTYP"
      "ESTCPFLAGS_TCP_CWR\020\322\244\272\003\032\n\202A\007TCP_CWR\022=\n*O"
      "PENCONFIGPACKETMATCHTYPESTCPFLAGS_TCP_AC"
      "K\020\321\331\316#\032\n\202A\007TCP_ACK\022=\n*OPENCONFIGPACKETMA"
      "TCHTYPESTCPFLAGS_TCP_RST\020\261\233\317$\032\n\202A\007TCP_RS"
      "T\022=\n*OPENCONFIGPACKETMATCHTYPESTCPFLAGS_"
      "TCP_ECE\020\263\230\252c\032\n\202A\007TCP_ECE\022=\n*OPENCONFIGPA"
      "CKETMATCHTYPESTCPFLAGS_TCP_PSH\020\243\213\346d\032\n\202A\007"
      "TCP_PSH\022=\n*OPENCONFIGPACKETMATCHTYPESTCP"
      "FLAGS_TCP_SYN\020\264\224\335t\032\n\202A\007TCP_SYN\022>\n*OPENCO"
      "NFIGPACKETMATCHTYPESTCPFLAGS_TCP_FIN\020\355\216\211"
      "\223\001\032\n\202A\007TCP_FIN\022>\n*OPENCONFIGPACKETMATCHT"
      "YPESTCPFLAGS_TCP_URG\020\216\210\306\354\001\032\n\202A\007TCP_URG*\324"
      "\001\n,OpenconfigPlatformLinecardComponentPo"
      "werType\022P\n:OPENCONFIGPLATFORMLINECARDCOM"
      "PONENTPOWERTYPE_POWER_ENABLED\020\000\032\020\202A\rPOWE"
      "R_ENABLED\022R\n;OPENCONFIGPLATFORMLINECARDC"
      "OMPONENTPOWERTYPE_POWER_DISABLED\020\002\032\021\202A\016P"
      "OWER_DISABLED*\273\002\n*OpenconfigPlatformType"
      "sCOMPONENTOPERSTATUS\0224\n0OPENCONFIGPLATFO"
      "RMTYPESCOMPONENTOPERSTATUS_UNSET\020\000\022G\n3OP"
      "ENCONFIGPLATFORMTYPESCOMPONENTOPERSTATUS"
      "_INACTIVE\020\225\276\312\037\032\013\202A\010INACTIVE\022D\n1OPENCONFI"
      "GPLATFORMTYPESCOMPONENTOPERSTATUS_ACTIVE"
      "\020\244\336\222\247\001\032\t\202A\006ACTIVE\022H\n3OPENCONFIGPLATFORMT"
      "YPESCOMPONENTOPERSTATUS_DISABLED\020\306\255\225\326\001\032\013"
      "\202A\010DISABLED*\346\t\n2OpenconfigPlatformTypesO"
      "PENCONFIGHARDWARECOMPONENT\022<\n8OPENCONFIG"
      "PLATFORMTYPESOPENCONFIGHARDWARECOMPONENT"
      "_UNSET\020\000\022]\nBOPENCONFIGPLATFORMTYPESOPENC"
      "ONFIGHARDWARECOMPONENT_OPTICAL_CHANNEL\020\226"
      "\224\262\010\032\022\202A\017OPTICAL_CHANNEL\022K\n9OPENCONFIGPLA"
      "TFORMTYPESOPENCONFIGHARDWARECOMPONENT_FA"
      "BRIC\020\225\300\276\"\032\t\202A\006FABRIC\022W\n\?OPENCONFIGPLATFO"
      "RMTYPESOPENCONFIGHARDWARECOMPONENT_POWER"
      "_SUPPLY\020\201\232\321J\032\017\202A\014POWER_SUPPLY\022K\n9OPENCON"
      "FIGPLATFORMTYPESOPENCONFIGHARDWARECOMPON"
      "ENT_SENSOR\020\270\310\365M\032\t\202A\006SENSOR\022M\n:OPENCONFIG"
      "PLATFORMTYPESOPENCONFIGHARDWARECOMPONENT"
      "_STORAGE\020\311\201\344P\032\n\202A\007STORAGE\022G\n7OPENCONFIGP"
      "LATFORMTYPESOPENCONFIGHARDWARECOMPONENT_"
      "PORT\020\343\206\312c\032\007\202A\004PORT\022E\n6OPENCONFIGPLATFORM"
      "TYPESOPENCONFIGHARDWARECOMPONENT_FAN\020\345\254\260"
      "v\032\006\202A\003FAN\022Q\n<OPENCONFIGPLATFORMTYPESOPEN"
      "CONFIGHARDWARECOMPONENT_BACKPLANE\020\317\267\321\177\032\014"
      "\202A\tBACKPLANE\022P\n;OPENCONFIGPLATFORMTYPESO"
      "PENCONFIGHARDWARECOMPONENT_LINECARD\020\256\203\302\212"
      "\001\032\013\202A\010LINECARD\022d\nEOPENCONFIGPLATFORMTYPE"
      "SOPENCONFIGHARDWARECOMPONENT_INTEGRATED_"
      "CIRCUIT\020\301\343\271\244\001\032\025\202A\022INTEGRATED_CIRCUIT\022N\n:"
      "OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWAR"
      "ECOMPONENT_CHASSIS\020\202\276\261\267\001\032\n\202A\007CHASSIS\022F\n6"
      "OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWAR"
      "ECOMPONENT_CPU\020\200\266\345\336\001\032\006\202A\003CPU\022V\n>OPENCONF"
      "IGPLATFORMTYPESOPENCONFIGHARDWARECOMPONE"
      "NT_TRANSCEIVER\020\260\256\330\346\001\032\016\202A\013TRANSCEIVER\022F\n6"
      "OPENCONFIGPLATFORMTYPESOPENCONFIGHARDWAR"
      "ECOMPONENT_FRU\020\273\341\260\376\001\032\006\202A\003FRU*\323\001\n2Opencon"
      "figPlatformTypesOPENCONFIGSOFTWARECOMPON"
      "ENT\022<\n8OPENCONFIGPLATFORMTYPESOPENCONFIG"
      "SOFTWARECOMPONENT_UNSET\020\000\022_\nCOPENCONFIGP"
      "LATFORMTYPESOPENCONFIGSOFTWARECOMPONENT_"
      "OPERATING_SYSTEM\020\362\261\264\004\032\023\202A\020OPERATING_SYST"
      "EM*\236\004\n\030OpenconfigProbesTestType\022\"\n\036OPENC"
      "ONFIGPROBESTESTTYPE_UNSET\020\000\022*\n\035OPENCONFI"
      "GPROBESTESTTYPE_ICMP\020\001\032\007\202A\004ICMP\022,\n\036OPENC"
      "ONFIGPROBESTESTTYPE_ICMP6\020\002\032\010\202A\005ICMP6\022>\n"
      "\'OPENCONFIGPROBESTESTTYPE_ICMP_TIMESTAMP"
      "\020\003\032\021\202A\016ICMP_TIMESTAMP\022@\n(OPENCONFIGPROBE"
      "STESTTYPE_ICMP6_TIMESTAMP\020\004\032\022\202A\017ICMP6_TI"
      "MESTAMP\022(\n\034OPENCONFIGPROBESTESTTYPE_TCP\020"
      "\005\032\006\202A\003TCP\022(\n\034OPENCONFIGPROBESTESTTYPE_UD"
      "P\020\006\032\006\202A\003UDP\022<\n&OPENCONFIGPROBESTESTTYPE_"
      "UDP_TIMESTAMP\020\007\032\020\202A\rUDP_TIMESTAMP\0222\n!OPE"
      "NCONFIGPROBESTESTTYPE_HTTP_GET\020\010\032\013\202A\010HTT"
      "P_GET\022<\n&OPENCONFIGPROBESTESTTYPE_HTTP_G"
      "ET_META\020\t\032\020\202A\rHTTP_GET_META*\244\001\n\032Openconf"
      "igQosQueueBehavior\022$\n OPENCONFIGQOSQUEUE"
      "BEHAVIOR_UNSET\020\000\022.\n OPENCONFIGQOSQUEUEBE"
      "HAVIOR_SHAPE\020\001\032\010\202A\005SHAPE\0220\n!OPENCONFIGQO"
      "SQUEUEBEHAVIOR_POLICE\020\002\032\t\202A\006POLICE*\362\001\n\036O"
      "penconfigQosTypesQOSQUEUETYPE\022(\n$OPENCON"
      "FIGQOSTYPESQOSQUEUETYPE_UNSET\020\000\022=\n(OPENC"
      "ONFIGQOSTYPESQOSQUEUETYPE_DROP_TAIL\020\341\336\3651"
      "\032\014\202A\tDROP_TAIL\0223\n#OPENCONFIGQOSTYPESQOSQ"
      "UEUETYPE_WRED\020\353\250\335<\032\007\202A\004WRED\0222\n\"OPENCONFI"
      "GQOSTYPESQOSQUEUETYPE_RED\020\340\372\346\254\001\032\006\202A\003RED*"
      "\202\002\n\"OpenconfigQosTypesQOSSCHEDULERTYPE\022,"
      "\n(OPENCONFIGQOSTYPESQOSSCHEDULERTYPE_UNS"
      "ET\020\000\022T\n5OPENCONFIGQOSTYPESQOSSCHEDULERTY"
      "PE_ONE_RATE_TWO_COLOR\020\307\352\347\231\001\032\025\202A\022ONE_RATE"
      "_TWO_COLOR\022X\n7OPENCONFIGQOSTYPESQOSSCHED"
      "ULERTYPE_TWO_RATE_THREE_COLOR\020\377\214\271\314\001\032\027\202A\024"
      "TWO_RATE_THREE_COLOR*\364\001\n\"OpenconfigSpann"
      "ingTreeStpGuardType\022,\n(OPENCONFIGSPANNIN"
      "GTREESTPGUARDTYPE_UNSET\020\000\0224\n\'OPENCONFIGS"
      "PANNINGTREESTPGUARDTYPE_ROOT\020\001\032\007\202A\004ROOT\022"
      "4\n\'OPENCONFIGSPANNINGTREESTPGUARDTYPE_LO"
      "OP\020\002\032\007\202A\004LOOP\0224\n\'OPENCONFIGSPANNINGTREES"
      "TPGUARDTYPE_NONE\020\003\032\007\202A\004NONE*\274\001\n!Openconf"
      "igSpanningTreeStpLinkType\022+\n\'OPENCONFIGS"
      "PANNINGTREESTPLINKTYPE_UNSET\020\000\0221\n%OPENCO"
      "NFIGSPANNINGTREESTPLINKTYPE_P2P\020\001\032\006\202A\003P2"
      "P\0227\n(OPENCONFIGSPANNINGTREESTPLINKTYPE_S"
      "HARED\020\002\032\t\202A\006SHARED*\273\002\n&OpenconfigSpannin"
      "gTreeTypesSTPEDGEPORT\0220\n,OPENCONFIGSPANN"
      "INGTREETYPESSTPEDGEPORT_UNSET\020\000\022I\n2OPENC"
      "ONFIGSPANNINGTREETYPESSTPEDGEPORT_EDGE_E"
      "NABLE\020\311\272\317}\032\016\202A\013EDGE_ENABLE\022F\n0OPENCONFIG"
      "SPANNINGTREETYPESSTPEDGEPORT_EDGE_AUTO\020\331"
      "\242\304\306\001\032\014\202A\tEDGE_AUTO\022L\n3OPENCONFIGSPANNING"
      "TREETYPESSTPEDGEPORT_EDGE_DISABLE\020\250\254\312\330\001\032"
      "\017\202A\014EDGE_DISABLE*\351\002\n&OpenconfigSpanningT"
      "reeTypesSTPPORTROLE\0220\n,OPENCONFIGSPANNIN"
      "GTREETYPESSTPPORTROLE_UNSET\020\000\022G\n1OPENCON"
      "FIGSPANNINGTREETYPESSTPPORTROLE_DESIGNAT"
      "ED\020\363\263\264\036\032\r\202A\nDESIGNATED\022;\n+OPENCONFIGSPAN"
      "NINGTREETYPESSTPPORTROLE_ROOT\020\371\344\346]\032\007\202A\004R"
      "OOT\022\?\n-OPENCONFIGSPANNINGTREETYPESSTPPOR"
      "TROLE_BACKUP\020\277\372\210s\032\t\202A\006BACKUP\022F\n0OPENCONF"
      "IGSPANNINGTREETYPESSTPPORTROLE_ALTERNATE"
      "\020\361\363\355\367\001\032\014\202A\tALTERNATE*\303\003\n\'OpenconfigSpann"
      "ingTreeTypesSTPPORTSTATE\0221\n-OPENCONFIGSP"
      "ANNINGTREETYPESSTPPORTSTATE_UNSET\020\000\022F\n1O"
      "PENCONFIGSPANNINGTREETYPESSTPPORTSTATE_L"
      "ISTENING\020\243\255\313#\032\014\202A\tLISTENING\022D\n0OPENCONFI"
      "GSPANNINGTREETYPESSTPPORTSTATE_DISABLED\020"
      "\204\273\262:\032\013\202A\010DISABLED\022E\n0OPENCONFIGSPANNINGT"
      "REETYPESSTPPORTSTATE_LEARNING\020\262\336\354\241\001\032\013\202A\010"
      "LEARNING\022I\n2OPENCONFIGSPANNINGTREETYPESS"
      "TPPORTSTATE_FORWARDING\020\215\321\335\310\001\032\r\202A\nFORWARD"
      "ING\022E\n0OPENCONFIGSPANNINGTREETYPESSTPPOR"
      "TSTATE_BLOCKING\020\261\322\243\323\001\032\013\202A\010BLOCKING*\237\002\n&O"
      "penconfigSpanningTreeTypesSTPPROTOCOL\0220\n"
      ",OPENCONFIGSPANNINGTREETYPESSTPPROTOCOL_"
      "UNSET\020\000\022;\n+OPENCONFIGSPANNINGTREETYPESST"
      "PPROTOCOL_MSTP\020\247\236\365\004\032\007\202A\004MSTP\022<\n+OPENCONF"
      "IGSPANNINGTREETYPESSTPPROTOCOL_RSTP\020\352\263\307\255"
      "\001\032\007\202A\004RSTP\022H\n1OPENCONFIGSPANNINGTREETYPE"
      "SSTPPROTOCOL_RAPID_PVST\020\205\210\374\341\001\032\r\202A\nRAPID_"
      "PVST*\231\n\n%OpenconfigSystemLoggingSYSLOGFA"
      "CILITY\022/\n+OPENCONFIGSYSTEMLOGGINGSYSLOGF"
      "ACILITY_UNSET\020\000\022A\n.OPENCONFIGSYSTEMLOGGI"
      "NGSYSLOGFACILITY_AUTHPRIV\020\237\313y\032\013\202A\010AUTHPR"
      "IV\022:\n*OPENCONFIGSYSTEMLOGGINGSYSLOGFACIL"
      "ITY_MAIL\020\257\232\3144\032\007\202A\004MAIL\022>\n,OPENCONFIGSYST"
      "EMLOGGINGSYSLOGFACILITY_LOCAL5\020\320\255\363]\032\t\202A\006"
      "LOCAL5\022>\n,OPENCONFIGSYSTEMLOGGINGSYSLOGF"
      "ACILITY_LOCAL4\020\321\255\363]\032\t\202A\006LOCAL4\022>\n,OPENCO"
      "NFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL7\020\322"
      "\255\363]\032\t\202A\006LOCAL7\022>\n,OPENCONFIGSYSTEMLOGGIN"
      "GSYSLOGFACILITY_LOCAL6\020\323\255\363]\032\t\202A\006LOCAL6\022>"
      "\n,OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_"
      "LOCAL1\020\324\255\363]\032\t\202A\006LOCAL1\022>\n,OPENCONFIGSYST"
      "EMLOGGINGSYSLOGFACILITY_LOCAL0\020\325\255\363]\032\t\202A\006"
      "LOCAL0\022>\n,OPENCONFIGSYSTEMLOGGINGSYSLOGF"
      "ACILITY_LOCAL3\020\326\255\363]\032\t\202A\006LOCAL3\022>\n,OPENCO"
      "NFIGSYSTEMLOGGINGSYSLOGFACILITY_LOCAL2\020\327"
      "\255\363]\032\t\202A\006LOCAL2\0228\n)OPENCONFIGSYSTEMLOGGIN"
      "GSYSLOGFACILITY_ALL\020\237\244\244x\032\006\202A\003ALL\022A\n-OPEN"
      "CONFIGSYSTEMLOGGINGSYSLOGFACILITY_CONSOL"
      "E\020\375\271\267\240\001\032\n\202A\007CONSOLE\0229\n)OPENCONFIGSYSTEML"
      "OGGINGSYSLOGFACILITY_NTP\020\374\271\214\247\001\032\006\202A\003NTP\022\?"
      "\n,OPENCONFIGSYSTEMLOGGINGSYSLOGFACILITY_"
      "KERNEL\020\255\242\344\275\001\032\t\202A\006KERNEL\022=\n+OPENCONFIGSYS"
      "TEMLOGGINGSYSLOGFACILITY_AUDIT\020\303\311\364\343\001\032\010\202A"
      "\005AUDIT\022;\n*OPENCONFIGSYSTEMLOGGINGSYSLOGF"
      "ACILITY_AUTH\020\234\270\205\344\001\032\007\202A\004AUTH\022M\n3OPENCONFI"
      "GSYSTEMLOGGINGSYSLOGFACILITY_SYSTEM_DAEM"
      "ON\020\304\235\226\356\001\032\020\202A\rSYSTEM_DAEMON\022\?\n,OPENCONFIG"
      "SYSTEMLOGGINGSYSLOGFACILITY_SYSLOG\020\351\253\325\362\001"
      "\032\t\202A\006SYSLOG\022;\n*OPENCONFIGSYSTEMLOGGINGSY"
      "SLOGFACILITY_USER\020\313\374\347\371\001\032\007\202A\004USER*\324\004\n%Ope"
      "nconfigSystemLoggingSyslogSeverity\022/\n+OP"
      "ENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_UNSE"
      "T\020\000\022A\n/OPENCONFIGSYSTEMLOGGINGSYSLOGSEVE"
      "RITY_EMERGENCY\020\001\032\014\202A\tEMERGENCY\0229\n+OPENCO"
      "NFIGSYSTEMLOGGINGSYSLOGSEVERITY_ALERT\020\002\032"
      "\010\202A\005ALERT\022\?\n.OPENCONFIGSYSTEMLOGGINGSYSL"
      "OGSEVERITY_CRITICAL\020\003\032\013\202A\010CRITICAL\0229\n+OP"
      "ENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_ERRO"
      "R\020\004\032\010\202A\005ERROR\022=\n-OPENCONFIGSYSTEMLOGGING"
      "SYSLOGSEVERITY_WARNING\020\005\032\n\202A\007WARNING\022;\n,"
      "OPENCONFIGSYSTEMLOGGINGSYSLOGSEVERITY_NO"
      "TICE\020\006\032\t\202A\006NOTICE\022I\n3OPENCONFIGSYSTEMLOG"
      "GINGSYSLOGSEVERITY_INFORMATIONAL\020\007\032\020\202A\rI"
      "NFORMATIONAL\0229\n+OPENCONFIGSYSTEMLOGGINGS"
      "YSLOGSEVERITY_DEBUG\020\010\032\010\202A\005DEBUG*\206\001\n\033Open"
      "configSystemNTPAUTHTYPE\022%\n!OPENCONFIGSYS"
      "TEMNTPAUTHTYPE_UNSET\020\000\022@\n(OPENCONFIGSYST"
      "EMNTPAUTHTYPE_NTP_AUTH_MD5\020\213\244\367C\032\017\202A\014NTP_"
      "AUTH_MD5*\312\002\n*OpenconfigTelemetryTypesDAT"
      "AENCODINGMETHOD\0224\n0OPENCONFIGTELEMETRYTY"
      "PESDATAENCODINGMETHOD_UNSET\020\000\022E\n2OPENCON"
      "FIGTELEMETRYTYPESDATAENCODINGMETHOD_ENC_"
      "XML\020\241\204\274a\032\n\202A\007ENC_XML\022K\n5OPENCONFIGTELEME"
      "TRYTYPESDATAENCODINGMETHOD_ENC_PROTO3\020\227\313"
      "\330f\032\r\202A\nENC_PROTO3\022R\n8OPENCONFIGTELEMETRY"
      "TYPESDATAENCODINGMETHOD_ENC_JSON_IETF\020\263\360"
      "\315\320\001\032\020\202A\rENC_JSON_IETF*\371\003\n&OpenconfigTele"
      "metryTypesSTREAMPROTOCOL\0220\n,OPENCONFIGTE"
      "LEMETRYTYPESSTREAMPROTOCOL_UNSET\020\000\022[\n;OP"
      "ENCONFIGTELEMETRYTYPESSTREAMPROTOCOL_STR"
      "EAM_WEBSOCKET_RPC\020\270\201\254\016\032\027\202A\024STREAM_WEBSOC"
      "KET_RPC\022H\n1OPENCONFIGTELEMETRYTYPESSTREA"
      "MPROTOCOL_STREAM_SSH\020\317\200\325\247\001\032\r\202A\nSTREAM_SS"
      "H\022R\n6OPENCONFIGTELEMETRYTYPESSTREAMPROTO"
      "COL_STREAM_JSON_RPC\020\211\242\240\276\001\032\022\202A\017STREAM_JSO"
      "N_RPC\022V\n8OPENCONFIGTELEMETRYTYPESSTREAMP"
      "ROTOCOL_STREAM_THRIFT_RPC\020\352\211\343\304\001\032\024\202A\021STRE"
      "AM_THRIFT_RPC\022J\n2OPENCONFIGTELEMETRYTYPE"
      "SSTREAMPROTOCOL_STREAM_GRPC\020\313\267\372\353\001\032\016\202A\013ST"
      "REAM_GRPC*\230\002\n&OpenconfigTerminalDeviceAd"
      "minStateType\0220\n,OPENCONFIGTERMINALDEVICE"
      "ADMINSTATETYPE_UNSET\020\000\022>\n.OPENCONFIGTERM"
      "INALDEVICEADMINSTATETYPE_ENABLED\020\001\032\n\202A\007E"
      "NABLED\022@\n/OPENCONFIGTERMINALDEVICEADMINS"
      "TATETYPE_DISABLED\020\002\032\013\202A\010DISABLED\022:\n,OPEN"
      "CONFIGTERMINALDEVICEADMINSTATETYPE_MAINT"
      "\020\003\032\010\202A\005MAINT*\356\001\n(OpenconfigTerminalDevic"
      "eLoopbackModeType\022:\n-OPENCONFIGTERMINALD"
      "EVICELOOPBACKMODETYPE_NONE\020\000\032\007\202A\004NONE\022B\n"
      "1OPENCONFIGTERMINALDEVICELOOPBACKMODETYP"
      "E_FACILITY\020\002\032\013\202A\010FACILITY\022B\n1OPENCONFIGT"
      "ERMINALDEVICELOOPBACKMODETYPE_TERMINAL\020\003"
      "\032\013\202A\010TERMINAL*\261\002\n+OpenconfigTransportLin"
      "eCommonAdminStateType\0225\n1OPENCONFIGTRANS"
      "PORTLINECOMMONADMINSTATETYPE_UNSET\020\000\022C\n3"
      "OPENCONFIGTRANSPORTLINECOMMONADMINSTATET"
      "YPE_ENABLED\020\001\032\n\202A\007ENABLED\022E\n4OPENCONFIGT"
      "RANSPORTLINECOMMONADMINSTATETYPE_DISABLE"
      "D\020\002\032\013\202A\010DISABLED\022\?\n1OPENCONFIGTRANSPORTL"
      "INECOMMONADMINSTATETYPE_MAINT\020\003\032\010\202A\005MAIN"
      "T*\341\003\n0OpenconfigTransportLineCommonOPTIC"
      "ALLINEPORTTYPE\022:\n6OPENCONFIGTRANSPORTLIN"
      "ECOMMONOPTICALLINEPORTTYPE_UNSET\020\000\022C\n4OP"
      "ENCONFIGTRANSPORTLINECOMMONOPTICALLINEPO"
      "RTTYPE_ADD\020\332\360\320\035\032\006\202A\003ADD\022E\n5OPENCONFIGTRA"
      "NSPORTLINECOMMONOPTICALLINEPORTTYPE_DROP"
      "\020\366\315\2573\032\007\202A\004DROP\022K\n8OPENCONFIGTRANSPORTLIN"
      "ECOMMONOPTICALLINEPORTTYPE_INGRESS\020\322\377\3225\032"
      "\n\202A\007INGRESS\022J\n7OPENCONFIGTRANSPORTLINECO"
      "MMONOPTICALLINEPORTTYPE_EGRESS\020\204\373\311\223\001\032\t\202A"
      "\006EGRESS\022L\n8OPENCONFIGTRANSPORTLINECOMMON"
      "OPTICALLINEPORTTYPE_MONITOR\020\331\207\267\363\001\032\n\202A\007MO"
      "NITOR*\361\001\n)OpenconfigTransportLineProtect"
      "ionAPSPATHS\0223\n/OPENCONFIGTRANSPORTLINEPR"
      "OTECTIONAPSPATHS_UNSET\020\000\022D\n1OPENCONFIGTR"
      "ANSPORTLINEPROTECTIONAPSPATHS_PRIMARY\020\306\313"
      "\365)\032\n\202A\007PRIMARY\022I\n3OPENCONFIGTRANSPORTLIN"
      "EPROTECTIONAPSPATHS_SECONDARY\020\312\213\231\212\001\032\014\202A\t"
      "SECONDARY*\375\017\n\'OpenconfigTransportTypesET"
      "HERNETPMDTYPE\0221\n-OPENCONFIGTRANSPORTTYPE"
      "SETHERNETPMDTYPE_UNSET\020\000\022L\n4OPENCONFIGTR"
      "ANSPORTTYPESETHERNETPMDTYPE_ETH_100G_AOC"
      "\020\263\310\262\031\032\017\202A\014ETH_100G_AOC\022X\n:OPENCONFIGTRAN"
      "SPORTTYPESETHERNETPMDTYPE_ETH_100GBASE_C"
      "WDM4\020\216\263\236\032\032\025\202A\022ETH_100GBASE_CWDM4\022P\n6OPEN"
      "CONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_"
      "10GBASE_SR\020\276\337\250\037\032\021\202A\016ETH_10GBASE_SR\022V\n9OP"
      "ENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ET"
      "H_100GBASE_CLR4\020\206\355\355%\032\024\202A\021ETH_100GBASE_CL"
      "R4\022T\n8OPENCONFIGTRANSPORTTYPESETHERNETPM"
      "DTYPE_ETH_4X10GBASE_LR\020\277\216\2443\032\023\202A\020ETH_4X10"
      "GBASE_LR\022T\n8OPENCONFIGTRANSPORTTYPESETHE"
      "RNETPMDTYPE_ETH_4X10GBASE_SR\020\362\255\243;\032\023\202A\020ET"
      "H_4X10GBASE_SR\022R\n7OPENCONFIGTRANSPORTTYP"
      "ESETHERNETPMDTYPE_ETH_40GBASE_ER4\020\365\254\204d\032\022"
      "\202A\017ETH_40GBASE_ER4\022P\n6OPENCONFIGTRANSPOR"
      "TTYPESETHERNETPMDTYPE_ETH_10GBASE_ZR\020\305\374\250"
      "g\032\021\202A\016ETH_10GBASE_ZR\022L\n4OPENCONFIGTRANSP"
      "ORTTYPESETHERNETPMDTYPE_ETH_100G_ACC\020\227\356\262"
      "y\032\017\202A\014ETH_100G_ACC\022N\n5OPENCONFIGTRANSPOR"
      "TTYPESETHERNETPMDTYPE_ETH_UNDEFINED\020\263\311\364}"
      "\032\020\202A\rETH_UNDEFINED\022S\n7OPENCONFIGTRANSPOR"
      "TTYPESETHERNETPMDTYPE_ETH_10GBASE_LRM\020\304\342"
      "\213\217\001\032\022\202A\017ETH_10GBASE_LRM\022Q\n6OPENCONFIGTRA"
      "NSPORTTYPESETHERNETPMDTYPE_ETH_10GBASE_E"
      "R\020\244\213\251\217\001\032\021\202A\016ETH_10GBASE_ER\022S\n7OPENCONFIG"
      "TRANSPORTTYPESETHERNETPMDTYPE_ETH_40GBAS"
      "E_LR4\020\340\321\311\224\001\032\022\202A\017ETH_40GBASE_LR4\022W\n9OPENC"
      "ONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH_1"
      "00GBASE_PSM4\020\275\357\205\236\001\032\024\202A\021ETH_100GBASE_PSM4"
      "\022S\n7OPENCONFIGTRANSPORTTYPESETHERNETPMDT"
      "YPE_ETH_40GBASE_SR4\020\343\304\365\242\001\032\022\202A\017ETH_40GBAS"
      "E_SR4\022S\n7OPENCONFIGTRANSPORTTYPESETHERNE"
      "TPMDTYPE_ETH_40GBASE_CR4\020\363\211\230\244\001\032\022\202A\017ETH_4"
      "0GBASE_CR4\022U\n8OPENCONFIGTRANSPORTTYPESET"
      "HERNETPMDTYPE_ETH_40GBASE_PSM4\020\216\273\237\271\001\032\023\202A"
      "\020ETH_40GBASE_PSM4\022U\n8OPENCONFIGTRANSPORT"
      "TYPESETHERNETPMDTYPE_ETH_100GBASE_LR4\020\231\266"
      "\225\275\001\032\023\202A\020ETH_100GBASE_LR4\022W\n9OPENCONFIGTR"
      "ANSPORTTYPESETHERNETPMDTYPE_ETH_100GBASE"
      "_SR10\020\365\370\356\324\001\032\024\202A\021ETH_100GBASE_SR10\022Q\n6OPE"
      "NCONFIGTRANSPORTTYPESETHERNETPMDTYPE_ETH"
      "_10GBASE_LR\020\363\250\251\327\001\032\021\202A\016ETH_10GBASE_LR\022U\n8"
      "OPENCONFIGTRANSPORTTYPESETHERNETPMDTYPE_"
      "ETH_100GBASE_SR4\020\302\243\345\352\001\032\023\202A\020ETH_100GBASE_"
      "SR4\022U\n8OPENCONFIGTRANSPORTTYPESETHERNETP"
      "MDTYPE_ETH_100GBASE_CR4\020\222\371\377\353\001\032\023\202A\020ETH_10"
      "0GBASE_CR4\022U\n8OPENCONFIGTRANSPORTTYPESET"
      "HERNETPMDTYPE_ETH_100GBASE_ER4\020\204\216\274\354\001\032\023\202A"
      "\020ETH_100GBASE_ER4*\332\002\n*OpenconfigTranspor"
      "tTypesFIBERCONNECTORTYPE\0224\n0OPENCONFIGTR"
      "ANSPORTTYPESFIBERCONNECTORTYPE_UNSET\020\000\022R"
      "\n8OPENCONFIGTRANSPORTTYPESFIBERCONNECTOR"
      "TYPE_MPO_CONNECTOR\020\322\242\316\216\001\032\020\202A\rMPO_CONNECT"
      "OR\022P\n7OPENCONFIGTRANSPORTTYPESFIBERCONNE"
      "CTORTYPE_SC_CONNECTOR\020\302\320\213\217\001\032\017\202A\014SC_CONNE"
      "CTOR\022P\n7OPENCONFIGTRANSPORTTYPESFIBERCON"
      "NECTORTYPE_LC_CONNECTOR\020\203\315\324\306\001\032\017\202A\014LC_CON"
      "NECTOR*\237\002\n2OpenconfigTransportTypesLOGIC"
      "ALELEMENTPROTOCOLTYPE\022<\n8OPENCONFIGTRANS"
      "PORTTYPESLOGICALELEMENTPROTOCOLTYPE_UNSE"
      "T\020\000\022O\n;OPENCONFIGTRANSPORTTYPESLOGICALEL"
      "EMENTPROTOCOLTYPE_PROT_OTN\020\302\256\265$\032\013\202A\010PROT"
      "_OTN\022Z\n@OPENCONFIGTRANSPORTTYPESLOGICALE"
      "LEMENTPROTOCOLTYPE_PROT_ETHERNET\020\210\330\237\334\001\032\020"
      "\202A\rPROT_ETHERNET*\223\003\n*OpenconfigTransport"
      "TypesOTNAPPLICATIONCODE\0224\n0OPENCONFIGTRA"
      "NSPORTTYPESOTNAPPLICATIONCODE_UNSET\020\000\022G\n"
      "3OPENCONFIGTRANSPORTTYPESOTNAPPLICATIONC"
      "ODE_P1S1_2D2\020\323\202\314\021\032\013\202A\010P1S1_2D2\022H\n3OPENCO"
      "NFIGTRANSPORTTYPESOTNAPPLICATIONCODE_P1L"
      "1_2D1\020\341\355\367\224\001\032\013\202A\010P1L1_2D1\022H\n3OPENCONFIGTR"
      "ANSPORTTYPESOTNAPPLICATIONCODE_P1L1_2D2\020"
      "\342\355\367\224\001\032\013\202A\010P1L1_2D2\022R\n8OPENCONFIGTRANSPOR"
      "TTYPESOTNAPPLICATIONCODE_OTN_UNDEFINED\020\375"
      "\267\275\346\001\032\020\202A\rOTN_UNDEFINED*\263\003\n,OpenconfigTra"
      "nsportTypesSONETAPPLICATIONCODE\0226\n2OPENC"
      "ONFIGTRANSPORTTYPESSONETAPPLICATIONCODE_"
      "UNSET\020\000\022O\n8OPENCONFIGTRANSPORTTYPESSONET"
      "APPLICATIONCODE_VSR2000_3R5\020\361\310\233\020\032\016\202A\013VSR"
      "2000_3R5\022O\n8OPENCONFIGTRANSPORTTYPESSONE"
      "TAPPLICATIONCODE_VSR2000_3R2\020\366\310\233\020\032\016\202A\013VS"
      "R2000_3R2\022O\n8OPENCONFIGTRANSPORTTYPESSON"
      "ETAPPLICATIONCODE_VSR2000_3R3\020\367\310\233\020\032\016\202A\013V"
      "SR2000_3R3\022X\n<OPENCONFIGTRANSPORTTYPESSO"
      "NETAPPLICATIONCODE_SONET_UNDEFINED\020\335\323\273\330\001"
      "\032\022\202A\017SONET_UNDEFINED*\220\t\n1OpenconfigTrans"
      "portTypesTRANSCEIVERFORMFACTORTYPE\022;\n7OP"
      "ENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFAC"
      "TORTYPE_UNSET\020\000\022X\n\?OPENCONFIGTRANSPORTTY"
      "PESTRANSCEIVERFORMFACTORTYPE_NON_PLUGGAB"
      "LE\020\276\362\227:\032\020\202A\rNON_PLUGGABLE\022F\n6OPENCONFIGT"
      "RANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_C"
      "FP4\020\360\356\357R\032\007\202A\004CFP4\022F\n6OPENCONFIGTRANSPORT"
      "TYPESTRANSCEIVERFORMFACTORTYPE_CFP2\020\366\356\357R"
      "\032\007\202A\004CFP2\022F\n6OPENCONFIGTRANSPORTTYPESTRA"
      "NSCEIVERFORMFACTORTYPE_QSFP\020\221\361\325v\032\007\202A\004QSF"
      "P\022F\n6OPENCONFIGTRANSPORTTYPESTRANSCEIVER"
      "FORMFACTORTYPE_CPAK\020\356\200\301y\032\007\202A\004CPAK\022P\n;OPE"
      "NCONFIGTRANSPORTTYPESTRANSCEIVERFORMFACT"
      "ORTYPE_QSFP_PLUS\020\334\323\232}\032\014\202A\tQSFP_PLUS\022C\n4O"
      "PENCONFIGTRANSPORTTYPESTRANSCEIVERFORMFA"
      "CTORTYPE_X2\020\265\203\225\232\001\032\005\202A\002X2\022I\n7OPENCONFIGTR"
      "ANSPORTTYPESTRANSCEIVERFORMFACTORTYPE_OT"
      "HER\020\227\362\306\240\001\032\010\202A\005OTHER\022E\n5OPENCONFIGTRANSPO"
      "RTTYPESTRANSCEIVERFORMFACTORTYPE_CFP\020\254\214\263"
      "\246\001\032\006\202A\003CFP\022E\n5OPENCONFIGTRANSPORTTYPESTR"
      "ANSCEIVERFORMFACTORTYPE_SFP\020\334\355\324\247\001\032\006\202A\003SF"
      "P\022K\n8OPENCONFIGTRANSPORTTYPESTRANSCEIVER"
      "FORMFACTORTYPE_QSFP28\020\333\253\227\261\001\032\t\202A\006QSFP28\022E"
      "\n5OPENCONFIGTRANSPORTTYPESTRANSCEIVERFOR"
      "MFACTORTYPE_XFP\020\203\205\232\270\001\032\006\202A\003XFP\022O\n:OPENCON"
      "FIGTRANSPORTTYPESTRANSCEIVERFORMFACTORTY"
      "PE_SFP_PLUS\020\333\257\252\314\001\032\013\202A\010SFP_PLUS\022O\n:OPENCO"
      "NFIGTRANSPORTTYPESTRANSCEIVERFORMFACTORT"
      "YPE_CFP2_ACO\020\314\244\270\344\001\032\013\202A\010CFP2_ACO*\242\017\n-Open"
      "configTransportTypesTRIBUTARYPROTOCOLTYP"
      "E\0227\n3OPENCONFIGTRANSPORTTYPESTRIBUTARYPR"
      "OTOCOLTYPE_UNSET\020\000\022N\n8OPENCONFIGTRANSPOR"
      "TTYPESTRIBUTARYPROTOCOLTYPE_PROT_OC768\020\306"
      "\377\204\010\032\r\202A\nPROT_OC768\022N\n8OPENCONFIGTRANSPOR"
      "TTYPESTRIBUTARYPROTOCOLTYPE_PROT_OTU1E\020\231"
      "\347\215,\032\r\202A\nPROT_OTU1E\022L\n7OPENCONFIGTRANSPOR"
      "TTYPESTRIBUTARYPROTOCOLTYPE_PROT_OTU4\020\261\254"
      "\266;\032\014\202A\tPROT_OTU4\022L\n7OPENCONFIGTRANSPORTT"
      "YPESTRIBUTARYPROTOCOLTYPE_PROT_OTU3\020\266\254\266;"
      "\032\014\202A\tPROT_OTU3\022L\n7OPENCONFIGTRANSPORTTYP"
      "ESTRIBUTARYPROTOCOLTYPE_PROT_OTU2\020\267\254\266;\032\014"
      "\202A\tPROT_OTU2\022N\n8OPENCONFIGTRANSPORTTYPES"
      "TRIBUTARYPROTOCOLTYPE_PROT_ODUCN\020\314\372\351;\032\r\202"
      "A\nPROT_ODUCN\022L\n7OPENCONFIGTRANSPORTTYPES"
      "TRIBUTARYPROTOCOLTYPE_PROT_ODU4\020\301\360\330<\032\014\202A"
      "\tPROT_ODU4\022L\n7OPENCONFIGTRANSPORTTYPESTR"
      "IBUTARYPROTOCOLTYPE_PROT_ODU3\020\306\360\330<\032\014\202A\tP"
      "ROT_ODU3\022L\n7OPENCONFIGTRANSPORTTYPESTRIB"
      "UTARYPROTOCOLTYPE_PROT_ODU2\020\307\360\330<\032\014\202A\tPRO"
      "T_ODU2\022N\n8OPENCONFIGTRANSPORTTYPESTRIBUT"
      "ARYPROTOCOLTYPE_PROT_OTU2E\020\320\361\215D\032\r\202A\nPROT"
      "_OTU2E\022L\n7OPENCONFIGTRANSPORTTYPESTRIBUT"
      "ARYPROTOCOLTYPE_PROT_OC48\020\215\367\244D\032\014\202A\tPROT_"
      "OC48\022N\n8OPENCONFIGTRANSPORTTYPESTRIBUTAR"
      "YPROTOCOLTYPE_PROT_STM16\020\256\262\342t\032\r\202A\nPROT_S"
      "TM16\022J\n6OPENCONFIGTRANSPORTTYPESTRIBUTAR"
      "YPROTOCOLTYPE_PROT_1GE\020\270\223\347z\032\013\202A\010PROT_1GE"
      "\022U\n;OPENCONFIGTRANSPORTTYPESTRIBUTARYPRO"
      "TOCOLTYPE_PROT_100G_MLG\020\340\243\210\205\001\032\020\202A\rPROT_1"
      "00G_MLG\022O\n8OPENCONFIGTRANSPORTTYPESTRIBU"
      "TARYPROTOCOLTYPE_PROT_100GE\020\370\212\352\223\001\032\r\202A\nPR"
      "OT_100GE\022O\n8OPENCONFIGTRANSPORTTYPESTRIB"
      "UTARYPROTOCOLTYPE_PROT_STM64\020\251\310\342\254\001\032\r\202A\nP"
      "ROT_STM64\022M\n7OPENCONFIGTRANSPORTTYPESTRI"
      "BUTARYPROTOCOLTYPE_PROT_40GE\020\223\212\371\256\001\032\014\202A\tP"
      "ROT_40GE\022U\n;OPENCONFIGTRANSPORTTYPESTRIB"
      "UTARYPROTOCOLTYPE_PROT_10GE_WAN\020\313\352\341\257\001\032\020\202"
      "A\rPROT_10GE_WAN\022Q\n9OPENCONFIGTRANSPORTTY"
      "PESTRIBUTARYPROTOCOLTYPE_PROT_STM256\020\332\233\202"
      "\272\001\032\016\202A\013PROT_STM256\022O\n8OPENCONFIGTRANSPOR"
      "TTYPESTRIBUTARYPROTOCOLTYPE_PROT_OTUCN\020\374"
      "\240\216\274\001\032\r\202A\nPROT_OTUCN\022O\n8OPENCONFIGTRANSPO"
      "RTTYPESTRIBUTARYPROTOCOLTYPE_PROT_ODU2E\020"
      "\200\257\352\303\001\032\r\202A\nPROT_ODU2E\022U\n;OPENCONFIGTRANSP"
      "ORTTYPESTRIBUTARYPROTOCOLTYPE_PROT_10GE_"
      "LAN\020\200\342\305\361\001\032\020\202A\rPROT_10GE_LAN\022O\n8OPENCONFI"
      "GTRANSPORTTYPESTRIBUTARYPROTOCOLTYPE_PRO"
      "T_OC192\020\217\202\363\377\001\032\r\202A\nPROT_OC192*\341\007\n.Opencon"
      "figTransportTypesTRIBUTARYRATECLASSTYPE\022"
      "8\n4OPENCONFIGTRANSPORTTYPESTRIBUTARYRATE"
      "CLASSTYPE_UNSET\020\000\022U\n<OPENCONFIGTRANSPORT"
      "TYPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_40"
      "G\020\214\340\247\036\032\020\202A\rTRIB_RATE_40G\022S\n;OPENCONFIGTR"
      "ANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRIB_"
      "RATE_1G\020\325\334\2616\032\017\202A\014TRIB_RATE_1G\022W\n=OPENCON"
      "FIGTRANSPORTTYPESTRIBUTARYRATECLASSTYPE_"
      "TRIB_RATE_150G\020\210\325\226e\032\021\202A\016TRIB_RATE_150G\022W"
      "\n=OPENCONFIGTRANSPORTTYPESTRIBUTARYRATEC"
      "LASSTYPE_TRIB_RATE_100G\020\305\327\346t\032\021\202A\016TRIB_RA"
      "TE_100G\022W\n=OPENCONFIGTRANSPORTTYPESTRIBU"
      "TARYRATECLASSTYPE_TRIB_RATE_200G\020\320\327\320x\032\021\202"
      "A\016TRIB_RATE_200G\022X\n=OPENCONFIGTRANSPORTT"
      "YPESTRIBUTARYRATECLASSTYPE_TRIB_RATE_300"
      "G\020\253\212\363\203\001\032\021\202A\016TRIB_RATE_300G\022X\n=OPENCONFIG"
      "TRANSPORTTYPESTRIBUTARYRATECLASSTYPE_TRI"
      "B_RATE_250G\020\215\305\235\210\001\032\021\202A\016TRIB_RATE_250G\022X\n="
      "OPENCONFIGTRANSPORTTYPESTRIBUTARYRATECLA"
      "SSTYPE_TRIB_RATE_400G\020\346\243\226\217\001\032\021\202A\016TRIB_RAT"
      "E_400G\022V\n<OPENCONFIGTRANSPORTTYPESTRIBUT"
      "ARYRATECLASSTYPE_TRIB_RATE_10G\020\301\277\305\256\001\032\020\202A"
      "\rTRIB_RATE_10G\022X\n=OPENCONFIGTRANSPORTTYP"
      "ESTRIBUTARYRATECLASSTYPE_TRIB_RATE_2_5G\020"
      "\305\257\345\360\001\032\021\202A\016TRIB_RATE_2.5G*\313\002\n\034OpenconfigV"
      "lanTypesTPIDTYPES\022&\n\"OPENCONFIGVLANTYPES"
      "TPIDTYPES_UNSET\020\000\022\?\n(OPENCONFIGVLANTYPES"
      "TPIDTYPES_TPID_0X9100\020\200\363\326\024\032\016\202A\013TPID_0X91"
      "00\022\?\n(OPENCONFIGVLANTYPESTPIDTYPES_TPID_"
      "0X88A8\020\361\222\373O\032\016\202A\013TPID_0X88A8\022\?\n(OPENCONFI"
      "GVLANTYPESTPIDTYPES_TPID_0X8100\020\347\246\326x\032\016\202A"
      "\013TPID_0X8100\022@\n(OPENCONFIGVLANTYPESTPIDT"
      "YPES_TPID_0X9200\020\373\266\365\244\001\032\016\202A\013TPID_0X9200*\244"
      "\001\n\032OpenconfigVlanVlanModeType\022$\n OPENCON"
      "FIGVLANVLANMODETYPE_UNSET\020\000\0220\n!OPENCONFI"
      "GVLANVLANMODETYPE_ACCESS\020\001\032\t\202A\006ACCESS\022.\n"
      " OPENCONFIGVLANVLANMODETYPE_TRUNK\020\002\032\010\202A\005"
      "TRUNK*\242\002\n(OpenconfigWavelengthRouterAdmi"
      "nStateType\0222\n.OPENCONFIGWAVELENGTHROUTER"
      "ADMINSTATETYPE_UNSET\020\000\022@\n0OPENCONFIGWAVE"
      "LENGTHROUTERADMINSTATETYPE_ENABLED\020\001\032\n\202A"
      "\007ENABLED\022B\n1OPENCONFIGWAVELENGTHROUTERAD"
      "MINSTATETYPE_DISABLED\020\002\032\013\202A\010DISABLED\022<\n."
      "OPENCONFIGWAVELENGTHROUTERADMINSTATETYPE"
      "_MAINT\020\003\032\010\202A\005MAINT*\336\001\n\032OpenconfigWifiTyp"
      "esAPSTATE\022$\n OPENCONFIGWIFITYPESAPSTATE_"
      "UNSET\020\000\022:\n$OPENCONFIGWIFITYPESAPSTATE_UP"
      "GRADING\020\261\200\362\246\001\032\014\202A\tUPGRADING\022,\n\035OPENCONFI"
      "GWIFITYPESAPSTATE_UP\020\223\276\365\341\001\032\005\202A\002UP\0220\n\037OPE"
      "NCONFIGWIFITYPESAPSTATE_DOWN\020\360\270\245\374\001\032\007\202A\004D"
      "OWN*\327\002\n#OpenconfigWifiTypesCHANGEREASONT"
      "YPE\022-\n)OPENCONFIGWIFITYPESCHANGEREASONTY"
      "PE_UNSET\020\000\0226\n\'OPENCONFIGWIFITYPESCHANGER"
      "EASONTYPE_DFS\020\374\332\223f\032\006\202A\003DFS\022;\n)OPENCONFIG"
      "WIFITYPESCHANGEREASONTYPE_NOISE\020\313\351\217\240\001\032\010\202"
      "A\005NOISE\022=\n*OPENCONFIGWIFITYPESCHANGEREAS"
      "ONTYPE_ERRORS\020\202\315\211\344\001\032\t\202A\006ERRORS\022M\n2OPENCO"
      "NFIGWIFITYPESCHANGEREASONTYPE_BETTER_CHA"
      "NNEL\020\333\360\205\371\001\032\021\202A\016BETTER-CHANNEL*\370\002\n%Openco"
      "nfigWifiTypesCLIENTCAPABILITIES\022/\n+OPENC"
      "ONFIGWIFITYPESCLIENTCAPABILITIES_UNSET\020\000"
      "\022@\n-OPENCONFIGWIFITYPESCLIENTCAPABILITIE"
      "S_DOT_11R\020\353\332\234\014\032\n\202A\007DOT_11R\022@\n-OPENCONFIG"
      "WIFITYPESCLIENTCAPABILITIES_DOT_11V\020\357\332\234\014"
      "\032\n\202A\007DOT_11V\022L\n3OPENCONFIGWIFITYPESCLIEN"
      "TCAPABILITIES_MU_BEAMFORMEE\020\213\204\265+\032\020\202A\rMU_"
      "BEAMFORMEE\022L\n3OPENCONFIGWIFITYPESCLIENTC"
      "APABILITIES_MU_BEAMFORMER\020\234\204\265+\032\020\202A\rMU_BE"
      "AMFORMER*\334\006\n\036OpenconfigWifiTypesCLIENTST"
      "ATE\022(\n$OPENCONFIGWIFITYPESCLIENTSTATE_UN"
      "SET\020\000\022A\n*OPENCONFIGWIFITYPESCLIENTSTATE_"
      "BLACKLISTED\020\224\354\315\007\032\016\202A\013BLACKLISTED\022C\n+OPEN"
      "CONFIGWIFITYPESCLIENTSTATE_DHCP_FAILURE\020"
      "\340\233\3660\032\017\202A\014DHCP_FAILURE\022A\n*OPENCONFIGWIFIT"
      "YPESCLIENTSTATE_L2AUTH_REQD\020\301\243\250R\032\016\202A\013L2A"
      "UTH_REQD\022=\n(OPENCONFIGWIFITYPESCLIENTSTA"
      "TE_POWERSAVE\020\236\233\242q\032\014\202A\tPOWERSAVE\022E\n,OPENC"
      "ONFIGWIFITYPESCLIENTSTATE_AUTHENTICATED\020"
      "\327\236\262w\032\020\202A\rAUTHENTICATED\022U\n4OPENCONFIGWIFI"
      "TYPESCLIENTSTATE_L2AUTH_FAILURE_REJECT\020\311"
      "\346\277y\032\030\202A\025L2AUTH_FAILURE_REJECT\022X\n5OPENCON"
      "FIGWIFITYPESCLIENTSTATE_L2AUTH_FAILURE_T"
      "IMEOUT\020\271\353\306\227\001\032\031\202A\026L2AUTH_FAILURE_TIMEOUT\022"
      "B\n*OPENCONFIGWIFITYPESCLIENTSTATE_L3AUTH"
      "_REQD\020\216\256\335\253\001\032\016\202A\013L3AUTH_REQD\022@\n)OPENCONFI"
      "GWIFITYPESCLIENTSTATE_ASSOCIATED\020\240\310\241\311\001\032\r"
      "\202A\nASSOCIATED\022H\n-OPENCONFIGWIFITYPESCLIE"
      "NTSTATE_L3AUTH_FAILURE\020\320\250\327\330\001\032\021\202A\016L3AUTH_"
      "FAILURE\022>\n(OPENCONFIGWIFITYPESCLIENTSTAT"
      "E_DHCP_REQD\020\276\312\251\350\001\032\014\202A\tDHCP_REQD*\225\006\n\033Open"
      "configWifiTypesDATARATE\022%\n!OPENCONFIGWIF"
      "ITYPESDATARATE_UNSET\020\000\022:\n%OPENCONFIGWIFI"
      "TYPESDATARATE_RATE_36MB\020\241\216\356\n\032\014\202A\tRATE_36"
      "MB\022:\n%OPENCONFIGWIFITYPESDATARATE_RATE_4"
      "8MB\020\206\261\233\014\032\014\202A\tRATE_48MB\022:\n%OPENCONFIGWIFI"
      "TYPESDATARATE_RATE_18MB\020\321\204\2259\032\014\202A\tRATE_18"
      "MB\022:\n%OPENCONFIGWIFITYPESDATARATE_RATE_1"
      "1MB\020\214\313\356Y\032\014\202A\tRATE_11MB\022:\n%OPENCONFIGWIFI"
      "TYPESDATARATE_RATE_12MB\020\207\300\373Y\032\014\202A\tRATE_12"
      "MB\022;\n%OPENCONFIGWIFITYPESDATARATE_RATE_2"
      "4MB\020\370\320\215\217\001\032\014\202A\tRATE_24MB\022;\n%OPENCONFIGWIF"
      "ITYPESDATARATE_RATE_54MB\020\221\366\243\235\001\032\014\202A\tRATE_"
      "54MB\0229\n$OPENCONFIGWIFITYPESDATARATE_RATE"
      "_6MB\020\256\220\271\305\001\032\013\202A\010RATE_6MB\0229\n$OPENCONFIGWIF"
      "ITYPESDATARATE_RATE_1MB\020\241\362\302\305\001\032\013\202A\010RATE_1"
      "MB\0229\n$OPENCONFIGWIFITYPESDATARATE_RATE_2"
      "MB\020\352\352\335\305\001\032\013\202A\010RATE_2MB\0229\n$OPENCONFIGWIFIT"
      "YPESDATARATE_RATE_9MB\020\231\270\217\306\001\032\013\202A\010RATE_9MB"
      "\022=\n&OPENCONFIGWIFITYPESDATARATE_RATE_5_5"
      "MB\020\362\361\215\334\001\032\r\202A\nRATE_5.5MB*\263\002\n%OpenconfigWi"
      "fiTypesOPERATINGFREQUENCY\022/\n+OPENCONFIGW"
      "IFITYPESOPERATINGFREQUENCY_UNSET\020\000\022E\n/OP"
      "ENCONFIGWIFITYPESOPERATINGFREQUENCY_FREQ"
      "_5GHZ\020\334\371\370\233\001\032\014\202A\tFREQ_5GHZ\022K\n2OPENCONFIGW"
      "IFITYPESOPERATINGFREQUENCY_FREQ_2_5_GHZ\020"
      "\324\300\200\267\001\032\017\202A\014FREQ_2_5_GHZ\022E\n/OPENCONFIGWIFI"
      "TYPESOPERATINGFREQUENCY_FREQ_2GHZ\020\321\325\330\362\001\032"
      "\014\202A\tFREQ_2GHZb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 52261);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "openconfig/enums/enums.proto", &protobuf_RegisterTypes);
  ::protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::AddDescriptors();
  ::protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fyext_2fyext_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_openconfig_2fenums_2fenums_2eproto
namespace openconfig {
namespace enums {
const ::google::protobuf::EnumDescriptor* IETFInterfacesInterfaceType_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[0];
}
bool IETFInterfacesInterfaceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1565006:
    case 6510195:
    case 6740905:
    case 6820753:
    case 8569638:
    case 9975993:
    case 11625257:
    case 15826611:
    case 16268636:
    case 27144395:
    case 29978951:
    case 32753636:
    case 33042753:
    case 33466019:
    case 33876615:
    case 34837125:
    case 35292480:
    case 36505915:
    case 39592732:
    case 39592735:
    case 40317714:
    case 42288188:
    case 45545244:
    case 46876684:
    case 47272810:
    case 48464202:
    case 53391395:
    case 59594435:
    case 62764217:
    case 68512445:
    case 71949014:
    case 72145124:
    case 75335244:
    case 76605298:
    case 82085109:
    case 82940545:
    case 86923325:
    case 87219061:
    case 94937173:
    case 95814573:
    case 96608266:
    case 98224960:
    case 98224966:
    case 98611879:
    case 98947197:
    case 102886491:
    case 104872999:
    case 107406283:
    case 113721035:
    case 113840220:
    case 114395621:
    case 114521030:
    case 115055825:
    case 115857711:
    case 123303819:
    case 123379145:
    case 123979459:
    case 124516534:
    case 125504151:
    case 125597175:
    case 126930162:
    case 130617844:
    case 130617845:
    case 130617847:
    case 133030655:
    case 136888738:
    case 142838813:
    case 144282644:
    case 144667633:
    case 151318645:
    case 152154307:
    case 152588497:
    case 154146406:
    case 154271532:
    case 154740499:
    case 154868491:
    case 159068577:
    case 159738210:
    case 161466077:
    case 164396743:
    case 164717531:
    case 166057704:
    case 166131694:
    case 167843534:
    case 168357285:
    case 173089984:
    case 175632828:
    case 178725861:
    case 179978682:
    case 180496426:
    case 181667598:
    case 185164750:
    case 185743218:
    case 187706792:
    case 188639782:
    case 190229931:
    case 192403649:
    case 193369057:
    case 193481284:
    case 194889541:
    case 197568375:
    case 198587275:
    case 198588222:
    case 199686839:
    case 200640927:
    case 201568324:
    case 209365342:
    case 210946377:
    case 212348549:
    case 214224204:
    case 215039369:
    case 220777299:
    case 221697026:
    case 226662339:
    case 228642743:
    case 230766155:
    case 231177305:
    case 232563358:
    case 233775169:
    case 235031767:
    case 237186979:
    case 237300945:
    case 240798305:
    case 250019614:
    case 259946614:
    case 263561362:
    case 265689965:
    case 266205262:
    case 269056588:
    case 269831139:
    case 271377999:
    case 274718125:
    case 275236866:
    case 276070712:
    case 276070719:
    case 278556471:
    case 280402025:
    case 280868081:
    case 281707114:
    case 282809795:
    case 283365084:
    case 284539790:
    case 287119162:
    case 288480505:
    case 290391966:
    case 293951679:
    case 295222342:
    case 299181714:
    case 299867081:
    case 300512605:
    case 301064637:
    case 301594276:
    case 302514551:
    case 303441265:
    case 305592941:
    case 305823410:
    case 307390607:
    case 310683645:
    case 310831889:
    case 311289458:
    case 314028106:
    case 315546603:
    case 316291514:
    case 317130169:
    case 317625102:
    case 318235148:
    case 319364675:
    case 319364677:
    case 319683734:
    case 320085758:
    case 321577928:
    case 323108786:
    case 324059589:
    case 331858766:
    case 335068882:
    case 336028310:
    case 337561425:
    case 346881905:
    case 346881906:
    case 346881907:
    case 348860930:
    case 349846687:
    case 352651815:
    case 353249714:
    case 353395016:
    case 356893880:
    case 358840141:
    case 361654039:
    case 363685441:
    case 365660696:
    case 368321000:
    case 368423037:
    case 370817552:
    case 370951175:
    case 373553475:
    case 374087486:
    case 377882412:
    case 379872273:
    case 379872274:
    case 382837620:
    case 383911039:
    case 384387804:
    case 384522045:
    case 385064858:
    case 385408320:
    case 386381018:
    case 389808788:
    case 392045632:
    case 398407724:
    case 398407728:
    case 399059610:
    case 401978180:
    case 401978181:
    case 401978183:
    case 403182892:
    case 405008209:
    case 405322027:
    case 405615795:
    case 407559920:
    case 407559922:
    case 407559924:
    case 408677579:
    case 408914436:
    case 410011967:
    case 411155170:
    case 413161059:
    case 413279788:
    case 416724613:
    case 420258513:
    case 420647634:
    case 428082364:
    case 430304464:
    case 432639291:
    case 434730178:
    case 437373544:
    case 438273729:
    case 441424349:
    case 443995157:
    case 444909704:
    case 444910235:
    case 445020348:
    case 448544526:
    case 451132219:
    case 455303077:
    case 458492100:
    case 460680391:
    case 461328495:
    case 467591542:
    case 469979751:
    case 469979921:
    case 477828023:
    case 487014318:
    case 487580074:
    case 490139090:
    case 491118442:
    case 499352976:
    case 501537006:
    case 502195319:
    case 504532095:
    case 505127867:
    case 507519306:
    case 513673897:
    case 513812603:
    case 516076235:
    case 518755753:
    case 526983982:
    case 527365956:
    case 529837048:
    case 531578942:
    case 532084325:
    case 532973469:
    case 535720499:
    case 536418624:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[1];
}
bool OpenconfigAaaTypesAAAACCOUNTINGEVENTTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 32244738:
    case 42489322:
    case 411456233:
    case 474022610:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[2];
}
bool OpenconfigAaaTypesAAAAUTHORIZATIONEVENTTYPE_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigAaaTypesAAAMETHODTYPE_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[3];
}
bool OpenconfigAaaTypesAAAMETHODTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 419164516:
    case 492107981:
    case 525920480:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigAaaTypesAAASERVERTYPE_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[4];
}
bool OpenconfigAaaTypesAAASERVERTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 5938954:
    case 19148247:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigAaaTypesSYSTEMDEFINEDROLES_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[5];
}
bool OpenconfigAaaTypesSYSTEMDEFINEDROLES_IsValid(int value) {
  switch (value) {
    case 0:
    case 390815160:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigAccessPointsAccessPointsAccessPointSystemCpusCpuStateIndex_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[6];
}
bool OpenconfigAccessPointsAccessPointsAccessPointSystemCpusCpuStateIndex_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigAclACLCOUNTERCAPABILITY_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[7];
}
bool OpenconfigAclACLCOUNTERCAPABILITY_IsValid(int value) {
  switch (value) {
    case 0:
    case 99175805:
    case 132869768:
    case 266482693:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigAclACLTYPE_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[8];
}
bool OpenconfigAclACLTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 132416467:
    case 411031372:
    case 411031374:
    case 469804226:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigDestinationPort_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[9];
}
bool OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigDestinationPort_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigSourcePort_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[10];
}
bool OpenconfigAclAclAclSetsAclSetAclEntriesAclEntryTransportConfigSourcePort_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigAclFORWARDINGACTION_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[11];
}
bool OpenconfigAclFORWARDINGACTION_IsValid(int value) {
  switch (value) {
    case 0:
    case 83418768:
    case 303263142:
    case 464955669:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigAclLOGACTION_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[12];
}
bool OpenconfigAclLOGACTION_IsValid(int value) {
  switch (value) {
    case 0:
    case 184906209:
    case 513275964:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[13];
}
bool OpenconfigAlarmTypesOPENCONFIGALARMSEVERITY_IsValid(int value) {
  switch (value) {
    case 0:
    case 70492973:
    case 123728538:
    case 157280644:
    case 275040832:
    case 380442931:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigAlarmTypesOPENCONFIGALARMTYPEID_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[14];
}
bool OpenconfigAlarmTypesOPENCONFIGALARMTYPEID_IsValid(int value) {
  switch (value) {
    case 0:
    case 54945826:
    case 356419557:
    case 389213562:
    case 507085248:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigCatalogTypesCATALOGMEMBERTYPE_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[15];
}
bool OpenconfigCatalogTypesCATALOGMEMBERTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 144148303:
    case 172558128:
    case 216067246:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigCatalogTypesIMPLEMENTATIONSTATUSTYPE_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[16];
}
bool OpenconfigCatalogTypesIMPLEMENTATIONSTATUSTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 49763311:
    case 236449718:
    case 263061934:
    case 524664764:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigCatalogTypesMODULECATEGORYBASE_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[17];
}
bool OpenconfigCatalogTypesMODULECATEGORYBASE_IsValid(int value) {
  switch (value) {
    case 0:
    case 95725600:
    case 379703314:
    case 401800823:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigCatalogTypesMODULESTATUSTYPE_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[18];
}
bool OpenconfigCatalogTypesMODULESTATUSTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 95131679:
    case 448485660:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigCatalogTypesMODULESUBCATEGORYBASE_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[19];
}
bool OpenconfigCatalogTypesMODULESUBCATEGORYBASE_IsValid(int value) {
  switch (value) {
    case 0:
    case 135819901:
    case 318398963:
    case 429394511:
    case 526461606:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigCatalogTypesORGANIZATIONTYPE_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[20];
}
bool OpenconfigCatalogTypesORGANIZATIONTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 55136337:
    case 117508923:
    case 145081989:
    case 344820802:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigIfAggregateAggregationType_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[21];
}
bool OpenconfigIfAggregateAggregationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigIfEthernetETHERNETSPEED_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[22];
}
bool OpenconfigIfEthernetETHERNETSPEED_IsValid(int value) {
  switch (value) {
    case 0:
    case 63922730:
    case 158137778:
    case 164726524:
    case 176009444:
    case 221101252:
    case 276675162:
    case 321766842:
    case 434311888:
    case 470711119:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigIfIpIpAddressOrigin_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[23];
}
bool OpenconfigIfIpIpAddressOrigin_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigIfIpNeighborOrigin_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[24];
}
bool OpenconfigIfIpNeighborOrigin_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigLacpLacpActivityType_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[25];
}
bool OpenconfigLacpLacpActivityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigLacpLacpPeriodType_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[26];
}
bool OpenconfigLacpLacpPeriodType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigLacpLacpSynchronizationType_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[27];
}
bool OpenconfigLacpLacpSynchronizationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigLacpLacpTimeoutType_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[28];
}
bool OpenconfigLacpLacpTimeoutType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigLldpChassisIdType_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[29];
}
bool OpenconfigLldpChassisIdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigLldpPortIdType_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[30];
}
bool OpenconfigLldpPortIdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigLldpTypesLLDPSYSTEMCAPABILITY_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[31];
}
bool OpenconfigLldpTypesLLDPSYSTEMCAPABILITY_IsValid(int value) {
  switch (value) {
    case 0:
    case 11115187:
    case 96684641:
    case 98146663:
    case 107168325:
    case 232330836:
    case 287396560:
    case 331434386:
    case 347385640:
    case 371416145:
    case 480015482:
    case 502835810:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigLldpTypesLLDPTLV_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[32];
}
bool OpenconfigLldpTypesLLDPTLV_IsValid(int value) {
  switch (value) {
    case 0:
    case 15326996:
    case 28592394:
    case 75782954:
    case 190600013:
    case 275005382:
    case 293558073:
    case 407794970:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigOpenflowFailureMode_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[33];
}
bool OpenconfigOpenflowFailureMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigOpenflowTransport_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[34];
}
bool OpenconfigOpenflowTransport_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigOpticalAmplifierFIBERTYPEPROFILE_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[35];
}
bool OpenconfigOpticalAmplifierFIBERTYPEPROFILE_IsValid(int value) {
  switch (value) {
    case 0:
    case 28856180:
    case 36171489:
    case 102938290:
    case 171548757:
    case 241322124:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigOpticalAmplifierGAINRANGE_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[36];
}
bool OpenconfigOpticalAmplifierGAINRANGE_IsValid(int value) {
  switch (value) {
    case 0:
    case 175270936:
    case 240520630:
    case 292888456:
    case 500021236:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigOpticalAmplifierOPTICALAMPLIFIERMODE_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[37];
}
bool OpenconfigOpticalAmplifierOPTICALAMPLIFIERMODE_IsValid(int value) {
  switch (value) {
    case 0:
    case 58375877:
    case 471033275:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigOpticalAmplifierOPTICALAMPLIFIERTYPE_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[38];
}
bool OpenconfigOpticalAmplifierOPTICALAMPLIFIERTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 119400506:
    case 185961505:
    case 517524076:
    case 526622329:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigPacketMatchTypesETHERTYPE_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[39];
}
bool OpenconfigPacketMatchTypesETHERTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 14086673:
    case 63862784:
    case 140115701:
    case 140115703:
    case 383275775:
    case 427890540:
    case 522848603:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigPacketMatchTypesIPPROTOCOL_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[40];
}
bool OpenconfigPacketMatchTypesIPPROTOCOL_IsValid(int value) {
  switch (value) {
    case 0:
    case 24050007:
    case 38721802:
    case 81903923:
    case 203904199:
    case 272904165:
    case 512271866:
    case 512860246:
    case 525100026:
    case 530070378:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigPacketMatchTypesTCPFLAGS_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[41];
}
bool OpenconfigPacketMatchTypesTCPFLAGS_IsValid(int value) {
  switch (value) {
    case 0:
    case 7246418:
    case 74689745:
    case 76795313:
    case 208309299:
    case 211387811:
    case 244795956:
    case 308430701:
    case 496075790:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigPlatformLinecardComponentPowerType_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[42];
}
bool OpenconfigPlatformLinecardComponentPowerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigPlatformTypesCOMPONENTOPERSTATUS_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[43];
}
bool OpenconfigPlatformTypesCOMPONENTOPERSTATUS_IsValid(int value) {
  switch (value) {
    case 0:
    case 66232085:
    case 350531364:
    case 449140422:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[44];
}
bool OpenconfigPlatformTypesOPENCONFIGHARDWARECOMPONENT_IsValid(int value) {
  switch (value) {
    case 0:
    case 17598998:
    case 72327189:
    case 156519681:
    case 163406904:
    case 169410761:
    case 208831331:
    case 248256101:
    case 267672527:
    case 290488750:
    case 344879553:
    case 384589570:
    case 467229440:
    case 483792688:
    case 533475515:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[45];
}
bool OpenconfigPlatformTypesOPENCONFIGSOFTWARECOMPONENT_IsValid(int value) {
  switch (value) {
    case 0:
    case 9246962:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigProbesTestType_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[46];
}
bool OpenconfigProbesTestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigQosQueueBehavior_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[47];
}
bool OpenconfigQosQueueBehavior_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigQosTypesQOSQUEUETYPE_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[48];
}
bool OpenconfigQosTypesQOSQUEUETYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 104689505:
    case 127358059:
    case 362397024:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigQosTypesQOSSCHEDULERTYPE_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[49];
}
bool OpenconfigQosTypesQOSSCHEDULERTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 322565447:
    case 428754559:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigSpanningTreeStpGuardType_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[50];
}
bool OpenconfigSpanningTreeStpGuardType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigSpanningTreeStpLinkType_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[51];
}
bool OpenconfigSpanningTreeStpLinkType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigSpanningTreeTypesSTPEDGEPORT_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[52];
}
bool OpenconfigSpanningTreeTypesSTPEDGEPORT_IsValid(int value) {
  switch (value) {
    case 0:
    case 263445833:
    case 416354649:
    case 454202920:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigSpanningTreeTypesSTPPORTROLE_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[53];
}
bool OpenconfigSpanningTreeTypesSTPPORTROLE_IsValid(int value) {
  switch (value) {
    case 0:
    case 63773171:
    case 196719225:
    case 241319231:
    case 519797233:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigSpanningTreeTypesSTPPORTSTATE_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[54];
}
bool OpenconfigSpanningTreeTypesSTPPORTSTATE_IsValid(int value) {
  switch (value) {
    case 0:
    case 74634915:
    case 122461572:
    case 339423026:
    case 420964493:
    case 443083057:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigSpanningTreeTypesSTPPROTOCOL_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[55];
}
bool OpenconfigSpanningTreeTypesSTPPROTOCOL_IsValid(int value) {
  switch (value) {
    case 0:
    case 10309415:
    case 363977194:
    case 473891845:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigSystemLoggingSYSLOGFACILITY_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[56];
}
bool OpenconfigSystemLoggingSYSLOGFACILITY_IsValid(int value) {
  switch (value) {
    case 0:
    case 1992095:
    case 110300463:
    case 196925136:
    case 196925137:
    case 196925138:
    case 196925139:
    case 196925140:
    case 196925141:
    case 196925142:
    case 196925143:
    case 252252703:
    case 336452861:
    case 350428412:
    case 398004525:
    case 477963459:
    case 478239772:
    case 499486404:
    case 508909033:
    case 523894347:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigSystemLoggingSyslogSeverity_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[57];
}
bool OpenconfigSystemLoggingSyslogSeverity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigSystemNTPAUTHTYPE_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[58];
}
bool OpenconfigSystemNTPAUTHTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 142463499:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigTelemetryTypesDATAENCODINGMETHOD_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[59];
}
bool OpenconfigTelemetryTypesDATAENCODINGMETHOD_IsValid(int value) {
  switch (value) {
    case 0:
    case 204407329:
    case 215360919:
    case 437483571:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigTelemetryTypesSTREAMPROTOCOL_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[60];
}
bool OpenconfigTelemetryTypesSTREAMPROTOCOL_IsValid(int value) {
  switch (value) {
    case 0:
    case 30081208:
    case 351617103:
    case 398987529:
    case 412665066:
    case 494836683:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigTerminalDeviceAdminStateType_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[61];
}
bool OpenconfigTerminalDeviceAdminStateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigTerminalDeviceLoopbackModeType_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[62];
}
bool OpenconfigTerminalDeviceLoopbackModeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigTransportLineCommonAdminStateType_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[63];
}
bool OpenconfigTransportLineCommonAdminStateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigTransportLineCommonOPTICALLINEPORTTYPE_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[64];
}
bool OpenconfigTransportLineCommonOPTICALLINEPORTTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 62142554:
    case 107734774:
    case 112508882:
    case 309493124:
    case 510510041:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigTransportLineProtectionAPSPATHS_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[65];
}
bool OpenconfigTransportLineProtectionAPSPATHS_IsValid(int value) {
  switch (value) {
    case 0:
    case 87909830:
    case 289818058:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigTransportTypesETHERNETPMDTYPE_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[66];
}
bool OpenconfigTransportTypesETHERNETPMDTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 53257267:
    case 55024014:
    case 65679294:
    case 79394438:
    case 107546431:
    case 124311282:
    case 209786485:
    case 216677957:
    case 254588695:
    case 264053939:
    case 300085572:
    case 300565924:
    case 311584992:
    case 331446205:
    case 341664355:
    case 344327411:
    case 388488590:
    case 396712729:
    case 446413941:
    case 451564659:
    case 492392898:
    case 494926994:
    case 495912708:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigTransportTypesFIBERCONNECTORTYPE_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[67];
}
bool OpenconfigTransportTypesFIBERCONNECTORTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 299077970:
    case 300083266:
    case 416622211:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigTransportTypesLOGICALELEMENTPROTOCOLTYPE_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[68];
}
bool OpenconfigTransportTypesLOGICALELEMENTPROTOCOLTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 76371778:
    case 461892616:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigTransportTypesOTNAPPLICATIONCODE_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[69];
}
bool OpenconfigTransportTypesOTNAPPLICATIONCODE_IsValid(int value) {
  switch (value) {
    case 0:
    case 36897107:
    case 312342241:
    case 312342242:
    case 483351549:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigTransportTypesSONETAPPLICATIONCODE_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[70];
}
bool OpenconfigTransportTypesSONETAPPLICATIONCODE_IsValid(int value) {
  switch (value) {
    case 0:
    case 34006129:
    case 34006134:
    case 34006135:
    case 453962205:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[71];
}
bool OpenconfigTransportTypesTRANSCEIVERFORMFACTORTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 122026302:
    case 173799280:
    case 173799286:
    case 248871057:
    case 254820462:
    case 262580700:
    case 323305909:
    case 336705815:
    case 348964396:
    case 351614684:
    case 371578331:
    case 386302595:
    case 428513243:
    case 479072844:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[72];
}
bool OpenconfigTransportTypesTRIBUTARYPROTOCOLTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 16859078:
    case 92500889:
    case 124622385:
    case 124622390:
    case 124622391:
    case 125467980:
    case 127285313:
    case 127285318:
    case 127285319:
    case 142833872:
    case 143211405:
    case 244881710:
    case 257542584:
    case 279056864:
    case 310019448:
    case 362325033:
    case 366888211:
    case 368604491:
    case 390106586:
    case 394498172:
    case 410687360:
    case 506556672:
    case 536658191:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[73];
}
bool OpenconfigTransportTypesTRIBUTARYRATECLASSTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 63565836:
    case 114060885:
    case 212183688:
    case 244952005:
    case 252980176:
    case 276612395:
    case 285696653:
    case 300257766:
    case 366043073:
    case 504977349:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigVlanTypesTPIDTYPES_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[74];
}
bool OpenconfigVlanTypesTPIDTYPES_IsValid(int value) {
  switch (value) {
    case 0:
    case 43366784:
    case 167692657:
    case 253072231:
    case 345856891:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigVlanVlanModeType_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[75];
}
bool OpenconfigVlanVlanModeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigWavelengthRouterAdminStateType_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[76];
}
bool OpenconfigWavelengthRouterAdminStateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigWifiTypesAPSTATE_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[77];
}
bool OpenconfigWifiTypesAPSTATE_IsValid(int value) {
  switch (value) {
    case 0:
    case 349995057:
    case 473784083:
    case 529095792:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigWifiTypesCHANGEREASONTYPE_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[78];
}
bool OpenconfigWifiTypesCHANGEREASONTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 214232444:
    case 335803595:
    case 478307970:
    case 522287195:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigWifiTypesCLIENTCAPABILITIES_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[79];
}
bool OpenconfigWifiTypesCLIENTCAPABILITIES_IsValid(int value) {
  switch (value) {
    case 0:
    case 25636203:
    case 25636207:
    case 91046411:
    case 91046428:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigWifiTypesCLIENTSTATE_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[80];
}
bool OpenconfigWifiTypesCLIENTSTATE_IsValid(int value) {
  switch (value) {
    case 0:
    case 15955476:
    case 102600160:
    case 172626369:
    case 237538718:
    case 250384215:
    case 254800713:
    case 317830585:
    case 360142606:
    case 422077472:
    case 454415440:
    case 487220542:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigWifiTypesDATARATE_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[81];
}
bool OpenconfigWifiTypesDATARATE_IsValid(int value) {
  switch (value) {
    case 0:
    case 22775585:
    case 25614470:
    case 119882321:
    case 188458380:
    case 188669959:
    case 300116088:
    case 329841425:
    case 414074926:
    case 414234913:
    case 414676330:
    case 415489049:
    case 461601010:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenconfigWifiTypesOPERATINGFREQUENCY_descriptor() {
  protobuf_openconfig_2fenums_2fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fenums_2fenums_2eproto::file_level_enum_descriptors[82];
}
bool OpenconfigWifiTypesOPERATINGFREQUENCY_IsValid(int value) {
  switch (value) {
    case 0:
    case 327040220:
    case 383787092:
    case 508963537:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace enums
}  // namespace openconfig

// @@protoc_insertion_point(global_scope)
