// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openconfig/openconfig_wifi_phy/openconfig_wifi_phy.proto

#include "openconfig/openconfig_wifi_phy/openconfig_wifi_phy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace openconfig {
namespace openconfig_wifi_phy {
class Radios_Radio_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Radios_Radio_Config>
      _instance;
} _Radios_Radio_Config_default_instance_;
class Radios_Radio_Neighbors_Neighbor_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Radios_Radio_Neighbors_Neighbor_State>
      _instance;
} _Radios_Radio_Neighbors_Neighbor_State_default_instance_;
class Radios_Radio_Neighbors_NeighborDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Radios_Radio_Neighbors_Neighbor>
      _instance;
} _Radios_Radio_Neighbors_Neighbor_default_instance_;
class Radios_Radio_Neighbors_NeighborKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Radios_Radio_Neighbors_NeighborKey>
      _instance;
} _Radios_Radio_Neighbors_NeighborKey_default_instance_;
class Radios_Radio_NeighborsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Radios_Radio_Neighbors>
      _instance;
} _Radios_Radio_Neighbors_default_instance_;
class Radios_Radio_State_CountersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Radios_Radio_State_Counters>
      _instance;
} _Radios_Radio_State_Counters_default_instance_;
class Radios_Radio_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Radios_Radio_State>
      _instance;
} _Radios_Radio_State_default_instance_;
class Radios_RadioDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Radios_Radio>
      _instance;
} _Radios_Radio_default_instance_;
class Radios_RadioKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Radios_RadioKey>
      _instance;
} _Radios_RadioKey_default_instance_;
class RadiosDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Radios>
      _instance;
} _Radios_default_instance_;
}  // namespace openconfig_wifi_phy
}  // namespace openconfig
namespace protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto {
void InitDefaultsRadios_Radio_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsIntValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsBoolValue();
  {
    void* ptr = &::openconfig::openconfig_wifi_phy::_Radios_Radio_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_phy::Radios_Radio_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_phy::Radios_Radio_Config::InitAsDefaultInstance();
}

void InitDefaultsRadios_Radio_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRadios_Radio_ConfigImpl);
}

void InitDefaultsRadios_Radio_Neighbors_Neighbor_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsIntValue();
  {
    void* ptr = &::openconfig::openconfig_wifi_phy::_Radios_Radio_Neighbors_Neighbor_State_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor_State::InitAsDefaultInstance();
}

void InitDefaultsRadios_Radio_Neighbors_Neighbor_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRadios_Radio_Neighbors_Neighbor_StateImpl);
}

void InitDefaultsRadios_Radio_Neighbors_NeighborImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::InitDefaultsRadios_Radio_Neighbors_Neighbor_State();
  {
    void* ptr = &::openconfig::openconfig_wifi_phy::_Radios_Radio_Neighbors_Neighbor_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor::InitAsDefaultInstance();
}

void InitDefaultsRadios_Radio_Neighbors_Neighbor() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRadios_Radio_Neighbors_NeighborImpl);
}

void InitDefaultsRadios_Radio_Neighbors_NeighborKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::InitDefaultsRadios_Radio_Neighbors_Neighbor();
  {
    void* ptr = &::openconfig::openconfig_wifi_phy::_Radios_Radio_Neighbors_NeighborKey_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_NeighborKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_NeighborKey::InitAsDefaultInstance();
}

void InitDefaultsRadios_Radio_Neighbors_NeighborKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRadios_Radio_Neighbors_NeighborKeyImpl);
}

void InitDefaultsRadios_Radio_NeighborsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::InitDefaultsRadios_Radio_Neighbors_NeighborKey();
  {
    void* ptr = &::openconfig::openconfig_wifi_phy::_Radios_Radio_Neighbors_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors::InitAsDefaultInstance();
}

void InitDefaultsRadios_Radio_Neighbors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRadios_Radio_NeighborsImpl);
}

void InitDefaultsRadios_Radio_State_CountersImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsIntValue();
  {
    void* ptr = &::openconfig::openconfig_wifi_phy::_Radios_Radio_State_Counters_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_phy::Radios_Radio_State_Counters();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_phy::Radios_Radio_State_Counters::InitAsDefaultInstance();
}

void InitDefaultsRadios_Radio_State_Counters() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRadios_Radio_State_CountersImpl);
}

void InitDefaultsRadios_Radio_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsIntValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::InitDefaultsRadios_Radio_State_Counters();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsBoolValue();
  {
    void* ptr = &::openconfig::openconfig_wifi_phy::_Radios_Radio_State_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_phy::Radios_Radio_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_phy::Radios_Radio_State::InitAsDefaultInstance();
}

void InitDefaultsRadios_Radio_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRadios_Radio_StateImpl);
}

void InitDefaultsRadios_RadioImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::InitDefaultsRadios_Radio_Config();
  protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::InitDefaultsRadios_Radio_Neighbors();
  protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::InitDefaultsRadios_Radio_State();
  {
    void* ptr = &::openconfig::openconfig_wifi_phy::_Radios_Radio_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_phy::Radios_Radio();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_phy::Radios_Radio::InitAsDefaultInstance();
}

void InitDefaultsRadios_Radio() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRadios_RadioImpl);
}

void InitDefaultsRadios_RadioKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::InitDefaultsRadios_Radio();
  {
    void* ptr = &::openconfig::openconfig_wifi_phy::_Radios_RadioKey_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_phy::Radios_RadioKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_phy::Radios_RadioKey::InitAsDefaultInstance();
}

void InitDefaultsRadios_RadioKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRadios_RadioKeyImpl);
}

void InitDefaultsRadiosImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::InitDefaultsRadios_RadioKey();
  {
    void* ptr = &::openconfig::openconfig_wifi_phy::_Radios_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_phy::Radios();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_phy::Radios::InitAsDefaultInstance();
}

void InitDefaultsRadios() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRadiosImpl);
}

::google::protobuf::Metadata file_level_metadata[10];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_Config, allowed_channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_Config, antenna_gain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_Config, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_Config, channel_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_Config, dca_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_Config, dtp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_Config, dtp_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_Config, dtp_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_Config, enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_Config, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_Config, operating_frequency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_Config, scanning_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_Config, scanning_defer_clients_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_Config, scanning_defer_traffic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_Config, scanning_dwell_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_Config, scanning_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_Config, transmit_power_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor_State, bssid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor_State, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor_State, last_seen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor_State, primary_channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor_State, rssi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor_State, ssid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_NeighborKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_NeighborKey, bssid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_NeighborKey, neighbor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors, neighbor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_State_Counters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_State_Counters, failed_fcs_frames_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_State_Counters, noise_floor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_State, allowed_channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_State, antenna_gain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_State, base_radio_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_State, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_State, channel_change_reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_State, channel_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_State, counters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_State, dca_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_State, dfs_hit_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_State, dtp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_State, dtp_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_State, dtp_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_State, enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_State, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_State, operating_frequency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_State, rx_dot11_channel_utilization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_State, rx_noise_channel_utilization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_State, scanning_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_State, scanning_defer_clients_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_State, scanning_defer_traffic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_State, scanning_dwell_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_State, scanning_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_State, total_channel_utilization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_State, transmit_power_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio_State, tx_dot11_channel_utilization_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio, neighbors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_Radio, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_RadioKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_RadioKey, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios_RadioKey, radio_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_phy::Radios, radio_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::openconfig::openconfig_wifi_phy::Radios_Radio_Config)},
  { 22, -1, sizeof(::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor_State)},
  { 33, -1, sizeof(::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor)},
  { 39, -1, sizeof(::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_NeighborKey)},
  { 46, -1, sizeof(::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors)},
  { 52, -1, sizeof(::openconfig::openconfig_wifi_phy::Radios_Radio_State_Counters)},
  { 59, -1, sizeof(::openconfig::openconfig_wifi_phy::Radios_Radio_State)},
  { 89, -1, sizeof(::openconfig::openconfig_wifi_phy::Radios_Radio)},
  { 97, -1, sizeof(::openconfig::openconfig_wifi_phy::Radios_RadioKey)},
  { 104, -1, sizeof(::openconfig::openconfig_wifi_phy::Radios)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_phy::_Radios_Radio_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_phy::_Radios_Radio_Neighbors_Neighbor_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_phy::_Radios_Radio_Neighbors_Neighbor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_phy::_Radios_Radio_Neighbors_NeighborKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_phy::_Radios_Radio_Neighbors_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_phy::_Radios_Radio_State_Counters_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_phy::_Radios_Radio_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_phy::_Radios_Radio_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_phy::_Radios_RadioKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_phy::_Radios_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "openconfig/openconfig_wifi_phy/openconfig_wifi_phy.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n8openconfig/openconfig_wifi_phy/opencon"
      "fig_wifi_phy.proto\022\036openconfig.openconfi"
      "g_wifi_phy\0328github.com/openconfig/ygot/p"
      "roto/ywrapper/ywrapper.proto\0320github.com"
      "/openconfig/ygot/proto/yext/yext.proto\032\034"
      "openconfig/enums/enums.proto\"\230+\n\006Radios\022"
      "T\n\005radio\030\311\312\252\362\001 \003(\0132/.openconfig.openconf"
      "ig_wifi_phy.Radios.RadioKeyB\020\202A\r/radios/"
      "radio\032\315)\n\005Radio\022_\n\006config\030\276\254\372\013 \001(\01323.ope"
      "nconfig.openconfig_wifi_phy.Radios.Radio"
      ".ConfigB\027\202A\024/radios/radio/config\022h\n\tneig"
      "hbors\030\325\204\314k \001(\01326.openconfig.openconfig_w"
      "ifi_phy.Radios.Radio.NeighborsB\032\202A\027/radi"
      "os/radio/neighbors\022]\n\005state\030\253\272\303\335\001 \001(\01322."
      "openconfig.openconfig_wifi_phy.Radios.Ra"
      "dio.StateB\026\202A\023/radios/radio/state\032\272\013\n\006Co"
      "nfig\022[\n\020allowed_channels\030\274\242\211\211\001 \003(\0132\023.ywr"
      "apper.UintValueB(\202A%/radios/radio/config"
      "/allowed-channels\022Q\n\014antenna_gain\030\312\374\233A \001"
      "(\0132\022.ywrapper.IntValueB$\202A!/radios/radio"
      "/config/antenna-gain\022H\n\007channel\030\372\376\350r \001(\013"
      "2\023.ywrapper.UintValueB\037\202A\034/radios/radio/"
      "config/channel\022T\n\rchannel_width\030\301\242\3304 \001(\013"
      "2\023.ywrapper.UintValueB%\202A\"/radios/radio/"
      "config/channel-width\022A\n\003dca\030\327\306\230\353\001 \001(\0132\023."
      "ywrapper.BoolValueB\033\202A\030/radios/radio/con"
      "fig/dca\022A\n\003dtp\030\317\235\230\203\001 \001(\0132\023.ywrapper.Bool"
      "ValueB\033\202A\030/radios/radio/config/dtp\022H\n\007dt"
      "p_max\030\352\366\302\? \001(\0132\023.ywrapper.UintValueB\037\202A\034"
      "/radios/radio/config/dtp-max\022H\n\007dtp_min\030"
      "\304\217\303\177 \001(\0132\023.ywrapper.UintValueB\037\202A\034/radio"
      "s/radio/config/dtp-min\022I\n\007enabled\030\234\221\247\244\001 "
      "\001(\0132\023.ywrapper.BoolValueB\037\202A\034/radios/rad"
      "io/config/enabled\022>\n\002id\030\226\303\346` \001(\0132\023.ywrap"
      "per.UintValueB\032\202A\027/radios/radio/config/i"
      "d\022\204\001\n\023operating_frequency\030\227\213\363M \001(\01627.ope"
      "nconfig.enums.OpenconfigWifiTypesOPERATI"
      "NGFREQUENCYB+\202A(/radios/radio/config/ope"
      "rating-frequency\022J\n\010scanning\030\200\331\257V \001(\0132\023."
      "ywrapper.BoolValueB \202A\035/radios/radio/con"
      "fig/scanning\022f\n\026scanning_defer_clients\030\360"
      "\345\206- \001(\0132\023.ywrapper.UintValueB.\202A+/radios"
      "/radio/config/scanning-defer-clients\022g\n\026"
      "scanning_defer_traffic\030\237\212\265\230\001 \001(\0132\023.ywrap"
      "per.BoolValueB.\202A+/radios/radio/config/s"
      "canning-defer-traffic\022`\n\023scanning_dwell_"
      "time\030\303\220\301\" \001(\0132\023.ywrapper.UintValueB+\202A(/"
      "radios/radio/config/scanning-dwell-time\022"
      "]\n\021scanning_interval\030\202\306\205\371\001 \001(\0132\023.ywrappe"
      "r.UintValueB)\202A&/radios/radio/config/sca"
      "nning-interval\022V\n\016transmit_power\030\305\311\344D \001("
      "\0132\023.ywrapper.UintValueB&\202A#/radios/radio"
      "/config/transmit-power\032\364\007\n\tNeighbors\022}\n\010"
      "neighbor\030\236\303\322\374\001 \003(\0132B.openconfig.openconf"
      "ig_wifi_phy.Radios.Radio.Neighbors.Neigh"
      "borKeyB#\202A /radios/radio/neighbors/neigh"
      "bor\032\312\005\n\010Neighbor\022\202\001\n\005state\030\340\225\214Q \001(\0132E.op"
      "enconfig.openconfig_wifi_phy.Radios.Radi"
      "o.Neighbors.Neighbor.StateB)\202A&/radios/r"
      "adio/neighbors/neighbor/state\032\270\004\n\005State\022"
      "X\n\005bssid\030\302\216\355} \001(\0132\025.ywrapper.StringValue"
      "B/\202A,/radios/radio/neighbors/neighbor/st"
      "ate/bssid\022Z\n\007channel\030\344\353\357~ \001(\0132\023.ywrapper"
      ".UintValueB1\202A./radios/radio/neighbors/n"
      "eighbor/state/channel\022^\n\tlast_seen\030\241\306\252n "
      "\001(\0132\023.ywrapper.UintValueB3\202A0/radios/rad"
      "io/neighbors/neighbor/state/last-seen\022k\n"
      "\017primary_channel\030\335\235\266\200\001 \001(\0132\023.ywrapper.Ui"
      "ntValueB9\202A6/radios/radio/neighbors/neig"
      "hbor/state/primary-channel\022T\n\004rssi\030\322\331\322\207\001"
      " \001(\0132\022.ywrapper.IntValueB.\202A+/radios/rad"
      "io/neighbors/neighbor/state/rssi\022V\n\004ssid"
      "\030\222\352\343r \001(\0132\025.ywrapper.StringValueB.\202A+/ra"
      "dios/radio/neighbors/neighbor/state/ssid"
      "\032\232\001\n\013NeighborKey\0228\n\005bssid\030\001 \001(\tB)\202A&/rad"
      "ios/radio/neighbors/neighbor/bssid\022Q\n\010ne"
      "ighbor\030\002 \001(\0132\?.openconfig.openconfig_wif"
      "i_phy.Radios.Radio.Neighbors.Neighbor\032\345\023"
      "\n\005State\022Z\n\020allowed_channels\030\213\276\233\262\001 \003(\0132\023."
      "ywrapper.UintValueB\'\202A$/radios/radio/sta"
      "te/allowed-channels\022Q\n\014antenna_gain\030\271\270\237\214"
      "\001 \001(\0132\022.ywrapper.IntValueB#\202A /radios/ra"
      "dio/state/antenna-gain\022W\n\016base_radio_mac"
      "\030\311\355\371\035 \001(\0132\025.ywrapper.StringValueB%\202A\"/ra"
      "dios/radio/state/base-radio-mac\022G\n\007chann"
      "el\030\377\344\363j \001(\0132\023.ywrapper.UintValueB\036\202A\033/ra"
      "dios/radio/state/channel\022\205\001\n\025channel_cha"
      "nge_reason\030\371\351\3728 \001(\01625.openconfig.enums.O"
      "penconfigWifiTypesCHANGEREASONTYPEB,\202A)/"
      "radios/radio/state/channel-change-reason"
      "\022S\n\rchannel_width\030\244\334\261\035 \001(\0132\023.ywrapper.Ui"
      "ntValueB$\202A!/radios/radio/state/channel-"
      "width\022q\n\010counters\030\331\241\374\n \001(\0132;.openconfig."
      "openconfig_wifi_phy.Radios.Radio.State.C"
      "ountersB\037\202A\034/radios/radio/state/counters"
      "\022@\n\003dca\030\272\250\246\346\001 \001(\0132\023.ywrapper.BoolValueB\032"
      "\202A\027/radios/radio/state/dca\022R\n\014dfs_hit_ti"
      "me\030\223\350\252\327\001 \001(\0132\023.ywrapper.UintValueB#\202A /r"
      "adios/radio/state/dfs-hit-time\022@\n\003dtp\030\372\206"
      "\246\216\001 \001(\0132\023.ywrapper.BoolValueB\032\202A\027/radios"
      "/radio/state/dtp\022G\n\007dtp_max\030\277\244\216\\ \001(\0132\023.y"
      "wrapper.UintValueB\036\202A\033/radios/radio/stat"
      "e/dtp-max\022G\n\007dtp_min\030\301\213\216\034 \001(\0132\023.ywrapper"
      ".UintValueB\036\202A\033/radios/radio/state/dtp-m"
      "in\022G\n\007enabled\030\255\255\335Z \001(\0132\023.ywrapper.BoolVa"
      "lueB\036\202A\033/radios/radio/state/enabled\022=\n\002i"
      "d\030\315\334\243g \001(\0132\023.ywrapper.UintValueB\031\202A\026/rad"
      "ios/radio/state/id\022\203\001\n\023operating_frequen"
      "cy\030\232\330\336> \001(\01627.openconfig.enums.Openconfi"
      "gWifiTypesOPERATINGFREQUENCYB*\202A\'/radios"
      "/radio/state/operating-frequency\022q\n\034rx_d"
      "ot11_channel_utilization\030\331\223\352S \001(\0132\023.ywra"
      "pper.UintValueB3\202A0/radios/radio/state/r"
      "x-dot11-channel-utilization\022q\n\034rx_noise_"
      "channel_utilization\030\314\322\334b \001(\0132\023.ywrapper."
      "UintValueB3\202A0/radios/radio/state/rx-noi"
      "se-channel-utilization\022J\n\010scanning\030\247\334\243\213\001"
      " \001(\0132\023.ywrapper.BoolValueB\037\202A\034/radios/ra"
      "dio/state/scanning\022e\n\026scanning_defer_cli"
      "ents\030\317\222\254p \001(\0132\023.ywrapper.UintValueB-\202A*/"
      "radios/radio/state/scanning-defer-client"
      "s\022e\n\026scanning_defer_traffic\030\270\344\342w \001(\0132\023.y"
      "wrapper.BoolValueB-\202A*/radios/radio/stat"
      "e/scanning-defer-traffic\022_\n\023scanning_dwe"
      "ll_time\030\256\353\233m \001(\0132\023.ywrapper.UintValueB*\202"
      "A\'/radios/radio/state/scanning-dwell-tim"
      "e\022\\\n\021scanning_interval\030\233\235\326\275\001 \001(\0132\023.ywrap"
      "per.UintValueB(\202A%/radios/radio/state/sc"
      "anning-interval\022l\n\031total_channel_utiliza"
      "tion\030\275\371\335\244\001 \001(\0132\023.ywrapper.UintValueB0\202A-"
      "/radios/radio/state/total-channel-utiliz"
      "ation\022U\n\016transmit_power\030\226\257\321\005 \001(\0132\023.ywrap"
      "per.UintValueB%\202A\"/radios/radio/state/tr"
      "ansmit-power\022q\n\034tx_dot11_channel_utiliza"
      "tion\030\277\313\2153 \001(\0132\023.ywrapper.UintValueB3\202A0/"
      "radios/radio/state/tx-dot11-channel-util"
      "ization\032\313\001\n\010Counters\022e\n\021failed_fcs_frame"
      "s\030\363\344\361\254\001 \001(\0132\023.ywrapper.UintValueB1\202A./ra"
      "dios/radio/state/counters/failed-fcs-fra"
      "mes\022X\n\013noise_floor\030\363\214\325\221\001 \001(\0132\022.ywrapper."
      "IntValueB+\202A(/radios/radio/state/counter"
      "s/noise-floor\032h\n\010RadioKey\022\037\n\002id\030\001 \001(\004B\023\202"
      "A\020/radios/radio/id\022;\n\005radio\030\002 \001(\0132,.open"
      "config.openconfig_wifi_phy.Radios.Radiob"
      "\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 5767);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "openconfig/openconfig_wifi_phy/openconfig_wifi_phy.proto", &protobuf_RegisterTypes);
  ::protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::AddDescriptors();
  ::protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fyext_2fyext_2eproto::AddDescriptors();
  ::protobuf_openconfig_2fenums_2fenums_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto
namespace openconfig {
namespace openconfig_wifi_phy {

// ===================================================================

void Radios_Radio_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_Config_default_instance_._instance.get_mutable()->antenna_gain_ = const_cast< ::ywrapper::IntValue*>(
      ::ywrapper::IntValue::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_Config_default_instance_._instance.get_mutable()->channel_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_Config_default_instance_._instance.get_mutable()->channel_width_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_Config_default_instance_._instance.get_mutable()->dca_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_Config_default_instance_._instance.get_mutable()->dtp_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_Config_default_instance_._instance.get_mutable()->dtp_max_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_Config_default_instance_._instance.get_mutable()->dtp_min_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_Config_default_instance_._instance.get_mutable()->enabled_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_Config_default_instance_._instance.get_mutable()->id_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_Config_default_instance_._instance.get_mutable()->scanning_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_Config_default_instance_._instance.get_mutable()->scanning_defer_clients_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_Config_default_instance_._instance.get_mutable()->scanning_defer_traffic_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_Config_default_instance_._instance.get_mutable()->scanning_dwell_time_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_Config_default_instance_._instance.get_mutable()->scanning_interval_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_Config_default_instance_._instance.get_mutable()->transmit_power_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Radios_Radio_Config::clear_allowed_channels() {
  allowed_channels_.Clear();
}
void Radios_Radio_Config::clear_antenna_gain() {
  if (GetArenaNoVirtual() == NULL && antenna_gain_ != NULL) {
    delete antenna_gain_;
  }
  antenna_gain_ = NULL;
}
void Radios_Radio_Config::clear_channel() {
  if (GetArenaNoVirtual() == NULL && channel_ != NULL) {
    delete channel_;
  }
  channel_ = NULL;
}
void Radios_Radio_Config::clear_channel_width() {
  if (GetArenaNoVirtual() == NULL && channel_width_ != NULL) {
    delete channel_width_;
  }
  channel_width_ = NULL;
}
void Radios_Radio_Config::clear_dca() {
  if (GetArenaNoVirtual() == NULL && dca_ != NULL) {
    delete dca_;
  }
  dca_ = NULL;
}
void Radios_Radio_Config::clear_dtp() {
  if (GetArenaNoVirtual() == NULL && dtp_ != NULL) {
    delete dtp_;
  }
  dtp_ = NULL;
}
void Radios_Radio_Config::clear_dtp_max() {
  if (GetArenaNoVirtual() == NULL && dtp_max_ != NULL) {
    delete dtp_max_;
  }
  dtp_max_ = NULL;
}
void Radios_Radio_Config::clear_dtp_min() {
  if (GetArenaNoVirtual() == NULL && dtp_min_ != NULL) {
    delete dtp_min_;
  }
  dtp_min_ = NULL;
}
void Radios_Radio_Config::clear_enabled() {
  if (GetArenaNoVirtual() == NULL && enabled_ != NULL) {
    delete enabled_;
  }
  enabled_ = NULL;
}
void Radios_Radio_Config::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
void Radios_Radio_Config::clear_scanning() {
  if (GetArenaNoVirtual() == NULL && scanning_ != NULL) {
    delete scanning_;
  }
  scanning_ = NULL;
}
void Radios_Radio_Config::clear_scanning_defer_clients() {
  if (GetArenaNoVirtual() == NULL && scanning_defer_clients_ != NULL) {
    delete scanning_defer_clients_;
  }
  scanning_defer_clients_ = NULL;
}
void Radios_Radio_Config::clear_scanning_defer_traffic() {
  if (GetArenaNoVirtual() == NULL && scanning_defer_traffic_ != NULL) {
    delete scanning_defer_traffic_;
  }
  scanning_defer_traffic_ = NULL;
}
void Radios_Radio_Config::clear_scanning_dwell_time() {
  if (GetArenaNoVirtual() == NULL && scanning_dwell_time_ != NULL) {
    delete scanning_dwell_time_;
  }
  scanning_dwell_time_ = NULL;
}
void Radios_Radio_Config::clear_scanning_interval() {
  if (GetArenaNoVirtual() == NULL && scanning_interval_ != NULL) {
    delete scanning_interval_;
  }
  scanning_interval_ = NULL;
}
void Radios_Radio_Config::clear_transmit_power() {
  if (GetArenaNoVirtual() == NULL && transmit_power_ != NULL) {
    delete transmit_power_;
  }
  transmit_power_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Radios_Radio_Config::kAllowedChannelsFieldNumber;
const int Radios_Radio_Config::kAntennaGainFieldNumber;
const int Radios_Radio_Config::kChannelFieldNumber;
const int Radios_Radio_Config::kChannelWidthFieldNumber;
const int Radios_Radio_Config::kDcaFieldNumber;
const int Radios_Radio_Config::kDtpFieldNumber;
const int Radios_Radio_Config::kDtpMaxFieldNumber;
const int Radios_Radio_Config::kDtpMinFieldNumber;
const int Radios_Radio_Config::kEnabledFieldNumber;
const int Radios_Radio_Config::kIdFieldNumber;
const int Radios_Radio_Config::kOperatingFrequencyFieldNumber;
const int Radios_Radio_Config::kScanningFieldNumber;
const int Radios_Radio_Config::kScanningDeferClientsFieldNumber;
const int Radios_Radio_Config::kScanningDeferTrafficFieldNumber;
const int Radios_Radio_Config::kScanningDwellTimeFieldNumber;
const int Radios_Radio_Config::kScanningIntervalFieldNumber;
const int Radios_Radio_Config::kTransmitPowerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Radios_Radio_Config::Radios_Radio_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::InitDefaultsRadios_Radio_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_phy.Radios.Radio.Config)
}
Radios_Radio_Config::Radios_Radio_Config(const Radios_Radio_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      allowed_channels_(from.allowed_channels_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_scanning_dwell_time()) {
    scanning_dwell_time_ = new ::ywrapper::UintValue(*from.scanning_dwell_time_);
  } else {
    scanning_dwell_time_ = NULL;
  }
  if (from.has_scanning_defer_clients()) {
    scanning_defer_clients_ = new ::ywrapper::UintValue(*from.scanning_defer_clients_);
  } else {
    scanning_defer_clients_ = NULL;
  }
  if (from.has_channel_width()) {
    channel_width_ = new ::ywrapper::UintValue(*from.channel_width_);
  } else {
    channel_width_ = NULL;
  }
  if (from.has_dtp_max()) {
    dtp_max_ = new ::ywrapper::UintValue(*from.dtp_max_);
  } else {
    dtp_max_ = NULL;
  }
  if (from.has_antenna_gain()) {
    antenna_gain_ = new ::ywrapper::IntValue(*from.antenna_gain_);
  } else {
    antenna_gain_ = NULL;
  }
  if (from.has_transmit_power()) {
    transmit_power_ = new ::ywrapper::UintValue(*from.transmit_power_);
  } else {
    transmit_power_ = NULL;
  }
  if (from.has_scanning()) {
    scanning_ = new ::ywrapper::BoolValue(*from.scanning_);
  } else {
    scanning_ = NULL;
  }
  if (from.has_id()) {
    id_ = new ::ywrapper::UintValue(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_channel()) {
    channel_ = new ::ywrapper::UintValue(*from.channel_);
  } else {
    channel_ = NULL;
  }
  if (from.has_dtp_min()) {
    dtp_min_ = new ::ywrapper::UintValue(*from.dtp_min_);
  } else {
    dtp_min_ = NULL;
  }
  if (from.has_dtp()) {
    dtp_ = new ::ywrapper::BoolValue(*from.dtp_);
  } else {
    dtp_ = NULL;
  }
  if (from.has_scanning_defer_traffic()) {
    scanning_defer_traffic_ = new ::ywrapper::BoolValue(*from.scanning_defer_traffic_);
  } else {
    scanning_defer_traffic_ = NULL;
  }
  if (from.has_enabled()) {
    enabled_ = new ::ywrapper::BoolValue(*from.enabled_);
  } else {
    enabled_ = NULL;
  }
  if (from.has_dca()) {
    dca_ = new ::ywrapper::BoolValue(*from.dca_);
  } else {
    dca_ = NULL;
  }
  if (from.has_scanning_interval()) {
    scanning_interval_ = new ::ywrapper::UintValue(*from.scanning_interval_);
  } else {
    scanning_interval_ = NULL;
  }
  operating_frequency_ = from.operating_frequency_;
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_phy.Radios.Radio.Config)
}

void Radios_Radio_Config::SharedCtor() {
  ::memset(&scanning_dwell_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operating_frequency_) -
      reinterpret_cast<char*>(&scanning_dwell_time_)) + sizeof(operating_frequency_));
  _cached_size_ = 0;
}

Radios_Radio_Config::~Radios_Radio_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_phy.Radios.Radio.Config)
  SharedDtor();
}

void Radios_Radio_Config::SharedDtor() {
  if (this != internal_default_instance()) delete scanning_dwell_time_;
  if (this != internal_default_instance()) delete scanning_defer_clients_;
  if (this != internal_default_instance()) delete channel_width_;
  if (this != internal_default_instance()) delete dtp_max_;
  if (this != internal_default_instance()) delete antenna_gain_;
  if (this != internal_default_instance()) delete transmit_power_;
  if (this != internal_default_instance()) delete scanning_;
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete channel_;
  if (this != internal_default_instance()) delete dtp_min_;
  if (this != internal_default_instance()) delete dtp_;
  if (this != internal_default_instance()) delete scanning_defer_traffic_;
  if (this != internal_default_instance()) delete enabled_;
  if (this != internal_default_instance()) delete dca_;
  if (this != internal_default_instance()) delete scanning_interval_;
}

void Radios_Radio_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Radios_Radio_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Radios_Radio_Config& Radios_Radio_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::InitDefaultsRadios_Radio_Config();
  return *internal_default_instance();
}

Radios_Radio_Config* Radios_Radio_Config::New(::google::protobuf::Arena* arena) const {
  Radios_Radio_Config* n = new Radios_Radio_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Radios_Radio_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_phy.Radios.Radio.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allowed_channels_.Clear();
  if (GetArenaNoVirtual() == NULL && scanning_dwell_time_ != NULL) {
    delete scanning_dwell_time_;
  }
  scanning_dwell_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && scanning_defer_clients_ != NULL) {
    delete scanning_defer_clients_;
  }
  scanning_defer_clients_ = NULL;
  if (GetArenaNoVirtual() == NULL && channel_width_ != NULL) {
    delete channel_width_;
  }
  channel_width_ = NULL;
  if (GetArenaNoVirtual() == NULL && dtp_max_ != NULL) {
    delete dtp_max_;
  }
  dtp_max_ = NULL;
  if (GetArenaNoVirtual() == NULL && antenna_gain_ != NULL) {
    delete antenna_gain_;
  }
  antenna_gain_ = NULL;
  if (GetArenaNoVirtual() == NULL && transmit_power_ != NULL) {
    delete transmit_power_;
  }
  transmit_power_ = NULL;
  if (GetArenaNoVirtual() == NULL && scanning_ != NULL) {
    delete scanning_;
  }
  scanning_ = NULL;
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  if (GetArenaNoVirtual() == NULL && channel_ != NULL) {
    delete channel_;
  }
  channel_ = NULL;
  if (GetArenaNoVirtual() == NULL && dtp_min_ != NULL) {
    delete dtp_min_;
  }
  dtp_min_ = NULL;
  if (GetArenaNoVirtual() == NULL && dtp_ != NULL) {
    delete dtp_;
  }
  dtp_ = NULL;
  if (GetArenaNoVirtual() == NULL && scanning_defer_traffic_ != NULL) {
    delete scanning_defer_traffic_;
  }
  scanning_defer_traffic_ = NULL;
  if (GetArenaNoVirtual() == NULL && enabled_ != NULL) {
    delete enabled_;
  }
  enabled_ = NULL;
  if (GetArenaNoVirtual() == NULL && dca_ != NULL) {
    delete dca_;
  }
  dca_ = NULL;
  if (GetArenaNoVirtual() == NULL && scanning_interval_ != NULL) {
    delete scanning_interval_;
  }
  scanning_interval_ = NULL;
  operating_frequency_ = 0;
  _internal_metadata_.Clear();
}

bool Radios_Radio_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_phy.Radios.Radio.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4178253842u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue scanning_dwell_time = 72370243 [(.yext.schemapath) = "/radios/radio/config/scanning-dwell-time"];
      case 72370243: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 578961946 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scanning_dwell_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue scanning_defer_clients = 94483184 [(.yext.schemapath) = "/radios/radio/config/scanning-defer-clients"];
      case 94483184: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 755865474 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scanning_defer_clients()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue channel_width = 110498113 [(.yext.schemapath) = "/radios/radio/config/channel-width"];
      case 110498113: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 883984906 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_channel_width()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue dtp_max = 133217130 [(.yext.schemapath) = "/radios/radio/config/dtp-max"];
      case 133217130: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 1065737042 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dtp_max()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.IntValue antenna_gain = 136773194 [(.yext.schemapath) = "/radios/radio/config/antenna-gain"];
      case 136773194: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 1094185554 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_antenna_gain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue transmit_power = 144254149 [(.yext.schemapath) = "/radios/radio/config/transmit-power"];
      case 144254149: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 1154033194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transmit_power()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.enums.OpenconfigWifiTypesOPERATINGFREQUENCY operating_frequency = 163366295 [(.yext.schemapath) = "/radios/radio/config/operating-frequency"];
      case 163366295: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 1306930360 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operating_frequency(static_cast< ::openconfig::enums::OpenconfigWifiTypesOPERATINGFREQUENCY >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue scanning = 181136512 [(.yext.schemapath) = "/radios/radio/config/scanning"];
      case 181136512: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 1449092098 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scanning()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue id = 203006358 [(.yext.schemapath) = "/radios/radio/config/id"];
      case 203006358: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 1624050866 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue channel = 240795514 [(.yext.schemapath) = "/radios/radio/config/channel"];
      case 240795514: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 1926364114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_channel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue dtp_min = 267438020 [(.yext.schemapath) = "/radios/radio/config/dtp-min"];
      case 267438020: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 2139504162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dtp_min()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue dtp = 275123919 [(.yext.schemapath) = "/radios/radio/config/dtp"];
      case 275123919: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 2200991354 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dtp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ywrapper.UintValue allowed_channels = 287461692 [(.yext.schemapath) = "/radios/radio/config/allowed-channels"];
      case 287461692: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 2299693538 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_allowed_channels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue scanning_defer_traffic = 319636767 [(.yext.schemapath) = "/radios/radio/config/scanning-defer-traffic"];
      case 319636767: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 2557094138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scanning_defer_traffic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue enabled = 344574108 [(.yext.schemapath) = "/radios/radio/config/enabled"];
      case 344574108: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 2756592866 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue dca = 493232983 [(.yext.schemapath) = "/radios/radio/config/dca"];
      case 493232983: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 3945863866 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dca()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue scanning_interval = 522281730 [(.yext.schemapath) = "/radios/radio/config/scanning-interval"];
      case 522281730: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 4178253842 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scanning_interval()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_phy.Radios.Radio.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_phy.Radios.Radio.Config)
  return false;
#undef DO_
}

void Radios_Radio_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_phy.Radios.Radio.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue scanning_dwell_time = 72370243 [(.yext.schemapath) = "/radios/radio/config/scanning-dwell-time"];
  if (this->has_scanning_dwell_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      72370243, *this->scanning_dwell_time_, output);
  }

  // .ywrapper.UintValue scanning_defer_clients = 94483184 [(.yext.schemapath) = "/radios/radio/config/scanning-defer-clients"];
  if (this->has_scanning_defer_clients()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      94483184, *this->scanning_defer_clients_, output);
  }

  // .ywrapper.UintValue channel_width = 110498113 [(.yext.schemapath) = "/radios/radio/config/channel-width"];
  if (this->has_channel_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      110498113, *this->channel_width_, output);
  }

  // .ywrapper.UintValue dtp_max = 133217130 [(.yext.schemapath) = "/radios/radio/config/dtp-max"];
  if (this->has_dtp_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      133217130, *this->dtp_max_, output);
  }

  // .ywrapper.IntValue antenna_gain = 136773194 [(.yext.schemapath) = "/radios/radio/config/antenna-gain"];
  if (this->has_antenna_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      136773194, *this->antenna_gain_, output);
  }

  // .ywrapper.UintValue transmit_power = 144254149 [(.yext.schemapath) = "/radios/radio/config/transmit-power"];
  if (this->has_transmit_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      144254149, *this->transmit_power_, output);
  }

  // .openconfig.enums.OpenconfigWifiTypesOPERATINGFREQUENCY operating_frequency = 163366295 [(.yext.schemapath) = "/radios/radio/config/operating-frequency"];
  if (this->operating_frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      163366295, this->operating_frequency(), output);
  }

  // .ywrapper.BoolValue scanning = 181136512 [(.yext.schemapath) = "/radios/radio/config/scanning"];
  if (this->has_scanning()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      181136512, *this->scanning_, output);
  }

  // .ywrapper.UintValue id = 203006358 [(.yext.schemapath) = "/radios/radio/config/id"];
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      203006358, *this->id_, output);
  }

  // .ywrapper.UintValue channel = 240795514 [(.yext.schemapath) = "/radios/radio/config/channel"];
  if (this->has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      240795514, *this->channel_, output);
  }

  // .ywrapper.UintValue dtp_min = 267438020 [(.yext.schemapath) = "/radios/radio/config/dtp-min"];
  if (this->has_dtp_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      267438020, *this->dtp_min_, output);
  }

  // .ywrapper.BoolValue dtp = 275123919 [(.yext.schemapath) = "/radios/radio/config/dtp"];
  if (this->has_dtp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      275123919, *this->dtp_, output);
  }

  // repeated .ywrapper.UintValue allowed_channels = 287461692 [(.yext.schemapath) = "/radios/radio/config/allowed-channels"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->allowed_channels_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      287461692, this->allowed_channels(static_cast<int>(i)), output);
  }

  // .ywrapper.BoolValue scanning_defer_traffic = 319636767 [(.yext.schemapath) = "/radios/radio/config/scanning-defer-traffic"];
  if (this->has_scanning_defer_traffic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      319636767, *this->scanning_defer_traffic_, output);
  }

  // .ywrapper.BoolValue enabled = 344574108 [(.yext.schemapath) = "/radios/radio/config/enabled"];
  if (this->has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      344574108, *this->enabled_, output);
  }

  // .ywrapper.BoolValue dca = 493232983 [(.yext.schemapath) = "/radios/radio/config/dca"];
  if (this->has_dca()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      493232983, *this->dca_, output);
  }

  // .ywrapper.UintValue scanning_interval = 522281730 [(.yext.schemapath) = "/radios/radio/config/scanning-interval"];
  if (this->has_scanning_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      522281730, *this->scanning_interval_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_phy.Radios.Radio.Config)
}

::google::protobuf::uint8* Radios_Radio_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_phy.Radios.Radio.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue scanning_dwell_time = 72370243 [(.yext.schemapath) = "/radios/radio/config/scanning-dwell-time"];
  if (this->has_scanning_dwell_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        72370243, *this->scanning_dwell_time_, deterministic, target);
  }

  // .ywrapper.UintValue scanning_defer_clients = 94483184 [(.yext.schemapath) = "/radios/radio/config/scanning-defer-clients"];
  if (this->has_scanning_defer_clients()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        94483184, *this->scanning_defer_clients_, deterministic, target);
  }

  // .ywrapper.UintValue channel_width = 110498113 [(.yext.schemapath) = "/radios/radio/config/channel-width"];
  if (this->has_channel_width()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        110498113, *this->channel_width_, deterministic, target);
  }

  // .ywrapper.UintValue dtp_max = 133217130 [(.yext.schemapath) = "/radios/radio/config/dtp-max"];
  if (this->has_dtp_max()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        133217130, *this->dtp_max_, deterministic, target);
  }

  // .ywrapper.IntValue antenna_gain = 136773194 [(.yext.schemapath) = "/radios/radio/config/antenna-gain"];
  if (this->has_antenna_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        136773194, *this->antenna_gain_, deterministic, target);
  }

  // .ywrapper.UintValue transmit_power = 144254149 [(.yext.schemapath) = "/radios/radio/config/transmit-power"];
  if (this->has_transmit_power()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        144254149, *this->transmit_power_, deterministic, target);
  }

  // .openconfig.enums.OpenconfigWifiTypesOPERATINGFREQUENCY operating_frequency = 163366295 [(.yext.schemapath) = "/radios/radio/config/operating-frequency"];
  if (this->operating_frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      163366295, this->operating_frequency(), target);
  }

  // .ywrapper.BoolValue scanning = 181136512 [(.yext.schemapath) = "/radios/radio/config/scanning"];
  if (this->has_scanning()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        181136512, *this->scanning_, deterministic, target);
  }

  // .ywrapper.UintValue id = 203006358 [(.yext.schemapath) = "/radios/radio/config/id"];
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        203006358, *this->id_, deterministic, target);
  }

  // .ywrapper.UintValue channel = 240795514 [(.yext.schemapath) = "/radios/radio/config/channel"];
  if (this->has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        240795514, *this->channel_, deterministic, target);
  }

  // .ywrapper.UintValue dtp_min = 267438020 [(.yext.schemapath) = "/radios/radio/config/dtp-min"];
  if (this->has_dtp_min()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        267438020, *this->dtp_min_, deterministic, target);
  }

  // .ywrapper.BoolValue dtp = 275123919 [(.yext.schemapath) = "/radios/radio/config/dtp"];
  if (this->has_dtp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        275123919, *this->dtp_, deterministic, target);
  }

  // repeated .ywrapper.UintValue allowed_channels = 287461692 [(.yext.schemapath) = "/radios/radio/config/allowed-channels"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->allowed_channels_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        287461692, this->allowed_channels(static_cast<int>(i)), deterministic, target);
  }

  // .ywrapper.BoolValue scanning_defer_traffic = 319636767 [(.yext.schemapath) = "/radios/radio/config/scanning-defer-traffic"];
  if (this->has_scanning_defer_traffic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        319636767, *this->scanning_defer_traffic_, deterministic, target);
  }

  // .ywrapper.BoolValue enabled = 344574108 [(.yext.schemapath) = "/radios/radio/config/enabled"];
  if (this->has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        344574108, *this->enabled_, deterministic, target);
  }

  // .ywrapper.BoolValue dca = 493232983 [(.yext.schemapath) = "/radios/radio/config/dca"];
  if (this->has_dca()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        493232983, *this->dca_, deterministic, target);
  }

  // .ywrapper.UintValue scanning_interval = 522281730 [(.yext.schemapath) = "/radios/radio/config/scanning-interval"];
  if (this->has_scanning_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        522281730, *this->scanning_interval_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_phy.Radios.Radio.Config)
  return target;
}

size_t Radios_Radio_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_phy.Radios.Radio.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .ywrapper.UintValue allowed_channels = 287461692 [(.yext.schemapath) = "/radios/radio/config/allowed-channels"];
  {
    unsigned int count = static_cast<unsigned int>(this->allowed_channels_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->allowed_channels(static_cast<int>(i)));
    }
  }

  // .ywrapper.UintValue scanning_dwell_time = 72370243 [(.yext.schemapath) = "/radios/radio/config/scanning-dwell-time"];
  if (this->has_scanning_dwell_time()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->scanning_dwell_time_);
  }

  // .ywrapper.UintValue scanning_defer_clients = 94483184 [(.yext.schemapath) = "/radios/radio/config/scanning-defer-clients"];
  if (this->has_scanning_defer_clients()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->scanning_defer_clients_);
  }

  // .ywrapper.UintValue channel_width = 110498113 [(.yext.schemapath) = "/radios/radio/config/channel-width"];
  if (this->has_channel_width()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->channel_width_);
  }

  // .ywrapper.UintValue dtp_max = 133217130 [(.yext.schemapath) = "/radios/radio/config/dtp-max"];
  if (this->has_dtp_max()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dtp_max_);
  }

  // .ywrapper.IntValue antenna_gain = 136773194 [(.yext.schemapath) = "/radios/radio/config/antenna-gain"];
  if (this->has_antenna_gain()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->antenna_gain_);
  }

  // .ywrapper.UintValue transmit_power = 144254149 [(.yext.schemapath) = "/radios/radio/config/transmit-power"];
  if (this->has_transmit_power()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->transmit_power_);
  }

  // .ywrapper.BoolValue scanning = 181136512 [(.yext.schemapath) = "/radios/radio/config/scanning"];
  if (this->has_scanning()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->scanning_);
  }

  // .ywrapper.UintValue id = 203006358 [(.yext.schemapath) = "/radios/radio/config/id"];
  if (this->has_id()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->id_);
  }

  // .ywrapper.UintValue channel = 240795514 [(.yext.schemapath) = "/radios/radio/config/channel"];
  if (this->has_channel()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->channel_);
  }

  // .ywrapper.UintValue dtp_min = 267438020 [(.yext.schemapath) = "/radios/radio/config/dtp-min"];
  if (this->has_dtp_min()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dtp_min_);
  }

  // .ywrapper.BoolValue dtp = 275123919 [(.yext.schemapath) = "/radios/radio/config/dtp"];
  if (this->has_dtp()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dtp_);
  }

  // .ywrapper.BoolValue scanning_defer_traffic = 319636767 [(.yext.schemapath) = "/radios/radio/config/scanning-defer-traffic"];
  if (this->has_scanning_defer_traffic()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->scanning_defer_traffic_);
  }

  // .ywrapper.BoolValue enabled = 344574108 [(.yext.schemapath) = "/radios/radio/config/enabled"];
  if (this->has_enabled()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->enabled_);
  }

  // .ywrapper.BoolValue dca = 493232983 [(.yext.schemapath) = "/radios/radio/config/dca"];
  if (this->has_dca()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dca_);
  }

  // .ywrapper.UintValue scanning_interval = 522281730 [(.yext.schemapath) = "/radios/radio/config/scanning-interval"];
  if (this->has_scanning_interval()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->scanning_interval_);
  }

  // .openconfig.enums.OpenconfigWifiTypesOPERATINGFREQUENCY operating_frequency = 163366295 [(.yext.schemapath) = "/radios/radio/config/operating-frequency"];
  if (this->operating_frequency() != 0) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operating_frequency());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Radios_Radio_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_phy.Radios.Radio.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Radios_Radio_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Radios_Radio_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_phy.Radios.Radio.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_phy.Radios.Radio.Config)
    MergeFrom(*source);
  }
}

void Radios_Radio_Config::MergeFrom(const Radios_Radio_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_phy.Radios.Radio.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allowed_channels_.MergeFrom(from.allowed_channels_);
  if (from.has_scanning_dwell_time()) {
    mutable_scanning_dwell_time()->::ywrapper::UintValue::MergeFrom(from.scanning_dwell_time());
  }
  if (from.has_scanning_defer_clients()) {
    mutable_scanning_defer_clients()->::ywrapper::UintValue::MergeFrom(from.scanning_defer_clients());
  }
  if (from.has_channel_width()) {
    mutable_channel_width()->::ywrapper::UintValue::MergeFrom(from.channel_width());
  }
  if (from.has_dtp_max()) {
    mutable_dtp_max()->::ywrapper::UintValue::MergeFrom(from.dtp_max());
  }
  if (from.has_antenna_gain()) {
    mutable_antenna_gain()->::ywrapper::IntValue::MergeFrom(from.antenna_gain());
  }
  if (from.has_transmit_power()) {
    mutable_transmit_power()->::ywrapper::UintValue::MergeFrom(from.transmit_power());
  }
  if (from.has_scanning()) {
    mutable_scanning()->::ywrapper::BoolValue::MergeFrom(from.scanning());
  }
  if (from.has_id()) {
    mutable_id()->::ywrapper::UintValue::MergeFrom(from.id());
  }
  if (from.has_channel()) {
    mutable_channel()->::ywrapper::UintValue::MergeFrom(from.channel());
  }
  if (from.has_dtp_min()) {
    mutable_dtp_min()->::ywrapper::UintValue::MergeFrom(from.dtp_min());
  }
  if (from.has_dtp()) {
    mutable_dtp()->::ywrapper::BoolValue::MergeFrom(from.dtp());
  }
  if (from.has_scanning_defer_traffic()) {
    mutable_scanning_defer_traffic()->::ywrapper::BoolValue::MergeFrom(from.scanning_defer_traffic());
  }
  if (from.has_enabled()) {
    mutable_enabled()->::ywrapper::BoolValue::MergeFrom(from.enabled());
  }
  if (from.has_dca()) {
    mutable_dca()->::ywrapper::BoolValue::MergeFrom(from.dca());
  }
  if (from.has_scanning_interval()) {
    mutable_scanning_interval()->::ywrapper::UintValue::MergeFrom(from.scanning_interval());
  }
  if (from.operating_frequency() != 0) {
    set_operating_frequency(from.operating_frequency());
  }
}

void Radios_Radio_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_phy.Radios.Radio.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Radios_Radio_Config::CopyFrom(const Radios_Radio_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_phy.Radios.Radio.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Radios_Radio_Config::IsInitialized() const {
  return true;
}

void Radios_Radio_Config::Swap(Radios_Radio_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Radios_Radio_Config::InternalSwap(Radios_Radio_Config* other) {
  using std::swap;
  allowed_channels_.InternalSwap(&other->allowed_channels_);
  swap(scanning_dwell_time_, other->scanning_dwell_time_);
  swap(scanning_defer_clients_, other->scanning_defer_clients_);
  swap(channel_width_, other->channel_width_);
  swap(dtp_max_, other->dtp_max_);
  swap(antenna_gain_, other->antenna_gain_);
  swap(transmit_power_, other->transmit_power_);
  swap(scanning_, other->scanning_);
  swap(id_, other->id_);
  swap(channel_, other->channel_);
  swap(dtp_min_, other->dtp_min_);
  swap(dtp_, other->dtp_);
  swap(scanning_defer_traffic_, other->scanning_defer_traffic_);
  swap(enabled_, other->enabled_);
  swap(dca_, other->dca_);
  swap(scanning_interval_, other->scanning_interval_);
  swap(operating_frequency_, other->operating_frequency_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Radios_Radio_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Radios_Radio_Neighbors_Neighbor_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_Neighbors_Neighbor_State_default_instance_._instance.get_mutable()->bssid_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_Neighbors_Neighbor_State_default_instance_._instance.get_mutable()->channel_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_Neighbors_Neighbor_State_default_instance_._instance.get_mutable()->last_seen_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_Neighbors_Neighbor_State_default_instance_._instance.get_mutable()->primary_channel_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_Neighbors_Neighbor_State_default_instance_._instance.get_mutable()->rssi_ = const_cast< ::ywrapper::IntValue*>(
      ::ywrapper::IntValue::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_Neighbors_Neighbor_State_default_instance_._instance.get_mutable()->ssid_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void Radios_Radio_Neighbors_Neighbor_State::clear_bssid() {
  if (GetArenaNoVirtual() == NULL && bssid_ != NULL) {
    delete bssid_;
  }
  bssid_ = NULL;
}
void Radios_Radio_Neighbors_Neighbor_State::clear_channel() {
  if (GetArenaNoVirtual() == NULL && channel_ != NULL) {
    delete channel_;
  }
  channel_ = NULL;
}
void Radios_Radio_Neighbors_Neighbor_State::clear_last_seen() {
  if (GetArenaNoVirtual() == NULL && last_seen_ != NULL) {
    delete last_seen_;
  }
  last_seen_ = NULL;
}
void Radios_Radio_Neighbors_Neighbor_State::clear_primary_channel() {
  if (GetArenaNoVirtual() == NULL && primary_channel_ != NULL) {
    delete primary_channel_;
  }
  primary_channel_ = NULL;
}
void Radios_Radio_Neighbors_Neighbor_State::clear_rssi() {
  if (GetArenaNoVirtual() == NULL && rssi_ != NULL) {
    delete rssi_;
  }
  rssi_ = NULL;
}
void Radios_Radio_Neighbors_Neighbor_State::clear_ssid() {
  if (GetArenaNoVirtual() == NULL && ssid_ != NULL) {
    delete ssid_;
  }
  ssid_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Radios_Radio_Neighbors_Neighbor_State::kBssidFieldNumber;
const int Radios_Radio_Neighbors_Neighbor_State::kChannelFieldNumber;
const int Radios_Radio_Neighbors_Neighbor_State::kLastSeenFieldNumber;
const int Radios_Radio_Neighbors_Neighbor_State::kPrimaryChannelFieldNumber;
const int Radios_Radio_Neighbors_Neighbor_State::kRssiFieldNumber;
const int Radios_Radio_Neighbors_Neighbor_State::kSsidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Radios_Radio_Neighbors_Neighbor_State::Radios_Radio_Neighbors_Neighbor_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::InitDefaultsRadios_Radio_Neighbors_Neighbor_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State)
}
Radios_Radio_Neighbors_Neighbor_State::Radios_Radio_Neighbors_Neighbor_State(const Radios_Radio_Neighbors_Neighbor_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_last_seen()) {
    last_seen_ = new ::ywrapper::UintValue(*from.last_seen_);
  } else {
    last_seen_ = NULL;
  }
  if (from.has_ssid()) {
    ssid_ = new ::ywrapper::StringValue(*from.ssid_);
  } else {
    ssid_ = NULL;
  }
  if (from.has_bssid()) {
    bssid_ = new ::ywrapper::StringValue(*from.bssid_);
  } else {
    bssid_ = NULL;
  }
  if (from.has_channel()) {
    channel_ = new ::ywrapper::UintValue(*from.channel_);
  } else {
    channel_ = NULL;
  }
  if (from.has_primary_channel()) {
    primary_channel_ = new ::ywrapper::UintValue(*from.primary_channel_);
  } else {
    primary_channel_ = NULL;
  }
  if (from.has_rssi()) {
    rssi_ = new ::ywrapper::IntValue(*from.rssi_);
  } else {
    rssi_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State)
}

void Radios_Radio_Neighbors_Neighbor_State::SharedCtor() {
  ::memset(&last_seen_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rssi_) -
      reinterpret_cast<char*>(&last_seen_)) + sizeof(rssi_));
  _cached_size_ = 0;
}

Radios_Radio_Neighbors_Neighbor_State::~Radios_Radio_Neighbors_Neighbor_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State)
  SharedDtor();
}

void Radios_Radio_Neighbors_Neighbor_State::SharedDtor() {
  if (this != internal_default_instance()) delete last_seen_;
  if (this != internal_default_instance()) delete ssid_;
  if (this != internal_default_instance()) delete bssid_;
  if (this != internal_default_instance()) delete channel_;
  if (this != internal_default_instance()) delete primary_channel_;
  if (this != internal_default_instance()) delete rssi_;
}

void Radios_Radio_Neighbors_Neighbor_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Radios_Radio_Neighbors_Neighbor_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Radios_Radio_Neighbors_Neighbor_State& Radios_Radio_Neighbors_Neighbor_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::InitDefaultsRadios_Radio_Neighbors_Neighbor_State();
  return *internal_default_instance();
}

Radios_Radio_Neighbors_Neighbor_State* Radios_Radio_Neighbors_Neighbor_State::New(::google::protobuf::Arena* arena) const {
  Radios_Radio_Neighbors_Neighbor_State* n = new Radios_Radio_Neighbors_Neighbor_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Radios_Radio_Neighbors_Neighbor_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && last_seen_ != NULL) {
    delete last_seen_;
  }
  last_seen_ = NULL;
  if (GetArenaNoVirtual() == NULL && ssid_ != NULL) {
    delete ssid_;
  }
  ssid_ = NULL;
  if (GetArenaNoVirtual() == NULL && bssid_ != NULL) {
    delete bssid_;
  }
  bssid_ = NULL;
  if (GetArenaNoVirtual() == NULL && channel_ != NULL) {
    delete channel_;
  }
  channel_ = NULL;
  if (GetArenaNoVirtual() == NULL && primary_channel_ != NULL) {
    delete primary_channel_;
  }
  primary_channel_ = NULL;
  if (GetArenaNoVirtual() == NULL && rssi_ != NULL) {
    delete rssi_;
  }
  rssi_ = NULL;
  _internal_metadata_.Clear();
}

bool Radios_Radio_Neighbors_Neighbor_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2275763858u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue last_seen = 231383841 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state/last-seen"];
      case 231383841: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 1851070730 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_last_seen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue ssid = 240710930 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state/ssid"];
      case 240710930: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 1925687442 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ssid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue bssid = 263931714 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state/bssid"];
      case 263931714: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 2111453714 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bssid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue channel = 266073572 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state/channel"];
      case 266073572: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 2128588578 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_channel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue primary_channel = 269323997 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state/primary-channel"];
      case 269323997: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 2154591978 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_primary_channel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.IntValue rssi = 284470482 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state/rssi"];
      case 284470482: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 2275763858 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rssi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State)
  return false;
#undef DO_
}

void Radios_Radio_Neighbors_Neighbor_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue last_seen = 231383841 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state/last-seen"];
  if (this->has_last_seen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      231383841, *this->last_seen_, output);
  }

  // .ywrapper.StringValue ssid = 240710930 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state/ssid"];
  if (this->has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      240710930, *this->ssid_, output);
  }

  // .ywrapper.StringValue bssid = 263931714 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state/bssid"];
  if (this->has_bssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      263931714, *this->bssid_, output);
  }

  // .ywrapper.UintValue channel = 266073572 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state/channel"];
  if (this->has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      266073572, *this->channel_, output);
  }

  // .ywrapper.UintValue primary_channel = 269323997 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state/primary-channel"];
  if (this->has_primary_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      269323997, *this->primary_channel_, output);
  }

  // .ywrapper.IntValue rssi = 284470482 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state/rssi"];
  if (this->has_rssi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      284470482, *this->rssi_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State)
}

::google::protobuf::uint8* Radios_Radio_Neighbors_Neighbor_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue last_seen = 231383841 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state/last-seen"];
  if (this->has_last_seen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        231383841, *this->last_seen_, deterministic, target);
  }

  // .ywrapper.StringValue ssid = 240710930 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state/ssid"];
  if (this->has_ssid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        240710930, *this->ssid_, deterministic, target);
  }

  // .ywrapper.StringValue bssid = 263931714 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state/bssid"];
  if (this->has_bssid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        263931714, *this->bssid_, deterministic, target);
  }

  // .ywrapper.UintValue channel = 266073572 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state/channel"];
  if (this->has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        266073572, *this->channel_, deterministic, target);
  }

  // .ywrapper.UintValue primary_channel = 269323997 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state/primary-channel"];
  if (this->has_primary_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        269323997, *this->primary_channel_, deterministic, target);
  }

  // .ywrapper.IntValue rssi = 284470482 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state/rssi"];
  if (this->has_rssi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        284470482, *this->rssi_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State)
  return target;
}

size_t Radios_Radio_Neighbors_Neighbor_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue last_seen = 231383841 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state/last-seen"];
  if (this->has_last_seen()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->last_seen_);
  }

  // .ywrapper.StringValue ssid = 240710930 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state/ssid"];
  if (this->has_ssid()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->ssid_);
  }

  // .ywrapper.StringValue bssid = 263931714 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state/bssid"];
  if (this->has_bssid()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->bssid_);
  }

  // .ywrapper.UintValue channel = 266073572 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state/channel"];
  if (this->has_channel()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->channel_);
  }

  // .ywrapper.UintValue primary_channel = 269323997 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state/primary-channel"];
  if (this->has_primary_channel()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->primary_channel_);
  }

  // .ywrapper.IntValue rssi = 284470482 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state/rssi"];
  if (this->has_rssi()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rssi_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Radios_Radio_Neighbors_Neighbor_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Radios_Radio_Neighbors_Neighbor_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Radios_Radio_Neighbors_Neighbor_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State)
    MergeFrom(*source);
  }
}

void Radios_Radio_Neighbors_Neighbor_State::MergeFrom(const Radios_Radio_Neighbors_Neighbor_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_last_seen()) {
    mutable_last_seen()->::ywrapper::UintValue::MergeFrom(from.last_seen());
  }
  if (from.has_ssid()) {
    mutable_ssid()->::ywrapper::StringValue::MergeFrom(from.ssid());
  }
  if (from.has_bssid()) {
    mutable_bssid()->::ywrapper::StringValue::MergeFrom(from.bssid());
  }
  if (from.has_channel()) {
    mutable_channel()->::ywrapper::UintValue::MergeFrom(from.channel());
  }
  if (from.has_primary_channel()) {
    mutable_primary_channel()->::ywrapper::UintValue::MergeFrom(from.primary_channel());
  }
  if (from.has_rssi()) {
    mutable_rssi()->::ywrapper::IntValue::MergeFrom(from.rssi());
  }
}

void Radios_Radio_Neighbors_Neighbor_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Radios_Radio_Neighbors_Neighbor_State::CopyFrom(const Radios_Radio_Neighbors_Neighbor_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Radios_Radio_Neighbors_Neighbor_State::IsInitialized() const {
  return true;
}

void Radios_Radio_Neighbors_Neighbor_State::Swap(Radios_Radio_Neighbors_Neighbor_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Radios_Radio_Neighbors_Neighbor_State::InternalSwap(Radios_Radio_Neighbors_Neighbor_State* other) {
  using std::swap;
  swap(last_seen_, other->last_seen_);
  swap(ssid_, other->ssid_);
  swap(bssid_, other->bssid_);
  swap(channel_, other->channel_);
  swap(primary_channel_, other->primary_channel_);
  swap(rssi_, other->rssi_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Radios_Radio_Neighbors_Neighbor_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Radios_Radio_Neighbors_Neighbor::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_Neighbors_Neighbor_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor_State*>(
      ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Radios_Radio_Neighbors_Neighbor::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Radios_Radio_Neighbors_Neighbor::Radios_Radio_Neighbors_Neighbor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::InitDefaultsRadios_Radio_Neighbors_Neighbor();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor)
}
Radios_Radio_Neighbors_Neighbor::Radios_Radio_Neighbors_Neighbor(const Radios_Radio_Neighbors_Neighbor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor_State(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor)
}

void Radios_Radio_Neighbors_Neighbor::SharedCtor() {
  state_ = NULL;
  _cached_size_ = 0;
}

Radios_Radio_Neighbors_Neighbor::~Radios_Radio_Neighbors_Neighbor() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor)
  SharedDtor();
}

void Radios_Radio_Neighbors_Neighbor::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
}

void Radios_Radio_Neighbors_Neighbor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Radios_Radio_Neighbors_Neighbor::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Radios_Radio_Neighbors_Neighbor& Radios_Radio_Neighbors_Neighbor::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::InitDefaultsRadios_Radio_Neighbors_Neighbor();
  return *internal_default_instance();
}

Radios_Radio_Neighbors_Neighbor* Radios_Radio_Neighbors_Neighbor::New(::google::protobuf::Arena* arena) const {
  Radios_Radio_Neighbors_Neighbor* n = new Radios_Radio_Neighbors_Neighbor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Radios_Radio_Neighbors_Neighbor::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool Radios_Radio_Neighbors_Neighbor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(1360549634u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State state = 170068704 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state"];
      case 170068704: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 1360549634 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor)
  return false;
#undef DO_
}

void Radios_Radio_Neighbors_Neighbor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State state = 170068704 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      170068704, *this->state_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor)
}

::google::protobuf::uint8* Radios_Radio_Neighbors_Neighbor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State state = 170068704 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        170068704, *this->state_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor)
  return target;
}

size_t Radios_Radio_Neighbors_Neighbor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State state = 170068704 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Radios_Radio_Neighbors_Neighbor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor)
  GOOGLE_DCHECK_NE(&from, this);
  const Radios_Radio_Neighbors_Neighbor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Radios_Radio_Neighbors_Neighbor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor)
    MergeFrom(*source);
  }
}

void Radios_Radio_Neighbors_Neighbor::MergeFrom(const Radios_Radio_Neighbors_Neighbor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor_State::MergeFrom(from.state());
  }
}

void Radios_Radio_Neighbors_Neighbor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Radios_Radio_Neighbors_Neighbor::CopyFrom(const Radios_Radio_Neighbors_Neighbor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Radios_Radio_Neighbors_Neighbor::IsInitialized() const {
  return true;
}

void Radios_Radio_Neighbors_Neighbor::Swap(Radios_Radio_Neighbors_Neighbor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Radios_Radio_Neighbors_Neighbor::InternalSwap(Radios_Radio_Neighbors_Neighbor* other) {
  using std::swap;
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Radios_Radio_Neighbors_Neighbor::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Radios_Radio_Neighbors_NeighborKey::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_Neighbors_NeighborKey_default_instance_._instance.get_mutable()->neighbor_ = const_cast< ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor*>(
      ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Radios_Radio_Neighbors_NeighborKey::kBssidFieldNumber;
const int Radios_Radio_Neighbors_NeighborKey::kNeighborFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Radios_Radio_Neighbors_NeighborKey::Radios_Radio_Neighbors_NeighborKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::InitDefaultsRadios_Radio_Neighbors_NeighborKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey)
}
Radios_Radio_Neighbors_NeighborKey::Radios_Radio_Neighbors_NeighborKey(const Radios_Radio_Neighbors_NeighborKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bssid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bssid().size() > 0) {
    bssid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bssid_);
  }
  if (from.has_neighbor()) {
    neighbor_ = new ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor(*from.neighbor_);
  } else {
    neighbor_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey)
}

void Radios_Radio_Neighbors_NeighborKey::SharedCtor() {
  bssid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  neighbor_ = NULL;
  _cached_size_ = 0;
}

Radios_Radio_Neighbors_NeighborKey::~Radios_Radio_Neighbors_NeighborKey() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey)
  SharedDtor();
}

void Radios_Radio_Neighbors_NeighborKey::SharedDtor() {
  bssid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete neighbor_;
}

void Radios_Radio_Neighbors_NeighborKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Radios_Radio_Neighbors_NeighborKey::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Radios_Radio_Neighbors_NeighborKey& Radios_Radio_Neighbors_NeighborKey::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::InitDefaultsRadios_Radio_Neighbors_NeighborKey();
  return *internal_default_instance();
}

Radios_Radio_Neighbors_NeighborKey* Radios_Radio_Neighbors_NeighborKey::New(::google::protobuf::Arena* arena) const {
  Radios_Radio_Neighbors_NeighborKey* n = new Radios_Radio_Neighbors_NeighborKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Radios_Radio_Neighbors_NeighborKey::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bssid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && neighbor_ != NULL) {
    delete neighbor_;
  }
  neighbor_ = NULL;
  _internal_metadata_.Clear();
}

bool Radios_Radio_Neighbors_NeighborKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string bssid = 1 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/bssid"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bssid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bssid().data(), static_cast<int>(this->bssid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey.bssid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor neighbor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_neighbor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey)
  return false;
#undef DO_
}

void Radios_Radio_Neighbors_NeighborKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bssid = 1 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/bssid"];
  if (this->bssid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bssid().data(), static_cast<int>(this->bssid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey.bssid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bssid(), output);
  }

  // .openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor neighbor = 2;
  if (this->has_neighbor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->neighbor_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey)
}

::google::protobuf::uint8* Radios_Radio_Neighbors_NeighborKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bssid = 1 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/bssid"];
  if (this->bssid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bssid().data(), static_cast<int>(this->bssid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey.bssid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bssid(), target);
  }

  // .openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor neighbor = 2;
  if (this->has_neighbor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->neighbor_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey)
  return target;
}

size_t Radios_Radio_Neighbors_NeighborKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string bssid = 1 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/bssid"];
  if (this->bssid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bssid());
  }

  // .openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor neighbor = 2;
  if (this->has_neighbor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->neighbor_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Radios_Radio_Neighbors_NeighborKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Radios_Radio_Neighbors_NeighborKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Radios_Radio_Neighbors_NeighborKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey)
    MergeFrom(*source);
  }
}

void Radios_Radio_Neighbors_NeighborKey::MergeFrom(const Radios_Radio_Neighbors_NeighborKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bssid().size() > 0) {

    bssid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bssid_);
  }
  if (from.has_neighbor()) {
    mutable_neighbor()->::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor::MergeFrom(from.neighbor());
  }
}

void Radios_Radio_Neighbors_NeighborKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Radios_Radio_Neighbors_NeighborKey::CopyFrom(const Radios_Radio_Neighbors_NeighborKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Radios_Radio_Neighbors_NeighborKey::IsInitialized() const {
  return true;
}

void Radios_Radio_Neighbors_NeighborKey::Swap(Radios_Radio_Neighbors_NeighborKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Radios_Radio_Neighbors_NeighborKey::InternalSwap(Radios_Radio_Neighbors_NeighborKey* other) {
  using std::swap;
  bssid_.Swap(&other->bssid_);
  swap(neighbor_, other->neighbor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Radios_Radio_Neighbors_NeighborKey::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Radios_Radio_Neighbors::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Radios_Radio_Neighbors::kNeighborFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Radios_Radio_Neighbors::Radios_Radio_Neighbors()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::InitDefaultsRadios_Radio_Neighbors();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors)
}
Radios_Radio_Neighbors::Radios_Radio_Neighbors(const Radios_Radio_Neighbors& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      neighbor_(from.neighbor_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors)
}

void Radios_Radio_Neighbors::SharedCtor() {
  _cached_size_ = 0;
}

Radios_Radio_Neighbors::~Radios_Radio_Neighbors() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors)
  SharedDtor();
}

void Radios_Radio_Neighbors::SharedDtor() {
}

void Radios_Radio_Neighbors::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Radios_Radio_Neighbors::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Radios_Radio_Neighbors& Radios_Radio_Neighbors::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::InitDefaultsRadios_Radio_Neighbors();
  return *internal_default_instance();
}

Radios_Radio_Neighbors* Radios_Radio_Neighbors::New(::google::protobuf::Arena* arena) const {
  Radios_Radio_Neighbors* n = new Radios_Radio_Neighbors;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Radios_Radio_Neighbors::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  neighbor_.Clear();
  _internal_metadata_.Clear();
}

bool Radios_Radio_Neighbors::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4238675186u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey neighbor = 529834398 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor"];
      case 529834398: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 4238675186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_neighbor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors)
  return false;
#undef DO_
}

void Radios_Radio_Neighbors::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey neighbor = 529834398 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->neighbor_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      529834398, this->neighbor(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors)
}

::google::protobuf::uint8* Radios_Radio_Neighbors::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey neighbor = 529834398 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->neighbor_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        529834398, this->neighbor(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors)
  return target;
}

size_t Radios_Radio_Neighbors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey neighbor = 529834398 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor"];
  {
    unsigned int count = static_cast<unsigned int>(this->neighbor_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->neighbor(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Radios_Radio_Neighbors::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors)
  GOOGLE_DCHECK_NE(&from, this);
  const Radios_Radio_Neighbors* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Radios_Radio_Neighbors>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors)
    MergeFrom(*source);
  }
}

void Radios_Radio_Neighbors::MergeFrom(const Radios_Radio_Neighbors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  neighbor_.MergeFrom(from.neighbor_);
}

void Radios_Radio_Neighbors::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Radios_Radio_Neighbors::CopyFrom(const Radios_Radio_Neighbors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Radios_Radio_Neighbors::IsInitialized() const {
  return true;
}

void Radios_Radio_Neighbors::Swap(Radios_Radio_Neighbors* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Radios_Radio_Neighbors::InternalSwap(Radios_Radio_Neighbors* other) {
  using std::swap;
  neighbor_.InternalSwap(&other->neighbor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Radios_Radio_Neighbors::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Radios_Radio_State_Counters::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_State_Counters_default_instance_._instance.get_mutable()->failed_fcs_frames_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_State_Counters_default_instance_._instance.get_mutable()->noise_floor_ = const_cast< ::ywrapper::IntValue*>(
      ::ywrapper::IntValue::internal_default_instance());
}
void Radios_Radio_State_Counters::clear_failed_fcs_frames() {
  if (GetArenaNoVirtual() == NULL && failed_fcs_frames_ != NULL) {
    delete failed_fcs_frames_;
  }
  failed_fcs_frames_ = NULL;
}
void Radios_Radio_State_Counters::clear_noise_floor() {
  if (GetArenaNoVirtual() == NULL && noise_floor_ != NULL) {
    delete noise_floor_;
  }
  noise_floor_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Radios_Radio_State_Counters::kFailedFcsFramesFieldNumber;
const int Radios_Radio_State_Counters::kNoiseFloorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Radios_Radio_State_Counters::Radios_Radio_State_Counters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::InitDefaultsRadios_Radio_State_Counters();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_phy.Radios.Radio.State.Counters)
}
Radios_Radio_State_Counters::Radios_Radio_State_Counters(const Radios_Radio_State_Counters& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_noise_floor()) {
    noise_floor_ = new ::ywrapper::IntValue(*from.noise_floor_);
  } else {
    noise_floor_ = NULL;
  }
  if (from.has_failed_fcs_frames()) {
    failed_fcs_frames_ = new ::ywrapper::UintValue(*from.failed_fcs_frames_);
  } else {
    failed_fcs_frames_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_phy.Radios.Radio.State.Counters)
}

void Radios_Radio_State_Counters::SharedCtor() {
  ::memset(&noise_floor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&failed_fcs_frames_) -
      reinterpret_cast<char*>(&noise_floor_)) + sizeof(failed_fcs_frames_));
  _cached_size_ = 0;
}

Radios_Radio_State_Counters::~Radios_Radio_State_Counters() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_phy.Radios.Radio.State.Counters)
  SharedDtor();
}

void Radios_Radio_State_Counters::SharedDtor() {
  if (this != internal_default_instance()) delete noise_floor_;
  if (this != internal_default_instance()) delete failed_fcs_frames_;
}

void Radios_Radio_State_Counters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Radios_Radio_State_Counters::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Radios_Radio_State_Counters& Radios_Radio_State_Counters::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::InitDefaultsRadios_Radio_State_Counters();
  return *internal_default_instance();
}

Radios_Radio_State_Counters* Radios_Radio_State_Counters::New(::google::protobuf::Arena* arena) const {
  Radios_Radio_State_Counters* n = new Radios_Radio_State_Counters;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Radios_Radio_State_Counters::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_phy.Radios.Radio.State.Counters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && noise_floor_ != NULL) {
    delete noise_floor_;
  }
  noise_floor_ = NULL;
  if (GetArenaNoVirtual() == NULL && failed_fcs_frames_ != NULL) {
    delete failed_fcs_frames_;
  }
  failed_fcs_frames_ = NULL;
  _internal_metadata_.Clear();
}

bool Radios_Radio_State_Counters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_phy.Radios.Radio.State.Counters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2900595610u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.IntValue noise_floor = 305481331 [(.yext.schemapath) = "/radios/radio/state/counters/noise-floor"];
      case 305481331: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 2443850650 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_noise_floor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue failed_fcs_frames = 362574451 [(.yext.schemapath) = "/radios/radio/state/counters/failed-fcs-frames"];
      case 362574451: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 2900595610 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_failed_fcs_frames()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_phy.Radios.Radio.State.Counters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_phy.Radios.Radio.State.Counters)
  return false;
#undef DO_
}

void Radios_Radio_State_Counters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_phy.Radios.Radio.State.Counters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.IntValue noise_floor = 305481331 [(.yext.schemapath) = "/radios/radio/state/counters/noise-floor"];
  if (this->has_noise_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      305481331, *this->noise_floor_, output);
  }

  // .ywrapper.UintValue failed_fcs_frames = 362574451 [(.yext.schemapath) = "/radios/radio/state/counters/failed-fcs-frames"];
  if (this->has_failed_fcs_frames()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      362574451, *this->failed_fcs_frames_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_phy.Radios.Radio.State.Counters)
}

::google::protobuf::uint8* Radios_Radio_State_Counters::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_phy.Radios.Radio.State.Counters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.IntValue noise_floor = 305481331 [(.yext.schemapath) = "/radios/radio/state/counters/noise-floor"];
  if (this->has_noise_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        305481331, *this->noise_floor_, deterministic, target);
  }

  // .ywrapper.UintValue failed_fcs_frames = 362574451 [(.yext.schemapath) = "/radios/radio/state/counters/failed-fcs-frames"];
  if (this->has_failed_fcs_frames()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        362574451, *this->failed_fcs_frames_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_phy.Radios.Radio.State.Counters)
  return target;
}

size_t Radios_Radio_State_Counters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_phy.Radios.Radio.State.Counters)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.IntValue noise_floor = 305481331 [(.yext.schemapath) = "/radios/radio/state/counters/noise-floor"];
  if (this->has_noise_floor()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->noise_floor_);
  }

  // .ywrapper.UintValue failed_fcs_frames = 362574451 [(.yext.schemapath) = "/radios/radio/state/counters/failed-fcs-frames"];
  if (this->has_failed_fcs_frames()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->failed_fcs_frames_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Radios_Radio_State_Counters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_phy.Radios.Radio.State.Counters)
  GOOGLE_DCHECK_NE(&from, this);
  const Radios_Radio_State_Counters* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Radios_Radio_State_Counters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_phy.Radios.Radio.State.Counters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_phy.Radios.Radio.State.Counters)
    MergeFrom(*source);
  }
}

void Radios_Radio_State_Counters::MergeFrom(const Radios_Radio_State_Counters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_phy.Radios.Radio.State.Counters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_noise_floor()) {
    mutable_noise_floor()->::ywrapper::IntValue::MergeFrom(from.noise_floor());
  }
  if (from.has_failed_fcs_frames()) {
    mutable_failed_fcs_frames()->::ywrapper::UintValue::MergeFrom(from.failed_fcs_frames());
  }
}

void Radios_Radio_State_Counters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_phy.Radios.Radio.State.Counters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Radios_Radio_State_Counters::CopyFrom(const Radios_Radio_State_Counters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_phy.Radios.Radio.State.Counters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Radios_Radio_State_Counters::IsInitialized() const {
  return true;
}

void Radios_Radio_State_Counters::Swap(Radios_Radio_State_Counters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Radios_Radio_State_Counters::InternalSwap(Radios_Radio_State_Counters* other) {
  using std::swap;
  swap(noise_floor_, other->noise_floor_);
  swap(failed_fcs_frames_, other->failed_fcs_frames_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Radios_Radio_State_Counters::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Radios_Radio_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_State_default_instance_._instance.get_mutable()->antenna_gain_ = const_cast< ::ywrapper::IntValue*>(
      ::ywrapper::IntValue::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_State_default_instance_._instance.get_mutable()->base_radio_mac_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_State_default_instance_._instance.get_mutable()->channel_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_State_default_instance_._instance.get_mutable()->channel_width_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_State_default_instance_._instance.get_mutable()->counters_ = const_cast< ::openconfig::openconfig_wifi_phy::Radios_Radio_State_Counters*>(
      ::openconfig::openconfig_wifi_phy::Radios_Radio_State_Counters::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_State_default_instance_._instance.get_mutable()->dca_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_State_default_instance_._instance.get_mutable()->dfs_hit_time_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_State_default_instance_._instance.get_mutable()->dtp_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_State_default_instance_._instance.get_mutable()->dtp_max_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_State_default_instance_._instance.get_mutable()->dtp_min_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_State_default_instance_._instance.get_mutable()->enabled_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_State_default_instance_._instance.get_mutable()->id_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_State_default_instance_._instance.get_mutable()->rx_dot11_channel_utilization_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_State_default_instance_._instance.get_mutable()->rx_noise_channel_utilization_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_State_default_instance_._instance.get_mutable()->scanning_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_State_default_instance_._instance.get_mutable()->scanning_defer_clients_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_State_default_instance_._instance.get_mutable()->scanning_defer_traffic_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_State_default_instance_._instance.get_mutable()->scanning_dwell_time_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_State_default_instance_._instance.get_mutable()->scanning_interval_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_State_default_instance_._instance.get_mutable()->total_channel_utilization_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_State_default_instance_._instance.get_mutable()->transmit_power_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_State_default_instance_._instance.get_mutable()->tx_dot11_channel_utilization_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Radios_Radio_State::clear_allowed_channels() {
  allowed_channels_.Clear();
}
void Radios_Radio_State::clear_antenna_gain() {
  if (GetArenaNoVirtual() == NULL && antenna_gain_ != NULL) {
    delete antenna_gain_;
  }
  antenna_gain_ = NULL;
}
void Radios_Radio_State::clear_base_radio_mac() {
  if (GetArenaNoVirtual() == NULL && base_radio_mac_ != NULL) {
    delete base_radio_mac_;
  }
  base_radio_mac_ = NULL;
}
void Radios_Radio_State::clear_channel() {
  if (GetArenaNoVirtual() == NULL && channel_ != NULL) {
    delete channel_;
  }
  channel_ = NULL;
}
void Radios_Radio_State::clear_channel_width() {
  if (GetArenaNoVirtual() == NULL && channel_width_ != NULL) {
    delete channel_width_;
  }
  channel_width_ = NULL;
}
void Radios_Radio_State::clear_dca() {
  if (GetArenaNoVirtual() == NULL && dca_ != NULL) {
    delete dca_;
  }
  dca_ = NULL;
}
void Radios_Radio_State::clear_dfs_hit_time() {
  if (GetArenaNoVirtual() == NULL && dfs_hit_time_ != NULL) {
    delete dfs_hit_time_;
  }
  dfs_hit_time_ = NULL;
}
void Radios_Radio_State::clear_dtp() {
  if (GetArenaNoVirtual() == NULL && dtp_ != NULL) {
    delete dtp_;
  }
  dtp_ = NULL;
}
void Radios_Radio_State::clear_dtp_max() {
  if (GetArenaNoVirtual() == NULL && dtp_max_ != NULL) {
    delete dtp_max_;
  }
  dtp_max_ = NULL;
}
void Radios_Radio_State::clear_dtp_min() {
  if (GetArenaNoVirtual() == NULL && dtp_min_ != NULL) {
    delete dtp_min_;
  }
  dtp_min_ = NULL;
}
void Radios_Radio_State::clear_enabled() {
  if (GetArenaNoVirtual() == NULL && enabled_ != NULL) {
    delete enabled_;
  }
  enabled_ = NULL;
}
void Radios_Radio_State::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
void Radios_Radio_State::clear_rx_dot11_channel_utilization() {
  if (GetArenaNoVirtual() == NULL && rx_dot11_channel_utilization_ != NULL) {
    delete rx_dot11_channel_utilization_;
  }
  rx_dot11_channel_utilization_ = NULL;
}
void Radios_Radio_State::clear_rx_noise_channel_utilization() {
  if (GetArenaNoVirtual() == NULL && rx_noise_channel_utilization_ != NULL) {
    delete rx_noise_channel_utilization_;
  }
  rx_noise_channel_utilization_ = NULL;
}
void Radios_Radio_State::clear_scanning() {
  if (GetArenaNoVirtual() == NULL && scanning_ != NULL) {
    delete scanning_;
  }
  scanning_ = NULL;
}
void Radios_Radio_State::clear_scanning_defer_clients() {
  if (GetArenaNoVirtual() == NULL && scanning_defer_clients_ != NULL) {
    delete scanning_defer_clients_;
  }
  scanning_defer_clients_ = NULL;
}
void Radios_Radio_State::clear_scanning_defer_traffic() {
  if (GetArenaNoVirtual() == NULL && scanning_defer_traffic_ != NULL) {
    delete scanning_defer_traffic_;
  }
  scanning_defer_traffic_ = NULL;
}
void Radios_Radio_State::clear_scanning_dwell_time() {
  if (GetArenaNoVirtual() == NULL && scanning_dwell_time_ != NULL) {
    delete scanning_dwell_time_;
  }
  scanning_dwell_time_ = NULL;
}
void Radios_Radio_State::clear_scanning_interval() {
  if (GetArenaNoVirtual() == NULL && scanning_interval_ != NULL) {
    delete scanning_interval_;
  }
  scanning_interval_ = NULL;
}
void Radios_Radio_State::clear_total_channel_utilization() {
  if (GetArenaNoVirtual() == NULL && total_channel_utilization_ != NULL) {
    delete total_channel_utilization_;
  }
  total_channel_utilization_ = NULL;
}
void Radios_Radio_State::clear_transmit_power() {
  if (GetArenaNoVirtual() == NULL && transmit_power_ != NULL) {
    delete transmit_power_;
  }
  transmit_power_ = NULL;
}
void Radios_Radio_State::clear_tx_dot11_channel_utilization() {
  if (GetArenaNoVirtual() == NULL && tx_dot11_channel_utilization_ != NULL) {
    delete tx_dot11_channel_utilization_;
  }
  tx_dot11_channel_utilization_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Radios_Radio_State::kAllowedChannelsFieldNumber;
const int Radios_Radio_State::kAntennaGainFieldNumber;
const int Radios_Radio_State::kBaseRadioMacFieldNumber;
const int Radios_Radio_State::kChannelFieldNumber;
const int Radios_Radio_State::kChannelChangeReasonFieldNumber;
const int Radios_Radio_State::kChannelWidthFieldNumber;
const int Radios_Radio_State::kCountersFieldNumber;
const int Radios_Radio_State::kDcaFieldNumber;
const int Radios_Radio_State::kDfsHitTimeFieldNumber;
const int Radios_Radio_State::kDtpFieldNumber;
const int Radios_Radio_State::kDtpMaxFieldNumber;
const int Radios_Radio_State::kDtpMinFieldNumber;
const int Radios_Radio_State::kEnabledFieldNumber;
const int Radios_Radio_State::kIdFieldNumber;
const int Radios_Radio_State::kOperatingFrequencyFieldNumber;
const int Radios_Radio_State::kRxDot11ChannelUtilizationFieldNumber;
const int Radios_Radio_State::kRxNoiseChannelUtilizationFieldNumber;
const int Radios_Radio_State::kScanningFieldNumber;
const int Radios_Radio_State::kScanningDeferClientsFieldNumber;
const int Radios_Radio_State::kScanningDeferTrafficFieldNumber;
const int Radios_Radio_State::kScanningDwellTimeFieldNumber;
const int Radios_Radio_State::kScanningIntervalFieldNumber;
const int Radios_Radio_State::kTotalChannelUtilizationFieldNumber;
const int Radios_Radio_State::kTransmitPowerFieldNumber;
const int Radios_Radio_State::kTxDot11ChannelUtilizationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Radios_Radio_State::Radios_Radio_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::InitDefaultsRadios_Radio_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_phy.Radios.Radio.State)
}
Radios_Radio_State::Radios_Radio_State(const Radios_Radio_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      allowed_channels_(from.allowed_channels_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_transmit_power()) {
    transmit_power_ = new ::ywrapper::UintValue(*from.transmit_power_);
  } else {
    transmit_power_ = NULL;
  }
  if (from.has_counters()) {
    counters_ = new ::openconfig::openconfig_wifi_phy::Radios_Radio_State_Counters(*from.counters_);
  } else {
    counters_ = NULL;
  }
  if (from.has_dtp_min()) {
    dtp_min_ = new ::ywrapper::UintValue(*from.dtp_min_);
  } else {
    dtp_min_ = NULL;
  }
  if (from.has_channel_width()) {
    channel_width_ = new ::ywrapper::UintValue(*from.channel_width_);
  } else {
    channel_width_ = NULL;
  }
  if (from.has_base_radio_mac()) {
    base_radio_mac_ = new ::ywrapper::StringValue(*from.base_radio_mac_);
  } else {
    base_radio_mac_ = NULL;
  }
  if (from.has_tx_dot11_channel_utilization()) {
    tx_dot11_channel_utilization_ = new ::ywrapper::UintValue(*from.tx_dot11_channel_utilization_);
  } else {
    tx_dot11_channel_utilization_ = NULL;
  }
  if (from.has_rx_dot11_channel_utilization()) {
    rx_dot11_channel_utilization_ = new ::ywrapper::UintValue(*from.rx_dot11_channel_utilization_);
  } else {
    rx_dot11_channel_utilization_ = NULL;
  }
  if (from.has_enabled()) {
    enabled_ = new ::ywrapper::BoolValue(*from.enabled_);
  } else {
    enabled_ = NULL;
  }
  if (from.has_dtp_max()) {
    dtp_max_ = new ::ywrapper::UintValue(*from.dtp_max_);
  } else {
    dtp_max_ = NULL;
  }
  if (from.has_rx_noise_channel_utilization()) {
    rx_noise_channel_utilization_ = new ::ywrapper::UintValue(*from.rx_noise_channel_utilization_);
  } else {
    rx_noise_channel_utilization_ = NULL;
  }
  if (from.has_id()) {
    id_ = new ::ywrapper::UintValue(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_channel()) {
    channel_ = new ::ywrapper::UintValue(*from.channel_);
  } else {
    channel_ = NULL;
  }
  if (from.has_scanning_dwell_time()) {
    scanning_dwell_time_ = new ::ywrapper::UintValue(*from.scanning_dwell_time_);
  } else {
    scanning_dwell_time_ = NULL;
  }
  if (from.has_scanning_defer_clients()) {
    scanning_defer_clients_ = new ::ywrapper::UintValue(*from.scanning_defer_clients_);
  } else {
    scanning_defer_clients_ = NULL;
  }
  if (from.has_scanning_defer_traffic()) {
    scanning_defer_traffic_ = new ::ywrapper::BoolValue(*from.scanning_defer_traffic_);
  } else {
    scanning_defer_traffic_ = NULL;
  }
  if (from.has_scanning()) {
    scanning_ = new ::ywrapper::BoolValue(*from.scanning_);
  } else {
    scanning_ = NULL;
  }
  if (from.has_antenna_gain()) {
    antenna_gain_ = new ::ywrapper::IntValue(*from.antenna_gain_);
  } else {
    antenna_gain_ = NULL;
  }
  if (from.has_dtp()) {
    dtp_ = new ::ywrapper::BoolValue(*from.dtp_);
  } else {
    dtp_ = NULL;
  }
  if (from.has_total_channel_utilization()) {
    total_channel_utilization_ = new ::ywrapper::UintValue(*from.total_channel_utilization_);
  } else {
    total_channel_utilization_ = NULL;
  }
  if (from.has_scanning_interval()) {
    scanning_interval_ = new ::ywrapper::UintValue(*from.scanning_interval_);
  } else {
    scanning_interval_ = NULL;
  }
  if (from.has_dfs_hit_time()) {
    dfs_hit_time_ = new ::ywrapper::UintValue(*from.dfs_hit_time_);
  } else {
    dfs_hit_time_ = NULL;
  }
  if (from.has_dca()) {
    dca_ = new ::ywrapper::BoolValue(*from.dca_);
  } else {
    dca_ = NULL;
  }
  ::memcpy(&channel_change_reason_, &from.channel_change_reason_,
    static_cast<size_t>(reinterpret_cast<char*>(&operating_frequency_) -
    reinterpret_cast<char*>(&channel_change_reason_)) + sizeof(operating_frequency_));
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_phy.Radios.Radio.State)
}

void Radios_Radio_State::SharedCtor() {
  ::memset(&transmit_power_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operating_frequency_) -
      reinterpret_cast<char*>(&transmit_power_)) + sizeof(operating_frequency_));
  _cached_size_ = 0;
}

Radios_Radio_State::~Radios_Radio_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_phy.Radios.Radio.State)
  SharedDtor();
}

void Radios_Radio_State::SharedDtor() {
  if (this != internal_default_instance()) delete transmit_power_;
  if (this != internal_default_instance()) delete counters_;
  if (this != internal_default_instance()) delete dtp_min_;
  if (this != internal_default_instance()) delete channel_width_;
  if (this != internal_default_instance()) delete base_radio_mac_;
  if (this != internal_default_instance()) delete tx_dot11_channel_utilization_;
  if (this != internal_default_instance()) delete rx_dot11_channel_utilization_;
  if (this != internal_default_instance()) delete enabled_;
  if (this != internal_default_instance()) delete dtp_max_;
  if (this != internal_default_instance()) delete rx_noise_channel_utilization_;
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete channel_;
  if (this != internal_default_instance()) delete scanning_dwell_time_;
  if (this != internal_default_instance()) delete scanning_defer_clients_;
  if (this != internal_default_instance()) delete scanning_defer_traffic_;
  if (this != internal_default_instance()) delete scanning_;
  if (this != internal_default_instance()) delete antenna_gain_;
  if (this != internal_default_instance()) delete dtp_;
  if (this != internal_default_instance()) delete total_channel_utilization_;
  if (this != internal_default_instance()) delete scanning_interval_;
  if (this != internal_default_instance()) delete dfs_hit_time_;
  if (this != internal_default_instance()) delete dca_;
}

void Radios_Radio_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Radios_Radio_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Radios_Radio_State& Radios_Radio_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::InitDefaultsRadios_Radio_State();
  return *internal_default_instance();
}

Radios_Radio_State* Radios_Radio_State::New(::google::protobuf::Arena* arena) const {
  Radios_Radio_State* n = new Radios_Radio_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Radios_Radio_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_phy.Radios.Radio.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allowed_channels_.Clear();
  if (GetArenaNoVirtual() == NULL && transmit_power_ != NULL) {
    delete transmit_power_;
  }
  transmit_power_ = NULL;
  if (GetArenaNoVirtual() == NULL && counters_ != NULL) {
    delete counters_;
  }
  counters_ = NULL;
  if (GetArenaNoVirtual() == NULL && dtp_min_ != NULL) {
    delete dtp_min_;
  }
  dtp_min_ = NULL;
  if (GetArenaNoVirtual() == NULL && channel_width_ != NULL) {
    delete channel_width_;
  }
  channel_width_ = NULL;
  if (GetArenaNoVirtual() == NULL && base_radio_mac_ != NULL) {
    delete base_radio_mac_;
  }
  base_radio_mac_ = NULL;
  if (GetArenaNoVirtual() == NULL && tx_dot11_channel_utilization_ != NULL) {
    delete tx_dot11_channel_utilization_;
  }
  tx_dot11_channel_utilization_ = NULL;
  if (GetArenaNoVirtual() == NULL && rx_dot11_channel_utilization_ != NULL) {
    delete rx_dot11_channel_utilization_;
  }
  rx_dot11_channel_utilization_ = NULL;
  if (GetArenaNoVirtual() == NULL && enabled_ != NULL) {
    delete enabled_;
  }
  enabled_ = NULL;
  if (GetArenaNoVirtual() == NULL && dtp_max_ != NULL) {
    delete dtp_max_;
  }
  dtp_max_ = NULL;
  if (GetArenaNoVirtual() == NULL && rx_noise_channel_utilization_ != NULL) {
    delete rx_noise_channel_utilization_;
  }
  rx_noise_channel_utilization_ = NULL;
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  if (GetArenaNoVirtual() == NULL && channel_ != NULL) {
    delete channel_;
  }
  channel_ = NULL;
  if (GetArenaNoVirtual() == NULL && scanning_dwell_time_ != NULL) {
    delete scanning_dwell_time_;
  }
  scanning_dwell_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && scanning_defer_clients_ != NULL) {
    delete scanning_defer_clients_;
  }
  scanning_defer_clients_ = NULL;
  if (GetArenaNoVirtual() == NULL && scanning_defer_traffic_ != NULL) {
    delete scanning_defer_traffic_;
  }
  scanning_defer_traffic_ = NULL;
  if (GetArenaNoVirtual() == NULL && scanning_ != NULL) {
    delete scanning_;
  }
  scanning_ = NULL;
  if (GetArenaNoVirtual() == NULL && antenna_gain_ != NULL) {
    delete antenna_gain_;
  }
  antenna_gain_ = NULL;
  if (GetArenaNoVirtual() == NULL && dtp_ != NULL) {
    delete dtp_;
  }
  dtp_ = NULL;
  if (GetArenaNoVirtual() == NULL && total_channel_utilization_ != NULL) {
    delete total_channel_utilization_;
  }
  total_channel_utilization_ = NULL;
  if (GetArenaNoVirtual() == NULL && scanning_interval_ != NULL) {
    delete scanning_interval_;
  }
  scanning_interval_ = NULL;
  if (GetArenaNoVirtual() == NULL && dfs_hit_time_ != NULL) {
    delete dfs_hit_time_;
  }
  dfs_hit_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && dca_ != NULL) {
    delete dca_;
  }
  dca_ = NULL;
  ::memset(&channel_change_reason_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operating_frequency_) -
      reinterpret_cast<char*>(&channel_change_reason_)) + sizeof(operating_frequency_));
  _internal_metadata_.Clear();
}

bool Radios_Radio_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_phy.Radios.Radio.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3863781842u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue transmit_power = 11818902 [(.yext.schemapath) = "/radios/radio/state/transmit-power"];
      case 11818902: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 94551218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transmit_power()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_wifi_phy.Radios.Radio.State.Counters counters = 23007449 [(.yext.schemapath) = "/radios/radio/state/counters"];
      case 23007449: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 184059594 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_counters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue dtp_min = 58951105 [(.yext.schemapath) = "/radios/radio/state/dtp-min"];
      case 58951105: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 471608842 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dtp_min()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue channel_width = 61632036 [(.yext.schemapath) = "/radios/radio/state/channel-width"];
      case 61632036: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 493056290 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_channel_width()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue base_radio_mac = 62813897 [(.yext.schemapath) = "/radios/radio/state/base-radio-mac"];
      case 62813897: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 502511178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_base_radio_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue tx_dot11_channel_utilization = 107177407 [(.yext.schemapath) = "/radios/radio/state/tx-dot11-channel-utilization"];
      case 107177407: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 857419258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx_dot11_channel_utilization()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.enums.OpenconfigWifiTypesCHANGEREASONTYPE channel_change_reason = 119452921 [(.yext.schemapath) = "/radios/radio/state/channel-change-reason"];
      case 119452921: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 955623368 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_channel_change_reason(static_cast< ::openconfig::enums::OpenconfigWifiTypesCHANGEREASONTYPE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.enums.OpenconfigWifiTypesOPERATINGFREQUENCY operating_frequency = 131574810 [(.yext.schemapath) = "/radios/radio/state/operating-frequency"];
      case 131574810: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 1052598480 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operating_frequency(static_cast< ::openconfig::enums::OpenconfigWifiTypesOPERATINGFREQUENCY >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue rx_dot11_channel_utilization = 175802841 [(.yext.schemapath) = "/radios/radio/state/rx-dot11-channel-utilization"];
      case 175802841: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 1406422730 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rx_dot11_channel_utilization()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue enabled = 190273197 [(.yext.schemapath) = "/radios/radio/state/enabled"];
      case 190273197: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 1522185578 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue dtp_max = 193172031 [(.yext.schemapath) = "/radios/radio/state/dtp-max"];
      case 193172031: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 1545376250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dtp_max()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue rx_noise_channel_utilization = 207038796 [(.yext.schemapath) = "/radios/radio/state/rx-noise-channel-utilization"];
      case 207038796: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 1656310370 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rx_noise_channel_utilization()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue id = 216591949 [(.yext.schemapath) = "/radios/radio/state/id"];
      case 216591949: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 1732735594 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue channel = 224195199 [(.yext.schemapath) = "/radios/radio/state/channel"];
      case 224195199: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 1793561594 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_channel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue scanning_dwell_time = 229045678 [(.yext.schemapath) = "/radios/radio/state/scanning-dwell-time"];
      case 229045678: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 1832365426 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scanning_dwell_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue scanning_defer_clients = 235604303 [(.yext.schemapath) = "/radios/radio/state/scanning-defer-clients"];
      case 235604303: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 1884834426 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scanning_defer_clients()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue scanning_defer_traffic = 251179576 [(.yext.schemapath) = "/radios/radio/state/scanning-defer-traffic"];
      case 251179576: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 2009436610 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scanning_defer_traffic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue scanning = 292089383 [(.yext.schemapath) = "/radios/radio/state/scanning"];
      case 292089383: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 2336715066 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scanning()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.IntValue antenna_gain = 294116409 [(.yext.schemapath) = "/radios/radio/state/antenna-gain"];
      case 294116409: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 2352931274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_antenna_gain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue dtp = 298419066 [(.yext.schemapath) = "/radios/radio/state/dtp"];
      case 298419066: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 2387352530 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dtp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue total_channel_utilization = 345472189 [(.yext.schemapath) = "/radios/radio/state/total-channel-utilization"];
      case 345472189: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 2763777514 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_total_channel_utilization()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ywrapper.UintValue allowed_channels = 373743371 [(.yext.schemapath) = "/radios/radio/state/allowed-channels"];
      case 373743371: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 2989946970 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_allowed_channels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue scanning_interval = 397774491 [(.yext.schemapath) = "/radios/radio/state/scanning-interval"];
      case 397774491: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 3182195930 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scanning_interval()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue dfs_hit_time = 451589139 [(.yext.schemapath) = "/radios/radio/state/dfs-hit-time"];
      case 451589139: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 3612713114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dfs_hit_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue dca = 482972730 [(.yext.schemapath) = "/radios/radio/state/dca"];
      case 482972730: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 3863781842 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dca()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_phy.Radios.Radio.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_phy.Radios.Radio.State)
  return false;
#undef DO_
}

void Radios_Radio_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_phy.Radios.Radio.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue transmit_power = 11818902 [(.yext.schemapath) = "/radios/radio/state/transmit-power"];
  if (this->has_transmit_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11818902, *this->transmit_power_, output);
  }

  // .openconfig.openconfig_wifi_phy.Radios.Radio.State.Counters counters = 23007449 [(.yext.schemapath) = "/radios/radio/state/counters"];
  if (this->has_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23007449, *this->counters_, output);
  }

  // .ywrapper.UintValue dtp_min = 58951105 [(.yext.schemapath) = "/radios/radio/state/dtp-min"];
  if (this->has_dtp_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      58951105, *this->dtp_min_, output);
  }

  // .ywrapper.UintValue channel_width = 61632036 [(.yext.schemapath) = "/radios/radio/state/channel-width"];
  if (this->has_channel_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      61632036, *this->channel_width_, output);
  }

  // .ywrapper.StringValue base_radio_mac = 62813897 [(.yext.schemapath) = "/radios/radio/state/base-radio-mac"];
  if (this->has_base_radio_mac()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62813897, *this->base_radio_mac_, output);
  }

  // .ywrapper.UintValue tx_dot11_channel_utilization = 107177407 [(.yext.schemapath) = "/radios/radio/state/tx-dot11-channel-utilization"];
  if (this->has_tx_dot11_channel_utilization()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      107177407, *this->tx_dot11_channel_utilization_, output);
  }

  // .openconfig.enums.OpenconfigWifiTypesCHANGEREASONTYPE channel_change_reason = 119452921 [(.yext.schemapath) = "/radios/radio/state/channel-change-reason"];
  if (this->channel_change_reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      119452921, this->channel_change_reason(), output);
  }

  // .openconfig.enums.OpenconfigWifiTypesOPERATINGFREQUENCY operating_frequency = 131574810 [(.yext.schemapath) = "/radios/radio/state/operating-frequency"];
  if (this->operating_frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      131574810, this->operating_frequency(), output);
  }

  // .ywrapper.UintValue rx_dot11_channel_utilization = 175802841 [(.yext.schemapath) = "/radios/radio/state/rx-dot11-channel-utilization"];
  if (this->has_rx_dot11_channel_utilization()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      175802841, *this->rx_dot11_channel_utilization_, output);
  }

  // .ywrapper.BoolValue enabled = 190273197 [(.yext.schemapath) = "/radios/radio/state/enabled"];
  if (this->has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      190273197, *this->enabled_, output);
  }

  // .ywrapper.UintValue dtp_max = 193172031 [(.yext.schemapath) = "/radios/radio/state/dtp-max"];
  if (this->has_dtp_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      193172031, *this->dtp_max_, output);
  }

  // .ywrapper.UintValue rx_noise_channel_utilization = 207038796 [(.yext.schemapath) = "/radios/radio/state/rx-noise-channel-utilization"];
  if (this->has_rx_noise_channel_utilization()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      207038796, *this->rx_noise_channel_utilization_, output);
  }

  // .ywrapper.UintValue id = 216591949 [(.yext.schemapath) = "/radios/radio/state/id"];
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      216591949, *this->id_, output);
  }

  // .ywrapper.UintValue channel = 224195199 [(.yext.schemapath) = "/radios/radio/state/channel"];
  if (this->has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      224195199, *this->channel_, output);
  }

  // .ywrapper.UintValue scanning_dwell_time = 229045678 [(.yext.schemapath) = "/radios/radio/state/scanning-dwell-time"];
  if (this->has_scanning_dwell_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      229045678, *this->scanning_dwell_time_, output);
  }

  // .ywrapper.UintValue scanning_defer_clients = 235604303 [(.yext.schemapath) = "/radios/radio/state/scanning-defer-clients"];
  if (this->has_scanning_defer_clients()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      235604303, *this->scanning_defer_clients_, output);
  }

  // .ywrapper.BoolValue scanning_defer_traffic = 251179576 [(.yext.schemapath) = "/radios/radio/state/scanning-defer-traffic"];
  if (this->has_scanning_defer_traffic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      251179576, *this->scanning_defer_traffic_, output);
  }

  // .ywrapper.BoolValue scanning = 292089383 [(.yext.schemapath) = "/radios/radio/state/scanning"];
  if (this->has_scanning()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      292089383, *this->scanning_, output);
  }

  // .ywrapper.IntValue antenna_gain = 294116409 [(.yext.schemapath) = "/radios/radio/state/antenna-gain"];
  if (this->has_antenna_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      294116409, *this->antenna_gain_, output);
  }

  // .ywrapper.BoolValue dtp = 298419066 [(.yext.schemapath) = "/radios/radio/state/dtp"];
  if (this->has_dtp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      298419066, *this->dtp_, output);
  }

  // .ywrapper.UintValue total_channel_utilization = 345472189 [(.yext.schemapath) = "/radios/radio/state/total-channel-utilization"];
  if (this->has_total_channel_utilization()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      345472189, *this->total_channel_utilization_, output);
  }

  // repeated .ywrapper.UintValue allowed_channels = 373743371 [(.yext.schemapath) = "/radios/radio/state/allowed-channels"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->allowed_channels_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      373743371, this->allowed_channels(static_cast<int>(i)), output);
  }

  // .ywrapper.UintValue scanning_interval = 397774491 [(.yext.schemapath) = "/radios/radio/state/scanning-interval"];
  if (this->has_scanning_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      397774491, *this->scanning_interval_, output);
  }

  // .ywrapper.UintValue dfs_hit_time = 451589139 [(.yext.schemapath) = "/radios/radio/state/dfs-hit-time"];
  if (this->has_dfs_hit_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      451589139, *this->dfs_hit_time_, output);
  }

  // .ywrapper.BoolValue dca = 482972730 [(.yext.schemapath) = "/radios/radio/state/dca"];
  if (this->has_dca()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      482972730, *this->dca_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_phy.Radios.Radio.State)
}

::google::protobuf::uint8* Radios_Radio_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_phy.Radios.Radio.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue transmit_power = 11818902 [(.yext.schemapath) = "/radios/radio/state/transmit-power"];
  if (this->has_transmit_power()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11818902, *this->transmit_power_, deterministic, target);
  }

  // .openconfig.openconfig_wifi_phy.Radios.Radio.State.Counters counters = 23007449 [(.yext.schemapath) = "/radios/radio/state/counters"];
  if (this->has_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23007449, *this->counters_, deterministic, target);
  }

  // .ywrapper.UintValue dtp_min = 58951105 [(.yext.schemapath) = "/radios/radio/state/dtp-min"];
  if (this->has_dtp_min()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        58951105, *this->dtp_min_, deterministic, target);
  }

  // .ywrapper.UintValue channel_width = 61632036 [(.yext.schemapath) = "/radios/radio/state/channel-width"];
  if (this->has_channel_width()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        61632036, *this->channel_width_, deterministic, target);
  }

  // .ywrapper.StringValue base_radio_mac = 62813897 [(.yext.schemapath) = "/radios/radio/state/base-radio-mac"];
  if (this->has_base_radio_mac()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        62813897, *this->base_radio_mac_, deterministic, target);
  }

  // .ywrapper.UintValue tx_dot11_channel_utilization = 107177407 [(.yext.schemapath) = "/radios/radio/state/tx-dot11-channel-utilization"];
  if (this->has_tx_dot11_channel_utilization()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        107177407, *this->tx_dot11_channel_utilization_, deterministic, target);
  }

  // .openconfig.enums.OpenconfigWifiTypesCHANGEREASONTYPE channel_change_reason = 119452921 [(.yext.schemapath) = "/radios/radio/state/channel-change-reason"];
  if (this->channel_change_reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      119452921, this->channel_change_reason(), target);
  }

  // .openconfig.enums.OpenconfigWifiTypesOPERATINGFREQUENCY operating_frequency = 131574810 [(.yext.schemapath) = "/radios/radio/state/operating-frequency"];
  if (this->operating_frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      131574810, this->operating_frequency(), target);
  }

  // .ywrapper.UintValue rx_dot11_channel_utilization = 175802841 [(.yext.schemapath) = "/radios/radio/state/rx-dot11-channel-utilization"];
  if (this->has_rx_dot11_channel_utilization()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        175802841, *this->rx_dot11_channel_utilization_, deterministic, target);
  }

  // .ywrapper.BoolValue enabled = 190273197 [(.yext.schemapath) = "/radios/radio/state/enabled"];
  if (this->has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        190273197, *this->enabled_, deterministic, target);
  }

  // .ywrapper.UintValue dtp_max = 193172031 [(.yext.schemapath) = "/radios/radio/state/dtp-max"];
  if (this->has_dtp_max()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        193172031, *this->dtp_max_, deterministic, target);
  }

  // .ywrapper.UintValue rx_noise_channel_utilization = 207038796 [(.yext.schemapath) = "/radios/radio/state/rx-noise-channel-utilization"];
  if (this->has_rx_noise_channel_utilization()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        207038796, *this->rx_noise_channel_utilization_, deterministic, target);
  }

  // .ywrapper.UintValue id = 216591949 [(.yext.schemapath) = "/radios/radio/state/id"];
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        216591949, *this->id_, deterministic, target);
  }

  // .ywrapper.UintValue channel = 224195199 [(.yext.schemapath) = "/radios/radio/state/channel"];
  if (this->has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        224195199, *this->channel_, deterministic, target);
  }

  // .ywrapper.UintValue scanning_dwell_time = 229045678 [(.yext.schemapath) = "/radios/radio/state/scanning-dwell-time"];
  if (this->has_scanning_dwell_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        229045678, *this->scanning_dwell_time_, deterministic, target);
  }

  // .ywrapper.UintValue scanning_defer_clients = 235604303 [(.yext.schemapath) = "/radios/radio/state/scanning-defer-clients"];
  if (this->has_scanning_defer_clients()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        235604303, *this->scanning_defer_clients_, deterministic, target);
  }

  // .ywrapper.BoolValue scanning_defer_traffic = 251179576 [(.yext.schemapath) = "/radios/radio/state/scanning-defer-traffic"];
  if (this->has_scanning_defer_traffic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        251179576, *this->scanning_defer_traffic_, deterministic, target);
  }

  // .ywrapper.BoolValue scanning = 292089383 [(.yext.schemapath) = "/radios/radio/state/scanning"];
  if (this->has_scanning()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        292089383, *this->scanning_, deterministic, target);
  }

  // .ywrapper.IntValue antenna_gain = 294116409 [(.yext.schemapath) = "/radios/radio/state/antenna-gain"];
  if (this->has_antenna_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        294116409, *this->antenna_gain_, deterministic, target);
  }

  // .ywrapper.BoolValue dtp = 298419066 [(.yext.schemapath) = "/radios/radio/state/dtp"];
  if (this->has_dtp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        298419066, *this->dtp_, deterministic, target);
  }

  // .ywrapper.UintValue total_channel_utilization = 345472189 [(.yext.schemapath) = "/radios/radio/state/total-channel-utilization"];
  if (this->has_total_channel_utilization()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        345472189, *this->total_channel_utilization_, deterministic, target);
  }

  // repeated .ywrapper.UintValue allowed_channels = 373743371 [(.yext.schemapath) = "/radios/radio/state/allowed-channels"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->allowed_channels_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        373743371, this->allowed_channels(static_cast<int>(i)), deterministic, target);
  }

  // .ywrapper.UintValue scanning_interval = 397774491 [(.yext.schemapath) = "/radios/radio/state/scanning-interval"];
  if (this->has_scanning_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        397774491, *this->scanning_interval_, deterministic, target);
  }

  // .ywrapper.UintValue dfs_hit_time = 451589139 [(.yext.schemapath) = "/radios/radio/state/dfs-hit-time"];
  if (this->has_dfs_hit_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        451589139, *this->dfs_hit_time_, deterministic, target);
  }

  // .ywrapper.BoolValue dca = 482972730 [(.yext.schemapath) = "/radios/radio/state/dca"];
  if (this->has_dca()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        482972730, *this->dca_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_phy.Radios.Radio.State)
  return target;
}

size_t Radios_Radio_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_phy.Radios.Radio.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .ywrapper.UintValue allowed_channels = 373743371 [(.yext.schemapath) = "/radios/radio/state/allowed-channels"];
  {
    unsigned int count = static_cast<unsigned int>(this->allowed_channels_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->allowed_channels(static_cast<int>(i)));
    }
  }

  // .ywrapper.UintValue transmit_power = 11818902 [(.yext.schemapath) = "/radios/radio/state/transmit-power"];
  if (this->has_transmit_power()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->transmit_power_);
  }

  // .openconfig.openconfig_wifi_phy.Radios.Radio.State.Counters counters = 23007449 [(.yext.schemapath) = "/radios/radio/state/counters"];
  if (this->has_counters()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->counters_);
  }

  // .ywrapper.UintValue dtp_min = 58951105 [(.yext.schemapath) = "/radios/radio/state/dtp-min"];
  if (this->has_dtp_min()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dtp_min_);
  }

  // .ywrapper.UintValue channel_width = 61632036 [(.yext.schemapath) = "/radios/radio/state/channel-width"];
  if (this->has_channel_width()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->channel_width_);
  }

  // .ywrapper.StringValue base_radio_mac = 62813897 [(.yext.schemapath) = "/radios/radio/state/base-radio-mac"];
  if (this->has_base_radio_mac()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->base_radio_mac_);
  }

  // .ywrapper.UintValue tx_dot11_channel_utilization = 107177407 [(.yext.schemapath) = "/radios/radio/state/tx-dot11-channel-utilization"];
  if (this->has_tx_dot11_channel_utilization()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tx_dot11_channel_utilization_);
  }

  // .ywrapper.UintValue rx_dot11_channel_utilization = 175802841 [(.yext.schemapath) = "/radios/radio/state/rx-dot11-channel-utilization"];
  if (this->has_rx_dot11_channel_utilization()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rx_dot11_channel_utilization_);
  }

  // .ywrapper.BoolValue enabled = 190273197 [(.yext.schemapath) = "/radios/radio/state/enabled"];
  if (this->has_enabled()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->enabled_);
  }

  // .ywrapper.UintValue dtp_max = 193172031 [(.yext.schemapath) = "/radios/radio/state/dtp-max"];
  if (this->has_dtp_max()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dtp_max_);
  }

  // .ywrapper.UintValue rx_noise_channel_utilization = 207038796 [(.yext.schemapath) = "/radios/radio/state/rx-noise-channel-utilization"];
  if (this->has_rx_noise_channel_utilization()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rx_noise_channel_utilization_);
  }

  // .ywrapper.UintValue id = 216591949 [(.yext.schemapath) = "/radios/radio/state/id"];
  if (this->has_id()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->id_);
  }

  // .ywrapper.UintValue channel = 224195199 [(.yext.schemapath) = "/radios/radio/state/channel"];
  if (this->has_channel()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->channel_);
  }

  // .ywrapper.UintValue scanning_dwell_time = 229045678 [(.yext.schemapath) = "/radios/radio/state/scanning-dwell-time"];
  if (this->has_scanning_dwell_time()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->scanning_dwell_time_);
  }

  // .ywrapper.UintValue scanning_defer_clients = 235604303 [(.yext.schemapath) = "/radios/radio/state/scanning-defer-clients"];
  if (this->has_scanning_defer_clients()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->scanning_defer_clients_);
  }

  // .ywrapper.BoolValue scanning_defer_traffic = 251179576 [(.yext.schemapath) = "/radios/radio/state/scanning-defer-traffic"];
  if (this->has_scanning_defer_traffic()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->scanning_defer_traffic_);
  }

  // .ywrapper.BoolValue scanning = 292089383 [(.yext.schemapath) = "/radios/radio/state/scanning"];
  if (this->has_scanning()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->scanning_);
  }

  // .ywrapper.IntValue antenna_gain = 294116409 [(.yext.schemapath) = "/radios/radio/state/antenna-gain"];
  if (this->has_antenna_gain()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->antenna_gain_);
  }

  // .ywrapper.BoolValue dtp = 298419066 [(.yext.schemapath) = "/radios/radio/state/dtp"];
  if (this->has_dtp()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dtp_);
  }

  // .ywrapper.UintValue total_channel_utilization = 345472189 [(.yext.schemapath) = "/radios/radio/state/total-channel-utilization"];
  if (this->has_total_channel_utilization()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->total_channel_utilization_);
  }

  // .ywrapper.UintValue scanning_interval = 397774491 [(.yext.schemapath) = "/radios/radio/state/scanning-interval"];
  if (this->has_scanning_interval()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->scanning_interval_);
  }

  // .ywrapper.UintValue dfs_hit_time = 451589139 [(.yext.schemapath) = "/radios/radio/state/dfs-hit-time"];
  if (this->has_dfs_hit_time()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dfs_hit_time_);
  }

  // .ywrapper.BoolValue dca = 482972730 [(.yext.schemapath) = "/radios/radio/state/dca"];
  if (this->has_dca()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dca_);
  }

  // .openconfig.enums.OpenconfigWifiTypesCHANGEREASONTYPE channel_change_reason = 119452921 [(.yext.schemapath) = "/radios/radio/state/channel-change-reason"];
  if (this->channel_change_reason() != 0) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel_change_reason());
  }

  // .openconfig.enums.OpenconfigWifiTypesOPERATINGFREQUENCY operating_frequency = 131574810 [(.yext.schemapath) = "/radios/radio/state/operating-frequency"];
  if (this->operating_frequency() != 0) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operating_frequency());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Radios_Radio_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_phy.Radios.Radio.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Radios_Radio_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Radios_Radio_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_phy.Radios.Radio.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_phy.Radios.Radio.State)
    MergeFrom(*source);
  }
}

void Radios_Radio_State::MergeFrom(const Radios_Radio_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_phy.Radios.Radio.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allowed_channels_.MergeFrom(from.allowed_channels_);
  if (from.has_transmit_power()) {
    mutable_transmit_power()->::ywrapper::UintValue::MergeFrom(from.transmit_power());
  }
  if (from.has_counters()) {
    mutable_counters()->::openconfig::openconfig_wifi_phy::Radios_Radio_State_Counters::MergeFrom(from.counters());
  }
  if (from.has_dtp_min()) {
    mutable_dtp_min()->::ywrapper::UintValue::MergeFrom(from.dtp_min());
  }
  if (from.has_channel_width()) {
    mutable_channel_width()->::ywrapper::UintValue::MergeFrom(from.channel_width());
  }
  if (from.has_base_radio_mac()) {
    mutable_base_radio_mac()->::ywrapper::StringValue::MergeFrom(from.base_radio_mac());
  }
  if (from.has_tx_dot11_channel_utilization()) {
    mutable_tx_dot11_channel_utilization()->::ywrapper::UintValue::MergeFrom(from.tx_dot11_channel_utilization());
  }
  if (from.has_rx_dot11_channel_utilization()) {
    mutable_rx_dot11_channel_utilization()->::ywrapper::UintValue::MergeFrom(from.rx_dot11_channel_utilization());
  }
  if (from.has_enabled()) {
    mutable_enabled()->::ywrapper::BoolValue::MergeFrom(from.enabled());
  }
  if (from.has_dtp_max()) {
    mutable_dtp_max()->::ywrapper::UintValue::MergeFrom(from.dtp_max());
  }
  if (from.has_rx_noise_channel_utilization()) {
    mutable_rx_noise_channel_utilization()->::ywrapper::UintValue::MergeFrom(from.rx_noise_channel_utilization());
  }
  if (from.has_id()) {
    mutable_id()->::ywrapper::UintValue::MergeFrom(from.id());
  }
  if (from.has_channel()) {
    mutable_channel()->::ywrapper::UintValue::MergeFrom(from.channel());
  }
  if (from.has_scanning_dwell_time()) {
    mutable_scanning_dwell_time()->::ywrapper::UintValue::MergeFrom(from.scanning_dwell_time());
  }
  if (from.has_scanning_defer_clients()) {
    mutable_scanning_defer_clients()->::ywrapper::UintValue::MergeFrom(from.scanning_defer_clients());
  }
  if (from.has_scanning_defer_traffic()) {
    mutable_scanning_defer_traffic()->::ywrapper::BoolValue::MergeFrom(from.scanning_defer_traffic());
  }
  if (from.has_scanning()) {
    mutable_scanning()->::ywrapper::BoolValue::MergeFrom(from.scanning());
  }
  if (from.has_antenna_gain()) {
    mutable_antenna_gain()->::ywrapper::IntValue::MergeFrom(from.antenna_gain());
  }
  if (from.has_dtp()) {
    mutable_dtp()->::ywrapper::BoolValue::MergeFrom(from.dtp());
  }
  if (from.has_total_channel_utilization()) {
    mutable_total_channel_utilization()->::ywrapper::UintValue::MergeFrom(from.total_channel_utilization());
  }
  if (from.has_scanning_interval()) {
    mutable_scanning_interval()->::ywrapper::UintValue::MergeFrom(from.scanning_interval());
  }
  if (from.has_dfs_hit_time()) {
    mutable_dfs_hit_time()->::ywrapper::UintValue::MergeFrom(from.dfs_hit_time());
  }
  if (from.has_dca()) {
    mutable_dca()->::ywrapper::BoolValue::MergeFrom(from.dca());
  }
  if (from.channel_change_reason() != 0) {
    set_channel_change_reason(from.channel_change_reason());
  }
  if (from.operating_frequency() != 0) {
    set_operating_frequency(from.operating_frequency());
  }
}

void Radios_Radio_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_phy.Radios.Radio.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Radios_Radio_State::CopyFrom(const Radios_Radio_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_phy.Radios.Radio.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Radios_Radio_State::IsInitialized() const {
  return true;
}

void Radios_Radio_State::Swap(Radios_Radio_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Radios_Radio_State::InternalSwap(Radios_Radio_State* other) {
  using std::swap;
  allowed_channels_.InternalSwap(&other->allowed_channels_);
  swap(transmit_power_, other->transmit_power_);
  swap(counters_, other->counters_);
  swap(dtp_min_, other->dtp_min_);
  swap(channel_width_, other->channel_width_);
  swap(base_radio_mac_, other->base_radio_mac_);
  swap(tx_dot11_channel_utilization_, other->tx_dot11_channel_utilization_);
  swap(rx_dot11_channel_utilization_, other->rx_dot11_channel_utilization_);
  swap(enabled_, other->enabled_);
  swap(dtp_max_, other->dtp_max_);
  swap(rx_noise_channel_utilization_, other->rx_noise_channel_utilization_);
  swap(id_, other->id_);
  swap(channel_, other->channel_);
  swap(scanning_dwell_time_, other->scanning_dwell_time_);
  swap(scanning_defer_clients_, other->scanning_defer_clients_);
  swap(scanning_defer_traffic_, other->scanning_defer_traffic_);
  swap(scanning_, other->scanning_);
  swap(antenna_gain_, other->antenna_gain_);
  swap(dtp_, other->dtp_);
  swap(total_channel_utilization_, other->total_channel_utilization_);
  swap(scanning_interval_, other->scanning_interval_);
  swap(dfs_hit_time_, other->dfs_hit_time_);
  swap(dca_, other->dca_);
  swap(channel_change_reason_, other->channel_change_reason_);
  swap(operating_frequency_, other->operating_frequency_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Radios_Radio_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Radios_Radio::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_wifi_phy::Radios_Radio_Config*>(
      ::openconfig::openconfig_wifi_phy::Radios_Radio_Config::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_default_instance_._instance.get_mutable()->neighbors_ = const_cast< ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors*>(
      ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors::internal_default_instance());
  ::openconfig::openconfig_wifi_phy::_Radios_Radio_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_wifi_phy::Radios_Radio_State*>(
      ::openconfig::openconfig_wifi_phy::Radios_Radio_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Radios_Radio::kConfigFieldNumber;
const int Radios_Radio::kNeighborsFieldNumber;
const int Radios_Radio::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Radios_Radio::Radios_Radio()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::InitDefaultsRadios_Radio();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_phy.Radios.Radio)
}
Radios_Radio::Radios_Radio(const Radios_Radio& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_wifi_phy::Radios_Radio_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_neighbors()) {
    neighbors_ = new ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors(*from.neighbors_);
  } else {
    neighbors_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_wifi_phy::Radios_Radio_State(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_phy.Radios.Radio)
}

void Radios_Radio::SharedCtor() {
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&config_)) + sizeof(state_));
  _cached_size_ = 0;
}

Radios_Radio::~Radios_Radio() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_phy.Radios.Radio)
  SharedDtor();
}

void Radios_Radio::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete neighbors_;
  if (this != internal_default_instance()) delete state_;
}

void Radios_Radio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Radios_Radio::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Radios_Radio& Radios_Radio::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::InitDefaultsRadios_Radio();
  return *internal_default_instance();
}

Radios_Radio* Radios_Radio::New(::google::protobuf::Arena* arena) const {
  Radios_Radio* n = new Radios_Radio;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Radios_Radio::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_phy.Radios.Radio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && neighbors_ != NULL) {
    delete neighbors_;
  }
  neighbors_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool Radios_Radio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_phy.Radios.Radio)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3716606298u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_wifi_phy.Radios.Radio.Config config = 25073214 [(.yext.schemapath) = "/radios/radio/config"];
      case 25073214: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 200585714 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors neighbors = 225641045 [(.yext.schemapath) = "/radios/radio/neighbors"];
      case 225641045: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 1805128362 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_neighbors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_wifi_phy.Radios.Radio.State state = 464575787 [(.yext.schemapath) = "/radios/radio/state"];
      case 464575787: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 3716606298 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_phy.Radios.Radio)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_phy.Radios.Radio)
  return false;
#undef DO_
}

void Radios_Radio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_phy.Radios.Radio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_wifi_phy.Radios.Radio.Config config = 25073214 [(.yext.schemapath) = "/radios/radio/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25073214, *this->config_, output);
  }

  // .openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors neighbors = 225641045 [(.yext.schemapath) = "/radios/radio/neighbors"];
  if (this->has_neighbors()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      225641045, *this->neighbors_, output);
  }

  // .openconfig.openconfig_wifi_phy.Radios.Radio.State state = 464575787 [(.yext.schemapath) = "/radios/radio/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      464575787, *this->state_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_phy.Radios.Radio)
}

::google::protobuf::uint8* Radios_Radio::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_phy.Radios.Radio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_wifi_phy.Radios.Radio.Config config = 25073214 [(.yext.schemapath) = "/radios/radio/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25073214, *this->config_, deterministic, target);
  }

  // .openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors neighbors = 225641045 [(.yext.schemapath) = "/radios/radio/neighbors"];
  if (this->has_neighbors()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        225641045, *this->neighbors_, deterministic, target);
  }

  // .openconfig.openconfig_wifi_phy.Radios.Radio.State state = 464575787 [(.yext.schemapath) = "/radios/radio/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        464575787, *this->state_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_phy.Radios.Radio)
  return target;
}

size_t Radios_Radio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_phy.Radios.Radio)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_wifi_phy.Radios.Radio.Config config = 25073214 [(.yext.schemapath) = "/radios/radio/config"];
  if (this->has_config()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  // .openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors neighbors = 225641045 [(.yext.schemapath) = "/radios/radio/neighbors"];
  if (this->has_neighbors()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->neighbors_);
  }

  // .openconfig.openconfig_wifi_phy.Radios.Radio.State state = 464575787 [(.yext.schemapath) = "/radios/radio/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Radios_Radio::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_phy.Radios.Radio)
  GOOGLE_DCHECK_NE(&from, this);
  const Radios_Radio* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Radios_Radio>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_phy.Radios.Radio)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_phy.Radios.Radio)
    MergeFrom(*source);
  }
}

void Radios_Radio::MergeFrom(const Radios_Radio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_phy.Radios.Radio)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_wifi_phy::Radios_Radio_Config::MergeFrom(from.config());
  }
  if (from.has_neighbors()) {
    mutable_neighbors()->::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors::MergeFrom(from.neighbors());
  }
  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_wifi_phy::Radios_Radio_State::MergeFrom(from.state());
  }
}

void Radios_Radio::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_phy.Radios.Radio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Radios_Radio::CopyFrom(const Radios_Radio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_phy.Radios.Radio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Radios_Radio::IsInitialized() const {
  return true;
}

void Radios_Radio::Swap(Radios_Radio* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Radios_Radio::InternalSwap(Radios_Radio* other) {
  using std::swap;
  swap(config_, other->config_);
  swap(neighbors_, other->neighbors_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Radios_Radio::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Radios_RadioKey::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_phy::_Radios_RadioKey_default_instance_._instance.get_mutable()->radio_ = const_cast< ::openconfig::openconfig_wifi_phy::Radios_Radio*>(
      ::openconfig::openconfig_wifi_phy::Radios_Radio::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Radios_RadioKey::kIdFieldNumber;
const int Radios_RadioKey::kRadioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Radios_RadioKey::Radios_RadioKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::InitDefaultsRadios_RadioKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_phy.Radios.RadioKey)
}
Radios_RadioKey::Radios_RadioKey(const Radios_RadioKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_radio()) {
    radio_ = new ::openconfig::openconfig_wifi_phy::Radios_Radio(*from.radio_);
  } else {
    radio_ = NULL;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_phy.Radios.RadioKey)
}

void Radios_RadioKey::SharedCtor() {
  ::memset(&radio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&radio_)) + sizeof(id_));
  _cached_size_ = 0;
}

Radios_RadioKey::~Radios_RadioKey() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_phy.Radios.RadioKey)
  SharedDtor();
}

void Radios_RadioKey::SharedDtor() {
  if (this != internal_default_instance()) delete radio_;
}

void Radios_RadioKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Radios_RadioKey::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Radios_RadioKey& Radios_RadioKey::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::InitDefaultsRadios_RadioKey();
  return *internal_default_instance();
}

Radios_RadioKey* Radios_RadioKey::New(::google::protobuf::Arena* arena) const {
  Radios_RadioKey* n = new Radios_RadioKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Radios_RadioKey::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_phy.Radios.RadioKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && radio_ != NULL) {
    delete radio_;
  }
  radio_ = NULL;
  id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool Radios_RadioKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_phy.Radios.RadioKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 id = 1 [(.yext.schemapath) = "/radios/radio/id"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_wifi_phy.Radios.Radio radio = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_radio()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_phy.Radios.RadioKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_phy.Radios.RadioKey)
  return false;
#undef DO_
}

void Radios_RadioKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_phy.Radios.RadioKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1 [(.yext.schemapath) = "/radios/radio/id"];
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // .openconfig.openconfig_wifi_phy.Radios.Radio radio = 2;
  if (this->has_radio()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->radio_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_phy.Radios.RadioKey)
}

::google::protobuf::uint8* Radios_RadioKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_phy.Radios.RadioKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1 [(.yext.schemapath) = "/radios/radio/id"];
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // .openconfig.openconfig_wifi_phy.Radios.Radio radio = 2;
  if (this->has_radio()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->radio_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_phy.Radios.RadioKey)
  return target;
}

size_t Radios_RadioKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_phy.Radios.RadioKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_wifi_phy.Radios.Radio radio = 2;
  if (this->has_radio()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->radio_);
  }

  // uint64 id = 1 [(.yext.schemapath) = "/radios/radio/id"];
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Radios_RadioKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_phy.Radios.RadioKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Radios_RadioKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Radios_RadioKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_phy.Radios.RadioKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_phy.Radios.RadioKey)
    MergeFrom(*source);
  }
}

void Radios_RadioKey::MergeFrom(const Radios_RadioKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_phy.Radios.RadioKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_radio()) {
    mutable_radio()->::openconfig::openconfig_wifi_phy::Radios_Radio::MergeFrom(from.radio());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void Radios_RadioKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_phy.Radios.RadioKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Radios_RadioKey::CopyFrom(const Radios_RadioKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_phy.Radios.RadioKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Radios_RadioKey::IsInitialized() const {
  return true;
}

void Radios_RadioKey::Swap(Radios_RadioKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Radios_RadioKey::InternalSwap(Radios_RadioKey* other) {
  using std::swap;
  swap(radio_, other->radio_);
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Radios_RadioKey::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Radios::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Radios::kRadioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Radios::Radios()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::InitDefaultsRadios();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_phy.Radios)
}
Radios::Radios(const Radios& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      radio_(from.radio_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_phy.Radios)
}

void Radios::SharedCtor() {
  _cached_size_ = 0;
}

Radios::~Radios() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_phy.Radios)
  SharedDtor();
}

void Radios::SharedDtor() {
}

void Radios::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Radios::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Radios& Radios::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::InitDefaultsRadios();
  return *internal_default_instance();
}

Radios* Radios::New(::google::protobuf::Arena* arena) const {
  Radios* n = new Radios;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Radios::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_phy.Radios)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  radio_.Clear();
  _internal_metadata_.Clear();
}

bool Radios::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_phy.Radios)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4065667658u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .openconfig.openconfig_wifi_phy.Radios.RadioKey radio = 508208457 [(.yext.schemapath) = "/radios/radio"];
      case 508208457: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 4065667658 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_radio()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_phy.Radios)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_phy.Radios)
  return false;
#undef DO_
}

void Radios::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_phy.Radios)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_wifi_phy.Radios.RadioKey radio = 508208457 [(.yext.schemapath) = "/radios/radio"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->radio_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      508208457, this->radio(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_phy.Radios)
}

::google::protobuf::uint8* Radios::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_phy.Radios)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_wifi_phy.Radios.RadioKey radio = 508208457 [(.yext.schemapath) = "/radios/radio"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->radio_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        508208457, this->radio(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_phy.Radios)
  return target;
}

size_t Radios::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_phy.Radios)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .openconfig.openconfig_wifi_phy.Radios.RadioKey radio = 508208457 [(.yext.schemapath) = "/radios/radio"];
  {
    unsigned int count = static_cast<unsigned int>(this->radio_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->radio(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Radios::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_phy.Radios)
  GOOGLE_DCHECK_NE(&from, this);
  const Radios* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Radios>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_phy.Radios)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_phy.Radios)
    MergeFrom(*source);
  }
}

void Radios::MergeFrom(const Radios& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_phy.Radios)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  radio_.MergeFrom(from.radio_);
}

void Radios::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_phy.Radios)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Radios::CopyFrom(const Radios& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_phy.Radios)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Radios::IsInitialized() const {
  return true;
}

void Radios::Swap(Radios* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Radios::InternalSwap(Radios* other) {
  using std::swap;
  radio_.InternalSwap(&other->radio_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Radios::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace openconfig_wifi_phy
}  // namespace openconfig

// @@protoc_insertion_point(global_scope)
