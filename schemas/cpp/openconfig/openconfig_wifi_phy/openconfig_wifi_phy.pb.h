// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openconfig/openconfig_wifi_phy/openconfig_wifi_phy.proto

#ifndef PROTOBUF_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto__INCLUDED
#define PROTOBUF_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "github.com/openconfig/ygot/proto/ywrapper/ywrapper.pb.h"
#include "github.com/openconfig/ygot/proto/yext/yext.pb.h"
#include "openconfig/enums/enums.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsRadios_Radio_ConfigImpl();
void InitDefaultsRadios_Radio_Config();
void InitDefaultsRadios_Radio_Neighbors_Neighbor_StateImpl();
void InitDefaultsRadios_Radio_Neighbors_Neighbor_State();
void InitDefaultsRadios_Radio_Neighbors_NeighborImpl();
void InitDefaultsRadios_Radio_Neighbors_Neighbor();
void InitDefaultsRadios_Radio_Neighbors_NeighborKeyImpl();
void InitDefaultsRadios_Radio_Neighbors_NeighborKey();
void InitDefaultsRadios_Radio_NeighborsImpl();
void InitDefaultsRadios_Radio_Neighbors();
void InitDefaultsRadios_Radio_State_CountersImpl();
void InitDefaultsRadios_Radio_State_Counters();
void InitDefaultsRadios_Radio_StateImpl();
void InitDefaultsRadios_Radio_State();
void InitDefaultsRadios_RadioImpl();
void InitDefaultsRadios_Radio();
void InitDefaultsRadios_RadioKeyImpl();
void InitDefaultsRadios_RadioKey();
void InitDefaultsRadiosImpl();
void InitDefaultsRadios();
inline void InitDefaults() {
  InitDefaultsRadios_Radio_Config();
  InitDefaultsRadios_Radio_Neighbors_Neighbor_State();
  InitDefaultsRadios_Radio_Neighbors_Neighbor();
  InitDefaultsRadios_Radio_Neighbors_NeighborKey();
  InitDefaultsRadios_Radio_Neighbors();
  InitDefaultsRadios_Radio_State_Counters();
  InitDefaultsRadios_Radio_State();
  InitDefaultsRadios_Radio();
  InitDefaultsRadios_RadioKey();
  InitDefaultsRadios();
}
}  // namespace protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto
namespace openconfig {
namespace openconfig_wifi_phy {
class Radios;
class RadiosDefaultTypeInternal;
extern RadiosDefaultTypeInternal _Radios_default_instance_;
class Radios_Radio;
class Radios_RadioDefaultTypeInternal;
extern Radios_RadioDefaultTypeInternal _Radios_Radio_default_instance_;
class Radios_RadioKey;
class Radios_RadioKeyDefaultTypeInternal;
extern Radios_RadioKeyDefaultTypeInternal _Radios_RadioKey_default_instance_;
class Radios_Radio_Config;
class Radios_Radio_ConfigDefaultTypeInternal;
extern Radios_Radio_ConfigDefaultTypeInternal _Radios_Radio_Config_default_instance_;
class Radios_Radio_Neighbors;
class Radios_Radio_NeighborsDefaultTypeInternal;
extern Radios_Radio_NeighborsDefaultTypeInternal _Radios_Radio_Neighbors_default_instance_;
class Radios_Radio_Neighbors_Neighbor;
class Radios_Radio_Neighbors_NeighborDefaultTypeInternal;
extern Radios_Radio_Neighbors_NeighborDefaultTypeInternal _Radios_Radio_Neighbors_Neighbor_default_instance_;
class Radios_Radio_Neighbors_NeighborKey;
class Radios_Radio_Neighbors_NeighborKeyDefaultTypeInternal;
extern Radios_Radio_Neighbors_NeighborKeyDefaultTypeInternal _Radios_Radio_Neighbors_NeighborKey_default_instance_;
class Radios_Radio_Neighbors_Neighbor_State;
class Radios_Radio_Neighbors_Neighbor_StateDefaultTypeInternal;
extern Radios_Radio_Neighbors_Neighbor_StateDefaultTypeInternal _Radios_Radio_Neighbors_Neighbor_State_default_instance_;
class Radios_Radio_State;
class Radios_Radio_StateDefaultTypeInternal;
extern Radios_Radio_StateDefaultTypeInternal _Radios_Radio_State_default_instance_;
class Radios_Radio_State_Counters;
class Radios_Radio_State_CountersDefaultTypeInternal;
extern Radios_Radio_State_CountersDefaultTypeInternal _Radios_Radio_State_Counters_default_instance_;
}  // namespace openconfig_wifi_phy
}  // namespace openconfig
namespace openconfig {
namespace openconfig_wifi_phy {

// ===================================================================

class Radios_Radio_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_phy.Radios.Radio.Config) */ {
 public:
  Radios_Radio_Config();
  virtual ~Radios_Radio_Config();

  Radios_Radio_Config(const Radios_Radio_Config& from);

  inline Radios_Radio_Config& operator=(const Radios_Radio_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Radios_Radio_Config(Radios_Radio_Config&& from) noexcept
    : Radios_Radio_Config() {
    *this = ::std::move(from);
  }

  inline Radios_Radio_Config& operator=(Radios_Radio_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Radios_Radio_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Radios_Radio_Config* internal_default_instance() {
    return reinterpret_cast<const Radios_Radio_Config*>(
               &_Radios_Radio_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Radios_Radio_Config* other);
  friend void swap(Radios_Radio_Config& a, Radios_Radio_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Radios_Radio_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Radios_Radio_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Radios_Radio_Config& from);
  void MergeFrom(const Radios_Radio_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Radios_Radio_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ywrapper.UintValue allowed_channels = 287461692 [(.yext.schemapath) = "/radios/radio/config/allowed-channels"];
  int allowed_channels_size() const;
  void clear_allowed_channels();
  static const int kAllowedChannelsFieldNumber = 287461692;
  const ::ywrapper::UintValue& allowed_channels(int index) const;
  ::ywrapper::UintValue* mutable_allowed_channels(int index);
  ::ywrapper::UintValue* add_allowed_channels();
  ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >*
      mutable_allowed_channels();
  const ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >&
      allowed_channels() const;

  // .ywrapper.UintValue scanning_dwell_time = 72370243 [(.yext.schemapath) = "/radios/radio/config/scanning-dwell-time"];
  bool has_scanning_dwell_time() const;
  void clear_scanning_dwell_time();
  static const int kScanningDwellTimeFieldNumber = 72370243;
  const ::ywrapper::UintValue& scanning_dwell_time() const;
  ::ywrapper::UintValue* release_scanning_dwell_time();
  ::ywrapper::UintValue* mutable_scanning_dwell_time();
  void set_allocated_scanning_dwell_time(::ywrapper::UintValue* scanning_dwell_time);

  // .ywrapper.UintValue scanning_defer_clients = 94483184 [(.yext.schemapath) = "/radios/radio/config/scanning-defer-clients"];
  bool has_scanning_defer_clients() const;
  void clear_scanning_defer_clients();
  static const int kScanningDeferClientsFieldNumber = 94483184;
  const ::ywrapper::UintValue& scanning_defer_clients() const;
  ::ywrapper::UintValue* release_scanning_defer_clients();
  ::ywrapper::UintValue* mutable_scanning_defer_clients();
  void set_allocated_scanning_defer_clients(::ywrapper::UintValue* scanning_defer_clients);

  // .ywrapper.UintValue channel_width = 110498113 [(.yext.schemapath) = "/radios/radio/config/channel-width"];
  bool has_channel_width() const;
  void clear_channel_width();
  static const int kChannelWidthFieldNumber = 110498113;
  const ::ywrapper::UintValue& channel_width() const;
  ::ywrapper::UintValue* release_channel_width();
  ::ywrapper::UintValue* mutable_channel_width();
  void set_allocated_channel_width(::ywrapper::UintValue* channel_width);

  // .ywrapper.UintValue dtp_max = 133217130 [(.yext.schemapath) = "/radios/radio/config/dtp-max"];
  bool has_dtp_max() const;
  void clear_dtp_max();
  static const int kDtpMaxFieldNumber = 133217130;
  const ::ywrapper::UintValue& dtp_max() const;
  ::ywrapper::UintValue* release_dtp_max();
  ::ywrapper::UintValue* mutable_dtp_max();
  void set_allocated_dtp_max(::ywrapper::UintValue* dtp_max);

  // .ywrapper.IntValue antenna_gain = 136773194 [(.yext.schemapath) = "/radios/radio/config/antenna-gain"];
  bool has_antenna_gain() const;
  void clear_antenna_gain();
  static const int kAntennaGainFieldNumber = 136773194;
  const ::ywrapper::IntValue& antenna_gain() const;
  ::ywrapper::IntValue* release_antenna_gain();
  ::ywrapper::IntValue* mutable_antenna_gain();
  void set_allocated_antenna_gain(::ywrapper::IntValue* antenna_gain);

  // .ywrapper.UintValue transmit_power = 144254149 [(.yext.schemapath) = "/radios/radio/config/transmit-power"];
  bool has_transmit_power() const;
  void clear_transmit_power();
  static const int kTransmitPowerFieldNumber = 144254149;
  const ::ywrapper::UintValue& transmit_power() const;
  ::ywrapper::UintValue* release_transmit_power();
  ::ywrapper::UintValue* mutable_transmit_power();
  void set_allocated_transmit_power(::ywrapper::UintValue* transmit_power);

  // .ywrapper.BoolValue scanning = 181136512 [(.yext.schemapath) = "/radios/radio/config/scanning"];
  bool has_scanning() const;
  void clear_scanning();
  static const int kScanningFieldNumber = 181136512;
  const ::ywrapper::BoolValue& scanning() const;
  ::ywrapper::BoolValue* release_scanning();
  ::ywrapper::BoolValue* mutable_scanning();
  void set_allocated_scanning(::ywrapper::BoolValue* scanning);

  // .ywrapper.UintValue id = 203006358 [(.yext.schemapath) = "/radios/radio/config/id"];
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 203006358;
  const ::ywrapper::UintValue& id() const;
  ::ywrapper::UintValue* release_id();
  ::ywrapper::UintValue* mutable_id();
  void set_allocated_id(::ywrapper::UintValue* id);

  // .ywrapper.UintValue channel = 240795514 [(.yext.schemapath) = "/radios/radio/config/channel"];
  bool has_channel() const;
  void clear_channel();
  static const int kChannelFieldNumber = 240795514;
  const ::ywrapper::UintValue& channel() const;
  ::ywrapper::UintValue* release_channel();
  ::ywrapper::UintValue* mutable_channel();
  void set_allocated_channel(::ywrapper::UintValue* channel);

  // .ywrapper.UintValue dtp_min = 267438020 [(.yext.schemapath) = "/radios/radio/config/dtp-min"];
  bool has_dtp_min() const;
  void clear_dtp_min();
  static const int kDtpMinFieldNumber = 267438020;
  const ::ywrapper::UintValue& dtp_min() const;
  ::ywrapper::UintValue* release_dtp_min();
  ::ywrapper::UintValue* mutable_dtp_min();
  void set_allocated_dtp_min(::ywrapper::UintValue* dtp_min);

  // .ywrapper.BoolValue dtp = 275123919 [(.yext.schemapath) = "/radios/radio/config/dtp"];
  bool has_dtp() const;
  void clear_dtp();
  static const int kDtpFieldNumber = 275123919;
  const ::ywrapper::BoolValue& dtp() const;
  ::ywrapper::BoolValue* release_dtp();
  ::ywrapper::BoolValue* mutable_dtp();
  void set_allocated_dtp(::ywrapper::BoolValue* dtp);

  // .ywrapper.BoolValue scanning_defer_traffic = 319636767 [(.yext.schemapath) = "/radios/radio/config/scanning-defer-traffic"];
  bool has_scanning_defer_traffic() const;
  void clear_scanning_defer_traffic();
  static const int kScanningDeferTrafficFieldNumber = 319636767;
  const ::ywrapper::BoolValue& scanning_defer_traffic() const;
  ::ywrapper::BoolValue* release_scanning_defer_traffic();
  ::ywrapper::BoolValue* mutable_scanning_defer_traffic();
  void set_allocated_scanning_defer_traffic(::ywrapper::BoolValue* scanning_defer_traffic);

  // .ywrapper.BoolValue enabled = 344574108 [(.yext.schemapath) = "/radios/radio/config/enabled"];
  bool has_enabled() const;
  void clear_enabled();
  static const int kEnabledFieldNumber = 344574108;
  const ::ywrapper::BoolValue& enabled() const;
  ::ywrapper::BoolValue* release_enabled();
  ::ywrapper::BoolValue* mutable_enabled();
  void set_allocated_enabled(::ywrapper::BoolValue* enabled);

  // .ywrapper.BoolValue dca = 493232983 [(.yext.schemapath) = "/radios/radio/config/dca"];
  bool has_dca() const;
  void clear_dca();
  static const int kDcaFieldNumber = 493232983;
  const ::ywrapper::BoolValue& dca() const;
  ::ywrapper::BoolValue* release_dca();
  ::ywrapper::BoolValue* mutable_dca();
  void set_allocated_dca(::ywrapper::BoolValue* dca);

  // .ywrapper.UintValue scanning_interval = 522281730 [(.yext.schemapath) = "/radios/radio/config/scanning-interval"];
  bool has_scanning_interval() const;
  void clear_scanning_interval();
  static const int kScanningIntervalFieldNumber = 522281730;
  const ::ywrapper::UintValue& scanning_interval() const;
  ::ywrapper::UintValue* release_scanning_interval();
  ::ywrapper::UintValue* mutable_scanning_interval();
  void set_allocated_scanning_interval(::ywrapper::UintValue* scanning_interval);

  // .openconfig.enums.OpenconfigWifiTypesOPERATINGFREQUENCY operating_frequency = 163366295 [(.yext.schemapath) = "/radios/radio/config/operating-frequency"];
  void clear_operating_frequency();
  static const int kOperatingFrequencyFieldNumber = 163366295;
  ::openconfig::enums::OpenconfigWifiTypesOPERATINGFREQUENCY operating_frequency() const;
  void set_operating_frequency(::openconfig::enums::OpenconfigWifiTypesOPERATINGFREQUENCY value);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_phy.Radios.Radio.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue > allowed_channels_;
  ::ywrapper::UintValue* scanning_dwell_time_;
  ::ywrapper::UintValue* scanning_defer_clients_;
  ::ywrapper::UintValue* channel_width_;
  ::ywrapper::UintValue* dtp_max_;
  ::ywrapper::IntValue* antenna_gain_;
  ::ywrapper::UintValue* transmit_power_;
  ::ywrapper::BoolValue* scanning_;
  ::ywrapper::UintValue* id_;
  ::ywrapper::UintValue* channel_;
  ::ywrapper::UintValue* dtp_min_;
  ::ywrapper::BoolValue* dtp_;
  ::ywrapper::BoolValue* scanning_defer_traffic_;
  ::ywrapper::BoolValue* enabled_;
  ::ywrapper::BoolValue* dca_;
  ::ywrapper::UintValue* scanning_interval_;
  int operating_frequency_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::InitDefaultsRadios_Radio_ConfigImpl();
};
// -------------------------------------------------------------------

class Radios_Radio_Neighbors_Neighbor_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State) */ {
 public:
  Radios_Radio_Neighbors_Neighbor_State();
  virtual ~Radios_Radio_Neighbors_Neighbor_State();

  Radios_Radio_Neighbors_Neighbor_State(const Radios_Radio_Neighbors_Neighbor_State& from);

  inline Radios_Radio_Neighbors_Neighbor_State& operator=(const Radios_Radio_Neighbors_Neighbor_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Radios_Radio_Neighbors_Neighbor_State(Radios_Radio_Neighbors_Neighbor_State&& from) noexcept
    : Radios_Radio_Neighbors_Neighbor_State() {
    *this = ::std::move(from);
  }

  inline Radios_Radio_Neighbors_Neighbor_State& operator=(Radios_Radio_Neighbors_Neighbor_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Radios_Radio_Neighbors_Neighbor_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Radios_Radio_Neighbors_Neighbor_State* internal_default_instance() {
    return reinterpret_cast<const Radios_Radio_Neighbors_Neighbor_State*>(
               &_Radios_Radio_Neighbors_Neighbor_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Radios_Radio_Neighbors_Neighbor_State* other);
  friend void swap(Radios_Radio_Neighbors_Neighbor_State& a, Radios_Radio_Neighbors_Neighbor_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Radios_Radio_Neighbors_Neighbor_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Radios_Radio_Neighbors_Neighbor_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Radios_Radio_Neighbors_Neighbor_State& from);
  void MergeFrom(const Radios_Radio_Neighbors_Neighbor_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Radios_Radio_Neighbors_Neighbor_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue last_seen = 231383841 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state/last-seen"];
  bool has_last_seen() const;
  void clear_last_seen();
  static const int kLastSeenFieldNumber = 231383841;
  const ::ywrapper::UintValue& last_seen() const;
  ::ywrapper::UintValue* release_last_seen();
  ::ywrapper::UintValue* mutable_last_seen();
  void set_allocated_last_seen(::ywrapper::UintValue* last_seen);

  // .ywrapper.StringValue ssid = 240710930 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state/ssid"];
  bool has_ssid() const;
  void clear_ssid();
  static const int kSsidFieldNumber = 240710930;
  const ::ywrapper::StringValue& ssid() const;
  ::ywrapper::StringValue* release_ssid();
  ::ywrapper::StringValue* mutable_ssid();
  void set_allocated_ssid(::ywrapper::StringValue* ssid);

  // .ywrapper.StringValue bssid = 263931714 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state/bssid"];
  bool has_bssid() const;
  void clear_bssid();
  static const int kBssidFieldNumber = 263931714;
  const ::ywrapper::StringValue& bssid() const;
  ::ywrapper::StringValue* release_bssid();
  ::ywrapper::StringValue* mutable_bssid();
  void set_allocated_bssid(::ywrapper::StringValue* bssid);

  // .ywrapper.UintValue channel = 266073572 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state/channel"];
  bool has_channel() const;
  void clear_channel();
  static const int kChannelFieldNumber = 266073572;
  const ::ywrapper::UintValue& channel() const;
  ::ywrapper::UintValue* release_channel();
  ::ywrapper::UintValue* mutable_channel();
  void set_allocated_channel(::ywrapper::UintValue* channel);

  // .ywrapper.UintValue primary_channel = 269323997 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state/primary-channel"];
  bool has_primary_channel() const;
  void clear_primary_channel();
  static const int kPrimaryChannelFieldNumber = 269323997;
  const ::ywrapper::UintValue& primary_channel() const;
  ::ywrapper::UintValue* release_primary_channel();
  ::ywrapper::UintValue* mutable_primary_channel();
  void set_allocated_primary_channel(::ywrapper::UintValue* primary_channel);

  // .ywrapper.IntValue rssi = 284470482 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state/rssi"];
  bool has_rssi() const;
  void clear_rssi();
  static const int kRssiFieldNumber = 284470482;
  const ::ywrapper::IntValue& rssi() const;
  ::ywrapper::IntValue* release_rssi();
  ::ywrapper::IntValue* mutable_rssi();
  void set_allocated_rssi(::ywrapper::IntValue* rssi);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* last_seen_;
  ::ywrapper::StringValue* ssid_;
  ::ywrapper::StringValue* bssid_;
  ::ywrapper::UintValue* channel_;
  ::ywrapper::UintValue* primary_channel_;
  ::ywrapper::IntValue* rssi_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::InitDefaultsRadios_Radio_Neighbors_Neighbor_StateImpl();
};
// -------------------------------------------------------------------

class Radios_Radio_Neighbors_Neighbor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor) */ {
 public:
  Radios_Radio_Neighbors_Neighbor();
  virtual ~Radios_Radio_Neighbors_Neighbor();

  Radios_Radio_Neighbors_Neighbor(const Radios_Radio_Neighbors_Neighbor& from);

  inline Radios_Radio_Neighbors_Neighbor& operator=(const Radios_Radio_Neighbors_Neighbor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Radios_Radio_Neighbors_Neighbor(Radios_Radio_Neighbors_Neighbor&& from) noexcept
    : Radios_Radio_Neighbors_Neighbor() {
    *this = ::std::move(from);
  }

  inline Radios_Radio_Neighbors_Neighbor& operator=(Radios_Radio_Neighbors_Neighbor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Radios_Radio_Neighbors_Neighbor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Radios_Radio_Neighbors_Neighbor* internal_default_instance() {
    return reinterpret_cast<const Radios_Radio_Neighbors_Neighbor*>(
               &_Radios_Radio_Neighbors_Neighbor_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Radios_Radio_Neighbors_Neighbor* other);
  friend void swap(Radios_Radio_Neighbors_Neighbor& a, Radios_Radio_Neighbors_Neighbor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Radios_Radio_Neighbors_Neighbor* New() const PROTOBUF_FINAL { return New(NULL); }

  Radios_Radio_Neighbors_Neighbor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Radios_Radio_Neighbors_Neighbor& from);
  void MergeFrom(const Radios_Radio_Neighbors_Neighbor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Radios_Radio_Neighbors_Neighbor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Radios_Radio_Neighbors_Neighbor_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State state = 170068704 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 170068704;
  const ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor_State& state() const;
  ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor_State* release_state();
  ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor_State* state);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor_State* state_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::InitDefaultsRadios_Radio_Neighbors_NeighborImpl();
};
// -------------------------------------------------------------------

class Radios_Radio_Neighbors_NeighborKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey) */ {
 public:
  Radios_Radio_Neighbors_NeighborKey();
  virtual ~Radios_Radio_Neighbors_NeighborKey();

  Radios_Radio_Neighbors_NeighborKey(const Radios_Radio_Neighbors_NeighborKey& from);

  inline Radios_Radio_Neighbors_NeighborKey& operator=(const Radios_Radio_Neighbors_NeighborKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Radios_Radio_Neighbors_NeighborKey(Radios_Radio_Neighbors_NeighborKey&& from) noexcept
    : Radios_Radio_Neighbors_NeighborKey() {
    *this = ::std::move(from);
  }

  inline Radios_Radio_Neighbors_NeighborKey& operator=(Radios_Radio_Neighbors_NeighborKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Radios_Radio_Neighbors_NeighborKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Radios_Radio_Neighbors_NeighborKey* internal_default_instance() {
    return reinterpret_cast<const Radios_Radio_Neighbors_NeighborKey*>(
               &_Radios_Radio_Neighbors_NeighborKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Radios_Radio_Neighbors_NeighborKey* other);
  friend void swap(Radios_Radio_Neighbors_NeighborKey& a, Radios_Radio_Neighbors_NeighborKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Radios_Radio_Neighbors_NeighborKey* New() const PROTOBUF_FINAL { return New(NULL); }

  Radios_Radio_Neighbors_NeighborKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Radios_Radio_Neighbors_NeighborKey& from);
  void MergeFrom(const Radios_Radio_Neighbors_NeighborKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Radios_Radio_Neighbors_NeighborKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string bssid = 1 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/bssid"];
  void clear_bssid();
  static const int kBssidFieldNumber = 1;
  const ::std::string& bssid() const;
  void set_bssid(const ::std::string& value);
  #if LANG_CXX11
  void set_bssid(::std::string&& value);
  #endif
  void set_bssid(const char* value);
  void set_bssid(const char* value, size_t size);
  ::std::string* mutable_bssid();
  ::std::string* release_bssid();
  void set_allocated_bssid(::std::string* bssid);

  // .openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor neighbor = 2;
  bool has_neighbor() const;
  void clear_neighbor();
  static const int kNeighborFieldNumber = 2;
  const ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor& neighbor() const;
  ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor* release_neighbor();
  ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor* mutable_neighbor();
  void set_allocated_neighbor(::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor* neighbor);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr bssid_;
  ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor* neighbor_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::InitDefaultsRadios_Radio_Neighbors_NeighborKeyImpl();
};
// -------------------------------------------------------------------

class Radios_Radio_Neighbors : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors) */ {
 public:
  Radios_Radio_Neighbors();
  virtual ~Radios_Radio_Neighbors();

  Radios_Radio_Neighbors(const Radios_Radio_Neighbors& from);

  inline Radios_Radio_Neighbors& operator=(const Radios_Radio_Neighbors& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Radios_Radio_Neighbors(Radios_Radio_Neighbors&& from) noexcept
    : Radios_Radio_Neighbors() {
    *this = ::std::move(from);
  }

  inline Radios_Radio_Neighbors& operator=(Radios_Radio_Neighbors&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Radios_Radio_Neighbors& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Radios_Radio_Neighbors* internal_default_instance() {
    return reinterpret_cast<const Radios_Radio_Neighbors*>(
               &_Radios_Radio_Neighbors_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Radios_Radio_Neighbors* other);
  friend void swap(Radios_Radio_Neighbors& a, Radios_Radio_Neighbors& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Radios_Radio_Neighbors* New() const PROTOBUF_FINAL { return New(NULL); }

  Radios_Radio_Neighbors* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Radios_Radio_Neighbors& from);
  void MergeFrom(const Radios_Radio_Neighbors& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Radios_Radio_Neighbors* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Radios_Radio_Neighbors_Neighbor Neighbor;
  typedef Radios_Radio_Neighbors_NeighborKey NeighborKey;

  // accessors -------------------------------------------------------

  // repeated .openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey neighbor = 529834398 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor"];
  int neighbor_size() const;
  void clear_neighbor();
  static const int kNeighborFieldNumber = 529834398;
  const ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_NeighborKey& neighbor(int index) const;
  ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_NeighborKey* mutable_neighbor(int index);
  ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_NeighborKey* add_neighbor();
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_NeighborKey >*
      mutable_neighbor();
  const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_NeighborKey >&
      neighbor() const;

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_NeighborKey > neighbor_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::InitDefaultsRadios_Radio_NeighborsImpl();
};
// -------------------------------------------------------------------

class Radios_Radio_State_Counters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_phy.Radios.Radio.State.Counters) */ {
 public:
  Radios_Radio_State_Counters();
  virtual ~Radios_Radio_State_Counters();

  Radios_Radio_State_Counters(const Radios_Radio_State_Counters& from);

  inline Radios_Radio_State_Counters& operator=(const Radios_Radio_State_Counters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Radios_Radio_State_Counters(Radios_Radio_State_Counters&& from) noexcept
    : Radios_Radio_State_Counters() {
    *this = ::std::move(from);
  }

  inline Radios_Radio_State_Counters& operator=(Radios_Radio_State_Counters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Radios_Radio_State_Counters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Radios_Radio_State_Counters* internal_default_instance() {
    return reinterpret_cast<const Radios_Radio_State_Counters*>(
               &_Radios_Radio_State_Counters_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Radios_Radio_State_Counters* other);
  friend void swap(Radios_Radio_State_Counters& a, Radios_Radio_State_Counters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Radios_Radio_State_Counters* New() const PROTOBUF_FINAL { return New(NULL); }

  Radios_Radio_State_Counters* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Radios_Radio_State_Counters& from);
  void MergeFrom(const Radios_Radio_State_Counters& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Radios_Radio_State_Counters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.IntValue noise_floor = 305481331 [(.yext.schemapath) = "/radios/radio/state/counters/noise-floor"];
  bool has_noise_floor() const;
  void clear_noise_floor();
  static const int kNoiseFloorFieldNumber = 305481331;
  const ::ywrapper::IntValue& noise_floor() const;
  ::ywrapper::IntValue* release_noise_floor();
  ::ywrapper::IntValue* mutable_noise_floor();
  void set_allocated_noise_floor(::ywrapper::IntValue* noise_floor);

  // .ywrapper.UintValue failed_fcs_frames = 362574451 [(.yext.schemapath) = "/radios/radio/state/counters/failed-fcs-frames"];
  bool has_failed_fcs_frames() const;
  void clear_failed_fcs_frames();
  static const int kFailedFcsFramesFieldNumber = 362574451;
  const ::ywrapper::UintValue& failed_fcs_frames() const;
  ::ywrapper::UintValue* release_failed_fcs_frames();
  ::ywrapper::UintValue* mutable_failed_fcs_frames();
  void set_allocated_failed_fcs_frames(::ywrapper::UintValue* failed_fcs_frames);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_phy.Radios.Radio.State.Counters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::IntValue* noise_floor_;
  ::ywrapper::UintValue* failed_fcs_frames_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::InitDefaultsRadios_Radio_State_CountersImpl();
};
// -------------------------------------------------------------------

class Radios_Radio_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_phy.Radios.Radio.State) */ {
 public:
  Radios_Radio_State();
  virtual ~Radios_Radio_State();

  Radios_Radio_State(const Radios_Radio_State& from);

  inline Radios_Radio_State& operator=(const Radios_Radio_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Radios_Radio_State(Radios_Radio_State&& from) noexcept
    : Radios_Radio_State() {
    *this = ::std::move(from);
  }

  inline Radios_Radio_State& operator=(Radios_Radio_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Radios_Radio_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Radios_Radio_State* internal_default_instance() {
    return reinterpret_cast<const Radios_Radio_State*>(
               &_Radios_Radio_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Radios_Radio_State* other);
  friend void swap(Radios_Radio_State& a, Radios_Radio_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Radios_Radio_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Radios_Radio_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Radios_Radio_State& from);
  void MergeFrom(const Radios_Radio_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Radios_Radio_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Radios_Radio_State_Counters Counters;

  // accessors -------------------------------------------------------

  // repeated .ywrapper.UintValue allowed_channels = 373743371 [(.yext.schemapath) = "/radios/radio/state/allowed-channels"];
  int allowed_channels_size() const;
  void clear_allowed_channels();
  static const int kAllowedChannelsFieldNumber = 373743371;
  const ::ywrapper::UintValue& allowed_channels(int index) const;
  ::ywrapper::UintValue* mutable_allowed_channels(int index);
  ::ywrapper::UintValue* add_allowed_channels();
  ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >*
      mutable_allowed_channels();
  const ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >&
      allowed_channels() const;

  // .ywrapper.UintValue transmit_power = 11818902 [(.yext.schemapath) = "/radios/radio/state/transmit-power"];
  bool has_transmit_power() const;
  void clear_transmit_power();
  static const int kTransmitPowerFieldNumber = 11818902;
  const ::ywrapper::UintValue& transmit_power() const;
  ::ywrapper::UintValue* release_transmit_power();
  ::ywrapper::UintValue* mutable_transmit_power();
  void set_allocated_transmit_power(::ywrapper::UintValue* transmit_power);

  // .openconfig.openconfig_wifi_phy.Radios.Radio.State.Counters counters = 23007449 [(.yext.schemapath) = "/radios/radio/state/counters"];
  bool has_counters() const;
  void clear_counters();
  static const int kCountersFieldNumber = 23007449;
  const ::openconfig::openconfig_wifi_phy::Radios_Radio_State_Counters& counters() const;
  ::openconfig::openconfig_wifi_phy::Radios_Radio_State_Counters* release_counters();
  ::openconfig::openconfig_wifi_phy::Radios_Radio_State_Counters* mutable_counters();
  void set_allocated_counters(::openconfig::openconfig_wifi_phy::Radios_Radio_State_Counters* counters);

  // .ywrapper.UintValue dtp_min = 58951105 [(.yext.schemapath) = "/radios/radio/state/dtp-min"];
  bool has_dtp_min() const;
  void clear_dtp_min();
  static const int kDtpMinFieldNumber = 58951105;
  const ::ywrapper::UintValue& dtp_min() const;
  ::ywrapper::UintValue* release_dtp_min();
  ::ywrapper::UintValue* mutable_dtp_min();
  void set_allocated_dtp_min(::ywrapper::UintValue* dtp_min);

  // .ywrapper.UintValue channel_width = 61632036 [(.yext.schemapath) = "/radios/radio/state/channel-width"];
  bool has_channel_width() const;
  void clear_channel_width();
  static const int kChannelWidthFieldNumber = 61632036;
  const ::ywrapper::UintValue& channel_width() const;
  ::ywrapper::UintValue* release_channel_width();
  ::ywrapper::UintValue* mutable_channel_width();
  void set_allocated_channel_width(::ywrapper::UintValue* channel_width);

  // .ywrapper.StringValue base_radio_mac = 62813897 [(.yext.schemapath) = "/radios/radio/state/base-radio-mac"];
  bool has_base_radio_mac() const;
  void clear_base_radio_mac();
  static const int kBaseRadioMacFieldNumber = 62813897;
  const ::ywrapper::StringValue& base_radio_mac() const;
  ::ywrapper::StringValue* release_base_radio_mac();
  ::ywrapper::StringValue* mutable_base_radio_mac();
  void set_allocated_base_radio_mac(::ywrapper::StringValue* base_radio_mac);

  // .ywrapper.UintValue tx_dot11_channel_utilization = 107177407 [(.yext.schemapath) = "/radios/radio/state/tx-dot11-channel-utilization"];
  bool has_tx_dot11_channel_utilization() const;
  void clear_tx_dot11_channel_utilization();
  static const int kTxDot11ChannelUtilizationFieldNumber = 107177407;
  const ::ywrapper::UintValue& tx_dot11_channel_utilization() const;
  ::ywrapper::UintValue* release_tx_dot11_channel_utilization();
  ::ywrapper::UintValue* mutable_tx_dot11_channel_utilization();
  void set_allocated_tx_dot11_channel_utilization(::ywrapper::UintValue* tx_dot11_channel_utilization);

  // .ywrapper.UintValue rx_dot11_channel_utilization = 175802841 [(.yext.schemapath) = "/radios/radio/state/rx-dot11-channel-utilization"];
  bool has_rx_dot11_channel_utilization() const;
  void clear_rx_dot11_channel_utilization();
  static const int kRxDot11ChannelUtilizationFieldNumber = 175802841;
  const ::ywrapper::UintValue& rx_dot11_channel_utilization() const;
  ::ywrapper::UintValue* release_rx_dot11_channel_utilization();
  ::ywrapper::UintValue* mutable_rx_dot11_channel_utilization();
  void set_allocated_rx_dot11_channel_utilization(::ywrapper::UintValue* rx_dot11_channel_utilization);

  // .ywrapper.BoolValue enabled = 190273197 [(.yext.schemapath) = "/radios/radio/state/enabled"];
  bool has_enabled() const;
  void clear_enabled();
  static const int kEnabledFieldNumber = 190273197;
  const ::ywrapper::BoolValue& enabled() const;
  ::ywrapper::BoolValue* release_enabled();
  ::ywrapper::BoolValue* mutable_enabled();
  void set_allocated_enabled(::ywrapper::BoolValue* enabled);

  // .ywrapper.UintValue dtp_max = 193172031 [(.yext.schemapath) = "/radios/radio/state/dtp-max"];
  bool has_dtp_max() const;
  void clear_dtp_max();
  static const int kDtpMaxFieldNumber = 193172031;
  const ::ywrapper::UintValue& dtp_max() const;
  ::ywrapper::UintValue* release_dtp_max();
  ::ywrapper::UintValue* mutable_dtp_max();
  void set_allocated_dtp_max(::ywrapper::UintValue* dtp_max);

  // .ywrapper.UintValue rx_noise_channel_utilization = 207038796 [(.yext.schemapath) = "/radios/radio/state/rx-noise-channel-utilization"];
  bool has_rx_noise_channel_utilization() const;
  void clear_rx_noise_channel_utilization();
  static const int kRxNoiseChannelUtilizationFieldNumber = 207038796;
  const ::ywrapper::UintValue& rx_noise_channel_utilization() const;
  ::ywrapper::UintValue* release_rx_noise_channel_utilization();
  ::ywrapper::UintValue* mutable_rx_noise_channel_utilization();
  void set_allocated_rx_noise_channel_utilization(::ywrapper::UintValue* rx_noise_channel_utilization);

  // .ywrapper.UintValue id = 216591949 [(.yext.schemapath) = "/radios/radio/state/id"];
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 216591949;
  const ::ywrapper::UintValue& id() const;
  ::ywrapper::UintValue* release_id();
  ::ywrapper::UintValue* mutable_id();
  void set_allocated_id(::ywrapper::UintValue* id);

  // .ywrapper.UintValue channel = 224195199 [(.yext.schemapath) = "/radios/radio/state/channel"];
  bool has_channel() const;
  void clear_channel();
  static const int kChannelFieldNumber = 224195199;
  const ::ywrapper::UintValue& channel() const;
  ::ywrapper::UintValue* release_channel();
  ::ywrapper::UintValue* mutable_channel();
  void set_allocated_channel(::ywrapper::UintValue* channel);

  // .ywrapper.UintValue scanning_dwell_time = 229045678 [(.yext.schemapath) = "/radios/radio/state/scanning-dwell-time"];
  bool has_scanning_dwell_time() const;
  void clear_scanning_dwell_time();
  static const int kScanningDwellTimeFieldNumber = 229045678;
  const ::ywrapper::UintValue& scanning_dwell_time() const;
  ::ywrapper::UintValue* release_scanning_dwell_time();
  ::ywrapper::UintValue* mutable_scanning_dwell_time();
  void set_allocated_scanning_dwell_time(::ywrapper::UintValue* scanning_dwell_time);

  // .ywrapper.UintValue scanning_defer_clients = 235604303 [(.yext.schemapath) = "/radios/radio/state/scanning-defer-clients"];
  bool has_scanning_defer_clients() const;
  void clear_scanning_defer_clients();
  static const int kScanningDeferClientsFieldNumber = 235604303;
  const ::ywrapper::UintValue& scanning_defer_clients() const;
  ::ywrapper::UintValue* release_scanning_defer_clients();
  ::ywrapper::UintValue* mutable_scanning_defer_clients();
  void set_allocated_scanning_defer_clients(::ywrapper::UintValue* scanning_defer_clients);

  // .ywrapper.BoolValue scanning_defer_traffic = 251179576 [(.yext.schemapath) = "/radios/radio/state/scanning-defer-traffic"];
  bool has_scanning_defer_traffic() const;
  void clear_scanning_defer_traffic();
  static const int kScanningDeferTrafficFieldNumber = 251179576;
  const ::ywrapper::BoolValue& scanning_defer_traffic() const;
  ::ywrapper::BoolValue* release_scanning_defer_traffic();
  ::ywrapper::BoolValue* mutable_scanning_defer_traffic();
  void set_allocated_scanning_defer_traffic(::ywrapper::BoolValue* scanning_defer_traffic);

  // .ywrapper.BoolValue scanning = 292089383 [(.yext.schemapath) = "/radios/radio/state/scanning"];
  bool has_scanning() const;
  void clear_scanning();
  static const int kScanningFieldNumber = 292089383;
  const ::ywrapper::BoolValue& scanning() const;
  ::ywrapper::BoolValue* release_scanning();
  ::ywrapper::BoolValue* mutable_scanning();
  void set_allocated_scanning(::ywrapper::BoolValue* scanning);

  // .ywrapper.IntValue antenna_gain = 294116409 [(.yext.schemapath) = "/radios/radio/state/antenna-gain"];
  bool has_antenna_gain() const;
  void clear_antenna_gain();
  static const int kAntennaGainFieldNumber = 294116409;
  const ::ywrapper::IntValue& antenna_gain() const;
  ::ywrapper::IntValue* release_antenna_gain();
  ::ywrapper::IntValue* mutable_antenna_gain();
  void set_allocated_antenna_gain(::ywrapper::IntValue* antenna_gain);

  // .ywrapper.BoolValue dtp = 298419066 [(.yext.schemapath) = "/radios/radio/state/dtp"];
  bool has_dtp() const;
  void clear_dtp();
  static const int kDtpFieldNumber = 298419066;
  const ::ywrapper::BoolValue& dtp() const;
  ::ywrapper::BoolValue* release_dtp();
  ::ywrapper::BoolValue* mutable_dtp();
  void set_allocated_dtp(::ywrapper::BoolValue* dtp);

  // .ywrapper.UintValue total_channel_utilization = 345472189 [(.yext.schemapath) = "/radios/radio/state/total-channel-utilization"];
  bool has_total_channel_utilization() const;
  void clear_total_channel_utilization();
  static const int kTotalChannelUtilizationFieldNumber = 345472189;
  const ::ywrapper::UintValue& total_channel_utilization() const;
  ::ywrapper::UintValue* release_total_channel_utilization();
  ::ywrapper::UintValue* mutable_total_channel_utilization();
  void set_allocated_total_channel_utilization(::ywrapper::UintValue* total_channel_utilization);

  // .ywrapper.UintValue scanning_interval = 397774491 [(.yext.schemapath) = "/radios/radio/state/scanning-interval"];
  bool has_scanning_interval() const;
  void clear_scanning_interval();
  static const int kScanningIntervalFieldNumber = 397774491;
  const ::ywrapper::UintValue& scanning_interval() const;
  ::ywrapper::UintValue* release_scanning_interval();
  ::ywrapper::UintValue* mutable_scanning_interval();
  void set_allocated_scanning_interval(::ywrapper::UintValue* scanning_interval);

  // .ywrapper.UintValue dfs_hit_time = 451589139 [(.yext.schemapath) = "/radios/radio/state/dfs-hit-time"];
  bool has_dfs_hit_time() const;
  void clear_dfs_hit_time();
  static const int kDfsHitTimeFieldNumber = 451589139;
  const ::ywrapper::UintValue& dfs_hit_time() const;
  ::ywrapper::UintValue* release_dfs_hit_time();
  ::ywrapper::UintValue* mutable_dfs_hit_time();
  void set_allocated_dfs_hit_time(::ywrapper::UintValue* dfs_hit_time);

  // .ywrapper.BoolValue dca = 482972730 [(.yext.schemapath) = "/radios/radio/state/dca"];
  bool has_dca() const;
  void clear_dca();
  static const int kDcaFieldNumber = 482972730;
  const ::ywrapper::BoolValue& dca() const;
  ::ywrapper::BoolValue* release_dca();
  ::ywrapper::BoolValue* mutable_dca();
  void set_allocated_dca(::ywrapper::BoolValue* dca);

  // .openconfig.enums.OpenconfigWifiTypesCHANGEREASONTYPE channel_change_reason = 119452921 [(.yext.schemapath) = "/radios/radio/state/channel-change-reason"];
  void clear_channel_change_reason();
  static const int kChannelChangeReasonFieldNumber = 119452921;
  ::openconfig::enums::OpenconfigWifiTypesCHANGEREASONTYPE channel_change_reason() const;
  void set_channel_change_reason(::openconfig::enums::OpenconfigWifiTypesCHANGEREASONTYPE value);

  // .openconfig.enums.OpenconfigWifiTypesOPERATINGFREQUENCY operating_frequency = 131574810 [(.yext.schemapath) = "/radios/radio/state/operating-frequency"];
  void clear_operating_frequency();
  static const int kOperatingFrequencyFieldNumber = 131574810;
  ::openconfig::enums::OpenconfigWifiTypesOPERATINGFREQUENCY operating_frequency() const;
  void set_operating_frequency(::openconfig::enums::OpenconfigWifiTypesOPERATINGFREQUENCY value);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_phy.Radios.Radio.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue > allowed_channels_;
  ::ywrapper::UintValue* transmit_power_;
  ::openconfig::openconfig_wifi_phy::Radios_Radio_State_Counters* counters_;
  ::ywrapper::UintValue* dtp_min_;
  ::ywrapper::UintValue* channel_width_;
  ::ywrapper::StringValue* base_radio_mac_;
  ::ywrapper::UintValue* tx_dot11_channel_utilization_;
  ::ywrapper::UintValue* rx_dot11_channel_utilization_;
  ::ywrapper::BoolValue* enabled_;
  ::ywrapper::UintValue* dtp_max_;
  ::ywrapper::UintValue* rx_noise_channel_utilization_;
  ::ywrapper::UintValue* id_;
  ::ywrapper::UintValue* channel_;
  ::ywrapper::UintValue* scanning_dwell_time_;
  ::ywrapper::UintValue* scanning_defer_clients_;
  ::ywrapper::BoolValue* scanning_defer_traffic_;
  ::ywrapper::BoolValue* scanning_;
  ::ywrapper::IntValue* antenna_gain_;
  ::ywrapper::BoolValue* dtp_;
  ::ywrapper::UintValue* total_channel_utilization_;
  ::ywrapper::UintValue* scanning_interval_;
  ::ywrapper::UintValue* dfs_hit_time_;
  ::ywrapper::BoolValue* dca_;
  int channel_change_reason_;
  int operating_frequency_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::InitDefaultsRadios_Radio_StateImpl();
};
// -------------------------------------------------------------------

class Radios_Radio : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_phy.Radios.Radio) */ {
 public:
  Radios_Radio();
  virtual ~Radios_Radio();

  Radios_Radio(const Radios_Radio& from);

  inline Radios_Radio& operator=(const Radios_Radio& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Radios_Radio(Radios_Radio&& from) noexcept
    : Radios_Radio() {
    *this = ::std::move(from);
  }

  inline Radios_Radio& operator=(Radios_Radio&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Radios_Radio& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Radios_Radio* internal_default_instance() {
    return reinterpret_cast<const Radios_Radio*>(
               &_Radios_Radio_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Radios_Radio* other);
  friend void swap(Radios_Radio& a, Radios_Radio& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Radios_Radio* New() const PROTOBUF_FINAL { return New(NULL); }

  Radios_Radio* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Radios_Radio& from);
  void MergeFrom(const Radios_Radio& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Radios_Radio* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Radios_Radio_Config Config;
  typedef Radios_Radio_Neighbors Neighbors;
  typedef Radios_Radio_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_wifi_phy.Radios.Radio.Config config = 25073214 [(.yext.schemapath) = "/radios/radio/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 25073214;
  const ::openconfig::openconfig_wifi_phy::Radios_Radio_Config& config() const;
  ::openconfig::openconfig_wifi_phy::Radios_Radio_Config* release_config();
  ::openconfig::openconfig_wifi_phy::Radios_Radio_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_wifi_phy::Radios_Radio_Config* config);

  // .openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors neighbors = 225641045 [(.yext.schemapath) = "/radios/radio/neighbors"];
  bool has_neighbors() const;
  void clear_neighbors();
  static const int kNeighborsFieldNumber = 225641045;
  const ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors& neighbors() const;
  ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors* release_neighbors();
  ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors* mutable_neighbors();
  void set_allocated_neighbors(::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors* neighbors);

  // .openconfig.openconfig_wifi_phy.Radios.Radio.State state = 464575787 [(.yext.schemapath) = "/radios/radio/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 464575787;
  const ::openconfig::openconfig_wifi_phy::Radios_Radio_State& state() const;
  ::openconfig::openconfig_wifi_phy::Radios_Radio_State* release_state();
  ::openconfig::openconfig_wifi_phy::Radios_Radio_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_wifi_phy::Radios_Radio_State* state);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_phy.Radios.Radio)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_wifi_phy::Radios_Radio_Config* config_;
  ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors* neighbors_;
  ::openconfig::openconfig_wifi_phy::Radios_Radio_State* state_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::InitDefaultsRadios_RadioImpl();
};
// -------------------------------------------------------------------

class Radios_RadioKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_phy.Radios.RadioKey) */ {
 public:
  Radios_RadioKey();
  virtual ~Radios_RadioKey();

  Radios_RadioKey(const Radios_RadioKey& from);

  inline Radios_RadioKey& operator=(const Radios_RadioKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Radios_RadioKey(Radios_RadioKey&& from) noexcept
    : Radios_RadioKey() {
    *this = ::std::move(from);
  }

  inline Radios_RadioKey& operator=(Radios_RadioKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Radios_RadioKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Radios_RadioKey* internal_default_instance() {
    return reinterpret_cast<const Radios_RadioKey*>(
               &_Radios_RadioKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(Radios_RadioKey* other);
  friend void swap(Radios_RadioKey& a, Radios_RadioKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Radios_RadioKey* New() const PROTOBUF_FINAL { return New(NULL); }

  Radios_RadioKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Radios_RadioKey& from);
  void MergeFrom(const Radios_RadioKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Radios_RadioKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_wifi_phy.Radios.Radio radio = 2;
  bool has_radio() const;
  void clear_radio();
  static const int kRadioFieldNumber = 2;
  const ::openconfig::openconfig_wifi_phy::Radios_Radio& radio() const;
  ::openconfig::openconfig_wifi_phy::Radios_Radio* release_radio();
  ::openconfig::openconfig_wifi_phy::Radios_Radio* mutable_radio();
  void set_allocated_radio(::openconfig::openconfig_wifi_phy::Radios_Radio* radio);

  // uint64 id = 1 [(.yext.schemapath) = "/radios/radio/id"];
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_phy.Radios.RadioKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_wifi_phy::Radios_Radio* radio_;
  ::google::protobuf::uint64 id_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::InitDefaultsRadios_RadioKeyImpl();
};
// -------------------------------------------------------------------

class Radios : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_phy.Radios) */ {
 public:
  Radios();
  virtual ~Radios();

  Radios(const Radios& from);

  inline Radios& operator=(const Radios& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Radios(Radios&& from) noexcept
    : Radios() {
    *this = ::std::move(from);
  }

  inline Radios& operator=(Radios&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Radios& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Radios* internal_default_instance() {
    return reinterpret_cast<const Radios*>(
               &_Radios_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(Radios* other);
  friend void swap(Radios& a, Radios& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Radios* New() const PROTOBUF_FINAL { return New(NULL); }

  Radios* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Radios& from);
  void MergeFrom(const Radios& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Radios* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Radios_Radio Radio;
  typedef Radios_RadioKey RadioKey;

  // accessors -------------------------------------------------------

  // repeated .openconfig.openconfig_wifi_phy.Radios.RadioKey radio = 508208457 [(.yext.schemapath) = "/radios/radio"];
  int radio_size() const;
  void clear_radio();
  static const int kRadioFieldNumber = 508208457;
  const ::openconfig::openconfig_wifi_phy::Radios_RadioKey& radio(int index) const;
  ::openconfig::openconfig_wifi_phy::Radios_RadioKey* mutable_radio(int index);
  ::openconfig::openconfig_wifi_phy::Radios_RadioKey* add_radio();
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_wifi_phy::Radios_RadioKey >*
      mutable_radio();
  const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_wifi_phy::Radios_RadioKey >&
      radio() const;

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_phy.Radios)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_wifi_phy::Radios_RadioKey > radio_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto::InitDefaultsRadiosImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Radios_Radio_Config

// repeated .ywrapper.UintValue allowed_channels = 287461692 [(.yext.schemapath) = "/radios/radio/config/allowed-channels"];
inline int Radios_Radio_Config::allowed_channels_size() const {
  return allowed_channels_.size();
}
inline const ::ywrapper::UintValue& Radios_Radio_Config::allowed_channels(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.Config.allowed_channels)
  return allowed_channels_.Get(index);
}
inline ::ywrapper::UintValue* Radios_Radio_Config::mutable_allowed_channels(int index) {
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.Config.allowed_channels)
  return allowed_channels_.Mutable(index);
}
inline ::ywrapper::UintValue* Radios_Radio_Config::add_allowed_channels() {
  // @@protoc_insertion_point(field_add:openconfig.openconfig_wifi_phy.Radios.Radio.Config.allowed_channels)
  return allowed_channels_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >*
Radios_Radio_Config::mutable_allowed_channels() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_wifi_phy.Radios.Radio.Config.allowed_channels)
  return &allowed_channels_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >&
Radios_Radio_Config::allowed_channels() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_wifi_phy.Radios.Radio.Config.allowed_channels)
  return allowed_channels_;
}

// .ywrapper.IntValue antenna_gain = 136773194 [(.yext.schemapath) = "/radios/radio/config/antenna-gain"];
inline bool Radios_Radio_Config::has_antenna_gain() const {
  return this != internal_default_instance() && antenna_gain_ != NULL;
}
inline const ::ywrapper::IntValue& Radios_Radio_Config::antenna_gain() const {
  const ::ywrapper::IntValue* p = antenna_gain_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.Config.antenna_gain)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::IntValue*>(
      &::ywrapper::_IntValue_default_instance_);
}
inline ::ywrapper::IntValue* Radios_Radio_Config::release_antenna_gain() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.Config.antenna_gain)
  
  ::ywrapper::IntValue* temp = antenna_gain_;
  antenna_gain_ = NULL;
  return temp;
}
inline ::ywrapper::IntValue* Radios_Radio_Config::mutable_antenna_gain() {
  
  if (antenna_gain_ == NULL) {
    antenna_gain_ = new ::ywrapper::IntValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.Config.antenna_gain)
  return antenna_gain_;
}
inline void Radios_Radio_Config::set_allocated_antenna_gain(::ywrapper::IntValue* antenna_gain) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(antenna_gain_);
  }
  if (antenna_gain) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      antenna_gain = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, antenna_gain, submessage_arena);
    }
    
  } else {
    
  }
  antenna_gain_ = antenna_gain;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.Config.antenna_gain)
}

// .ywrapper.UintValue channel = 240795514 [(.yext.schemapath) = "/radios/radio/config/channel"];
inline bool Radios_Radio_Config::has_channel() const {
  return this != internal_default_instance() && channel_ != NULL;
}
inline const ::ywrapper::UintValue& Radios_Radio_Config::channel() const {
  const ::ywrapper::UintValue* p = channel_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.Config.channel)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Radios_Radio_Config::release_channel() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.Config.channel)
  
  ::ywrapper::UintValue* temp = channel_;
  channel_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Radios_Radio_Config::mutable_channel() {
  
  if (channel_ == NULL) {
    channel_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.Config.channel)
  return channel_;
}
inline void Radios_Radio_Config::set_allocated_channel(::ywrapper::UintValue* channel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(channel_);
  }
  if (channel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      channel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, channel, submessage_arena);
    }
    
  } else {
    
  }
  channel_ = channel;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.Config.channel)
}

// .ywrapper.UintValue channel_width = 110498113 [(.yext.schemapath) = "/radios/radio/config/channel-width"];
inline bool Radios_Radio_Config::has_channel_width() const {
  return this != internal_default_instance() && channel_width_ != NULL;
}
inline const ::ywrapper::UintValue& Radios_Radio_Config::channel_width() const {
  const ::ywrapper::UintValue* p = channel_width_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.Config.channel_width)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Radios_Radio_Config::release_channel_width() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.Config.channel_width)
  
  ::ywrapper::UintValue* temp = channel_width_;
  channel_width_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Radios_Radio_Config::mutable_channel_width() {
  
  if (channel_width_ == NULL) {
    channel_width_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.Config.channel_width)
  return channel_width_;
}
inline void Radios_Radio_Config::set_allocated_channel_width(::ywrapper::UintValue* channel_width) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(channel_width_);
  }
  if (channel_width) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      channel_width = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, channel_width, submessage_arena);
    }
    
  } else {
    
  }
  channel_width_ = channel_width;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.Config.channel_width)
}

// .ywrapper.BoolValue dca = 493232983 [(.yext.schemapath) = "/radios/radio/config/dca"];
inline bool Radios_Radio_Config::has_dca() const {
  return this != internal_default_instance() && dca_ != NULL;
}
inline const ::ywrapper::BoolValue& Radios_Radio_Config::dca() const {
  const ::ywrapper::BoolValue* p = dca_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.Config.dca)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Radios_Radio_Config::release_dca() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.Config.dca)
  
  ::ywrapper::BoolValue* temp = dca_;
  dca_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Radios_Radio_Config::mutable_dca() {
  
  if (dca_ == NULL) {
    dca_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.Config.dca)
  return dca_;
}
inline void Radios_Radio_Config::set_allocated_dca(::ywrapper::BoolValue* dca) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dca_);
  }
  if (dca) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dca = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dca, submessage_arena);
    }
    
  } else {
    
  }
  dca_ = dca;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.Config.dca)
}

// .ywrapper.BoolValue dtp = 275123919 [(.yext.schemapath) = "/radios/radio/config/dtp"];
inline bool Radios_Radio_Config::has_dtp() const {
  return this != internal_default_instance() && dtp_ != NULL;
}
inline const ::ywrapper::BoolValue& Radios_Radio_Config::dtp() const {
  const ::ywrapper::BoolValue* p = dtp_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.Config.dtp)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Radios_Radio_Config::release_dtp() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.Config.dtp)
  
  ::ywrapper::BoolValue* temp = dtp_;
  dtp_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Radios_Radio_Config::mutable_dtp() {
  
  if (dtp_ == NULL) {
    dtp_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.Config.dtp)
  return dtp_;
}
inline void Radios_Radio_Config::set_allocated_dtp(::ywrapper::BoolValue* dtp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dtp_);
  }
  if (dtp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dtp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dtp, submessage_arena);
    }
    
  } else {
    
  }
  dtp_ = dtp;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.Config.dtp)
}

// .ywrapper.UintValue dtp_max = 133217130 [(.yext.schemapath) = "/radios/radio/config/dtp-max"];
inline bool Radios_Radio_Config::has_dtp_max() const {
  return this != internal_default_instance() && dtp_max_ != NULL;
}
inline const ::ywrapper::UintValue& Radios_Radio_Config::dtp_max() const {
  const ::ywrapper::UintValue* p = dtp_max_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.Config.dtp_max)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Radios_Radio_Config::release_dtp_max() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.Config.dtp_max)
  
  ::ywrapper::UintValue* temp = dtp_max_;
  dtp_max_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Radios_Radio_Config::mutable_dtp_max() {
  
  if (dtp_max_ == NULL) {
    dtp_max_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.Config.dtp_max)
  return dtp_max_;
}
inline void Radios_Radio_Config::set_allocated_dtp_max(::ywrapper::UintValue* dtp_max) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dtp_max_);
  }
  if (dtp_max) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dtp_max = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dtp_max, submessage_arena);
    }
    
  } else {
    
  }
  dtp_max_ = dtp_max;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.Config.dtp_max)
}

// .ywrapper.UintValue dtp_min = 267438020 [(.yext.schemapath) = "/radios/radio/config/dtp-min"];
inline bool Radios_Radio_Config::has_dtp_min() const {
  return this != internal_default_instance() && dtp_min_ != NULL;
}
inline const ::ywrapper::UintValue& Radios_Radio_Config::dtp_min() const {
  const ::ywrapper::UintValue* p = dtp_min_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.Config.dtp_min)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Radios_Radio_Config::release_dtp_min() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.Config.dtp_min)
  
  ::ywrapper::UintValue* temp = dtp_min_;
  dtp_min_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Radios_Radio_Config::mutable_dtp_min() {
  
  if (dtp_min_ == NULL) {
    dtp_min_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.Config.dtp_min)
  return dtp_min_;
}
inline void Radios_Radio_Config::set_allocated_dtp_min(::ywrapper::UintValue* dtp_min) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dtp_min_);
  }
  if (dtp_min) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dtp_min = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dtp_min, submessage_arena);
    }
    
  } else {
    
  }
  dtp_min_ = dtp_min;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.Config.dtp_min)
}

// .ywrapper.BoolValue enabled = 344574108 [(.yext.schemapath) = "/radios/radio/config/enabled"];
inline bool Radios_Radio_Config::has_enabled() const {
  return this != internal_default_instance() && enabled_ != NULL;
}
inline const ::ywrapper::BoolValue& Radios_Radio_Config::enabled() const {
  const ::ywrapper::BoolValue* p = enabled_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.Config.enabled)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Radios_Radio_Config::release_enabled() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.Config.enabled)
  
  ::ywrapper::BoolValue* temp = enabled_;
  enabled_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Radios_Radio_Config::mutable_enabled() {
  
  if (enabled_ == NULL) {
    enabled_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.Config.enabled)
  return enabled_;
}
inline void Radios_Radio_Config::set_allocated_enabled(::ywrapper::BoolValue* enabled) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(enabled_);
  }
  if (enabled) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      enabled = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, enabled, submessage_arena);
    }
    
  } else {
    
  }
  enabled_ = enabled;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.Config.enabled)
}

// .ywrapper.UintValue id = 203006358 [(.yext.schemapath) = "/radios/radio/config/id"];
inline bool Radios_Radio_Config::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::ywrapper::UintValue& Radios_Radio_Config::id() const {
  const ::ywrapper::UintValue* p = id_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.Config.id)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Radios_Radio_Config::release_id() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.Config.id)
  
  ::ywrapper::UintValue* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Radios_Radio_Config::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.Config.id)
  return id_;
}
inline void Radios_Radio_Config::set_allocated_id(::ywrapper::UintValue* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.Config.id)
}

// .openconfig.enums.OpenconfigWifiTypesOPERATINGFREQUENCY operating_frequency = 163366295 [(.yext.schemapath) = "/radios/radio/config/operating-frequency"];
inline void Radios_Radio_Config::clear_operating_frequency() {
  operating_frequency_ = 0;
}
inline ::openconfig::enums::OpenconfigWifiTypesOPERATINGFREQUENCY Radios_Radio_Config::operating_frequency() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.Config.operating_frequency)
  return static_cast< ::openconfig::enums::OpenconfigWifiTypesOPERATINGFREQUENCY >(operating_frequency_);
}
inline void Radios_Radio_Config::set_operating_frequency(::openconfig::enums::OpenconfigWifiTypesOPERATINGFREQUENCY value) {
  
  operating_frequency_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_wifi_phy.Radios.Radio.Config.operating_frequency)
}

// .ywrapper.BoolValue scanning = 181136512 [(.yext.schemapath) = "/radios/radio/config/scanning"];
inline bool Radios_Radio_Config::has_scanning() const {
  return this != internal_default_instance() && scanning_ != NULL;
}
inline const ::ywrapper::BoolValue& Radios_Radio_Config::scanning() const {
  const ::ywrapper::BoolValue* p = scanning_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.Config.scanning)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Radios_Radio_Config::release_scanning() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.Config.scanning)
  
  ::ywrapper::BoolValue* temp = scanning_;
  scanning_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Radios_Radio_Config::mutable_scanning() {
  
  if (scanning_ == NULL) {
    scanning_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.Config.scanning)
  return scanning_;
}
inline void Radios_Radio_Config::set_allocated_scanning(::ywrapper::BoolValue* scanning) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(scanning_);
  }
  if (scanning) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scanning = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scanning, submessage_arena);
    }
    
  } else {
    
  }
  scanning_ = scanning;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.Config.scanning)
}

// .ywrapper.UintValue scanning_defer_clients = 94483184 [(.yext.schemapath) = "/radios/radio/config/scanning-defer-clients"];
inline bool Radios_Radio_Config::has_scanning_defer_clients() const {
  return this != internal_default_instance() && scanning_defer_clients_ != NULL;
}
inline const ::ywrapper::UintValue& Radios_Radio_Config::scanning_defer_clients() const {
  const ::ywrapper::UintValue* p = scanning_defer_clients_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.Config.scanning_defer_clients)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Radios_Radio_Config::release_scanning_defer_clients() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.Config.scanning_defer_clients)
  
  ::ywrapper::UintValue* temp = scanning_defer_clients_;
  scanning_defer_clients_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Radios_Radio_Config::mutable_scanning_defer_clients() {
  
  if (scanning_defer_clients_ == NULL) {
    scanning_defer_clients_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.Config.scanning_defer_clients)
  return scanning_defer_clients_;
}
inline void Radios_Radio_Config::set_allocated_scanning_defer_clients(::ywrapper::UintValue* scanning_defer_clients) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(scanning_defer_clients_);
  }
  if (scanning_defer_clients) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scanning_defer_clients = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scanning_defer_clients, submessage_arena);
    }
    
  } else {
    
  }
  scanning_defer_clients_ = scanning_defer_clients;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.Config.scanning_defer_clients)
}

// .ywrapper.BoolValue scanning_defer_traffic = 319636767 [(.yext.schemapath) = "/radios/radio/config/scanning-defer-traffic"];
inline bool Radios_Radio_Config::has_scanning_defer_traffic() const {
  return this != internal_default_instance() && scanning_defer_traffic_ != NULL;
}
inline const ::ywrapper::BoolValue& Radios_Radio_Config::scanning_defer_traffic() const {
  const ::ywrapper::BoolValue* p = scanning_defer_traffic_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.Config.scanning_defer_traffic)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Radios_Radio_Config::release_scanning_defer_traffic() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.Config.scanning_defer_traffic)
  
  ::ywrapper::BoolValue* temp = scanning_defer_traffic_;
  scanning_defer_traffic_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Radios_Radio_Config::mutable_scanning_defer_traffic() {
  
  if (scanning_defer_traffic_ == NULL) {
    scanning_defer_traffic_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.Config.scanning_defer_traffic)
  return scanning_defer_traffic_;
}
inline void Radios_Radio_Config::set_allocated_scanning_defer_traffic(::ywrapper::BoolValue* scanning_defer_traffic) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(scanning_defer_traffic_);
  }
  if (scanning_defer_traffic) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scanning_defer_traffic = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scanning_defer_traffic, submessage_arena);
    }
    
  } else {
    
  }
  scanning_defer_traffic_ = scanning_defer_traffic;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.Config.scanning_defer_traffic)
}

// .ywrapper.UintValue scanning_dwell_time = 72370243 [(.yext.schemapath) = "/radios/radio/config/scanning-dwell-time"];
inline bool Radios_Radio_Config::has_scanning_dwell_time() const {
  return this != internal_default_instance() && scanning_dwell_time_ != NULL;
}
inline const ::ywrapper::UintValue& Radios_Radio_Config::scanning_dwell_time() const {
  const ::ywrapper::UintValue* p = scanning_dwell_time_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.Config.scanning_dwell_time)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Radios_Radio_Config::release_scanning_dwell_time() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.Config.scanning_dwell_time)
  
  ::ywrapper::UintValue* temp = scanning_dwell_time_;
  scanning_dwell_time_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Radios_Radio_Config::mutable_scanning_dwell_time() {
  
  if (scanning_dwell_time_ == NULL) {
    scanning_dwell_time_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.Config.scanning_dwell_time)
  return scanning_dwell_time_;
}
inline void Radios_Radio_Config::set_allocated_scanning_dwell_time(::ywrapper::UintValue* scanning_dwell_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(scanning_dwell_time_);
  }
  if (scanning_dwell_time) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scanning_dwell_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scanning_dwell_time, submessage_arena);
    }
    
  } else {
    
  }
  scanning_dwell_time_ = scanning_dwell_time;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.Config.scanning_dwell_time)
}

// .ywrapper.UintValue scanning_interval = 522281730 [(.yext.schemapath) = "/radios/radio/config/scanning-interval"];
inline bool Radios_Radio_Config::has_scanning_interval() const {
  return this != internal_default_instance() && scanning_interval_ != NULL;
}
inline const ::ywrapper::UintValue& Radios_Radio_Config::scanning_interval() const {
  const ::ywrapper::UintValue* p = scanning_interval_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.Config.scanning_interval)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Radios_Radio_Config::release_scanning_interval() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.Config.scanning_interval)
  
  ::ywrapper::UintValue* temp = scanning_interval_;
  scanning_interval_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Radios_Radio_Config::mutable_scanning_interval() {
  
  if (scanning_interval_ == NULL) {
    scanning_interval_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.Config.scanning_interval)
  return scanning_interval_;
}
inline void Radios_Radio_Config::set_allocated_scanning_interval(::ywrapper::UintValue* scanning_interval) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(scanning_interval_);
  }
  if (scanning_interval) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scanning_interval = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scanning_interval, submessage_arena);
    }
    
  } else {
    
  }
  scanning_interval_ = scanning_interval;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.Config.scanning_interval)
}

// .ywrapper.UintValue transmit_power = 144254149 [(.yext.schemapath) = "/radios/radio/config/transmit-power"];
inline bool Radios_Radio_Config::has_transmit_power() const {
  return this != internal_default_instance() && transmit_power_ != NULL;
}
inline const ::ywrapper::UintValue& Radios_Radio_Config::transmit_power() const {
  const ::ywrapper::UintValue* p = transmit_power_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.Config.transmit_power)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Radios_Radio_Config::release_transmit_power() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.Config.transmit_power)
  
  ::ywrapper::UintValue* temp = transmit_power_;
  transmit_power_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Radios_Radio_Config::mutable_transmit_power() {
  
  if (transmit_power_ == NULL) {
    transmit_power_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.Config.transmit_power)
  return transmit_power_;
}
inline void Radios_Radio_Config::set_allocated_transmit_power(::ywrapper::UintValue* transmit_power) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(transmit_power_);
  }
  if (transmit_power) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transmit_power = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transmit_power, submessage_arena);
    }
    
  } else {
    
  }
  transmit_power_ = transmit_power;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.Config.transmit_power)
}

// -------------------------------------------------------------------

// Radios_Radio_Neighbors_Neighbor_State

// .ywrapper.StringValue bssid = 263931714 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state/bssid"];
inline bool Radios_Radio_Neighbors_Neighbor_State::has_bssid() const {
  return this != internal_default_instance() && bssid_ != NULL;
}
inline const ::ywrapper::StringValue& Radios_Radio_Neighbors_Neighbor_State::bssid() const {
  const ::ywrapper::StringValue* p = bssid_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State.bssid)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Radios_Radio_Neighbors_Neighbor_State::release_bssid() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State.bssid)
  
  ::ywrapper::StringValue* temp = bssid_;
  bssid_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Radios_Radio_Neighbors_Neighbor_State::mutable_bssid() {
  
  if (bssid_ == NULL) {
    bssid_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State.bssid)
  return bssid_;
}
inline void Radios_Radio_Neighbors_Neighbor_State::set_allocated_bssid(::ywrapper::StringValue* bssid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(bssid_);
  }
  if (bssid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bssid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bssid, submessage_arena);
    }
    
  } else {
    
  }
  bssid_ = bssid;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State.bssid)
}

// .ywrapper.UintValue channel = 266073572 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state/channel"];
inline bool Radios_Radio_Neighbors_Neighbor_State::has_channel() const {
  return this != internal_default_instance() && channel_ != NULL;
}
inline const ::ywrapper::UintValue& Radios_Radio_Neighbors_Neighbor_State::channel() const {
  const ::ywrapper::UintValue* p = channel_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State.channel)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Radios_Radio_Neighbors_Neighbor_State::release_channel() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State.channel)
  
  ::ywrapper::UintValue* temp = channel_;
  channel_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Radios_Radio_Neighbors_Neighbor_State::mutable_channel() {
  
  if (channel_ == NULL) {
    channel_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State.channel)
  return channel_;
}
inline void Radios_Radio_Neighbors_Neighbor_State::set_allocated_channel(::ywrapper::UintValue* channel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(channel_);
  }
  if (channel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      channel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, channel, submessage_arena);
    }
    
  } else {
    
  }
  channel_ = channel;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State.channel)
}

// .ywrapper.UintValue last_seen = 231383841 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state/last-seen"];
inline bool Radios_Radio_Neighbors_Neighbor_State::has_last_seen() const {
  return this != internal_default_instance() && last_seen_ != NULL;
}
inline const ::ywrapper::UintValue& Radios_Radio_Neighbors_Neighbor_State::last_seen() const {
  const ::ywrapper::UintValue* p = last_seen_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State.last_seen)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Radios_Radio_Neighbors_Neighbor_State::release_last_seen() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State.last_seen)
  
  ::ywrapper::UintValue* temp = last_seen_;
  last_seen_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Radios_Radio_Neighbors_Neighbor_State::mutable_last_seen() {
  
  if (last_seen_ == NULL) {
    last_seen_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State.last_seen)
  return last_seen_;
}
inline void Radios_Radio_Neighbors_Neighbor_State::set_allocated_last_seen(::ywrapper::UintValue* last_seen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(last_seen_);
  }
  if (last_seen) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      last_seen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, last_seen, submessage_arena);
    }
    
  } else {
    
  }
  last_seen_ = last_seen;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State.last_seen)
}

// .ywrapper.UintValue primary_channel = 269323997 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state/primary-channel"];
inline bool Radios_Radio_Neighbors_Neighbor_State::has_primary_channel() const {
  return this != internal_default_instance() && primary_channel_ != NULL;
}
inline const ::ywrapper::UintValue& Radios_Radio_Neighbors_Neighbor_State::primary_channel() const {
  const ::ywrapper::UintValue* p = primary_channel_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State.primary_channel)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Radios_Radio_Neighbors_Neighbor_State::release_primary_channel() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State.primary_channel)
  
  ::ywrapper::UintValue* temp = primary_channel_;
  primary_channel_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Radios_Radio_Neighbors_Neighbor_State::mutable_primary_channel() {
  
  if (primary_channel_ == NULL) {
    primary_channel_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State.primary_channel)
  return primary_channel_;
}
inline void Radios_Radio_Neighbors_Neighbor_State::set_allocated_primary_channel(::ywrapper::UintValue* primary_channel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(primary_channel_);
  }
  if (primary_channel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      primary_channel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, primary_channel, submessage_arena);
    }
    
  } else {
    
  }
  primary_channel_ = primary_channel;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State.primary_channel)
}

// .ywrapper.IntValue rssi = 284470482 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state/rssi"];
inline bool Radios_Radio_Neighbors_Neighbor_State::has_rssi() const {
  return this != internal_default_instance() && rssi_ != NULL;
}
inline const ::ywrapper::IntValue& Radios_Radio_Neighbors_Neighbor_State::rssi() const {
  const ::ywrapper::IntValue* p = rssi_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State.rssi)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::IntValue*>(
      &::ywrapper::_IntValue_default_instance_);
}
inline ::ywrapper::IntValue* Radios_Radio_Neighbors_Neighbor_State::release_rssi() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State.rssi)
  
  ::ywrapper::IntValue* temp = rssi_;
  rssi_ = NULL;
  return temp;
}
inline ::ywrapper::IntValue* Radios_Radio_Neighbors_Neighbor_State::mutable_rssi() {
  
  if (rssi_ == NULL) {
    rssi_ = new ::ywrapper::IntValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State.rssi)
  return rssi_;
}
inline void Radios_Radio_Neighbors_Neighbor_State::set_allocated_rssi(::ywrapper::IntValue* rssi) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rssi_);
  }
  if (rssi) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rssi = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rssi, submessage_arena);
    }
    
  } else {
    
  }
  rssi_ = rssi;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State.rssi)
}

// .ywrapper.StringValue ssid = 240710930 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state/ssid"];
inline bool Radios_Radio_Neighbors_Neighbor_State::has_ssid() const {
  return this != internal_default_instance() && ssid_ != NULL;
}
inline const ::ywrapper::StringValue& Radios_Radio_Neighbors_Neighbor_State::ssid() const {
  const ::ywrapper::StringValue* p = ssid_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State.ssid)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Radios_Radio_Neighbors_Neighbor_State::release_ssid() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State.ssid)
  
  ::ywrapper::StringValue* temp = ssid_;
  ssid_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Radios_Radio_Neighbors_Neighbor_State::mutable_ssid() {
  
  if (ssid_ == NULL) {
    ssid_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State.ssid)
  return ssid_;
}
inline void Radios_Radio_Neighbors_Neighbor_State::set_allocated_ssid(::ywrapper::StringValue* ssid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ssid_);
  }
  if (ssid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ssid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ssid, submessage_arena);
    }
    
  } else {
    
  }
  ssid_ = ssid;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State.ssid)
}

// -------------------------------------------------------------------

// Radios_Radio_Neighbors_Neighbor

// .openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.State state = 170068704 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/state"];
inline bool Radios_Radio_Neighbors_Neighbor::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Radios_Radio_Neighbors_Neighbor::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor_State& Radios_Radio_Neighbors_Neighbor::state() const {
  const ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor_State*>(
      &::openconfig::openconfig_wifi_phy::_Radios_Radio_Neighbors_Neighbor_State_default_instance_);
}
inline ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor_State* Radios_Radio_Neighbors_Neighbor::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.state)
  
  ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor_State* Radios_Radio_Neighbors_Neighbor::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.state)
  return state_;
}
inline void Radios_Radio_Neighbors_Neighbor::set_allocated_state(::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor.state)
}

// -------------------------------------------------------------------

// Radios_Radio_Neighbors_NeighborKey

// string bssid = 1 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor/bssid"];
inline void Radios_Radio_Neighbors_NeighborKey::clear_bssid() {
  bssid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Radios_Radio_Neighbors_NeighborKey::bssid() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey.bssid)
  return bssid_.GetNoArena();
}
inline void Radios_Radio_Neighbors_NeighborKey::set_bssid(const ::std::string& value) {
  
  bssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey.bssid)
}
#if LANG_CXX11
inline void Radios_Radio_Neighbors_NeighborKey::set_bssid(::std::string&& value) {
  
  bssid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey.bssid)
}
#endif
inline void Radios_Radio_Neighbors_NeighborKey::set_bssid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey.bssid)
}
inline void Radios_Radio_Neighbors_NeighborKey::set_bssid(const char* value, size_t size) {
  
  bssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey.bssid)
}
inline ::std::string* Radios_Radio_Neighbors_NeighborKey::mutable_bssid() {
  
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey.bssid)
  return bssid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Radios_Radio_Neighbors_NeighborKey::release_bssid() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey.bssid)
  
  return bssid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Radios_Radio_Neighbors_NeighborKey::set_allocated_bssid(::std::string* bssid) {
  if (bssid != NULL) {
    
  } else {
    
  }
  bssid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bssid);
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey.bssid)
}

// .openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.Neighbor neighbor = 2;
inline bool Radios_Radio_Neighbors_NeighborKey::has_neighbor() const {
  return this != internal_default_instance() && neighbor_ != NULL;
}
inline void Radios_Radio_Neighbors_NeighborKey::clear_neighbor() {
  if (GetArenaNoVirtual() == NULL && neighbor_ != NULL) {
    delete neighbor_;
  }
  neighbor_ = NULL;
}
inline const ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor& Radios_Radio_Neighbors_NeighborKey::neighbor() const {
  const ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor* p = neighbor_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey.neighbor)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor*>(
      &::openconfig::openconfig_wifi_phy::_Radios_Radio_Neighbors_Neighbor_default_instance_);
}
inline ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor* Radios_Radio_Neighbors_NeighborKey::release_neighbor() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey.neighbor)
  
  ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor* temp = neighbor_;
  neighbor_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor* Radios_Radio_Neighbors_NeighborKey::mutable_neighbor() {
  
  if (neighbor_ == NULL) {
    neighbor_ = new ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey.neighbor)
  return neighbor_;
}
inline void Radios_Radio_Neighbors_NeighborKey::set_allocated_neighbor(::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_Neighbor* neighbor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete neighbor_;
  }
  if (neighbor) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      neighbor = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, neighbor, submessage_arena);
    }
    
  } else {
    
  }
  neighbor_ = neighbor;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey.neighbor)
}

// -------------------------------------------------------------------

// Radios_Radio_Neighbors

// repeated .openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.NeighborKey neighbor = 529834398 [(.yext.schemapath) = "/radios/radio/neighbors/neighbor"];
inline int Radios_Radio_Neighbors::neighbor_size() const {
  return neighbor_.size();
}
inline void Radios_Radio_Neighbors::clear_neighbor() {
  neighbor_.Clear();
}
inline const ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_NeighborKey& Radios_Radio_Neighbors::neighbor(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.neighbor)
  return neighbor_.Get(index);
}
inline ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_NeighborKey* Radios_Radio_Neighbors::mutable_neighbor(int index) {
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.neighbor)
  return neighbor_.Mutable(index);
}
inline ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_NeighborKey* Radios_Radio_Neighbors::add_neighbor() {
  // @@protoc_insertion_point(field_add:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.neighbor)
  return neighbor_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_NeighborKey >*
Radios_Radio_Neighbors::mutable_neighbor() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.neighbor)
  return &neighbor_;
}
inline const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors_NeighborKey >&
Radios_Radio_Neighbors::neighbor() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors.neighbor)
  return neighbor_;
}

// -------------------------------------------------------------------

// Radios_Radio_State_Counters

// .ywrapper.UintValue failed_fcs_frames = 362574451 [(.yext.schemapath) = "/radios/radio/state/counters/failed-fcs-frames"];
inline bool Radios_Radio_State_Counters::has_failed_fcs_frames() const {
  return this != internal_default_instance() && failed_fcs_frames_ != NULL;
}
inline const ::ywrapper::UintValue& Radios_Radio_State_Counters::failed_fcs_frames() const {
  const ::ywrapper::UintValue* p = failed_fcs_frames_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.State.Counters.failed_fcs_frames)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Radios_Radio_State_Counters::release_failed_fcs_frames() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.State.Counters.failed_fcs_frames)
  
  ::ywrapper::UintValue* temp = failed_fcs_frames_;
  failed_fcs_frames_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Radios_Radio_State_Counters::mutable_failed_fcs_frames() {
  
  if (failed_fcs_frames_ == NULL) {
    failed_fcs_frames_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.State.Counters.failed_fcs_frames)
  return failed_fcs_frames_;
}
inline void Radios_Radio_State_Counters::set_allocated_failed_fcs_frames(::ywrapper::UintValue* failed_fcs_frames) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(failed_fcs_frames_);
  }
  if (failed_fcs_frames) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      failed_fcs_frames = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, failed_fcs_frames, submessage_arena);
    }
    
  } else {
    
  }
  failed_fcs_frames_ = failed_fcs_frames;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.State.Counters.failed_fcs_frames)
}

// .ywrapper.IntValue noise_floor = 305481331 [(.yext.schemapath) = "/radios/radio/state/counters/noise-floor"];
inline bool Radios_Radio_State_Counters::has_noise_floor() const {
  return this != internal_default_instance() && noise_floor_ != NULL;
}
inline const ::ywrapper::IntValue& Radios_Radio_State_Counters::noise_floor() const {
  const ::ywrapper::IntValue* p = noise_floor_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.State.Counters.noise_floor)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::IntValue*>(
      &::ywrapper::_IntValue_default_instance_);
}
inline ::ywrapper::IntValue* Radios_Radio_State_Counters::release_noise_floor() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.State.Counters.noise_floor)
  
  ::ywrapper::IntValue* temp = noise_floor_;
  noise_floor_ = NULL;
  return temp;
}
inline ::ywrapper::IntValue* Radios_Radio_State_Counters::mutable_noise_floor() {
  
  if (noise_floor_ == NULL) {
    noise_floor_ = new ::ywrapper::IntValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.State.Counters.noise_floor)
  return noise_floor_;
}
inline void Radios_Radio_State_Counters::set_allocated_noise_floor(::ywrapper::IntValue* noise_floor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(noise_floor_);
  }
  if (noise_floor) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      noise_floor = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, noise_floor, submessage_arena);
    }
    
  } else {
    
  }
  noise_floor_ = noise_floor;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.State.Counters.noise_floor)
}

// -------------------------------------------------------------------

// Radios_Radio_State

// repeated .ywrapper.UintValue allowed_channels = 373743371 [(.yext.schemapath) = "/radios/radio/state/allowed-channels"];
inline int Radios_Radio_State::allowed_channels_size() const {
  return allowed_channels_.size();
}
inline const ::ywrapper::UintValue& Radios_Radio_State::allowed_channels(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.State.allowed_channels)
  return allowed_channels_.Get(index);
}
inline ::ywrapper::UintValue* Radios_Radio_State::mutable_allowed_channels(int index) {
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.State.allowed_channels)
  return allowed_channels_.Mutable(index);
}
inline ::ywrapper::UintValue* Radios_Radio_State::add_allowed_channels() {
  // @@protoc_insertion_point(field_add:openconfig.openconfig_wifi_phy.Radios.Radio.State.allowed_channels)
  return allowed_channels_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >*
Radios_Radio_State::mutable_allowed_channels() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_wifi_phy.Radios.Radio.State.allowed_channels)
  return &allowed_channels_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >&
Radios_Radio_State::allowed_channels() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_wifi_phy.Radios.Radio.State.allowed_channels)
  return allowed_channels_;
}

// .ywrapper.IntValue antenna_gain = 294116409 [(.yext.schemapath) = "/radios/radio/state/antenna-gain"];
inline bool Radios_Radio_State::has_antenna_gain() const {
  return this != internal_default_instance() && antenna_gain_ != NULL;
}
inline const ::ywrapper::IntValue& Radios_Radio_State::antenna_gain() const {
  const ::ywrapper::IntValue* p = antenna_gain_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.State.antenna_gain)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::IntValue*>(
      &::ywrapper::_IntValue_default_instance_);
}
inline ::ywrapper::IntValue* Radios_Radio_State::release_antenna_gain() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.State.antenna_gain)
  
  ::ywrapper::IntValue* temp = antenna_gain_;
  antenna_gain_ = NULL;
  return temp;
}
inline ::ywrapper::IntValue* Radios_Radio_State::mutable_antenna_gain() {
  
  if (antenna_gain_ == NULL) {
    antenna_gain_ = new ::ywrapper::IntValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.State.antenna_gain)
  return antenna_gain_;
}
inline void Radios_Radio_State::set_allocated_antenna_gain(::ywrapper::IntValue* antenna_gain) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(antenna_gain_);
  }
  if (antenna_gain) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      antenna_gain = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, antenna_gain, submessage_arena);
    }
    
  } else {
    
  }
  antenna_gain_ = antenna_gain;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.State.antenna_gain)
}

// .ywrapper.StringValue base_radio_mac = 62813897 [(.yext.schemapath) = "/radios/radio/state/base-radio-mac"];
inline bool Radios_Radio_State::has_base_radio_mac() const {
  return this != internal_default_instance() && base_radio_mac_ != NULL;
}
inline const ::ywrapper::StringValue& Radios_Radio_State::base_radio_mac() const {
  const ::ywrapper::StringValue* p = base_radio_mac_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.State.base_radio_mac)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Radios_Radio_State::release_base_radio_mac() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.State.base_radio_mac)
  
  ::ywrapper::StringValue* temp = base_radio_mac_;
  base_radio_mac_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Radios_Radio_State::mutable_base_radio_mac() {
  
  if (base_radio_mac_ == NULL) {
    base_radio_mac_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.State.base_radio_mac)
  return base_radio_mac_;
}
inline void Radios_Radio_State::set_allocated_base_radio_mac(::ywrapper::StringValue* base_radio_mac) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(base_radio_mac_);
  }
  if (base_radio_mac) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      base_radio_mac = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, base_radio_mac, submessage_arena);
    }
    
  } else {
    
  }
  base_radio_mac_ = base_radio_mac;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.State.base_radio_mac)
}

// .ywrapper.UintValue channel = 224195199 [(.yext.schemapath) = "/radios/radio/state/channel"];
inline bool Radios_Radio_State::has_channel() const {
  return this != internal_default_instance() && channel_ != NULL;
}
inline const ::ywrapper::UintValue& Radios_Radio_State::channel() const {
  const ::ywrapper::UintValue* p = channel_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.State.channel)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Radios_Radio_State::release_channel() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.State.channel)
  
  ::ywrapper::UintValue* temp = channel_;
  channel_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Radios_Radio_State::mutable_channel() {
  
  if (channel_ == NULL) {
    channel_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.State.channel)
  return channel_;
}
inline void Radios_Radio_State::set_allocated_channel(::ywrapper::UintValue* channel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(channel_);
  }
  if (channel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      channel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, channel, submessage_arena);
    }
    
  } else {
    
  }
  channel_ = channel;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.State.channel)
}

// .openconfig.enums.OpenconfigWifiTypesCHANGEREASONTYPE channel_change_reason = 119452921 [(.yext.schemapath) = "/radios/radio/state/channel-change-reason"];
inline void Radios_Radio_State::clear_channel_change_reason() {
  channel_change_reason_ = 0;
}
inline ::openconfig::enums::OpenconfigWifiTypesCHANGEREASONTYPE Radios_Radio_State::channel_change_reason() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.State.channel_change_reason)
  return static_cast< ::openconfig::enums::OpenconfigWifiTypesCHANGEREASONTYPE >(channel_change_reason_);
}
inline void Radios_Radio_State::set_channel_change_reason(::openconfig::enums::OpenconfigWifiTypesCHANGEREASONTYPE value) {
  
  channel_change_reason_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_wifi_phy.Radios.Radio.State.channel_change_reason)
}

// .ywrapper.UintValue channel_width = 61632036 [(.yext.schemapath) = "/radios/radio/state/channel-width"];
inline bool Radios_Radio_State::has_channel_width() const {
  return this != internal_default_instance() && channel_width_ != NULL;
}
inline const ::ywrapper::UintValue& Radios_Radio_State::channel_width() const {
  const ::ywrapper::UintValue* p = channel_width_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.State.channel_width)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Radios_Radio_State::release_channel_width() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.State.channel_width)
  
  ::ywrapper::UintValue* temp = channel_width_;
  channel_width_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Radios_Radio_State::mutable_channel_width() {
  
  if (channel_width_ == NULL) {
    channel_width_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.State.channel_width)
  return channel_width_;
}
inline void Radios_Radio_State::set_allocated_channel_width(::ywrapper::UintValue* channel_width) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(channel_width_);
  }
  if (channel_width) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      channel_width = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, channel_width, submessage_arena);
    }
    
  } else {
    
  }
  channel_width_ = channel_width;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.State.channel_width)
}

// .openconfig.openconfig_wifi_phy.Radios.Radio.State.Counters counters = 23007449 [(.yext.schemapath) = "/radios/radio/state/counters"];
inline bool Radios_Radio_State::has_counters() const {
  return this != internal_default_instance() && counters_ != NULL;
}
inline void Radios_Radio_State::clear_counters() {
  if (GetArenaNoVirtual() == NULL && counters_ != NULL) {
    delete counters_;
  }
  counters_ = NULL;
}
inline const ::openconfig::openconfig_wifi_phy::Radios_Radio_State_Counters& Radios_Radio_State::counters() const {
  const ::openconfig::openconfig_wifi_phy::Radios_Radio_State_Counters* p = counters_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.State.counters)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_phy::Radios_Radio_State_Counters*>(
      &::openconfig::openconfig_wifi_phy::_Radios_Radio_State_Counters_default_instance_);
}
inline ::openconfig::openconfig_wifi_phy::Radios_Radio_State_Counters* Radios_Radio_State::release_counters() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.State.counters)
  
  ::openconfig::openconfig_wifi_phy::Radios_Radio_State_Counters* temp = counters_;
  counters_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_phy::Radios_Radio_State_Counters* Radios_Radio_State::mutable_counters() {
  
  if (counters_ == NULL) {
    counters_ = new ::openconfig::openconfig_wifi_phy::Radios_Radio_State_Counters;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.State.counters)
  return counters_;
}
inline void Radios_Radio_State::set_allocated_counters(::openconfig::openconfig_wifi_phy::Radios_Radio_State_Counters* counters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete counters_;
  }
  if (counters) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      counters = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, counters, submessage_arena);
    }
    
  } else {
    
  }
  counters_ = counters;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.State.counters)
}

// .ywrapper.BoolValue dca = 482972730 [(.yext.schemapath) = "/radios/radio/state/dca"];
inline bool Radios_Radio_State::has_dca() const {
  return this != internal_default_instance() && dca_ != NULL;
}
inline const ::ywrapper::BoolValue& Radios_Radio_State::dca() const {
  const ::ywrapper::BoolValue* p = dca_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.State.dca)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Radios_Radio_State::release_dca() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.State.dca)
  
  ::ywrapper::BoolValue* temp = dca_;
  dca_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Radios_Radio_State::mutable_dca() {
  
  if (dca_ == NULL) {
    dca_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.State.dca)
  return dca_;
}
inline void Radios_Radio_State::set_allocated_dca(::ywrapper::BoolValue* dca) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dca_);
  }
  if (dca) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dca = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dca, submessage_arena);
    }
    
  } else {
    
  }
  dca_ = dca;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.State.dca)
}

// .ywrapper.UintValue dfs_hit_time = 451589139 [(.yext.schemapath) = "/radios/radio/state/dfs-hit-time"];
inline bool Radios_Radio_State::has_dfs_hit_time() const {
  return this != internal_default_instance() && dfs_hit_time_ != NULL;
}
inline const ::ywrapper::UintValue& Radios_Radio_State::dfs_hit_time() const {
  const ::ywrapper::UintValue* p = dfs_hit_time_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.State.dfs_hit_time)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Radios_Radio_State::release_dfs_hit_time() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.State.dfs_hit_time)
  
  ::ywrapper::UintValue* temp = dfs_hit_time_;
  dfs_hit_time_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Radios_Radio_State::mutable_dfs_hit_time() {
  
  if (dfs_hit_time_ == NULL) {
    dfs_hit_time_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.State.dfs_hit_time)
  return dfs_hit_time_;
}
inline void Radios_Radio_State::set_allocated_dfs_hit_time(::ywrapper::UintValue* dfs_hit_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dfs_hit_time_);
  }
  if (dfs_hit_time) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dfs_hit_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dfs_hit_time, submessage_arena);
    }
    
  } else {
    
  }
  dfs_hit_time_ = dfs_hit_time;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.State.dfs_hit_time)
}

// .ywrapper.BoolValue dtp = 298419066 [(.yext.schemapath) = "/radios/radio/state/dtp"];
inline bool Radios_Radio_State::has_dtp() const {
  return this != internal_default_instance() && dtp_ != NULL;
}
inline const ::ywrapper::BoolValue& Radios_Radio_State::dtp() const {
  const ::ywrapper::BoolValue* p = dtp_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.State.dtp)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Radios_Radio_State::release_dtp() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.State.dtp)
  
  ::ywrapper::BoolValue* temp = dtp_;
  dtp_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Radios_Radio_State::mutable_dtp() {
  
  if (dtp_ == NULL) {
    dtp_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.State.dtp)
  return dtp_;
}
inline void Radios_Radio_State::set_allocated_dtp(::ywrapper::BoolValue* dtp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dtp_);
  }
  if (dtp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dtp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dtp, submessage_arena);
    }
    
  } else {
    
  }
  dtp_ = dtp;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.State.dtp)
}

// .ywrapper.UintValue dtp_max = 193172031 [(.yext.schemapath) = "/radios/radio/state/dtp-max"];
inline bool Radios_Radio_State::has_dtp_max() const {
  return this != internal_default_instance() && dtp_max_ != NULL;
}
inline const ::ywrapper::UintValue& Radios_Radio_State::dtp_max() const {
  const ::ywrapper::UintValue* p = dtp_max_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.State.dtp_max)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Radios_Radio_State::release_dtp_max() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.State.dtp_max)
  
  ::ywrapper::UintValue* temp = dtp_max_;
  dtp_max_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Radios_Radio_State::mutable_dtp_max() {
  
  if (dtp_max_ == NULL) {
    dtp_max_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.State.dtp_max)
  return dtp_max_;
}
inline void Radios_Radio_State::set_allocated_dtp_max(::ywrapper::UintValue* dtp_max) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dtp_max_);
  }
  if (dtp_max) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dtp_max = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dtp_max, submessage_arena);
    }
    
  } else {
    
  }
  dtp_max_ = dtp_max;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.State.dtp_max)
}

// .ywrapper.UintValue dtp_min = 58951105 [(.yext.schemapath) = "/radios/radio/state/dtp-min"];
inline bool Radios_Radio_State::has_dtp_min() const {
  return this != internal_default_instance() && dtp_min_ != NULL;
}
inline const ::ywrapper::UintValue& Radios_Radio_State::dtp_min() const {
  const ::ywrapper::UintValue* p = dtp_min_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.State.dtp_min)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Radios_Radio_State::release_dtp_min() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.State.dtp_min)
  
  ::ywrapper::UintValue* temp = dtp_min_;
  dtp_min_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Radios_Radio_State::mutable_dtp_min() {
  
  if (dtp_min_ == NULL) {
    dtp_min_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.State.dtp_min)
  return dtp_min_;
}
inline void Radios_Radio_State::set_allocated_dtp_min(::ywrapper::UintValue* dtp_min) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dtp_min_);
  }
  if (dtp_min) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dtp_min = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dtp_min, submessage_arena);
    }
    
  } else {
    
  }
  dtp_min_ = dtp_min;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.State.dtp_min)
}

// .ywrapper.BoolValue enabled = 190273197 [(.yext.schemapath) = "/radios/radio/state/enabled"];
inline bool Radios_Radio_State::has_enabled() const {
  return this != internal_default_instance() && enabled_ != NULL;
}
inline const ::ywrapper::BoolValue& Radios_Radio_State::enabled() const {
  const ::ywrapper::BoolValue* p = enabled_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.State.enabled)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Radios_Radio_State::release_enabled() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.State.enabled)
  
  ::ywrapper::BoolValue* temp = enabled_;
  enabled_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Radios_Radio_State::mutable_enabled() {
  
  if (enabled_ == NULL) {
    enabled_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.State.enabled)
  return enabled_;
}
inline void Radios_Radio_State::set_allocated_enabled(::ywrapper::BoolValue* enabled) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(enabled_);
  }
  if (enabled) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      enabled = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, enabled, submessage_arena);
    }
    
  } else {
    
  }
  enabled_ = enabled;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.State.enabled)
}

// .ywrapper.UintValue id = 216591949 [(.yext.schemapath) = "/radios/radio/state/id"];
inline bool Radios_Radio_State::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::ywrapper::UintValue& Radios_Radio_State::id() const {
  const ::ywrapper::UintValue* p = id_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.State.id)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Radios_Radio_State::release_id() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.State.id)
  
  ::ywrapper::UintValue* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Radios_Radio_State::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.State.id)
  return id_;
}
inline void Radios_Radio_State::set_allocated_id(::ywrapper::UintValue* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.State.id)
}

// .openconfig.enums.OpenconfigWifiTypesOPERATINGFREQUENCY operating_frequency = 131574810 [(.yext.schemapath) = "/radios/radio/state/operating-frequency"];
inline void Radios_Radio_State::clear_operating_frequency() {
  operating_frequency_ = 0;
}
inline ::openconfig::enums::OpenconfigWifiTypesOPERATINGFREQUENCY Radios_Radio_State::operating_frequency() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.State.operating_frequency)
  return static_cast< ::openconfig::enums::OpenconfigWifiTypesOPERATINGFREQUENCY >(operating_frequency_);
}
inline void Radios_Radio_State::set_operating_frequency(::openconfig::enums::OpenconfigWifiTypesOPERATINGFREQUENCY value) {
  
  operating_frequency_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_wifi_phy.Radios.Radio.State.operating_frequency)
}

// .ywrapper.UintValue rx_dot11_channel_utilization = 175802841 [(.yext.schemapath) = "/radios/radio/state/rx-dot11-channel-utilization"];
inline bool Radios_Radio_State::has_rx_dot11_channel_utilization() const {
  return this != internal_default_instance() && rx_dot11_channel_utilization_ != NULL;
}
inline const ::ywrapper::UintValue& Radios_Radio_State::rx_dot11_channel_utilization() const {
  const ::ywrapper::UintValue* p = rx_dot11_channel_utilization_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.State.rx_dot11_channel_utilization)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Radios_Radio_State::release_rx_dot11_channel_utilization() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.State.rx_dot11_channel_utilization)
  
  ::ywrapper::UintValue* temp = rx_dot11_channel_utilization_;
  rx_dot11_channel_utilization_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Radios_Radio_State::mutable_rx_dot11_channel_utilization() {
  
  if (rx_dot11_channel_utilization_ == NULL) {
    rx_dot11_channel_utilization_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.State.rx_dot11_channel_utilization)
  return rx_dot11_channel_utilization_;
}
inline void Radios_Radio_State::set_allocated_rx_dot11_channel_utilization(::ywrapper::UintValue* rx_dot11_channel_utilization) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rx_dot11_channel_utilization_);
  }
  if (rx_dot11_channel_utilization) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rx_dot11_channel_utilization = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rx_dot11_channel_utilization, submessage_arena);
    }
    
  } else {
    
  }
  rx_dot11_channel_utilization_ = rx_dot11_channel_utilization;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.State.rx_dot11_channel_utilization)
}

// .ywrapper.UintValue rx_noise_channel_utilization = 207038796 [(.yext.schemapath) = "/radios/radio/state/rx-noise-channel-utilization"];
inline bool Radios_Radio_State::has_rx_noise_channel_utilization() const {
  return this != internal_default_instance() && rx_noise_channel_utilization_ != NULL;
}
inline const ::ywrapper::UintValue& Radios_Radio_State::rx_noise_channel_utilization() const {
  const ::ywrapper::UintValue* p = rx_noise_channel_utilization_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.State.rx_noise_channel_utilization)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Radios_Radio_State::release_rx_noise_channel_utilization() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.State.rx_noise_channel_utilization)
  
  ::ywrapper::UintValue* temp = rx_noise_channel_utilization_;
  rx_noise_channel_utilization_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Radios_Radio_State::mutable_rx_noise_channel_utilization() {
  
  if (rx_noise_channel_utilization_ == NULL) {
    rx_noise_channel_utilization_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.State.rx_noise_channel_utilization)
  return rx_noise_channel_utilization_;
}
inline void Radios_Radio_State::set_allocated_rx_noise_channel_utilization(::ywrapper::UintValue* rx_noise_channel_utilization) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rx_noise_channel_utilization_);
  }
  if (rx_noise_channel_utilization) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rx_noise_channel_utilization = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rx_noise_channel_utilization, submessage_arena);
    }
    
  } else {
    
  }
  rx_noise_channel_utilization_ = rx_noise_channel_utilization;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.State.rx_noise_channel_utilization)
}

// .ywrapper.BoolValue scanning = 292089383 [(.yext.schemapath) = "/radios/radio/state/scanning"];
inline bool Radios_Radio_State::has_scanning() const {
  return this != internal_default_instance() && scanning_ != NULL;
}
inline const ::ywrapper::BoolValue& Radios_Radio_State::scanning() const {
  const ::ywrapper::BoolValue* p = scanning_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.State.scanning)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Radios_Radio_State::release_scanning() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.State.scanning)
  
  ::ywrapper::BoolValue* temp = scanning_;
  scanning_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Radios_Radio_State::mutable_scanning() {
  
  if (scanning_ == NULL) {
    scanning_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.State.scanning)
  return scanning_;
}
inline void Radios_Radio_State::set_allocated_scanning(::ywrapper::BoolValue* scanning) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(scanning_);
  }
  if (scanning) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scanning = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scanning, submessage_arena);
    }
    
  } else {
    
  }
  scanning_ = scanning;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.State.scanning)
}

// .ywrapper.UintValue scanning_defer_clients = 235604303 [(.yext.schemapath) = "/radios/radio/state/scanning-defer-clients"];
inline bool Radios_Radio_State::has_scanning_defer_clients() const {
  return this != internal_default_instance() && scanning_defer_clients_ != NULL;
}
inline const ::ywrapper::UintValue& Radios_Radio_State::scanning_defer_clients() const {
  const ::ywrapper::UintValue* p = scanning_defer_clients_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.State.scanning_defer_clients)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Radios_Radio_State::release_scanning_defer_clients() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.State.scanning_defer_clients)
  
  ::ywrapper::UintValue* temp = scanning_defer_clients_;
  scanning_defer_clients_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Radios_Radio_State::mutable_scanning_defer_clients() {
  
  if (scanning_defer_clients_ == NULL) {
    scanning_defer_clients_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.State.scanning_defer_clients)
  return scanning_defer_clients_;
}
inline void Radios_Radio_State::set_allocated_scanning_defer_clients(::ywrapper::UintValue* scanning_defer_clients) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(scanning_defer_clients_);
  }
  if (scanning_defer_clients) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scanning_defer_clients = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scanning_defer_clients, submessage_arena);
    }
    
  } else {
    
  }
  scanning_defer_clients_ = scanning_defer_clients;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.State.scanning_defer_clients)
}

// .ywrapper.BoolValue scanning_defer_traffic = 251179576 [(.yext.schemapath) = "/radios/radio/state/scanning-defer-traffic"];
inline bool Radios_Radio_State::has_scanning_defer_traffic() const {
  return this != internal_default_instance() && scanning_defer_traffic_ != NULL;
}
inline const ::ywrapper::BoolValue& Radios_Radio_State::scanning_defer_traffic() const {
  const ::ywrapper::BoolValue* p = scanning_defer_traffic_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.State.scanning_defer_traffic)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Radios_Radio_State::release_scanning_defer_traffic() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.State.scanning_defer_traffic)
  
  ::ywrapper::BoolValue* temp = scanning_defer_traffic_;
  scanning_defer_traffic_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Radios_Radio_State::mutable_scanning_defer_traffic() {
  
  if (scanning_defer_traffic_ == NULL) {
    scanning_defer_traffic_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.State.scanning_defer_traffic)
  return scanning_defer_traffic_;
}
inline void Radios_Radio_State::set_allocated_scanning_defer_traffic(::ywrapper::BoolValue* scanning_defer_traffic) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(scanning_defer_traffic_);
  }
  if (scanning_defer_traffic) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scanning_defer_traffic = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scanning_defer_traffic, submessage_arena);
    }
    
  } else {
    
  }
  scanning_defer_traffic_ = scanning_defer_traffic;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.State.scanning_defer_traffic)
}

// .ywrapper.UintValue scanning_dwell_time = 229045678 [(.yext.schemapath) = "/radios/radio/state/scanning-dwell-time"];
inline bool Radios_Radio_State::has_scanning_dwell_time() const {
  return this != internal_default_instance() && scanning_dwell_time_ != NULL;
}
inline const ::ywrapper::UintValue& Radios_Radio_State::scanning_dwell_time() const {
  const ::ywrapper::UintValue* p = scanning_dwell_time_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.State.scanning_dwell_time)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Radios_Radio_State::release_scanning_dwell_time() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.State.scanning_dwell_time)
  
  ::ywrapper::UintValue* temp = scanning_dwell_time_;
  scanning_dwell_time_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Radios_Radio_State::mutable_scanning_dwell_time() {
  
  if (scanning_dwell_time_ == NULL) {
    scanning_dwell_time_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.State.scanning_dwell_time)
  return scanning_dwell_time_;
}
inline void Radios_Radio_State::set_allocated_scanning_dwell_time(::ywrapper::UintValue* scanning_dwell_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(scanning_dwell_time_);
  }
  if (scanning_dwell_time) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scanning_dwell_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scanning_dwell_time, submessage_arena);
    }
    
  } else {
    
  }
  scanning_dwell_time_ = scanning_dwell_time;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.State.scanning_dwell_time)
}

// .ywrapper.UintValue scanning_interval = 397774491 [(.yext.schemapath) = "/radios/radio/state/scanning-interval"];
inline bool Radios_Radio_State::has_scanning_interval() const {
  return this != internal_default_instance() && scanning_interval_ != NULL;
}
inline const ::ywrapper::UintValue& Radios_Radio_State::scanning_interval() const {
  const ::ywrapper::UintValue* p = scanning_interval_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.State.scanning_interval)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Radios_Radio_State::release_scanning_interval() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.State.scanning_interval)
  
  ::ywrapper::UintValue* temp = scanning_interval_;
  scanning_interval_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Radios_Radio_State::mutable_scanning_interval() {
  
  if (scanning_interval_ == NULL) {
    scanning_interval_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.State.scanning_interval)
  return scanning_interval_;
}
inline void Radios_Radio_State::set_allocated_scanning_interval(::ywrapper::UintValue* scanning_interval) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(scanning_interval_);
  }
  if (scanning_interval) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scanning_interval = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scanning_interval, submessage_arena);
    }
    
  } else {
    
  }
  scanning_interval_ = scanning_interval;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.State.scanning_interval)
}

// .ywrapper.UintValue total_channel_utilization = 345472189 [(.yext.schemapath) = "/radios/radio/state/total-channel-utilization"];
inline bool Radios_Radio_State::has_total_channel_utilization() const {
  return this != internal_default_instance() && total_channel_utilization_ != NULL;
}
inline const ::ywrapper::UintValue& Radios_Radio_State::total_channel_utilization() const {
  const ::ywrapper::UintValue* p = total_channel_utilization_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.State.total_channel_utilization)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Radios_Radio_State::release_total_channel_utilization() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.State.total_channel_utilization)
  
  ::ywrapper::UintValue* temp = total_channel_utilization_;
  total_channel_utilization_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Radios_Radio_State::mutable_total_channel_utilization() {
  
  if (total_channel_utilization_ == NULL) {
    total_channel_utilization_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.State.total_channel_utilization)
  return total_channel_utilization_;
}
inline void Radios_Radio_State::set_allocated_total_channel_utilization(::ywrapper::UintValue* total_channel_utilization) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(total_channel_utilization_);
  }
  if (total_channel_utilization) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      total_channel_utilization = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, total_channel_utilization, submessage_arena);
    }
    
  } else {
    
  }
  total_channel_utilization_ = total_channel_utilization;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.State.total_channel_utilization)
}

// .ywrapper.UintValue transmit_power = 11818902 [(.yext.schemapath) = "/radios/radio/state/transmit-power"];
inline bool Radios_Radio_State::has_transmit_power() const {
  return this != internal_default_instance() && transmit_power_ != NULL;
}
inline const ::ywrapper::UintValue& Radios_Radio_State::transmit_power() const {
  const ::ywrapper::UintValue* p = transmit_power_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.State.transmit_power)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Radios_Radio_State::release_transmit_power() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.State.transmit_power)
  
  ::ywrapper::UintValue* temp = transmit_power_;
  transmit_power_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Radios_Radio_State::mutable_transmit_power() {
  
  if (transmit_power_ == NULL) {
    transmit_power_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.State.transmit_power)
  return transmit_power_;
}
inline void Radios_Radio_State::set_allocated_transmit_power(::ywrapper::UintValue* transmit_power) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(transmit_power_);
  }
  if (transmit_power) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transmit_power = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transmit_power, submessage_arena);
    }
    
  } else {
    
  }
  transmit_power_ = transmit_power;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.State.transmit_power)
}

// .ywrapper.UintValue tx_dot11_channel_utilization = 107177407 [(.yext.schemapath) = "/radios/radio/state/tx-dot11-channel-utilization"];
inline bool Radios_Radio_State::has_tx_dot11_channel_utilization() const {
  return this != internal_default_instance() && tx_dot11_channel_utilization_ != NULL;
}
inline const ::ywrapper::UintValue& Radios_Radio_State::tx_dot11_channel_utilization() const {
  const ::ywrapper::UintValue* p = tx_dot11_channel_utilization_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.State.tx_dot11_channel_utilization)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Radios_Radio_State::release_tx_dot11_channel_utilization() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.State.tx_dot11_channel_utilization)
  
  ::ywrapper::UintValue* temp = tx_dot11_channel_utilization_;
  tx_dot11_channel_utilization_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Radios_Radio_State::mutable_tx_dot11_channel_utilization() {
  
  if (tx_dot11_channel_utilization_ == NULL) {
    tx_dot11_channel_utilization_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.State.tx_dot11_channel_utilization)
  return tx_dot11_channel_utilization_;
}
inline void Radios_Radio_State::set_allocated_tx_dot11_channel_utilization(::ywrapper::UintValue* tx_dot11_channel_utilization) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(tx_dot11_channel_utilization_);
  }
  if (tx_dot11_channel_utilization) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tx_dot11_channel_utilization = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx_dot11_channel_utilization, submessage_arena);
    }
    
  } else {
    
  }
  tx_dot11_channel_utilization_ = tx_dot11_channel_utilization;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.State.tx_dot11_channel_utilization)
}

// -------------------------------------------------------------------

// Radios_Radio

// .openconfig.openconfig_wifi_phy.Radios.Radio.Config config = 25073214 [(.yext.schemapath) = "/radios/radio/config"];
inline bool Radios_Radio::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Radios_Radio::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_wifi_phy::Radios_Radio_Config& Radios_Radio::config() const {
  const ::openconfig::openconfig_wifi_phy::Radios_Radio_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_phy::Radios_Radio_Config*>(
      &::openconfig::openconfig_wifi_phy::_Radios_Radio_Config_default_instance_);
}
inline ::openconfig::openconfig_wifi_phy::Radios_Radio_Config* Radios_Radio::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.config)
  
  ::openconfig::openconfig_wifi_phy::Radios_Radio_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_phy::Radios_Radio_Config* Radios_Radio::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_wifi_phy::Radios_Radio_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.config)
  return config_;
}
inline void Radios_Radio::set_allocated_config(::openconfig::openconfig_wifi_phy::Radios_Radio_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.config)
}

// .openconfig.openconfig_wifi_phy.Radios.Radio.Neighbors neighbors = 225641045 [(.yext.schemapath) = "/radios/radio/neighbors"];
inline bool Radios_Radio::has_neighbors() const {
  return this != internal_default_instance() && neighbors_ != NULL;
}
inline void Radios_Radio::clear_neighbors() {
  if (GetArenaNoVirtual() == NULL && neighbors_ != NULL) {
    delete neighbors_;
  }
  neighbors_ = NULL;
}
inline const ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors& Radios_Radio::neighbors() const {
  const ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors* p = neighbors_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.neighbors)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors*>(
      &::openconfig::openconfig_wifi_phy::_Radios_Radio_Neighbors_default_instance_);
}
inline ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors* Radios_Radio::release_neighbors() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.neighbors)
  
  ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors* temp = neighbors_;
  neighbors_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors* Radios_Radio::mutable_neighbors() {
  
  if (neighbors_ == NULL) {
    neighbors_ = new ::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.neighbors)
  return neighbors_;
}
inline void Radios_Radio::set_allocated_neighbors(::openconfig::openconfig_wifi_phy::Radios_Radio_Neighbors* neighbors) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete neighbors_;
  }
  if (neighbors) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      neighbors = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, neighbors, submessage_arena);
    }
    
  } else {
    
  }
  neighbors_ = neighbors;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.neighbors)
}

// .openconfig.openconfig_wifi_phy.Radios.Radio.State state = 464575787 [(.yext.schemapath) = "/radios/radio/state"];
inline bool Radios_Radio::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Radios_Radio::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_wifi_phy::Radios_Radio_State& Radios_Radio::state() const {
  const ::openconfig::openconfig_wifi_phy::Radios_Radio_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.Radio.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_phy::Radios_Radio_State*>(
      &::openconfig::openconfig_wifi_phy::_Radios_Radio_State_default_instance_);
}
inline ::openconfig::openconfig_wifi_phy::Radios_Radio_State* Radios_Radio::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.Radio.state)
  
  ::openconfig::openconfig_wifi_phy::Radios_Radio_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_phy::Radios_Radio_State* Radios_Radio::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_wifi_phy::Radios_Radio_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.Radio.state)
  return state_;
}
inline void Radios_Radio::set_allocated_state(::openconfig::openconfig_wifi_phy::Radios_Radio_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.Radio.state)
}

// -------------------------------------------------------------------

// Radios_RadioKey

// uint64 id = 1 [(.yext.schemapath) = "/radios/radio/id"];
inline void Radios_RadioKey::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Radios_RadioKey::id() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.RadioKey.id)
  return id_;
}
inline void Radios_RadioKey::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_wifi_phy.Radios.RadioKey.id)
}

// .openconfig.openconfig_wifi_phy.Radios.Radio radio = 2;
inline bool Radios_RadioKey::has_radio() const {
  return this != internal_default_instance() && radio_ != NULL;
}
inline void Radios_RadioKey::clear_radio() {
  if (GetArenaNoVirtual() == NULL && radio_ != NULL) {
    delete radio_;
  }
  radio_ = NULL;
}
inline const ::openconfig::openconfig_wifi_phy::Radios_Radio& Radios_RadioKey::radio() const {
  const ::openconfig::openconfig_wifi_phy::Radios_Radio* p = radio_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.RadioKey.radio)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_phy::Radios_Radio*>(
      &::openconfig::openconfig_wifi_phy::_Radios_Radio_default_instance_);
}
inline ::openconfig::openconfig_wifi_phy::Radios_Radio* Radios_RadioKey::release_radio() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_phy.Radios.RadioKey.radio)
  
  ::openconfig::openconfig_wifi_phy::Radios_Radio* temp = radio_;
  radio_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_phy::Radios_Radio* Radios_RadioKey::mutable_radio() {
  
  if (radio_ == NULL) {
    radio_ = new ::openconfig::openconfig_wifi_phy::Radios_Radio;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.RadioKey.radio)
  return radio_;
}
inline void Radios_RadioKey::set_allocated_radio(::openconfig::openconfig_wifi_phy::Radios_Radio* radio) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete radio_;
  }
  if (radio) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      radio = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, radio, submessage_arena);
    }
    
  } else {
    
  }
  radio_ = radio;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_phy.Radios.RadioKey.radio)
}

// -------------------------------------------------------------------

// Radios

// repeated .openconfig.openconfig_wifi_phy.Radios.RadioKey radio = 508208457 [(.yext.schemapath) = "/radios/radio"];
inline int Radios::radio_size() const {
  return radio_.size();
}
inline void Radios::clear_radio() {
  radio_.Clear();
}
inline const ::openconfig::openconfig_wifi_phy::Radios_RadioKey& Radios::radio(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_phy.Radios.radio)
  return radio_.Get(index);
}
inline ::openconfig::openconfig_wifi_phy::Radios_RadioKey* Radios::mutable_radio(int index) {
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_phy.Radios.radio)
  return radio_.Mutable(index);
}
inline ::openconfig::openconfig_wifi_phy::Radios_RadioKey* Radios::add_radio() {
  // @@protoc_insertion_point(field_add:openconfig.openconfig_wifi_phy.Radios.radio)
  return radio_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_wifi_phy::Radios_RadioKey >*
Radios::mutable_radio() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_wifi_phy.Radios.radio)
  return &radio_;
}
inline const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_wifi_phy::Radios_RadioKey >&
Radios::radio() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_wifi_phy.Radios.radio)
  return radio_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace openconfig_wifi_phy
}  // namespace openconfig

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_openconfig_2fopenconfig_5fwifi_5fphy_2fopenconfig_5fwifi_5fphy_2eproto__INCLUDED
