// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openconfig/openconfig_channel_monitor/openconfig_channel_monitor.proto

#ifndef PROTOBUF_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto__INCLUDED
#define PROTOBUF_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "github.com/openconfig/ygot/proto/ywrapper/ywrapper.pb.h"
#include "github.com/openconfig/ygot/proto/yext/yext.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsChannelMonitors_ChannelMonitor_Channels_Channel_StateImpl();
void InitDefaultsChannelMonitors_ChannelMonitor_Channels_Channel_State();
void InitDefaultsChannelMonitors_ChannelMonitor_Channels_ChannelImpl();
void InitDefaultsChannelMonitors_ChannelMonitor_Channels_Channel();
void InitDefaultsChannelMonitors_ChannelMonitor_Channels_ChannelKeyImpl();
void InitDefaultsChannelMonitors_ChannelMonitor_Channels_ChannelKey();
void InitDefaultsChannelMonitors_ChannelMonitor_ChannelsImpl();
void InitDefaultsChannelMonitors_ChannelMonitor_Channels();
void InitDefaultsChannelMonitors_ChannelMonitor_ConfigImpl();
void InitDefaultsChannelMonitors_ChannelMonitor_Config();
void InitDefaultsChannelMonitors_ChannelMonitor_StateImpl();
void InitDefaultsChannelMonitors_ChannelMonitor_State();
void InitDefaultsChannelMonitors_ChannelMonitorImpl();
void InitDefaultsChannelMonitors_ChannelMonitor();
void InitDefaultsChannelMonitors_ChannelMonitorKeyImpl();
void InitDefaultsChannelMonitors_ChannelMonitorKey();
void InitDefaultsChannelMonitorsImpl();
void InitDefaultsChannelMonitors();
inline void InitDefaults() {
  InitDefaultsChannelMonitors_ChannelMonitor_Channels_Channel_State();
  InitDefaultsChannelMonitors_ChannelMonitor_Channels_Channel();
  InitDefaultsChannelMonitors_ChannelMonitor_Channels_ChannelKey();
  InitDefaultsChannelMonitors_ChannelMonitor_Channels();
  InitDefaultsChannelMonitors_ChannelMonitor_Config();
  InitDefaultsChannelMonitors_ChannelMonitor_State();
  InitDefaultsChannelMonitors_ChannelMonitor();
  InitDefaultsChannelMonitors_ChannelMonitorKey();
  InitDefaultsChannelMonitors();
}
}  // namespace protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto
namespace openconfig {
namespace openconfig_channel_monitor {
class ChannelMonitors;
class ChannelMonitorsDefaultTypeInternal;
extern ChannelMonitorsDefaultTypeInternal _ChannelMonitors_default_instance_;
class ChannelMonitors_ChannelMonitor;
class ChannelMonitors_ChannelMonitorDefaultTypeInternal;
extern ChannelMonitors_ChannelMonitorDefaultTypeInternal _ChannelMonitors_ChannelMonitor_default_instance_;
class ChannelMonitors_ChannelMonitorKey;
class ChannelMonitors_ChannelMonitorKeyDefaultTypeInternal;
extern ChannelMonitors_ChannelMonitorKeyDefaultTypeInternal _ChannelMonitors_ChannelMonitorKey_default_instance_;
class ChannelMonitors_ChannelMonitor_Channels;
class ChannelMonitors_ChannelMonitor_ChannelsDefaultTypeInternal;
extern ChannelMonitors_ChannelMonitor_ChannelsDefaultTypeInternal _ChannelMonitors_ChannelMonitor_Channels_default_instance_;
class ChannelMonitors_ChannelMonitor_Channels_Channel;
class ChannelMonitors_ChannelMonitor_Channels_ChannelDefaultTypeInternal;
extern ChannelMonitors_ChannelMonitor_Channels_ChannelDefaultTypeInternal _ChannelMonitors_ChannelMonitor_Channels_Channel_default_instance_;
class ChannelMonitors_ChannelMonitor_Channels_ChannelKey;
class ChannelMonitors_ChannelMonitor_Channels_ChannelKeyDefaultTypeInternal;
extern ChannelMonitors_ChannelMonitor_Channels_ChannelKeyDefaultTypeInternal _ChannelMonitors_ChannelMonitor_Channels_ChannelKey_default_instance_;
class ChannelMonitors_ChannelMonitor_Channels_Channel_State;
class ChannelMonitors_ChannelMonitor_Channels_Channel_StateDefaultTypeInternal;
extern ChannelMonitors_ChannelMonitor_Channels_Channel_StateDefaultTypeInternal _ChannelMonitors_ChannelMonitor_Channels_Channel_State_default_instance_;
class ChannelMonitors_ChannelMonitor_Config;
class ChannelMonitors_ChannelMonitor_ConfigDefaultTypeInternal;
extern ChannelMonitors_ChannelMonitor_ConfigDefaultTypeInternal _ChannelMonitors_ChannelMonitor_Config_default_instance_;
class ChannelMonitors_ChannelMonitor_State;
class ChannelMonitors_ChannelMonitor_StateDefaultTypeInternal;
extern ChannelMonitors_ChannelMonitor_StateDefaultTypeInternal _ChannelMonitors_ChannelMonitor_State_default_instance_;
}  // namespace openconfig_channel_monitor
}  // namespace openconfig
namespace openconfig {
namespace openconfig_channel_monitor {

// ===================================================================

class ChannelMonitors_ChannelMonitor_Channels_Channel_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.State) */ {
 public:
  ChannelMonitors_ChannelMonitor_Channels_Channel_State();
  virtual ~ChannelMonitors_ChannelMonitor_Channels_Channel_State();

  ChannelMonitors_ChannelMonitor_Channels_Channel_State(const ChannelMonitors_ChannelMonitor_Channels_Channel_State& from);

  inline ChannelMonitors_ChannelMonitor_Channels_Channel_State& operator=(const ChannelMonitors_ChannelMonitor_Channels_Channel_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChannelMonitors_ChannelMonitor_Channels_Channel_State(ChannelMonitors_ChannelMonitor_Channels_Channel_State&& from) noexcept
    : ChannelMonitors_ChannelMonitor_Channels_Channel_State() {
    *this = ::std::move(from);
  }

  inline ChannelMonitors_ChannelMonitor_Channels_Channel_State& operator=(ChannelMonitors_ChannelMonitor_Channels_Channel_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelMonitors_ChannelMonitor_Channels_Channel_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelMonitors_ChannelMonitor_Channels_Channel_State* internal_default_instance() {
    return reinterpret_cast<const ChannelMonitors_ChannelMonitor_Channels_Channel_State*>(
               &_ChannelMonitors_ChannelMonitor_Channels_Channel_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ChannelMonitors_ChannelMonitor_Channels_Channel_State* other);
  friend void swap(ChannelMonitors_ChannelMonitor_Channels_Channel_State& a, ChannelMonitors_ChannelMonitor_Channels_Channel_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChannelMonitors_ChannelMonitor_Channels_Channel_State* New() const PROTOBUF_FINAL { return New(NULL); }

  ChannelMonitors_ChannelMonitor_Channels_Channel_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChannelMonitors_ChannelMonitor_Channels_Channel_State& from);
  void MergeFrom(const ChannelMonitors_ChannelMonitor_Channels_Channel_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChannelMonitors_ChannelMonitor_Channels_Channel_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.BytesValue psd = 31486931 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel/state/psd"];
  bool has_psd() const;
  void clear_psd();
  static const int kPsdFieldNumber = 31486931;
  const ::ywrapper::BytesValue& psd() const;
  ::ywrapper::BytesValue* release_psd();
  ::ywrapper::BytesValue* mutable_psd();
  void set_allocated_psd(::ywrapper::BytesValue* psd);

  // .ywrapper.UintValue upper_frequency = 354726687 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel/state/upper-frequency"];
  bool has_upper_frequency() const;
  void clear_upper_frequency();
  static const int kUpperFrequencyFieldNumber = 354726687;
  const ::ywrapper::UintValue& upper_frequency() const;
  ::ywrapper::UintValue* release_upper_frequency();
  ::ywrapper::UintValue* mutable_upper_frequency();
  void set_allocated_upper_frequency(::ywrapper::UintValue* upper_frequency);

  // .ywrapper.UintValue lower_frequency = 403991936 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel/state/lower-frequency"];
  bool has_lower_frequency() const;
  void clear_lower_frequency();
  static const int kLowerFrequencyFieldNumber = 403991936;
  const ::ywrapper::UintValue& lower_frequency() const;
  ::ywrapper::UintValue* release_lower_frequency();
  ::ywrapper::UintValue* mutable_lower_frequency();
  void set_allocated_lower_frequency(::ywrapper::UintValue* lower_frequency);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::BytesValue* psd_;
  ::ywrapper::UintValue* upper_frequency_;
  ::ywrapper::UintValue* lower_frequency_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::InitDefaultsChannelMonitors_ChannelMonitor_Channels_Channel_StateImpl();
};
// -------------------------------------------------------------------

class ChannelMonitors_ChannelMonitor_Channels_Channel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel) */ {
 public:
  ChannelMonitors_ChannelMonitor_Channels_Channel();
  virtual ~ChannelMonitors_ChannelMonitor_Channels_Channel();

  ChannelMonitors_ChannelMonitor_Channels_Channel(const ChannelMonitors_ChannelMonitor_Channels_Channel& from);

  inline ChannelMonitors_ChannelMonitor_Channels_Channel& operator=(const ChannelMonitors_ChannelMonitor_Channels_Channel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChannelMonitors_ChannelMonitor_Channels_Channel(ChannelMonitors_ChannelMonitor_Channels_Channel&& from) noexcept
    : ChannelMonitors_ChannelMonitor_Channels_Channel() {
    *this = ::std::move(from);
  }

  inline ChannelMonitors_ChannelMonitor_Channels_Channel& operator=(ChannelMonitors_ChannelMonitor_Channels_Channel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelMonitors_ChannelMonitor_Channels_Channel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelMonitors_ChannelMonitor_Channels_Channel* internal_default_instance() {
    return reinterpret_cast<const ChannelMonitors_ChannelMonitor_Channels_Channel*>(
               &_ChannelMonitors_ChannelMonitor_Channels_Channel_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ChannelMonitors_ChannelMonitor_Channels_Channel* other);
  friend void swap(ChannelMonitors_ChannelMonitor_Channels_Channel& a, ChannelMonitors_ChannelMonitor_Channels_Channel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChannelMonitors_ChannelMonitor_Channels_Channel* New() const PROTOBUF_FINAL { return New(NULL); }

  ChannelMonitors_ChannelMonitor_Channels_Channel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChannelMonitors_ChannelMonitor_Channels_Channel& from);
  void MergeFrom(const ChannelMonitors_ChannelMonitor_Channels_Channel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChannelMonitors_ChannelMonitor_Channels_Channel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ChannelMonitors_ChannelMonitor_Channels_Channel_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.State state = 216667371 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 216667371;
  const ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel_State& state() const;
  ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel_State* release_state();
  ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel_State* state);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel_State* state_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::InitDefaultsChannelMonitors_ChannelMonitor_Channels_ChannelImpl();
};
// -------------------------------------------------------------------

class ChannelMonitors_ChannelMonitor_Channels_ChannelKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.ChannelKey) */ {
 public:
  ChannelMonitors_ChannelMonitor_Channels_ChannelKey();
  virtual ~ChannelMonitors_ChannelMonitor_Channels_ChannelKey();

  ChannelMonitors_ChannelMonitor_Channels_ChannelKey(const ChannelMonitors_ChannelMonitor_Channels_ChannelKey& from);

  inline ChannelMonitors_ChannelMonitor_Channels_ChannelKey& operator=(const ChannelMonitors_ChannelMonitor_Channels_ChannelKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChannelMonitors_ChannelMonitor_Channels_ChannelKey(ChannelMonitors_ChannelMonitor_Channels_ChannelKey&& from) noexcept
    : ChannelMonitors_ChannelMonitor_Channels_ChannelKey() {
    *this = ::std::move(from);
  }

  inline ChannelMonitors_ChannelMonitor_Channels_ChannelKey& operator=(ChannelMonitors_ChannelMonitor_Channels_ChannelKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelMonitors_ChannelMonitor_Channels_ChannelKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelMonitors_ChannelMonitor_Channels_ChannelKey* internal_default_instance() {
    return reinterpret_cast<const ChannelMonitors_ChannelMonitor_Channels_ChannelKey*>(
               &_ChannelMonitors_ChannelMonitor_Channels_ChannelKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ChannelMonitors_ChannelMonitor_Channels_ChannelKey* other);
  friend void swap(ChannelMonitors_ChannelMonitor_Channels_ChannelKey& a, ChannelMonitors_ChannelMonitor_Channels_ChannelKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChannelMonitors_ChannelMonitor_Channels_ChannelKey* New() const PROTOBUF_FINAL { return New(NULL); }

  ChannelMonitors_ChannelMonitor_Channels_ChannelKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChannelMonitors_ChannelMonitor_Channels_ChannelKey& from);
  void MergeFrom(const ChannelMonitors_ChannelMonitor_Channels_ChannelKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChannelMonitors_ChannelMonitor_Channels_ChannelKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel channel = 3;
  bool has_channel() const;
  void clear_channel();
  static const int kChannelFieldNumber = 3;
  const ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel& channel() const;
  ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel* release_channel();
  ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel* mutable_channel();
  void set_allocated_channel(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel* channel);

  // uint64 lower_frequency = 1 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel/lower-frequency"];
  void clear_lower_frequency();
  static const int kLowerFrequencyFieldNumber = 1;
  ::google::protobuf::uint64 lower_frequency() const;
  void set_lower_frequency(::google::protobuf::uint64 value);

  // uint64 upper_frequency = 2 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel/upper-frequency"];
  void clear_upper_frequency();
  static const int kUpperFrequencyFieldNumber = 2;
  ::google::protobuf::uint64 upper_frequency() const;
  void set_upper_frequency(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.ChannelKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel* channel_;
  ::google::protobuf::uint64 lower_frequency_;
  ::google::protobuf::uint64 upper_frequency_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::InitDefaultsChannelMonitors_ChannelMonitor_Channels_ChannelKeyImpl();
};
// -------------------------------------------------------------------

class ChannelMonitors_ChannelMonitor_Channels : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels) */ {
 public:
  ChannelMonitors_ChannelMonitor_Channels();
  virtual ~ChannelMonitors_ChannelMonitor_Channels();

  ChannelMonitors_ChannelMonitor_Channels(const ChannelMonitors_ChannelMonitor_Channels& from);

  inline ChannelMonitors_ChannelMonitor_Channels& operator=(const ChannelMonitors_ChannelMonitor_Channels& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChannelMonitors_ChannelMonitor_Channels(ChannelMonitors_ChannelMonitor_Channels&& from) noexcept
    : ChannelMonitors_ChannelMonitor_Channels() {
    *this = ::std::move(from);
  }

  inline ChannelMonitors_ChannelMonitor_Channels& operator=(ChannelMonitors_ChannelMonitor_Channels&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelMonitors_ChannelMonitor_Channels& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelMonitors_ChannelMonitor_Channels* internal_default_instance() {
    return reinterpret_cast<const ChannelMonitors_ChannelMonitor_Channels*>(
               &_ChannelMonitors_ChannelMonitor_Channels_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ChannelMonitors_ChannelMonitor_Channels* other);
  friend void swap(ChannelMonitors_ChannelMonitor_Channels& a, ChannelMonitors_ChannelMonitor_Channels& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChannelMonitors_ChannelMonitor_Channels* New() const PROTOBUF_FINAL { return New(NULL); }

  ChannelMonitors_ChannelMonitor_Channels* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChannelMonitors_ChannelMonitor_Channels& from);
  void MergeFrom(const ChannelMonitors_ChannelMonitor_Channels& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChannelMonitors_ChannelMonitor_Channels* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ChannelMonitors_ChannelMonitor_Channels_Channel Channel;
  typedef ChannelMonitors_ChannelMonitor_Channels_ChannelKey ChannelKey;

  // accessors -------------------------------------------------------

  // repeated .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.ChannelKey channel = 494547849 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel"];
  int channel_size() const;
  void clear_channel();
  static const int kChannelFieldNumber = 494547849;
  const ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_ChannelKey& channel(int index) const;
  ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_ChannelKey* mutable_channel(int index);
  ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_ChannelKey* add_channel();
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_ChannelKey >*
      mutable_channel();
  const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_ChannelKey >&
      channel() const;

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_ChannelKey > channel_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::InitDefaultsChannelMonitors_ChannelMonitor_ChannelsImpl();
};
// -------------------------------------------------------------------

class ChannelMonitors_ChannelMonitor_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Config) */ {
 public:
  ChannelMonitors_ChannelMonitor_Config();
  virtual ~ChannelMonitors_ChannelMonitor_Config();

  ChannelMonitors_ChannelMonitor_Config(const ChannelMonitors_ChannelMonitor_Config& from);

  inline ChannelMonitors_ChannelMonitor_Config& operator=(const ChannelMonitors_ChannelMonitor_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChannelMonitors_ChannelMonitor_Config(ChannelMonitors_ChannelMonitor_Config&& from) noexcept
    : ChannelMonitors_ChannelMonitor_Config() {
    *this = ::std::move(from);
  }

  inline ChannelMonitors_ChannelMonitor_Config& operator=(ChannelMonitors_ChannelMonitor_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelMonitors_ChannelMonitor_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelMonitors_ChannelMonitor_Config* internal_default_instance() {
    return reinterpret_cast<const ChannelMonitors_ChannelMonitor_Config*>(
               &_ChannelMonitors_ChannelMonitor_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ChannelMonitors_ChannelMonitor_Config* other);
  friend void swap(ChannelMonitors_ChannelMonitor_Config& a, ChannelMonitors_ChannelMonitor_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChannelMonitors_ChannelMonitor_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  ChannelMonitors_ChannelMonitor_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChannelMonitors_ChannelMonitor_Config& from);
  void MergeFrom(const ChannelMonitors_ChannelMonitor_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChannelMonitors_ChannelMonitor_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue monitor_port = 92959424 [(.yext.schemapath) = "/channel-monitors/channel-monitor/config/monitor-port"];
  bool has_monitor_port() const;
  void clear_monitor_port();
  static const int kMonitorPortFieldNumber = 92959424;
  const ::ywrapper::StringValue& monitor_port() const;
  ::ywrapper::StringValue* release_monitor_port();
  ::ywrapper::StringValue* mutable_monitor_port();
  void set_allocated_monitor_port(::ywrapper::StringValue* monitor_port);

  // .ywrapper.StringValue name = 232841471 [(.yext.schemapath) = "/channel-monitors/channel-monitor/config/name"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 232841471;
  const ::ywrapper::StringValue& name() const;
  ::ywrapper::StringValue* release_name();
  ::ywrapper::StringValue* mutable_name();
  void set_allocated_name(::ywrapper::StringValue* name);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* monitor_port_;
  ::ywrapper::StringValue* name_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::InitDefaultsChannelMonitors_ChannelMonitor_ConfigImpl();
};
// -------------------------------------------------------------------

class ChannelMonitors_ChannelMonitor_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.State) */ {
 public:
  ChannelMonitors_ChannelMonitor_State();
  virtual ~ChannelMonitors_ChannelMonitor_State();

  ChannelMonitors_ChannelMonitor_State(const ChannelMonitors_ChannelMonitor_State& from);

  inline ChannelMonitors_ChannelMonitor_State& operator=(const ChannelMonitors_ChannelMonitor_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChannelMonitors_ChannelMonitor_State(ChannelMonitors_ChannelMonitor_State&& from) noexcept
    : ChannelMonitors_ChannelMonitor_State() {
    *this = ::std::move(from);
  }

  inline ChannelMonitors_ChannelMonitor_State& operator=(ChannelMonitors_ChannelMonitor_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelMonitors_ChannelMonitor_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelMonitors_ChannelMonitor_State* internal_default_instance() {
    return reinterpret_cast<const ChannelMonitors_ChannelMonitor_State*>(
               &_ChannelMonitors_ChannelMonitor_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(ChannelMonitors_ChannelMonitor_State* other);
  friend void swap(ChannelMonitors_ChannelMonitor_State& a, ChannelMonitors_ChannelMonitor_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChannelMonitors_ChannelMonitor_State* New() const PROTOBUF_FINAL { return New(NULL); }

  ChannelMonitors_ChannelMonitor_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChannelMonitors_ChannelMonitor_State& from);
  void MergeFrom(const ChannelMonitors_ChannelMonitor_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChannelMonitors_ChannelMonitor_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue monitor_port = 183347389 [(.yext.schemapath) = "/channel-monitors/channel-monitor/state/monitor-port"];
  bool has_monitor_port() const;
  void clear_monitor_port();
  static const int kMonitorPortFieldNumber = 183347389;
  const ::ywrapper::StringValue& monitor_port() const;
  ::ywrapper::StringValue* release_monitor_port();
  ::ywrapper::StringValue* mutable_monitor_port();
  void set_allocated_monitor_port(::ywrapper::StringValue* monitor_port);

  // .ywrapper.StringValue name = 248662866 [(.yext.schemapath) = "/channel-monitors/channel-monitor/state/name"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 248662866;
  const ::ywrapper::StringValue& name() const;
  ::ywrapper::StringValue* release_name();
  ::ywrapper::StringValue* mutable_name();
  void set_allocated_name(::ywrapper::StringValue* name);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* monitor_port_;
  ::ywrapper::StringValue* name_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::InitDefaultsChannelMonitors_ChannelMonitor_StateImpl();
};
// -------------------------------------------------------------------

class ChannelMonitors_ChannelMonitor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor) */ {
 public:
  ChannelMonitors_ChannelMonitor();
  virtual ~ChannelMonitors_ChannelMonitor();

  ChannelMonitors_ChannelMonitor(const ChannelMonitors_ChannelMonitor& from);

  inline ChannelMonitors_ChannelMonitor& operator=(const ChannelMonitors_ChannelMonitor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChannelMonitors_ChannelMonitor(ChannelMonitors_ChannelMonitor&& from) noexcept
    : ChannelMonitors_ChannelMonitor() {
    *this = ::std::move(from);
  }

  inline ChannelMonitors_ChannelMonitor& operator=(ChannelMonitors_ChannelMonitor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelMonitors_ChannelMonitor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelMonitors_ChannelMonitor* internal_default_instance() {
    return reinterpret_cast<const ChannelMonitors_ChannelMonitor*>(
               &_ChannelMonitors_ChannelMonitor_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(ChannelMonitors_ChannelMonitor* other);
  friend void swap(ChannelMonitors_ChannelMonitor& a, ChannelMonitors_ChannelMonitor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChannelMonitors_ChannelMonitor* New() const PROTOBUF_FINAL { return New(NULL); }

  ChannelMonitors_ChannelMonitor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChannelMonitors_ChannelMonitor& from);
  void MergeFrom(const ChannelMonitors_ChannelMonitor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChannelMonitors_ChannelMonitor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ChannelMonitors_ChannelMonitor_Channels Channels;
  typedef ChannelMonitors_ChannelMonitor_Config Config;
  typedef ChannelMonitors_ChannelMonitor_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels channels = 29366261 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels"];
  bool has_channels() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 29366261;
  const ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels& channels() const;
  ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels* release_channels();
  ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels* mutable_channels();
  void set_allocated_channels(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels* channels);

  // .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Config config = 381825399 [(.yext.schemapath) = "/channel-monitors/channel-monitor/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 381825399;
  const ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Config& config() const;
  ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Config* release_config();
  ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Config* config);

  // .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.State state = 460661672 [(.yext.schemapath) = "/channel-monitors/channel-monitor/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 460661672;
  const ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_State& state() const;
  ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_State* release_state();
  ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_State* state);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels* channels_;
  ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Config* config_;
  ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_State* state_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::InitDefaultsChannelMonitors_ChannelMonitorImpl();
};
// -------------------------------------------------------------------

class ChannelMonitors_ChannelMonitorKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey) */ {
 public:
  ChannelMonitors_ChannelMonitorKey();
  virtual ~ChannelMonitors_ChannelMonitorKey();

  ChannelMonitors_ChannelMonitorKey(const ChannelMonitors_ChannelMonitorKey& from);

  inline ChannelMonitors_ChannelMonitorKey& operator=(const ChannelMonitors_ChannelMonitorKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChannelMonitors_ChannelMonitorKey(ChannelMonitors_ChannelMonitorKey&& from) noexcept
    : ChannelMonitors_ChannelMonitorKey() {
    *this = ::std::move(from);
  }

  inline ChannelMonitors_ChannelMonitorKey& operator=(ChannelMonitors_ChannelMonitorKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelMonitors_ChannelMonitorKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelMonitors_ChannelMonitorKey* internal_default_instance() {
    return reinterpret_cast<const ChannelMonitors_ChannelMonitorKey*>(
               &_ChannelMonitors_ChannelMonitorKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(ChannelMonitors_ChannelMonitorKey* other);
  friend void swap(ChannelMonitors_ChannelMonitorKey& a, ChannelMonitors_ChannelMonitorKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChannelMonitors_ChannelMonitorKey* New() const PROTOBUF_FINAL { return New(NULL); }

  ChannelMonitors_ChannelMonitorKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChannelMonitors_ChannelMonitorKey& from);
  void MergeFrom(const ChannelMonitors_ChannelMonitorKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChannelMonitors_ChannelMonitorKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1 [(.yext.schemapath) = "/channel-monitors/channel-monitor/name"];
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor channel_monitor = 2;
  bool has_channel_monitor() const;
  void clear_channel_monitor();
  static const int kChannelMonitorFieldNumber = 2;
  const ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor& channel_monitor() const;
  ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor* release_channel_monitor();
  ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor* mutable_channel_monitor();
  void set_allocated_channel_monitor(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor* channel_monitor);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor* channel_monitor_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::InitDefaultsChannelMonitors_ChannelMonitorKeyImpl();
};
// -------------------------------------------------------------------

class ChannelMonitors : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_channel_monitor.ChannelMonitors) */ {
 public:
  ChannelMonitors();
  virtual ~ChannelMonitors();

  ChannelMonitors(const ChannelMonitors& from);

  inline ChannelMonitors& operator=(const ChannelMonitors& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChannelMonitors(ChannelMonitors&& from) noexcept
    : ChannelMonitors() {
    *this = ::std::move(from);
  }

  inline ChannelMonitors& operator=(ChannelMonitors&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelMonitors& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelMonitors* internal_default_instance() {
    return reinterpret_cast<const ChannelMonitors*>(
               &_ChannelMonitors_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(ChannelMonitors* other);
  friend void swap(ChannelMonitors& a, ChannelMonitors& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChannelMonitors* New() const PROTOBUF_FINAL { return New(NULL); }

  ChannelMonitors* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChannelMonitors& from);
  void MergeFrom(const ChannelMonitors& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChannelMonitors* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ChannelMonitors_ChannelMonitor ChannelMonitor;
  typedef ChannelMonitors_ChannelMonitorKey ChannelMonitorKey;

  // accessors -------------------------------------------------------

  // repeated .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey channel_monitor = 228142614 [(.yext.schemapath) = "/channel-monitors/channel-monitor"];
  int channel_monitor_size() const;
  void clear_channel_monitor();
  static const int kChannelMonitorFieldNumber = 228142614;
  const ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitorKey& channel_monitor(int index) const;
  ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitorKey* mutable_channel_monitor(int index);
  ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitorKey* add_channel_monitor();
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitorKey >*
      mutable_channel_monitor();
  const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitorKey >&
      channel_monitor() const;

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_channel_monitor.ChannelMonitors)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitorKey > channel_monitor_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::InitDefaultsChannelMonitorsImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChannelMonitors_ChannelMonitor_Channels_Channel_State

// .ywrapper.UintValue lower_frequency = 403991936 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel/state/lower-frequency"];
inline bool ChannelMonitors_ChannelMonitor_Channels_Channel_State::has_lower_frequency() const {
  return this != internal_default_instance() && lower_frequency_ != NULL;
}
inline const ::ywrapper::UintValue& ChannelMonitors_ChannelMonitor_Channels_Channel_State::lower_frequency() const {
  const ::ywrapper::UintValue* p = lower_frequency_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.State.lower_frequency)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* ChannelMonitors_ChannelMonitor_Channels_Channel_State::release_lower_frequency() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.State.lower_frequency)
  
  ::ywrapper::UintValue* temp = lower_frequency_;
  lower_frequency_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* ChannelMonitors_ChannelMonitor_Channels_Channel_State::mutable_lower_frequency() {
  
  if (lower_frequency_ == NULL) {
    lower_frequency_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.State.lower_frequency)
  return lower_frequency_;
}
inline void ChannelMonitors_ChannelMonitor_Channels_Channel_State::set_allocated_lower_frequency(::ywrapper::UintValue* lower_frequency) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lower_frequency_);
  }
  if (lower_frequency) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lower_frequency = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lower_frequency, submessage_arena);
    }
    
  } else {
    
  }
  lower_frequency_ = lower_frequency;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.State.lower_frequency)
}

// .ywrapper.BytesValue psd = 31486931 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel/state/psd"];
inline bool ChannelMonitors_ChannelMonitor_Channels_Channel_State::has_psd() const {
  return this != internal_default_instance() && psd_ != NULL;
}
inline const ::ywrapper::BytesValue& ChannelMonitors_ChannelMonitor_Channels_Channel_State::psd() const {
  const ::ywrapper::BytesValue* p = psd_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.State.psd)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BytesValue*>(
      &::ywrapper::_BytesValue_default_instance_);
}
inline ::ywrapper::BytesValue* ChannelMonitors_ChannelMonitor_Channels_Channel_State::release_psd() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.State.psd)
  
  ::ywrapper::BytesValue* temp = psd_;
  psd_ = NULL;
  return temp;
}
inline ::ywrapper::BytesValue* ChannelMonitors_ChannelMonitor_Channels_Channel_State::mutable_psd() {
  
  if (psd_ == NULL) {
    psd_ = new ::ywrapper::BytesValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.State.psd)
  return psd_;
}
inline void ChannelMonitors_ChannelMonitor_Channels_Channel_State::set_allocated_psd(::ywrapper::BytesValue* psd) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(psd_);
  }
  if (psd) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      psd = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, psd, submessage_arena);
    }
    
  } else {
    
  }
  psd_ = psd;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.State.psd)
}

// .ywrapper.UintValue upper_frequency = 354726687 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel/state/upper-frequency"];
inline bool ChannelMonitors_ChannelMonitor_Channels_Channel_State::has_upper_frequency() const {
  return this != internal_default_instance() && upper_frequency_ != NULL;
}
inline const ::ywrapper::UintValue& ChannelMonitors_ChannelMonitor_Channels_Channel_State::upper_frequency() const {
  const ::ywrapper::UintValue* p = upper_frequency_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.State.upper_frequency)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* ChannelMonitors_ChannelMonitor_Channels_Channel_State::release_upper_frequency() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.State.upper_frequency)
  
  ::ywrapper::UintValue* temp = upper_frequency_;
  upper_frequency_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* ChannelMonitors_ChannelMonitor_Channels_Channel_State::mutable_upper_frequency() {
  
  if (upper_frequency_ == NULL) {
    upper_frequency_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.State.upper_frequency)
  return upper_frequency_;
}
inline void ChannelMonitors_ChannelMonitor_Channels_Channel_State::set_allocated_upper_frequency(::ywrapper::UintValue* upper_frequency) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(upper_frequency_);
  }
  if (upper_frequency) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      upper_frequency = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, upper_frequency, submessage_arena);
    }
    
  } else {
    
  }
  upper_frequency_ = upper_frequency;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.State.upper_frequency)
}

// -------------------------------------------------------------------

// ChannelMonitors_ChannelMonitor_Channels_Channel

// .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.State state = 216667371 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel/state"];
inline bool ChannelMonitors_ChannelMonitor_Channels_Channel::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void ChannelMonitors_ChannelMonitor_Channels_Channel::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel_State& ChannelMonitors_ChannelMonitor_Channels_Channel::state() const {
  const ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel_State*>(
      &::openconfig::openconfig_channel_monitor::_ChannelMonitors_ChannelMonitor_Channels_Channel_State_default_instance_);
}
inline ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel_State* ChannelMonitors_ChannelMonitor_Channels_Channel::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.state)
  
  ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel_State* ChannelMonitors_ChannelMonitor_Channels_Channel::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.state)
  return state_;
}
inline void ChannelMonitors_ChannelMonitor_Channels_Channel::set_allocated_state(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.state)
}

// -------------------------------------------------------------------

// ChannelMonitors_ChannelMonitor_Channels_ChannelKey

// uint64 lower_frequency = 1 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel/lower-frequency"];
inline void ChannelMonitors_ChannelMonitor_Channels_ChannelKey::clear_lower_frequency() {
  lower_frequency_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ChannelMonitors_ChannelMonitor_Channels_ChannelKey::lower_frequency() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.ChannelKey.lower_frequency)
  return lower_frequency_;
}
inline void ChannelMonitors_ChannelMonitor_Channels_ChannelKey::set_lower_frequency(::google::protobuf::uint64 value) {
  
  lower_frequency_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.ChannelKey.lower_frequency)
}

// uint64 upper_frequency = 2 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel/upper-frequency"];
inline void ChannelMonitors_ChannelMonitor_Channels_ChannelKey::clear_upper_frequency() {
  upper_frequency_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ChannelMonitors_ChannelMonitor_Channels_ChannelKey::upper_frequency() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.ChannelKey.upper_frequency)
  return upper_frequency_;
}
inline void ChannelMonitors_ChannelMonitor_Channels_ChannelKey::set_upper_frequency(::google::protobuf::uint64 value) {
  
  upper_frequency_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.ChannelKey.upper_frequency)
}

// .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel channel = 3;
inline bool ChannelMonitors_ChannelMonitor_Channels_ChannelKey::has_channel() const {
  return this != internal_default_instance() && channel_ != NULL;
}
inline void ChannelMonitors_ChannelMonitor_Channels_ChannelKey::clear_channel() {
  if (GetArenaNoVirtual() == NULL && channel_ != NULL) {
    delete channel_;
  }
  channel_ = NULL;
}
inline const ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel& ChannelMonitors_ChannelMonitor_Channels_ChannelKey::channel() const {
  const ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel* p = channel_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.ChannelKey.channel)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel*>(
      &::openconfig::openconfig_channel_monitor::_ChannelMonitors_ChannelMonitor_Channels_Channel_default_instance_);
}
inline ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel* ChannelMonitors_ChannelMonitor_Channels_ChannelKey::release_channel() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.ChannelKey.channel)
  
  ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel* temp = channel_;
  channel_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel* ChannelMonitors_ChannelMonitor_Channels_ChannelKey::mutable_channel() {
  
  if (channel_ == NULL) {
    channel_ = new ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.ChannelKey.channel)
  return channel_;
}
inline void ChannelMonitors_ChannelMonitor_Channels_ChannelKey::set_allocated_channel(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel* channel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete channel_;
  }
  if (channel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      channel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, channel, submessage_arena);
    }
    
  } else {
    
  }
  channel_ = channel;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.ChannelKey.channel)
}

// -------------------------------------------------------------------

// ChannelMonitors_ChannelMonitor_Channels

// repeated .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.ChannelKey channel = 494547849 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel"];
inline int ChannelMonitors_ChannelMonitor_Channels::channel_size() const {
  return channel_.size();
}
inline void ChannelMonitors_ChannelMonitor_Channels::clear_channel() {
  channel_.Clear();
}
inline const ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_ChannelKey& ChannelMonitors_ChannelMonitor_Channels::channel(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.channel)
  return channel_.Get(index);
}
inline ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_ChannelKey* ChannelMonitors_ChannelMonitor_Channels::mutable_channel(int index) {
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.channel)
  return channel_.Mutable(index);
}
inline ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_ChannelKey* ChannelMonitors_ChannelMonitor_Channels::add_channel() {
  // @@protoc_insertion_point(field_add:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.channel)
  return channel_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_ChannelKey >*
ChannelMonitors_ChannelMonitor_Channels::mutable_channel() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.channel)
  return &channel_;
}
inline const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_ChannelKey >&
ChannelMonitors_ChannelMonitor_Channels::channel() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.channel)
  return channel_;
}

// -------------------------------------------------------------------

// ChannelMonitors_ChannelMonitor_Config

// .ywrapper.StringValue monitor_port = 92959424 [(.yext.schemapath) = "/channel-monitors/channel-monitor/config/monitor-port"];
inline bool ChannelMonitors_ChannelMonitor_Config::has_monitor_port() const {
  return this != internal_default_instance() && monitor_port_ != NULL;
}
inline const ::ywrapper::StringValue& ChannelMonitors_ChannelMonitor_Config::monitor_port() const {
  const ::ywrapper::StringValue* p = monitor_port_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Config.monitor_port)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* ChannelMonitors_ChannelMonitor_Config::release_monitor_port() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Config.monitor_port)
  
  ::ywrapper::StringValue* temp = monitor_port_;
  monitor_port_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* ChannelMonitors_ChannelMonitor_Config::mutable_monitor_port() {
  
  if (monitor_port_ == NULL) {
    monitor_port_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Config.monitor_port)
  return monitor_port_;
}
inline void ChannelMonitors_ChannelMonitor_Config::set_allocated_monitor_port(::ywrapper::StringValue* monitor_port) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(monitor_port_);
  }
  if (monitor_port) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      monitor_port = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, monitor_port, submessage_arena);
    }
    
  } else {
    
  }
  monitor_port_ = monitor_port;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Config.monitor_port)
}

// .ywrapper.StringValue name = 232841471 [(.yext.schemapath) = "/channel-monitors/channel-monitor/config/name"];
inline bool ChannelMonitors_ChannelMonitor_Config::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::ywrapper::StringValue& ChannelMonitors_ChannelMonitor_Config::name() const {
  const ::ywrapper::StringValue* p = name_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Config.name)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* ChannelMonitors_ChannelMonitor_Config::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Config.name)
  
  ::ywrapper::StringValue* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* ChannelMonitors_ChannelMonitor_Config::mutable_name() {
  
  if (name_ == NULL) {
    name_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Config.name)
  return name_;
}
inline void ChannelMonitors_ChannelMonitor_Config::set_allocated_name(::ywrapper::StringValue* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Config.name)
}

// -------------------------------------------------------------------

// ChannelMonitors_ChannelMonitor_State

// .ywrapper.StringValue monitor_port = 183347389 [(.yext.schemapath) = "/channel-monitors/channel-monitor/state/monitor-port"];
inline bool ChannelMonitors_ChannelMonitor_State::has_monitor_port() const {
  return this != internal_default_instance() && monitor_port_ != NULL;
}
inline const ::ywrapper::StringValue& ChannelMonitors_ChannelMonitor_State::monitor_port() const {
  const ::ywrapper::StringValue* p = monitor_port_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.State.monitor_port)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* ChannelMonitors_ChannelMonitor_State::release_monitor_port() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.State.monitor_port)
  
  ::ywrapper::StringValue* temp = monitor_port_;
  monitor_port_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* ChannelMonitors_ChannelMonitor_State::mutable_monitor_port() {
  
  if (monitor_port_ == NULL) {
    monitor_port_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.State.monitor_port)
  return monitor_port_;
}
inline void ChannelMonitors_ChannelMonitor_State::set_allocated_monitor_port(::ywrapper::StringValue* monitor_port) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(monitor_port_);
  }
  if (monitor_port) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      monitor_port = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, monitor_port, submessage_arena);
    }
    
  } else {
    
  }
  monitor_port_ = monitor_port;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.State.monitor_port)
}

// .ywrapper.StringValue name = 248662866 [(.yext.schemapath) = "/channel-monitors/channel-monitor/state/name"];
inline bool ChannelMonitors_ChannelMonitor_State::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::ywrapper::StringValue& ChannelMonitors_ChannelMonitor_State::name() const {
  const ::ywrapper::StringValue* p = name_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.State.name)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* ChannelMonitors_ChannelMonitor_State::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.State.name)
  
  ::ywrapper::StringValue* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* ChannelMonitors_ChannelMonitor_State::mutable_name() {
  
  if (name_ == NULL) {
    name_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.State.name)
  return name_;
}
inline void ChannelMonitors_ChannelMonitor_State::set_allocated_name(::ywrapper::StringValue* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.State.name)
}

// -------------------------------------------------------------------

// ChannelMonitors_ChannelMonitor

// .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels channels = 29366261 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels"];
inline bool ChannelMonitors_ChannelMonitor::has_channels() const {
  return this != internal_default_instance() && channels_ != NULL;
}
inline void ChannelMonitors_ChannelMonitor::clear_channels() {
  if (GetArenaNoVirtual() == NULL && channels_ != NULL) {
    delete channels_;
  }
  channels_ = NULL;
}
inline const ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels& ChannelMonitors_ChannelMonitor::channels() const {
  const ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels* p = channels_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.channels)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels*>(
      &::openconfig::openconfig_channel_monitor::_ChannelMonitors_ChannelMonitor_Channels_default_instance_);
}
inline ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels* ChannelMonitors_ChannelMonitor::release_channels() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.channels)
  
  ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels* temp = channels_;
  channels_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels* ChannelMonitors_ChannelMonitor::mutable_channels() {
  
  if (channels_ == NULL) {
    channels_ = new ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.channels)
  return channels_;
}
inline void ChannelMonitors_ChannelMonitor::set_allocated_channels(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels* channels) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete channels_;
  }
  if (channels) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      channels = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, channels, submessage_arena);
    }
    
  } else {
    
  }
  channels_ = channels;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.channels)
}

// .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Config config = 381825399 [(.yext.schemapath) = "/channel-monitors/channel-monitor/config"];
inline bool ChannelMonitors_ChannelMonitor::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void ChannelMonitors_ChannelMonitor::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Config& ChannelMonitors_ChannelMonitor::config() const {
  const ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Config*>(
      &::openconfig::openconfig_channel_monitor::_ChannelMonitors_ChannelMonitor_Config_default_instance_);
}
inline ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Config* ChannelMonitors_ChannelMonitor::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.config)
  
  ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Config* ChannelMonitors_ChannelMonitor::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.config)
  return config_;
}
inline void ChannelMonitors_ChannelMonitor::set_allocated_config(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.config)
}

// .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.State state = 460661672 [(.yext.schemapath) = "/channel-monitors/channel-monitor/state"];
inline bool ChannelMonitors_ChannelMonitor::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void ChannelMonitors_ChannelMonitor::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_State& ChannelMonitors_ChannelMonitor::state() const {
  const ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_State*>(
      &::openconfig::openconfig_channel_monitor::_ChannelMonitors_ChannelMonitor_State_default_instance_);
}
inline ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_State* ChannelMonitors_ChannelMonitor::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.state)
  
  ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_State* ChannelMonitors_ChannelMonitor::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.state)
  return state_;
}
inline void ChannelMonitors_ChannelMonitor::set_allocated_state(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.state)
}

// -------------------------------------------------------------------

// ChannelMonitors_ChannelMonitorKey

// string name = 1 [(.yext.schemapath) = "/channel-monitors/channel-monitor/name"];
inline void ChannelMonitors_ChannelMonitorKey::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChannelMonitors_ChannelMonitorKey::name() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey.name)
  return name_.GetNoArena();
}
inline void ChannelMonitors_ChannelMonitorKey::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey.name)
}
#if LANG_CXX11
inline void ChannelMonitors_ChannelMonitorKey::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey.name)
}
#endif
inline void ChannelMonitors_ChannelMonitorKey::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey.name)
}
inline void ChannelMonitors_ChannelMonitorKey::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey.name)
}
inline ::std::string* ChannelMonitors_ChannelMonitorKey::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelMonitors_ChannelMonitorKey::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelMonitors_ChannelMonitorKey::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey.name)
}

// .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor channel_monitor = 2;
inline bool ChannelMonitors_ChannelMonitorKey::has_channel_monitor() const {
  return this != internal_default_instance() && channel_monitor_ != NULL;
}
inline void ChannelMonitors_ChannelMonitorKey::clear_channel_monitor() {
  if (GetArenaNoVirtual() == NULL && channel_monitor_ != NULL) {
    delete channel_monitor_;
  }
  channel_monitor_ = NULL;
}
inline const ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor& ChannelMonitors_ChannelMonitorKey::channel_monitor() const {
  const ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor* p = channel_monitor_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey.channel_monitor)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor*>(
      &::openconfig::openconfig_channel_monitor::_ChannelMonitors_ChannelMonitor_default_instance_);
}
inline ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor* ChannelMonitors_ChannelMonitorKey::release_channel_monitor() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey.channel_monitor)
  
  ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor* temp = channel_monitor_;
  channel_monitor_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor* ChannelMonitors_ChannelMonitorKey::mutable_channel_monitor() {
  
  if (channel_monitor_ == NULL) {
    channel_monitor_ = new ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey.channel_monitor)
  return channel_monitor_;
}
inline void ChannelMonitors_ChannelMonitorKey::set_allocated_channel_monitor(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor* channel_monitor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete channel_monitor_;
  }
  if (channel_monitor) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      channel_monitor = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, channel_monitor, submessage_arena);
    }
    
  } else {
    
  }
  channel_monitor_ = channel_monitor;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey.channel_monitor)
}

// -------------------------------------------------------------------

// ChannelMonitors

// repeated .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey channel_monitor = 228142614 [(.yext.schemapath) = "/channel-monitors/channel-monitor"];
inline int ChannelMonitors::channel_monitor_size() const {
  return channel_monitor_.size();
}
inline void ChannelMonitors::clear_channel_monitor() {
  channel_monitor_.Clear();
}
inline const ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitorKey& ChannelMonitors::channel_monitor(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_channel_monitor.ChannelMonitors.channel_monitor)
  return channel_monitor_.Get(index);
}
inline ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitorKey* ChannelMonitors::mutable_channel_monitor(int index) {
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_channel_monitor.ChannelMonitors.channel_monitor)
  return channel_monitor_.Mutable(index);
}
inline ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitorKey* ChannelMonitors::add_channel_monitor() {
  // @@protoc_insertion_point(field_add:openconfig.openconfig_channel_monitor.ChannelMonitors.channel_monitor)
  return channel_monitor_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitorKey >*
ChannelMonitors::mutable_channel_monitor() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_channel_monitor.ChannelMonitors.channel_monitor)
  return &channel_monitor_;
}
inline const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitorKey >&
ChannelMonitors::channel_monitor() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_channel_monitor.ChannelMonitors.channel_monitor)
  return channel_monitor_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace openconfig_channel_monitor
}  // namespace openconfig

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto__INCLUDED
