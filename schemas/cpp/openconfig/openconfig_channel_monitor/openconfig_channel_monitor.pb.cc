// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openconfig/openconfig_channel_monitor/openconfig_channel_monitor.proto

#include "openconfig/openconfig_channel_monitor/openconfig_channel_monitor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace openconfig {
namespace openconfig_channel_monitor {
class ChannelMonitors_ChannelMonitor_Channels_Channel_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChannelMonitors_ChannelMonitor_Channels_Channel_State>
      _instance;
} _ChannelMonitors_ChannelMonitor_Channels_Channel_State_default_instance_;
class ChannelMonitors_ChannelMonitor_Channels_ChannelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChannelMonitors_ChannelMonitor_Channels_Channel>
      _instance;
} _ChannelMonitors_ChannelMonitor_Channels_Channel_default_instance_;
class ChannelMonitors_ChannelMonitor_Channels_ChannelKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChannelMonitors_ChannelMonitor_Channels_ChannelKey>
      _instance;
} _ChannelMonitors_ChannelMonitor_Channels_ChannelKey_default_instance_;
class ChannelMonitors_ChannelMonitor_ChannelsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChannelMonitors_ChannelMonitor_Channels>
      _instance;
} _ChannelMonitors_ChannelMonitor_Channels_default_instance_;
class ChannelMonitors_ChannelMonitor_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChannelMonitors_ChannelMonitor_Config>
      _instance;
} _ChannelMonitors_ChannelMonitor_Config_default_instance_;
class ChannelMonitors_ChannelMonitor_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChannelMonitors_ChannelMonitor_State>
      _instance;
} _ChannelMonitors_ChannelMonitor_State_default_instance_;
class ChannelMonitors_ChannelMonitorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChannelMonitors_ChannelMonitor>
      _instance;
} _ChannelMonitors_ChannelMonitor_default_instance_;
class ChannelMonitors_ChannelMonitorKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChannelMonitors_ChannelMonitorKey>
      _instance;
} _ChannelMonitors_ChannelMonitorKey_default_instance_;
class ChannelMonitorsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChannelMonitors>
      _instance;
} _ChannelMonitors_default_instance_;
}  // namespace openconfig_channel_monitor
}  // namespace openconfig
namespace protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto {
void InitDefaultsChannelMonitors_ChannelMonitor_Channels_Channel_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsBytesValue();
  {
    void* ptr = &::openconfig::openconfig_channel_monitor::_ChannelMonitors_ChannelMonitor_Channels_Channel_State_default_instance_;
    new (ptr) ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel_State::InitAsDefaultInstance();
}

void InitDefaultsChannelMonitors_ChannelMonitor_Channels_Channel_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChannelMonitors_ChannelMonitor_Channels_Channel_StateImpl);
}

void InitDefaultsChannelMonitors_ChannelMonitor_Channels_ChannelImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::InitDefaultsChannelMonitors_ChannelMonitor_Channels_Channel_State();
  {
    void* ptr = &::openconfig::openconfig_channel_monitor::_ChannelMonitors_ChannelMonitor_Channels_Channel_default_instance_;
    new (ptr) ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel::InitAsDefaultInstance();
}

void InitDefaultsChannelMonitors_ChannelMonitor_Channels_Channel() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChannelMonitors_ChannelMonitor_Channels_ChannelImpl);
}

void InitDefaultsChannelMonitors_ChannelMonitor_Channels_ChannelKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::InitDefaultsChannelMonitors_ChannelMonitor_Channels_Channel();
  {
    void* ptr = &::openconfig::openconfig_channel_monitor::_ChannelMonitors_ChannelMonitor_Channels_ChannelKey_default_instance_;
    new (ptr) ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_ChannelKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_ChannelKey::InitAsDefaultInstance();
}

void InitDefaultsChannelMonitors_ChannelMonitor_Channels_ChannelKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChannelMonitors_ChannelMonitor_Channels_ChannelKeyImpl);
}

void InitDefaultsChannelMonitors_ChannelMonitor_ChannelsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::InitDefaultsChannelMonitors_ChannelMonitor_Channels_ChannelKey();
  {
    void* ptr = &::openconfig::openconfig_channel_monitor::_ChannelMonitors_ChannelMonitor_Channels_default_instance_;
    new (ptr) ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels::InitAsDefaultInstance();
}

void InitDefaultsChannelMonitors_ChannelMonitor_Channels() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChannelMonitors_ChannelMonitor_ChannelsImpl);
}

void InitDefaultsChannelMonitors_ChannelMonitor_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_channel_monitor::_ChannelMonitors_ChannelMonitor_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Config::InitAsDefaultInstance();
}

void InitDefaultsChannelMonitors_ChannelMonitor_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChannelMonitors_ChannelMonitor_ConfigImpl);
}

void InitDefaultsChannelMonitors_ChannelMonitor_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_channel_monitor::_ChannelMonitors_ChannelMonitor_State_default_instance_;
    new (ptr) ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_State::InitAsDefaultInstance();
}

void InitDefaultsChannelMonitors_ChannelMonitor_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChannelMonitors_ChannelMonitor_StateImpl);
}

void InitDefaultsChannelMonitors_ChannelMonitorImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::InitDefaultsChannelMonitors_ChannelMonitor_Channels();
  protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::InitDefaultsChannelMonitors_ChannelMonitor_Config();
  protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::InitDefaultsChannelMonitors_ChannelMonitor_State();
  {
    void* ptr = &::openconfig::openconfig_channel_monitor::_ChannelMonitors_ChannelMonitor_default_instance_;
    new (ptr) ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor::InitAsDefaultInstance();
}

void InitDefaultsChannelMonitors_ChannelMonitor() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChannelMonitors_ChannelMonitorImpl);
}

void InitDefaultsChannelMonitors_ChannelMonitorKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::InitDefaultsChannelMonitors_ChannelMonitor();
  {
    void* ptr = &::openconfig::openconfig_channel_monitor::_ChannelMonitors_ChannelMonitorKey_default_instance_;
    new (ptr) ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitorKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitorKey::InitAsDefaultInstance();
}

void InitDefaultsChannelMonitors_ChannelMonitorKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChannelMonitors_ChannelMonitorKeyImpl);
}

void InitDefaultsChannelMonitorsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::InitDefaultsChannelMonitors_ChannelMonitorKey();
  {
    void* ptr = &::openconfig::openconfig_channel_monitor::_ChannelMonitors_default_instance_;
    new (ptr) ::openconfig::openconfig_channel_monitor::ChannelMonitors();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_channel_monitor::ChannelMonitors::InitAsDefaultInstance();
}

void InitDefaultsChannelMonitors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChannelMonitorsImpl);
}

::google::protobuf::Metadata file_level_metadata[9];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel_State, lower_frequency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel_State, psd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel_State, upper_frequency_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_ChannelKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_ChannelKey, lower_frequency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_ChannelKey, upper_frequency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_ChannelKey, channel_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels, channel_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Config, monitor_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Config, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_State, monitor_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_State, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor, channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitorKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitorKey, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitorKey, channel_monitor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_channel_monitor::ChannelMonitors, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_channel_monitor::ChannelMonitors, channel_monitor_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel_State)},
  { 8, -1, sizeof(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel)},
  { 14, -1, sizeof(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_ChannelKey)},
  { 22, -1, sizeof(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels)},
  { 28, -1, sizeof(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Config)},
  { 35, -1, sizeof(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_State)},
  { 42, -1, sizeof(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor)},
  { 50, -1, sizeof(::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitorKey)},
  { 57, -1, sizeof(::openconfig::openconfig_channel_monitor::ChannelMonitors)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_channel_monitor::_ChannelMonitors_ChannelMonitor_Channels_Channel_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_channel_monitor::_ChannelMonitors_ChannelMonitor_Channels_Channel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_channel_monitor::_ChannelMonitors_ChannelMonitor_Channels_ChannelKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_channel_monitor::_ChannelMonitors_ChannelMonitor_Channels_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_channel_monitor::_ChannelMonitors_ChannelMonitor_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_channel_monitor::_ChannelMonitors_ChannelMonitor_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_channel_monitor::_ChannelMonitors_ChannelMonitor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_channel_monitor::_ChannelMonitors_ChannelMonitorKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_channel_monitor::_ChannelMonitors_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "openconfig/openconfig_channel_monitor/openconfig_channel_monitor.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\nFopenconfig/openconfig_channel_monitor/"
      "openconfig_channel_monitor.proto\022%openco"
      "nfig.openconfig_channel_monitor\0328github."
      "com/openconfig/ygot/proto/ywrapper/ywrap"
      "per.proto\0320github.com/openconfig/ygot/pr"
      "oto/yext/yext.proto\"\303\021\n\017ChannelMonitors\022"
      "\212\001\n\017channel_monitor\030\226\334\344l \003(\0132H.openconfi"
      "g.openconfig_channel_monitor.ChannelMoni"
      "tors.ChannelMonitorKeyB$\202A!/channel-moni"
      "tors/channel-monitor\032\363\016\n\016ChannelMonitor\022"
      "\222\001\n\010channels\030\365\257\200\016 \001(\0132N.openconfig.openc"
      "onfig_channel_monitor.ChannelMonitors.Ch"
      "annelMonitor.ChannelsB-\202A*/channel-monit"
      "ors/channel-monitor/channels\022\215\001\n\006config\030"
      "\367\342\210\266\001 \001(\0132L.openconfig.openconfig_channe"
      "l_monitor.ChannelMonitors.ChannelMonitor"
      ".ConfigB+\202A(/channel-monitors/channel-mo"
      "nitor/config\022\212\001\n\005state\030\250\307\324\333\001 \001(\0132K.openc"
      "onfig.openconfig_channel_monitor.Channel"
      "Monitors.ChannelMonitor.StateB*\202A\'/chann"
      "el-monitors/channel-monitor/state\032\223\010\n\010Ch"
      "annels\022\245\001\n\007channel\030\211\347\350\353\001 \003(\0132Y.openconfi"
      "g.openconfig_channel_monitor.ChannelMoni"
      "tors.ChannelMonitor.Channels.ChannelKeyB"
      "5\202A2/channel-monitors/channel-monitor/ch"
      "annels/channel\032\246\004\n\007Channel\022\253\001\n\005state\030\353\251\250"
      "g \001(\0132\\.openconfig.openconfig_channel_mo"
      "nitor.ChannelMonitors.ChannelMonitor.Cha"
      "nnels.Channel.StateB;\202A8/channel-monitor"
      "s/channel-monitor/channels/channel/state"
      "\032\354\002\n\005State\022}\n\017lower_frequency\030\200\333\321\300\001 \001(\0132"
      "\023.ywrapper.UintValueBK\202AH/channel-monito"
      "rs/channel-monitor/channels/channel/stat"
      "e/lower-frequency\022e\n\003psd\030\323\347\201\017 \001(\0132\024.ywra"
      "pper.BytesValueB\?\202A</channel-monitors/ch"
      "annel-monitor/channels/channel/state/psd"
      "\022}\n\017upper_frequency\030\237\346\222\251\001 \001(\0132\023.ywrapper"
      ".UintValueBK\202AH/channel-monitors/channel"
      "-monitor/channels/channel/state/upper-fr"
      "equency\032\265\002\n\nChannelKey\022^\n\017lower_frequenc"
      "y\030\001 \001(\004BE\202AB/channel-monitors/channel-mo"
      "nitor/channels/channel/lower-frequency\022^"
      "\n\017upper_frequency\030\002 \001(\004BE\202AB/channel-mon"
      "itors/channel-monitor/channels/channel/u"
      "pper-frequency\022g\n\007channel\030\003 \001(\0132V.openco"
      "nfig.openconfig_channel_monitor.ChannelM"
      "onitors.ChannelMonitor.Channels.Channel\032"
      "\314\001\n\006Config\022h\n\014monitor_port\030\300\345\251, \001(\0132\025.yw"
      "rapper.StringValueB8\202A5/channel-monitors"
      "/channel-monitor/config/monitor-port\022X\n\004"
      "name\030\377\301\203o \001(\0132\025.ywrapper.StringValueB0\202A"
      "-/channel-monitors/channel-monitor/confi"
      "g/name\032\311\001\n\005State\022g\n\014monitor_port\030\275\321\266W \001("
      "\0132\025.ywrapper.StringValueB7\202A4/channel-mo"
      "nitors/channel-monitor/state/monitor-por"
      "t\022W\n\004name\030\322\226\311v \001(\0132\025.ywrapper.StringValu"
      "eB/\202A,/channel-monitors/channel-monitor/"
      "state/name\032\254\001\n\021ChannelMonitorKey\0227\n\004name"
      "\030\001 \001(\tB)\202A&/channel-monitors/channel-mon"
      "itor/name\022^\n\017channel_monitor\030\002 \001(\0132E.ope"
      "nconfig.openconfig_channel_monitor.Chann"
      "elMonitors.ChannelMonitorb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2473);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "openconfig/openconfig_channel_monitor/openconfig_channel_monitor.proto", &protobuf_RegisterTypes);
  ::protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::AddDescriptors();
  ::protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fyext_2fyext_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto
namespace openconfig {
namespace openconfig_channel_monitor {

// ===================================================================

void ChannelMonitors_ChannelMonitor_Channels_Channel_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_channel_monitor::_ChannelMonitors_ChannelMonitor_Channels_Channel_State_default_instance_._instance.get_mutable()->lower_frequency_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_channel_monitor::_ChannelMonitors_ChannelMonitor_Channels_Channel_State_default_instance_._instance.get_mutable()->psd_ = const_cast< ::ywrapper::BytesValue*>(
      ::ywrapper::BytesValue::internal_default_instance());
  ::openconfig::openconfig_channel_monitor::_ChannelMonitors_ChannelMonitor_Channels_Channel_State_default_instance_._instance.get_mutable()->upper_frequency_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void ChannelMonitors_ChannelMonitor_Channels_Channel_State::clear_lower_frequency() {
  if (GetArenaNoVirtual() == NULL && lower_frequency_ != NULL) {
    delete lower_frequency_;
  }
  lower_frequency_ = NULL;
}
void ChannelMonitors_ChannelMonitor_Channels_Channel_State::clear_psd() {
  if (GetArenaNoVirtual() == NULL && psd_ != NULL) {
    delete psd_;
  }
  psd_ = NULL;
}
void ChannelMonitors_ChannelMonitor_Channels_Channel_State::clear_upper_frequency() {
  if (GetArenaNoVirtual() == NULL && upper_frequency_ != NULL) {
    delete upper_frequency_;
  }
  upper_frequency_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelMonitors_ChannelMonitor_Channels_Channel_State::kLowerFrequencyFieldNumber;
const int ChannelMonitors_ChannelMonitor_Channels_Channel_State::kPsdFieldNumber;
const int ChannelMonitors_ChannelMonitor_Channels_Channel_State::kUpperFrequencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelMonitors_ChannelMonitor_Channels_Channel_State::ChannelMonitors_ChannelMonitor_Channels_Channel_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::InitDefaultsChannelMonitors_ChannelMonitor_Channels_Channel_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.State)
}
ChannelMonitors_ChannelMonitor_Channels_Channel_State::ChannelMonitors_ChannelMonitor_Channels_Channel_State(const ChannelMonitors_ChannelMonitor_Channels_Channel_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_psd()) {
    psd_ = new ::ywrapper::BytesValue(*from.psd_);
  } else {
    psd_ = NULL;
  }
  if (from.has_upper_frequency()) {
    upper_frequency_ = new ::ywrapper::UintValue(*from.upper_frequency_);
  } else {
    upper_frequency_ = NULL;
  }
  if (from.has_lower_frequency()) {
    lower_frequency_ = new ::ywrapper::UintValue(*from.lower_frequency_);
  } else {
    lower_frequency_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.State)
}

void ChannelMonitors_ChannelMonitor_Channels_Channel_State::SharedCtor() {
  ::memset(&psd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lower_frequency_) -
      reinterpret_cast<char*>(&psd_)) + sizeof(lower_frequency_));
  _cached_size_ = 0;
}

ChannelMonitors_ChannelMonitor_Channels_Channel_State::~ChannelMonitors_ChannelMonitor_Channels_Channel_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.State)
  SharedDtor();
}

void ChannelMonitors_ChannelMonitor_Channels_Channel_State::SharedDtor() {
  if (this != internal_default_instance()) delete psd_;
  if (this != internal_default_instance()) delete upper_frequency_;
  if (this != internal_default_instance()) delete lower_frequency_;
}

void ChannelMonitors_ChannelMonitor_Channels_Channel_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelMonitors_ChannelMonitor_Channels_Channel_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChannelMonitors_ChannelMonitor_Channels_Channel_State& ChannelMonitors_ChannelMonitor_Channels_Channel_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::InitDefaultsChannelMonitors_ChannelMonitor_Channels_Channel_State();
  return *internal_default_instance();
}

ChannelMonitors_ChannelMonitor_Channels_Channel_State* ChannelMonitors_ChannelMonitor_Channels_Channel_State::New(::google::protobuf::Arena* arena) const {
  ChannelMonitors_ChannelMonitor_Channels_Channel_State* n = new ChannelMonitors_ChannelMonitor_Channels_Channel_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChannelMonitors_ChannelMonitor_Channels_Channel_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && psd_ != NULL) {
    delete psd_;
  }
  psd_ = NULL;
  if (GetArenaNoVirtual() == NULL && upper_frequency_ != NULL) {
    delete upper_frequency_;
  }
  upper_frequency_ = NULL;
  if (GetArenaNoVirtual() == NULL && lower_frequency_ != NULL) {
    delete lower_frequency_;
  }
  lower_frequency_ = NULL;
  _internal_metadata_.Clear();
}

bool ChannelMonitors_ChannelMonitor_Channels_Channel_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3231935490u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.BytesValue psd = 31486931 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel/state/psd"];
      case 31486931: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 251895450 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_psd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue upper_frequency = 354726687 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel/state/upper-frequency"];
      case 354726687: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 2837813498 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_upper_frequency()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue lower_frequency = 403991936 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel/state/lower-frequency"];
      case 403991936: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 3231935490 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lower_frequency()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.State)
  return false;
#undef DO_
}

void ChannelMonitors_ChannelMonitor_Channels_Channel_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.BytesValue psd = 31486931 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel/state/psd"];
  if (this->has_psd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31486931, *this->psd_, output);
  }

  // .ywrapper.UintValue upper_frequency = 354726687 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel/state/upper-frequency"];
  if (this->has_upper_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      354726687, *this->upper_frequency_, output);
  }

  // .ywrapper.UintValue lower_frequency = 403991936 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel/state/lower-frequency"];
  if (this->has_lower_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      403991936, *this->lower_frequency_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.State)
}

::google::protobuf::uint8* ChannelMonitors_ChannelMonitor_Channels_Channel_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.BytesValue psd = 31486931 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel/state/psd"];
  if (this->has_psd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        31486931, *this->psd_, deterministic, target);
  }

  // .ywrapper.UintValue upper_frequency = 354726687 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel/state/upper-frequency"];
  if (this->has_upper_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        354726687, *this->upper_frequency_, deterministic, target);
  }

  // .ywrapper.UintValue lower_frequency = 403991936 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel/state/lower-frequency"];
  if (this->has_lower_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        403991936, *this->lower_frequency_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.State)
  return target;
}

size_t ChannelMonitors_ChannelMonitor_Channels_Channel_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.BytesValue psd = 31486931 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel/state/psd"];
  if (this->has_psd()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->psd_);
  }

  // .ywrapper.UintValue upper_frequency = 354726687 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel/state/upper-frequency"];
  if (this->has_upper_frequency()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->upper_frequency_);
  }

  // .ywrapper.UintValue lower_frequency = 403991936 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel/state/lower-frequency"];
  if (this->has_lower_frequency()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->lower_frequency_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelMonitors_ChannelMonitor_Channels_Channel_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.State)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelMonitors_ChannelMonitor_Channels_Channel_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelMonitors_ChannelMonitor_Channels_Channel_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.State)
    MergeFrom(*source);
  }
}

void ChannelMonitors_ChannelMonitor_Channels_Channel_State::MergeFrom(const ChannelMonitors_ChannelMonitor_Channels_Channel_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_psd()) {
    mutable_psd()->::ywrapper::BytesValue::MergeFrom(from.psd());
  }
  if (from.has_upper_frequency()) {
    mutable_upper_frequency()->::ywrapper::UintValue::MergeFrom(from.upper_frequency());
  }
  if (from.has_lower_frequency()) {
    mutable_lower_frequency()->::ywrapper::UintValue::MergeFrom(from.lower_frequency());
  }
}

void ChannelMonitors_ChannelMonitor_Channels_Channel_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelMonitors_ChannelMonitor_Channels_Channel_State::CopyFrom(const ChannelMonitors_ChannelMonitor_Channels_Channel_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelMonitors_ChannelMonitor_Channels_Channel_State::IsInitialized() const {
  return true;
}

void ChannelMonitors_ChannelMonitor_Channels_Channel_State::Swap(ChannelMonitors_ChannelMonitor_Channels_Channel_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelMonitors_ChannelMonitor_Channels_Channel_State::InternalSwap(ChannelMonitors_ChannelMonitor_Channels_Channel_State* other) {
  using std::swap;
  swap(psd_, other->psd_);
  swap(upper_frequency_, other->upper_frequency_);
  swap(lower_frequency_, other->lower_frequency_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChannelMonitors_ChannelMonitor_Channels_Channel_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChannelMonitors_ChannelMonitor_Channels_Channel::InitAsDefaultInstance() {
  ::openconfig::openconfig_channel_monitor::_ChannelMonitors_ChannelMonitor_Channels_Channel_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel_State*>(
      ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelMonitors_ChannelMonitor_Channels_Channel::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelMonitors_ChannelMonitor_Channels_Channel::ChannelMonitors_ChannelMonitor_Channels_Channel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::InitDefaultsChannelMonitors_ChannelMonitor_Channels_Channel();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel)
}
ChannelMonitors_ChannelMonitor_Channels_Channel::ChannelMonitors_ChannelMonitor_Channels_Channel(const ChannelMonitors_ChannelMonitor_Channels_Channel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel_State(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel)
}

void ChannelMonitors_ChannelMonitor_Channels_Channel::SharedCtor() {
  state_ = NULL;
  _cached_size_ = 0;
}

ChannelMonitors_ChannelMonitor_Channels_Channel::~ChannelMonitors_ChannelMonitor_Channels_Channel() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel)
  SharedDtor();
}

void ChannelMonitors_ChannelMonitor_Channels_Channel::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
}

void ChannelMonitors_ChannelMonitor_Channels_Channel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelMonitors_ChannelMonitor_Channels_Channel::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChannelMonitors_ChannelMonitor_Channels_Channel& ChannelMonitors_ChannelMonitor_Channels_Channel::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::InitDefaultsChannelMonitors_ChannelMonitor_Channels_Channel();
  return *internal_default_instance();
}

ChannelMonitors_ChannelMonitor_Channels_Channel* ChannelMonitors_ChannelMonitor_Channels_Channel::New(::google::protobuf::Arena* arena) const {
  ChannelMonitors_ChannelMonitor_Channels_Channel* n = new ChannelMonitors_ChannelMonitor_Channels_Channel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChannelMonitors_ChannelMonitor_Channels_Channel::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool ChannelMonitors_ChannelMonitor_Channels_Channel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(1733338970u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.State state = 216667371 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel/state"];
      case 216667371: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 1733338970 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel)
  return false;
#undef DO_
}

void ChannelMonitors_ChannelMonitor_Channels_Channel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.State state = 216667371 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      216667371, *this->state_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel)
}

::google::protobuf::uint8* ChannelMonitors_ChannelMonitor_Channels_Channel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.State state = 216667371 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        216667371, *this->state_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel)
  return target;
}

size_t ChannelMonitors_ChannelMonitor_Channels_Channel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel.State state = 216667371 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelMonitors_ChannelMonitor_Channels_Channel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelMonitors_ChannelMonitor_Channels_Channel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelMonitors_ChannelMonitor_Channels_Channel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel)
    MergeFrom(*source);
  }
}

void ChannelMonitors_ChannelMonitor_Channels_Channel::MergeFrom(const ChannelMonitors_ChannelMonitor_Channels_Channel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel_State::MergeFrom(from.state());
  }
}

void ChannelMonitors_ChannelMonitor_Channels_Channel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelMonitors_ChannelMonitor_Channels_Channel::CopyFrom(const ChannelMonitors_ChannelMonitor_Channels_Channel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelMonitors_ChannelMonitor_Channels_Channel::IsInitialized() const {
  return true;
}

void ChannelMonitors_ChannelMonitor_Channels_Channel::Swap(ChannelMonitors_ChannelMonitor_Channels_Channel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelMonitors_ChannelMonitor_Channels_Channel::InternalSwap(ChannelMonitors_ChannelMonitor_Channels_Channel* other) {
  using std::swap;
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChannelMonitors_ChannelMonitor_Channels_Channel::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChannelMonitors_ChannelMonitor_Channels_ChannelKey::InitAsDefaultInstance() {
  ::openconfig::openconfig_channel_monitor::_ChannelMonitors_ChannelMonitor_Channels_ChannelKey_default_instance_._instance.get_mutable()->channel_ = const_cast< ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel*>(
      ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelMonitors_ChannelMonitor_Channels_ChannelKey::kLowerFrequencyFieldNumber;
const int ChannelMonitors_ChannelMonitor_Channels_ChannelKey::kUpperFrequencyFieldNumber;
const int ChannelMonitors_ChannelMonitor_Channels_ChannelKey::kChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelMonitors_ChannelMonitor_Channels_ChannelKey::ChannelMonitors_ChannelMonitor_Channels_ChannelKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::InitDefaultsChannelMonitors_ChannelMonitor_Channels_ChannelKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.ChannelKey)
}
ChannelMonitors_ChannelMonitor_Channels_ChannelKey::ChannelMonitors_ChannelMonitor_Channels_ChannelKey(const ChannelMonitors_ChannelMonitor_Channels_ChannelKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_channel()) {
    channel_ = new ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel(*from.channel_);
  } else {
    channel_ = NULL;
  }
  ::memcpy(&lower_frequency_, &from.lower_frequency_,
    static_cast<size_t>(reinterpret_cast<char*>(&upper_frequency_) -
    reinterpret_cast<char*>(&lower_frequency_)) + sizeof(upper_frequency_));
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.ChannelKey)
}

void ChannelMonitors_ChannelMonitor_Channels_ChannelKey::SharedCtor() {
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upper_frequency_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(upper_frequency_));
  _cached_size_ = 0;
}

ChannelMonitors_ChannelMonitor_Channels_ChannelKey::~ChannelMonitors_ChannelMonitor_Channels_ChannelKey() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.ChannelKey)
  SharedDtor();
}

void ChannelMonitors_ChannelMonitor_Channels_ChannelKey::SharedDtor() {
  if (this != internal_default_instance()) delete channel_;
}

void ChannelMonitors_ChannelMonitor_Channels_ChannelKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelMonitors_ChannelMonitor_Channels_ChannelKey::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChannelMonitors_ChannelMonitor_Channels_ChannelKey& ChannelMonitors_ChannelMonitor_Channels_ChannelKey::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::InitDefaultsChannelMonitors_ChannelMonitor_Channels_ChannelKey();
  return *internal_default_instance();
}

ChannelMonitors_ChannelMonitor_Channels_ChannelKey* ChannelMonitors_ChannelMonitor_Channels_ChannelKey::New(::google::protobuf::Arena* arena) const {
  ChannelMonitors_ChannelMonitor_Channels_ChannelKey* n = new ChannelMonitors_ChannelMonitor_Channels_ChannelKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChannelMonitors_ChannelMonitor_Channels_ChannelKey::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.ChannelKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && channel_ != NULL) {
    delete channel_;
  }
  channel_ = NULL;
  ::memset(&lower_frequency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upper_frequency_) -
      reinterpret_cast<char*>(&lower_frequency_)) + sizeof(upper_frequency_));
  _internal_metadata_.Clear();
}

bool ChannelMonitors_ChannelMonitor_Channels_ChannelKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.ChannelKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 lower_frequency = 1 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel/lower-frequency"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lower_frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 upper_frequency = 2 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel/upper-frequency"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &upper_frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel channel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_channel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.ChannelKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.ChannelKey)
  return false;
#undef DO_
}

void ChannelMonitors_ChannelMonitor_Channels_ChannelKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.ChannelKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 lower_frequency = 1 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel/lower-frequency"];
  if (this->lower_frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->lower_frequency(), output);
  }

  // uint64 upper_frequency = 2 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel/upper-frequency"];
  if (this->upper_frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->upper_frequency(), output);
  }

  // .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel channel = 3;
  if (this->has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->channel_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.ChannelKey)
}

::google::protobuf::uint8* ChannelMonitors_ChannelMonitor_Channels_ChannelKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.ChannelKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 lower_frequency = 1 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel/lower-frequency"];
  if (this->lower_frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->lower_frequency(), target);
  }

  // uint64 upper_frequency = 2 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel/upper-frequency"];
  if (this->upper_frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->upper_frequency(), target);
  }

  // .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel channel = 3;
  if (this->has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->channel_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.ChannelKey)
  return target;
}

size_t ChannelMonitors_ChannelMonitor_Channels_ChannelKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.ChannelKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.Channel channel = 3;
  if (this->has_channel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->channel_);
  }

  // uint64 lower_frequency = 1 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel/lower-frequency"];
  if (this->lower_frequency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lower_frequency());
  }

  // uint64 upper_frequency = 2 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel/upper-frequency"];
  if (this->upper_frequency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->upper_frequency());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelMonitors_ChannelMonitor_Channels_ChannelKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.ChannelKey)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelMonitors_ChannelMonitor_Channels_ChannelKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelMonitors_ChannelMonitor_Channels_ChannelKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.ChannelKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.ChannelKey)
    MergeFrom(*source);
  }
}

void ChannelMonitors_ChannelMonitor_Channels_ChannelKey::MergeFrom(const ChannelMonitors_ChannelMonitor_Channels_ChannelKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.ChannelKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_channel()) {
    mutable_channel()->::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels_Channel::MergeFrom(from.channel());
  }
  if (from.lower_frequency() != 0) {
    set_lower_frequency(from.lower_frequency());
  }
  if (from.upper_frequency() != 0) {
    set_upper_frequency(from.upper_frequency());
  }
}

void ChannelMonitors_ChannelMonitor_Channels_ChannelKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.ChannelKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelMonitors_ChannelMonitor_Channels_ChannelKey::CopyFrom(const ChannelMonitors_ChannelMonitor_Channels_ChannelKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.ChannelKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelMonitors_ChannelMonitor_Channels_ChannelKey::IsInitialized() const {
  return true;
}

void ChannelMonitors_ChannelMonitor_Channels_ChannelKey::Swap(ChannelMonitors_ChannelMonitor_Channels_ChannelKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelMonitors_ChannelMonitor_Channels_ChannelKey::InternalSwap(ChannelMonitors_ChannelMonitor_Channels_ChannelKey* other) {
  using std::swap;
  swap(channel_, other->channel_);
  swap(lower_frequency_, other->lower_frequency_);
  swap(upper_frequency_, other->upper_frequency_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChannelMonitors_ChannelMonitor_Channels_ChannelKey::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChannelMonitors_ChannelMonitor_Channels::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelMonitors_ChannelMonitor_Channels::kChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelMonitors_ChannelMonitor_Channels::ChannelMonitors_ChannelMonitor_Channels()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::InitDefaultsChannelMonitors_ChannelMonitor_Channels();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels)
}
ChannelMonitors_ChannelMonitor_Channels::ChannelMonitors_ChannelMonitor_Channels(const ChannelMonitors_ChannelMonitor_Channels& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      channel_(from.channel_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels)
}

void ChannelMonitors_ChannelMonitor_Channels::SharedCtor() {
  _cached_size_ = 0;
}

ChannelMonitors_ChannelMonitor_Channels::~ChannelMonitors_ChannelMonitor_Channels() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels)
  SharedDtor();
}

void ChannelMonitors_ChannelMonitor_Channels::SharedDtor() {
}

void ChannelMonitors_ChannelMonitor_Channels::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelMonitors_ChannelMonitor_Channels::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChannelMonitors_ChannelMonitor_Channels& ChannelMonitors_ChannelMonitor_Channels::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::InitDefaultsChannelMonitors_ChannelMonitor_Channels();
  return *internal_default_instance();
}

ChannelMonitors_ChannelMonitor_Channels* ChannelMonitors_ChannelMonitor_Channels::New(::google::protobuf::Arena* arena) const {
  ChannelMonitors_ChannelMonitor_Channels* n = new ChannelMonitors_ChannelMonitor_Channels;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChannelMonitors_ChannelMonitor_Channels::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_.Clear();
  _internal_metadata_.Clear();
}

bool ChannelMonitors_ChannelMonitor_Channels::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3956382794u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.ChannelKey channel = 494547849 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel"];
      case 494547849: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 3956382794 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_channel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels)
  return false;
#undef DO_
}

void ChannelMonitors_ChannelMonitor_Channels::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.ChannelKey channel = 494547849 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->channel_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      494547849, this->channel(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels)
}

::google::protobuf::uint8* ChannelMonitors_ChannelMonitor_Channels::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.ChannelKey channel = 494547849 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->channel_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        494547849, this->channel(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels)
  return target;
}

size_t ChannelMonitors_ChannelMonitor_Channels::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels.ChannelKey channel = 494547849 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels/channel"];
  {
    unsigned int count = static_cast<unsigned int>(this->channel_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->channel(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelMonitors_ChannelMonitor_Channels::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelMonitors_ChannelMonitor_Channels* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelMonitors_ChannelMonitor_Channels>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels)
    MergeFrom(*source);
  }
}

void ChannelMonitors_ChannelMonitor_Channels::MergeFrom(const ChannelMonitors_ChannelMonitor_Channels& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channel_.MergeFrom(from.channel_);
}

void ChannelMonitors_ChannelMonitor_Channels::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelMonitors_ChannelMonitor_Channels::CopyFrom(const ChannelMonitors_ChannelMonitor_Channels& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelMonitors_ChannelMonitor_Channels::IsInitialized() const {
  return true;
}

void ChannelMonitors_ChannelMonitor_Channels::Swap(ChannelMonitors_ChannelMonitor_Channels* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelMonitors_ChannelMonitor_Channels::InternalSwap(ChannelMonitors_ChannelMonitor_Channels* other) {
  using std::swap;
  channel_.InternalSwap(&other->channel_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChannelMonitors_ChannelMonitor_Channels::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChannelMonitors_ChannelMonitor_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_channel_monitor::_ChannelMonitors_ChannelMonitor_Config_default_instance_._instance.get_mutable()->monitor_port_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_channel_monitor::_ChannelMonitors_ChannelMonitor_Config_default_instance_._instance.get_mutable()->name_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void ChannelMonitors_ChannelMonitor_Config::clear_monitor_port() {
  if (GetArenaNoVirtual() == NULL && monitor_port_ != NULL) {
    delete monitor_port_;
  }
  monitor_port_ = NULL;
}
void ChannelMonitors_ChannelMonitor_Config::clear_name() {
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelMonitors_ChannelMonitor_Config::kMonitorPortFieldNumber;
const int ChannelMonitors_ChannelMonitor_Config::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelMonitors_ChannelMonitor_Config::ChannelMonitors_ChannelMonitor_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::InitDefaultsChannelMonitors_ChannelMonitor_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Config)
}
ChannelMonitors_ChannelMonitor_Config::ChannelMonitors_ChannelMonitor_Config(const ChannelMonitors_ChannelMonitor_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_monitor_port()) {
    monitor_port_ = new ::ywrapper::StringValue(*from.monitor_port_);
  } else {
    monitor_port_ = NULL;
  }
  if (from.has_name()) {
    name_ = new ::ywrapper::StringValue(*from.name_);
  } else {
    name_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Config)
}

void ChannelMonitors_ChannelMonitor_Config::SharedCtor() {
  ::memset(&monitor_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&name_) -
      reinterpret_cast<char*>(&monitor_port_)) + sizeof(name_));
  _cached_size_ = 0;
}

ChannelMonitors_ChannelMonitor_Config::~ChannelMonitors_ChannelMonitor_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Config)
  SharedDtor();
}

void ChannelMonitors_ChannelMonitor_Config::SharedDtor() {
  if (this != internal_default_instance()) delete monitor_port_;
  if (this != internal_default_instance()) delete name_;
}

void ChannelMonitors_ChannelMonitor_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelMonitors_ChannelMonitor_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChannelMonitors_ChannelMonitor_Config& ChannelMonitors_ChannelMonitor_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::InitDefaultsChannelMonitors_ChannelMonitor_Config();
  return *internal_default_instance();
}

ChannelMonitors_ChannelMonitor_Config* ChannelMonitors_ChannelMonitor_Config::New(::google::protobuf::Arena* arena) const {
  ChannelMonitors_ChannelMonitor_Config* n = new ChannelMonitors_ChannelMonitor_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChannelMonitors_ChannelMonitor_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && monitor_port_ != NULL) {
    delete monitor_port_;
  }
  monitor_port_ = NULL;
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
  _internal_metadata_.Clear();
}

bool ChannelMonitors_ChannelMonitor_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(1862731770u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue monitor_port = 92959424 [(.yext.schemapath) = "/channel-monitors/channel-monitor/config/monitor-port"];
      case 92959424: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 743675394 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_monitor_port()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue name = 232841471 [(.yext.schemapath) = "/channel-monitors/channel-monitor/config/name"];
      case 232841471: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 1862731770 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Config)
  return false;
#undef DO_
}

void ChannelMonitors_ChannelMonitor_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue monitor_port = 92959424 [(.yext.schemapath) = "/channel-monitors/channel-monitor/config/monitor-port"];
  if (this->has_monitor_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      92959424, *this->monitor_port_, output);
  }

  // .ywrapper.StringValue name = 232841471 [(.yext.schemapath) = "/channel-monitors/channel-monitor/config/name"];
  if (this->has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      232841471, *this->name_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Config)
}

::google::protobuf::uint8* ChannelMonitors_ChannelMonitor_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue monitor_port = 92959424 [(.yext.schemapath) = "/channel-monitors/channel-monitor/config/monitor-port"];
  if (this->has_monitor_port()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        92959424, *this->monitor_port_, deterministic, target);
  }

  // .ywrapper.StringValue name = 232841471 [(.yext.schemapath) = "/channel-monitors/channel-monitor/config/name"];
  if (this->has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        232841471, *this->name_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Config)
  return target;
}

size_t ChannelMonitors_ChannelMonitor_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue monitor_port = 92959424 [(.yext.schemapath) = "/channel-monitors/channel-monitor/config/monitor-port"];
  if (this->has_monitor_port()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->monitor_port_);
  }

  // .ywrapper.StringValue name = 232841471 [(.yext.schemapath) = "/channel-monitors/channel-monitor/config/name"];
  if (this->has_name()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->name_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelMonitors_ChannelMonitor_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelMonitors_ChannelMonitor_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelMonitors_ChannelMonitor_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Config)
    MergeFrom(*source);
  }
}

void ChannelMonitors_ChannelMonitor_Config::MergeFrom(const ChannelMonitors_ChannelMonitor_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_monitor_port()) {
    mutable_monitor_port()->::ywrapper::StringValue::MergeFrom(from.monitor_port());
  }
  if (from.has_name()) {
    mutable_name()->::ywrapper::StringValue::MergeFrom(from.name());
  }
}

void ChannelMonitors_ChannelMonitor_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelMonitors_ChannelMonitor_Config::CopyFrom(const ChannelMonitors_ChannelMonitor_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelMonitors_ChannelMonitor_Config::IsInitialized() const {
  return true;
}

void ChannelMonitors_ChannelMonitor_Config::Swap(ChannelMonitors_ChannelMonitor_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelMonitors_ChannelMonitor_Config::InternalSwap(ChannelMonitors_ChannelMonitor_Config* other) {
  using std::swap;
  swap(monitor_port_, other->monitor_port_);
  swap(name_, other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChannelMonitors_ChannelMonitor_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChannelMonitors_ChannelMonitor_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_channel_monitor::_ChannelMonitors_ChannelMonitor_State_default_instance_._instance.get_mutable()->monitor_port_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_channel_monitor::_ChannelMonitors_ChannelMonitor_State_default_instance_._instance.get_mutable()->name_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void ChannelMonitors_ChannelMonitor_State::clear_monitor_port() {
  if (GetArenaNoVirtual() == NULL && monitor_port_ != NULL) {
    delete monitor_port_;
  }
  monitor_port_ = NULL;
}
void ChannelMonitors_ChannelMonitor_State::clear_name() {
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelMonitors_ChannelMonitor_State::kMonitorPortFieldNumber;
const int ChannelMonitors_ChannelMonitor_State::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelMonitors_ChannelMonitor_State::ChannelMonitors_ChannelMonitor_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::InitDefaultsChannelMonitors_ChannelMonitor_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.State)
}
ChannelMonitors_ChannelMonitor_State::ChannelMonitors_ChannelMonitor_State(const ChannelMonitors_ChannelMonitor_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_monitor_port()) {
    monitor_port_ = new ::ywrapper::StringValue(*from.monitor_port_);
  } else {
    monitor_port_ = NULL;
  }
  if (from.has_name()) {
    name_ = new ::ywrapper::StringValue(*from.name_);
  } else {
    name_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.State)
}

void ChannelMonitors_ChannelMonitor_State::SharedCtor() {
  ::memset(&monitor_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&name_) -
      reinterpret_cast<char*>(&monitor_port_)) + sizeof(name_));
  _cached_size_ = 0;
}

ChannelMonitors_ChannelMonitor_State::~ChannelMonitors_ChannelMonitor_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.State)
  SharedDtor();
}

void ChannelMonitors_ChannelMonitor_State::SharedDtor() {
  if (this != internal_default_instance()) delete monitor_port_;
  if (this != internal_default_instance()) delete name_;
}

void ChannelMonitors_ChannelMonitor_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelMonitors_ChannelMonitor_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChannelMonitors_ChannelMonitor_State& ChannelMonitors_ChannelMonitor_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::InitDefaultsChannelMonitors_ChannelMonitor_State();
  return *internal_default_instance();
}

ChannelMonitors_ChannelMonitor_State* ChannelMonitors_ChannelMonitor_State::New(::google::protobuf::Arena* arena) const {
  ChannelMonitors_ChannelMonitor_State* n = new ChannelMonitors_ChannelMonitor_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChannelMonitors_ChannelMonitor_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && monitor_port_ != NULL) {
    delete monitor_port_;
  }
  monitor_port_ = NULL;
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
  _internal_metadata_.Clear();
}

bool ChannelMonitors_ChannelMonitor_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(1989302930u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue monitor_port = 183347389 [(.yext.schemapath) = "/channel-monitors/channel-monitor/state/monitor-port"];
      case 183347389: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 1466779114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_monitor_port()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue name = 248662866 [(.yext.schemapath) = "/channel-monitors/channel-monitor/state/name"];
      case 248662866: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 1989302930 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.State)
  return false;
#undef DO_
}

void ChannelMonitors_ChannelMonitor_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue monitor_port = 183347389 [(.yext.schemapath) = "/channel-monitors/channel-monitor/state/monitor-port"];
  if (this->has_monitor_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      183347389, *this->monitor_port_, output);
  }

  // .ywrapper.StringValue name = 248662866 [(.yext.schemapath) = "/channel-monitors/channel-monitor/state/name"];
  if (this->has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      248662866, *this->name_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.State)
}

::google::protobuf::uint8* ChannelMonitors_ChannelMonitor_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue monitor_port = 183347389 [(.yext.schemapath) = "/channel-monitors/channel-monitor/state/monitor-port"];
  if (this->has_monitor_port()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        183347389, *this->monitor_port_, deterministic, target);
  }

  // .ywrapper.StringValue name = 248662866 [(.yext.schemapath) = "/channel-monitors/channel-monitor/state/name"];
  if (this->has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        248662866, *this->name_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.State)
  return target;
}

size_t ChannelMonitors_ChannelMonitor_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue monitor_port = 183347389 [(.yext.schemapath) = "/channel-monitors/channel-monitor/state/monitor-port"];
  if (this->has_monitor_port()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->monitor_port_);
  }

  // .ywrapper.StringValue name = 248662866 [(.yext.schemapath) = "/channel-monitors/channel-monitor/state/name"];
  if (this->has_name()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->name_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelMonitors_ChannelMonitor_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.State)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelMonitors_ChannelMonitor_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelMonitors_ChannelMonitor_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.State)
    MergeFrom(*source);
  }
}

void ChannelMonitors_ChannelMonitor_State::MergeFrom(const ChannelMonitors_ChannelMonitor_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_monitor_port()) {
    mutable_monitor_port()->::ywrapper::StringValue::MergeFrom(from.monitor_port());
  }
  if (from.has_name()) {
    mutable_name()->::ywrapper::StringValue::MergeFrom(from.name());
  }
}

void ChannelMonitors_ChannelMonitor_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelMonitors_ChannelMonitor_State::CopyFrom(const ChannelMonitors_ChannelMonitor_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelMonitors_ChannelMonitor_State::IsInitialized() const {
  return true;
}

void ChannelMonitors_ChannelMonitor_State::Swap(ChannelMonitors_ChannelMonitor_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelMonitors_ChannelMonitor_State::InternalSwap(ChannelMonitors_ChannelMonitor_State* other) {
  using std::swap;
  swap(monitor_port_, other->monitor_port_);
  swap(name_, other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChannelMonitors_ChannelMonitor_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChannelMonitors_ChannelMonitor::InitAsDefaultInstance() {
  ::openconfig::openconfig_channel_monitor::_ChannelMonitors_ChannelMonitor_default_instance_._instance.get_mutable()->channels_ = const_cast< ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels*>(
      ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels::internal_default_instance());
  ::openconfig::openconfig_channel_monitor::_ChannelMonitors_ChannelMonitor_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Config*>(
      ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Config::internal_default_instance());
  ::openconfig::openconfig_channel_monitor::_ChannelMonitors_ChannelMonitor_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_State*>(
      ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelMonitors_ChannelMonitor::kChannelsFieldNumber;
const int ChannelMonitors_ChannelMonitor::kConfigFieldNumber;
const int ChannelMonitors_ChannelMonitor::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelMonitors_ChannelMonitor::ChannelMonitors_ChannelMonitor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::InitDefaultsChannelMonitors_ChannelMonitor();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor)
}
ChannelMonitors_ChannelMonitor::ChannelMonitors_ChannelMonitor(const ChannelMonitors_ChannelMonitor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_channels()) {
    channels_ = new ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels(*from.channels_);
  } else {
    channels_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_State(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor)
}

void ChannelMonitors_ChannelMonitor::SharedCtor() {
  ::memset(&channels_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&channels_)) + sizeof(state_));
  _cached_size_ = 0;
}

ChannelMonitors_ChannelMonitor::~ChannelMonitors_ChannelMonitor() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor)
  SharedDtor();
}

void ChannelMonitors_ChannelMonitor::SharedDtor() {
  if (this != internal_default_instance()) delete channels_;
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void ChannelMonitors_ChannelMonitor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelMonitors_ChannelMonitor::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChannelMonitors_ChannelMonitor& ChannelMonitors_ChannelMonitor::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::InitDefaultsChannelMonitors_ChannelMonitor();
  return *internal_default_instance();
}

ChannelMonitors_ChannelMonitor* ChannelMonitors_ChannelMonitor::New(::google::protobuf::Arena* arena) const {
  ChannelMonitors_ChannelMonitor* n = new ChannelMonitors_ChannelMonitor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChannelMonitors_ChannelMonitor::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && channels_ != NULL) {
    delete channels_;
  }
  channels_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool ChannelMonitors_ChannelMonitor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3685293378u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels channels = 29366261 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels"];
      case 29366261: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 234930090 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_channels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Config config = 381825399 [(.yext.schemapath) = "/channel-monitors/channel-monitor/config"];
      case 381825399: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 3054603194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.State state = 460661672 [(.yext.schemapath) = "/channel-monitors/channel-monitor/state"];
      case 460661672: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 3685293378 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor)
  return false;
#undef DO_
}

void ChannelMonitors_ChannelMonitor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels channels = 29366261 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels"];
  if (this->has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29366261, *this->channels_, output);
  }

  // .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Config config = 381825399 [(.yext.schemapath) = "/channel-monitors/channel-monitor/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      381825399, *this->config_, output);
  }

  // .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.State state = 460661672 [(.yext.schemapath) = "/channel-monitors/channel-monitor/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      460661672, *this->state_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor)
}

::google::protobuf::uint8* ChannelMonitors_ChannelMonitor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels channels = 29366261 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels"];
  if (this->has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        29366261, *this->channels_, deterministic, target);
  }

  // .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Config config = 381825399 [(.yext.schemapath) = "/channel-monitors/channel-monitor/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        381825399, *this->config_, deterministic, target);
  }

  // .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.State state = 460661672 [(.yext.schemapath) = "/channel-monitors/channel-monitor/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        460661672, *this->state_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor)
  return target;
}

size_t ChannelMonitors_ChannelMonitor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Channels channels = 29366261 [(.yext.schemapath) = "/channel-monitors/channel-monitor/channels"];
  if (this->has_channels()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->channels_);
  }

  // .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.Config config = 381825399 [(.yext.schemapath) = "/channel-monitors/channel-monitor/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  // .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor.State state = 460661672 [(.yext.schemapath) = "/channel-monitors/channel-monitor/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelMonitors_ChannelMonitor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelMonitors_ChannelMonitor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelMonitors_ChannelMonitor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor)
    MergeFrom(*source);
  }
}

void ChannelMonitors_ChannelMonitor::MergeFrom(const ChannelMonitors_ChannelMonitor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_channels()) {
    mutable_channels()->::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Channels::MergeFrom(from.channels());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_Config::MergeFrom(from.config());
  }
  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor_State::MergeFrom(from.state());
  }
}

void ChannelMonitors_ChannelMonitor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelMonitors_ChannelMonitor::CopyFrom(const ChannelMonitors_ChannelMonitor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelMonitors_ChannelMonitor::IsInitialized() const {
  return true;
}

void ChannelMonitors_ChannelMonitor::Swap(ChannelMonitors_ChannelMonitor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelMonitors_ChannelMonitor::InternalSwap(ChannelMonitors_ChannelMonitor* other) {
  using std::swap;
  swap(channels_, other->channels_);
  swap(config_, other->config_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChannelMonitors_ChannelMonitor::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChannelMonitors_ChannelMonitorKey::InitAsDefaultInstance() {
  ::openconfig::openconfig_channel_monitor::_ChannelMonitors_ChannelMonitorKey_default_instance_._instance.get_mutable()->channel_monitor_ = const_cast< ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor*>(
      ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelMonitors_ChannelMonitorKey::kNameFieldNumber;
const int ChannelMonitors_ChannelMonitorKey::kChannelMonitorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelMonitors_ChannelMonitorKey::ChannelMonitors_ChannelMonitorKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::InitDefaultsChannelMonitors_ChannelMonitorKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey)
}
ChannelMonitors_ChannelMonitorKey::ChannelMonitors_ChannelMonitorKey(const ChannelMonitors_ChannelMonitorKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_channel_monitor()) {
    channel_monitor_ = new ::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor(*from.channel_monitor_);
  } else {
    channel_monitor_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey)
}

void ChannelMonitors_ChannelMonitorKey::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_monitor_ = NULL;
  _cached_size_ = 0;
}

ChannelMonitors_ChannelMonitorKey::~ChannelMonitors_ChannelMonitorKey() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey)
  SharedDtor();
}

void ChannelMonitors_ChannelMonitorKey::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete channel_monitor_;
}

void ChannelMonitors_ChannelMonitorKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelMonitors_ChannelMonitorKey::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChannelMonitors_ChannelMonitorKey& ChannelMonitors_ChannelMonitorKey::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::InitDefaultsChannelMonitors_ChannelMonitorKey();
  return *internal_default_instance();
}

ChannelMonitors_ChannelMonitorKey* ChannelMonitors_ChannelMonitorKey::New(::google::protobuf::Arena* arena) const {
  ChannelMonitors_ChannelMonitorKey* n = new ChannelMonitors_ChannelMonitorKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChannelMonitors_ChannelMonitorKey::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && channel_monitor_ != NULL) {
    delete channel_monitor_;
  }
  channel_monitor_ = NULL;
  _internal_metadata_.Clear();
}

bool ChannelMonitors_ChannelMonitorKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1 [(.yext.schemapath) = "/channel-monitors/channel-monitor/name"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor channel_monitor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_channel_monitor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey)
  return false;
#undef DO_
}

void ChannelMonitors_ChannelMonitorKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.yext.schemapath) = "/channel-monitors/channel-monitor/name"];
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor channel_monitor = 2;
  if (this->has_channel_monitor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->channel_monitor_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey)
}

::google::protobuf::uint8* ChannelMonitors_ChannelMonitorKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.yext.schemapath) = "/channel-monitors/channel-monitor/name"];
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor channel_monitor = 2;
  if (this->has_channel_monitor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->channel_monitor_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey)
  return target;
}

size_t ChannelMonitors_ChannelMonitorKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1 [(.yext.schemapath) = "/channel-monitors/channel-monitor/name"];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitor channel_monitor = 2;
  if (this->has_channel_monitor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->channel_monitor_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelMonitors_ChannelMonitorKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelMonitors_ChannelMonitorKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelMonitors_ChannelMonitorKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey)
    MergeFrom(*source);
  }
}

void ChannelMonitors_ChannelMonitorKey::MergeFrom(const ChannelMonitors_ChannelMonitorKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_channel_monitor()) {
    mutable_channel_monitor()->::openconfig::openconfig_channel_monitor::ChannelMonitors_ChannelMonitor::MergeFrom(from.channel_monitor());
  }
}

void ChannelMonitors_ChannelMonitorKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelMonitors_ChannelMonitorKey::CopyFrom(const ChannelMonitors_ChannelMonitorKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelMonitors_ChannelMonitorKey::IsInitialized() const {
  return true;
}

void ChannelMonitors_ChannelMonitorKey::Swap(ChannelMonitors_ChannelMonitorKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelMonitors_ChannelMonitorKey::InternalSwap(ChannelMonitors_ChannelMonitorKey* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(channel_monitor_, other->channel_monitor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChannelMonitors_ChannelMonitorKey::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChannelMonitors::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelMonitors::kChannelMonitorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelMonitors::ChannelMonitors()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::InitDefaultsChannelMonitors();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_channel_monitor.ChannelMonitors)
}
ChannelMonitors::ChannelMonitors(const ChannelMonitors& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      channel_monitor_(from.channel_monitor_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_channel_monitor.ChannelMonitors)
}

void ChannelMonitors::SharedCtor() {
  _cached_size_ = 0;
}

ChannelMonitors::~ChannelMonitors() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_channel_monitor.ChannelMonitors)
  SharedDtor();
}

void ChannelMonitors::SharedDtor() {
}

void ChannelMonitors::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelMonitors::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChannelMonitors& ChannelMonitors::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::InitDefaultsChannelMonitors();
  return *internal_default_instance();
}

ChannelMonitors* ChannelMonitors::New(::google::protobuf::Arena* arena) const {
  ChannelMonitors* n = new ChannelMonitors;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChannelMonitors::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_channel_monitor.ChannelMonitors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_monitor_.Clear();
  _internal_metadata_.Clear();
}

bool ChannelMonitors::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_channel_monitor.ChannelMonitors)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(1825140914u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey channel_monitor = 228142614 [(.yext.schemapath) = "/channel-monitors/channel-monitor"];
      case 228142614: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 1825140914 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_channel_monitor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_channel_monitor.ChannelMonitors)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_channel_monitor.ChannelMonitors)
  return false;
#undef DO_
}

void ChannelMonitors::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_channel_monitor.ChannelMonitors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey channel_monitor = 228142614 [(.yext.schemapath) = "/channel-monitors/channel-monitor"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->channel_monitor_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      228142614, this->channel_monitor(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_channel_monitor.ChannelMonitors)
}

::google::protobuf::uint8* ChannelMonitors::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_channel_monitor.ChannelMonitors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey channel_monitor = 228142614 [(.yext.schemapath) = "/channel-monitors/channel-monitor"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->channel_monitor_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        228142614, this->channel_monitor(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_channel_monitor.ChannelMonitors)
  return target;
}

size_t ChannelMonitors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_channel_monitor.ChannelMonitors)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .openconfig.openconfig_channel_monitor.ChannelMonitors.ChannelMonitorKey channel_monitor = 228142614 [(.yext.schemapath) = "/channel-monitors/channel-monitor"];
  {
    unsigned int count = static_cast<unsigned int>(this->channel_monitor_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->channel_monitor(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelMonitors::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_channel_monitor.ChannelMonitors)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelMonitors* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelMonitors>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_channel_monitor.ChannelMonitors)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_channel_monitor.ChannelMonitors)
    MergeFrom(*source);
  }
}

void ChannelMonitors::MergeFrom(const ChannelMonitors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_channel_monitor.ChannelMonitors)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channel_monitor_.MergeFrom(from.channel_monitor_);
}

void ChannelMonitors::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_channel_monitor.ChannelMonitors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelMonitors::CopyFrom(const ChannelMonitors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_channel_monitor.ChannelMonitors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelMonitors::IsInitialized() const {
  return true;
}

void ChannelMonitors::Swap(ChannelMonitors* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelMonitors::InternalSwap(ChannelMonitors* other) {
  using std::swap;
  channel_monitor_.InternalSwap(&other->channel_monitor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChannelMonitors::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fchannel_5fmonitor_2fopenconfig_5fchannel_5fmonitor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace openconfig_channel_monitor
}  // namespace openconfig

// @@protoc_insertion_point(global_scope)
