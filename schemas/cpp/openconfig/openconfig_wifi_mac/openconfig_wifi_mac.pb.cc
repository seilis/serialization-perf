// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openconfig/openconfig_wifi_mac/openconfig_wifi_mac.proto

#include "openconfig/openconfig_wifi_mac/openconfig_wifi_mac.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace openconfig {
namespace openconfig_wifi_mac {
class Bssids_Bssid_State_Counters_RxDataDistDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Bssids_Bssid_State_Counters_RxDataDist>
      _instance;
} _Bssids_Bssid_State_Counters_RxDataDist_default_instance_;
class Bssids_Bssid_State_Counters_RxDataWmmDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Bssids_Bssid_State_Counters_RxDataWmm>
      _instance;
} _Bssids_Bssid_State_Counters_RxDataWmm_default_instance_;
class Bssids_Bssid_State_Counters_RxMcsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Bssids_Bssid_State_Counters_RxMcs>
      _instance;
} _Bssids_Bssid_State_Counters_RxMcs_default_instance_;
class Bssids_Bssid_State_Counters_TxDataDistDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Bssids_Bssid_State_Counters_TxDataDist>
      _instance;
} _Bssids_Bssid_State_Counters_TxDataDist_default_instance_;
class Bssids_Bssid_State_Counters_TxDataWmmDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Bssids_Bssid_State_Counters_TxDataWmm>
      _instance;
} _Bssids_Bssid_State_Counters_TxDataWmm_default_instance_;
class Bssids_Bssid_State_Counters_TxMcsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Bssids_Bssid_State_Counters_TxMcs>
      _instance;
} _Bssids_Bssid_State_Counters_TxMcs_default_instance_;
class Bssids_Bssid_State_CountersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Bssids_Bssid_State_Counters>
      _instance;
} _Bssids_Bssid_State_Counters_default_instance_;
class Bssids_Bssid_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Bssids_Bssid_State>
      _instance;
} _Bssids_Bssid_State_default_instance_;
class Bssids_BssidDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Bssids_Bssid>
      _instance;
} _Bssids_Bssid_default_instance_;
class Bssids_BssidKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Bssids_BssidKey>
      _instance;
} _Bssids_BssidKey_default_instance_;
class BssidsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Bssids>
      _instance;
} _Bssids_default_instance_;
class Ssids_Ssid_BandSteering_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ssids_Ssid_BandSteering_Config>
      _instance;
} _Ssids_Ssid_BandSteering_Config_default_instance_;
class Ssids_Ssid_BandSteering_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ssids_Ssid_BandSteering_State>
      _instance;
} _Ssids_Ssid_BandSteering_State_default_instance_;
class Ssids_Ssid_BandSteeringDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ssids_Ssid_BandSteering>
      _instance;
} _Ssids_Ssid_BandSteering_default_instance_;
class Ssids_Ssid_Clients_Client_ClientCapabilities_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ssids_Ssid_Clients_Client_ClientCapabilities_State>
      _instance;
} _Ssids_Ssid_Clients_Client_ClientCapabilities_State_default_instance_;
class Ssids_Ssid_Clients_Client_ClientCapabilitiesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ssids_Ssid_Clients_Client_ClientCapabilities>
      _instance;
} _Ssids_Ssid_Clients_Client_ClientCapabilities_default_instance_;
class Ssids_Ssid_Clients_Client_ClientConnection_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ssids_Ssid_Clients_Client_ClientConnection_State>
      _instance;
} _Ssids_Ssid_Clients_Client_ClientConnection_State_default_instance_;
class Ssids_Ssid_Clients_Client_ClientConnectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ssids_Ssid_Clients_Client_ClientConnection>
      _instance;
} _Ssids_Ssid_Clients_Client_ClientConnection_default_instance_;
class Ssids_Ssid_Clients_Client_ClientRf_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ssids_Ssid_Clients_Client_ClientRf_State>
      _instance;
} _Ssids_Ssid_Clients_Client_ClientRf_State_default_instance_;
class Ssids_Ssid_Clients_Client_ClientRfDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ssids_Ssid_Clients_Client_ClientRf>
      _instance;
} _Ssids_Ssid_Clients_Client_ClientRf_default_instance_;
class Ssids_Ssid_Clients_Client_Dot11KNeighbors_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ssids_Ssid_Clients_Client_Dot11KNeighbors_State>
      _instance;
} _Ssids_Ssid_Clients_Client_Dot11KNeighbors_State_default_instance_;
class Ssids_Ssid_Clients_Client_Dot11KNeighborsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ssids_Ssid_Clients_Client_Dot11KNeighbors>
      _instance;
} _Ssids_Ssid_Clients_Client_Dot11KNeighbors_default_instance_;
class Ssids_Ssid_Clients_Client_State_CountersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ssids_Ssid_Clients_Client_State_Counters>
      _instance;
} _Ssids_Ssid_Clients_Client_State_Counters_default_instance_;
class Ssids_Ssid_Clients_Client_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ssids_Ssid_Clients_Client_State>
      _instance;
} _Ssids_Ssid_Clients_Client_State_default_instance_;
class Ssids_Ssid_Clients_ClientDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ssids_Ssid_Clients_Client>
      _instance;
} _Ssids_Ssid_Clients_Client_default_instance_;
class Ssids_Ssid_Clients_ClientKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ssids_Ssid_Clients_ClientKey>
      _instance;
} _Ssids_Ssid_Clients_ClientKey_default_instance_;
class Ssids_Ssid_ClientsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ssids_Ssid_Clients>
      _instance;
} _Ssids_Ssid_Clients_default_instance_;
class Ssids_Ssid_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ssids_Ssid_Config>
      _instance;
} _Ssids_Ssid_Config_default_instance_;
class Ssids_Ssid_Dot11R_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ssids_Ssid_Dot11R_Config>
      _instance;
} _Ssids_Ssid_Dot11R_Config_default_instance_;
class Ssids_Ssid_Dot11R_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ssids_Ssid_Dot11R_State>
      _instance;
} _Ssids_Ssid_Dot11R_State_default_instance_;
class Ssids_Ssid_Dot11RDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ssids_Ssid_Dot11R>
      _instance;
} _Ssids_Ssid_Dot11R_default_instance_;
class Ssids_Ssid_Dot11V_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ssids_Ssid_Dot11V_Config>
      _instance;
} _Ssids_Ssid_Dot11V_Config_default_instance_;
class Ssids_Ssid_Dot11V_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ssids_Ssid_Dot11V_State>
      _instance;
} _Ssids_Ssid_Dot11V_State_default_instance_;
class Ssids_Ssid_Dot11VDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ssids_Ssid_Dot11V>
      _instance;
} _Ssids_Ssid_Dot11V_default_instance_;
class Ssids_Ssid_Dot1XTimers_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ssids_Ssid_Dot1XTimers_Config>
      _instance;
} _Ssids_Ssid_Dot1XTimers_Config_default_instance_;
class Ssids_Ssid_Dot1XTimers_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ssids_Ssid_Dot1XTimers_State>
      _instance;
} _Ssids_Ssid_Dot1XTimers_State_default_instance_;
class Ssids_Ssid_Dot1XTimersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ssids_Ssid_Dot1XTimers>
      _instance;
} _Ssids_Ssid_Dot1XTimers_default_instance_;
class Ssids_Ssid_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ssids_Ssid_State>
      _instance;
} _Ssids_Ssid_State_default_instance_;
class Ssids_Ssid_Wmm_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ssids_Ssid_Wmm_Config>
      _instance;
} _Ssids_Ssid_Wmm_Config_default_instance_;
class Ssids_Ssid_Wmm_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ssids_Ssid_Wmm_State>
      _instance;
} _Ssids_Ssid_Wmm_State_default_instance_;
class Ssids_Ssid_WmmDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ssids_Ssid_Wmm>
      _instance;
} _Ssids_Ssid_Wmm_default_instance_;
class Ssids_SsidDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ssids_Ssid>
      _instance;
} _Ssids_Ssid_default_instance_;
class Ssids_SsidKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ssids_SsidKey>
      _instance;
} _Ssids_SsidKey_default_instance_;
class SsidsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ssids>
      _instance;
} _Ssids_default_instance_;
}  // namespace openconfig_wifi_mac
}  // namespace openconfig
namespace protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto {
void InitDefaultsBssids_Bssid_State_Counters_RxDataDistImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_RxDataDist_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataDist();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataDist::InitAsDefaultInstance();
}

void InitDefaultsBssids_Bssid_State_Counters_RxDataDist() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBssids_Bssid_State_Counters_RxDataDistImpl);
}

void InitDefaultsBssids_Bssid_State_Counters_RxDataWmmImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_RxDataWmm_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataWmm();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataWmm::InitAsDefaultInstance();
}

void InitDefaultsBssids_Bssid_State_Counters_RxDataWmm() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBssids_Bssid_State_Counters_RxDataWmmImpl);
}

void InitDefaultsBssids_Bssid_State_Counters_RxMcsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_RxMcs_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxMcs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxMcs::InitAsDefaultInstance();
}

void InitDefaultsBssids_Bssid_State_Counters_RxMcs() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBssids_Bssid_State_Counters_RxMcsImpl);
}

void InitDefaultsBssids_Bssid_State_Counters_TxDataDistImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_TxDataDist_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataDist();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataDist::InitAsDefaultInstance();
}

void InitDefaultsBssids_Bssid_State_Counters_TxDataDist() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBssids_Bssid_State_Counters_TxDataDistImpl);
}

void InitDefaultsBssids_Bssid_State_Counters_TxDataWmmImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_TxDataWmm_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataWmm();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataWmm::InitAsDefaultInstance();
}

void InitDefaultsBssids_Bssid_State_Counters_TxDataWmm() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBssids_Bssid_State_Counters_TxDataWmmImpl);
}

void InitDefaultsBssids_Bssid_State_Counters_TxMcsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_TxMcs_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxMcs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxMcs::InitAsDefaultInstance();
}

void InitDefaultsBssids_Bssid_State_Counters_TxMcs() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBssids_Bssid_State_Counters_TxMcsImpl);
}

void InitDefaultsBssids_Bssid_State_CountersImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids_Bssid_State_Counters_RxDataDist();
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids_Bssid_State_Counters_RxDataWmm();
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids_Bssid_State_Counters_RxMcs();
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids_Bssid_State_Counters_TxDataDist();
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids_Bssid_State_Counters_TxDataWmm();
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids_Bssid_State_Counters_TxMcs();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters::InitAsDefaultInstance();
}

void InitDefaultsBssids_Bssid_State_Counters() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBssids_Bssid_State_CountersImpl);
}

void InitDefaultsBssids_Bssid_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids_Bssid_State_Counters();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State::InitAsDefaultInstance();
}

void InitDefaultsBssids_Bssid_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBssids_Bssid_StateImpl);
}

void InitDefaultsBssids_BssidImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids_Bssid_State();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Bssids_Bssid_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Bssids_Bssid();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid::InitAsDefaultInstance();
}

void InitDefaultsBssids_Bssid() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBssids_BssidImpl);
}

void InitDefaultsBssids_BssidKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids_Bssid();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Bssids_BssidKey_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Bssids_BssidKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Bssids_BssidKey::InitAsDefaultInstance();
}

void InitDefaultsBssids_BssidKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBssids_BssidKeyImpl);
}

void InitDefaultsBssidsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids_BssidKey();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Bssids_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Bssids();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Bssids::InitAsDefaultInstance();
}

void InitDefaultsBssids() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBssidsImpl);
}

void InitDefaultsSsids_Ssid_BandSteering_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsBoolValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsIntValue();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_BandSteering_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_Config::InitAsDefaultInstance();
}

void InitDefaultsSsids_Ssid_BandSteering_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSsids_Ssid_BandSteering_ConfigImpl);
}

void InitDefaultsSsids_Ssid_BandSteering_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsBoolValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsIntValue();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_BandSteering_State_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_State::InitAsDefaultInstance();
}

void InitDefaultsSsids_Ssid_BandSteering_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSsids_Ssid_BandSteering_StateImpl);
}

void InitDefaultsSsids_Ssid_BandSteeringImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_BandSteering_Config();
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_BandSteering_State();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_BandSteering_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering::InitAsDefaultInstance();
}

void InitDefaultsSsids_Ssid_BandSteering() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSsids_Ssid_BandSteeringImpl);
}

void InitDefaultsSsids_Ssid_Clients_Client_ClientCapabilities_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_ClientCapabilities_State_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities_State::InitAsDefaultInstance();
}

void InitDefaultsSsids_Ssid_Clients_Client_ClientCapabilities_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSsids_Ssid_Clients_Client_ClientCapabilities_StateImpl);
}

void InitDefaultsSsids_Ssid_Clients_Client_ClientCapabilitiesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client_ClientCapabilities_State();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_ClientCapabilities_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities::InitAsDefaultInstance();
}

void InitDefaultsSsids_Ssid_Clients_Client_ClientCapabilities() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSsids_Ssid_Clients_Client_ClientCapabilitiesImpl);
}

void InitDefaultsSsids_Ssid_Clients_Client_ClientConnection_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_ClientConnection_State_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection_State::InitAsDefaultInstance();
}

void InitDefaultsSsids_Ssid_Clients_Client_ClientConnection_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSsids_Ssid_Clients_Client_ClientConnection_StateImpl);
}

void InitDefaultsSsids_Ssid_Clients_Client_ClientConnectionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client_ClientConnection_State();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_ClientConnection_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection::InitAsDefaultInstance();
}

void InitDefaultsSsids_Ssid_Clients_Client_ClientConnection() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSsids_Ssid_Clients_Client_ClientConnectionImpl);
}

void InitDefaultsSsids_Ssid_Clients_Client_ClientRf_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsIntValue();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_ClientRf_State_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf_State::InitAsDefaultInstance();
}

void InitDefaultsSsids_Ssid_Clients_Client_ClientRf_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSsids_Ssid_Clients_Client_ClientRf_StateImpl);
}

void InitDefaultsSsids_Ssid_Clients_Client_ClientRfImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client_ClientRf_State();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_ClientRf_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf::InitAsDefaultInstance();
}

void InitDefaultsSsids_Ssid_Clients_Client_ClientRf() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSsids_Ssid_Clients_Client_ClientRfImpl);
}

void InitDefaultsSsids_Ssid_Clients_Client_Dot11KNeighbors_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsIntValue();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::InitAsDefaultInstance();
}

void InitDefaultsSsids_Ssid_Clients_Client_Dot11KNeighbors_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSsids_Ssid_Clients_Client_Dot11KNeighbors_StateImpl);
}

void InitDefaultsSsids_Ssid_Clients_Client_Dot11KNeighborsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client_Dot11KNeighbors_State();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_Dot11KNeighbors_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors::InitAsDefaultInstance();
}

void InitDefaultsSsids_Ssid_Clients_Client_Dot11KNeighbors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSsids_Ssid_Clients_Client_Dot11KNeighborsImpl);
}

void InitDefaultsSsids_Ssid_Clients_Client_State_CountersImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_State_Counters_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State_Counters();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State_Counters::InitAsDefaultInstance();
}

void InitDefaultsSsids_Ssid_Clients_Client_State_Counters() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSsids_Ssid_Clients_Client_State_CountersImpl);
}

void InitDefaultsSsids_Ssid_Clients_Client_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client_State_Counters();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_State_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State::InitAsDefaultInstance();
}

void InitDefaultsSsids_Ssid_Clients_Client_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSsids_Ssid_Clients_Client_StateImpl);
}

void InitDefaultsSsids_Ssid_Clients_ClientImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client_ClientCapabilities();
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client_ClientConnection();
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client_ClientRf();
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client_Dot11KNeighbors();
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client_State();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client::InitAsDefaultInstance();
}

void InitDefaultsSsids_Ssid_Clients_Client() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSsids_Ssid_Clients_ClientImpl);
}

void InitDefaultsSsids_Ssid_Clients_ClientKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_ClientKey_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_ClientKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_ClientKey::InitAsDefaultInstance();
}

void InitDefaultsSsids_Ssid_Clients_ClientKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSsids_Ssid_Clients_ClientKeyImpl);
}

void InitDefaultsSsids_Ssid_ClientsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_ClientKey();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients::InitAsDefaultInstance();
}

void InitDefaultsSsids_Ssid_Clients() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSsids_Ssid_ClientsImpl);
}

void InitDefaultsSsids_Ssid_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsBoolValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config::InitAsDefaultInstance();
}

void InitDefaultsSsids_Ssid_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSsids_Ssid_ConfigImpl);
}

void InitDefaultsSsids_Ssid_Dot11R_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsBoolValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot11R_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_Config::InitAsDefaultInstance();
}

void InitDefaultsSsids_Ssid_Dot11R_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSsids_Ssid_Dot11R_ConfigImpl);
}

void InitDefaultsSsids_Ssid_Dot11R_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsBoolValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot11R_State_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_State::InitAsDefaultInstance();
}

void InitDefaultsSsids_Ssid_Dot11R_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSsids_Ssid_Dot11R_StateImpl);
}

void InitDefaultsSsids_Ssid_Dot11RImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Dot11R_Config();
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Dot11R_State();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot11R_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R::InitAsDefaultInstance();
}

void InitDefaultsSsids_Ssid_Dot11R() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSsids_Ssid_Dot11RImpl);
}

void InitDefaultsSsids_Ssid_Dot11V_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsBoolValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot11V_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_Config::InitAsDefaultInstance();
}

void InitDefaultsSsids_Ssid_Dot11V_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSsids_Ssid_Dot11V_ConfigImpl);
}

void InitDefaultsSsids_Ssid_Dot11V_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsBoolValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot11V_State_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_State::InitAsDefaultInstance();
}

void InitDefaultsSsids_Ssid_Dot11V_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSsids_Ssid_Dot11V_StateImpl);
}

void InitDefaultsSsids_Ssid_Dot11VImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Dot11V_Config();
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Dot11V_State();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot11V_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V::InitAsDefaultInstance();
}

void InitDefaultsSsids_Ssid_Dot11V() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSsids_Ssid_Dot11VImpl);
}

void InitDefaultsSsids_Ssid_Dot1XTimers_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot1XTimers_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_Config::InitAsDefaultInstance();
}

void InitDefaultsSsids_Ssid_Dot1XTimers_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSsids_Ssid_Dot1XTimers_ConfigImpl);
}

void InitDefaultsSsids_Ssid_Dot1XTimers_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot1XTimers_State_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_State::InitAsDefaultInstance();
}

void InitDefaultsSsids_Ssid_Dot1XTimers_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSsids_Ssid_Dot1XTimers_StateImpl);
}

void InitDefaultsSsids_Ssid_Dot1XTimersImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Dot1XTimers_Config();
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Dot1XTimers_State();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot1XTimers_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers::InitAsDefaultInstance();
}

void InitDefaultsSsids_Ssid_Dot1XTimers() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSsids_Ssid_Dot1XTimersImpl);
}

void InitDefaultsSsids_Ssid_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsBoolValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_State_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Ssids_Ssid_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_State::InitAsDefaultInstance();
}

void InitDefaultsSsids_Ssid_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSsids_Ssid_StateImpl);
}

void InitDefaultsSsids_Ssid_Wmm_ConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsBoolValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Wmm_Config_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_Config::InitAsDefaultInstance();
}

void InitDefaultsSsids_Ssid_Wmm_Config() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSsids_Ssid_Wmm_ConfigImpl);
}

void InitDefaultsSsids_Ssid_Wmm_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsBoolValue();
  protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::InitDefaultsUintValue();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Wmm_State_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_State::InitAsDefaultInstance();
}

void InitDefaultsSsids_Ssid_Wmm_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSsids_Ssid_Wmm_StateImpl);
}

void InitDefaultsSsids_Ssid_WmmImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Wmm_Config();
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Wmm_State();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Wmm_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm::InitAsDefaultInstance();
}

void InitDefaultsSsids_Ssid_Wmm() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSsids_Ssid_WmmImpl);
}

void InitDefaultsSsids_SsidImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_BandSteering();
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients();
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Config();
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Dot11R();
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Dot11V();
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Dot1XTimers();
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_State();
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Wmm();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Ssids_Ssid();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid::InitAsDefaultInstance();
}

void InitDefaultsSsids_Ssid() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSsids_SsidImpl);
}

void InitDefaultsSsids_SsidKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Ssids_SsidKey_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Ssids_SsidKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Ssids_SsidKey::InitAsDefaultInstance();
}

void InitDefaultsSsids_SsidKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSsids_SsidKeyImpl);
}

void InitDefaultsSsidsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_SsidKey();
  {
    void* ptr = &::openconfig::openconfig_wifi_mac::_Ssids_default_instance_;
    new (ptr) ::openconfig::openconfig_wifi_mac::Ssids();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openconfig::openconfig_wifi_mac::Ssids::InitAsDefaultInstance();
}

void InitDefaultsSsids() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSsidsImpl);
}

::google::protobuf::Metadata file_level_metadata[44];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataDist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataDist, rx_0_64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataDist, rx_1025_2048_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataDist, rx_129_256_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataDist, rx_131073_262144_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataDist, rx_16385_32768_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataDist, rx_2049_4096_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataDist, rx_257_512_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataDist, rx_262145_524288_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataDist, rx_32769_65536_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataDist, rx_4097_8192_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataDist, rx_513_1024_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataDist, rx_524289_1048576_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataDist, rx_65_128_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataDist, rx_65537_131072_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataDist, rx_8193_16384_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataWmm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataWmm, be_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataWmm, bk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataWmm, vi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataWmm, vo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxMcs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxMcs, mcs0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxMcs, mcs1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxMcs, mcs2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxMcs, mcs3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxMcs, mcs4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxMcs, mcs5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxMcs, mcs6_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxMcs, mcs7_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxMcs, mcs8_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxMcs, mcs9_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataDist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataDist, tx_0_64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataDist, tx_1025_2048_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataDist, tx_129_256_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataDist, tx_131073_262144_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataDist, tx_16385_32768_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataDist, tx_2049_4096_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataDist, tx_257_512_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataDist, tx_262145_524288_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataDist, tx_32769_65536_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataDist, tx_4097_8192_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataDist, tx_513_1024_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataDist, tx_524289_1048576_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataDist, tx_65_128_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataDist, tx_65537_131072_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataDist, tx_8193_16384_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataWmm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataWmm, be_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataWmm, bk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataWmm, vi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataWmm, vo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxMcs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxMcs, mcs0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxMcs, mcs1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxMcs, mcs2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxMcs, mcs3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxMcs, mcs4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxMcs, mcs5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxMcs, mcs6_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxMcs, mcs7_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxMcs, mcs8_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxMcs, mcs9_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters, rx_bytes_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters, rx_control_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters, rx_data_dist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters, rx_data_wmm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters, rx_mcs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters, rx_mgmt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters, rx_retries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters, rx_retries_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters, rx_retries_subframe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters, tx_bytes_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters, tx_control_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters, tx_data_dist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters, tx_data_wmm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters, tx_mcs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters, tx_mgmt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters, tx_retries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters, tx_retries_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters, tx_retries_subframe_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State, bssid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State, counters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State, ess_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State, num_associated_clients_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_Bssid, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_BssidKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_BssidKey, bssid_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids_BssidKey, bssid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Bssids, bssid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_Config, band_steering_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_Config, steering_rssi_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_State, band_steering_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_State, steering_rssi_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities_State, channel_support_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities_State, client_capabilities_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection_State, client_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection_State, connection_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection_State, hostname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection_State, ipv4_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection_State, ipv6_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection_State, operating_system_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection_State, username_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf_State, connection_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf_State, frequency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf_State, phy_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf_State, rssi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf_State, snr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf_State, ss_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors_State, channel_load_report_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors_State, neighbor_antenna_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors_State, neighbor_bssid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors_State, neighbor_channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors_State, neighbor_rssi_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State_Counters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State_Counters, rx_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State_Counters, rx_retries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State_Counters, tx_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State_Counters, tx_retries_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State, counters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State, mac_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client, client_capabilities_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client, client_connection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client, client_rf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client, dot11k_neighbors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_ClientKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_ClientKey, mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_ClientKey, client_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients, client_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config, advertise_apname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config, basic_data_rates_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config, broadcast_filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config, csa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config, dhcp_required_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config, dot11k_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config, dva_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config, enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config, gtk_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config, hidden_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config, ipv6_ndp_filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config, ipv6_ndp_filter_timer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config, mobility_domain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config, multicast_filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config, okc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config, operating_frequency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config, opmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config, ptk_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config, qbss_load_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config, server_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config, station_isolation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config, supported_data_rates_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config, vlan_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config, wpa2_psk_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_Config, dot11r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_Config, dot11r_domainid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_Config, dot11r_method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_Config, dot11r_r1key_timeout_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_State, dot11r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_State, dot11r_domainid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_State, dot11r_method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_State, dot11r_r1key_timeout_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_Config, dot11v_bssidle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_Config, dot11v_bssidle_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_Config, dot11v_bsstransition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_Config, dot11v_dms_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_State, dot11v_bssidle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_State, dot11v_bssidle_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_State, dot11v_bsstransition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_State, dot11v_dms_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_Config, blacklist_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_Config, max_auth_failures_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_State, blacklist_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_State, max_auth_failures_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_State, advertise_apname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_State, basic_data_rates_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_State, broadcast_filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_State, bss_channel_utilization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_State, bssid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_State, csa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_State, dhcp_required_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_State, dot11k_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_State, dva_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_State, enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_State, gtk_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_State, hidden_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_State, ipv6_ndp_filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_State, ipv6_ndp_filter_timer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_State, mobility_domain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_State, multicast_filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_State, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_State, okc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_State, operating_frequency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_State, opmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_State, ptk_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_State, qbss_load_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_State, rx_bss_dot11_channel_utilization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_State, server_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_State, station_isolation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_State, supported_data_rates_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_State, tx_bss_dot11_channel_utilization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_State, vlan_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_State, wpa2_psk_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_Config, trust_dscp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_Config, wmm_be_remark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_Config, wmm_bk_remark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_Config, wmm_vi_remark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_Config, wmm_vo_remark_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_State, trust_dscp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_State, wmm_be_remark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_State, wmm_bk_remark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_State, wmm_vi_remark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_State, wmm_vo_remark_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid, band_steering_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid, clients_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid, dot11r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid, dot11v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid, dot1x_timers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_Ssid, wmm_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_SsidKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_SsidKey, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids_SsidKey, ssid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openconfig::openconfig_wifi_mac::Ssids, ssid_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataDist)},
  { 20, -1, sizeof(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataWmm)},
  { 29, -1, sizeof(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxMcs)},
  { 44, -1, sizeof(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataDist)},
  { 64, -1, sizeof(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataWmm)},
  { 73, -1, sizeof(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxMcs)},
  { 88, -1, sizeof(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters)},
  { 111, -1, sizeof(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State)},
  { 120, -1, sizeof(::openconfig::openconfig_wifi_mac::Bssids_Bssid)},
  { 126, -1, sizeof(::openconfig::openconfig_wifi_mac::Bssids_BssidKey)},
  { 133, -1, sizeof(::openconfig::openconfig_wifi_mac::Bssids)},
  { 139, -1, sizeof(::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_Config)},
  { 146, -1, sizeof(::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_State)},
  { 153, -1, sizeof(::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering)},
  { 160, -1, sizeof(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities_State)},
  { 167, -1, sizeof(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities)},
  { 173, -1, sizeof(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection_State)},
  { 185, -1, sizeof(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection)},
  { 191, -1, sizeof(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf_State)},
  { 202, -1, sizeof(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf)},
  { 208, -1, sizeof(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors_State)},
  { 218, -1, sizeof(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors)},
  { 224, -1, sizeof(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State_Counters)},
  { 233, -1, sizeof(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State)},
  { 240, -1, sizeof(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client)},
  { 250, -1, sizeof(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_ClientKey)},
  { 257, -1, sizeof(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients)},
  { 263, -1, sizeof(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config)},
  { 293, -1, sizeof(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_Config)},
  { 302, -1, sizeof(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_State)},
  { 311, -1, sizeof(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R)},
  { 318, -1, sizeof(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_Config)},
  { 327, -1, sizeof(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_State)},
  { 336, -1, sizeof(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V)},
  { 343, -1, sizeof(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_Config)},
  { 350, -1, sizeof(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_State)},
  { 357, -1, sizeof(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers)},
  { 364, -1, sizeof(::openconfig::openconfig_wifi_mac::Ssids_Ssid_State)},
  { 398, -1, sizeof(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_Config)},
  { 408, -1, sizeof(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_State)},
  { 418, -1, sizeof(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm)},
  { 425, -1, sizeof(::openconfig::openconfig_wifi_mac::Ssids_Ssid)},
  { 438, -1, sizeof(::openconfig::openconfig_wifi_mac::Ssids_SsidKey)},
  { 445, -1, sizeof(::openconfig::openconfig_wifi_mac::Ssids)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_RxDataDist_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_RxDataWmm_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_RxMcs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_TxDataDist_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_TxDataWmm_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_TxMcs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Bssids_Bssid_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Bssids_BssidKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Bssids_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Ssids_Ssid_BandSteering_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Ssids_Ssid_BandSteering_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Ssids_Ssid_BandSteering_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_ClientCapabilities_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_ClientCapabilities_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_ClientConnection_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_ClientConnection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_ClientRf_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_ClientRf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_Dot11KNeighbors_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_State_Counters_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_ClientKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot11R_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot11R_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot11R_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot11V_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot11V_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot11V_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot1XTimers_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot1XTimers_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot1XTimers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Ssids_Ssid_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Wmm_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Wmm_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Wmm_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Ssids_Ssid_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Ssids_SsidKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openconfig::openconfig_wifi_mac::_Ssids_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "openconfig/openconfig_wifi_mac/openconfig_wifi_mac.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 44);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n8openconfig/openconfig_wifi_mac/opencon"
      "fig_wifi_mac.proto\022\036openconfig.openconfi"
      "g_wifi_mac\0328github.com/openconfig/ygot/p"
      "roto/ywrapper/ywrapper.proto\0320github.com"
      "/openconfig/ygot/proto/yext/yext.proto\032\034"
      "openconfig/enums/enums.proto\"\274@\n\006Bssids\022"
      "T\n\005bssid\030\275\267\217\206\001 \003(\0132/.openconfig.openconf"
      "ig_wifi_mac.Bssids.BssidKeyB\020\202A\r/bssids/"
      "bssid\032\347>\n\005Bssid\022\\\n\005state\030\357\247\217\005 \001(\01322.open"
      "config.openconfig_wifi_mac.Bssids.Bssid."
      "StateB\026\202A\023/bssids/bssid/state\032\377=\n\005State\022"
      "F\n\005bssid\030\275\205\331\364\001 \001(\0132\025.ywrapper.StringValu"
      "eB\034\202A\031/bssids/bssid/state/bssid\022r\n\010count"
      "ers\030\205\204\353\357\001 \001(\0132;.openconfig.openconfig_wi"
      "fi_mac.Bssids.Bssid.State.CountersB\037\202A\034/"
      "bssids/bssid/state/counters\022A\n\003ess\030\275\344\2278 "
      "\001(\0132\025.ywrapper.StringValueB\032\202A\027/bssids/b"
      "ssid/state/ess\022e\n\026num_associated_clients"
      "\030\236\265\257$ \001(\0132\023.ywrapper.UintValueB-\202A*/bssi"
      "ds/bssid/state/num-associated-clients\032\217;"
      "\n\010Counters\022\\\n\rrx_bytes_data\030\261\273\333S \001(\0132\023.y"
      "wrapper.UintValueB-\202A*/bssids/bssid/stat"
      "e/counters/rx-bytes-data\022W\n\nrx_control\030\372"
      "\361\204\246\001 \001(\0132\023.ywrapper.UintValueB*\202A\'/bssid"
      "s/bssid/state/counters/rx-control\022\215\001\n\014rx"
      "_data_dist\030\370\305\2109 \001(\0132F.openconfig.opencon"
      "fig_wifi_mac.Bssids.Bssid.State.Counters"
      ".RxDataDistB,\202A)/bssids/bssid/state/coun"
      "ters/rx-data-dist\022\212\001\n\013rx_data_wmm\030\315\345\335B \001"
      "(\0132E.openconfig.openconfig_wifi_mac.Bssi"
      "ds.Bssid.State.Counters.RxDataWmmB+\202A(/b"
      "ssids/bssid/state/counters/rx-data-wmm\022|"
      "\n\006rx_mcs\030\342\244\367[ \001(\0132A.openconfig.openconfi"
      "g_wifi_mac.Bssids.Bssid.State.Counters.R"
      "xMcsB&\202A#/bssids/bssid/state/counters/rx"
      "-mcs\022Q\n\007rx_mgmt\030\344\247\355\230\001 \001(\0132\023.ywrapper.Uin"
      "tValueB\'\202A$/bssids/bssid/state/counters/"
      "rx-mgmt\022V\n\nrx_retries\030\347\335\323l \001(\0132\023.ywrappe"
      "r.UintValueB*\202A\'/bssids/bssid/state/coun"
      "ters/rx-retries\022a\n\017rx_retries_data\030\200\256\306\306\001"
      " \001(\0132\023.ywrapper.UintValueB/\202A,/bssids/bs"
      "sid/state/counters/rx-retries-data\022h\n\023rx"
      "_retries_subframe\030\231\212\357\r \001(\0132\023.ywrapper.Ui"
      "ntValueB3\202A0/bssids/bssid/state/counters"
      "/rx-retries-subframe\022\\\n\rtx_bytes_data\030\353\253"
      "\310C \001(\0132\023.ywrapper.UintValueB-\202A*/bssids/"
      "bssid/state/counters/tx-bytes-data\022V\n\ntx"
      "_control\030\354\245\216< \001(\0132\023.ywrapper.UintValueB*"
      "\202A\'/bssids/bssid/state/counters/tx-contr"
      "ol\022\215\001\n\014tx_data_dist\030\362\243\375\034 \001(\0132F.openconfi"
      "g.openconfig_wifi_mac.Bssids.Bssid.State"
      ".Counters.TxDataDistB,\202A)/bssids/bssid/s"
      "tate/counters/tx-data-dist\022\213\001\n\013tx_data_w"
      "mm\030\233\275\363\224\001 \001(\0132E.openconfig.openconfig_wif"
      "i_mac.Bssids.Bssid.State.Counters.TxData"
      "WmmB+\202A(/bssids/bssid/state/counters/tx-"
      "data-wmm\022|\n\006tx_mcs\030\330\205\2451 \001(\0132A.openconfig"
      ".openconfig_wifi_mac.Bssids.Bssid.State."
      "Counters.TxMcsB&\202A#/bssids/bssid/state/c"
      "ounters/tx-mcs\022Q\n\007tx_mgmt\030\232\224\365\307\001 \001(\0132\023.yw"
      "rapper.UintValueB\'\202A$/bssids/bssid/state"
      "/counters/tx-mgmt\022V\n\ntx_retries\030\331\205\233- \001(\013"
      "2\023.ywrapper.UintValueB*\202A\'/bssids/bssid/"
      "state/counters/tx-retries\022`\n\017tx_retries_"
      "data\030\246\305\345\n \001(\0132\023.ywrapper.UintValueB/\202A,/"
      "bssids/bssid/state/counters/tx-retries-d"
      "ata\022h\n\023tx_retries_subframe\030\277\336\222  \001(\0132\023.yw"
      "rapper.UintValueB3\202A0/bssids/bssid/state"
      "/counters/tx-retries-subframe\032\312\014\n\nRxData"
      "Dist\022]\n\007rx_0_64\030\355\264\353M \001(\0132\023.ywrapper.Uint"
      "ValueB4\202A1/bssids/bssid/state/counters/r"
      "x-data-dist/rx-0-64\022h\n\014rx_1025_2048\030\335\223\274\230"
      "\001 \001(\0132\023.ywrapper.UintValueB9\202A6/bssids/b"
      "ssid/state/counters/rx-data-dist/rx-1025"
      "-2048\022d\n\nrx_129_256\030\264\340\276\345\001 \001(\0132\023.ywrapper"
      ".UintValueB7\202A4/bssids/bssid/state/count"
      "ers/rx-data-dist/rx-129-256\022p\n\020rx_131073"
      "_262144\030\227\242\322\263\001 \001(\0132\023.ywrapper.UintValueB="
      "\202A:/bssids/bssid/state/counters/rx-data-"
      "dist/rx-131073-262144\022l\n\016rx_16385_32768\030"
      "\204\246\237\334\001 \001(\0132\023.ywrapper.UintValueB;\202A8/bssi"
      "ds/bssid/state/counters/rx-data-dist/rx-"
      "16385-32768\022g\n\014rx_2049_4096\030\363\233\323} \001(\0132\023.y"
      "wrapper.UintValueB9\202A6/bssids/bssid/stat"
      "e/counters/rx-data-dist/rx-2049-4096\022d\n\n"
      "rx_257_512\030\353\314\206\203\001 \001(\0132\023.ywrapper.UintValu"
      "eB7\202A4/bssids/bssid/state/counters/rx-da"
      "ta-dist/rx-257-512\022o\n\020rx_262145_524288\030\366"
      "\225\233% \001(\0132\023.ywrapper.UintValueB=\202A:/bssids"
      "/bssid/state/counters/rx-data-dist/rx-26"
      "2145-524288\022l\n\016rx_32769_65536\030\333\305\312\276\001 \001(\0132"
      "\023.ywrapper.UintValueB;\202A8/bssids/bssid/s"
      "tate/counters/rx-data-dist/rx-32769-6553"
      "6\022g\n\014rx_4097_8192\030\223\304\263e \001(\0132\023.ywrapper.Ui"
      "ntValueB9\202A6/bssids/bssid/state/counters"
      "/rx-data-dist/rx-4097-8192\022e\n\013rx_513_102"
      "4\030\241\224\346Q \001(\0132\023.ywrapper.UintValueB8\202A5/bss"
      "ids/bssid/state/counters/rx-data-dist/rx"
      "-513-1024\022q\n\021rx_524289_1048576\030\234\266\3071 \001(\0132"
      "\023.ywrapper.UintValueB>\202A;/bssids/bssid/s"
      "tate/counters/rx-data-dist/rx-524289-104"
      "8576\022a\n\trx_65_128\030\205\351\347b \001(\0132\023.ywrapper.Ui"
      "ntValueB6\202A3/bssids/bssid/state/counters"
      "/rx-data-dist/rx-65-128\022m\n\017rx_65537_1310"
      "72\030\305\300\325T \001(\0132\023.ywrapper.UintValueB<\202A9/bs"
      "sids/bssid/state/counters/rx-data-dist/r"
      "x-65537-131072\022j\n\rrx_8193_16384\030\334\264\367\240\001 \001("
      "\0132\023.ywrapper.UintValueB:\202A7/bssids/bssid"
      "/state/counters/rx-data-dist/rx-8193-163"
      "84\032\335\002\n\tRxDataWmm\022R\n\002be\030\373\356\223F \001(\0132\023.ywrapp"
      "er.UintValueB.\202A+/bssids/bssid/state/cou"
      "nters/rx-data-wmm/be\022R\n\002bk\030\365\356\223F \001(\0132\023.yw"
      "rapper.UintValueB.\202A+/bssids/bssid/state"
      "/counters/rx-data-wmm/bk\022S\n\002vi\030\363\255\224\346\001 \001(\013"
      "2\023.ywrapper.UintValueB.\202A+/bssids/bssid/"
      "state/counters/rx-data-wmm/vi\022S\n\002vo\030\365\255\224\346"
      "\001 \001(\0132\023.ywrapper.UintValueB.\202A+/bssids/b"
      "ssid/state/counters/rx-data-wmm/vo\032\317\006\n\005R"
      "xMcs\022R\n\004mcs0\030\300\306\206\254\001 \001(\0132\023.ywrapper.UintVa"
      "lueB+\202A(/bssids/bssid/state/counters/rx-"
      "mcs/mcs0\022R\n\004mcs1\030\301\306\206\254\001 \001(\0132\023.ywrapper.Ui"
      "ntValueB+\202A(/bssids/bssid/state/counters"
      "/rx-mcs/mcs1\022R\n\004mcs2\030\302\306\206\254\001 \001(\0132\023.ywrappe"
      "r.UintValueB+\202A(/bssids/bssid/state/coun"
      "ters/rx-mcs/mcs2\022R\n\004mcs3\030\303\306\206\254\001 \001(\0132\023.ywr"
      "apper.UintValueB+\202A(/bssids/bssid/state/"
      "counters/rx-mcs/mcs3\022R\n\004mcs4\030\304\306\206\254\001 \001(\0132\023"
      ".ywrapper.UintValueB+\202A(/bssids/bssid/st"
      "ate/counters/rx-mcs/mcs4\022R\n\004mcs5\030\305\306\206\254\001 \001"
      "(\0132\023.ywrapper.UintValueB+\202A(/bssids/bssi"
      "d/state/counters/rx-mcs/mcs5\022R\n\004mcs6\030\306\306\206"
      "\254\001 \001(\0132\023.ywrapper.UintValueB+\202A(/bssids/"
      "bssid/state/counters/rx-mcs/mcs6\022R\n\004mcs7"
      "\030\307\306\206\254\001 \001(\0132\023.ywrapper.UintValueB+\202A(/bss"
      "ids/bssid/state/counters/rx-mcs/mcs7\022R\n\004"
      "mcs8\030\310\306\206\254\001 \001(\0132\023.ywrapper.UintValueB+\202A("
      "/bssids/bssid/state/counters/rx-mcs/mcs8"
      "\022R\n\004mcs9\030\311\306\206\254\001 \001(\0132\023.ywrapper.UintValueB"
      "+\202A(/bssids/bssid/state/counters/rx-mcs/"
      "mcs9\032\310\014\n\nTxDataDist\022]\n\007tx_0_64\030\325\350\202* \001(\0132"
      "\023.ywrapper.UintValueB4\202A1/bssids/bssid/s"
      "tate/counters/tx-data-dist/tx-0-64\022g\n\014tx"
      "_1025_2048\030\205\321\343] \001(\0132\023.ywrapper.UintValue"
      "B9\202A6/bssids/bssid/state/counters/tx-dat"
      "a-dist/tx-1025-2048\022c\n\ntx_129_256\030\374\344\333; \001"
      "(\0132\023.ywrapper.UintValueB7\202A4/bssids/bssi"
      "d/state/counters/tx-data-dist/tx-129-256"
      "\022p\n\020tx_131073_262144\030\217\307\361\237\001 \001(\0132\023.ywrappe"
      "r.UintValueB=\202A:/bssids/bssid/state/coun"
      "ters/tx-data-dist/tx-131073-262144\022l\n\016tx"
      "_16385_32768\030\274\206\312\367\001 \001(\0132\023.ywrapper.UintVa"
      "lueB;\202A8/bssids/bssid/state/counters/tx-"
      "data-dist/tx-16385-32768\022g\n\014tx_2049_4096"
      "\030\213\332\223i \001(\0132\023.ywrapper.UintValueB9\202A6/bssi"
      "ds/bssid/state/counters/tx-data-dist/tx-"
      "2049-4096\022c\n\ntx_257_512\030\343\261\3416 \001(\0132\023.ywrap"
      "per.UintValueB7\202A4/bssids/bssid/state/co"
      "unters/tx-data-dist/tx-257-512\022p\n\020tx_262"
      "145_524288\030\256\335\271\270\001 \001(\0132\023.ywrapper.UintValu"
      "eB=\202A:/bssids/bssid/state/counters/tx-da"
      "ta-dist/tx-262145-524288\022k\n\016tx_32769_655"
      "36\030\303\200\333\031 \001(\0132\023.ywrapper.UintValueB;\202A8/bs"
      "sids/bssid/state/counters/tx-data-dist/t"
      "x-32769-65536\022g\n\014tx_4097_8192\030\233\243\3612 \001(\0132\023"
      ".ywrapper.UintValueB9\202A6/bssids/bssid/st"
      "ate/counters/tx-data-dist/tx-4097-8192\022f"
      "\n\013tx_513_1024\030\311\213\370\366\001 \001(\0132\023.ywrapper.UintV"
      "alueB8\202A5/bssids/bssid/state/counters/tx"
      "-data-dist/tx-513-1024\022q\n\021tx_524289_1048"
      "576\030\224\310\3652 \001(\0132\023.ywrapper.UintValueB>\202A;/b"
      "ssids/bssid/state/counters/tx-data-dist/"
      "tx-524289-1048576\022a\n\ttx_65_128\030\375\247\204e \001(\0132"
      "\023.ywrapper.UintValueB6\202A3/bssids/bssid/s"
      "tate/counters/tx-data-dist/tx-65-128\022m\n\017"
      "tx_65537_131072\030\355\252\345: \001(\0132\023.ywrapper.Uint"
      "ValueB<\202A9/bssids/bssid/state/counters/t"
      "x-data-dist/tx-65537-131072\022j\n\rtx_8193_1"
      "6384\030\324\202\225\221\001 \001(\0132\023.ywrapper.UintValueB:\202A7"
      "/bssids/bssid/state/counters/tx-data-dis"
      "t/tx-8193-16384\032\335\002\n\tTxDataWmm\022S\n\002be\030\375\205\262\312"
      "\001 \001(\0132\023.ywrapper.UintValueB.\202A+/bssids/b"
      "ssid/state/counters/tx-data-wmm/be\022S\n\002bk"
      "\030\363\205\262\312\001 \001(\0132\023.ywrapper.UintValueB.\202A+/bss"
      "ids/bssid/state/counters/tx-data-wmm/bk\022"
      "R\n\002vi\030\375\304\262j \001(\0132\023.ywrapper.UintValueB.\202A+"
      "/bssids/bssid/state/counters/tx-data-wmm"
      "/vi\022R\n\002vo\030\373\304\262j \001(\0132\023.ywrapper.UintValueB"
      ".\202A+/bssids/bssid/state/counters/tx-data"
      "-wmm/vo\032\305\006\n\005TxMcs\022Q\n\004mcs0\030\246\356\207k \001(\0132\023.ywr"
      "apper.UintValueB+\202A(/bssids/bssid/state/"
      "counters/tx-mcs/mcs0\022Q\n\004mcs1\030\247\356\207k \001(\0132\023."
      "ywrapper.UintValueB+\202A(/bssids/bssid/sta"
      "te/counters/tx-mcs/mcs1\022Q\n\004mcs2\030\244\356\207k \001(\013"
      "2\023.ywrapper.UintValueB+\202A(/bssids/bssid/"
      "state/counters/tx-mcs/mcs2\022Q\n\004mcs3\030\245\356\207k "
      "\001(\0132\023.ywrapper.UintValueB+\202A(/bssids/bss"
      "id/state/counters/tx-mcs/mcs3\022Q\n\004mcs4\030\242\356"
      "\207k \001(\0132\023.ywrapper.UintValueB+\202A(/bssids/"
      "bssid/state/counters/tx-mcs/mcs4\022Q\n\004mcs5"
      "\030\243\356\207k \001(\0132\023.ywrapper.UintValueB+\202A(/bssi"
      "ds/bssid/state/counters/tx-mcs/mcs5\022Q\n\004m"
      "cs6\030\240\356\207k \001(\0132\023.ywrapper.UintValueB+\202A(/b"
      "ssids/bssid/state/counters/tx-mcs/mcs6\022Q"
      "\n\004mcs7\030\241\356\207k \001(\0132\023.ywrapper.UintValueB+\202A"
      "(/bssids/bssid/state/counters/tx-mcs/mcs"
      "7\022Q\n\004mcs8\030\256\356\207k \001(\0132\023.ywrapper.UintValueB"
      "+\202A(/bssids/bssid/state/counters/tx-mcs/"
      "mcs8\022Q\n\004mcs9\030\257\356\207k \001(\0132\023.ywrapper.UintVal"
      "ueB+\202A(/bssids/bssid/state/counters/tx-m"
      "cs/mcs9\032r\n\010BssidKey\022)\n\tbssid_key\030\001 \001(\tB\026"
      "\202A\023/bssids/bssid/bssid\022;\n\005bssid\030\002 \001(\0132,."
      "openconfig.openconfig_wifi_mac.Bssids.Bs"
      "sid\"\347y\n\005Ssids\022O\n\004ssid\030\203\320\351\322\001 \003(\0132-.openco"
      "nfig.openconfig_wifi_mac.Ssids.SsidKeyB\016"
      "\202A\013/ssids/ssid\032\244x\n\004Ssid\022p\n\rband_steering"
      "\030\261\247\345\342\001 \001(\01327.openconfig.openconfig_wifi_"
      "mac.Ssids.Ssid.BandSteeringB\034\202A\031/ssids/s"
      "sid/band-steering\022^\n\007clients\030\342\336\347K \001(\01322."
      "openconfig.openconfig_wifi_mac.Ssids.Ssi"
      "d.ClientsB\026\202A\023/ssids/ssid/clients\022[\n\006con"
      "fig\030\204\327\317S \001(\01321.openconfig.openconfig_wif"
      "i_mac.Ssids.Ssid.ConfigB\025\202A\022/ssids/ssid/"
      "config\022[\n\006dot11r\030\311\335\354: \001(\01321.openconfig.o"
      "penconfig_wifi_mac.Ssids.Ssid.Dot11RB\025\202A"
      "\022/ssids/ssid/dot11r\022[\n\006dot11v\030\315\335\354: \001(\01321"
      ".openconfig.openconfig_wifi_mac.Ssids.Ss"
      "id.Dot11VB\025\202A\022/ssids/ssid/dot11v\022l\n\014dot1"
      "x_timers\030\337\202\214\013 \001(\01326.openconfig.openconfi"
      "g_wifi_mac.Ssids.Ssid.Dot1XTimersB\033\202A\030/s"
      "sids/ssid/dot1x-timers\022X\n\005state\030\235\361\203v \001(\013"
      "20.openconfig.openconfig_wifi_mac.Ssids."
      "Ssid.StateB\024\202A\021/ssids/ssid/state\022S\n\003wmm\030"
      "\353\374\304\340\001 \001(\0132..openconfig.openconfig_wifi_m"
      "ac.Ssids.Ssid.WmmB\022\202A\017/ssids/ssid/wmm\032\227\005"
      "\n\014BandSteering\022v\n\006config\030\326\272\262w \001(\0132>.open"
      "config.openconfig_wifi_mac.Ssids.Ssid.Ba"
      "ndSteering.ConfigB#\202A /ssids/ssid/band-s"
      "teering/config\022s\n\005state\030\203\354\275T \001(\0132=.openc"
      "onfig.openconfig_wifi_mac.Ssids.Ssid.Ban"
      "dSteering.StateB\"\202A\037/ssids/ssid/band-ste"
      "ering/state\032\314\001\n\006Config\022a\n\rband_steering\030"
      "\354\201\327\351\001 \001(\0132\023.ywrapper.BoolValueB1\202A./ssid"
      "s/ssid/band-steering/config/band-steerin"
      "g\022_\n\rsteering_rssi\030\200\210\2611 \001(\0132\022.ywrapper.I"
      "ntValueB1\202A./ssids/ssid/band-steering/co"
      "nfig/steering-rssi\032\312\001\n\005State\022`\n\rband_ste"
      "ering\030\261\343\256\265\001 \001(\0132\023.ywrapper.BoolValueB0\202A"
      "-/ssids/ssid/band-steering/state/band-st"
      "eering\022_\n\rsteering_rssi\030\211\312\376\372\001 \001(\0132\022.ywra"
      "pper.IntValueB0\202A-/ssids/ssid/band-steer"
      "ing/state/steering-rssi\032\302&\n\007Clients\022n\n\006c"
      "lient\030\344\363\235^ \003(\0132<.openconfig.openconfig_w"
      "ifi_mac.Ssids.Ssid.Clients.ClientKeyB\035\202A"
      "\032/ssids/ssid/clients/client\032\275$\n\006Client\022\237"
      "\001\n\023client_capabilities\030\335\346\374R \001(\0132L.openco"
      "nfig.openconfig_wifi_mac.Ssids.Ssid.Clie"
      "nts.Client.ClientCapabilitiesB1\202A./ssids"
      "/ssid/clients/client/client-capabilities"
      "\022\232\001\n\021client_connection\030\333\373\255\372\001 \001(\0132J.openc"
      "onfig.openconfig_wifi_mac.Ssids.Ssid.Cli"
      "ents.Client.ClientConnectionB/\202A,/ssids/"
      "ssid/clients/client/client-connection\022\202\001"
      "\n\tclient_rf\030\313\255\222\242\001 \001(\0132B.openconfig.openc"
      "onfig_wifi_mac.Ssids.Ssid.Clients.Client"
      ".ClientRfB\'\202A$/ssids/ssid/clients/client"
      "/client-rf\022\227\001\n\020dot11k_neighbors\030\243\273\312\347\001 \001("
      "\0132I.openconfig.openconfig_wifi_mac.Ssids"
      ".Ssid.Clients.Client.Dot11KNeighborsB.\202A"
      "+/ssids/ssid/clients/client/dot11k-neigh"
      "bors\022v\n\005state\030\336\236\376! \001(\0132\?.openconfig.open"
      "config_wifi_mac.Ssids.Ssid.Clients.Clien"
      "t.StateB#\202A /ssids/ssid/clients/client/s"
      "tate\032\341\003\n\022ClientCapabilities\022\236\001\n\005state\030\217\246"
      "\304\357\001 \001(\0132R.openconfig.openconfig_wifi_mac"
      ".Ssids.Ssid.Clients.Client.ClientCapabil"
      "ities.StateB7\202A4/ssids/ssid/clients/clie"
      "nt/client-capabilities/state\032\251\002\n\005State\022x"
      "\n\017channel_support\030\331\321\230s \003(\0132\023.ywrapper.Ui"
      "ntValueBG\202AD/ssids/ssid/clients/client/c"
      "lient-capabilities/state/channel-support"
      "\022\245\001\n\023client_capabilities\030\312\345\322\205\001 \003(\01627.ope"
      "nconfig.enums.OpenconfigWifiTypesCLIENTC"
      "APABILITIESBK\202AH/ssids/ssid/clients/clie"
      "nt/client-capabilities/state/client-capa"
      "bilities\032\376\007\n\020ClientConnection\022\232\001\n\005state\030"
      "\205\373\344\220\001 \001(\0132P.openconfig.openconfig_wifi_m"
      "ac.Ssids.Ssid.Clients.Client.ClientConne"
      "ction.StateB5\202A2/ssids/ssid/clients/clie"
      "nt/client-connection/state\032\314\006\n\005State\022\215\001\n"
      "\014client_state\030\251\340\201\006 \001(\01620.openconfig.enum"
      "s.OpenconfigWifiTypesCLIENTSTATEBB\202A\?/ss"
      "ids/ssid/clients/client/client-connectio"
      "n/state/client-state\022w\n\017connection_time\030"
      "\372\232\266\346\001 \001(\0132\023.ywrapper.UintValueBE\202AB/ssid"
      "s/ssid/clients/client/client-connection/"
      "state/connection-time\022j\n\010hostname\030\363\220\200L \001"
      "(\0132\025.ywrapper.StringValueB>\202A;/ssids/ssi"
      "d/clients/client/client-connection/state"
      "/hostname\022r\n\014ipv4_address\030\366\325\241l \001(\0132\025.ywr"
      "apper.StringValueBB\202A\?/ssids/ssid/client"
      "s/client/client-connection/state/ipv4-ad"
      "dress\022r\n\014ipv6_address\030\324\221\232P \001(\0132\025.ywrappe"
      "r.StringValueBB\202A\?/ssids/ssid/clients/cl"
      "ient/client-connection/state/ipv6-addres"
      "s\022z\n\020operating_system\030\325\224\252a \001(\0132\025.ywrappe"
      "r.StringValueBF\202AC/ssids/ssid/clients/cl"
      "ient/client-connection/state/operating-s"
      "ystem\022j\n\010username\030\350\274\3540 \001(\0132\025.ywrapper.St"
      "ringValueB>\202A;/ssids/ssid/clients/client"
      "/client-connection/state/username\032\337\007\n\010Cl"
      "ientRf\022\211\001\n\005state\030\225\230\2351 \001(\0132H.openconfig.o"
      "penconfig_wifi_mac.Ssids.Ssid.Clients.Cl"
      "ient.ClientRf.StateB-\202A*/ssids/ssid/clie"
      "nts/client/client-rf/state\032\306\006\n\005State\022\262\001\n"
      "\017connection_mode\030\330\373\203r \001(\0162W.openconfig.o"
      "penconfig_wifi_mac.Ssids.Ssid.Clients.Cl"
      "ient.ClientRf.State.ConnectionModeB=\202A:/"
      "ssids/ssid/clients/client/client-rf/stat"
      "e/connection-mode\022b\n\tfrequency\030\212\201\345* \001(\0132"
      "\023.ywrapper.UintValueB7\202A4/ssids/ssid/cli"
      "ents/client/client-rf/state/frequency\022`\n"
      "\010phy_rate\030\250\341\3074 \001(\0132\023.ywrapper.UintValueB"
      "6\202A3/ssids/ssid/clients/client/client-rf"
      "/state/phy-rate\022W\n\004rssi\030\315\371\237\' \001(\0132\022.ywrap"
      "per.IntValueB2\202A//ssids/ssid/clients/cli"
      "ent/client-rf/state/rssi\022W\n\003snr\030\367\351\216\244\001 \001("
      "\0132\023.ywrapper.UintValueB1\202A./ssids/ssid/c"
      "lients/client/client-rf/state/snr\022U\n\002ss\030"
      "\232\301\366\215\001 \001(\0132\023.ywrapper.UintValueB0\202A-/ssid"
      "s/ssid/clients/client/client-rf/state/ss"
      "\"\270\001\n\016ConnectionMode\022\030\n\024CONNECTIONMODE_UN"
      "SET\020\000\022\032\n\020CONNECTIONMODE_A\020\001\032\004\202A\001A\022\032\n\020CON"
      "NECTIONMODE_B\020\002\032\004\202A\001B\022\032\n\020CONNECTIONMODE_"
      "G\020\003\032\004\202A\001G\022\032\n\020CONNECTIONMODE_N\020\004\032\004\202A\001N\022\034\n"
      "\021CONNECTIONMODE_AC\020\005\032\005\202A\002AC\032\222\006\n\017Dot11KNe"
      "ighbors\022\227\001\n\005state\030\275\372\2229 \001(\0132O.openconfig."
      "openconfig_wifi_mac.Ssids.Ssid.Clients.C"
      "lient.Dot11KNeighbors.StateB4\202A1/ssids/s"
      "sid/clients/client/dot11k-neighbors/stat"
      "e\032\344\004\n\005State\022}\n\023channel_load_report\030\321\354\320T "
      "\001(\0132\023.ywrapper.UintValueBH\202AE/ssids/ssid"
      "/clients/client/dot11k-neighbors/state/c"
      "hannel-load-report\022x\n\020neighbor_antenna\030\350"
      "\273\215\352\001 \001(\0132\023.ywrapper.UintValueBE\202AB/ssids"
      "/ssid/clients/client/dot11k-neighbors/st"
      "ate/neighbor-antenna\022v\n\016neighbor_bssid\030\262"
      "\273\342\254\001 \001(\0132\025.ywrapper.StringValueBC\202A@/ssi"
      "ds/ssid/clients/client/dot11k-neighbors/"
      "state/neighbor-bssid\022x\n\020neighbor_channel"
      "\030\324\304\211\237\001 \001(\0132\023.ywrapper.UintValueBE\202AB/ssi"
      "ds/ssid/clients/client/dot11k-neighbors/"
      "state/neighbor-channel\022p\n\rneighbor_rssi\030"
      "\302\375\312M \001(\0132\022.ywrapper.IntValueBB\202A\?/ssids/"
      "ssid/clients/client/dot11k-neighbors/sta"
      "te/neighbor-rssi\032\200\005\n\005State\022\214\001\n\010counters\030"
      "\262\255\306\345\001 \001(\0132H.openconfig.openconfig_wifi_m"
      "ac.Ssids.Ssid.Clients.Client.State.Count"
      "ersB,\202A)/ssids/ssid/clients/client/state"
      "/counters\022N\n\003mac\030\306\243\207_ \001(\0132\025.ywrapper.Str"
      "ingValueB\'\202A$/ssids/ssid/clients/client/"
      "state/mac\032\227\003\n\010Counters\022`\n\010rx_bytes\030\265\201\270\354\001"
      " \001(\0132\023.ywrapper.UintValueB5\202A2/ssids/ssi"
      "d/clients/client/state/counters/rx-bytes"
      "\022c\n\nrx_retries\030\212\336\274Z \001(\0132\023.ywrapper.UintV"
      "alueB7\202A4/ssids/ssid/clients/client/stat"
      "e/counters/rx-retries\022_\n\010tx_bytes\030\317\372\216\013 \001"
      "(\0132\023.ywrapper.UintValueB5\202A2/ssids/ssid/"
      "clients/client/state/counters/tx-bytes\022c"
      "\n\ntx_retries\030\230\247\210/ \001(\0132\023.ywrapper.UintVal"
      "ueB7\202A4/ssids/ssid/clients/client/state/"
      "counters/tx-retries\032\206\001\n\tClientKey\022.\n\003mac"
      "\030\001 \001(\tB!\202A\036/ssids/ssid/clients/client/ma"
      "c\022I\n\006client\030\002 \001(\01329.openconfig.openconfi"
      "g_wifi_mac.Ssids.Ssid.Clients.Client\032\366\021\n"
      "\006Config\022X\n\020advertise_apname\030\375\270\356[ \001(\0132\023.y"
      "wrapper.BoolValueB&\202A#/ssids/ssid/config"
      "/advertise-apname\022r\n\020basic_data_rates\030\202\367"
      "\344- \003(\0162-.openconfig.enums.OpenconfigWifi"
      "TypesDATARATEB&\202A#/ssids/ssid/config/bas"
      "ic-data-rates\022Y\n\020broadcast_filter\030\263\314\342\212\001 "
      "\001(\0132\023.ywrapper.BoolValueB&\202A#/ssids/ssid"
      "/config/broadcast-filter\022>\n\003csa\030\346\234\225v \001(\013"
      "2\023.ywrapper.BoolValueB\031\202A\026/ssids/ssid/co"
      "nfig/csa\022S\n\rdhcp_required\030\234\337\312\235\001 \001(\0132\023.yw"
      "rapper.BoolValueB#\202A /ssids/ssid/config/"
      "dhcp-required\022E\n\006dot11k\030\361\233\307\341\001 \001(\0132\023.ywra"
      "pper.BoolValueB\034\202A\031/ssids/ssid/config/do"
      "t11k\022\?\n\003dva\030\202\375\265\336\001 \001(\0132\023.ywrapper.BoolVal"
      "ueB\031\202A\026/ssids/ssid/config/dva\022F\n\007enabled"
      "\030\246\247\322\032 \001(\0132\023.ywrapper.BoolValueB\035\202A\032/ssid"
      "s/ssid/config/enabled\022O\n\013gtk_timeout\030\277\327\245"
      "\314\001 \001(\0132\023.ywrapper.UintValueB!\202A\036/ssids/s"
      "sid/config/gtk-timeout\022E\n\006hidden\030\257\264\365\252\001 \001"
      "(\0132\023.ywrapper.BoolValueB\034\202A\031/ssids/ssid/"
      "config/hidden\022W\n\017ipv6_ndp_filter\030\224\255\215\230\001 \001"
      "(\0132\023.ywrapper.BoolValueB%\202A\"/ssids/ssid/"
      "config/ipv6-ndp-filter\022c\n\025ipv6_ndp_filte"
      "r_timer\030\350\251\331\273\001 \001(\0132\023.ywrapper.UintValueB+"
      "\202A(/ssids/ssid/config/ipv6-ndp-filter-ti"
      "mer\022X\n\017mobility_domain\030\301\265\377Q \001(\0132\025.ywrapp"
      "er.StringValueB%\202A\"/ssids/ssid/config/mo"
      "bility-domain\022Y\n\020multicast_filter\030\316\246\363\343\001 "
      "\001(\0132\023.ywrapper.BoolValueB&\202A#/ssids/ssid"
      "/config/multicast-filter\022B\n\004name\030\206\235\357\007 \001("
      "\0132\025.ywrapper.StringValueB\032\202A\027/ssids/ssid"
      "/config/name\022>\n\003okc\030\250\302\360u \001(\0132\023.ywrapper."
      "BoolValueB\031\202A\026/ssids/ssid/config/okc\022\203\001\n"
      "\023operating_frequency\030\311\240\350\345\001 \001(\01627.opencon"
      "fig.enums.OpenconfigWifiTypesOPERATINGFR"
      "EQUENCYB)\202A&/ssids/ssid/config/operating"
      "-frequency\022j\n\006opmode\030\257\212\210\303\001 \001(\01628.opencon"
      "fig.openconfig_wifi_mac.Ssids.Ssid.Confi"
      "g.OpmodeB\034\202A\031/ssids/ssid/config/opmode\022O"
      "\n\013ptk_timeout\030\360\276\345\300\001 \001(\0132\023.ywrapper.UintV"
      "alueB!\202A\036/ssids/ssid/config/ptk-timeout\022"
      "J\n\tqbss_load\030\361\342\324U \001(\0132\023.ywrapper.BoolVal"
      "ueB\037\202A\034/ssids/ssid/config/qbss-load\022S\n\014s"
      "erver_group\030\340\360\271\244\001 \001(\0132\025.ywrapper.StringV"
      "alueB\"\202A\037/ssids/ssid/config/server-group"
      "\022Z\n\021station_isolation\030\346\331\343) \001(\0132\023.ywrappe"
      "r.BoolValueB\'\202A$/ssids/ssid/config/stati"
      "on-isolation\022z\n\024supported_data_rates\030\246\204\254"
      "= \003(\0162-.openconfig.enums.OpenconfigWifiT"
      "ypesDATARATEB*\202A\'/ssids/ssid/config/supp"
      "orted-data-rates\022G\n\007vlan_id\030\366\227\200\205\001 \001(\0132\023."
      "ywrapper.UintValueB\035\202A\032/ssids/ssid/confi"
      "g/vlan-id\022J\n\010wpa2_psk\030\342\336\365U \001(\0132\025.ywrappe"
      "r.StringValueB\036\202A\033/ssids/ssid/config/wpa"
      "2-psk\"~\n\006Opmode\022\030\n\013OPMODE_OPEN\020\000\032\007\202A\004OPE"
      "N\022*\n\024OPMODE_WPA2_PERSONAL\020\002\032\020\202A\rWPA2_PER"
      "SONAL\022.\n\026OPMODE_WPA2_ENTERPRISE\020\003\032\022\202A\017WP"
      "A2_ENTERPRISE\032\317\t\n\006Dot11R\022j\n\006config\030\276\315\375\354\001"
      " \001(\01328.openconfig.openconfig_wifi_mac.Ss"
      "ids.Ssid.Dot11R.ConfigB\034\202A\031/ssids/ssid/d"
      "ot11r/config\022f\n\005state\030\253\265\304G \001(\01327.opencon"
      "fig.openconfig_wifi_mac.Ssids.Ssid.Dot11"
      "R.StateB\033\202A\030/ssids/ssid/dot11r/state\032\372\003\n"
      "\006Config\022L\n\006dot11r\030\342\317\251\222\001 \001(\0132\023.ywrapper.B"
      "oolValueB#\202A /ssids/ssid/dot11r/config/d"
      "ot11r\022^\n\017dot11r_domainid\030\350\203\213\267\001 \001(\0132\023.ywr"
      "apper.UintValueB,\202A)/ssids/ssid/dot11r/c"
      "onfig/dot11r-domainid\022\214\001\n\rdot11r_method\030"
      "\374\237\265\321\001 \001(\0162E.openconfig.openconfig_wifi_m"
      "ac.Ssids.Ssid.Dot11R.Config.Dot11RMethod"
      "B*\202A\'/ssids/ssid/dot11r/config/dot11r-me"
      "thod\022g\n\024dot11r_r1key_timeout\030\263\375\204a \001(\0132\023."
      "ywrapper.UintValueB1\202A./ssids/ssid/dot11"
      "r/config/dot11r-r1key-timeout\"J\n\014Dot11RM"
      "ethod\022\034\n\020DOT11RMETHOD_OVA\020\000\032\006\202A\003OVA\022\034\n\020D"
      "OT11RMETHOD_ODS\020\002\032\006\202A\003ODS\032\363\003\n\005State\022J\n\006d"
      "ot11r\030\341\301\352D \001(\0132\023.ywrapper.BoolValueB\"\202A\037"
      "/ssids/ssid/dot11r/state/dot11r\022]\n\017dot11"
      "r_domainid\030\221\240\371\314\001 \001(\0132\023.ywrapper.UintValu"
      "eB+\202A(/ssids/ssid/dot11r/state/dot11r-do"
      "mainid\022\212\001\n\rdot11r_method\030\335\342\307\363\001 \001(\0162D.ope"
      "nconfig.openconfig_wifi_mac.Ssids.Ssid.D"
      "ot11R.State.Dot11RMethodB)\202A&/ssids/ssid"
      "/dot11r/state/dot11r-method\022f\n\024dot11r_r1"
      "key_timeout\030\220\356\205) \001(\0132\023.ywrapper.UintValu"
      "eB0\202A-/ssids/ssid/dot11r/state/dot11r-r1"
      "key-timeout\"J\n\014Dot11RMethod\022\034\n\020DOT11RMET"
      "HOD_OVA\020\000\032\006\202A\003OVA\022\034\n\020DOT11RMETHOD_ODS\020\002\032"
      "\006\202A\003ODS\032\376\007\n\006Dot11V\022i\n\006config\030\342\235\326n \001(\01328."
      "openconfig.openconfig_wifi_mac.Ssids.Ssi"
      "d.Dot11V.ConfigB\034\202A\031/ssids/ssid/dot11v/c"
      "onfig\022g\n\005state\030\237\340\333\316\001 \001(\01327.openconfig.op"
      "enconfig_wifi_mac.Ssids.Ssid.Dot11V.Stat"
      "eB\033\202A\030/ssids/ssid/dot11v/state\032\220\003\n\006Confi"
      "g\022[\n\016dot11v_bssidle\030\377\356\266\014 \001(\0132\023.ywrapper."
      "BoolValueB+\202A(/ssids/ssid/dot11v/config/"
      "dot11v-bssidle\022k\n\026dot11v_bssidle_timeout"
      "\030\201\247\265J \001(\0132\023.ywrapper.UintValueB3\202A0/ssid"
      "s/ssid/dot11v/config/dot11v-bssidle-time"
      "out\022g\n\024dot11v_bsstransition\030\360\264\231u \001(\0132\023.y"
      "wrapper.BoolValueB1\202A./ssids/ssid/dot11v"
      "/config/dot11v-bsstransition\022S\n\ndot11v_d"
      "ms\030\315\214\234\007 \001(\0132\023.ywrapper.BoolValueB\'\202A$/ss"
      "ids/ssid/dot11v/config/dot11v-dms\032\214\003\n\005St"
      "ate\022[\n\016dot11v_bssidle\030\330\247\344\223\001 \001(\0132\023.ywrapp"
      "er.BoolValueB*\202A\'/ssids/ssid/dot11v/stat"
      "e/dot11v-bssidle\022j\n\026dot11v_bssidle_timeo"
      "ut\030\206\201\265\? \001(\0132\023.ywrapper.UintValueB2\202A//ss"
      "ids/ssid/dot11v/state/dot11v-bssidle-tim"
      "eout\022f\n\024dot11v_bsstransition\030\307\227\342N \001(\0132\023."
      "ywrapper.BoolValueB0\202A-/ssids/ssid/dot11"
      "v/state/dot11v-bsstransition\022R\n\ndot11v_d"
      "ms\030\356\234\2005 \001(\0132\023.ywrapper.BoolValueB&\202A#/ss"
      "ids/ssid/dot11v/state/dot11v-dms\032\245\005\n\013Dot"
      "1XTimers\022u\n\006config\030\240\215\344\324\001 \001(\0132=.openconfi"
      "g.openconfig_wifi_mac.Ssids.Ssid.Dot1XTi"
      "mers.ConfigB\"\202A\037/ssids/ssid/dot1x-timers"
      "/config\022q\n\005state\030\231\226\233# \001(\0132<.openconfig.o"
      "penconfig_wifi_mac.Ssids.Ssid.Dot1XTimer"
      "s.StateB!\202A\036/ssids/ssid/dot1x-timers/sta"
      "te\032\325\001\n\006Config\022a\n\016blacklist_time\030\306\347\320\034 \001(\013"
      "2\023.ywrapper.UintValueB1\202A./ssids/ssid/do"
      "t1x-timers/config/blacklist-time\022h\n\021max_"
      "auth_failures\030\312\342\264\210\001 \001(\0132\023.ywrapper.UintV"
      "alueB4\202A1/ssids/ssid/dot1x-timers/config"
      "/max-auth-failures\032\323\001\n\005State\022a\n\016blacklis"
      "t_time\030\215\357\230\245\001 \001(\0132\023.ywrapper.UintValueB0\202"
      "A-/ssids/ssid/dot1x-timers/state/blackli"
      "st-time\022g\n\021max_auth_failures\030\217\256\220\202\001 \001(\0132\023"
      ".ywrapper.UintValueB3\202A0/ssids/ssid/dot1"
      "x-timers/state/max-auth-failures\032\374\024\n\005Sta"
      "te\022W\n\020advertise_apname\030\252\363\216U \001(\0132\023.ywrapp"
      "er.BoolValueB%\202A\"/ssids/ssid/state/adver"
      "tise-apname\022r\n\020basic_data_rates\030\315\271\275\232\001 \003("
      "\0162-.openconfig.enums.OpenconfigWifiTypes"
      "DATARATEB%\202A\"/ssids/ssid/state/basic-dat"
      "a-rates\022X\n\020broadcast_filter\030\214\357\214\343\001 \001(\0132\023."
      "ywrapper.BoolValueB%\202A\"/ssids/ssid/state"
      "/broadcast-filter\022f\n\027bss_channel_utiliza"
      "tion\030\345\262\255\222\001 \001(\0132\023.ywrapper.UintValueB,\202A)"
      "/ssids/ssid/state/bss-channel-utilizatio"
      "n\022D\n\005bssid\030\213\323\344\211\001 \001(\0132\025.ywrapper.StringVa"
      "lueB\032\202A\027/ssids/ssid/state/bssid\022=\n\003csa\030\367"
      "\246\204H \001(\0132\023.ywrapper.BoolValueB\030\202A\025/ssids/"
      "ssid/state/csa\022R\n\rdhcp_required\030\245\373\310\334\001 \001("
      "\0132\023.ywrapper.BoolValueB\"\202A\037/ssids/ssid/s"
      "tate/dhcp-required\022D\n\006dot11k\030\372\360\373\322\001 \001(\0132\023"
      ".ywrapper.BoolValueB\033\202A\030/ssids/ssid/stat"
      "e/dot11k\022=\n\003dva\030\207\254\215` \001(\0132\023.ywrapper.Bool"
      "ValueB\030\202A\025/ssids/ssid/state/dva\022F\n\007enabl"
      "ed\030\263\320\363\213\001 \001(\0132\023.ywrapper.BoolValueB\034\202A\031/s"
      "sids/ssid/state/enabled\022N\n\013gtk_timeout\030\376"
      "\307\331\325\001 \001(\0132\023.ywrapper.UintValueB \202A\035/ssids"
      "/ssid/state/gtk-timeout\022C\n\006hidden\030\204\333\200a \001"
      "(\0132\023.ywrapper.BoolValueB\033\202A\030/ssids/ssid/"
      "state/hidden\022V\n\017ipv6_ndp_filter\030\235\323\222\242\001 \001("
      "\0132\023.ywrapper.BoolValueB$\202A!/ssids/ssid/s"
      "tate/ipv6-ndp-filter\022b\n\025ipv6_ndp_filter_"
      "timer\030\345\201\326\351\001 \001(\0132\023.ywrapper.UintValueB*\202A"
      "\'/ssids/ssid/state/ipv6-ndp-filter-timer"
      "\022X\n\017mobility_domain\030\214\213\361\237\001 \001(\0132\025.ywrapper"
      ".StringValueB$\202A!/ssids/ssid/state/mobil"
      "ity-domain\022W\n\020multicast_filter\030\341\257\365< \001(\0132"
      "\023.ywrapper.BoolValueB%\202A\"/ssids/ssid/sta"
      "te/multicast-filter\022A\n\004name\030\371\263\247\023 \001(\0132\025.y"
      "wrapper.StringValueB\031\202A\026/ssids/ssid/stat"
      "e/name\022=\n\003okc\030\371\360\332G \001(\0132\023.ywrapper.BoolVa"
      "lueB\030\202A\025/ssids/ssid/state/okc\022\201\001\n\023operat"
      "ing_frequency\030\210\305\261n \001(\01627.openconfig.enum"
      "s.OpenconfigWifiTypesOPERATINGFREQUENCYB"
      "(\202A%/ssids/ssid/state/operating-frequenc"
      "y\022g\n\006opmode\030\250\222\200! \001(\01627.openconfig.openco"
      "nfig_wifi_mac.Ssids.Ssid.State.OpmodeB\033\202"
      "A\030/ssids/ssid/state/opmode\022N\n\013ptk_timeou"
      "t\030\361\204\244\275\001 \001(\0132\023.ywrapper.UintValueB \202A\035/ss"
      "ids/ssid/state/ptk-timeout\022J\n\tqbss_load\030"
      "\330\375\252\376\001 \001(\0132\023.ywrapper.BoolValueB\036\202A\033/ssid"
      "s/ssid/state/qbss-load\022x\n rx_bss_dot11_c"
      "hannel_utilization\030\344\234\243\325\001 \001(\0132\023.ywrapper."
      "UintValueB5\202A2/ssids/ssid/state/rx-bss-d"
      "ot11-channel-utilization\022R\n\014server_group"
      "\030\257\221\373\341\001 \001(\0132\025.ywrapper.StringValueB!\202A\036/s"
      "sids/ssid/state/server-group\022Y\n\021station_"
      "isolation\030\213\347\326\r \001(\0132\023.ywrapper.BoolValueB"
      "&\202A#/ssids/ssid/state/station-isolation\022"
      "z\n\024supported_data_rates\030\335\264\277\332\001 \003(\0162-.open"
      "config.enums.OpenconfigWifiTypesDATARATE"
      "B)\202A&/ssids/ssid/state/supported-data-ra"
      "tes\022w\n tx_bss_dot11_channel_utilization\030"
      "\272\223\212* \001(\0132\023.ywrapper.UintValueB5\202A2/ssids"
      "/ssid/state/tx-bss-dot11-channel-utiliza"
      "tion\022E\n\007vlan_id\030\347\367\250D \001(\0132\023.ywrapper.Uint"
      "ValueB\034\202A\031/ssids/ssid/state/vlan-id\022J\n\010w"
      "pa2_psk\030\331\273\204\245\001 \001(\0132\025.ywrapper.StringValue"
      "B\035\202A\032/ssids/ssid/state/wpa2-psk\"~\n\006Opmod"
      "e\022\030\n\013OPMODE_OPEN\020\000\032\007\202A\004OPEN\022*\n\024OPMODE_WP"
      "A2_PERSONAL\020\002\032\020\202A\rWPA2_PERSONAL\022.\n\026OPMOD"
      "E_WPA2_ENTERPRISE\020\003\032\022\202A\017WPA2_ENTERPRISE\032"
      "\303\010\n\003Wmm\022c\n\006config\030\274\334\213N \001(\01325.openconfig."
      "openconfig_wifi_mac.Ssids.Ssid.Wmm.Confi"
      "gB\031\202A\026/ssids/ssid/wmm/config\022`\n\005state\030\265\226"
      "\361J \001(\01324.openconfig.openconfig_wifi_mac."
      "Ssids.Ssid.Wmm.StateB\030\202A\025/ssids/ssid/wmm"
      "/state\032\274\003\n\006Config\022P\n\ntrust_dscp\030\336\317\271T \001(\013"
      "2\023.ywrapper.BoolValueB$\202A!/ssids/ssid/wm"
      "m/config/trust-dscp\022V\n\rwmm_be_remark\030\267\253\324"
      "\005 \003(\0132\023.ywrapper.UintValueB\'\202A$/ssids/ss"
      "id/wmm/config/wmm-be-remark\022W\n\rwmm_bk_re"
      "mark\030\211\262\323\333\001 \003(\0132\023.ywrapper.UintValueB\'\202A$"
      "/ssids/ssid/wmm/config/wmm-bk-remark\022W\n\r"
      "wmm_vi_remark\030\307\206\232\304\001 \003(\0132\023.ywrapper.UintV"
      "alueB\'\202A$/ssids/ssid/wmm/config/wmm-vi-r"
      "emark\022V\n\rwmm_vo_remark\030\241\232\346& \003(\0132\023.ywrapp"
      "er.UintValueB\'\202A$/ssids/ssid/wmm/config/"
      "wmm-vo-remark\032\265\003\n\005State\022O\n\ntrust_dscp\030\351\306"
      "\212\' \001(\0132\023.ywrapper.BoolValueB#\202A /ssids/s"
      "sid/wmm/state/trust-dscp\022U\n\rwmm_be_remar"
      "k\030\276\233\351\005 \003(\0132\023.ywrapper.UintValueB&\202A#/ssi"
      "ds/ssid/wmm/state/wmm-be-remark\022U\n\rwmm_b"
      "k_remark\030\314\320\354T \003(\0132\023.ywrapper.UintValueB&"
      "\202A#/ssids/ssid/wmm/state/wmm-bk-remark\022V"
      "\n\rwmm_vi_remark\030\256\257\361\263\001 \003(\0132\023.ywrapper.Uin"
      "tValueB&\202A#/ssids/ssid/wmm/state/wmm-vi-"
      "remark\022U\n\rwmm_vo_remark\030\344\247\367b \003(\0132\023.ywrap"
      "per.UintValueB&\202A#/ssids/ssid/wmm/state/"
      "wmm-vo-remark\032f\n\007SsidKey\022!\n\004name\030\001 \001(\tB\023"
      "\202A\020/ssids/ssid/name\0228\n\004ssid\030\002 \001(\0132*.open"
      "config.openconfig_wifi_mac.Ssids.Ssidb\006p"
      "roto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 24085);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "openconfig/openconfig_wifi_mac/openconfig_wifi_mac.proto", &protobuf_RegisterTypes);
  ::protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fywrapper_2fywrapper_2eproto::AddDescriptors();
  ::protobuf_github_2ecom_2fopenconfig_2fygot_2fproto_2fyext_2fyext_2eproto::AddDescriptors();
  ::protobuf_openconfig_2fenums_2fenums_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto
namespace openconfig {
namespace openconfig_wifi_mac {
const ::google::protobuf::EnumDescriptor* Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_descriptor() {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_enum_descriptors[0];
}
bool Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode Ssids_Ssid_Clients_Client_ClientRf_State::CONNECTIONMODE_UNSET;
const Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode Ssids_Ssid_Clients_Client_ClientRf_State::CONNECTIONMODE_A;
const Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode Ssids_Ssid_Clients_Client_ClientRf_State::CONNECTIONMODE_B;
const Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode Ssids_Ssid_Clients_Client_ClientRf_State::CONNECTIONMODE_G;
const Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode Ssids_Ssid_Clients_Client_ClientRf_State::CONNECTIONMODE_N;
const Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode Ssids_Ssid_Clients_Client_ClientRf_State::CONNECTIONMODE_AC;
const Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode Ssids_Ssid_Clients_Client_ClientRf_State::ConnectionMode_MIN;
const Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode Ssids_Ssid_Clients_Client_ClientRf_State::ConnectionMode_MAX;
const int Ssids_Ssid_Clients_Client_ClientRf_State::ConnectionMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Ssids_Ssid_Config_Opmode_descriptor() {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_enum_descriptors[1];
}
bool Ssids_Ssid_Config_Opmode_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Ssids_Ssid_Config_Opmode Ssids_Ssid_Config::OPMODE_OPEN;
const Ssids_Ssid_Config_Opmode Ssids_Ssid_Config::OPMODE_WPA2_PERSONAL;
const Ssids_Ssid_Config_Opmode Ssids_Ssid_Config::OPMODE_WPA2_ENTERPRISE;
const Ssids_Ssid_Config_Opmode Ssids_Ssid_Config::Opmode_MIN;
const Ssids_Ssid_Config_Opmode Ssids_Ssid_Config::Opmode_MAX;
const int Ssids_Ssid_Config::Opmode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Ssids_Ssid_Dot11R_Config_Dot11RMethod_descriptor() {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_enum_descriptors[2];
}
bool Ssids_Ssid_Dot11R_Config_Dot11RMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Ssids_Ssid_Dot11R_Config_Dot11RMethod Ssids_Ssid_Dot11R_Config::DOT11RMETHOD_OVA;
const Ssids_Ssid_Dot11R_Config_Dot11RMethod Ssids_Ssid_Dot11R_Config::DOT11RMETHOD_ODS;
const Ssids_Ssid_Dot11R_Config_Dot11RMethod Ssids_Ssid_Dot11R_Config::Dot11RMethod_MIN;
const Ssids_Ssid_Dot11R_Config_Dot11RMethod Ssids_Ssid_Dot11R_Config::Dot11RMethod_MAX;
const int Ssids_Ssid_Dot11R_Config::Dot11RMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Ssids_Ssid_Dot11R_State_Dot11RMethod_descriptor() {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_enum_descriptors[3];
}
bool Ssids_Ssid_Dot11R_State_Dot11RMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Ssids_Ssid_Dot11R_State_Dot11RMethod Ssids_Ssid_Dot11R_State::DOT11RMETHOD_OVA;
const Ssids_Ssid_Dot11R_State_Dot11RMethod Ssids_Ssid_Dot11R_State::DOT11RMETHOD_ODS;
const Ssids_Ssid_Dot11R_State_Dot11RMethod Ssids_Ssid_Dot11R_State::Dot11RMethod_MIN;
const Ssids_Ssid_Dot11R_State_Dot11RMethod Ssids_Ssid_Dot11R_State::Dot11RMethod_MAX;
const int Ssids_Ssid_Dot11R_State::Dot11RMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Ssids_Ssid_State_Opmode_descriptor() {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_enum_descriptors[4];
}
bool Ssids_Ssid_State_Opmode_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Ssids_Ssid_State_Opmode Ssids_Ssid_State::OPMODE_OPEN;
const Ssids_Ssid_State_Opmode Ssids_Ssid_State::OPMODE_WPA2_PERSONAL;
const Ssids_Ssid_State_Opmode Ssids_Ssid_State::OPMODE_WPA2_ENTERPRISE;
const Ssids_Ssid_State_Opmode Ssids_Ssid_State::Opmode_MIN;
const Ssids_Ssid_State_Opmode Ssids_Ssid_State::Opmode_MAX;
const int Ssids_Ssid_State::Opmode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Bssids_Bssid_State_Counters_RxDataDist::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_RxDataDist_default_instance_._instance.get_mutable()->rx_0_64_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_RxDataDist_default_instance_._instance.get_mutable()->rx_1025_2048_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_RxDataDist_default_instance_._instance.get_mutable()->rx_129_256_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_RxDataDist_default_instance_._instance.get_mutable()->rx_131073_262144_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_RxDataDist_default_instance_._instance.get_mutable()->rx_16385_32768_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_RxDataDist_default_instance_._instance.get_mutable()->rx_2049_4096_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_RxDataDist_default_instance_._instance.get_mutable()->rx_257_512_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_RxDataDist_default_instance_._instance.get_mutable()->rx_262145_524288_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_RxDataDist_default_instance_._instance.get_mutable()->rx_32769_65536_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_RxDataDist_default_instance_._instance.get_mutable()->rx_4097_8192_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_RxDataDist_default_instance_._instance.get_mutable()->rx_513_1024_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_RxDataDist_default_instance_._instance.get_mutable()->rx_524289_1048576_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_RxDataDist_default_instance_._instance.get_mutable()->rx_65_128_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_RxDataDist_default_instance_._instance.get_mutable()->rx_65537_131072_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_RxDataDist_default_instance_._instance.get_mutable()->rx_8193_16384_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Bssids_Bssid_State_Counters_RxDataDist::clear_rx_0_64() {
  if (GetArenaNoVirtual() == NULL && rx_0_64_ != NULL) {
    delete rx_0_64_;
  }
  rx_0_64_ = NULL;
}
void Bssids_Bssid_State_Counters_RxDataDist::clear_rx_1025_2048() {
  if (GetArenaNoVirtual() == NULL && rx_1025_2048_ != NULL) {
    delete rx_1025_2048_;
  }
  rx_1025_2048_ = NULL;
}
void Bssids_Bssid_State_Counters_RxDataDist::clear_rx_129_256() {
  if (GetArenaNoVirtual() == NULL && rx_129_256_ != NULL) {
    delete rx_129_256_;
  }
  rx_129_256_ = NULL;
}
void Bssids_Bssid_State_Counters_RxDataDist::clear_rx_131073_262144() {
  if (GetArenaNoVirtual() == NULL && rx_131073_262144_ != NULL) {
    delete rx_131073_262144_;
  }
  rx_131073_262144_ = NULL;
}
void Bssids_Bssid_State_Counters_RxDataDist::clear_rx_16385_32768() {
  if (GetArenaNoVirtual() == NULL && rx_16385_32768_ != NULL) {
    delete rx_16385_32768_;
  }
  rx_16385_32768_ = NULL;
}
void Bssids_Bssid_State_Counters_RxDataDist::clear_rx_2049_4096() {
  if (GetArenaNoVirtual() == NULL && rx_2049_4096_ != NULL) {
    delete rx_2049_4096_;
  }
  rx_2049_4096_ = NULL;
}
void Bssids_Bssid_State_Counters_RxDataDist::clear_rx_257_512() {
  if (GetArenaNoVirtual() == NULL && rx_257_512_ != NULL) {
    delete rx_257_512_;
  }
  rx_257_512_ = NULL;
}
void Bssids_Bssid_State_Counters_RxDataDist::clear_rx_262145_524288() {
  if (GetArenaNoVirtual() == NULL && rx_262145_524288_ != NULL) {
    delete rx_262145_524288_;
  }
  rx_262145_524288_ = NULL;
}
void Bssids_Bssid_State_Counters_RxDataDist::clear_rx_32769_65536() {
  if (GetArenaNoVirtual() == NULL && rx_32769_65536_ != NULL) {
    delete rx_32769_65536_;
  }
  rx_32769_65536_ = NULL;
}
void Bssids_Bssid_State_Counters_RxDataDist::clear_rx_4097_8192() {
  if (GetArenaNoVirtual() == NULL && rx_4097_8192_ != NULL) {
    delete rx_4097_8192_;
  }
  rx_4097_8192_ = NULL;
}
void Bssids_Bssid_State_Counters_RxDataDist::clear_rx_513_1024() {
  if (GetArenaNoVirtual() == NULL && rx_513_1024_ != NULL) {
    delete rx_513_1024_;
  }
  rx_513_1024_ = NULL;
}
void Bssids_Bssid_State_Counters_RxDataDist::clear_rx_524289_1048576() {
  if (GetArenaNoVirtual() == NULL && rx_524289_1048576_ != NULL) {
    delete rx_524289_1048576_;
  }
  rx_524289_1048576_ = NULL;
}
void Bssids_Bssid_State_Counters_RxDataDist::clear_rx_65_128() {
  if (GetArenaNoVirtual() == NULL && rx_65_128_ != NULL) {
    delete rx_65_128_;
  }
  rx_65_128_ = NULL;
}
void Bssids_Bssid_State_Counters_RxDataDist::clear_rx_65537_131072() {
  if (GetArenaNoVirtual() == NULL && rx_65537_131072_ != NULL) {
    delete rx_65537_131072_;
  }
  rx_65537_131072_ = NULL;
}
void Bssids_Bssid_State_Counters_RxDataDist::clear_rx_8193_16384() {
  if (GetArenaNoVirtual() == NULL && rx_8193_16384_ != NULL) {
    delete rx_8193_16384_;
  }
  rx_8193_16384_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Bssids_Bssid_State_Counters_RxDataDist::kRx064FieldNumber;
const int Bssids_Bssid_State_Counters_RxDataDist::kRx10252048FieldNumber;
const int Bssids_Bssid_State_Counters_RxDataDist::kRx129256FieldNumber;
const int Bssids_Bssid_State_Counters_RxDataDist::kRx131073262144FieldNumber;
const int Bssids_Bssid_State_Counters_RxDataDist::kRx1638532768FieldNumber;
const int Bssids_Bssid_State_Counters_RxDataDist::kRx20494096FieldNumber;
const int Bssids_Bssid_State_Counters_RxDataDist::kRx257512FieldNumber;
const int Bssids_Bssid_State_Counters_RxDataDist::kRx262145524288FieldNumber;
const int Bssids_Bssid_State_Counters_RxDataDist::kRx3276965536FieldNumber;
const int Bssids_Bssid_State_Counters_RxDataDist::kRx40978192FieldNumber;
const int Bssids_Bssid_State_Counters_RxDataDist::kRx5131024FieldNumber;
const int Bssids_Bssid_State_Counters_RxDataDist::kRx5242891048576FieldNumber;
const int Bssids_Bssid_State_Counters_RxDataDist::kRx65128FieldNumber;
const int Bssids_Bssid_State_Counters_RxDataDist::kRx65537131072FieldNumber;
const int Bssids_Bssid_State_Counters_RxDataDist::kRx819316384FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Bssids_Bssid_State_Counters_RxDataDist::Bssids_Bssid_State_Counters_RxDataDist()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids_Bssid_State_Counters_RxDataDist();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist)
}
Bssids_Bssid_State_Counters_RxDataDist::Bssids_Bssid_State_Counters_RxDataDist(const Bssids_Bssid_State_Counters_RxDataDist& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_rx_262145_524288()) {
    rx_262145_524288_ = new ::ywrapper::UintValue(*from.rx_262145_524288_);
  } else {
    rx_262145_524288_ = NULL;
  }
  if (from.has_rx_524289_1048576()) {
    rx_524289_1048576_ = new ::ywrapper::UintValue(*from.rx_524289_1048576_);
  } else {
    rx_524289_1048576_ = NULL;
  }
  if (from.has_rx_0_64()) {
    rx_0_64_ = new ::ywrapper::UintValue(*from.rx_0_64_);
  } else {
    rx_0_64_ = NULL;
  }
  if (from.has_rx_513_1024()) {
    rx_513_1024_ = new ::ywrapper::UintValue(*from.rx_513_1024_);
  } else {
    rx_513_1024_ = NULL;
  }
  if (from.has_rx_65537_131072()) {
    rx_65537_131072_ = new ::ywrapper::UintValue(*from.rx_65537_131072_);
  } else {
    rx_65537_131072_ = NULL;
  }
  if (from.has_rx_65_128()) {
    rx_65_128_ = new ::ywrapper::UintValue(*from.rx_65_128_);
  } else {
    rx_65_128_ = NULL;
  }
  if (from.has_rx_4097_8192()) {
    rx_4097_8192_ = new ::ywrapper::UintValue(*from.rx_4097_8192_);
  } else {
    rx_4097_8192_ = NULL;
  }
  if (from.has_rx_2049_4096()) {
    rx_2049_4096_ = new ::ywrapper::UintValue(*from.rx_2049_4096_);
  } else {
    rx_2049_4096_ = NULL;
  }
  if (from.has_rx_257_512()) {
    rx_257_512_ = new ::ywrapper::UintValue(*from.rx_257_512_);
  } else {
    rx_257_512_ = NULL;
  }
  if (from.has_rx_1025_2048()) {
    rx_1025_2048_ = new ::ywrapper::UintValue(*from.rx_1025_2048_);
  } else {
    rx_1025_2048_ = NULL;
  }
  if (from.has_rx_8193_16384()) {
    rx_8193_16384_ = new ::ywrapper::UintValue(*from.rx_8193_16384_);
  } else {
    rx_8193_16384_ = NULL;
  }
  if (from.has_rx_131073_262144()) {
    rx_131073_262144_ = new ::ywrapper::UintValue(*from.rx_131073_262144_);
  } else {
    rx_131073_262144_ = NULL;
  }
  if (from.has_rx_32769_65536()) {
    rx_32769_65536_ = new ::ywrapper::UintValue(*from.rx_32769_65536_);
  } else {
    rx_32769_65536_ = NULL;
  }
  if (from.has_rx_16385_32768()) {
    rx_16385_32768_ = new ::ywrapper::UintValue(*from.rx_16385_32768_);
  } else {
    rx_16385_32768_ = NULL;
  }
  if (from.has_rx_129_256()) {
    rx_129_256_ = new ::ywrapper::UintValue(*from.rx_129_256_);
  } else {
    rx_129_256_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist)
}

void Bssids_Bssid_State_Counters_RxDataDist::SharedCtor() {
  ::memset(&rx_262145_524288_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rx_129_256_) -
      reinterpret_cast<char*>(&rx_262145_524288_)) + sizeof(rx_129_256_));
  _cached_size_ = 0;
}

Bssids_Bssid_State_Counters_RxDataDist::~Bssids_Bssid_State_Counters_RxDataDist() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist)
  SharedDtor();
}

void Bssids_Bssid_State_Counters_RxDataDist::SharedDtor() {
  if (this != internal_default_instance()) delete rx_262145_524288_;
  if (this != internal_default_instance()) delete rx_524289_1048576_;
  if (this != internal_default_instance()) delete rx_0_64_;
  if (this != internal_default_instance()) delete rx_513_1024_;
  if (this != internal_default_instance()) delete rx_65537_131072_;
  if (this != internal_default_instance()) delete rx_65_128_;
  if (this != internal_default_instance()) delete rx_4097_8192_;
  if (this != internal_default_instance()) delete rx_2049_4096_;
  if (this != internal_default_instance()) delete rx_257_512_;
  if (this != internal_default_instance()) delete rx_1025_2048_;
  if (this != internal_default_instance()) delete rx_8193_16384_;
  if (this != internal_default_instance()) delete rx_131073_262144_;
  if (this != internal_default_instance()) delete rx_32769_65536_;
  if (this != internal_default_instance()) delete rx_16385_32768_;
  if (this != internal_default_instance()) delete rx_129_256_;
}

void Bssids_Bssid_State_Counters_RxDataDist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bssids_Bssid_State_Counters_RxDataDist::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Bssids_Bssid_State_Counters_RxDataDist& Bssids_Bssid_State_Counters_RxDataDist::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids_Bssid_State_Counters_RxDataDist();
  return *internal_default_instance();
}

Bssids_Bssid_State_Counters_RxDataDist* Bssids_Bssid_State_Counters_RxDataDist::New(::google::protobuf::Arena* arena) const {
  Bssids_Bssid_State_Counters_RxDataDist* n = new Bssids_Bssid_State_Counters_RxDataDist;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Bssids_Bssid_State_Counters_RxDataDist::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && rx_262145_524288_ != NULL) {
    delete rx_262145_524288_;
  }
  rx_262145_524288_ = NULL;
  if (GetArenaNoVirtual() == NULL && rx_524289_1048576_ != NULL) {
    delete rx_524289_1048576_;
  }
  rx_524289_1048576_ = NULL;
  if (GetArenaNoVirtual() == NULL && rx_0_64_ != NULL) {
    delete rx_0_64_;
  }
  rx_0_64_ = NULL;
  if (GetArenaNoVirtual() == NULL && rx_513_1024_ != NULL) {
    delete rx_513_1024_;
  }
  rx_513_1024_ = NULL;
  if (GetArenaNoVirtual() == NULL && rx_65537_131072_ != NULL) {
    delete rx_65537_131072_;
  }
  rx_65537_131072_ = NULL;
  if (GetArenaNoVirtual() == NULL && rx_65_128_ != NULL) {
    delete rx_65_128_;
  }
  rx_65_128_ = NULL;
  if (GetArenaNoVirtual() == NULL && rx_4097_8192_ != NULL) {
    delete rx_4097_8192_;
  }
  rx_4097_8192_ = NULL;
  if (GetArenaNoVirtual() == NULL && rx_2049_4096_ != NULL) {
    delete rx_2049_4096_;
  }
  rx_2049_4096_ = NULL;
  if (GetArenaNoVirtual() == NULL && rx_257_512_ != NULL) {
    delete rx_257_512_;
  }
  rx_257_512_ = NULL;
  if (GetArenaNoVirtual() == NULL && rx_1025_2048_ != NULL) {
    delete rx_1025_2048_;
  }
  rx_1025_2048_ = NULL;
  if (GetArenaNoVirtual() == NULL && rx_8193_16384_ != NULL) {
    delete rx_8193_16384_;
  }
  rx_8193_16384_ = NULL;
  if (GetArenaNoVirtual() == NULL && rx_131073_262144_ != NULL) {
    delete rx_131073_262144_;
  }
  rx_131073_262144_ = NULL;
  if (GetArenaNoVirtual() == NULL && rx_32769_65536_ != NULL) {
    delete rx_32769_65536_;
  }
  rx_32769_65536_ = NULL;
  if (GetArenaNoVirtual() == NULL && rx_16385_32768_ != NULL) {
    delete rx_16385_32768_;
  }
  rx_16385_32768_ = NULL;
  if (GetArenaNoVirtual() == NULL && rx_129_256_ != NULL) {
    delete rx_129_256_;
  }
  rx_129_256_ = NULL;
  _internal_metadata_.Clear();
}

bool Bssids_Bssid_State_Counters_RxDataDist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3850207650u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue rx_262145_524288 = 78039798 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-262145-524288"];
      case 78039798: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 624318386 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rx_262145_524288()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue rx_524289_1048576 = 103930652 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-524289-1048576"];
      case 103930652: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 831445218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rx_524289_1048576()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue rx_0_64 = 163240557 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-0-64"];
      case 163240557: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 1305924458 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rx_0_64()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue rx_513_1024 = 171543073 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-513-1024"];
      case 171543073: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 1372344586 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rx_513_1024()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue rx_65537_131072 = 177561669 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-65537-131072"];
      case 177561669: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 1420493354 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rx_65537_131072()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue rx_65_128 = 207221893 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-65-128"];
      case 207221893: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 1657775146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rx_65_128()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue rx_4097_8192 = 212656659 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-4097-8192"];
      case 212656659: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 1701253274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rx_4097_8192()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue rx_2049_4096 = 263507443 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-2049-4096"];
      case 263507443: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 2108059546 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rx_2049_4096()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue rx_257_512 = 274835051 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-257-512"];
      case 274835051: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 2198680410 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rx_257_512()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue rx_1025_2048 = 319752669 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-1025-2048"];
      case 319752669: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 2558021354 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rx_1025_2048()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue rx_8193_16384 = 337500764 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-8193-16384"];
      case 337500764: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 2700006114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rx_8193_16384()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue rx_131073_262144 = 376738071 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-131073-262144"];
      case 376738071: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 3013904570 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rx_131073_262144()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue rx_32769_65536 = 399680219 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-32769-65536"];
      case 399680219: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 3197441754 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rx_32769_65536()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue rx_16385_32768 = 461886212 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-16385-32768"];
      case 461886212: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 3695089698 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rx_16385_32768()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue rx_129_256 = 481275956 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-129-256"];
      case 481275956: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 3850207650 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rx_129_256()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist)
  return false;
#undef DO_
}

void Bssids_Bssid_State_Counters_RxDataDist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue rx_262145_524288 = 78039798 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-262145-524288"];
  if (this->has_rx_262145_524288()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      78039798, *this->rx_262145_524288_, output);
  }

  // .ywrapper.UintValue rx_524289_1048576 = 103930652 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-524289-1048576"];
  if (this->has_rx_524289_1048576()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103930652, *this->rx_524289_1048576_, output);
  }

  // .ywrapper.UintValue rx_0_64 = 163240557 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-0-64"];
  if (this->has_rx_0_64()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      163240557, *this->rx_0_64_, output);
  }

  // .ywrapper.UintValue rx_513_1024 = 171543073 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-513-1024"];
  if (this->has_rx_513_1024()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      171543073, *this->rx_513_1024_, output);
  }

  // .ywrapper.UintValue rx_65537_131072 = 177561669 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-65537-131072"];
  if (this->has_rx_65537_131072()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      177561669, *this->rx_65537_131072_, output);
  }

  // .ywrapper.UintValue rx_65_128 = 207221893 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-65-128"];
  if (this->has_rx_65_128()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      207221893, *this->rx_65_128_, output);
  }

  // .ywrapper.UintValue rx_4097_8192 = 212656659 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-4097-8192"];
  if (this->has_rx_4097_8192()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      212656659, *this->rx_4097_8192_, output);
  }

  // .ywrapper.UintValue rx_2049_4096 = 263507443 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-2049-4096"];
  if (this->has_rx_2049_4096()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      263507443, *this->rx_2049_4096_, output);
  }

  // .ywrapper.UintValue rx_257_512 = 274835051 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-257-512"];
  if (this->has_rx_257_512()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      274835051, *this->rx_257_512_, output);
  }

  // .ywrapper.UintValue rx_1025_2048 = 319752669 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-1025-2048"];
  if (this->has_rx_1025_2048()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      319752669, *this->rx_1025_2048_, output);
  }

  // .ywrapper.UintValue rx_8193_16384 = 337500764 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-8193-16384"];
  if (this->has_rx_8193_16384()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      337500764, *this->rx_8193_16384_, output);
  }

  // .ywrapper.UintValue rx_131073_262144 = 376738071 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-131073-262144"];
  if (this->has_rx_131073_262144()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      376738071, *this->rx_131073_262144_, output);
  }

  // .ywrapper.UintValue rx_32769_65536 = 399680219 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-32769-65536"];
  if (this->has_rx_32769_65536()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      399680219, *this->rx_32769_65536_, output);
  }

  // .ywrapper.UintValue rx_16385_32768 = 461886212 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-16385-32768"];
  if (this->has_rx_16385_32768()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      461886212, *this->rx_16385_32768_, output);
  }

  // .ywrapper.UintValue rx_129_256 = 481275956 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-129-256"];
  if (this->has_rx_129_256()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      481275956, *this->rx_129_256_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist)
}

::google::protobuf::uint8* Bssids_Bssid_State_Counters_RxDataDist::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue rx_262145_524288 = 78039798 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-262145-524288"];
  if (this->has_rx_262145_524288()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        78039798, *this->rx_262145_524288_, deterministic, target);
  }

  // .ywrapper.UintValue rx_524289_1048576 = 103930652 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-524289-1048576"];
  if (this->has_rx_524289_1048576()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        103930652, *this->rx_524289_1048576_, deterministic, target);
  }

  // .ywrapper.UintValue rx_0_64 = 163240557 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-0-64"];
  if (this->has_rx_0_64()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        163240557, *this->rx_0_64_, deterministic, target);
  }

  // .ywrapper.UintValue rx_513_1024 = 171543073 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-513-1024"];
  if (this->has_rx_513_1024()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        171543073, *this->rx_513_1024_, deterministic, target);
  }

  // .ywrapper.UintValue rx_65537_131072 = 177561669 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-65537-131072"];
  if (this->has_rx_65537_131072()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        177561669, *this->rx_65537_131072_, deterministic, target);
  }

  // .ywrapper.UintValue rx_65_128 = 207221893 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-65-128"];
  if (this->has_rx_65_128()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        207221893, *this->rx_65_128_, deterministic, target);
  }

  // .ywrapper.UintValue rx_4097_8192 = 212656659 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-4097-8192"];
  if (this->has_rx_4097_8192()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        212656659, *this->rx_4097_8192_, deterministic, target);
  }

  // .ywrapper.UintValue rx_2049_4096 = 263507443 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-2049-4096"];
  if (this->has_rx_2049_4096()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        263507443, *this->rx_2049_4096_, deterministic, target);
  }

  // .ywrapper.UintValue rx_257_512 = 274835051 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-257-512"];
  if (this->has_rx_257_512()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        274835051, *this->rx_257_512_, deterministic, target);
  }

  // .ywrapper.UintValue rx_1025_2048 = 319752669 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-1025-2048"];
  if (this->has_rx_1025_2048()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        319752669, *this->rx_1025_2048_, deterministic, target);
  }

  // .ywrapper.UintValue rx_8193_16384 = 337500764 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-8193-16384"];
  if (this->has_rx_8193_16384()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        337500764, *this->rx_8193_16384_, deterministic, target);
  }

  // .ywrapper.UintValue rx_131073_262144 = 376738071 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-131073-262144"];
  if (this->has_rx_131073_262144()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        376738071, *this->rx_131073_262144_, deterministic, target);
  }

  // .ywrapper.UintValue rx_32769_65536 = 399680219 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-32769-65536"];
  if (this->has_rx_32769_65536()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        399680219, *this->rx_32769_65536_, deterministic, target);
  }

  // .ywrapper.UintValue rx_16385_32768 = 461886212 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-16385-32768"];
  if (this->has_rx_16385_32768()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        461886212, *this->rx_16385_32768_, deterministic, target);
  }

  // .ywrapper.UintValue rx_129_256 = 481275956 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-129-256"];
  if (this->has_rx_129_256()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        481275956, *this->rx_129_256_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist)
  return target;
}

size_t Bssids_Bssid_State_Counters_RxDataDist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue rx_262145_524288 = 78039798 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-262145-524288"];
  if (this->has_rx_262145_524288()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rx_262145_524288_);
  }

  // .ywrapper.UintValue rx_524289_1048576 = 103930652 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-524289-1048576"];
  if (this->has_rx_524289_1048576()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rx_524289_1048576_);
  }

  // .ywrapper.UintValue rx_0_64 = 163240557 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-0-64"];
  if (this->has_rx_0_64()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rx_0_64_);
  }

  // .ywrapper.UintValue rx_513_1024 = 171543073 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-513-1024"];
  if (this->has_rx_513_1024()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rx_513_1024_);
  }

  // .ywrapper.UintValue rx_65537_131072 = 177561669 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-65537-131072"];
  if (this->has_rx_65537_131072()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rx_65537_131072_);
  }

  // .ywrapper.UintValue rx_65_128 = 207221893 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-65-128"];
  if (this->has_rx_65_128()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rx_65_128_);
  }

  // .ywrapper.UintValue rx_4097_8192 = 212656659 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-4097-8192"];
  if (this->has_rx_4097_8192()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rx_4097_8192_);
  }

  // .ywrapper.UintValue rx_2049_4096 = 263507443 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-2049-4096"];
  if (this->has_rx_2049_4096()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rx_2049_4096_);
  }

  // .ywrapper.UintValue rx_257_512 = 274835051 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-257-512"];
  if (this->has_rx_257_512()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rx_257_512_);
  }

  // .ywrapper.UintValue rx_1025_2048 = 319752669 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-1025-2048"];
  if (this->has_rx_1025_2048()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rx_1025_2048_);
  }

  // .ywrapper.UintValue rx_8193_16384 = 337500764 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-8193-16384"];
  if (this->has_rx_8193_16384()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rx_8193_16384_);
  }

  // .ywrapper.UintValue rx_131073_262144 = 376738071 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-131073-262144"];
  if (this->has_rx_131073_262144()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rx_131073_262144_);
  }

  // .ywrapper.UintValue rx_32769_65536 = 399680219 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-32769-65536"];
  if (this->has_rx_32769_65536()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rx_32769_65536_);
  }

  // .ywrapper.UintValue rx_16385_32768 = 461886212 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-16385-32768"];
  if (this->has_rx_16385_32768()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rx_16385_32768_);
  }

  // .ywrapper.UintValue rx_129_256 = 481275956 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-129-256"];
  if (this->has_rx_129_256()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rx_129_256_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bssids_Bssid_State_Counters_RxDataDist::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist)
  GOOGLE_DCHECK_NE(&from, this);
  const Bssids_Bssid_State_Counters_RxDataDist* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Bssids_Bssid_State_Counters_RxDataDist>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist)
    MergeFrom(*source);
  }
}

void Bssids_Bssid_State_Counters_RxDataDist::MergeFrom(const Bssids_Bssid_State_Counters_RxDataDist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rx_262145_524288()) {
    mutable_rx_262145_524288()->::ywrapper::UintValue::MergeFrom(from.rx_262145_524288());
  }
  if (from.has_rx_524289_1048576()) {
    mutable_rx_524289_1048576()->::ywrapper::UintValue::MergeFrom(from.rx_524289_1048576());
  }
  if (from.has_rx_0_64()) {
    mutable_rx_0_64()->::ywrapper::UintValue::MergeFrom(from.rx_0_64());
  }
  if (from.has_rx_513_1024()) {
    mutable_rx_513_1024()->::ywrapper::UintValue::MergeFrom(from.rx_513_1024());
  }
  if (from.has_rx_65537_131072()) {
    mutable_rx_65537_131072()->::ywrapper::UintValue::MergeFrom(from.rx_65537_131072());
  }
  if (from.has_rx_65_128()) {
    mutable_rx_65_128()->::ywrapper::UintValue::MergeFrom(from.rx_65_128());
  }
  if (from.has_rx_4097_8192()) {
    mutable_rx_4097_8192()->::ywrapper::UintValue::MergeFrom(from.rx_4097_8192());
  }
  if (from.has_rx_2049_4096()) {
    mutable_rx_2049_4096()->::ywrapper::UintValue::MergeFrom(from.rx_2049_4096());
  }
  if (from.has_rx_257_512()) {
    mutable_rx_257_512()->::ywrapper::UintValue::MergeFrom(from.rx_257_512());
  }
  if (from.has_rx_1025_2048()) {
    mutable_rx_1025_2048()->::ywrapper::UintValue::MergeFrom(from.rx_1025_2048());
  }
  if (from.has_rx_8193_16384()) {
    mutable_rx_8193_16384()->::ywrapper::UintValue::MergeFrom(from.rx_8193_16384());
  }
  if (from.has_rx_131073_262144()) {
    mutable_rx_131073_262144()->::ywrapper::UintValue::MergeFrom(from.rx_131073_262144());
  }
  if (from.has_rx_32769_65536()) {
    mutable_rx_32769_65536()->::ywrapper::UintValue::MergeFrom(from.rx_32769_65536());
  }
  if (from.has_rx_16385_32768()) {
    mutable_rx_16385_32768()->::ywrapper::UintValue::MergeFrom(from.rx_16385_32768());
  }
  if (from.has_rx_129_256()) {
    mutable_rx_129_256()->::ywrapper::UintValue::MergeFrom(from.rx_129_256());
  }
}

void Bssids_Bssid_State_Counters_RxDataDist::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bssids_Bssid_State_Counters_RxDataDist::CopyFrom(const Bssids_Bssid_State_Counters_RxDataDist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bssids_Bssid_State_Counters_RxDataDist::IsInitialized() const {
  return true;
}

void Bssids_Bssid_State_Counters_RxDataDist::Swap(Bssids_Bssid_State_Counters_RxDataDist* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Bssids_Bssid_State_Counters_RxDataDist::InternalSwap(Bssids_Bssid_State_Counters_RxDataDist* other) {
  using std::swap;
  swap(rx_262145_524288_, other->rx_262145_524288_);
  swap(rx_524289_1048576_, other->rx_524289_1048576_);
  swap(rx_0_64_, other->rx_0_64_);
  swap(rx_513_1024_, other->rx_513_1024_);
  swap(rx_65537_131072_, other->rx_65537_131072_);
  swap(rx_65_128_, other->rx_65_128_);
  swap(rx_4097_8192_, other->rx_4097_8192_);
  swap(rx_2049_4096_, other->rx_2049_4096_);
  swap(rx_257_512_, other->rx_257_512_);
  swap(rx_1025_2048_, other->rx_1025_2048_);
  swap(rx_8193_16384_, other->rx_8193_16384_);
  swap(rx_131073_262144_, other->rx_131073_262144_);
  swap(rx_32769_65536_, other->rx_32769_65536_);
  swap(rx_16385_32768_, other->rx_16385_32768_);
  swap(rx_129_256_, other->rx_129_256_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Bssids_Bssid_State_Counters_RxDataDist::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Bssids_Bssid_State_Counters_RxDataWmm::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_RxDataWmm_default_instance_._instance.get_mutable()->be_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_RxDataWmm_default_instance_._instance.get_mutable()->bk_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_RxDataWmm_default_instance_._instance.get_mutable()->vi_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_RxDataWmm_default_instance_._instance.get_mutable()->vo_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Bssids_Bssid_State_Counters_RxDataWmm::clear_be() {
  if (GetArenaNoVirtual() == NULL && be_ != NULL) {
    delete be_;
  }
  be_ = NULL;
}
void Bssids_Bssid_State_Counters_RxDataWmm::clear_bk() {
  if (GetArenaNoVirtual() == NULL && bk_ != NULL) {
    delete bk_;
  }
  bk_ = NULL;
}
void Bssids_Bssid_State_Counters_RxDataWmm::clear_vi() {
  if (GetArenaNoVirtual() == NULL && vi_ != NULL) {
    delete vi_;
  }
  vi_ = NULL;
}
void Bssids_Bssid_State_Counters_RxDataWmm::clear_vo() {
  if (GetArenaNoVirtual() == NULL && vo_ != NULL) {
    delete vo_;
  }
  vo_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Bssids_Bssid_State_Counters_RxDataWmm::kBeFieldNumber;
const int Bssids_Bssid_State_Counters_RxDataWmm::kBkFieldNumber;
const int Bssids_Bssid_State_Counters_RxDataWmm::kViFieldNumber;
const int Bssids_Bssid_State_Counters_RxDataWmm::kVoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Bssids_Bssid_State_Counters_RxDataWmm::Bssids_Bssid_State_Counters_RxDataWmm()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids_Bssid_State_Counters_RxDataWmm();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm)
}
Bssids_Bssid_State_Counters_RxDataWmm::Bssids_Bssid_State_Counters_RxDataWmm(const Bssids_Bssid_State_Counters_RxDataWmm& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_bk()) {
    bk_ = new ::ywrapper::UintValue(*from.bk_);
  } else {
    bk_ = NULL;
  }
  if (from.has_be()) {
    be_ = new ::ywrapper::UintValue(*from.be_);
  } else {
    be_ = NULL;
  }
  if (from.has_vi()) {
    vi_ = new ::ywrapper::UintValue(*from.vi_);
  } else {
    vi_ = NULL;
  }
  if (from.has_vo()) {
    vo_ = new ::ywrapper::UintValue(*from.vo_);
  } else {
    vo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm)
}

void Bssids_Bssid_State_Counters_RxDataWmm::SharedCtor() {
  ::memset(&bk_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vo_) -
      reinterpret_cast<char*>(&bk_)) + sizeof(vo_));
  _cached_size_ = 0;
}

Bssids_Bssid_State_Counters_RxDataWmm::~Bssids_Bssid_State_Counters_RxDataWmm() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm)
  SharedDtor();
}

void Bssids_Bssid_State_Counters_RxDataWmm::SharedDtor() {
  if (this != internal_default_instance()) delete bk_;
  if (this != internal_default_instance()) delete be_;
  if (this != internal_default_instance()) delete vi_;
  if (this != internal_default_instance()) delete vo_;
}

void Bssids_Bssid_State_Counters_RxDataWmm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bssids_Bssid_State_Counters_RxDataWmm::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Bssids_Bssid_State_Counters_RxDataWmm& Bssids_Bssid_State_Counters_RxDataWmm::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids_Bssid_State_Counters_RxDataWmm();
  return *internal_default_instance();
}

Bssids_Bssid_State_Counters_RxDataWmm* Bssids_Bssid_State_Counters_RxDataWmm::New(::google::protobuf::Arena* arena) const {
  Bssids_Bssid_State_Counters_RxDataWmm* n = new Bssids_Bssid_State_Counters_RxDataWmm;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Bssids_Bssid_State_Counters_RxDataWmm::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && bk_ != NULL) {
    delete bk_;
  }
  bk_ = NULL;
  if (GetArenaNoVirtual() == NULL && be_ != NULL) {
    delete be_;
  }
  be_ = NULL;
  if (GetArenaNoVirtual() == NULL && vi_ != NULL) {
    delete vi_;
  }
  vi_ = NULL;
  if (GetArenaNoVirtual() == NULL && vo_ != NULL) {
    delete vo_;
  }
  vo_ = NULL;
  _internal_metadata_.Clear();
}

bool Bssids_Bssid_State_Counters_RxDataWmm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3861428138u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue bk = 147126133 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-wmm/bk"];
      case 147126133: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 1177009066 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bk()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue be = 147126139 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-wmm/be"];
      case 147126139: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 1177009114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_be()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue vi = 482678515 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-wmm/vi"];
      case 482678515: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 3861428122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue vo = 482678517 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-wmm/vo"];
      case 482678517: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 3861428138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm)
  return false;
#undef DO_
}

void Bssids_Bssid_State_Counters_RxDataWmm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue bk = 147126133 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-wmm/bk"];
  if (this->has_bk()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      147126133, *this->bk_, output);
  }

  // .ywrapper.UintValue be = 147126139 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-wmm/be"];
  if (this->has_be()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      147126139, *this->be_, output);
  }

  // .ywrapper.UintValue vi = 482678515 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-wmm/vi"];
  if (this->has_vi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      482678515, *this->vi_, output);
  }

  // .ywrapper.UintValue vo = 482678517 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-wmm/vo"];
  if (this->has_vo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      482678517, *this->vo_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm)
}

::google::protobuf::uint8* Bssids_Bssid_State_Counters_RxDataWmm::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue bk = 147126133 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-wmm/bk"];
  if (this->has_bk()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        147126133, *this->bk_, deterministic, target);
  }

  // .ywrapper.UintValue be = 147126139 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-wmm/be"];
  if (this->has_be()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        147126139, *this->be_, deterministic, target);
  }

  // .ywrapper.UintValue vi = 482678515 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-wmm/vi"];
  if (this->has_vi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        482678515, *this->vi_, deterministic, target);
  }

  // .ywrapper.UintValue vo = 482678517 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-wmm/vo"];
  if (this->has_vo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        482678517, *this->vo_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm)
  return target;
}

size_t Bssids_Bssid_State_Counters_RxDataWmm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue bk = 147126133 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-wmm/bk"];
  if (this->has_bk()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->bk_);
  }

  // .ywrapper.UintValue be = 147126139 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-wmm/be"];
  if (this->has_be()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->be_);
  }

  // .ywrapper.UintValue vi = 482678515 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-wmm/vi"];
  if (this->has_vi()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->vi_);
  }

  // .ywrapper.UintValue vo = 482678517 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-wmm/vo"];
  if (this->has_vo()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->vo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bssids_Bssid_State_Counters_RxDataWmm::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm)
  GOOGLE_DCHECK_NE(&from, this);
  const Bssids_Bssid_State_Counters_RxDataWmm* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Bssids_Bssid_State_Counters_RxDataWmm>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm)
    MergeFrom(*source);
  }
}

void Bssids_Bssid_State_Counters_RxDataWmm::MergeFrom(const Bssids_Bssid_State_Counters_RxDataWmm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bk()) {
    mutable_bk()->::ywrapper::UintValue::MergeFrom(from.bk());
  }
  if (from.has_be()) {
    mutable_be()->::ywrapper::UintValue::MergeFrom(from.be());
  }
  if (from.has_vi()) {
    mutable_vi()->::ywrapper::UintValue::MergeFrom(from.vi());
  }
  if (from.has_vo()) {
    mutable_vo()->::ywrapper::UintValue::MergeFrom(from.vo());
  }
}

void Bssids_Bssid_State_Counters_RxDataWmm::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bssids_Bssid_State_Counters_RxDataWmm::CopyFrom(const Bssids_Bssid_State_Counters_RxDataWmm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bssids_Bssid_State_Counters_RxDataWmm::IsInitialized() const {
  return true;
}

void Bssids_Bssid_State_Counters_RxDataWmm::Swap(Bssids_Bssid_State_Counters_RxDataWmm* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Bssids_Bssid_State_Counters_RxDataWmm::InternalSwap(Bssids_Bssid_State_Counters_RxDataWmm* other) {
  using std::swap;
  swap(bk_, other->bk_);
  swap(be_, other->be_);
  swap(vi_, other->vi_);
  swap(vo_, other->vo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Bssids_Bssid_State_Counters_RxDataWmm::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Bssids_Bssid_State_Counters_RxMcs::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_RxMcs_default_instance_._instance.get_mutable()->mcs0_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_RxMcs_default_instance_._instance.get_mutable()->mcs1_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_RxMcs_default_instance_._instance.get_mutable()->mcs2_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_RxMcs_default_instance_._instance.get_mutable()->mcs3_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_RxMcs_default_instance_._instance.get_mutable()->mcs4_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_RxMcs_default_instance_._instance.get_mutable()->mcs5_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_RxMcs_default_instance_._instance.get_mutable()->mcs6_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_RxMcs_default_instance_._instance.get_mutable()->mcs7_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_RxMcs_default_instance_._instance.get_mutable()->mcs8_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_RxMcs_default_instance_._instance.get_mutable()->mcs9_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Bssids_Bssid_State_Counters_RxMcs::clear_mcs0() {
  if (GetArenaNoVirtual() == NULL && mcs0_ != NULL) {
    delete mcs0_;
  }
  mcs0_ = NULL;
}
void Bssids_Bssid_State_Counters_RxMcs::clear_mcs1() {
  if (GetArenaNoVirtual() == NULL && mcs1_ != NULL) {
    delete mcs1_;
  }
  mcs1_ = NULL;
}
void Bssids_Bssid_State_Counters_RxMcs::clear_mcs2() {
  if (GetArenaNoVirtual() == NULL && mcs2_ != NULL) {
    delete mcs2_;
  }
  mcs2_ = NULL;
}
void Bssids_Bssid_State_Counters_RxMcs::clear_mcs3() {
  if (GetArenaNoVirtual() == NULL && mcs3_ != NULL) {
    delete mcs3_;
  }
  mcs3_ = NULL;
}
void Bssids_Bssid_State_Counters_RxMcs::clear_mcs4() {
  if (GetArenaNoVirtual() == NULL && mcs4_ != NULL) {
    delete mcs4_;
  }
  mcs4_ = NULL;
}
void Bssids_Bssid_State_Counters_RxMcs::clear_mcs5() {
  if (GetArenaNoVirtual() == NULL && mcs5_ != NULL) {
    delete mcs5_;
  }
  mcs5_ = NULL;
}
void Bssids_Bssid_State_Counters_RxMcs::clear_mcs6() {
  if (GetArenaNoVirtual() == NULL && mcs6_ != NULL) {
    delete mcs6_;
  }
  mcs6_ = NULL;
}
void Bssids_Bssid_State_Counters_RxMcs::clear_mcs7() {
  if (GetArenaNoVirtual() == NULL && mcs7_ != NULL) {
    delete mcs7_;
  }
  mcs7_ = NULL;
}
void Bssids_Bssid_State_Counters_RxMcs::clear_mcs8() {
  if (GetArenaNoVirtual() == NULL && mcs8_ != NULL) {
    delete mcs8_;
  }
  mcs8_ = NULL;
}
void Bssids_Bssid_State_Counters_RxMcs::clear_mcs9() {
  if (GetArenaNoVirtual() == NULL && mcs9_ != NULL) {
    delete mcs9_;
  }
  mcs9_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Bssids_Bssid_State_Counters_RxMcs::kMcs0FieldNumber;
const int Bssids_Bssid_State_Counters_RxMcs::kMcs1FieldNumber;
const int Bssids_Bssid_State_Counters_RxMcs::kMcs2FieldNumber;
const int Bssids_Bssid_State_Counters_RxMcs::kMcs3FieldNumber;
const int Bssids_Bssid_State_Counters_RxMcs::kMcs4FieldNumber;
const int Bssids_Bssid_State_Counters_RxMcs::kMcs5FieldNumber;
const int Bssids_Bssid_State_Counters_RxMcs::kMcs6FieldNumber;
const int Bssids_Bssid_State_Counters_RxMcs::kMcs7FieldNumber;
const int Bssids_Bssid_State_Counters_RxMcs::kMcs8FieldNumber;
const int Bssids_Bssid_State_Counters_RxMcs::kMcs9FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Bssids_Bssid_State_Counters_RxMcs::Bssids_Bssid_State_Counters_RxMcs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids_Bssid_State_Counters_RxMcs();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs)
}
Bssids_Bssid_State_Counters_RxMcs::Bssids_Bssid_State_Counters_RxMcs(const Bssids_Bssid_State_Counters_RxMcs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mcs0()) {
    mcs0_ = new ::ywrapper::UintValue(*from.mcs0_);
  } else {
    mcs0_ = NULL;
  }
  if (from.has_mcs1()) {
    mcs1_ = new ::ywrapper::UintValue(*from.mcs1_);
  } else {
    mcs1_ = NULL;
  }
  if (from.has_mcs2()) {
    mcs2_ = new ::ywrapper::UintValue(*from.mcs2_);
  } else {
    mcs2_ = NULL;
  }
  if (from.has_mcs3()) {
    mcs3_ = new ::ywrapper::UintValue(*from.mcs3_);
  } else {
    mcs3_ = NULL;
  }
  if (from.has_mcs4()) {
    mcs4_ = new ::ywrapper::UintValue(*from.mcs4_);
  } else {
    mcs4_ = NULL;
  }
  if (from.has_mcs5()) {
    mcs5_ = new ::ywrapper::UintValue(*from.mcs5_);
  } else {
    mcs5_ = NULL;
  }
  if (from.has_mcs6()) {
    mcs6_ = new ::ywrapper::UintValue(*from.mcs6_);
  } else {
    mcs6_ = NULL;
  }
  if (from.has_mcs7()) {
    mcs7_ = new ::ywrapper::UintValue(*from.mcs7_);
  } else {
    mcs7_ = NULL;
  }
  if (from.has_mcs8()) {
    mcs8_ = new ::ywrapper::UintValue(*from.mcs8_);
  } else {
    mcs8_ = NULL;
  }
  if (from.has_mcs9()) {
    mcs9_ = new ::ywrapper::UintValue(*from.mcs9_);
  } else {
    mcs9_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs)
}

void Bssids_Bssid_State_Counters_RxMcs::SharedCtor() {
  ::memset(&mcs0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mcs9_) -
      reinterpret_cast<char*>(&mcs0_)) + sizeof(mcs9_));
  _cached_size_ = 0;
}

Bssids_Bssid_State_Counters_RxMcs::~Bssids_Bssid_State_Counters_RxMcs() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs)
  SharedDtor();
}

void Bssids_Bssid_State_Counters_RxMcs::SharedDtor() {
  if (this != internal_default_instance()) delete mcs0_;
  if (this != internal_default_instance()) delete mcs1_;
  if (this != internal_default_instance()) delete mcs2_;
  if (this != internal_default_instance()) delete mcs3_;
  if (this != internal_default_instance()) delete mcs4_;
  if (this != internal_default_instance()) delete mcs5_;
  if (this != internal_default_instance()) delete mcs6_;
  if (this != internal_default_instance()) delete mcs7_;
  if (this != internal_default_instance()) delete mcs8_;
  if (this != internal_default_instance()) delete mcs9_;
}

void Bssids_Bssid_State_Counters_RxMcs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bssids_Bssid_State_Counters_RxMcs::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Bssids_Bssid_State_Counters_RxMcs& Bssids_Bssid_State_Counters_RxMcs::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids_Bssid_State_Counters_RxMcs();
  return *internal_default_instance();
}

Bssids_Bssid_State_Counters_RxMcs* Bssids_Bssid_State_Counters_RxMcs::New(::google::protobuf::Arena* arena) const {
  Bssids_Bssid_State_Counters_RxMcs* n = new Bssids_Bssid_State_Counters_RxMcs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Bssids_Bssid_State_Counters_RxMcs::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && mcs0_ != NULL) {
    delete mcs0_;
  }
  mcs0_ = NULL;
  if (GetArenaNoVirtual() == NULL && mcs1_ != NULL) {
    delete mcs1_;
  }
  mcs1_ = NULL;
  if (GetArenaNoVirtual() == NULL && mcs2_ != NULL) {
    delete mcs2_;
  }
  mcs2_ = NULL;
  if (GetArenaNoVirtual() == NULL && mcs3_ != NULL) {
    delete mcs3_;
  }
  mcs3_ = NULL;
  if (GetArenaNoVirtual() == NULL && mcs4_ != NULL) {
    delete mcs4_;
  }
  mcs4_ = NULL;
  if (GetArenaNoVirtual() == NULL && mcs5_ != NULL) {
    delete mcs5_;
  }
  mcs5_ = NULL;
  if (GetArenaNoVirtual() == NULL && mcs6_ != NULL) {
    delete mcs6_;
  }
  mcs6_ = NULL;
  if (GetArenaNoVirtual() == NULL && mcs7_ != NULL) {
    delete mcs7_;
  }
  mcs7_ = NULL;
  if (GetArenaNoVirtual() == NULL && mcs8_ != NULL) {
    delete mcs8_;
  }
  mcs8_ = NULL;
  if (GetArenaNoVirtual() == NULL && mcs9_ != NULL) {
    delete mcs9_;
  }
  mcs9_ = NULL;
  _internal_metadata_.Clear();
}

bool Bssids_Bssid_State_Counters_RxMcs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2886539850u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue mcs0 = 360817472 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs0"];
      case 360817472: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 2886539778 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mcs0()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue mcs1 = 360817473 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs1"];
      case 360817473: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 2886539786 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mcs1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue mcs2 = 360817474 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs2"];
      case 360817474: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 2886539794 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mcs2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue mcs3 = 360817475 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs3"];
      case 360817475: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 2886539802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mcs3()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue mcs4 = 360817476 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs4"];
      case 360817476: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 2886539810 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mcs4()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue mcs5 = 360817477 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs5"];
      case 360817477: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 2886539818 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mcs5()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue mcs6 = 360817478 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs6"];
      case 360817478: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 2886539826 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mcs6()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue mcs7 = 360817479 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs7"];
      case 360817479: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 2886539834 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mcs7()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue mcs8 = 360817480 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs8"];
      case 360817480: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 2886539842 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mcs8()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue mcs9 = 360817481 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs9"];
      case 360817481: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 2886539850 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mcs9()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs)
  return false;
#undef DO_
}

void Bssids_Bssid_State_Counters_RxMcs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue mcs0 = 360817472 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs0"];
  if (this->has_mcs0()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      360817472, *this->mcs0_, output);
  }

  // .ywrapper.UintValue mcs1 = 360817473 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs1"];
  if (this->has_mcs1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      360817473, *this->mcs1_, output);
  }

  // .ywrapper.UintValue mcs2 = 360817474 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs2"];
  if (this->has_mcs2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      360817474, *this->mcs2_, output);
  }

  // .ywrapper.UintValue mcs3 = 360817475 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs3"];
  if (this->has_mcs3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      360817475, *this->mcs3_, output);
  }

  // .ywrapper.UintValue mcs4 = 360817476 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs4"];
  if (this->has_mcs4()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      360817476, *this->mcs4_, output);
  }

  // .ywrapper.UintValue mcs5 = 360817477 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs5"];
  if (this->has_mcs5()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      360817477, *this->mcs5_, output);
  }

  // .ywrapper.UintValue mcs6 = 360817478 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs6"];
  if (this->has_mcs6()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      360817478, *this->mcs6_, output);
  }

  // .ywrapper.UintValue mcs7 = 360817479 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs7"];
  if (this->has_mcs7()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      360817479, *this->mcs7_, output);
  }

  // .ywrapper.UintValue mcs8 = 360817480 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs8"];
  if (this->has_mcs8()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      360817480, *this->mcs8_, output);
  }

  // .ywrapper.UintValue mcs9 = 360817481 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs9"];
  if (this->has_mcs9()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      360817481, *this->mcs9_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs)
}

::google::protobuf::uint8* Bssids_Bssid_State_Counters_RxMcs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue mcs0 = 360817472 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs0"];
  if (this->has_mcs0()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        360817472, *this->mcs0_, deterministic, target);
  }

  // .ywrapper.UintValue mcs1 = 360817473 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs1"];
  if (this->has_mcs1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        360817473, *this->mcs1_, deterministic, target);
  }

  // .ywrapper.UintValue mcs2 = 360817474 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs2"];
  if (this->has_mcs2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        360817474, *this->mcs2_, deterministic, target);
  }

  // .ywrapper.UintValue mcs3 = 360817475 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs3"];
  if (this->has_mcs3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        360817475, *this->mcs3_, deterministic, target);
  }

  // .ywrapper.UintValue mcs4 = 360817476 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs4"];
  if (this->has_mcs4()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        360817476, *this->mcs4_, deterministic, target);
  }

  // .ywrapper.UintValue mcs5 = 360817477 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs5"];
  if (this->has_mcs5()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        360817477, *this->mcs5_, deterministic, target);
  }

  // .ywrapper.UintValue mcs6 = 360817478 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs6"];
  if (this->has_mcs6()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        360817478, *this->mcs6_, deterministic, target);
  }

  // .ywrapper.UintValue mcs7 = 360817479 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs7"];
  if (this->has_mcs7()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        360817479, *this->mcs7_, deterministic, target);
  }

  // .ywrapper.UintValue mcs8 = 360817480 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs8"];
  if (this->has_mcs8()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        360817480, *this->mcs8_, deterministic, target);
  }

  // .ywrapper.UintValue mcs9 = 360817481 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs9"];
  if (this->has_mcs9()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        360817481, *this->mcs9_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs)
  return target;
}

size_t Bssids_Bssid_State_Counters_RxMcs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue mcs0 = 360817472 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs0"];
  if (this->has_mcs0()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mcs0_);
  }

  // .ywrapper.UintValue mcs1 = 360817473 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs1"];
  if (this->has_mcs1()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mcs1_);
  }

  // .ywrapper.UintValue mcs2 = 360817474 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs2"];
  if (this->has_mcs2()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mcs2_);
  }

  // .ywrapper.UintValue mcs3 = 360817475 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs3"];
  if (this->has_mcs3()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mcs3_);
  }

  // .ywrapper.UintValue mcs4 = 360817476 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs4"];
  if (this->has_mcs4()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mcs4_);
  }

  // .ywrapper.UintValue mcs5 = 360817477 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs5"];
  if (this->has_mcs5()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mcs5_);
  }

  // .ywrapper.UintValue mcs6 = 360817478 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs6"];
  if (this->has_mcs6()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mcs6_);
  }

  // .ywrapper.UintValue mcs7 = 360817479 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs7"];
  if (this->has_mcs7()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mcs7_);
  }

  // .ywrapper.UintValue mcs8 = 360817480 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs8"];
  if (this->has_mcs8()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mcs8_);
  }

  // .ywrapper.UintValue mcs9 = 360817481 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs9"];
  if (this->has_mcs9()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mcs9_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bssids_Bssid_State_Counters_RxMcs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs)
  GOOGLE_DCHECK_NE(&from, this);
  const Bssids_Bssid_State_Counters_RxMcs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Bssids_Bssid_State_Counters_RxMcs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs)
    MergeFrom(*source);
  }
}

void Bssids_Bssid_State_Counters_RxMcs::MergeFrom(const Bssids_Bssid_State_Counters_RxMcs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mcs0()) {
    mutable_mcs0()->::ywrapper::UintValue::MergeFrom(from.mcs0());
  }
  if (from.has_mcs1()) {
    mutable_mcs1()->::ywrapper::UintValue::MergeFrom(from.mcs1());
  }
  if (from.has_mcs2()) {
    mutable_mcs2()->::ywrapper::UintValue::MergeFrom(from.mcs2());
  }
  if (from.has_mcs3()) {
    mutable_mcs3()->::ywrapper::UintValue::MergeFrom(from.mcs3());
  }
  if (from.has_mcs4()) {
    mutable_mcs4()->::ywrapper::UintValue::MergeFrom(from.mcs4());
  }
  if (from.has_mcs5()) {
    mutable_mcs5()->::ywrapper::UintValue::MergeFrom(from.mcs5());
  }
  if (from.has_mcs6()) {
    mutable_mcs6()->::ywrapper::UintValue::MergeFrom(from.mcs6());
  }
  if (from.has_mcs7()) {
    mutable_mcs7()->::ywrapper::UintValue::MergeFrom(from.mcs7());
  }
  if (from.has_mcs8()) {
    mutable_mcs8()->::ywrapper::UintValue::MergeFrom(from.mcs8());
  }
  if (from.has_mcs9()) {
    mutable_mcs9()->::ywrapper::UintValue::MergeFrom(from.mcs9());
  }
}

void Bssids_Bssid_State_Counters_RxMcs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bssids_Bssid_State_Counters_RxMcs::CopyFrom(const Bssids_Bssid_State_Counters_RxMcs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bssids_Bssid_State_Counters_RxMcs::IsInitialized() const {
  return true;
}

void Bssids_Bssid_State_Counters_RxMcs::Swap(Bssids_Bssid_State_Counters_RxMcs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Bssids_Bssid_State_Counters_RxMcs::InternalSwap(Bssids_Bssid_State_Counters_RxMcs* other) {
  using std::swap;
  swap(mcs0_, other->mcs0_);
  swap(mcs1_, other->mcs1_);
  swap(mcs2_, other->mcs2_);
  swap(mcs3_, other->mcs3_);
  swap(mcs4_, other->mcs4_);
  swap(mcs5_, other->mcs5_);
  swap(mcs6_, other->mcs6_);
  swap(mcs7_, other->mcs7_);
  swap(mcs8_, other->mcs8_);
  swap(mcs9_, other->mcs9_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Bssids_Bssid_State_Counters_RxMcs::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Bssids_Bssid_State_Counters_TxDataDist::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_TxDataDist_default_instance_._instance.get_mutable()->tx_0_64_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_TxDataDist_default_instance_._instance.get_mutable()->tx_1025_2048_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_TxDataDist_default_instance_._instance.get_mutable()->tx_129_256_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_TxDataDist_default_instance_._instance.get_mutable()->tx_131073_262144_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_TxDataDist_default_instance_._instance.get_mutable()->tx_16385_32768_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_TxDataDist_default_instance_._instance.get_mutable()->tx_2049_4096_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_TxDataDist_default_instance_._instance.get_mutable()->tx_257_512_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_TxDataDist_default_instance_._instance.get_mutable()->tx_262145_524288_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_TxDataDist_default_instance_._instance.get_mutable()->tx_32769_65536_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_TxDataDist_default_instance_._instance.get_mutable()->tx_4097_8192_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_TxDataDist_default_instance_._instance.get_mutable()->tx_513_1024_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_TxDataDist_default_instance_._instance.get_mutable()->tx_524289_1048576_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_TxDataDist_default_instance_._instance.get_mutable()->tx_65_128_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_TxDataDist_default_instance_._instance.get_mutable()->tx_65537_131072_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_TxDataDist_default_instance_._instance.get_mutable()->tx_8193_16384_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Bssids_Bssid_State_Counters_TxDataDist::clear_tx_0_64() {
  if (GetArenaNoVirtual() == NULL && tx_0_64_ != NULL) {
    delete tx_0_64_;
  }
  tx_0_64_ = NULL;
}
void Bssids_Bssid_State_Counters_TxDataDist::clear_tx_1025_2048() {
  if (GetArenaNoVirtual() == NULL && tx_1025_2048_ != NULL) {
    delete tx_1025_2048_;
  }
  tx_1025_2048_ = NULL;
}
void Bssids_Bssid_State_Counters_TxDataDist::clear_tx_129_256() {
  if (GetArenaNoVirtual() == NULL && tx_129_256_ != NULL) {
    delete tx_129_256_;
  }
  tx_129_256_ = NULL;
}
void Bssids_Bssid_State_Counters_TxDataDist::clear_tx_131073_262144() {
  if (GetArenaNoVirtual() == NULL && tx_131073_262144_ != NULL) {
    delete tx_131073_262144_;
  }
  tx_131073_262144_ = NULL;
}
void Bssids_Bssid_State_Counters_TxDataDist::clear_tx_16385_32768() {
  if (GetArenaNoVirtual() == NULL && tx_16385_32768_ != NULL) {
    delete tx_16385_32768_;
  }
  tx_16385_32768_ = NULL;
}
void Bssids_Bssid_State_Counters_TxDataDist::clear_tx_2049_4096() {
  if (GetArenaNoVirtual() == NULL && tx_2049_4096_ != NULL) {
    delete tx_2049_4096_;
  }
  tx_2049_4096_ = NULL;
}
void Bssids_Bssid_State_Counters_TxDataDist::clear_tx_257_512() {
  if (GetArenaNoVirtual() == NULL && tx_257_512_ != NULL) {
    delete tx_257_512_;
  }
  tx_257_512_ = NULL;
}
void Bssids_Bssid_State_Counters_TxDataDist::clear_tx_262145_524288() {
  if (GetArenaNoVirtual() == NULL && tx_262145_524288_ != NULL) {
    delete tx_262145_524288_;
  }
  tx_262145_524288_ = NULL;
}
void Bssids_Bssid_State_Counters_TxDataDist::clear_tx_32769_65536() {
  if (GetArenaNoVirtual() == NULL && tx_32769_65536_ != NULL) {
    delete tx_32769_65536_;
  }
  tx_32769_65536_ = NULL;
}
void Bssids_Bssid_State_Counters_TxDataDist::clear_tx_4097_8192() {
  if (GetArenaNoVirtual() == NULL && tx_4097_8192_ != NULL) {
    delete tx_4097_8192_;
  }
  tx_4097_8192_ = NULL;
}
void Bssids_Bssid_State_Counters_TxDataDist::clear_tx_513_1024() {
  if (GetArenaNoVirtual() == NULL && tx_513_1024_ != NULL) {
    delete tx_513_1024_;
  }
  tx_513_1024_ = NULL;
}
void Bssids_Bssid_State_Counters_TxDataDist::clear_tx_524289_1048576() {
  if (GetArenaNoVirtual() == NULL && tx_524289_1048576_ != NULL) {
    delete tx_524289_1048576_;
  }
  tx_524289_1048576_ = NULL;
}
void Bssids_Bssid_State_Counters_TxDataDist::clear_tx_65_128() {
  if (GetArenaNoVirtual() == NULL && tx_65_128_ != NULL) {
    delete tx_65_128_;
  }
  tx_65_128_ = NULL;
}
void Bssids_Bssid_State_Counters_TxDataDist::clear_tx_65537_131072() {
  if (GetArenaNoVirtual() == NULL && tx_65537_131072_ != NULL) {
    delete tx_65537_131072_;
  }
  tx_65537_131072_ = NULL;
}
void Bssids_Bssid_State_Counters_TxDataDist::clear_tx_8193_16384() {
  if (GetArenaNoVirtual() == NULL && tx_8193_16384_ != NULL) {
    delete tx_8193_16384_;
  }
  tx_8193_16384_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Bssids_Bssid_State_Counters_TxDataDist::kTx064FieldNumber;
const int Bssids_Bssid_State_Counters_TxDataDist::kTx10252048FieldNumber;
const int Bssids_Bssid_State_Counters_TxDataDist::kTx129256FieldNumber;
const int Bssids_Bssid_State_Counters_TxDataDist::kTx131073262144FieldNumber;
const int Bssids_Bssid_State_Counters_TxDataDist::kTx1638532768FieldNumber;
const int Bssids_Bssid_State_Counters_TxDataDist::kTx20494096FieldNumber;
const int Bssids_Bssid_State_Counters_TxDataDist::kTx257512FieldNumber;
const int Bssids_Bssid_State_Counters_TxDataDist::kTx262145524288FieldNumber;
const int Bssids_Bssid_State_Counters_TxDataDist::kTx3276965536FieldNumber;
const int Bssids_Bssid_State_Counters_TxDataDist::kTx40978192FieldNumber;
const int Bssids_Bssid_State_Counters_TxDataDist::kTx5131024FieldNumber;
const int Bssids_Bssid_State_Counters_TxDataDist::kTx5242891048576FieldNumber;
const int Bssids_Bssid_State_Counters_TxDataDist::kTx65128FieldNumber;
const int Bssids_Bssid_State_Counters_TxDataDist::kTx65537131072FieldNumber;
const int Bssids_Bssid_State_Counters_TxDataDist::kTx819316384FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Bssids_Bssid_State_Counters_TxDataDist::Bssids_Bssid_State_Counters_TxDataDist()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids_Bssid_State_Counters_TxDataDist();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist)
}
Bssids_Bssid_State_Counters_TxDataDist::Bssids_Bssid_State_Counters_TxDataDist(const Bssids_Bssid_State_Counters_TxDataDist& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tx_32769_65536()) {
    tx_32769_65536_ = new ::ywrapper::UintValue(*from.tx_32769_65536_);
  } else {
    tx_32769_65536_ = NULL;
  }
  if (from.has_tx_0_64()) {
    tx_0_64_ = new ::ywrapper::UintValue(*from.tx_0_64_);
  } else {
    tx_0_64_ = NULL;
  }
  if (from.has_tx_4097_8192()) {
    tx_4097_8192_ = new ::ywrapper::UintValue(*from.tx_4097_8192_);
  } else {
    tx_4097_8192_ = NULL;
  }
  if (from.has_tx_524289_1048576()) {
    tx_524289_1048576_ = new ::ywrapper::UintValue(*from.tx_524289_1048576_);
  } else {
    tx_524289_1048576_ = NULL;
  }
  if (from.has_tx_257_512()) {
    tx_257_512_ = new ::ywrapper::UintValue(*from.tx_257_512_);
  } else {
    tx_257_512_ = NULL;
  }
  if (from.has_tx_65537_131072()) {
    tx_65537_131072_ = new ::ywrapper::UintValue(*from.tx_65537_131072_);
  } else {
    tx_65537_131072_ = NULL;
  }
  if (from.has_tx_129_256()) {
    tx_129_256_ = new ::ywrapper::UintValue(*from.tx_129_256_);
  } else {
    tx_129_256_ = NULL;
  }
  if (from.has_tx_1025_2048()) {
    tx_1025_2048_ = new ::ywrapper::UintValue(*from.tx_1025_2048_);
  } else {
    tx_1025_2048_ = NULL;
  }
  if (from.has_tx_65_128()) {
    tx_65_128_ = new ::ywrapper::UintValue(*from.tx_65_128_);
  } else {
    tx_65_128_ = NULL;
  }
  if (from.has_tx_2049_4096()) {
    tx_2049_4096_ = new ::ywrapper::UintValue(*from.tx_2049_4096_);
  } else {
    tx_2049_4096_ = NULL;
  }
  if (from.has_tx_8193_16384()) {
    tx_8193_16384_ = new ::ywrapper::UintValue(*from.tx_8193_16384_);
  } else {
    tx_8193_16384_ = NULL;
  }
  if (from.has_tx_131073_262144()) {
    tx_131073_262144_ = new ::ywrapper::UintValue(*from.tx_131073_262144_);
  } else {
    tx_131073_262144_ = NULL;
  }
  if (from.has_tx_262145_524288()) {
    tx_262145_524288_ = new ::ywrapper::UintValue(*from.tx_262145_524288_);
  } else {
    tx_262145_524288_ = NULL;
  }
  if (from.has_tx_513_1024()) {
    tx_513_1024_ = new ::ywrapper::UintValue(*from.tx_513_1024_);
  } else {
    tx_513_1024_ = NULL;
  }
  if (from.has_tx_16385_32768()) {
    tx_16385_32768_ = new ::ywrapper::UintValue(*from.tx_16385_32768_);
  } else {
    tx_16385_32768_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist)
}

void Bssids_Bssid_State_Counters_TxDataDist::SharedCtor() {
  ::memset(&tx_32769_65536_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tx_16385_32768_) -
      reinterpret_cast<char*>(&tx_32769_65536_)) + sizeof(tx_16385_32768_));
  _cached_size_ = 0;
}

Bssids_Bssid_State_Counters_TxDataDist::~Bssids_Bssid_State_Counters_TxDataDist() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist)
  SharedDtor();
}

void Bssids_Bssid_State_Counters_TxDataDist::SharedDtor() {
  if (this != internal_default_instance()) delete tx_32769_65536_;
  if (this != internal_default_instance()) delete tx_0_64_;
  if (this != internal_default_instance()) delete tx_4097_8192_;
  if (this != internal_default_instance()) delete tx_524289_1048576_;
  if (this != internal_default_instance()) delete tx_257_512_;
  if (this != internal_default_instance()) delete tx_65537_131072_;
  if (this != internal_default_instance()) delete tx_129_256_;
  if (this != internal_default_instance()) delete tx_1025_2048_;
  if (this != internal_default_instance()) delete tx_65_128_;
  if (this != internal_default_instance()) delete tx_2049_4096_;
  if (this != internal_default_instance()) delete tx_8193_16384_;
  if (this != internal_default_instance()) delete tx_131073_262144_;
  if (this != internal_default_instance()) delete tx_262145_524288_;
  if (this != internal_default_instance()) delete tx_513_1024_;
  if (this != internal_default_instance()) delete tx_16385_32768_;
}

void Bssids_Bssid_State_Counters_TxDataDist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bssids_Bssid_State_Counters_TxDataDist::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Bssids_Bssid_State_Counters_TxDataDist& Bssids_Bssid_State_Counters_TxDataDist::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids_Bssid_State_Counters_TxDataDist();
  return *internal_default_instance();
}

Bssids_Bssid_State_Counters_TxDataDist* Bssids_Bssid_State_Counters_TxDataDist::New(::google::protobuf::Arena* arena) const {
  Bssids_Bssid_State_Counters_TxDataDist* n = new Bssids_Bssid_State_Counters_TxDataDist;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Bssids_Bssid_State_Counters_TxDataDist::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && tx_32769_65536_ != NULL) {
    delete tx_32769_65536_;
  }
  tx_32769_65536_ = NULL;
  if (GetArenaNoVirtual() == NULL && tx_0_64_ != NULL) {
    delete tx_0_64_;
  }
  tx_0_64_ = NULL;
  if (GetArenaNoVirtual() == NULL && tx_4097_8192_ != NULL) {
    delete tx_4097_8192_;
  }
  tx_4097_8192_ = NULL;
  if (GetArenaNoVirtual() == NULL && tx_524289_1048576_ != NULL) {
    delete tx_524289_1048576_;
  }
  tx_524289_1048576_ = NULL;
  if (GetArenaNoVirtual() == NULL && tx_257_512_ != NULL) {
    delete tx_257_512_;
  }
  tx_257_512_ = NULL;
  if (GetArenaNoVirtual() == NULL && tx_65537_131072_ != NULL) {
    delete tx_65537_131072_;
  }
  tx_65537_131072_ = NULL;
  if (GetArenaNoVirtual() == NULL && tx_129_256_ != NULL) {
    delete tx_129_256_;
  }
  tx_129_256_ = NULL;
  if (GetArenaNoVirtual() == NULL && tx_1025_2048_ != NULL) {
    delete tx_1025_2048_;
  }
  tx_1025_2048_ = NULL;
  if (GetArenaNoVirtual() == NULL && tx_65_128_ != NULL) {
    delete tx_65_128_;
  }
  tx_65_128_ = NULL;
  if (GetArenaNoVirtual() == NULL && tx_2049_4096_ != NULL) {
    delete tx_2049_4096_;
  }
  tx_2049_4096_ = NULL;
  if (GetArenaNoVirtual() == NULL && tx_8193_16384_ != NULL) {
    delete tx_8193_16384_;
  }
  tx_8193_16384_ = NULL;
  if (GetArenaNoVirtual() == NULL && tx_131073_262144_ != NULL) {
    delete tx_131073_262144_;
  }
  tx_131073_262144_ = NULL;
  if (GetArenaNoVirtual() == NULL && tx_262145_524288_ != NULL) {
    delete tx_262145_524288_;
  }
  tx_262145_524288_ = NULL;
  if (GetArenaNoVirtual() == NULL && tx_513_1024_ != NULL) {
    delete tx_513_1024_;
  }
  tx_513_1024_ = NULL;
  if (GetArenaNoVirtual() == NULL && tx_16385_32768_ != NULL) {
    delete tx_16385_32768_;
  }
  tx_16385_32768_ = NULL;
  _internal_metadata_.Clear();
}

bool Bssids_Bssid_State_Counters_TxDataDist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4153678306u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue tx_32769_65536 = 53919811 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-32769-65536"];
      case 53919811: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 431358490 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx_32769_65536()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue tx_0_64 = 88126549 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-0-64"];
      case 88126549: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 705012394 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx_0_64()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue tx_4097_8192 = 106713499 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-4097-8192"];
      case 106713499: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 853707994 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx_4097_8192()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue tx_524289_1048576 = 106783764 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-524289-1048576"];
      case 106783764: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 854270114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx_524289_1048576()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue tx_257_512 = 114841827 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-257-512"];
      case 114841827: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 918734618 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx_257_512()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue tx_65537_131072 = 123295085 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-65537-131072"];
      case 123295085: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 986360682 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx_65537_131072()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue tx_129_256 = 125235836 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-129-256"];
      case 125235836: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 1001886690 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx_129_256()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue tx_1025_2048 = 196667525 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-1025-2048"];
      case 196667525: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 1573340202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx_1025_2048()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue tx_65_128 = 211883005 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-65-128"];
      case 211883005: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 1695064042 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx_65_128()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue tx_2049_4096 = 220523787 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-2049-4096"];
      case 220523787: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 1764190298 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx_2049_4096()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue tx_8193_16384 = 304431444 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-8193-16384"];
      case 304431444: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 2435451554 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx_8193_16384()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue tx_131073_262144 = 335307663 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-131073-262144"];
      case 335307663: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 2682461306 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx_131073_262144()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue tx_262145_524288 = 386821806 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-262145-524288"];
      case 386821806: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 3094574450 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx_262145_524288()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue tx_513_1024 = 517866953 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-513-1024"];
      case 517866953: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 4142935626 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx_513_1024()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue tx_16385_32768 = 519209788 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-16385-32768"];
      case 519209788: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 4153678306 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx_16385_32768()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist)
  return false;
#undef DO_
}

void Bssids_Bssid_State_Counters_TxDataDist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue tx_32769_65536 = 53919811 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-32769-65536"];
  if (this->has_tx_32769_65536()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53919811, *this->tx_32769_65536_, output);
  }

  // .ywrapper.UintValue tx_0_64 = 88126549 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-0-64"];
  if (this->has_tx_0_64()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      88126549, *this->tx_0_64_, output);
  }

  // .ywrapper.UintValue tx_4097_8192 = 106713499 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-4097-8192"];
  if (this->has_tx_4097_8192()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      106713499, *this->tx_4097_8192_, output);
  }

  // .ywrapper.UintValue tx_524289_1048576 = 106783764 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-524289-1048576"];
  if (this->has_tx_524289_1048576()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      106783764, *this->tx_524289_1048576_, output);
  }

  // .ywrapper.UintValue tx_257_512 = 114841827 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-257-512"];
  if (this->has_tx_257_512()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      114841827, *this->tx_257_512_, output);
  }

  // .ywrapper.UintValue tx_65537_131072 = 123295085 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-65537-131072"];
  if (this->has_tx_65537_131072()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      123295085, *this->tx_65537_131072_, output);
  }

  // .ywrapper.UintValue tx_129_256 = 125235836 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-129-256"];
  if (this->has_tx_129_256()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      125235836, *this->tx_129_256_, output);
  }

  // .ywrapper.UintValue tx_1025_2048 = 196667525 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-1025-2048"];
  if (this->has_tx_1025_2048()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      196667525, *this->tx_1025_2048_, output);
  }

  // .ywrapper.UintValue tx_65_128 = 211883005 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-65-128"];
  if (this->has_tx_65_128()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      211883005, *this->tx_65_128_, output);
  }

  // .ywrapper.UintValue tx_2049_4096 = 220523787 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-2049-4096"];
  if (this->has_tx_2049_4096()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      220523787, *this->tx_2049_4096_, output);
  }

  // .ywrapper.UintValue tx_8193_16384 = 304431444 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-8193-16384"];
  if (this->has_tx_8193_16384()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      304431444, *this->tx_8193_16384_, output);
  }

  // .ywrapper.UintValue tx_131073_262144 = 335307663 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-131073-262144"];
  if (this->has_tx_131073_262144()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      335307663, *this->tx_131073_262144_, output);
  }

  // .ywrapper.UintValue tx_262145_524288 = 386821806 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-262145-524288"];
  if (this->has_tx_262145_524288()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      386821806, *this->tx_262145_524288_, output);
  }

  // .ywrapper.UintValue tx_513_1024 = 517866953 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-513-1024"];
  if (this->has_tx_513_1024()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      517866953, *this->tx_513_1024_, output);
  }

  // .ywrapper.UintValue tx_16385_32768 = 519209788 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-16385-32768"];
  if (this->has_tx_16385_32768()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      519209788, *this->tx_16385_32768_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist)
}

::google::protobuf::uint8* Bssids_Bssid_State_Counters_TxDataDist::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue tx_32769_65536 = 53919811 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-32769-65536"];
  if (this->has_tx_32769_65536()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        53919811, *this->tx_32769_65536_, deterministic, target);
  }

  // .ywrapper.UintValue tx_0_64 = 88126549 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-0-64"];
  if (this->has_tx_0_64()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        88126549, *this->tx_0_64_, deterministic, target);
  }

  // .ywrapper.UintValue tx_4097_8192 = 106713499 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-4097-8192"];
  if (this->has_tx_4097_8192()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        106713499, *this->tx_4097_8192_, deterministic, target);
  }

  // .ywrapper.UintValue tx_524289_1048576 = 106783764 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-524289-1048576"];
  if (this->has_tx_524289_1048576()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        106783764, *this->tx_524289_1048576_, deterministic, target);
  }

  // .ywrapper.UintValue tx_257_512 = 114841827 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-257-512"];
  if (this->has_tx_257_512()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        114841827, *this->tx_257_512_, deterministic, target);
  }

  // .ywrapper.UintValue tx_65537_131072 = 123295085 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-65537-131072"];
  if (this->has_tx_65537_131072()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        123295085, *this->tx_65537_131072_, deterministic, target);
  }

  // .ywrapper.UintValue tx_129_256 = 125235836 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-129-256"];
  if (this->has_tx_129_256()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        125235836, *this->tx_129_256_, deterministic, target);
  }

  // .ywrapper.UintValue tx_1025_2048 = 196667525 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-1025-2048"];
  if (this->has_tx_1025_2048()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        196667525, *this->tx_1025_2048_, deterministic, target);
  }

  // .ywrapper.UintValue tx_65_128 = 211883005 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-65-128"];
  if (this->has_tx_65_128()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        211883005, *this->tx_65_128_, deterministic, target);
  }

  // .ywrapper.UintValue tx_2049_4096 = 220523787 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-2049-4096"];
  if (this->has_tx_2049_4096()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        220523787, *this->tx_2049_4096_, deterministic, target);
  }

  // .ywrapper.UintValue tx_8193_16384 = 304431444 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-8193-16384"];
  if (this->has_tx_8193_16384()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        304431444, *this->tx_8193_16384_, deterministic, target);
  }

  // .ywrapper.UintValue tx_131073_262144 = 335307663 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-131073-262144"];
  if (this->has_tx_131073_262144()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        335307663, *this->tx_131073_262144_, deterministic, target);
  }

  // .ywrapper.UintValue tx_262145_524288 = 386821806 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-262145-524288"];
  if (this->has_tx_262145_524288()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        386821806, *this->tx_262145_524288_, deterministic, target);
  }

  // .ywrapper.UintValue tx_513_1024 = 517866953 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-513-1024"];
  if (this->has_tx_513_1024()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        517866953, *this->tx_513_1024_, deterministic, target);
  }

  // .ywrapper.UintValue tx_16385_32768 = 519209788 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-16385-32768"];
  if (this->has_tx_16385_32768()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        519209788, *this->tx_16385_32768_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist)
  return target;
}

size_t Bssids_Bssid_State_Counters_TxDataDist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue tx_32769_65536 = 53919811 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-32769-65536"];
  if (this->has_tx_32769_65536()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tx_32769_65536_);
  }

  // .ywrapper.UintValue tx_0_64 = 88126549 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-0-64"];
  if (this->has_tx_0_64()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tx_0_64_);
  }

  // .ywrapper.UintValue tx_4097_8192 = 106713499 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-4097-8192"];
  if (this->has_tx_4097_8192()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tx_4097_8192_);
  }

  // .ywrapper.UintValue tx_524289_1048576 = 106783764 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-524289-1048576"];
  if (this->has_tx_524289_1048576()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tx_524289_1048576_);
  }

  // .ywrapper.UintValue tx_257_512 = 114841827 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-257-512"];
  if (this->has_tx_257_512()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tx_257_512_);
  }

  // .ywrapper.UintValue tx_65537_131072 = 123295085 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-65537-131072"];
  if (this->has_tx_65537_131072()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tx_65537_131072_);
  }

  // .ywrapper.UintValue tx_129_256 = 125235836 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-129-256"];
  if (this->has_tx_129_256()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tx_129_256_);
  }

  // .ywrapper.UintValue tx_1025_2048 = 196667525 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-1025-2048"];
  if (this->has_tx_1025_2048()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tx_1025_2048_);
  }

  // .ywrapper.UintValue tx_65_128 = 211883005 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-65-128"];
  if (this->has_tx_65_128()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tx_65_128_);
  }

  // .ywrapper.UintValue tx_2049_4096 = 220523787 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-2049-4096"];
  if (this->has_tx_2049_4096()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tx_2049_4096_);
  }

  // .ywrapper.UintValue tx_8193_16384 = 304431444 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-8193-16384"];
  if (this->has_tx_8193_16384()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tx_8193_16384_);
  }

  // .ywrapper.UintValue tx_131073_262144 = 335307663 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-131073-262144"];
  if (this->has_tx_131073_262144()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tx_131073_262144_);
  }

  // .ywrapper.UintValue tx_262145_524288 = 386821806 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-262145-524288"];
  if (this->has_tx_262145_524288()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tx_262145_524288_);
  }

  // .ywrapper.UintValue tx_513_1024 = 517866953 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-513-1024"];
  if (this->has_tx_513_1024()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tx_513_1024_);
  }

  // .ywrapper.UintValue tx_16385_32768 = 519209788 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-16385-32768"];
  if (this->has_tx_16385_32768()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tx_16385_32768_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bssids_Bssid_State_Counters_TxDataDist::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist)
  GOOGLE_DCHECK_NE(&from, this);
  const Bssids_Bssid_State_Counters_TxDataDist* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Bssids_Bssid_State_Counters_TxDataDist>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist)
    MergeFrom(*source);
  }
}

void Bssids_Bssid_State_Counters_TxDataDist::MergeFrom(const Bssids_Bssid_State_Counters_TxDataDist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tx_32769_65536()) {
    mutable_tx_32769_65536()->::ywrapper::UintValue::MergeFrom(from.tx_32769_65536());
  }
  if (from.has_tx_0_64()) {
    mutable_tx_0_64()->::ywrapper::UintValue::MergeFrom(from.tx_0_64());
  }
  if (from.has_tx_4097_8192()) {
    mutable_tx_4097_8192()->::ywrapper::UintValue::MergeFrom(from.tx_4097_8192());
  }
  if (from.has_tx_524289_1048576()) {
    mutable_tx_524289_1048576()->::ywrapper::UintValue::MergeFrom(from.tx_524289_1048576());
  }
  if (from.has_tx_257_512()) {
    mutable_tx_257_512()->::ywrapper::UintValue::MergeFrom(from.tx_257_512());
  }
  if (from.has_tx_65537_131072()) {
    mutable_tx_65537_131072()->::ywrapper::UintValue::MergeFrom(from.tx_65537_131072());
  }
  if (from.has_tx_129_256()) {
    mutable_tx_129_256()->::ywrapper::UintValue::MergeFrom(from.tx_129_256());
  }
  if (from.has_tx_1025_2048()) {
    mutable_tx_1025_2048()->::ywrapper::UintValue::MergeFrom(from.tx_1025_2048());
  }
  if (from.has_tx_65_128()) {
    mutable_tx_65_128()->::ywrapper::UintValue::MergeFrom(from.tx_65_128());
  }
  if (from.has_tx_2049_4096()) {
    mutable_tx_2049_4096()->::ywrapper::UintValue::MergeFrom(from.tx_2049_4096());
  }
  if (from.has_tx_8193_16384()) {
    mutable_tx_8193_16384()->::ywrapper::UintValue::MergeFrom(from.tx_8193_16384());
  }
  if (from.has_tx_131073_262144()) {
    mutable_tx_131073_262144()->::ywrapper::UintValue::MergeFrom(from.tx_131073_262144());
  }
  if (from.has_tx_262145_524288()) {
    mutable_tx_262145_524288()->::ywrapper::UintValue::MergeFrom(from.tx_262145_524288());
  }
  if (from.has_tx_513_1024()) {
    mutable_tx_513_1024()->::ywrapper::UintValue::MergeFrom(from.tx_513_1024());
  }
  if (from.has_tx_16385_32768()) {
    mutable_tx_16385_32768()->::ywrapper::UintValue::MergeFrom(from.tx_16385_32768());
  }
}

void Bssids_Bssid_State_Counters_TxDataDist::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bssids_Bssid_State_Counters_TxDataDist::CopyFrom(const Bssids_Bssid_State_Counters_TxDataDist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bssids_Bssid_State_Counters_TxDataDist::IsInitialized() const {
  return true;
}

void Bssids_Bssid_State_Counters_TxDataDist::Swap(Bssids_Bssid_State_Counters_TxDataDist* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Bssids_Bssid_State_Counters_TxDataDist::InternalSwap(Bssids_Bssid_State_Counters_TxDataDist* other) {
  using std::swap;
  swap(tx_32769_65536_, other->tx_32769_65536_);
  swap(tx_0_64_, other->tx_0_64_);
  swap(tx_4097_8192_, other->tx_4097_8192_);
  swap(tx_524289_1048576_, other->tx_524289_1048576_);
  swap(tx_257_512_, other->tx_257_512_);
  swap(tx_65537_131072_, other->tx_65537_131072_);
  swap(tx_129_256_, other->tx_129_256_);
  swap(tx_1025_2048_, other->tx_1025_2048_);
  swap(tx_65_128_, other->tx_65_128_);
  swap(tx_2049_4096_, other->tx_2049_4096_);
  swap(tx_8193_16384_, other->tx_8193_16384_);
  swap(tx_131073_262144_, other->tx_131073_262144_);
  swap(tx_262145_524288_, other->tx_262145_524288_);
  swap(tx_513_1024_, other->tx_513_1024_);
  swap(tx_16385_32768_, other->tx_16385_32768_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Bssids_Bssid_State_Counters_TxDataDist::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Bssids_Bssid_State_Counters_TxDataWmm::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_TxDataWmm_default_instance_._instance.get_mutable()->be_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_TxDataWmm_default_instance_._instance.get_mutable()->bk_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_TxDataWmm_default_instance_._instance.get_mutable()->vi_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_TxDataWmm_default_instance_._instance.get_mutable()->vo_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Bssids_Bssid_State_Counters_TxDataWmm::clear_be() {
  if (GetArenaNoVirtual() == NULL && be_ != NULL) {
    delete be_;
  }
  be_ = NULL;
}
void Bssids_Bssid_State_Counters_TxDataWmm::clear_bk() {
  if (GetArenaNoVirtual() == NULL && bk_ != NULL) {
    delete bk_;
  }
  bk_ = NULL;
}
void Bssids_Bssid_State_Counters_TxDataWmm::clear_vi() {
  if (GetArenaNoVirtual() == NULL && vi_ != NULL) {
    delete vi_;
  }
  vi_ = NULL;
}
void Bssids_Bssid_State_Counters_TxDataWmm::clear_vo() {
  if (GetArenaNoVirtual() == NULL && vo_ != NULL) {
    delete vo_;
  }
  vo_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Bssids_Bssid_State_Counters_TxDataWmm::kBeFieldNumber;
const int Bssids_Bssid_State_Counters_TxDataWmm::kBkFieldNumber;
const int Bssids_Bssid_State_Counters_TxDataWmm::kViFieldNumber;
const int Bssids_Bssid_State_Counters_TxDataWmm::kVoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Bssids_Bssid_State_Counters_TxDataWmm::Bssids_Bssid_State_Counters_TxDataWmm()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids_Bssid_State_Counters_TxDataWmm();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm)
}
Bssids_Bssid_State_Counters_TxDataWmm::Bssids_Bssid_State_Counters_TxDataWmm(const Bssids_Bssid_State_Counters_TxDataWmm& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_vi()) {
    vi_ = new ::ywrapper::UintValue(*from.vi_);
  } else {
    vi_ = NULL;
  }
  if (from.has_vo()) {
    vo_ = new ::ywrapper::UintValue(*from.vo_);
  } else {
    vo_ = NULL;
  }
  if (from.has_be()) {
    be_ = new ::ywrapper::UintValue(*from.be_);
  } else {
    be_ = NULL;
  }
  if (from.has_bk()) {
    bk_ = new ::ywrapper::UintValue(*from.bk_);
  } else {
    bk_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm)
}

void Bssids_Bssid_State_Counters_TxDataWmm::SharedCtor() {
  ::memset(&vi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bk_) -
      reinterpret_cast<char*>(&vi_)) + sizeof(bk_));
  _cached_size_ = 0;
}

Bssids_Bssid_State_Counters_TxDataWmm::~Bssids_Bssid_State_Counters_TxDataWmm() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm)
  SharedDtor();
}

void Bssids_Bssid_State_Counters_TxDataWmm::SharedDtor() {
  if (this != internal_default_instance()) delete vi_;
  if (this != internal_default_instance()) delete vo_;
  if (this != internal_default_instance()) delete be_;
  if (this != internal_default_instance()) delete bk_;
}

void Bssids_Bssid_State_Counters_TxDataWmm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bssids_Bssid_State_Counters_TxDataWmm::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Bssids_Bssid_State_Counters_TxDataWmm& Bssids_Bssid_State_Counters_TxDataWmm::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids_Bssid_State_Counters_TxDataWmm();
  return *internal_default_instance();
}

Bssids_Bssid_State_Counters_TxDataWmm* Bssids_Bssid_State_Counters_TxDataWmm::New(::google::protobuf::Arena* arena) const {
  Bssids_Bssid_State_Counters_TxDataWmm* n = new Bssids_Bssid_State_Counters_TxDataWmm;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Bssids_Bssid_State_Counters_TxDataWmm::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && vi_ != NULL) {
    delete vi_;
  }
  vi_ = NULL;
  if (GetArenaNoVirtual() == NULL && vo_ != NULL) {
    delete vo_;
  }
  vo_ = NULL;
  if (GetArenaNoVirtual() == NULL && be_ != NULL) {
    delete be_;
  }
  be_ = NULL;
  if (GetArenaNoVirtual() == NULL && bk_ != NULL) {
    delete bk_;
  }
  bk_ = NULL;
  _internal_metadata_.Clear();
}

bool Bssids_Bssid_State_Counters_TxDataWmm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3395557354u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue vo = 223126139 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-wmm/vo"];
      case 223126139: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 1785009114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue vi = 223126141 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-wmm/vi"];
      case 223126141: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 1785009130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue bk = 424444659 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-wmm/bk"];
      case 424444659: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 3395557274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bk()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue be = 424444669 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-wmm/be"];
      case 424444669: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 3395557354 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_be()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm)
  return false;
#undef DO_
}

void Bssids_Bssid_State_Counters_TxDataWmm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue vo = 223126139 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-wmm/vo"];
  if (this->has_vo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      223126139, *this->vo_, output);
  }

  // .ywrapper.UintValue vi = 223126141 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-wmm/vi"];
  if (this->has_vi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      223126141, *this->vi_, output);
  }

  // .ywrapper.UintValue bk = 424444659 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-wmm/bk"];
  if (this->has_bk()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      424444659, *this->bk_, output);
  }

  // .ywrapper.UintValue be = 424444669 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-wmm/be"];
  if (this->has_be()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      424444669, *this->be_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm)
}

::google::protobuf::uint8* Bssids_Bssid_State_Counters_TxDataWmm::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue vo = 223126139 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-wmm/vo"];
  if (this->has_vo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        223126139, *this->vo_, deterministic, target);
  }

  // .ywrapper.UintValue vi = 223126141 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-wmm/vi"];
  if (this->has_vi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        223126141, *this->vi_, deterministic, target);
  }

  // .ywrapper.UintValue bk = 424444659 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-wmm/bk"];
  if (this->has_bk()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        424444659, *this->bk_, deterministic, target);
  }

  // .ywrapper.UintValue be = 424444669 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-wmm/be"];
  if (this->has_be()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        424444669, *this->be_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm)
  return target;
}

size_t Bssids_Bssid_State_Counters_TxDataWmm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue vi = 223126141 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-wmm/vi"];
  if (this->has_vi()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->vi_);
  }

  // .ywrapper.UintValue vo = 223126139 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-wmm/vo"];
  if (this->has_vo()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->vo_);
  }

  // .ywrapper.UintValue be = 424444669 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-wmm/be"];
  if (this->has_be()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->be_);
  }

  // .ywrapper.UintValue bk = 424444659 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-wmm/bk"];
  if (this->has_bk()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->bk_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bssids_Bssid_State_Counters_TxDataWmm::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm)
  GOOGLE_DCHECK_NE(&from, this);
  const Bssids_Bssid_State_Counters_TxDataWmm* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Bssids_Bssid_State_Counters_TxDataWmm>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm)
    MergeFrom(*source);
  }
}

void Bssids_Bssid_State_Counters_TxDataWmm::MergeFrom(const Bssids_Bssid_State_Counters_TxDataWmm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_vi()) {
    mutable_vi()->::ywrapper::UintValue::MergeFrom(from.vi());
  }
  if (from.has_vo()) {
    mutable_vo()->::ywrapper::UintValue::MergeFrom(from.vo());
  }
  if (from.has_be()) {
    mutable_be()->::ywrapper::UintValue::MergeFrom(from.be());
  }
  if (from.has_bk()) {
    mutable_bk()->::ywrapper::UintValue::MergeFrom(from.bk());
  }
}

void Bssids_Bssid_State_Counters_TxDataWmm::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bssids_Bssid_State_Counters_TxDataWmm::CopyFrom(const Bssids_Bssid_State_Counters_TxDataWmm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bssids_Bssid_State_Counters_TxDataWmm::IsInitialized() const {
  return true;
}

void Bssids_Bssid_State_Counters_TxDataWmm::Swap(Bssids_Bssid_State_Counters_TxDataWmm* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Bssids_Bssid_State_Counters_TxDataWmm::InternalSwap(Bssids_Bssid_State_Counters_TxDataWmm* other) {
  using std::swap;
  swap(vi_, other->vi_);
  swap(vo_, other->vo_);
  swap(be_, other->be_);
  swap(bk_, other->bk_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Bssids_Bssid_State_Counters_TxDataWmm::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Bssids_Bssid_State_Counters_TxMcs::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_TxMcs_default_instance_._instance.get_mutable()->mcs0_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_TxMcs_default_instance_._instance.get_mutable()->mcs1_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_TxMcs_default_instance_._instance.get_mutable()->mcs2_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_TxMcs_default_instance_._instance.get_mutable()->mcs3_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_TxMcs_default_instance_._instance.get_mutable()->mcs4_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_TxMcs_default_instance_._instance.get_mutable()->mcs5_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_TxMcs_default_instance_._instance.get_mutable()->mcs6_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_TxMcs_default_instance_._instance.get_mutable()->mcs7_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_TxMcs_default_instance_._instance.get_mutable()->mcs8_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_TxMcs_default_instance_._instance.get_mutable()->mcs9_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Bssids_Bssid_State_Counters_TxMcs::clear_mcs0() {
  if (GetArenaNoVirtual() == NULL && mcs0_ != NULL) {
    delete mcs0_;
  }
  mcs0_ = NULL;
}
void Bssids_Bssid_State_Counters_TxMcs::clear_mcs1() {
  if (GetArenaNoVirtual() == NULL && mcs1_ != NULL) {
    delete mcs1_;
  }
  mcs1_ = NULL;
}
void Bssids_Bssid_State_Counters_TxMcs::clear_mcs2() {
  if (GetArenaNoVirtual() == NULL && mcs2_ != NULL) {
    delete mcs2_;
  }
  mcs2_ = NULL;
}
void Bssids_Bssid_State_Counters_TxMcs::clear_mcs3() {
  if (GetArenaNoVirtual() == NULL && mcs3_ != NULL) {
    delete mcs3_;
  }
  mcs3_ = NULL;
}
void Bssids_Bssid_State_Counters_TxMcs::clear_mcs4() {
  if (GetArenaNoVirtual() == NULL && mcs4_ != NULL) {
    delete mcs4_;
  }
  mcs4_ = NULL;
}
void Bssids_Bssid_State_Counters_TxMcs::clear_mcs5() {
  if (GetArenaNoVirtual() == NULL && mcs5_ != NULL) {
    delete mcs5_;
  }
  mcs5_ = NULL;
}
void Bssids_Bssid_State_Counters_TxMcs::clear_mcs6() {
  if (GetArenaNoVirtual() == NULL && mcs6_ != NULL) {
    delete mcs6_;
  }
  mcs6_ = NULL;
}
void Bssids_Bssid_State_Counters_TxMcs::clear_mcs7() {
  if (GetArenaNoVirtual() == NULL && mcs7_ != NULL) {
    delete mcs7_;
  }
  mcs7_ = NULL;
}
void Bssids_Bssid_State_Counters_TxMcs::clear_mcs8() {
  if (GetArenaNoVirtual() == NULL && mcs8_ != NULL) {
    delete mcs8_;
  }
  mcs8_ = NULL;
}
void Bssids_Bssid_State_Counters_TxMcs::clear_mcs9() {
  if (GetArenaNoVirtual() == NULL && mcs9_ != NULL) {
    delete mcs9_;
  }
  mcs9_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Bssids_Bssid_State_Counters_TxMcs::kMcs0FieldNumber;
const int Bssids_Bssid_State_Counters_TxMcs::kMcs1FieldNumber;
const int Bssids_Bssid_State_Counters_TxMcs::kMcs2FieldNumber;
const int Bssids_Bssid_State_Counters_TxMcs::kMcs3FieldNumber;
const int Bssids_Bssid_State_Counters_TxMcs::kMcs4FieldNumber;
const int Bssids_Bssid_State_Counters_TxMcs::kMcs5FieldNumber;
const int Bssids_Bssid_State_Counters_TxMcs::kMcs6FieldNumber;
const int Bssids_Bssid_State_Counters_TxMcs::kMcs7FieldNumber;
const int Bssids_Bssid_State_Counters_TxMcs::kMcs8FieldNumber;
const int Bssids_Bssid_State_Counters_TxMcs::kMcs9FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Bssids_Bssid_State_Counters_TxMcs::Bssids_Bssid_State_Counters_TxMcs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids_Bssid_State_Counters_TxMcs();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs)
}
Bssids_Bssid_State_Counters_TxMcs::Bssids_Bssid_State_Counters_TxMcs(const Bssids_Bssid_State_Counters_TxMcs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mcs0()) {
    mcs0_ = new ::ywrapper::UintValue(*from.mcs0_);
  } else {
    mcs0_ = NULL;
  }
  if (from.has_mcs1()) {
    mcs1_ = new ::ywrapper::UintValue(*from.mcs1_);
  } else {
    mcs1_ = NULL;
  }
  if (from.has_mcs2()) {
    mcs2_ = new ::ywrapper::UintValue(*from.mcs2_);
  } else {
    mcs2_ = NULL;
  }
  if (from.has_mcs3()) {
    mcs3_ = new ::ywrapper::UintValue(*from.mcs3_);
  } else {
    mcs3_ = NULL;
  }
  if (from.has_mcs4()) {
    mcs4_ = new ::ywrapper::UintValue(*from.mcs4_);
  } else {
    mcs4_ = NULL;
  }
  if (from.has_mcs5()) {
    mcs5_ = new ::ywrapper::UintValue(*from.mcs5_);
  } else {
    mcs5_ = NULL;
  }
  if (from.has_mcs6()) {
    mcs6_ = new ::ywrapper::UintValue(*from.mcs6_);
  } else {
    mcs6_ = NULL;
  }
  if (from.has_mcs7()) {
    mcs7_ = new ::ywrapper::UintValue(*from.mcs7_);
  } else {
    mcs7_ = NULL;
  }
  if (from.has_mcs8()) {
    mcs8_ = new ::ywrapper::UintValue(*from.mcs8_);
  } else {
    mcs8_ = NULL;
  }
  if (from.has_mcs9()) {
    mcs9_ = new ::ywrapper::UintValue(*from.mcs9_);
  } else {
    mcs9_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs)
}

void Bssids_Bssid_State_Counters_TxMcs::SharedCtor() {
  ::memset(&mcs0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mcs9_) -
      reinterpret_cast<char*>(&mcs0_)) + sizeof(mcs9_));
  _cached_size_ = 0;
}

Bssids_Bssid_State_Counters_TxMcs::~Bssids_Bssid_State_Counters_TxMcs() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs)
  SharedDtor();
}

void Bssids_Bssid_State_Counters_TxMcs::SharedDtor() {
  if (this != internal_default_instance()) delete mcs0_;
  if (this != internal_default_instance()) delete mcs1_;
  if (this != internal_default_instance()) delete mcs2_;
  if (this != internal_default_instance()) delete mcs3_;
  if (this != internal_default_instance()) delete mcs4_;
  if (this != internal_default_instance()) delete mcs5_;
  if (this != internal_default_instance()) delete mcs6_;
  if (this != internal_default_instance()) delete mcs7_;
  if (this != internal_default_instance()) delete mcs8_;
  if (this != internal_default_instance()) delete mcs9_;
}

void Bssids_Bssid_State_Counters_TxMcs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bssids_Bssid_State_Counters_TxMcs::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Bssids_Bssid_State_Counters_TxMcs& Bssids_Bssid_State_Counters_TxMcs::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids_Bssid_State_Counters_TxMcs();
  return *internal_default_instance();
}

Bssids_Bssid_State_Counters_TxMcs* Bssids_Bssid_State_Counters_TxMcs::New(::google::protobuf::Arena* arena) const {
  Bssids_Bssid_State_Counters_TxMcs* n = new Bssids_Bssid_State_Counters_TxMcs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Bssids_Bssid_State_Counters_TxMcs::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && mcs0_ != NULL) {
    delete mcs0_;
  }
  mcs0_ = NULL;
  if (GetArenaNoVirtual() == NULL && mcs1_ != NULL) {
    delete mcs1_;
  }
  mcs1_ = NULL;
  if (GetArenaNoVirtual() == NULL && mcs2_ != NULL) {
    delete mcs2_;
  }
  mcs2_ = NULL;
  if (GetArenaNoVirtual() == NULL && mcs3_ != NULL) {
    delete mcs3_;
  }
  mcs3_ = NULL;
  if (GetArenaNoVirtual() == NULL && mcs4_ != NULL) {
    delete mcs4_;
  }
  mcs4_ = NULL;
  if (GetArenaNoVirtual() == NULL && mcs5_ != NULL) {
    delete mcs5_;
  }
  mcs5_ = NULL;
  if (GetArenaNoVirtual() == NULL && mcs6_ != NULL) {
    delete mcs6_;
  }
  mcs6_ = NULL;
  if (GetArenaNoVirtual() == NULL && mcs7_ != NULL) {
    delete mcs7_;
  }
  mcs7_ = NULL;
  if (GetArenaNoVirtual() == NULL && mcs8_ != NULL) {
    delete mcs8_;
  }
  mcs8_ = NULL;
  if (GetArenaNoVirtual() == NULL && mcs9_ != NULL) {
    delete mcs9_;
  }
  mcs9_ = NULL;
  _internal_metadata_.Clear();
}

bool Bssids_Bssid_State_Counters_TxMcs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(1796192634u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue mcs6 = 224524064 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs6"];
      case 224524064: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 1796192514 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mcs6()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue mcs7 = 224524065 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs7"];
      case 224524065: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 1796192522 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mcs7()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue mcs4 = 224524066 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs4"];
      case 224524066: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 1796192530 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mcs4()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue mcs5 = 224524067 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs5"];
      case 224524067: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 1796192538 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mcs5()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue mcs2 = 224524068 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs2"];
      case 224524068: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 1796192546 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mcs2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue mcs3 = 224524069 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs3"];
      case 224524069: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 1796192554 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mcs3()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue mcs0 = 224524070 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs0"];
      case 224524070: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 1796192562 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mcs0()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue mcs1 = 224524071 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs1"];
      case 224524071: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 1796192570 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mcs1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue mcs8 = 224524078 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs8"];
      case 224524078: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 1796192626 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mcs8()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue mcs9 = 224524079 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs9"];
      case 224524079: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 1796192634 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mcs9()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs)
  return false;
#undef DO_
}

void Bssids_Bssid_State_Counters_TxMcs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue mcs6 = 224524064 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs6"];
  if (this->has_mcs6()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      224524064, *this->mcs6_, output);
  }

  // .ywrapper.UintValue mcs7 = 224524065 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs7"];
  if (this->has_mcs7()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      224524065, *this->mcs7_, output);
  }

  // .ywrapper.UintValue mcs4 = 224524066 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs4"];
  if (this->has_mcs4()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      224524066, *this->mcs4_, output);
  }

  // .ywrapper.UintValue mcs5 = 224524067 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs5"];
  if (this->has_mcs5()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      224524067, *this->mcs5_, output);
  }

  // .ywrapper.UintValue mcs2 = 224524068 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs2"];
  if (this->has_mcs2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      224524068, *this->mcs2_, output);
  }

  // .ywrapper.UintValue mcs3 = 224524069 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs3"];
  if (this->has_mcs3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      224524069, *this->mcs3_, output);
  }

  // .ywrapper.UintValue mcs0 = 224524070 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs0"];
  if (this->has_mcs0()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      224524070, *this->mcs0_, output);
  }

  // .ywrapper.UintValue mcs1 = 224524071 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs1"];
  if (this->has_mcs1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      224524071, *this->mcs1_, output);
  }

  // .ywrapper.UintValue mcs8 = 224524078 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs8"];
  if (this->has_mcs8()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      224524078, *this->mcs8_, output);
  }

  // .ywrapper.UintValue mcs9 = 224524079 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs9"];
  if (this->has_mcs9()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      224524079, *this->mcs9_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs)
}

::google::protobuf::uint8* Bssids_Bssid_State_Counters_TxMcs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue mcs6 = 224524064 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs6"];
  if (this->has_mcs6()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        224524064, *this->mcs6_, deterministic, target);
  }

  // .ywrapper.UintValue mcs7 = 224524065 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs7"];
  if (this->has_mcs7()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        224524065, *this->mcs7_, deterministic, target);
  }

  // .ywrapper.UintValue mcs4 = 224524066 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs4"];
  if (this->has_mcs4()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        224524066, *this->mcs4_, deterministic, target);
  }

  // .ywrapper.UintValue mcs5 = 224524067 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs5"];
  if (this->has_mcs5()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        224524067, *this->mcs5_, deterministic, target);
  }

  // .ywrapper.UintValue mcs2 = 224524068 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs2"];
  if (this->has_mcs2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        224524068, *this->mcs2_, deterministic, target);
  }

  // .ywrapper.UintValue mcs3 = 224524069 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs3"];
  if (this->has_mcs3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        224524069, *this->mcs3_, deterministic, target);
  }

  // .ywrapper.UintValue mcs0 = 224524070 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs0"];
  if (this->has_mcs0()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        224524070, *this->mcs0_, deterministic, target);
  }

  // .ywrapper.UintValue mcs1 = 224524071 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs1"];
  if (this->has_mcs1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        224524071, *this->mcs1_, deterministic, target);
  }

  // .ywrapper.UintValue mcs8 = 224524078 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs8"];
  if (this->has_mcs8()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        224524078, *this->mcs8_, deterministic, target);
  }

  // .ywrapper.UintValue mcs9 = 224524079 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs9"];
  if (this->has_mcs9()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        224524079, *this->mcs9_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs)
  return target;
}

size_t Bssids_Bssid_State_Counters_TxMcs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue mcs0 = 224524070 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs0"];
  if (this->has_mcs0()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mcs0_);
  }

  // .ywrapper.UintValue mcs1 = 224524071 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs1"];
  if (this->has_mcs1()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mcs1_);
  }

  // .ywrapper.UintValue mcs2 = 224524068 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs2"];
  if (this->has_mcs2()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mcs2_);
  }

  // .ywrapper.UintValue mcs3 = 224524069 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs3"];
  if (this->has_mcs3()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mcs3_);
  }

  // .ywrapper.UintValue mcs4 = 224524066 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs4"];
  if (this->has_mcs4()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mcs4_);
  }

  // .ywrapper.UintValue mcs5 = 224524067 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs5"];
  if (this->has_mcs5()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mcs5_);
  }

  // .ywrapper.UintValue mcs6 = 224524064 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs6"];
  if (this->has_mcs6()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mcs6_);
  }

  // .ywrapper.UintValue mcs7 = 224524065 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs7"];
  if (this->has_mcs7()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mcs7_);
  }

  // .ywrapper.UintValue mcs8 = 224524078 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs8"];
  if (this->has_mcs8()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mcs8_);
  }

  // .ywrapper.UintValue mcs9 = 224524079 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs9"];
  if (this->has_mcs9()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mcs9_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bssids_Bssid_State_Counters_TxMcs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs)
  GOOGLE_DCHECK_NE(&from, this);
  const Bssids_Bssid_State_Counters_TxMcs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Bssids_Bssid_State_Counters_TxMcs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs)
    MergeFrom(*source);
  }
}

void Bssids_Bssid_State_Counters_TxMcs::MergeFrom(const Bssids_Bssid_State_Counters_TxMcs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mcs0()) {
    mutable_mcs0()->::ywrapper::UintValue::MergeFrom(from.mcs0());
  }
  if (from.has_mcs1()) {
    mutable_mcs1()->::ywrapper::UintValue::MergeFrom(from.mcs1());
  }
  if (from.has_mcs2()) {
    mutable_mcs2()->::ywrapper::UintValue::MergeFrom(from.mcs2());
  }
  if (from.has_mcs3()) {
    mutable_mcs3()->::ywrapper::UintValue::MergeFrom(from.mcs3());
  }
  if (from.has_mcs4()) {
    mutable_mcs4()->::ywrapper::UintValue::MergeFrom(from.mcs4());
  }
  if (from.has_mcs5()) {
    mutable_mcs5()->::ywrapper::UintValue::MergeFrom(from.mcs5());
  }
  if (from.has_mcs6()) {
    mutable_mcs6()->::ywrapper::UintValue::MergeFrom(from.mcs6());
  }
  if (from.has_mcs7()) {
    mutable_mcs7()->::ywrapper::UintValue::MergeFrom(from.mcs7());
  }
  if (from.has_mcs8()) {
    mutable_mcs8()->::ywrapper::UintValue::MergeFrom(from.mcs8());
  }
  if (from.has_mcs9()) {
    mutable_mcs9()->::ywrapper::UintValue::MergeFrom(from.mcs9());
  }
}

void Bssids_Bssid_State_Counters_TxMcs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bssids_Bssid_State_Counters_TxMcs::CopyFrom(const Bssids_Bssid_State_Counters_TxMcs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bssids_Bssid_State_Counters_TxMcs::IsInitialized() const {
  return true;
}

void Bssids_Bssid_State_Counters_TxMcs::Swap(Bssids_Bssid_State_Counters_TxMcs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Bssids_Bssid_State_Counters_TxMcs::InternalSwap(Bssids_Bssid_State_Counters_TxMcs* other) {
  using std::swap;
  swap(mcs0_, other->mcs0_);
  swap(mcs1_, other->mcs1_);
  swap(mcs2_, other->mcs2_);
  swap(mcs3_, other->mcs3_);
  swap(mcs4_, other->mcs4_);
  swap(mcs5_, other->mcs5_);
  swap(mcs6_, other->mcs6_);
  swap(mcs7_, other->mcs7_);
  swap(mcs8_, other->mcs8_);
  swap(mcs9_, other->mcs9_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Bssids_Bssid_State_Counters_TxMcs::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Bssids_Bssid_State_Counters::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_default_instance_._instance.get_mutable()->rx_bytes_data_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_default_instance_._instance.get_mutable()->rx_control_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_default_instance_._instance.get_mutable()->rx_data_dist_ = const_cast< ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataDist*>(
      ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataDist::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_default_instance_._instance.get_mutable()->rx_data_wmm_ = const_cast< ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataWmm*>(
      ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataWmm::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_default_instance_._instance.get_mutable()->rx_mcs_ = const_cast< ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxMcs*>(
      ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxMcs::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_default_instance_._instance.get_mutable()->rx_mgmt_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_default_instance_._instance.get_mutable()->rx_retries_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_default_instance_._instance.get_mutable()->rx_retries_data_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_default_instance_._instance.get_mutable()->rx_retries_subframe_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_default_instance_._instance.get_mutable()->tx_bytes_data_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_default_instance_._instance.get_mutable()->tx_control_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_default_instance_._instance.get_mutable()->tx_data_dist_ = const_cast< ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataDist*>(
      ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataDist::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_default_instance_._instance.get_mutable()->tx_data_wmm_ = const_cast< ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataWmm*>(
      ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataWmm::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_default_instance_._instance.get_mutable()->tx_mcs_ = const_cast< ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxMcs*>(
      ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxMcs::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_default_instance_._instance.get_mutable()->tx_mgmt_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_default_instance_._instance.get_mutable()->tx_retries_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_default_instance_._instance.get_mutable()->tx_retries_data_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_default_instance_._instance.get_mutable()->tx_retries_subframe_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Bssids_Bssid_State_Counters::clear_rx_bytes_data() {
  if (GetArenaNoVirtual() == NULL && rx_bytes_data_ != NULL) {
    delete rx_bytes_data_;
  }
  rx_bytes_data_ = NULL;
}
void Bssids_Bssid_State_Counters::clear_rx_control() {
  if (GetArenaNoVirtual() == NULL && rx_control_ != NULL) {
    delete rx_control_;
  }
  rx_control_ = NULL;
}
void Bssids_Bssid_State_Counters::clear_rx_mgmt() {
  if (GetArenaNoVirtual() == NULL && rx_mgmt_ != NULL) {
    delete rx_mgmt_;
  }
  rx_mgmt_ = NULL;
}
void Bssids_Bssid_State_Counters::clear_rx_retries() {
  if (GetArenaNoVirtual() == NULL && rx_retries_ != NULL) {
    delete rx_retries_;
  }
  rx_retries_ = NULL;
}
void Bssids_Bssid_State_Counters::clear_rx_retries_data() {
  if (GetArenaNoVirtual() == NULL && rx_retries_data_ != NULL) {
    delete rx_retries_data_;
  }
  rx_retries_data_ = NULL;
}
void Bssids_Bssid_State_Counters::clear_rx_retries_subframe() {
  if (GetArenaNoVirtual() == NULL && rx_retries_subframe_ != NULL) {
    delete rx_retries_subframe_;
  }
  rx_retries_subframe_ = NULL;
}
void Bssids_Bssid_State_Counters::clear_tx_bytes_data() {
  if (GetArenaNoVirtual() == NULL && tx_bytes_data_ != NULL) {
    delete tx_bytes_data_;
  }
  tx_bytes_data_ = NULL;
}
void Bssids_Bssid_State_Counters::clear_tx_control() {
  if (GetArenaNoVirtual() == NULL && tx_control_ != NULL) {
    delete tx_control_;
  }
  tx_control_ = NULL;
}
void Bssids_Bssid_State_Counters::clear_tx_mgmt() {
  if (GetArenaNoVirtual() == NULL && tx_mgmt_ != NULL) {
    delete tx_mgmt_;
  }
  tx_mgmt_ = NULL;
}
void Bssids_Bssid_State_Counters::clear_tx_retries() {
  if (GetArenaNoVirtual() == NULL && tx_retries_ != NULL) {
    delete tx_retries_;
  }
  tx_retries_ = NULL;
}
void Bssids_Bssid_State_Counters::clear_tx_retries_data() {
  if (GetArenaNoVirtual() == NULL && tx_retries_data_ != NULL) {
    delete tx_retries_data_;
  }
  tx_retries_data_ = NULL;
}
void Bssids_Bssid_State_Counters::clear_tx_retries_subframe() {
  if (GetArenaNoVirtual() == NULL && tx_retries_subframe_ != NULL) {
    delete tx_retries_subframe_;
  }
  tx_retries_subframe_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Bssids_Bssid_State_Counters::kRxBytesDataFieldNumber;
const int Bssids_Bssid_State_Counters::kRxControlFieldNumber;
const int Bssids_Bssid_State_Counters::kRxDataDistFieldNumber;
const int Bssids_Bssid_State_Counters::kRxDataWmmFieldNumber;
const int Bssids_Bssid_State_Counters::kRxMcsFieldNumber;
const int Bssids_Bssid_State_Counters::kRxMgmtFieldNumber;
const int Bssids_Bssid_State_Counters::kRxRetriesFieldNumber;
const int Bssids_Bssid_State_Counters::kRxRetriesDataFieldNumber;
const int Bssids_Bssid_State_Counters::kRxRetriesSubframeFieldNumber;
const int Bssids_Bssid_State_Counters::kTxBytesDataFieldNumber;
const int Bssids_Bssid_State_Counters::kTxControlFieldNumber;
const int Bssids_Bssid_State_Counters::kTxDataDistFieldNumber;
const int Bssids_Bssid_State_Counters::kTxDataWmmFieldNumber;
const int Bssids_Bssid_State_Counters::kTxMcsFieldNumber;
const int Bssids_Bssid_State_Counters::kTxMgmtFieldNumber;
const int Bssids_Bssid_State_Counters::kTxRetriesFieldNumber;
const int Bssids_Bssid_State_Counters::kTxRetriesDataFieldNumber;
const int Bssids_Bssid_State_Counters::kTxRetriesSubframeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Bssids_Bssid_State_Counters::Bssids_Bssid_State_Counters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids_Bssid_State_Counters();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters)
}
Bssids_Bssid_State_Counters::Bssids_Bssid_State_Counters(const Bssids_Bssid_State_Counters& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tx_retries_data()) {
    tx_retries_data_ = new ::ywrapper::UintValue(*from.tx_retries_data_);
  } else {
    tx_retries_data_ = NULL;
  }
  if (from.has_rx_retries_subframe()) {
    rx_retries_subframe_ = new ::ywrapper::UintValue(*from.rx_retries_subframe_);
  } else {
    rx_retries_subframe_ = NULL;
  }
  if (from.has_tx_data_dist()) {
    tx_data_dist_ = new ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataDist(*from.tx_data_dist_);
  } else {
    tx_data_dist_ = NULL;
  }
  if (from.has_tx_retries_subframe()) {
    tx_retries_subframe_ = new ::ywrapper::UintValue(*from.tx_retries_subframe_);
  } else {
    tx_retries_subframe_ = NULL;
  }
  if (from.has_tx_retries()) {
    tx_retries_ = new ::ywrapper::UintValue(*from.tx_retries_);
  } else {
    tx_retries_ = NULL;
  }
  if (from.has_tx_mcs()) {
    tx_mcs_ = new ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxMcs(*from.tx_mcs_);
  } else {
    tx_mcs_ = NULL;
  }
  if (from.has_rx_data_dist()) {
    rx_data_dist_ = new ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataDist(*from.rx_data_dist_);
  } else {
    rx_data_dist_ = NULL;
  }
  if (from.has_tx_control()) {
    tx_control_ = new ::ywrapper::UintValue(*from.tx_control_);
  } else {
    tx_control_ = NULL;
  }
  if (from.has_rx_data_wmm()) {
    rx_data_wmm_ = new ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataWmm(*from.rx_data_wmm_);
  } else {
    rx_data_wmm_ = NULL;
  }
  if (from.has_tx_bytes_data()) {
    tx_bytes_data_ = new ::ywrapper::UintValue(*from.tx_bytes_data_);
  } else {
    tx_bytes_data_ = NULL;
  }
  if (from.has_rx_bytes_data()) {
    rx_bytes_data_ = new ::ywrapper::UintValue(*from.rx_bytes_data_);
  } else {
    rx_bytes_data_ = NULL;
  }
  if (from.has_rx_mcs()) {
    rx_mcs_ = new ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxMcs(*from.rx_mcs_);
  } else {
    rx_mcs_ = NULL;
  }
  if (from.has_rx_retries()) {
    rx_retries_ = new ::ywrapper::UintValue(*from.rx_retries_);
  } else {
    rx_retries_ = NULL;
  }
  if (from.has_tx_data_wmm()) {
    tx_data_wmm_ = new ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataWmm(*from.tx_data_wmm_);
  } else {
    tx_data_wmm_ = NULL;
  }
  if (from.has_rx_mgmt()) {
    rx_mgmt_ = new ::ywrapper::UintValue(*from.rx_mgmt_);
  } else {
    rx_mgmt_ = NULL;
  }
  if (from.has_rx_control()) {
    rx_control_ = new ::ywrapper::UintValue(*from.rx_control_);
  } else {
    rx_control_ = NULL;
  }
  if (from.has_rx_retries_data()) {
    rx_retries_data_ = new ::ywrapper::UintValue(*from.rx_retries_data_);
  } else {
    rx_retries_data_ = NULL;
  }
  if (from.has_tx_mgmt()) {
    tx_mgmt_ = new ::ywrapper::UintValue(*from.tx_mgmt_);
  } else {
    tx_mgmt_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters)
}

void Bssids_Bssid_State_Counters::SharedCtor() {
  ::memset(&tx_retries_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tx_mgmt_) -
      reinterpret_cast<char*>(&tx_retries_data_)) + sizeof(tx_mgmt_));
  _cached_size_ = 0;
}

Bssids_Bssid_State_Counters::~Bssids_Bssid_State_Counters() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters)
  SharedDtor();
}

void Bssids_Bssid_State_Counters::SharedDtor() {
  if (this != internal_default_instance()) delete tx_retries_data_;
  if (this != internal_default_instance()) delete rx_retries_subframe_;
  if (this != internal_default_instance()) delete tx_data_dist_;
  if (this != internal_default_instance()) delete tx_retries_subframe_;
  if (this != internal_default_instance()) delete tx_retries_;
  if (this != internal_default_instance()) delete tx_mcs_;
  if (this != internal_default_instance()) delete rx_data_dist_;
  if (this != internal_default_instance()) delete tx_control_;
  if (this != internal_default_instance()) delete rx_data_wmm_;
  if (this != internal_default_instance()) delete tx_bytes_data_;
  if (this != internal_default_instance()) delete rx_bytes_data_;
  if (this != internal_default_instance()) delete rx_mcs_;
  if (this != internal_default_instance()) delete rx_retries_;
  if (this != internal_default_instance()) delete tx_data_wmm_;
  if (this != internal_default_instance()) delete rx_mgmt_;
  if (this != internal_default_instance()) delete rx_control_;
  if (this != internal_default_instance()) delete rx_retries_data_;
  if (this != internal_default_instance()) delete tx_mgmt_;
}

void Bssids_Bssid_State_Counters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bssids_Bssid_State_Counters::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Bssids_Bssid_State_Counters& Bssids_Bssid_State_Counters::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids_Bssid_State_Counters();
  return *internal_default_instance();
}

Bssids_Bssid_State_Counters* Bssids_Bssid_State_Counters::New(::google::protobuf::Arena* arena) const {
  Bssids_Bssid_State_Counters* n = new Bssids_Bssid_State_Counters;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Bssids_Bssid_State_Counters::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && tx_retries_data_ != NULL) {
    delete tx_retries_data_;
  }
  tx_retries_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && rx_retries_subframe_ != NULL) {
    delete rx_retries_subframe_;
  }
  rx_retries_subframe_ = NULL;
  if (GetArenaNoVirtual() == NULL && tx_data_dist_ != NULL) {
    delete tx_data_dist_;
  }
  tx_data_dist_ = NULL;
  if (GetArenaNoVirtual() == NULL && tx_retries_subframe_ != NULL) {
    delete tx_retries_subframe_;
  }
  tx_retries_subframe_ = NULL;
  if (GetArenaNoVirtual() == NULL && tx_retries_ != NULL) {
    delete tx_retries_;
  }
  tx_retries_ = NULL;
  if (GetArenaNoVirtual() == NULL && tx_mcs_ != NULL) {
    delete tx_mcs_;
  }
  tx_mcs_ = NULL;
  if (GetArenaNoVirtual() == NULL && rx_data_dist_ != NULL) {
    delete rx_data_dist_;
  }
  rx_data_dist_ = NULL;
  if (GetArenaNoVirtual() == NULL && tx_control_ != NULL) {
    delete tx_control_;
  }
  tx_control_ = NULL;
  if (GetArenaNoVirtual() == NULL && rx_data_wmm_ != NULL) {
    delete rx_data_wmm_;
  }
  rx_data_wmm_ = NULL;
  if (GetArenaNoVirtual() == NULL && tx_bytes_data_ != NULL) {
    delete tx_bytes_data_;
  }
  tx_bytes_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && rx_bytes_data_ != NULL) {
    delete rx_bytes_data_;
  }
  rx_bytes_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && rx_mcs_ != NULL) {
    delete rx_mcs_;
  }
  rx_mcs_ = NULL;
  if (GetArenaNoVirtual() == NULL && rx_retries_ != NULL) {
    delete rx_retries_;
  }
  rx_retries_ = NULL;
  if (GetArenaNoVirtual() == NULL && tx_data_wmm_ != NULL) {
    delete tx_data_wmm_;
  }
  tx_data_wmm_ = NULL;
  if (GetArenaNoVirtual() == NULL && rx_mgmt_ != NULL) {
    delete rx_mgmt_;
  }
  rx_mgmt_ = NULL;
  if (GetArenaNoVirtual() == NULL && rx_control_ != NULL) {
    delete rx_control_;
  }
  rx_control_ = NULL;
  if (GetArenaNoVirtual() == NULL && rx_retries_data_ != NULL) {
    delete rx_retries_data_;
  }
  rx_retries_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && tx_mgmt_ != NULL) {
    delete tx_mgmt_;
  }
  tx_mgmt_ = NULL;
  _internal_metadata_.Clear();
}

bool Bssids_Bssid_State_Counters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3354022098u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue tx_retries_data = 22635174 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-retries-data"];
      case 22635174: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 181081394 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx_retries_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue rx_retries_subframe = 29082905 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-retries-subframe"];
      case 29082905: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 232663242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rx_retries_subframe()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist tx_data_dist = 60772850 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist"];
      case 60772850: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 486182802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx_data_dist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue tx_retries_subframe = 67415871 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-retries-subframe"];
      case 67415871: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 539326970 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx_retries_subframe()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue tx_retries = 94814937 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-retries"];
      case 94814937: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 758519498 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx_retries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs tx_mcs = 103367384 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs"];
      case 103367384: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 826939074 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx_mcs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist rx_data_dist = 119677688 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist"];
      case 119677688: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 957421506 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rx_data_dist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue tx_control = 126063340 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-control"];
      case 126063340: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 1008506722 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx_control()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm rx_data_wmm = 139948749 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-wmm"];
      case 139948749: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 1119589994 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rx_data_wmm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue tx_bytes_data = 141694443 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-bytes-data"];
      case 141694443: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 1133555546 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx_bytes_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue rx_bytes_data = 175562161 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-bytes-data"];
      case 175562161: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 1404497290 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rx_bytes_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs rx_mcs = 192795234 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs"];
      case 192795234: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 1542361874 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rx_mcs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue rx_retries = 227864295 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-retries"];
      case 227864295: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 1822914362 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rx_retries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm tx_data_wmm = 312270491 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-wmm"];
      case 312270491: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 2498163930 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx_data_wmm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue rx_mgmt = 320558052 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mgmt"];
      case 320558052: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 2564464418 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rx_mgmt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue rx_control = 348207354 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-control"];
      case 348207354: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 2785658834 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rx_control()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue rx_retries_data = 416388864 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-retries-data"];
      case 416388864: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 3331110914 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rx_retries_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue tx_mgmt = 419252762 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mgmt"];
      case 419252762: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 3354022098 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx_mgmt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters)
  return false;
#undef DO_
}

void Bssids_Bssid_State_Counters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue tx_retries_data = 22635174 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-retries-data"];
  if (this->has_tx_retries_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22635174, *this->tx_retries_data_, output);
  }

  // .ywrapper.UintValue rx_retries_subframe = 29082905 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-retries-subframe"];
  if (this->has_rx_retries_subframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29082905, *this->rx_retries_subframe_, output);
  }

  // .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist tx_data_dist = 60772850 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist"];
  if (this->has_tx_data_dist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60772850, *this->tx_data_dist_, output);
  }

  // .ywrapper.UintValue tx_retries_subframe = 67415871 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-retries-subframe"];
  if (this->has_tx_retries_subframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      67415871, *this->tx_retries_subframe_, output);
  }

  // .ywrapper.UintValue tx_retries = 94814937 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-retries"];
  if (this->has_tx_retries()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      94814937, *this->tx_retries_, output);
  }

  // .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs tx_mcs = 103367384 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs"];
  if (this->has_tx_mcs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103367384, *this->tx_mcs_, output);
  }

  // .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist rx_data_dist = 119677688 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist"];
  if (this->has_rx_data_dist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      119677688, *this->rx_data_dist_, output);
  }

  // .ywrapper.UintValue tx_control = 126063340 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-control"];
  if (this->has_tx_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      126063340, *this->tx_control_, output);
  }

  // .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm rx_data_wmm = 139948749 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-wmm"];
  if (this->has_rx_data_wmm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      139948749, *this->rx_data_wmm_, output);
  }

  // .ywrapper.UintValue tx_bytes_data = 141694443 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-bytes-data"];
  if (this->has_tx_bytes_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      141694443, *this->tx_bytes_data_, output);
  }

  // .ywrapper.UintValue rx_bytes_data = 175562161 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-bytes-data"];
  if (this->has_rx_bytes_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      175562161, *this->rx_bytes_data_, output);
  }

  // .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs rx_mcs = 192795234 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs"];
  if (this->has_rx_mcs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      192795234, *this->rx_mcs_, output);
  }

  // .ywrapper.UintValue rx_retries = 227864295 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-retries"];
  if (this->has_rx_retries()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      227864295, *this->rx_retries_, output);
  }

  // .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm tx_data_wmm = 312270491 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-wmm"];
  if (this->has_tx_data_wmm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      312270491, *this->tx_data_wmm_, output);
  }

  // .ywrapper.UintValue rx_mgmt = 320558052 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mgmt"];
  if (this->has_rx_mgmt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      320558052, *this->rx_mgmt_, output);
  }

  // .ywrapper.UintValue rx_control = 348207354 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-control"];
  if (this->has_rx_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      348207354, *this->rx_control_, output);
  }

  // .ywrapper.UintValue rx_retries_data = 416388864 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-retries-data"];
  if (this->has_rx_retries_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      416388864, *this->rx_retries_data_, output);
  }

  // .ywrapper.UintValue tx_mgmt = 419252762 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mgmt"];
  if (this->has_tx_mgmt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      419252762, *this->tx_mgmt_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters)
}

::google::protobuf::uint8* Bssids_Bssid_State_Counters::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue tx_retries_data = 22635174 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-retries-data"];
  if (this->has_tx_retries_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22635174, *this->tx_retries_data_, deterministic, target);
  }

  // .ywrapper.UintValue rx_retries_subframe = 29082905 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-retries-subframe"];
  if (this->has_rx_retries_subframe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        29082905, *this->rx_retries_subframe_, deterministic, target);
  }

  // .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist tx_data_dist = 60772850 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist"];
  if (this->has_tx_data_dist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        60772850, *this->tx_data_dist_, deterministic, target);
  }

  // .ywrapper.UintValue tx_retries_subframe = 67415871 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-retries-subframe"];
  if (this->has_tx_retries_subframe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        67415871, *this->tx_retries_subframe_, deterministic, target);
  }

  // .ywrapper.UintValue tx_retries = 94814937 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-retries"];
  if (this->has_tx_retries()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        94814937, *this->tx_retries_, deterministic, target);
  }

  // .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs tx_mcs = 103367384 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs"];
  if (this->has_tx_mcs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        103367384, *this->tx_mcs_, deterministic, target);
  }

  // .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist rx_data_dist = 119677688 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist"];
  if (this->has_rx_data_dist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        119677688, *this->rx_data_dist_, deterministic, target);
  }

  // .ywrapper.UintValue tx_control = 126063340 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-control"];
  if (this->has_tx_control()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        126063340, *this->tx_control_, deterministic, target);
  }

  // .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm rx_data_wmm = 139948749 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-wmm"];
  if (this->has_rx_data_wmm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        139948749, *this->rx_data_wmm_, deterministic, target);
  }

  // .ywrapper.UintValue tx_bytes_data = 141694443 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-bytes-data"];
  if (this->has_tx_bytes_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        141694443, *this->tx_bytes_data_, deterministic, target);
  }

  // .ywrapper.UintValue rx_bytes_data = 175562161 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-bytes-data"];
  if (this->has_rx_bytes_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        175562161, *this->rx_bytes_data_, deterministic, target);
  }

  // .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs rx_mcs = 192795234 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs"];
  if (this->has_rx_mcs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        192795234, *this->rx_mcs_, deterministic, target);
  }

  // .ywrapper.UintValue rx_retries = 227864295 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-retries"];
  if (this->has_rx_retries()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        227864295, *this->rx_retries_, deterministic, target);
  }

  // .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm tx_data_wmm = 312270491 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-wmm"];
  if (this->has_tx_data_wmm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        312270491, *this->tx_data_wmm_, deterministic, target);
  }

  // .ywrapper.UintValue rx_mgmt = 320558052 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mgmt"];
  if (this->has_rx_mgmt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        320558052, *this->rx_mgmt_, deterministic, target);
  }

  // .ywrapper.UintValue rx_control = 348207354 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-control"];
  if (this->has_rx_control()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        348207354, *this->rx_control_, deterministic, target);
  }

  // .ywrapper.UintValue rx_retries_data = 416388864 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-retries-data"];
  if (this->has_rx_retries_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        416388864, *this->rx_retries_data_, deterministic, target);
  }

  // .ywrapper.UintValue tx_mgmt = 419252762 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mgmt"];
  if (this->has_tx_mgmt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        419252762, *this->tx_mgmt_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters)
  return target;
}

size_t Bssids_Bssid_State_Counters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue tx_retries_data = 22635174 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-retries-data"];
  if (this->has_tx_retries_data()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tx_retries_data_);
  }

  // .ywrapper.UintValue rx_retries_subframe = 29082905 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-retries-subframe"];
  if (this->has_rx_retries_subframe()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rx_retries_subframe_);
  }

  // .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist tx_data_dist = 60772850 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist"];
  if (this->has_tx_data_dist()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tx_data_dist_);
  }

  // .ywrapper.UintValue tx_retries_subframe = 67415871 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-retries-subframe"];
  if (this->has_tx_retries_subframe()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tx_retries_subframe_);
  }

  // .ywrapper.UintValue tx_retries = 94814937 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-retries"];
  if (this->has_tx_retries()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tx_retries_);
  }

  // .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs tx_mcs = 103367384 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs"];
  if (this->has_tx_mcs()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tx_mcs_);
  }

  // .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist rx_data_dist = 119677688 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist"];
  if (this->has_rx_data_dist()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rx_data_dist_);
  }

  // .ywrapper.UintValue tx_control = 126063340 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-control"];
  if (this->has_tx_control()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tx_control_);
  }

  // .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm rx_data_wmm = 139948749 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-wmm"];
  if (this->has_rx_data_wmm()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rx_data_wmm_);
  }

  // .ywrapper.UintValue tx_bytes_data = 141694443 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-bytes-data"];
  if (this->has_tx_bytes_data()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tx_bytes_data_);
  }

  // .ywrapper.UintValue rx_bytes_data = 175562161 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-bytes-data"];
  if (this->has_rx_bytes_data()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rx_bytes_data_);
  }

  // .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs rx_mcs = 192795234 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs"];
  if (this->has_rx_mcs()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rx_mcs_);
  }

  // .ywrapper.UintValue rx_retries = 227864295 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-retries"];
  if (this->has_rx_retries()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rx_retries_);
  }

  // .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm tx_data_wmm = 312270491 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-wmm"];
  if (this->has_tx_data_wmm()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tx_data_wmm_);
  }

  // .ywrapper.UintValue rx_mgmt = 320558052 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mgmt"];
  if (this->has_rx_mgmt()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rx_mgmt_);
  }

  // .ywrapper.UintValue rx_control = 348207354 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-control"];
  if (this->has_rx_control()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rx_control_);
  }

  // .ywrapper.UintValue rx_retries_data = 416388864 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-retries-data"];
  if (this->has_rx_retries_data()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rx_retries_data_);
  }

  // .ywrapper.UintValue tx_mgmt = 419252762 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mgmt"];
  if (this->has_tx_mgmt()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tx_mgmt_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bssids_Bssid_State_Counters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters)
  GOOGLE_DCHECK_NE(&from, this);
  const Bssids_Bssid_State_Counters* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Bssids_Bssid_State_Counters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters)
    MergeFrom(*source);
  }
}

void Bssids_Bssid_State_Counters::MergeFrom(const Bssids_Bssid_State_Counters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tx_retries_data()) {
    mutable_tx_retries_data()->::ywrapper::UintValue::MergeFrom(from.tx_retries_data());
  }
  if (from.has_rx_retries_subframe()) {
    mutable_rx_retries_subframe()->::ywrapper::UintValue::MergeFrom(from.rx_retries_subframe());
  }
  if (from.has_tx_data_dist()) {
    mutable_tx_data_dist()->::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataDist::MergeFrom(from.tx_data_dist());
  }
  if (from.has_tx_retries_subframe()) {
    mutable_tx_retries_subframe()->::ywrapper::UintValue::MergeFrom(from.tx_retries_subframe());
  }
  if (from.has_tx_retries()) {
    mutable_tx_retries()->::ywrapper::UintValue::MergeFrom(from.tx_retries());
  }
  if (from.has_tx_mcs()) {
    mutable_tx_mcs()->::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxMcs::MergeFrom(from.tx_mcs());
  }
  if (from.has_rx_data_dist()) {
    mutable_rx_data_dist()->::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataDist::MergeFrom(from.rx_data_dist());
  }
  if (from.has_tx_control()) {
    mutable_tx_control()->::ywrapper::UintValue::MergeFrom(from.tx_control());
  }
  if (from.has_rx_data_wmm()) {
    mutable_rx_data_wmm()->::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataWmm::MergeFrom(from.rx_data_wmm());
  }
  if (from.has_tx_bytes_data()) {
    mutable_tx_bytes_data()->::ywrapper::UintValue::MergeFrom(from.tx_bytes_data());
  }
  if (from.has_rx_bytes_data()) {
    mutable_rx_bytes_data()->::ywrapper::UintValue::MergeFrom(from.rx_bytes_data());
  }
  if (from.has_rx_mcs()) {
    mutable_rx_mcs()->::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxMcs::MergeFrom(from.rx_mcs());
  }
  if (from.has_rx_retries()) {
    mutable_rx_retries()->::ywrapper::UintValue::MergeFrom(from.rx_retries());
  }
  if (from.has_tx_data_wmm()) {
    mutable_tx_data_wmm()->::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataWmm::MergeFrom(from.tx_data_wmm());
  }
  if (from.has_rx_mgmt()) {
    mutable_rx_mgmt()->::ywrapper::UintValue::MergeFrom(from.rx_mgmt());
  }
  if (from.has_rx_control()) {
    mutable_rx_control()->::ywrapper::UintValue::MergeFrom(from.rx_control());
  }
  if (from.has_rx_retries_data()) {
    mutable_rx_retries_data()->::ywrapper::UintValue::MergeFrom(from.rx_retries_data());
  }
  if (from.has_tx_mgmt()) {
    mutable_tx_mgmt()->::ywrapper::UintValue::MergeFrom(from.tx_mgmt());
  }
}

void Bssids_Bssid_State_Counters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bssids_Bssid_State_Counters::CopyFrom(const Bssids_Bssid_State_Counters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bssids_Bssid_State_Counters::IsInitialized() const {
  return true;
}

void Bssids_Bssid_State_Counters::Swap(Bssids_Bssid_State_Counters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Bssids_Bssid_State_Counters::InternalSwap(Bssids_Bssid_State_Counters* other) {
  using std::swap;
  swap(tx_retries_data_, other->tx_retries_data_);
  swap(rx_retries_subframe_, other->rx_retries_subframe_);
  swap(tx_data_dist_, other->tx_data_dist_);
  swap(tx_retries_subframe_, other->tx_retries_subframe_);
  swap(tx_retries_, other->tx_retries_);
  swap(tx_mcs_, other->tx_mcs_);
  swap(rx_data_dist_, other->rx_data_dist_);
  swap(tx_control_, other->tx_control_);
  swap(rx_data_wmm_, other->rx_data_wmm_);
  swap(tx_bytes_data_, other->tx_bytes_data_);
  swap(rx_bytes_data_, other->rx_bytes_data_);
  swap(rx_mcs_, other->rx_mcs_);
  swap(rx_retries_, other->rx_retries_);
  swap(tx_data_wmm_, other->tx_data_wmm_);
  swap(rx_mgmt_, other->rx_mgmt_);
  swap(rx_control_, other->rx_control_);
  swap(rx_retries_data_, other->rx_retries_data_);
  swap(tx_mgmt_, other->tx_mgmt_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Bssids_Bssid_State_Counters::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Bssids_Bssid_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_default_instance_._instance.get_mutable()->bssid_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_default_instance_._instance.get_mutable()->counters_ = const_cast< ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters*>(
      ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_default_instance_._instance.get_mutable()->ess_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_default_instance_._instance.get_mutable()->num_associated_clients_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Bssids_Bssid_State::clear_bssid() {
  if (GetArenaNoVirtual() == NULL && bssid_ != NULL) {
    delete bssid_;
  }
  bssid_ = NULL;
}
void Bssids_Bssid_State::clear_ess() {
  if (GetArenaNoVirtual() == NULL && ess_ != NULL) {
    delete ess_;
  }
  ess_ = NULL;
}
void Bssids_Bssid_State::clear_num_associated_clients() {
  if (GetArenaNoVirtual() == NULL && num_associated_clients_ != NULL) {
    delete num_associated_clients_;
  }
  num_associated_clients_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Bssids_Bssid_State::kBssidFieldNumber;
const int Bssids_Bssid_State::kCountersFieldNumber;
const int Bssids_Bssid_State::kEssFieldNumber;
const int Bssids_Bssid_State::kNumAssociatedClientsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Bssids_Bssid_State::Bssids_Bssid_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids_Bssid_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Bssids.Bssid.State)
}
Bssids_Bssid_State::Bssids_Bssid_State(const Bssids_Bssid_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_num_associated_clients()) {
    num_associated_clients_ = new ::ywrapper::UintValue(*from.num_associated_clients_);
  } else {
    num_associated_clients_ = NULL;
  }
  if (from.has_ess()) {
    ess_ = new ::ywrapper::StringValue(*from.ess_);
  } else {
    ess_ = NULL;
  }
  if (from.has_counters()) {
    counters_ = new ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters(*from.counters_);
  } else {
    counters_ = NULL;
  }
  if (from.has_bssid()) {
    bssid_ = new ::ywrapper::StringValue(*from.bssid_);
  } else {
    bssid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Bssids.Bssid.State)
}

void Bssids_Bssid_State::SharedCtor() {
  ::memset(&num_associated_clients_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bssid_) -
      reinterpret_cast<char*>(&num_associated_clients_)) + sizeof(bssid_));
  _cached_size_ = 0;
}

Bssids_Bssid_State::~Bssids_Bssid_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Bssids.Bssid.State)
  SharedDtor();
}

void Bssids_Bssid_State::SharedDtor() {
  if (this != internal_default_instance()) delete num_associated_clients_;
  if (this != internal_default_instance()) delete ess_;
  if (this != internal_default_instance()) delete counters_;
  if (this != internal_default_instance()) delete bssid_;
}

void Bssids_Bssid_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bssids_Bssid_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Bssids_Bssid_State& Bssids_Bssid_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids_Bssid_State();
  return *internal_default_instance();
}

Bssids_Bssid_State* Bssids_Bssid_State::New(::google::protobuf::Arena* arena) const {
  Bssids_Bssid_State* n = new Bssids_Bssid_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Bssids_Bssid_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && num_associated_clients_ != NULL) {
    delete num_associated_clients_;
  }
  num_associated_clients_ = NULL;
  if (GetArenaNoVirtual() == NULL && ess_ != NULL) {
    delete ess_;
  }
  ess_ = NULL;
  if (GetArenaNoVirtual() == NULL && counters_ != NULL) {
    delete counters_;
  }
  counters_ = NULL;
  if (GetArenaNoVirtual() == NULL && bssid_ != NULL) {
    delete bssid_;
  }
  bssid_ = NULL;
  _internal_metadata_.Clear();
}

bool Bssids_Bssid_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4105311722u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue num_associated_clients = 76274334 [(.yext.schemapath) = "/bssids/bssid/state/num-associated-clients"];
      case 76274334: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 610194674 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_num_associated_clients()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue ess = 117830205 [(.yext.schemapath) = "/bssids/bssid/state/ess"];
      case 117830205: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 942641642 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ess()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters counters = 502972933 [(.yext.schemapath) = "/bssids/bssid/state/counters"];
      case 502972933: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 4023783466 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_counters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue bssid = 513163965 [(.yext.schemapath) = "/bssids/bssid/state/bssid"];
      case 513163965: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 4105311722 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bssid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Bssids.Bssid.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Bssids.Bssid.State)
  return false;
#undef DO_
}

void Bssids_Bssid_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue num_associated_clients = 76274334 [(.yext.schemapath) = "/bssids/bssid/state/num-associated-clients"];
  if (this->has_num_associated_clients()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      76274334, *this->num_associated_clients_, output);
  }

  // .ywrapper.StringValue ess = 117830205 [(.yext.schemapath) = "/bssids/bssid/state/ess"];
  if (this->has_ess()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      117830205, *this->ess_, output);
  }

  // .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters counters = 502972933 [(.yext.schemapath) = "/bssids/bssid/state/counters"];
  if (this->has_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      502972933, *this->counters_, output);
  }

  // .ywrapper.StringValue bssid = 513163965 [(.yext.schemapath) = "/bssids/bssid/state/bssid"];
  if (this->has_bssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      513163965, *this->bssid_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Bssids.Bssid.State)
}

::google::protobuf::uint8* Bssids_Bssid_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue num_associated_clients = 76274334 [(.yext.schemapath) = "/bssids/bssid/state/num-associated-clients"];
  if (this->has_num_associated_clients()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        76274334, *this->num_associated_clients_, deterministic, target);
  }

  // .ywrapper.StringValue ess = 117830205 [(.yext.schemapath) = "/bssids/bssid/state/ess"];
  if (this->has_ess()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        117830205, *this->ess_, deterministic, target);
  }

  // .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters counters = 502972933 [(.yext.schemapath) = "/bssids/bssid/state/counters"];
  if (this->has_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        502972933, *this->counters_, deterministic, target);
  }

  // .ywrapper.StringValue bssid = 513163965 [(.yext.schemapath) = "/bssids/bssid/state/bssid"];
  if (this->has_bssid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        513163965, *this->bssid_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Bssids.Bssid.State)
  return target;
}

size_t Bssids_Bssid_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue num_associated_clients = 76274334 [(.yext.schemapath) = "/bssids/bssid/state/num-associated-clients"];
  if (this->has_num_associated_clients()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->num_associated_clients_);
  }

  // .ywrapper.StringValue ess = 117830205 [(.yext.schemapath) = "/bssids/bssid/state/ess"];
  if (this->has_ess()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->ess_);
  }

  // .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters counters = 502972933 [(.yext.schemapath) = "/bssids/bssid/state/counters"];
  if (this->has_counters()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->counters_);
  }

  // .ywrapper.StringValue bssid = 513163965 [(.yext.schemapath) = "/bssids/bssid/state/bssid"];
  if (this->has_bssid()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->bssid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bssids_Bssid_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Bssids_Bssid_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Bssids_Bssid_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Bssids.Bssid.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Bssids.Bssid.State)
    MergeFrom(*source);
  }
}

void Bssids_Bssid_State::MergeFrom(const Bssids_Bssid_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_num_associated_clients()) {
    mutable_num_associated_clients()->::ywrapper::UintValue::MergeFrom(from.num_associated_clients());
  }
  if (from.has_ess()) {
    mutable_ess()->::ywrapper::StringValue::MergeFrom(from.ess());
  }
  if (from.has_counters()) {
    mutable_counters()->::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters::MergeFrom(from.counters());
  }
  if (from.has_bssid()) {
    mutable_bssid()->::ywrapper::StringValue::MergeFrom(from.bssid());
  }
}

void Bssids_Bssid_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bssids_Bssid_State::CopyFrom(const Bssids_Bssid_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Bssids.Bssid.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bssids_Bssid_State::IsInitialized() const {
  return true;
}

void Bssids_Bssid_State::Swap(Bssids_Bssid_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Bssids_Bssid_State::InternalSwap(Bssids_Bssid_State* other) {
  using std::swap;
  swap(num_associated_clients_, other->num_associated_clients_);
  swap(ess_, other->ess_);
  swap(counters_, other->counters_);
  swap(bssid_, other->bssid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Bssids_Bssid_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Bssids_Bssid::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_mac::_Bssids_Bssid_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State*>(
      ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Bssids_Bssid::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Bssids_Bssid::Bssids_Bssid()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids_Bssid();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Bssids.Bssid)
}
Bssids_Bssid::Bssids_Bssid(const Bssids_Bssid& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Bssids.Bssid)
}

void Bssids_Bssid::SharedCtor() {
  state_ = NULL;
  _cached_size_ = 0;
}

Bssids_Bssid::~Bssids_Bssid() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Bssids.Bssid)
  SharedDtor();
}

void Bssids_Bssid::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
}

void Bssids_Bssid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bssids_Bssid::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Bssids_Bssid& Bssids_Bssid::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids_Bssid();
  return *internal_default_instance();
}

Bssids_Bssid* Bssids_Bssid::New(::google::protobuf::Arena* arena) const {
  Bssids_Bssid* n = new Bssids_Bssid;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Bssids_Bssid::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Bssids.Bssid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool Bssids_Bssid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Bssids.Bssid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(85892986u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_wifi_mac.Bssids.Bssid.State state = 10736623 [(.yext.schemapath) = "/bssids/bssid/state"];
      case 10736623: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 85892986 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Bssids.Bssid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Bssids.Bssid)
  return false;
#undef DO_
}

void Bssids_Bssid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Bssids.Bssid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_wifi_mac.Bssids.Bssid.State state = 10736623 [(.yext.schemapath) = "/bssids/bssid/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10736623, *this->state_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Bssids.Bssid)
}

::google::protobuf::uint8* Bssids_Bssid::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Bssids.Bssid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_wifi_mac.Bssids.Bssid.State state = 10736623 [(.yext.schemapath) = "/bssids/bssid/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10736623, *this->state_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Bssids.Bssid)
  return target;
}

size_t Bssids_Bssid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Bssids.Bssid)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_wifi_mac.Bssids.Bssid.State state = 10736623 [(.yext.schemapath) = "/bssids/bssid/state"];
  if (this->has_state()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bssids_Bssid::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Bssids.Bssid)
  GOOGLE_DCHECK_NE(&from, this);
  const Bssids_Bssid* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Bssids_Bssid>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Bssids.Bssid)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Bssids.Bssid)
    MergeFrom(*source);
  }
}

void Bssids_Bssid::MergeFrom(const Bssids_Bssid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Bssids.Bssid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_wifi_mac::Bssids_Bssid_State::MergeFrom(from.state());
  }
}

void Bssids_Bssid::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Bssids.Bssid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bssids_Bssid::CopyFrom(const Bssids_Bssid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Bssids.Bssid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bssids_Bssid::IsInitialized() const {
  return true;
}

void Bssids_Bssid::Swap(Bssids_Bssid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Bssids_Bssid::InternalSwap(Bssids_Bssid* other) {
  using std::swap;
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Bssids_Bssid::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Bssids_BssidKey::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_mac::_Bssids_BssidKey_default_instance_._instance.get_mutable()->bssid_ = const_cast< ::openconfig::openconfig_wifi_mac::Bssids_Bssid*>(
      ::openconfig::openconfig_wifi_mac::Bssids_Bssid::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Bssids_BssidKey::kBssidKeyFieldNumber;
const int Bssids_BssidKey::kBssidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Bssids_BssidKey::Bssids_BssidKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids_BssidKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Bssids.BssidKey)
}
Bssids_BssidKey::Bssids_BssidKey(const Bssids_BssidKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bssid_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bssid_key().size() > 0) {
    bssid_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bssid_key_);
  }
  if (from.has_bssid()) {
    bssid_ = new ::openconfig::openconfig_wifi_mac::Bssids_Bssid(*from.bssid_);
  } else {
    bssid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Bssids.BssidKey)
}

void Bssids_BssidKey::SharedCtor() {
  bssid_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bssid_ = NULL;
  _cached_size_ = 0;
}

Bssids_BssidKey::~Bssids_BssidKey() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Bssids.BssidKey)
  SharedDtor();
}

void Bssids_BssidKey::SharedDtor() {
  bssid_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bssid_;
}

void Bssids_BssidKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bssids_BssidKey::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Bssids_BssidKey& Bssids_BssidKey::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids_BssidKey();
  return *internal_default_instance();
}

Bssids_BssidKey* Bssids_BssidKey::New(::google::protobuf::Arena* arena) const {
  Bssids_BssidKey* n = new Bssids_BssidKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Bssids_BssidKey::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Bssids.BssidKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bssid_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && bssid_ != NULL) {
    delete bssid_;
  }
  bssid_ = NULL;
  _internal_metadata_.Clear();
}

bool Bssids_BssidKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Bssids.BssidKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string bssid_key = 1 [(.yext.schemapath) = "/bssids/bssid/bssid"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bssid_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bssid_key().data(), static_cast<int>(this->bssid_key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "openconfig.openconfig_wifi_mac.Bssids.BssidKey.bssid_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_wifi_mac.Bssids.Bssid bssid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bssid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Bssids.BssidKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Bssids.BssidKey)
  return false;
#undef DO_
}

void Bssids_BssidKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Bssids.BssidKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bssid_key = 1 [(.yext.schemapath) = "/bssids/bssid/bssid"];
  if (this->bssid_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bssid_key().data(), static_cast<int>(this->bssid_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_wifi_mac.Bssids.BssidKey.bssid_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bssid_key(), output);
  }

  // .openconfig.openconfig_wifi_mac.Bssids.Bssid bssid = 2;
  if (this->has_bssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->bssid_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Bssids.BssidKey)
}

::google::protobuf::uint8* Bssids_BssidKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Bssids.BssidKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bssid_key = 1 [(.yext.schemapath) = "/bssids/bssid/bssid"];
  if (this->bssid_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bssid_key().data(), static_cast<int>(this->bssid_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_wifi_mac.Bssids.BssidKey.bssid_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bssid_key(), target);
  }

  // .openconfig.openconfig_wifi_mac.Bssids.Bssid bssid = 2;
  if (this->has_bssid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->bssid_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Bssids.BssidKey)
  return target;
}

size_t Bssids_BssidKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Bssids.BssidKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string bssid_key = 1 [(.yext.schemapath) = "/bssids/bssid/bssid"];
  if (this->bssid_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bssid_key());
  }

  // .openconfig.openconfig_wifi_mac.Bssids.Bssid bssid = 2;
  if (this->has_bssid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->bssid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bssids_BssidKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Bssids.BssidKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Bssids_BssidKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Bssids_BssidKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Bssids.BssidKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Bssids.BssidKey)
    MergeFrom(*source);
  }
}

void Bssids_BssidKey::MergeFrom(const Bssids_BssidKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Bssids.BssidKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bssid_key().size() > 0) {

    bssid_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bssid_key_);
  }
  if (from.has_bssid()) {
    mutable_bssid()->::openconfig::openconfig_wifi_mac::Bssids_Bssid::MergeFrom(from.bssid());
  }
}

void Bssids_BssidKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Bssids.BssidKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bssids_BssidKey::CopyFrom(const Bssids_BssidKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Bssids.BssidKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bssids_BssidKey::IsInitialized() const {
  return true;
}

void Bssids_BssidKey::Swap(Bssids_BssidKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Bssids_BssidKey::InternalSwap(Bssids_BssidKey* other) {
  using std::swap;
  bssid_key_.Swap(&other->bssid_key_);
  swap(bssid_, other->bssid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Bssids_BssidKey::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Bssids::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Bssids::kBssidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Bssids::Bssids()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Bssids)
}
Bssids::Bssids(const Bssids& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      bssid_(from.bssid_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Bssids)
}

void Bssids::SharedCtor() {
  _cached_size_ = 0;
}

Bssids::~Bssids() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Bssids)
  SharedDtor();
}

void Bssids::SharedDtor() {
}

void Bssids::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bssids::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Bssids& Bssids::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids();
  return *internal_default_instance();
}

Bssids* Bssids::New(::google::protobuf::Arena* arena) const {
  Bssids* n = new Bssids;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Bssids::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Bssids)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bssid_.Clear();
  _internal_metadata_.Clear();
}

bool Bssids::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Bssids)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2250169834u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .openconfig.openconfig_wifi_mac.Bssids.BssidKey bssid = 281271229 [(.yext.schemapath) = "/bssids/bssid"];
      case 281271229: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 2250169834 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_bssid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Bssids)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Bssids)
  return false;
#undef DO_
}

void Bssids::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Bssids)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_wifi_mac.Bssids.BssidKey bssid = 281271229 [(.yext.schemapath) = "/bssids/bssid"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bssid_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      281271229, this->bssid(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Bssids)
}

::google::protobuf::uint8* Bssids::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Bssids)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_wifi_mac.Bssids.BssidKey bssid = 281271229 [(.yext.schemapath) = "/bssids/bssid"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bssid_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        281271229, this->bssid(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Bssids)
  return target;
}

size_t Bssids::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Bssids)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .openconfig.openconfig_wifi_mac.Bssids.BssidKey bssid = 281271229 [(.yext.schemapath) = "/bssids/bssid"];
  {
    unsigned int count = static_cast<unsigned int>(this->bssid_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->bssid(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bssids::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Bssids)
  GOOGLE_DCHECK_NE(&from, this);
  const Bssids* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Bssids>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Bssids)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Bssids)
    MergeFrom(*source);
  }
}

void Bssids::MergeFrom(const Bssids& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Bssids)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bssid_.MergeFrom(from.bssid_);
}

void Bssids::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Bssids)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bssids::CopyFrom(const Bssids& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Bssids)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bssids::IsInitialized() const {
  return true;
}

void Bssids::Swap(Bssids* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Bssids::InternalSwap(Bssids* other) {
  using std::swap;
  bssid_.InternalSwap(&other->bssid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Bssids::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ssids_Ssid_BandSteering_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_BandSteering_Config_default_instance_._instance.get_mutable()->band_steering_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_BandSteering_Config_default_instance_._instance.get_mutable()->steering_rssi_ = const_cast< ::ywrapper::IntValue*>(
      ::ywrapper::IntValue::internal_default_instance());
}
void Ssids_Ssid_BandSteering_Config::clear_band_steering() {
  if (GetArenaNoVirtual() == NULL && band_steering_ != NULL) {
    delete band_steering_;
  }
  band_steering_ = NULL;
}
void Ssids_Ssid_BandSteering_Config::clear_steering_rssi() {
  if (GetArenaNoVirtual() == NULL && steering_rssi_ != NULL) {
    delete steering_rssi_;
  }
  steering_rssi_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ssids_Ssid_BandSteering_Config::kBandSteeringFieldNumber;
const int Ssids_Ssid_BandSteering_Config::kSteeringRssiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ssids_Ssid_BandSteering_Config::Ssids_Ssid_BandSteering_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_BandSteering_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.Config)
}
Ssids_Ssid_BandSteering_Config::Ssids_Ssid_BandSteering_Config(const Ssids_Ssid_BandSteering_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_steering_rssi()) {
    steering_rssi_ = new ::ywrapper::IntValue(*from.steering_rssi_);
  } else {
    steering_rssi_ = NULL;
  }
  if (from.has_band_steering()) {
    band_steering_ = new ::ywrapper::BoolValue(*from.band_steering_);
  } else {
    band_steering_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.Config)
}

void Ssids_Ssid_BandSteering_Config::SharedCtor() {
  ::memset(&steering_rssi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&band_steering_) -
      reinterpret_cast<char*>(&steering_rssi_)) + sizeof(band_steering_));
  _cached_size_ = 0;
}

Ssids_Ssid_BandSteering_Config::~Ssids_Ssid_BandSteering_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.Config)
  SharedDtor();
}

void Ssids_Ssid_BandSteering_Config::SharedDtor() {
  if (this != internal_default_instance()) delete steering_rssi_;
  if (this != internal_default_instance()) delete band_steering_;
}

void Ssids_Ssid_BandSteering_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ssids_Ssid_BandSteering_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ssids_Ssid_BandSteering_Config& Ssids_Ssid_BandSteering_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_BandSteering_Config();
  return *internal_default_instance();
}

Ssids_Ssid_BandSteering_Config* Ssids_Ssid_BandSteering_Config::New(::google::protobuf::Arena* arena) const {
  Ssids_Ssid_BandSteering_Config* n = new Ssids_Ssid_BandSteering_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ssids_Ssid_BandSteering_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && steering_rssi_ != NULL) {
    delete steering_rssi_;
  }
  steering_rssi_ = NULL;
  if (GetArenaNoVirtual() == NULL && band_steering_ != NULL) {
    delete band_steering_;
  }
  band_steering_ = NULL;
  _internal_metadata_.Clear();
}

bool Ssids_Ssid_BandSteering_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3920496482u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.IntValue steering_rssi = 103564288 [(.yext.schemapath) = "/ssids/ssid/band-steering/config/steering-rssi"];
      case 103564288: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 828514306 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_steering_rssi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue band_steering = 490062060 [(.yext.schemapath) = "/ssids/ssid/band-steering/config/band-steering"];
      case 490062060: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 3920496482 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_band_steering()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.Config)
  return false;
#undef DO_
}

void Ssids_Ssid_BandSteering_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.IntValue steering_rssi = 103564288 [(.yext.schemapath) = "/ssids/ssid/band-steering/config/steering-rssi"];
  if (this->has_steering_rssi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103564288, *this->steering_rssi_, output);
  }

  // .ywrapper.BoolValue band_steering = 490062060 [(.yext.schemapath) = "/ssids/ssid/band-steering/config/band-steering"];
  if (this->has_band_steering()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      490062060, *this->band_steering_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.Config)
}

::google::protobuf::uint8* Ssids_Ssid_BandSteering_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.IntValue steering_rssi = 103564288 [(.yext.schemapath) = "/ssids/ssid/band-steering/config/steering-rssi"];
  if (this->has_steering_rssi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        103564288, *this->steering_rssi_, deterministic, target);
  }

  // .ywrapper.BoolValue band_steering = 490062060 [(.yext.schemapath) = "/ssids/ssid/band-steering/config/band-steering"];
  if (this->has_band_steering()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        490062060, *this->band_steering_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.Config)
  return target;
}

size_t Ssids_Ssid_BandSteering_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.IntValue steering_rssi = 103564288 [(.yext.schemapath) = "/ssids/ssid/band-steering/config/steering-rssi"];
  if (this->has_steering_rssi()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->steering_rssi_);
  }

  // .ywrapper.BoolValue band_steering = 490062060 [(.yext.schemapath) = "/ssids/ssid/band-steering/config/band-steering"];
  if (this->has_band_steering()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->band_steering_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ssids_Ssid_BandSteering_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Ssids_Ssid_BandSteering_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ssids_Ssid_BandSteering_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.Config)
    MergeFrom(*source);
  }
}

void Ssids_Ssid_BandSteering_Config::MergeFrom(const Ssids_Ssid_BandSteering_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_steering_rssi()) {
    mutable_steering_rssi()->::ywrapper::IntValue::MergeFrom(from.steering_rssi());
  }
  if (from.has_band_steering()) {
    mutable_band_steering()->::ywrapper::BoolValue::MergeFrom(from.band_steering());
  }
}

void Ssids_Ssid_BandSteering_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ssids_Ssid_BandSteering_Config::CopyFrom(const Ssids_Ssid_BandSteering_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ssids_Ssid_BandSteering_Config::IsInitialized() const {
  return true;
}

void Ssids_Ssid_BandSteering_Config::Swap(Ssids_Ssid_BandSteering_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ssids_Ssid_BandSteering_Config::InternalSwap(Ssids_Ssid_BandSteering_Config* other) {
  using std::swap;
  swap(steering_rssi_, other->steering_rssi_);
  swap(band_steering_, other->band_steering_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ssids_Ssid_BandSteering_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ssids_Ssid_BandSteering_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_BandSteering_State_default_instance_._instance.get_mutable()->band_steering_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_BandSteering_State_default_instance_._instance.get_mutable()->steering_rssi_ = const_cast< ::ywrapper::IntValue*>(
      ::ywrapper::IntValue::internal_default_instance());
}
void Ssids_Ssid_BandSteering_State::clear_band_steering() {
  if (GetArenaNoVirtual() == NULL && band_steering_ != NULL) {
    delete band_steering_;
  }
  band_steering_ = NULL;
}
void Ssids_Ssid_BandSteering_State::clear_steering_rssi() {
  if (GetArenaNoVirtual() == NULL && steering_rssi_ != NULL) {
    delete steering_rssi_;
  }
  steering_rssi_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ssids_Ssid_BandSteering_State::kBandSteeringFieldNumber;
const int Ssids_Ssid_BandSteering_State::kSteeringRssiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ssids_Ssid_BandSteering_State::Ssids_Ssid_BandSteering_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_BandSteering_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.State)
}
Ssids_Ssid_BandSteering_State::Ssids_Ssid_BandSteering_State(const Ssids_Ssid_BandSteering_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_band_steering()) {
    band_steering_ = new ::ywrapper::BoolValue(*from.band_steering_);
  } else {
    band_steering_ = NULL;
  }
  if (from.has_steering_rssi()) {
    steering_rssi_ = new ::ywrapper::IntValue(*from.steering_rssi_);
  } else {
    steering_rssi_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.State)
}

void Ssids_Ssid_BandSteering_State::SharedCtor() {
  ::memset(&band_steering_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steering_rssi_) -
      reinterpret_cast<char*>(&band_steering_)) + sizeof(steering_rssi_));
  _cached_size_ = 0;
}

Ssids_Ssid_BandSteering_State::~Ssids_Ssid_BandSteering_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.State)
  SharedDtor();
}

void Ssids_Ssid_BandSteering_State::SharedDtor() {
  if (this != internal_default_instance()) delete band_steering_;
  if (this != internal_default_instance()) delete steering_rssi_;
}

void Ssids_Ssid_BandSteering_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ssids_Ssid_BandSteering_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ssids_Ssid_BandSteering_State& Ssids_Ssid_BandSteering_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_BandSteering_State();
  return *internal_default_instance();
}

Ssids_Ssid_BandSteering_State* Ssids_Ssid_BandSteering_State::New(::google::protobuf::Arena* arena) const {
  Ssids_Ssid_BandSteering_State* n = new Ssids_Ssid_BandSteering_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ssids_Ssid_BandSteering_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && band_steering_ != NULL) {
    delete band_steering_;
  }
  band_steering_ = NULL;
  if (GetArenaNoVirtual() == NULL && steering_rssi_ != NULL) {
    delete steering_rssi_;
  }
  steering_rssi_ = NULL;
  _internal_metadata_.Clear();
}

bool Ssids_Ssid_BandSteering_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4210894922u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.BoolValue band_steering = 380350897 [(.yext.schemapath) = "/ssids/ssid/band-steering/state/band-steering"];
      case 380350897: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 3042807178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_band_steering()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.IntValue steering_rssi = 526361865 [(.yext.schemapath) = "/ssids/ssid/band-steering/state/steering-rssi"];
      case 526361865: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 4210894922 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_steering_rssi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.State)
  return false;
#undef DO_
}

void Ssids_Ssid_BandSteering_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.BoolValue band_steering = 380350897 [(.yext.schemapath) = "/ssids/ssid/band-steering/state/band-steering"];
  if (this->has_band_steering()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      380350897, *this->band_steering_, output);
  }

  // .ywrapper.IntValue steering_rssi = 526361865 [(.yext.schemapath) = "/ssids/ssid/band-steering/state/steering-rssi"];
  if (this->has_steering_rssi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      526361865, *this->steering_rssi_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.State)
}

::google::protobuf::uint8* Ssids_Ssid_BandSteering_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.BoolValue band_steering = 380350897 [(.yext.schemapath) = "/ssids/ssid/band-steering/state/band-steering"];
  if (this->has_band_steering()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        380350897, *this->band_steering_, deterministic, target);
  }

  // .ywrapper.IntValue steering_rssi = 526361865 [(.yext.schemapath) = "/ssids/ssid/band-steering/state/steering-rssi"];
  if (this->has_steering_rssi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        526361865, *this->steering_rssi_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.State)
  return target;
}

size_t Ssids_Ssid_BandSteering_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.BoolValue band_steering = 380350897 [(.yext.schemapath) = "/ssids/ssid/band-steering/state/band-steering"];
  if (this->has_band_steering()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->band_steering_);
  }

  // .ywrapper.IntValue steering_rssi = 526361865 [(.yext.schemapath) = "/ssids/ssid/band-steering/state/steering-rssi"];
  if (this->has_steering_rssi()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->steering_rssi_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ssids_Ssid_BandSteering_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Ssids_Ssid_BandSteering_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ssids_Ssid_BandSteering_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.State)
    MergeFrom(*source);
  }
}

void Ssids_Ssid_BandSteering_State::MergeFrom(const Ssids_Ssid_BandSteering_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_band_steering()) {
    mutable_band_steering()->::ywrapper::BoolValue::MergeFrom(from.band_steering());
  }
  if (from.has_steering_rssi()) {
    mutable_steering_rssi()->::ywrapper::IntValue::MergeFrom(from.steering_rssi());
  }
}

void Ssids_Ssid_BandSteering_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ssids_Ssid_BandSteering_State::CopyFrom(const Ssids_Ssid_BandSteering_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ssids_Ssid_BandSteering_State::IsInitialized() const {
  return true;
}

void Ssids_Ssid_BandSteering_State::Swap(Ssids_Ssid_BandSteering_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ssids_Ssid_BandSteering_State::InternalSwap(Ssids_Ssid_BandSteering_State* other) {
  using std::swap;
  swap(band_steering_, other->band_steering_);
  swap(steering_rssi_, other->steering_rssi_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ssids_Ssid_BandSteering_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ssids_Ssid_BandSteering::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_BandSteering_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_Config*>(
      ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_Config::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_BandSteering_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_State*>(
      ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ssids_Ssid_BandSteering::kConfigFieldNumber;
const int Ssids_Ssid_BandSteering::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ssids_Ssid_BandSteering::Ssids_Ssid_BandSteering()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_BandSteering();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering)
}
Ssids_Ssid_BandSteering::Ssids_Ssid_BandSteering(const Ssids_Ssid_BandSteering& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering)
}

void Ssids_Ssid_BandSteering::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&state_)) + sizeof(config_));
  _cached_size_ = 0;
}

Ssids_Ssid_BandSteering::~Ssids_Ssid_BandSteering() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering)
  SharedDtor();
}

void Ssids_Ssid_BandSteering::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete config_;
}

void Ssids_Ssid_BandSteering::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ssids_Ssid_BandSteering::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ssids_Ssid_BandSteering& Ssids_Ssid_BandSteering::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_BandSteering();
  return *internal_default_instance();
}

Ssids_Ssid_BandSteering* Ssids_Ssid_BandSteering::New(::google::protobuf::Arena* arena) const {
  Ssids_Ssid_BandSteering* n = new Ssids_Ssid_BandSteering;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ssids_Ssid_BandSteering::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  _internal_metadata_.Clear();
}

bool Ssids_Ssid_BandSteering::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2003102386u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.State state = 177174019 [(.yext.schemapath) = "/ssids/ssid/band-steering/state"];
      case 177174019: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 1417392154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.Config config = 250387798 [(.yext.schemapath) = "/ssids/ssid/band-steering/config"];
      case 250387798: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 2003102386 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering)
  return false;
#undef DO_
}

void Ssids_Ssid_BandSteering::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.State state = 177174019 [(.yext.schemapath) = "/ssids/ssid/band-steering/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      177174019, *this->state_, output);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.Config config = 250387798 [(.yext.schemapath) = "/ssids/ssid/band-steering/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      250387798, *this->config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering)
}

::google::protobuf::uint8* Ssids_Ssid_BandSteering::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.State state = 177174019 [(.yext.schemapath) = "/ssids/ssid/band-steering/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        177174019, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.Config config = 250387798 [(.yext.schemapath) = "/ssids/ssid/band-steering/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        250387798, *this->config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering)
  return target;
}

size_t Ssids_Ssid_BandSteering::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.State state = 177174019 [(.yext.schemapath) = "/ssids/ssid/band-steering/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.Config config = 250387798 [(.yext.schemapath) = "/ssids/ssid/band-steering/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ssids_Ssid_BandSteering::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering)
  GOOGLE_DCHECK_NE(&from, this);
  const Ssids_Ssid_BandSteering* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ssids_Ssid_BandSteering>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering)
    MergeFrom(*source);
  }
}

void Ssids_Ssid_BandSteering::MergeFrom(const Ssids_Ssid_BandSteering& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_State::MergeFrom(from.state());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_Config::MergeFrom(from.config());
  }
}

void Ssids_Ssid_BandSteering::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ssids_Ssid_BandSteering::CopyFrom(const Ssids_Ssid_BandSteering& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ssids_Ssid_BandSteering::IsInitialized() const {
  return true;
}

void Ssids_Ssid_BandSteering::Swap(Ssids_Ssid_BandSteering* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ssids_Ssid_BandSteering::InternalSwap(Ssids_Ssid_BandSteering* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(config_, other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ssids_Ssid_BandSteering::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ssids_Ssid_Clients_Client_ClientCapabilities_State::InitAsDefaultInstance() {
}
void Ssids_Ssid_Clients_Client_ClientCapabilities_State::clear_channel_support() {
  channel_support_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ssids_Ssid_Clients_Client_ClientCapabilities_State::kChannelSupportFieldNumber;
const int Ssids_Ssid_Clients_Client_ClientCapabilities_State::kClientCapabilitiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ssids_Ssid_Clients_Client_ClientCapabilities_State::Ssids_Ssid_Clients_Client_ClientCapabilities_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client_ClientCapabilities_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities.State)
}
Ssids_Ssid_Clients_Client_ClientCapabilities_State::Ssids_Ssid_Clients_Client_ClientCapabilities_State(const Ssids_Ssid_Clients_Client_ClientCapabilities_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      channel_support_(from.channel_support_),
      client_capabilities_(from.client_capabilities_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities.State)
}

void Ssids_Ssid_Clients_Client_ClientCapabilities_State::SharedCtor() {
  _cached_size_ = 0;
}

Ssids_Ssid_Clients_Client_ClientCapabilities_State::~Ssids_Ssid_Clients_Client_ClientCapabilities_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities.State)
  SharedDtor();
}

void Ssids_Ssid_Clients_Client_ClientCapabilities_State::SharedDtor() {
}

void Ssids_Ssid_Clients_Client_ClientCapabilities_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ssids_Ssid_Clients_Client_ClientCapabilities_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ssids_Ssid_Clients_Client_ClientCapabilities_State& Ssids_Ssid_Clients_Client_ClientCapabilities_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client_ClientCapabilities_State();
  return *internal_default_instance();
}

Ssids_Ssid_Clients_Client_ClientCapabilities_State* Ssids_Ssid_Clients_Client_ClientCapabilities_State::New(::google::protobuf::Arena* arena) const {
  Ssids_Ssid_Clients_Client_ClientCapabilities_State* n = new Ssids_Ssid_Clients_Client_ClientCapabilities_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ssids_Ssid_Clients_Client_ClientCapabilities_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_support_.Clear();
  client_capabilities_.Clear();
  _internal_metadata_.Clear();
}

bool Ssids_Ssid_Clients_Client_ClientCapabilities_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2242221650u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ywrapper.UintValue channel_support = 241576153 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-capabilities/state/channel-support"];
      case 241576153: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 1932609226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_channel_support()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .openconfig.enums.OpenconfigWifiTypesCLIENTCAPABILITIES client_capabilities = 280277706 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-capabilities/state/client-capabilities"];
      case 280277706: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 2242221650 & 0xFF */)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_client_capabilities(static_cast< ::openconfig::enums::OpenconfigWifiTypesCLIENTCAPABILITIES >(value));
          }
          input->PopLimit(limit);
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 2242221648 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_client_capabilities(static_cast< ::openconfig::enums::OpenconfigWifiTypesCLIENTCAPABILITIES >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities.State)
  return false;
#undef DO_
}

void Ssids_Ssid_Clients_Client_ClientCapabilities_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ywrapper.UintValue channel_support = 241576153 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-capabilities/state/channel-support"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->channel_support_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      241576153, this->channel_support(static_cast<int>(i)), output);
  }

  // repeated .openconfig.enums.OpenconfigWifiTypesCLIENTCAPABILITIES client_capabilities = 280277706 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-capabilities/state/client-capabilities"];
  if (this->client_capabilities_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      280277706,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(
        static_cast< ::google::protobuf::uint32>(_client_capabilities_cached_byte_size_));
  }
  for (int i = 0, n = this->client_capabilities_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->client_capabilities(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities.State)
}

::google::protobuf::uint8* Ssids_Ssid_Clients_Client_ClientCapabilities_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ywrapper.UintValue channel_support = 241576153 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-capabilities/state/channel-support"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->channel_support_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        241576153, this->channel_support(static_cast<int>(i)), deterministic, target);
  }

  // repeated .openconfig.enums.OpenconfigWifiTypesCLIENTCAPABILITIES client_capabilities = 280277706 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-capabilities/state/client-capabilities"];
  if (this->client_capabilities_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      280277706,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      static_cast< ::google::protobuf::uint32>(
            _client_capabilities_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->client_capabilities_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities.State)
  return target;
}

size_t Ssids_Ssid_Clients_Client_ClientCapabilities_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .ywrapper.UintValue channel_support = 241576153 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-capabilities/state/channel-support"];
  {
    unsigned int count = static_cast<unsigned int>(this->channel_support_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->channel_support(static_cast<int>(i)));
    }
  }

  // repeated .openconfig.enums.OpenconfigWifiTypesCLIENTCAPABILITIES client_capabilities = 280277706 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-capabilities/state/client-capabilities"];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->client_capabilities_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->client_capabilities(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _client_capabilities_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ssids_Ssid_Clients_Client_ClientCapabilities_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Ssids_Ssid_Clients_Client_ClientCapabilities_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ssids_Ssid_Clients_Client_ClientCapabilities_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities.State)
    MergeFrom(*source);
  }
}

void Ssids_Ssid_Clients_Client_ClientCapabilities_State::MergeFrom(const Ssids_Ssid_Clients_Client_ClientCapabilities_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channel_support_.MergeFrom(from.channel_support_);
  client_capabilities_.MergeFrom(from.client_capabilities_);
}

void Ssids_Ssid_Clients_Client_ClientCapabilities_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ssids_Ssid_Clients_Client_ClientCapabilities_State::CopyFrom(const Ssids_Ssid_Clients_Client_ClientCapabilities_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ssids_Ssid_Clients_Client_ClientCapabilities_State::IsInitialized() const {
  return true;
}

void Ssids_Ssid_Clients_Client_ClientCapabilities_State::Swap(Ssids_Ssid_Clients_Client_ClientCapabilities_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ssids_Ssid_Clients_Client_ClientCapabilities_State::InternalSwap(Ssids_Ssid_Clients_Client_ClientCapabilities_State* other) {
  using std::swap;
  channel_support_.InternalSwap(&other->channel_support_);
  client_capabilities_.InternalSwap(&other->client_capabilities_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ssids_Ssid_Clients_Client_ClientCapabilities_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ssids_Ssid_Clients_Client_ClientCapabilities::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_ClientCapabilities_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities_State*>(
      ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ssids_Ssid_Clients_Client_ClientCapabilities::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ssids_Ssid_Clients_Client_ClientCapabilities::Ssids_Ssid_Clients_Client_ClientCapabilities()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client_ClientCapabilities();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities)
}
Ssids_Ssid_Clients_Client_ClientCapabilities::Ssids_Ssid_Clients_Client_ClientCapabilities(const Ssids_Ssid_Clients_Client_ClientCapabilities& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities_State(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities)
}

void Ssids_Ssid_Clients_Client_ClientCapabilities::SharedCtor() {
  state_ = NULL;
  _cached_size_ = 0;
}

Ssids_Ssid_Clients_Client_ClientCapabilities::~Ssids_Ssid_Clients_Client_ClientCapabilities() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities)
  SharedDtor();
}

void Ssids_Ssid_Clients_Client_ClientCapabilities::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
}

void Ssids_Ssid_Clients_Client_ClientCapabilities::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ssids_Ssid_Clients_Client_ClientCapabilities::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ssids_Ssid_Clients_Client_ClientCapabilities& Ssids_Ssid_Clients_Client_ClientCapabilities::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client_ClientCapabilities();
  return *internal_default_instance();
}

Ssids_Ssid_Clients_Client_ClientCapabilities* Ssids_Ssid_Clients_Client_ClientCapabilities::New(::google::protobuf::Arena* arena) const {
  Ssids_Ssid_Clients_Client_ClientCapabilities* n = new Ssids_Ssid_Clients_Client_ClientCapabilities;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ssids_Ssid_Clients_Client_ClientCapabilities::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool Ssids_Ssid_Clients_Client_ClientCapabilities::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4018706554u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities.State state = 502338319 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-capabilities/state"];
      case 502338319: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 4018706554 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities)
  return false;
#undef DO_
}

void Ssids_Ssid_Clients_Client_ClientCapabilities::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities.State state = 502338319 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-capabilities/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      502338319, *this->state_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities)
}

::google::protobuf::uint8* Ssids_Ssid_Clients_Client_ClientCapabilities::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities.State state = 502338319 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-capabilities/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        502338319, *this->state_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities)
  return target;
}

size_t Ssids_Ssid_Clients_Client_ClientCapabilities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities.State state = 502338319 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-capabilities/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ssids_Ssid_Clients_Client_ClientCapabilities::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities)
  GOOGLE_DCHECK_NE(&from, this);
  const Ssids_Ssid_Clients_Client_ClientCapabilities* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ssids_Ssid_Clients_Client_ClientCapabilities>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities)
    MergeFrom(*source);
  }
}

void Ssids_Ssid_Clients_Client_ClientCapabilities::MergeFrom(const Ssids_Ssid_Clients_Client_ClientCapabilities& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities_State::MergeFrom(from.state());
  }
}

void Ssids_Ssid_Clients_Client_ClientCapabilities::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ssids_Ssid_Clients_Client_ClientCapabilities::CopyFrom(const Ssids_Ssid_Clients_Client_ClientCapabilities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ssids_Ssid_Clients_Client_ClientCapabilities::IsInitialized() const {
  return true;
}

void Ssids_Ssid_Clients_Client_ClientCapabilities::Swap(Ssids_Ssid_Clients_Client_ClientCapabilities* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ssids_Ssid_Clients_Client_ClientCapabilities::InternalSwap(Ssids_Ssid_Clients_Client_ClientCapabilities* other) {
  using std::swap;
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ssids_Ssid_Clients_Client_ClientCapabilities::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ssids_Ssid_Clients_Client_ClientConnection_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_ClientConnection_State_default_instance_._instance.get_mutable()->connection_time_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_ClientConnection_State_default_instance_._instance.get_mutable()->hostname_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_ClientConnection_State_default_instance_._instance.get_mutable()->ipv4_address_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_ClientConnection_State_default_instance_._instance.get_mutable()->ipv6_address_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_ClientConnection_State_default_instance_._instance.get_mutable()->operating_system_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_ClientConnection_State_default_instance_._instance.get_mutable()->username_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void Ssids_Ssid_Clients_Client_ClientConnection_State::clear_connection_time() {
  if (GetArenaNoVirtual() == NULL && connection_time_ != NULL) {
    delete connection_time_;
  }
  connection_time_ = NULL;
}
void Ssids_Ssid_Clients_Client_ClientConnection_State::clear_hostname() {
  if (GetArenaNoVirtual() == NULL && hostname_ != NULL) {
    delete hostname_;
  }
  hostname_ = NULL;
}
void Ssids_Ssid_Clients_Client_ClientConnection_State::clear_ipv4_address() {
  if (GetArenaNoVirtual() == NULL && ipv4_address_ != NULL) {
    delete ipv4_address_;
  }
  ipv4_address_ = NULL;
}
void Ssids_Ssid_Clients_Client_ClientConnection_State::clear_ipv6_address() {
  if (GetArenaNoVirtual() == NULL && ipv6_address_ != NULL) {
    delete ipv6_address_;
  }
  ipv6_address_ = NULL;
}
void Ssids_Ssid_Clients_Client_ClientConnection_State::clear_operating_system() {
  if (GetArenaNoVirtual() == NULL && operating_system_ != NULL) {
    delete operating_system_;
  }
  operating_system_ = NULL;
}
void Ssids_Ssid_Clients_Client_ClientConnection_State::clear_username() {
  if (GetArenaNoVirtual() == NULL && username_ != NULL) {
    delete username_;
  }
  username_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ssids_Ssid_Clients_Client_ClientConnection_State::kClientStateFieldNumber;
const int Ssids_Ssid_Clients_Client_ClientConnection_State::kConnectionTimeFieldNumber;
const int Ssids_Ssid_Clients_Client_ClientConnection_State::kHostnameFieldNumber;
const int Ssids_Ssid_Clients_Client_ClientConnection_State::kIpv4AddressFieldNumber;
const int Ssids_Ssid_Clients_Client_ClientConnection_State::kIpv6AddressFieldNumber;
const int Ssids_Ssid_Clients_Client_ClientConnection_State::kOperatingSystemFieldNumber;
const int Ssids_Ssid_Clients_Client_ClientConnection_State::kUsernameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ssids_Ssid_Clients_Client_ClientConnection_State::Ssids_Ssid_Clients_Client_ClientConnection_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client_ClientConnection_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State)
}
Ssids_Ssid_Clients_Client_ClientConnection_State::Ssids_Ssid_Clients_Client_ClientConnection_State(const Ssids_Ssid_Clients_Client_ClientConnection_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_username()) {
    username_ = new ::ywrapper::StringValue(*from.username_);
  } else {
    username_ = NULL;
  }
  if (from.has_hostname()) {
    hostname_ = new ::ywrapper::StringValue(*from.hostname_);
  } else {
    hostname_ = NULL;
  }
  if (from.has_ipv6_address()) {
    ipv6_address_ = new ::ywrapper::StringValue(*from.ipv6_address_);
  } else {
    ipv6_address_ = NULL;
  }
  if (from.has_operating_system()) {
    operating_system_ = new ::ywrapper::StringValue(*from.operating_system_);
  } else {
    operating_system_ = NULL;
  }
  if (from.has_ipv4_address()) {
    ipv4_address_ = new ::ywrapper::StringValue(*from.ipv4_address_);
  } else {
    ipv4_address_ = NULL;
  }
  if (from.has_connection_time()) {
    connection_time_ = new ::ywrapper::UintValue(*from.connection_time_);
  } else {
    connection_time_ = NULL;
  }
  client_state_ = from.client_state_;
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State)
}

void Ssids_Ssid_Clients_Client_ClientConnection_State::SharedCtor() {
  ::memset(&username_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_state_) -
      reinterpret_cast<char*>(&username_)) + sizeof(client_state_));
  _cached_size_ = 0;
}

Ssids_Ssid_Clients_Client_ClientConnection_State::~Ssids_Ssid_Clients_Client_ClientConnection_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State)
  SharedDtor();
}

void Ssids_Ssid_Clients_Client_ClientConnection_State::SharedDtor() {
  if (this != internal_default_instance()) delete username_;
  if (this != internal_default_instance()) delete hostname_;
  if (this != internal_default_instance()) delete ipv6_address_;
  if (this != internal_default_instance()) delete operating_system_;
  if (this != internal_default_instance()) delete ipv4_address_;
  if (this != internal_default_instance()) delete connection_time_;
}

void Ssids_Ssid_Clients_Client_ClientConnection_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ssids_Ssid_Clients_Client_ClientConnection_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ssids_Ssid_Clients_Client_ClientConnection_State& Ssids_Ssid_Clients_Client_ClientConnection_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client_ClientConnection_State();
  return *internal_default_instance();
}

Ssids_Ssid_Clients_Client_ClientConnection_State* Ssids_Ssid_Clients_Client_ClientConnection_State::New(::google::protobuf::Arena* arena) const {
  Ssids_Ssid_Clients_Client_ClientConnection_State* n = new Ssids_Ssid_Clients_Client_ClientConnection_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ssids_Ssid_Clients_Client_ClientConnection_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && username_ != NULL) {
    delete username_;
  }
  username_ = NULL;
  if (GetArenaNoVirtual() == NULL && hostname_ != NULL) {
    delete hostname_;
  }
  hostname_ = NULL;
  if (GetArenaNoVirtual() == NULL && ipv6_address_ != NULL) {
    delete ipv6_address_;
  }
  ipv6_address_ = NULL;
  if (GetArenaNoVirtual() == NULL && operating_system_ != NULL) {
    delete operating_system_;
  }
  operating_system_ = NULL;
  if (GetArenaNoVirtual() == NULL && ipv4_address_ != NULL) {
    delete ipv4_address_;
  }
  ipv4_address_ = NULL;
  if (GetArenaNoVirtual() == NULL && connection_time_ != NULL) {
    delete connection_time_;
  }
  connection_time_ = NULL;
  client_state_ = 0;
  _internal_metadata_.Clear();
}

bool Ssids_Ssid_Clients_Client_ClientConnection_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3865865170u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.enums.OpenconfigWifiTypesCLIENTSTATE client_state = 12611625 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/client-state"];
      case 12611625: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 100893000 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_client_state(static_cast< ::openconfig::enums::OpenconfigWifiTypesCLIENTSTATE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue username = 102440552 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/username"];
      case 102440552: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 819524418 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_username()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue hostname = 159385715 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/hostname"];
      case 159385715: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 1275085722 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hostname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue ipv6_address = 168200404 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/ipv6-address"];
      case 168200404: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 1345603234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ipv6_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue operating_system = 204114517 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/operating-system"];
      case 204114517: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 1632916138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_operating_system()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue ipv4_address = 227044086 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/ipv4-address"];
      case 227044086: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 1816352690 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ipv4_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue connection_time = 483233146 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/connection-time"];
      case 483233146: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 3865865170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_connection_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State)
  return false;
#undef DO_
}

void Ssids_Ssid_Clients_Client_ClientConnection_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.enums.OpenconfigWifiTypesCLIENTSTATE client_state = 12611625 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/client-state"];
  if (this->client_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12611625, this->client_state(), output);
  }

  // .ywrapper.StringValue username = 102440552 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/username"];
  if (this->has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102440552, *this->username_, output);
  }

  // .ywrapper.StringValue hostname = 159385715 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/hostname"];
  if (this->has_hostname()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      159385715, *this->hostname_, output);
  }

  // .ywrapper.StringValue ipv6_address = 168200404 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/ipv6-address"];
  if (this->has_ipv6_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      168200404, *this->ipv6_address_, output);
  }

  // .ywrapper.StringValue operating_system = 204114517 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/operating-system"];
  if (this->has_operating_system()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      204114517, *this->operating_system_, output);
  }

  // .ywrapper.StringValue ipv4_address = 227044086 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/ipv4-address"];
  if (this->has_ipv4_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      227044086, *this->ipv4_address_, output);
  }

  // .ywrapper.UintValue connection_time = 483233146 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/connection-time"];
  if (this->has_connection_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      483233146, *this->connection_time_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State)
}

::google::protobuf::uint8* Ssids_Ssid_Clients_Client_ClientConnection_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.enums.OpenconfigWifiTypesCLIENTSTATE client_state = 12611625 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/client-state"];
  if (this->client_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12611625, this->client_state(), target);
  }

  // .ywrapper.StringValue username = 102440552 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/username"];
  if (this->has_username()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        102440552, *this->username_, deterministic, target);
  }

  // .ywrapper.StringValue hostname = 159385715 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/hostname"];
  if (this->has_hostname()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        159385715, *this->hostname_, deterministic, target);
  }

  // .ywrapper.StringValue ipv6_address = 168200404 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/ipv6-address"];
  if (this->has_ipv6_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        168200404, *this->ipv6_address_, deterministic, target);
  }

  // .ywrapper.StringValue operating_system = 204114517 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/operating-system"];
  if (this->has_operating_system()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        204114517, *this->operating_system_, deterministic, target);
  }

  // .ywrapper.StringValue ipv4_address = 227044086 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/ipv4-address"];
  if (this->has_ipv4_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        227044086, *this->ipv4_address_, deterministic, target);
  }

  // .ywrapper.UintValue connection_time = 483233146 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/connection-time"];
  if (this->has_connection_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        483233146, *this->connection_time_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State)
  return target;
}

size_t Ssids_Ssid_Clients_Client_ClientConnection_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue username = 102440552 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/username"];
  if (this->has_username()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->username_);
  }

  // .ywrapper.StringValue hostname = 159385715 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/hostname"];
  if (this->has_hostname()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->hostname_);
  }

  // .ywrapper.StringValue ipv6_address = 168200404 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/ipv6-address"];
  if (this->has_ipv6_address()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->ipv6_address_);
  }

  // .ywrapper.StringValue operating_system = 204114517 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/operating-system"];
  if (this->has_operating_system()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->operating_system_);
  }

  // .ywrapper.StringValue ipv4_address = 227044086 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/ipv4-address"];
  if (this->has_ipv4_address()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->ipv4_address_);
  }

  // .ywrapper.UintValue connection_time = 483233146 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/connection-time"];
  if (this->has_connection_time()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->connection_time_);
  }

  // .openconfig.enums.OpenconfigWifiTypesCLIENTSTATE client_state = 12611625 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/client-state"];
  if (this->client_state() != 0) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->client_state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ssids_Ssid_Clients_Client_ClientConnection_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Ssids_Ssid_Clients_Client_ClientConnection_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ssids_Ssid_Clients_Client_ClientConnection_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State)
    MergeFrom(*source);
  }
}

void Ssids_Ssid_Clients_Client_ClientConnection_State::MergeFrom(const Ssids_Ssid_Clients_Client_ClientConnection_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_username()) {
    mutable_username()->::ywrapper::StringValue::MergeFrom(from.username());
  }
  if (from.has_hostname()) {
    mutable_hostname()->::ywrapper::StringValue::MergeFrom(from.hostname());
  }
  if (from.has_ipv6_address()) {
    mutable_ipv6_address()->::ywrapper::StringValue::MergeFrom(from.ipv6_address());
  }
  if (from.has_operating_system()) {
    mutable_operating_system()->::ywrapper::StringValue::MergeFrom(from.operating_system());
  }
  if (from.has_ipv4_address()) {
    mutable_ipv4_address()->::ywrapper::StringValue::MergeFrom(from.ipv4_address());
  }
  if (from.has_connection_time()) {
    mutable_connection_time()->::ywrapper::UintValue::MergeFrom(from.connection_time());
  }
  if (from.client_state() != 0) {
    set_client_state(from.client_state());
  }
}

void Ssids_Ssid_Clients_Client_ClientConnection_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ssids_Ssid_Clients_Client_ClientConnection_State::CopyFrom(const Ssids_Ssid_Clients_Client_ClientConnection_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ssids_Ssid_Clients_Client_ClientConnection_State::IsInitialized() const {
  return true;
}

void Ssids_Ssid_Clients_Client_ClientConnection_State::Swap(Ssids_Ssid_Clients_Client_ClientConnection_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ssids_Ssid_Clients_Client_ClientConnection_State::InternalSwap(Ssids_Ssid_Clients_Client_ClientConnection_State* other) {
  using std::swap;
  swap(username_, other->username_);
  swap(hostname_, other->hostname_);
  swap(ipv6_address_, other->ipv6_address_);
  swap(operating_system_, other->operating_system_);
  swap(ipv4_address_, other->ipv4_address_);
  swap(connection_time_, other->connection_time_);
  swap(client_state_, other->client_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ssids_Ssid_Clients_Client_ClientConnection_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ssids_Ssid_Clients_Client_ClientConnection::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_ClientConnection_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection_State*>(
      ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ssids_Ssid_Clients_Client_ClientConnection::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ssids_Ssid_Clients_Client_ClientConnection::Ssids_Ssid_Clients_Client_ClientConnection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client_ClientConnection();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection)
}
Ssids_Ssid_Clients_Client_ClientConnection::Ssids_Ssid_Clients_Client_ClientConnection(const Ssids_Ssid_Clients_Client_ClientConnection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection_State(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection)
}

void Ssids_Ssid_Clients_Client_ClientConnection::SharedCtor() {
  state_ = NULL;
  _cached_size_ = 0;
}

Ssids_Ssid_Clients_Client_ClientConnection::~Ssids_Ssid_Clients_Client_ClientConnection() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection)
  SharedDtor();
}

void Ssids_Ssid_Clients_Client_ClientConnection::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
}

void Ssids_Ssid_Clients_Client_ClientConnection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ssids_Ssid_Clients_Client_ClientConnection::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ssids_Ssid_Clients_Client_ClientConnection& Ssids_Ssid_Clients_Client_ClientConnection::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client_ClientConnection();
  return *internal_default_instance();
}

Ssids_Ssid_Clients_Client_ClientConnection* Ssids_Ssid_Clients_Client_ClientConnection::New(::google::protobuf::Arena* arena) const {
  Ssids_Ssid_Clients_Client_ClientConnection* n = new Ssids_Ssid_Clients_Client_ClientConnection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ssids_Ssid_Clients_Client_ClientConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool Ssids_Ssid_Clients_Client_ClientConnection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2429152298u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State state = 303644037 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state"];
      case 303644037: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 2429152298 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection)
  return false;
#undef DO_
}

void Ssids_Ssid_Clients_Client_ClientConnection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State state = 303644037 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      303644037, *this->state_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection)
}

::google::protobuf::uint8* Ssids_Ssid_Clients_Client_ClientConnection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State state = 303644037 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        303644037, *this->state_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection)
  return target;
}

size_t Ssids_Ssid_Clients_Client_ClientConnection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State state = 303644037 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ssids_Ssid_Clients_Client_ClientConnection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection)
  GOOGLE_DCHECK_NE(&from, this);
  const Ssids_Ssid_Clients_Client_ClientConnection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ssids_Ssid_Clients_Client_ClientConnection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection)
    MergeFrom(*source);
  }
}

void Ssids_Ssid_Clients_Client_ClientConnection::MergeFrom(const Ssids_Ssid_Clients_Client_ClientConnection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection_State::MergeFrom(from.state());
  }
}

void Ssids_Ssid_Clients_Client_ClientConnection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ssids_Ssid_Clients_Client_ClientConnection::CopyFrom(const Ssids_Ssid_Clients_Client_ClientConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ssids_Ssid_Clients_Client_ClientConnection::IsInitialized() const {
  return true;
}

void Ssids_Ssid_Clients_Client_ClientConnection::Swap(Ssids_Ssid_Clients_Client_ClientConnection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ssids_Ssid_Clients_Client_ClientConnection::InternalSwap(Ssids_Ssid_Clients_Client_ClientConnection* other) {
  using std::swap;
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ssids_Ssid_Clients_Client_ClientConnection::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ssids_Ssid_Clients_Client_ClientRf_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_ClientRf_State_default_instance_._instance.get_mutable()->frequency_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_ClientRf_State_default_instance_._instance.get_mutable()->phy_rate_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_ClientRf_State_default_instance_._instance.get_mutable()->rssi_ = const_cast< ::ywrapper::IntValue*>(
      ::ywrapper::IntValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_ClientRf_State_default_instance_._instance.get_mutable()->snr_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_ClientRf_State_default_instance_._instance.get_mutable()->ss_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Ssids_Ssid_Clients_Client_ClientRf_State::clear_frequency() {
  if (GetArenaNoVirtual() == NULL && frequency_ != NULL) {
    delete frequency_;
  }
  frequency_ = NULL;
}
void Ssids_Ssid_Clients_Client_ClientRf_State::clear_phy_rate() {
  if (GetArenaNoVirtual() == NULL && phy_rate_ != NULL) {
    delete phy_rate_;
  }
  phy_rate_ = NULL;
}
void Ssids_Ssid_Clients_Client_ClientRf_State::clear_rssi() {
  if (GetArenaNoVirtual() == NULL && rssi_ != NULL) {
    delete rssi_;
  }
  rssi_ = NULL;
}
void Ssids_Ssid_Clients_Client_ClientRf_State::clear_snr() {
  if (GetArenaNoVirtual() == NULL && snr_ != NULL) {
    delete snr_;
  }
  snr_ = NULL;
}
void Ssids_Ssid_Clients_Client_ClientRf_State::clear_ss() {
  if (GetArenaNoVirtual() == NULL && ss_ != NULL) {
    delete ss_;
  }
  ss_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ssids_Ssid_Clients_Client_ClientRf_State::kConnectionModeFieldNumber;
const int Ssids_Ssid_Clients_Client_ClientRf_State::kFrequencyFieldNumber;
const int Ssids_Ssid_Clients_Client_ClientRf_State::kPhyRateFieldNumber;
const int Ssids_Ssid_Clients_Client_ClientRf_State::kRssiFieldNumber;
const int Ssids_Ssid_Clients_Client_ClientRf_State::kSnrFieldNumber;
const int Ssids_Ssid_Clients_Client_ClientRf_State::kSsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ssids_Ssid_Clients_Client_ClientRf_State::Ssids_Ssid_Clients_Client_ClientRf_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client_ClientRf_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State)
}
Ssids_Ssid_Clients_Client_ClientRf_State::Ssids_Ssid_Clients_Client_ClientRf_State(const Ssids_Ssid_Clients_Client_ClientRf_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_rssi()) {
    rssi_ = new ::ywrapper::IntValue(*from.rssi_);
  } else {
    rssi_ = NULL;
  }
  if (from.has_frequency()) {
    frequency_ = new ::ywrapper::UintValue(*from.frequency_);
  } else {
    frequency_ = NULL;
  }
  if (from.has_phy_rate()) {
    phy_rate_ = new ::ywrapper::UintValue(*from.phy_rate_);
  } else {
    phy_rate_ = NULL;
  }
  if (from.has_ss()) {
    ss_ = new ::ywrapper::UintValue(*from.ss_);
  } else {
    ss_ = NULL;
  }
  if (from.has_snr()) {
    snr_ = new ::ywrapper::UintValue(*from.snr_);
  } else {
    snr_ = NULL;
  }
  connection_mode_ = from.connection_mode_;
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State)
}

void Ssids_Ssid_Clients_Client_ClientRf_State::SharedCtor() {
  ::memset(&rssi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connection_mode_) -
      reinterpret_cast<char*>(&rssi_)) + sizeof(connection_mode_));
  _cached_size_ = 0;
}

Ssids_Ssid_Clients_Client_ClientRf_State::~Ssids_Ssid_Clients_Client_ClientRf_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State)
  SharedDtor();
}

void Ssids_Ssid_Clients_Client_ClientRf_State::SharedDtor() {
  if (this != internal_default_instance()) delete rssi_;
  if (this != internal_default_instance()) delete frequency_;
  if (this != internal_default_instance()) delete phy_rate_;
  if (this != internal_default_instance()) delete ss_;
  if (this != internal_default_instance()) delete snr_;
}

void Ssids_Ssid_Clients_Client_ClientRf_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ssids_Ssid_Clients_Client_ClientRf_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ssids_Ssid_Clients_Client_ClientRf_State& Ssids_Ssid_Clients_Client_ClientRf_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client_ClientRf_State();
  return *internal_default_instance();
}

Ssids_Ssid_Clients_Client_ClientRf_State* Ssids_Ssid_Clients_Client_ClientRf_State::New(::google::protobuf::Arena* arena) const {
  Ssids_Ssid_Clients_Client_ClientRf_State* n = new Ssids_Ssid_Clients_Client_ClientRf_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ssids_Ssid_Clients_Client_ClientRf_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && rssi_ != NULL) {
    delete rssi_;
  }
  rssi_ = NULL;
  if (GetArenaNoVirtual() == NULL && frequency_ != NULL) {
    delete frequency_;
  }
  frequency_ = NULL;
  if (GetArenaNoVirtual() == NULL && phy_rate_ != NULL) {
    delete phy_rate_;
  }
  phy_rate_ = NULL;
  if (GetArenaNoVirtual() == NULL && ss_ != NULL) {
    delete ss_;
  }
  ss_ = NULL;
  if (GetArenaNoVirtual() == NULL && snr_ != NULL) {
    delete snr_;
  }
  snr_ = NULL;
  connection_mode_ = 0;
  _internal_metadata_.Clear();
}

bool Ssids_Ssid_Clients_Client_ClientRf_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2753406906u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.IntValue rssi = 82312397 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state/rssi"];
      case 82312397: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 658499178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rssi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue frequency = 89735306 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state/frequency"];
      case 89735306: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 717882450 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_frequency()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue phy_rate = 110227624 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state/phy-rate"];
      case 110227624: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 881820994 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_phy_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State.ConnectionMode connection_mode = 239140312 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state/connection-mode"];
      case 239140312: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 1913122496 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_connection_mode(static_cast< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue ss = 297640090 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state/ss"];
      case 297640090: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 2381120722 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ss()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue snr = 344175863 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state/snr"];
      case 344175863: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 2753406906 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_snr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State)
  return false;
#undef DO_
}

void Ssids_Ssid_Clients_Client_ClientRf_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.IntValue rssi = 82312397 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state/rssi"];
  if (this->has_rssi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      82312397, *this->rssi_, output);
  }

  // .ywrapper.UintValue frequency = 89735306 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state/frequency"];
  if (this->has_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      89735306, *this->frequency_, output);
  }

  // .ywrapper.UintValue phy_rate = 110227624 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state/phy-rate"];
  if (this->has_phy_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      110227624, *this->phy_rate_, output);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State.ConnectionMode connection_mode = 239140312 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state/connection-mode"];
  if (this->connection_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      239140312, this->connection_mode(), output);
  }

  // .ywrapper.UintValue ss = 297640090 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state/ss"];
  if (this->has_ss()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      297640090, *this->ss_, output);
  }

  // .ywrapper.UintValue snr = 344175863 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state/snr"];
  if (this->has_snr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      344175863, *this->snr_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State)
}

::google::protobuf::uint8* Ssids_Ssid_Clients_Client_ClientRf_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.IntValue rssi = 82312397 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state/rssi"];
  if (this->has_rssi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        82312397, *this->rssi_, deterministic, target);
  }

  // .ywrapper.UintValue frequency = 89735306 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state/frequency"];
  if (this->has_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        89735306, *this->frequency_, deterministic, target);
  }

  // .ywrapper.UintValue phy_rate = 110227624 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state/phy-rate"];
  if (this->has_phy_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        110227624, *this->phy_rate_, deterministic, target);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State.ConnectionMode connection_mode = 239140312 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state/connection-mode"];
  if (this->connection_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      239140312, this->connection_mode(), target);
  }

  // .ywrapper.UintValue ss = 297640090 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state/ss"];
  if (this->has_ss()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        297640090, *this->ss_, deterministic, target);
  }

  // .ywrapper.UintValue snr = 344175863 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state/snr"];
  if (this->has_snr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        344175863, *this->snr_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State)
  return target;
}

size_t Ssids_Ssid_Clients_Client_ClientRf_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.IntValue rssi = 82312397 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state/rssi"];
  if (this->has_rssi()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rssi_);
  }

  // .ywrapper.UintValue frequency = 89735306 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state/frequency"];
  if (this->has_frequency()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->frequency_);
  }

  // .ywrapper.UintValue phy_rate = 110227624 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state/phy-rate"];
  if (this->has_phy_rate()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->phy_rate_);
  }

  // .ywrapper.UintValue ss = 297640090 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state/ss"];
  if (this->has_ss()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->ss_);
  }

  // .ywrapper.UintValue snr = 344175863 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state/snr"];
  if (this->has_snr()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->snr_);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State.ConnectionMode connection_mode = 239140312 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state/connection-mode"];
  if (this->connection_mode() != 0) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->connection_mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ssids_Ssid_Clients_Client_ClientRf_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Ssids_Ssid_Clients_Client_ClientRf_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ssids_Ssid_Clients_Client_ClientRf_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State)
    MergeFrom(*source);
  }
}

void Ssids_Ssid_Clients_Client_ClientRf_State::MergeFrom(const Ssids_Ssid_Clients_Client_ClientRf_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rssi()) {
    mutable_rssi()->::ywrapper::IntValue::MergeFrom(from.rssi());
  }
  if (from.has_frequency()) {
    mutable_frequency()->::ywrapper::UintValue::MergeFrom(from.frequency());
  }
  if (from.has_phy_rate()) {
    mutable_phy_rate()->::ywrapper::UintValue::MergeFrom(from.phy_rate());
  }
  if (from.has_ss()) {
    mutable_ss()->::ywrapper::UintValue::MergeFrom(from.ss());
  }
  if (from.has_snr()) {
    mutable_snr()->::ywrapper::UintValue::MergeFrom(from.snr());
  }
  if (from.connection_mode() != 0) {
    set_connection_mode(from.connection_mode());
  }
}

void Ssids_Ssid_Clients_Client_ClientRf_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ssids_Ssid_Clients_Client_ClientRf_State::CopyFrom(const Ssids_Ssid_Clients_Client_ClientRf_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ssids_Ssid_Clients_Client_ClientRf_State::IsInitialized() const {
  return true;
}

void Ssids_Ssid_Clients_Client_ClientRf_State::Swap(Ssids_Ssid_Clients_Client_ClientRf_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ssids_Ssid_Clients_Client_ClientRf_State::InternalSwap(Ssids_Ssid_Clients_Client_ClientRf_State* other) {
  using std::swap;
  swap(rssi_, other->rssi_);
  swap(frequency_, other->frequency_);
  swap(phy_rate_, other->phy_rate_);
  swap(ss_, other->ss_);
  swap(snr_, other->snr_);
  swap(connection_mode_, other->connection_mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ssids_Ssid_Clients_Client_ClientRf_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ssids_Ssid_Clients_Client_ClientRf::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_ClientRf_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf_State*>(
      ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ssids_Ssid_Clients_Client_ClientRf::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ssids_Ssid_Clients_Client_ClientRf::Ssids_Ssid_Clients_Client_ClientRf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client_ClientRf();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf)
}
Ssids_Ssid_Clients_Client_ClientRf::Ssids_Ssid_Clients_Client_ClientRf(const Ssids_Ssid_Clients_Client_ClientRf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf_State(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf)
}

void Ssids_Ssid_Clients_Client_ClientRf::SharedCtor() {
  state_ = NULL;
  _cached_size_ = 0;
}

Ssids_Ssid_Clients_Client_ClientRf::~Ssids_Ssid_Clients_Client_ClientRf() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf)
  SharedDtor();
}

void Ssids_Ssid_Clients_Client_ClientRf::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
}

void Ssids_Ssid_Clients_Client_ClientRf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ssids_Ssid_Clients_Client_ClientRf::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ssids_Ssid_Clients_Client_ClientRf& Ssids_Ssid_Clients_Client_ClientRf::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client_ClientRf();
  return *internal_default_instance();
}

Ssids_Ssid_Clients_Client_ClientRf* Ssids_Ssid_Clients_Client_ClientRf::New(::google::protobuf::Arena* arena) const {
  Ssids_Ssid_Clients_Client_ClientRf* n = new Ssids_Ssid_Clients_Client_ClientRf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ssids_Ssid_Clients_Client_ClientRf::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool Ssids_Ssid_Clients_Client_ClientRf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(825909418u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State state = 103238677 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state"];
      case 103238677: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 825909418 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf)
  return false;
#undef DO_
}

void Ssids_Ssid_Clients_Client_ClientRf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State state = 103238677 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103238677, *this->state_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf)
}

::google::protobuf::uint8* Ssids_Ssid_Clients_Client_ClientRf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State state = 103238677 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        103238677, *this->state_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf)
  return target;
}

size_t Ssids_Ssid_Clients_Client_ClientRf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State state = 103238677 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ssids_Ssid_Clients_Client_ClientRf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf)
  GOOGLE_DCHECK_NE(&from, this);
  const Ssids_Ssid_Clients_Client_ClientRf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ssids_Ssid_Clients_Client_ClientRf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf)
    MergeFrom(*source);
  }
}

void Ssids_Ssid_Clients_Client_ClientRf::MergeFrom(const Ssids_Ssid_Clients_Client_ClientRf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf_State::MergeFrom(from.state());
  }
}

void Ssids_Ssid_Clients_Client_ClientRf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ssids_Ssid_Clients_Client_ClientRf::CopyFrom(const Ssids_Ssid_Clients_Client_ClientRf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ssids_Ssid_Clients_Client_ClientRf::IsInitialized() const {
  return true;
}

void Ssids_Ssid_Clients_Client_ClientRf::Swap(Ssids_Ssid_Clients_Client_ClientRf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ssids_Ssid_Clients_Client_ClientRf::InternalSwap(Ssids_Ssid_Clients_Client_ClientRf* other) {
  using std::swap;
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ssids_Ssid_Clients_Client_ClientRf::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State_default_instance_._instance.get_mutable()->channel_load_report_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State_default_instance_._instance.get_mutable()->neighbor_antenna_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State_default_instance_._instance.get_mutable()->neighbor_bssid_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State_default_instance_._instance.get_mutable()->neighbor_channel_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State_default_instance_._instance.get_mutable()->neighbor_rssi_ = const_cast< ::ywrapper::IntValue*>(
      ::ywrapper::IntValue::internal_default_instance());
}
void Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::clear_channel_load_report() {
  if (GetArenaNoVirtual() == NULL && channel_load_report_ != NULL) {
    delete channel_load_report_;
  }
  channel_load_report_ = NULL;
}
void Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::clear_neighbor_antenna() {
  if (GetArenaNoVirtual() == NULL && neighbor_antenna_ != NULL) {
    delete neighbor_antenna_;
  }
  neighbor_antenna_ = NULL;
}
void Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::clear_neighbor_bssid() {
  if (GetArenaNoVirtual() == NULL && neighbor_bssid_ != NULL) {
    delete neighbor_bssid_;
  }
  neighbor_bssid_ = NULL;
}
void Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::clear_neighbor_channel() {
  if (GetArenaNoVirtual() == NULL && neighbor_channel_ != NULL) {
    delete neighbor_channel_;
  }
  neighbor_channel_ = NULL;
}
void Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::clear_neighbor_rssi() {
  if (GetArenaNoVirtual() == NULL && neighbor_rssi_ != NULL) {
    delete neighbor_rssi_;
  }
  neighbor_rssi_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::kChannelLoadReportFieldNumber;
const int Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::kNeighborAntennaFieldNumber;
const int Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::kNeighborBssidFieldNumber;
const int Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::kNeighborChannelFieldNumber;
const int Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::kNeighborRssiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::Ssids_Ssid_Clients_Client_Dot11KNeighbors_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client_Dot11KNeighbors_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State)
}
Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::Ssids_Ssid_Clients_Client_Dot11KNeighbors_State(const Ssids_Ssid_Clients_Client_Dot11KNeighbors_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_neighbor_rssi()) {
    neighbor_rssi_ = new ::ywrapper::IntValue(*from.neighbor_rssi_);
  } else {
    neighbor_rssi_ = NULL;
  }
  if (from.has_channel_load_report()) {
    channel_load_report_ = new ::ywrapper::UintValue(*from.channel_load_report_);
  } else {
    channel_load_report_ = NULL;
  }
  if (from.has_neighbor_channel()) {
    neighbor_channel_ = new ::ywrapper::UintValue(*from.neighbor_channel_);
  } else {
    neighbor_channel_ = NULL;
  }
  if (from.has_neighbor_bssid()) {
    neighbor_bssid_ = new ::ywrapper::StringValue(*from.neighbor_bssid_);
  } else {
    neighbor_bssid_ = NULL;
  }
  if (from.has_neighbor_antenna()) {
    neighbor_antenna_ = new ::ywrapper::UintValue(*from.neighbor_antenna_);
  } else {
    neighbor_antenna_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State)
}

void Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::SharedCtor() {
  ::memset(&neighbor_rssi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&neighbor_antenna_) -
      reinterpret_cast<char*>(&neighbor_rssi_)) + sizeof(neighbor_antenna_));
  _cached_size_ = 0;
}

Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::~Ssids_Ssid_Clients_Client_Dot11KNeighbors_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State)
  SharedDtor();
}

void Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::SharedDtor() {
  if (this != internal_default_instance()) delete neighbor_rssi_;
  if (this != internal_default_instance()) delete channel_load_report_;
  if (this != internal_default_instance()) delete neighbor_channel_;
  if (this != internal_default_instance()) delete neighbor_bssid_;
  if (this != internal_default_instance()) delete neighbor_antenna_;
}

void Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ssids_Ssid_Clients_Client_Dot11KNeighbors_State& Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client_Dot11KNeighbors_State();
  return *internal_default_instance();
}

Ssids_Ssid_Clients_Client_Dot11KNeighbors_State* Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::New(::google::protobuf::Arena* arena) const {
  Ssids_Ssid_Clients_Client_Dot11KNeighbors_State* n = new Ssids_Ssid_Clients_Client_Dot11KNeighbors_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && neighbor_rssi_ != NULL) {
    delete neighbor_rssi_;
  }
  neighbor_rssi_ = NULL;
  if (GetArenaNoVirtual() == NULL && channel_load_report_ != NULL) {
    delete channel_load_report_;
  }
  channel_load_report_ = NULL;
  if (GetArenaNoVirtual() == NULL && neighbor_channel_ != NULL) {
    delete neighbor_channel_;
  }
  neighbor_channel_ = NULL;
  if (GetArenaNoVirtual() == NULL && neighbor_bssid_ != NULL) {
    delete neighbor_bssid_;
  }
  neighbor_bssid_ = NULL;
  if (GetArenaNoVirtual() == NULL && neighbor_antenna_ != NULL) {
    delete neighbor_antenna_;
  }
  neighbor_antenna_ = NULL;
  _internal_metadata_.Clear();
}

bool Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3927633730u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.IntValue neighbor_rssi = 162709186 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors/state/neighbor-rssi"];
      case 162709186: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 1301673490 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_neighbor_rssi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue channel_load_report = 177485393 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors/state/channel-load-report"];
      case 177485393: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 1419883146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_channel_load_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue neighbor_channel = 333603412 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors/state/neighbor-channel"];
      case 333603412: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 2668827298 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_neighbor_channel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue neighbor_bssid = 362323378 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors/state/neighbor-bssid"];
      case 362323378: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 2898587026 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_neighbor_bssid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue neighbor_antenna = 490954216 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors/state/neighbor-antenna"];
      case 490954216: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 3927633730 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_neighbor_antenna()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State)
  return false;
#undef DO_
}

void Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.IntValue neighbor_rssi = 162709186 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors/state/neighbor-rssi"];
  if (this->has_neighbor_rssi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      162709186, *this->neighbor_rssi_, output);
  }

  // .ywrapper.UintValue channel_load_report = 177485393 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors/state/channel-load-report"];
  if (this->has_channel_load_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      177485393, *this->channel_load_report_, output);
  }

  // .ywrapper.UintValue neighbor_channel = 333603412 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors/state/neighbor-channel"];
  if (this->has_neighbor_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      333603412, *this->neighbor_channel_, output);
  }

  // .ywrapper.StringValue neighbor_bssid = 362323378 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors/state/neighbor-bssid"];
  if (this->has_neighbor_bssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      362323378, *this->neighbor_bssid_, output);
  }

  // .ywrapper.UintValue neighbor_antenna = 490954216 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors/state/neighbor-antenna"];
  if (this->has_neighbor_antenna()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      490954216, *this->neighbor_antenna_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State)
}

::google::protobuf::uint8* Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.IntValue neighbor_rssi = 162709186 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors/state/neighbor-rssi"];
  if (this->has_neighbor_rssi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        162709186, *this->neighbor_rssi_, deterministic, target);
  }

  // .ywrapper.UintValue channel_load_report = 177485393 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors/state/channel-load-report"];
  if (this->has_channel_load_report()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        177485393, *this->channel_load_report_, deterministic, target);
  }

  // .ywrapper.UintValue neighbor_channel = 333603412 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors/state/neighbor-channel"];
  if (this->has_neighbor_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        333603412, *this->neighbor_channel_, deterministic, target);
  }

  // .ywrapper.StringValue neighbor_bssid = 362323378 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors/state/neighbor-bssid"];
  if (this->has_neighbor_bssid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        362323378, *this->neighbor_bssid_, deterministic, target);
  }

  // .ywrapper.UintValue neighbor_antenna = 490954216 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors/state/neighbor-antenna"];
  if (this->has_neighbor_antenna()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        490954216, *this->neighbor_antenna_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State)
  return target;
}

size_t Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.IntValue neighbor_rssi = 162709186 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors/state/neighbor-rssi"];
  if (this->has_neighbor_rssi()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->neighbor_rssi_);
  }

  // .ywrapper.UintValue channel_load_report = 177485393 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors/state/channel-load-report"];
  if (this->has_channel_load_report()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->channel_load_report_);
  }

  // .ywrapper.UintValue neighbor_channel = 333603412 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors/state/neighbor-channel"];
  if (this->has_neighbor_channel()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->neighbor_channel_);
  }

  // .ywrapper.StringValue neighbor_bssid = 362323378 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors/state/neighbor-bssid"];
  if (this->has_neighbor_bssid()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->neighbor_bssid_);
  }

  // .ywrapper.UintValue neighbor_antenna = 490954216 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors/state/neighbor-antenna"];
  if (this->has_neighbor_antenna()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->neighbor_antenna_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Ssids_Ssid_Clients_Client_Dot11KNeighbors_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ssids_Ssid_Clients_Client_Dot11KNeighbors_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State)
    MergeFrom(*source);
  }
}

void Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::MergeFrom(const Ssids_Ssid_Clients_Client_Dot11KNeighbors_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_neighbor_rssi()) {
    mutable_neighbor_rssi()->::ywrapper::IntValue::MergeFrom(from.neighbor_rssi());
  }
  if (from.has_channel_load_report()) {
    mutable_channel_load_report()->::ywrapper::UintValue::MergeFrom(from.channel_load_report());
  }
  if (from.has_neighbor_channel()) {
    mutable_neighbor_channel()->::ywrapper::UintValue::MergeFrom(from.neighbor_channel());
  }
  if (from.has_neighbor_bssid()) {
    mutable_neighbor_bssid()->::ywrapper::StringValue::MergeFrom(from.neighbor_bssid());
  }
  if (from.has_neighbor_antenna()) {
    mutable_neighbor_antenna()->::ywrapper::UintValue::MergeFrom(from.neighbor_antenna());
  }
}

void Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::CopyFrom(const Ssids_Ssid_Clients_Client_Dot11KNeighbors_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::IsInitialized() const {
  return true;
}

void Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::Swap(Ssids_Ssid_Clients_Client_Dot11KNeighbors_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::InternalSwap(Ssids_Ssid_Clients_Client_Dot11KNeighbors_State* other) {
  using std::swap;
  swap(neighbor_rssi_, other->neighbor_rssi_);
  swap(channel_load_report_, other->channel_load_report_);
  swap(neighbor_channel_, other->neighbor_channel_);
  swap(neighbor_bssid_, other->neighbor_bssid_);
  swap(neighbor_antenna_, other->neighbor_antenna_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ssids_Ssid_Clients_Client_Dot11KNeighbors::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_Dot11KNeighbors_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors_State*>(
      ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ssids_Ssid_Clients_Client_Dot11KNeighbors::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ssids_Ssid_Clients_Client_Dot11KNeighbors::Ssids_Ssid_Clients_Client_Dot11KNeighbors()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client_Dot11KNeighbors();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors)
}
Ssids_Ssid_Clients_Client_Dot11KNeighbors::Ssids_Ssid_Clients_Client_Dot11KNeighbors(const Ssids_Ssid_Clients_Client_Dot11KNeighbors& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors_State(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors)
}

void Ssids_Ssid_Clients_Client_Dot11KNeighbors::SharedCtor() {
  state_ = NULL;
  _cached_size_ = 0;
}

Ssids_Ssid_Clients_Client_Dot11KNeighbors::~Ssids_Ssid_Clients_Client_Dot11KNeighbors() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors)
  SharedDtor();
}

void Ssids_Ssid_Clients_Client_Dot11KNeighbors::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
}

void Ssids_Ssid_Clients_Client_Dot11KNeighbors::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ssids_Ssid_Clients_Client_Dot11KNeighbors::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ssids_Ssid_Clients_Client_Dot11KNeighbors& Ssids_Ssid_Clients_Client_Dot11KNeighbors::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client_Dot11KNeighbors();
  return *internal_default_instance();
}

Ssids_Ssid_Clients_Client_Dot11KNeighbors* Ssids_Ssid_Clients_Client_Dot11KNeighbors::New(::google::protobuf::Arena* arena) const {
  Ssids_Ssid_Clients_Client_Dot11KNeighbors* n = new Ssids_Ssid_Clients_Client_Dot11KNeighbors;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ssids_Ssid_Clients_Client_Dot11KNeighbors::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool Ssids_Ssid_Clients_Client_Dot11KNeighbors::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(958786026u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State state = 119848253 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors/state"];
      case 119848253: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 958786026 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors)
  return false;
#undef DO_
}

void Ssids_Ssid_Clients_Client_Dot11KNeighbors::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State state = 119848253 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      119848253, *this->state_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors)
}

::google::protobuf::uint8* Ssids_Ssid_Clients_Client_Dot11KNeighbors::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State state = 119848253 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        119848253, *this->state_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors)
  return target;
}

size_t Ssids_Ssid_Clients_Client_Dot11KNeighbors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State state = 119848253 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ssids_Ssid_Clients_Client_Dot11KNeighbors::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors)
  GOOGLE_DCHECK_NE(&from, this);
  const Ssids_Ssid_Clients_Client_Dot11KNeighbors* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ssids_Ssid_Clients_Client_Dot11KNeighbors>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors)
    MergeFrom(*source);
  }
}

void Ssids_Ssid_Clients_Client_Dot11KNeighbors::MergeFrom(const Ssids_Ssid_Clients_Client_Dot11KNeighbors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::MergeFrom(from.state());
  }
}

void Ssids_Ssid_Clients_Client_Dot11KNeighbors::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ssids_Ssid_Clients_Client_Dot11KNeighbors::CopyFrom(const Ssids_Ssid_Clients_Client_Dot11KNeighbors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ssids_Ssid_Clients_Client_Dot11KNeighbors::IsInitialized() const {
  return true;
}

void Ssids_Ssid_Clients_Client_Dot11KNeighbors::Swap(Ssids_Ssid_Clients_Client_Dot11KNeighbors* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ssids_Ssid_Clients_Client_Dot11KNeighbors::InternalSwap(Ssids_Ssid_Clients_Client_Dot11KNeighbors* other) {
  using std::swap;
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ssids_Ssid_Clients_Client_Dot11KNeighbors::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ssids_Ssid_Clients_Client_State_Counters::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_State_Counters_default_instance_._instance.get_mutable()->rx_bytes_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_State_Counters_default_instance_._instance.get_mutable()->rx_retries_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_State_Counters_default_instance_._instance.get_mutable()->tx_bytes_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_State_Counters_default_instance_._instance.get_mutable()->tx_retries_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Ssids_Ssid_Clients_Client_State_Counters::clear_rx_bytes() {
  if (GetArenaNoVirtual() == NULL && rx_bytes_ != NULL) {
    delete rx_bytes_;
  }
  rx_bytes_ = NULL;
}
void Ssids_Ssid_Clients_Client_State_Counters::clear_rx_retries() {
  if (GetArenaNoVirtual() == NULL && rx_retries_ != NULL) {
    delete rx_retries_;
  }
  rx_retries_ = NULL;
}
void Ssids_Ssid_Clients_Client_State_Counters::clear_tx_bytes() {
  if (GetArenaNoVirtual() == NULL && tx_bytes_ != NULL) {
    delete tx_bytes_;
  }
  tx_bytes_ = NULL;
}
void Ssids_Ssid_Clients_Client_State_Counters::clear_tx_retries() {
  if (GetArenaNoVirtual() == NULL && tx_retries_ != NULL) {
    delete tx_retries_;
  }
  tx_retries_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ssids_Ssid_Clients_Client_State_Counters::kRxBytesFieldNumber;
const int Ssids_Ssid_Clients_Client_State_Counters::kRxRetriesFieldNumber;
const int Ssids_Ssid_Clients_Client_State_Counters::kTxBytesFieldNumber;
const int Ssids_Ssid_Clients_Client_State_Counters::kTxRetriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ssids_Ssid_Clients_Client_State_Counters::Ssids_Ssid_Clients_Client_State_Counters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client_State_Counters();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters)
}
Ssids_Ssid_Clients_Client_State_Counters::Ssids_Ssid_Clients_Client_State_Counters(const Ssids_Ssid_Clients_Client_State_Counters& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tx_bytes()) {
    tx_bytes_ = new ::ywrapper::UintValue(*from.tx_bytes_);
  } else {
    tx_bytes_ = NULL;
  }
  if (from.has_tx_retries()) {
    tx_retries_ = new ::ywrapper::UintValue(*from.tx_retries_);
  } else {
    tx_retries_ = NULL;
  }
  if (from.has_rx_retries()) {
    rx_retries_ = new ::ywrapper::UintValue(*from.rx_retries_);
  } else {
    rx_retries_ = NULL;
  }
  if (from.has_rx_bytes()) {
    rx_bytes_ = new ::ywrapper::UintValue(*from.rx_bytes_);
  } else {
    rx_bytes_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters)
}

void Ssids_Ssid_Clients_Client_State_Counters::SharedCtor() {
  ::memset(&tx_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rx_bytes_) -
      reinterpret_cast<char*>(&tx_bytes_)) + sizeof(rx_bytes_));
  _cached_size_ = 0;
}

Ssids_Ssid_Clients_Client_State_Counters::~Ssids_Ssid_Clients_Client_State_Counters() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters)
  SharedDtor();
}

void Ssids_Ssid_Clients_Client_State_Counters::SharedDtor() {
  if (this != internal_default_instance()) delete tx_bytes_;
  if (this != internal_default_instance()) delete tx_retries_;
  if (this != internal_default_instance()) delete rx_retries_;
  if (this != internal_default_instance()) delete rx_bytes_;
}

void Ssids_Ssid_Clients_Client_State_Counters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ssids_Ssid_Clients_Client_State_Counters::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ssids_Ssid_Clients_Client_State_Counters& Ssids_Ssid_Clients_Client_State_Counters::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client_State_Counters();
  return *internal_default_instance();
}

Ssids_Ssid_Clients_Client_State_Counters* Ssids_Ssid_Clients_Client_State_Counters::New(::google::protobuf::Arena* arena) const {
  Ssids_Ssid_Clients_Client_State_Counters* n = new Ssids_Ssid_Clients_Client_State_Counters;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ssids_Ssid_Clients_Client_State_Counters::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && tx_bytes_ != NULL) {
    delete tx_bytes_;
  }
  tx_bytes_ = NULL;
  if (GetArenaNoVirtual() == NULL && tx_retries_ != NULL) {
    delete tx_retries_;
  }
  tx_retries_ = NULL;
  if (GetArenaNoVirtual() == NULL && rx_retries_ != NULL) {
    delete rx_retries_;
  }
  rx_retries_ = NULL;
  if (GetArenaNoVirtual() == NULL && rx_bytes_ != NULL) {
    delete rx_bytes_;
  }
  rx_bytes_ = NULL;
  _internal_metadata_.Clear();
}

bool Ssids_Ssid_Clients_Client_State_Counters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3966764458u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue tx_bytes = 23313743 [(.yext.schemapath) = "/ssids/ssid/clients/client/state/counters/tx-bytes"];
      case 23313743: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 186509946 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue tx_retries = 98702232 [(.yext.schemapath) = "/ssids/ssid/clients/client/state/counters/tx-retries"];
      case 98702232: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 789617858 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx_retries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue rx_retries = 189738762 [(.yext.schemapath) = "/ssids/ssid/clients/client/state/counters/rx-retries"];
      case 189738762: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 1517910098 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rx_retries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue rx_bytes = 495845557 [(.yext.schemapath) = "/ssids/ssid/clients/client/state/counters/rx-bytes"];
      case 495845557: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 3966764458 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rx_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters)
  return false;
#undef DO_
}

void Ssids_Ssid_Clients_Client_State_Counters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue tx_bytes = 23313743 [(.yext.schemapath) = "/ssids/ssid/clients/client/state/counters/tx-bytes"];
  if (this->has_tx_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23313743, *this->tx_bytes_, output);
  }

  // .ywrapper.UintValue tx_retries = 98702232 [(.yext.schemapath) = "/ssids/ssid/clients/client/state/counters/tx-retries"];
  if (this->has_tx_retries()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      98702232, *this->tx_retries_, output);
  }

  // .ywrapper.UintValue rx_retries = 189738762 [(.yext.schemapath) = "/ssids/ssid/clients/client/state/counters/rx-retries"];
  if (this->has_rx_retries()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      189738762, *this->rx_retries_, output);
  }

  // .ywrapper.UintValue rx_bytes = 495845557 [(.yext.schemapath) = "/ssids/ssid/clients/client/state/counters/rx-bytes"];
  if (this->has_rx_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      495845557, *this->rx_bytes_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters)
}

::google::protobuf::uint8* Ssids_Ssid_Clients_Client_State_Counters::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue tx_bytes = 23313743 [(.yext.schemapath) = "/ssids/ssid/clients/client/state/counters/tx-bytes"];
  if (this->has_tx_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23313743, *this->tx_bytes_, deterministic, target);
  }

  // .ywrapper.UintValue tx_retries = 98702232 [(.yext.schemapath) = "/ssids/ssid/clients/client/state/counters/tx-retries"];
  if (this->has_tx_retries()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        98702232, *this->tx_retries_, deterministic, target);
  }

  // .ywrapper.UintValue rx_retries = 189738762 [(.yext.schemapath) = "/ssids/ssid/clients/client/state/counters/rx-retries"];
  if (this->has_rx_retries()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        189738762, *this->rx_retries_, deterministic, target);
  }

  // .ywrapper.UintValue rx_bytes = 495845557 [(.yext.schemapath) = "/ssids/ssid/clients/client/state/counters/rx-bytes"];
  if (this->has_rx_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        495845557, *this->rx_bytes_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters)
  return target;
}

size_t Ssids_Ssid_Clients_Client_State_Counters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue tx_bytes = 23313743 [(.yext.schemapath) = "/ssids/ssid/clients/client/state/counters/tx-bytes"];
  if (this->has_tx_bytes()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tx_bytes_);
  }

  // .ywrapper.UintValue tx_retries = 98702232 [(.yext.schemapath) = "/ssids/ssid/clients/client/state/counters/tx-retries"];
  if (this->has_tx_retries()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tx_retries_);
  }

  // .ywrapper.UintValue rx_retries = 189738762 [(.yext.schemapath) = "/ssids/ssid/clients/client/state/counters/rx-retries"];
  if (this->has_rx_retries()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rx_retries_);
  }

  // .ywrapper.UintValue rx_bytes = 495845557 [(.yext.schemapath) = "/ssids/ssid/clients/client/state/counters/rx-bytes"];
  if (this->has_rx_bytes()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rx_bytes_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ssids_Ssid_Clients_Client_State_Counters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters)
  GOOGLE_DCHECK_NE(&from, this);
  const Ssids_Ssid_Clients_Client_State_Counters* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ssids_Ssid_Clients_Client_State_Counters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters)
    MergeFrom(*source);
  }
}

void Ssids_Ssid_Clients_Client_State_Counters::MergeFrom(const Ssids_Ssid_Clients_Client_State_Counters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tx_bytes()) {
    mutable_tx_bytes()->::ywrapper::UintValue::MergeFrom(from.tx_bytes());
  }
  if (from.has_tx_retries()) {
    mutable_tx_retries()->::ywrapper::UintValue::MergeFrom(from.tx_retries());
  }
  if (from.has_rx_retries()) {
    mutable_rx_retries()->::ywrapper::UintValue::MergeFrom(from.rx_retries());
  }
  if (from.has_rx_bytes()) {
    mutable_rx_bytes()->::ywrapper::UintValue::MergeFrom(from.rx_bytes());
  }
}

void Ssids_Ssid_Clients_Client_State_Counters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ssids_Ssid_Clients_Client_State_Counters::CopyFrom(const Ssids_Ssid_Clients_Client_State_Counters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ssids_Ssid_Clients_Client_State_Counters::IsInitialized() const {
  return true;
}

void Ssids_Ssid_Clients_Client_State_Counters::Swap(Ssids_Ssid_Clients_Client_State_Counters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ssids_Ssid_Clients_Client_State_Counters::InternalSwap(Ssids_Ssid_Clients_Client_State_Counters* other) {
  using std::swap;
  swap(tx_bytes_, other->tx_bytes_);
  swap(tx_retries_, other->tx_retries_);
  swap(rx_retries_, other->rx_retries_);
  swap(rx_bytes_, other->rx_bytes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ssids_Ssid_Clients_Client_State_Counters::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ssids_Ssid_Clients_Client_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_State_default_instance_._instance.get_mutable()->counters_ = const_cast< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State_Counters*>(
      ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State_Counters::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_State_default_instance_._instance.get_mutable()->mac_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void Ssids_Ssid_Clients_Client_State::clear_mac() {
  if (GetArenaNoVirtual() == NULL && mac_ != NULL) {
    delete mac_;
  }
  mac_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ssids_Ssid_Clients_Client_State::kCountersFieldNumber;
const int Ssids_Ssid_Clients_Client_State::kMacFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ssids_Ssid_Clients_Client_State::Ssids_Ssid_Clients_Client_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State)
}
Ssids_Ssid_Clients_Client_State::Ssids_Ssid_Clients_Client_State(const Ssids_Ssid_Clients_Client_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mac()) {
    mac_ = new ::ywrapper::StringValue(*from.mac_);
  } else {
    mac_ = NULL;
  }
  if (from.has_counters()) {
    counters_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State_Counters(*from.counters_);
  } else {
    counters_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State)
}

void Ssids_Ssid_Clients_Client_State::SharedCtor() {
  ::memset(&mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&counters_) -
      reinterpret_cast<char*>(&mac_)) + sizeof(counters_));
  _cached_size_ = 0;
}

Ssids_Ssid_Clients_Client_State::~Ssids_Ssid_Clients_Client_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State)
  SharedDtor();
}

void Ssids_Ssid_Clients_Client_State::SharedDtor() {
  if (this != internal_default_instance()) delete mac_;
  if (this != internal_default_instance()) delete counters_;
}

void Ssids_Ssid_Clients_Client_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ssids_Ssid_Clients_Client_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ssids_Ssid_Clients_Client_State& Ssids_Ssid_Clients_Client_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client_State();
  return *internal_default_instance();
}

Ssids_Ssid_Clients_Client_State* Ssids_Ssid_Clients_Client_State::New(::google::protobuf::Arena* arena) const {
  Ssids_Ssid_Clients_Client_State* n = new Ssids_Ssid_Clients_Client_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ssids_Ssid_Clients_Client_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && mac_ != NULL) {
    delete mac_;
  }
  mac_ = NULL;
  if (GetArenaNoVirtual() == NULL && counters_ != NULL) {
    delete counters_;
  }
  counters_ = NULL;
  _internal_metadata_.Clear();
}

bool Ssids_Ssid_Clients_Client_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3851203986u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue mac = 199348678 [(.yext.schemapath) = "/ssids/ssid/clients/client/state/mac"];
      case 199348678: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 1594789426 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters counters = 481400498 [(.yext.schemapath) = "/ssids/ssid/clients/client/state/counters"];
      case 481400498: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 3851203986 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_counters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State)
  return false;
#undef DO_
}

void Ssids_Ssid_Clients_Client_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue mac = 199348678 [(.yext.schemapath) = "/ssids/ssid/clients/client/state/mac"];
  if (this->has_mac()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      199348678, *this->mac_, output);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters counters = 481400498 [(.yext.schemapath) = "/ssids/ssid/clients/client/state/counters"];
  if (this->has_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      481400498, *this->counters_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State)
}

::google::protobuf::uint8* Ssids_Ssid_Clients_Client_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue mac = 199348678 [(.yext.schemapath) = "/ssids/ssid/clients/client/state/mac"];
  if (this->has_mac()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        199348678, *this->mac_, deterministic, target);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters counters = 481400498 [(.yext.schemapath) = "/ssids/ssid/clients/client/state/counters"];
  if (this->has_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        481400498, *this->counters_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State)
  return target;
}

size_t Ssids_Ssid_Clients_Client_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.StringValue mac = 199348678 [(.yext.schemapath) = "/ssids/ssid/clients/client/state/mac"];
  if (this->has_mac()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mac_);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters counters = 481400498 [(.yext.schemapath) = "/ssids/ssid/clients/client/state/counters"];
  if (this->has_counters()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->counters_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ssids_Ssid_Clients_Client_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Ssids_Ssid_Clients_Client_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ssids_Ssid_Clients_Client_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State)
    MergeFrom(*source);
  }
}

void Ssids_Ssid_Clients_Client_State::MergeFrom(const Ssids_Ssid_Clients_Client_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mac()) {
    mutable_mac()->::ywrapper::StringValue::MergeFrom(from.mac());
  }
  if (from.has_counters()) {
    mutable_counters()->::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State_Counters::MergeFrom(from.counters());
  }
}

void Ssids_Ssid_Clients_Client_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ssids_Ssid_Clients_Client_State::CopyFrom(const Ssids_Ssid_Clients_Client_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ssids_Ssid_Clients_Client_State::IsInitialized() const {
  return true;
}

void Ssids_Ssid_Clients_Client_State::Swap(Ssids_Ssid_Clients_Client_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ssids_Ssid_Clients_Client_State::InternalSwap(Ssids_Ssid_Clients_Client_State* other) {
  using std::swap;
  swap(mac_, other->mac_);
  swap(counters_, other->counters_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ssids_Ssid_Clients_Client_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ssids_Ssid_Clients_Client::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_default_instance_._instance.get_mutable()->client_capabilities_ = const_cast< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities*>(
      ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_default_instance_._instance.get_mutable()->client_connection_ = const_cast< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection*>(
      ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_default_instance_._instance.get_mutable()->client_rf_ = const_cast< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf*>(
      ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_default_instance_._instance.get_mutable()->dot11k_neighbors_ = const_cast< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors*>(
      ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State*>(
      ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ssids_Ssid_Clients_Client::kClientCapabilitiesFieldNumber;
const int Ssids_Ssid_Clients_Client::kClientConnectionFieldNumber;
const int Ssids_Ssid_Clients_Client::kClientRfFieldNumber;
const int Ssids_Ssid_Clients_Client::kDot11KNeighborsFieldNumber;
const int Ssids_Ssid_Clients_Client::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ssids_Ssid_Clients_Client::Ssids_Ssid_Clients_Client()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client)
}
Ssids_Ssid_Clients_Client::Ssids_Ssid_Clients_Client(const Ssids_Ssid_Clients_Client& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_client_capabilities()) {
    client_capabilities_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities(*from.client_capabilities_);
  } else {
    client_capabilities_ = NULL;
  }
  if (from.has_client_rf()) {
    client_rf_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf(*from.client_rf_);
  } else {
    client_rf_ = NULL;
  }
  if (from.has_dot11k_neighbors()) {
    dot11k_neighbors_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors(*from.dot11k_neighbors_);
  } else {
    dot11k_neighbors_ = NULL;
  }
  if (from.has_client_connection()) {
    client_connection_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection(*from.client_connection_);
  } else {
    client_connection_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client)
}

void Ssids_Ssid_Clients_Client::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_connection_) -
      reinterpret_cast<char*>(&state_)) + sizeof(client_connection_));
  _cached_size_ = 0;
}

Ssids_Ssid_Clients_Client::~Ssids_Ssid_Clients_Client() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client)
  SharedDtor();
}

void Ssids_Ssid_Clients_Client::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete client_capabilities_;
  if (this != internal_default_instance()) delete client_rf_;
  if (this != internal_default_instance()) delete dot11k_neighbors_;
  if (this != internal_default_instance()) delete client_connection_;
}

void Ssids_Ssid_Clients_Client::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ssids_Ssid_Clients_Client::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ssids_Ssid_Clients_Client& Ssids_Ssid_Clients_Client::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client();
  return *internal_default_instance();
}

Ssids_Ssid_Clients_Client* Ssids_Ssid_Clients_Client::New(::google::protobuf::Arena* arena) const {
  Ssids_Ssid_Clients_Client* n = new Ssids_Ssid_Clients_Client;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ssids_Ssid_Clients_Client::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && client_capabilities_ != NULL) {
    delete client_capabilities_;
  }
  client_capabilities_ = NULL;
  if (GetArenaNoVirtual() == NULL && client_rf_ != NULL) {
    delete client_rf_;
  }
  client_rf_ = NULL;
  if (GetArenaNoVirtual() == NULL && dot11k_neighbors_ != NULL) {
    delete dot11k_neighbors_;
  }
  dot11k_neighbors_ = NULL;
  if (GetArenaNoVirtual() == NULL && client_connection_ != NULL) {
    delete client_connection_;
  }
  client_connection_ = NULL;
  _internal_metadata_.Clear();
}

bool Ssids_Ssid_Clients_Client::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4200328922u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State state = 71274334 [(.yext.schemapath) = "/ssids/ssid/clients/client/state"];
      case 71274334: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 570194674 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities client_capabilities = 174011229 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-capabilities"];
      case 174011229: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 1392089834 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_client_capabilities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf client_rf = 340039371 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf"];
      case 340039371: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 2720314970 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_client_rf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors dot11k_neighbors = 485662115 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors"];
      case 485662115: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 3885296922 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dot11k_neighbors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection client_connection = 525041115 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection"];
      case 525041115: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 4200328922 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_client_connection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client)
  return false;
#undef DO_
}

void Ssids_Ssid_Clients_Client::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State state = 71274334 [(.yext.schemapath) = "/ssids/ssid/clients/client/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      71274334, *this->state_, output);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities client_capabilities = 174011229 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-capabilities"];
  if (this->has_client_capabilities()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      174011229, *this->client_capabilities_, output);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf client_rf = 340039371 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf"];
  if (this->has_client_rf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      340039371, *this->client_rf_, output);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors dot11k_neighbors = 485662115 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors"];
  if (this->has_dot11k_neighbors()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      485662115, *this->dot11k_neighbors_, output);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection client_connection = 525041115 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection"];
  if (this->has_client_connection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      525041115, *this->client_connection_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client)
}

::google::protobuf::uint8* Ssids_Ssid_Clients_Client::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State state = 71274334 [(.yext.schemapath) = "/ssids/ssid/clients/client/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        71274334, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities client_capabilities = 174011229 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-capabilities"];
  if (this->has_client_capabilities()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        174011229, *this->client_capabilities_, deterministic, target);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf client_rf = 340039371 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf"];
  if (this->has_client_rf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        340039371, *this->client_rf_, deterministic, target);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors dot11k_neighbors = 485662115 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors"];
  if (this->has_dot11k_neighbors()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        485662115, *this->dot11k_neighbors_, deterministic, target);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection client_connection = 525041115 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection"];
  if (this->has_client_connection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        525041115, *this->client_connection_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client)
  return target;
}

size_t Ssids_Ssid_Clients_Client::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State state = 71274334 [(.yext.schemapath) = "/ssids/ssid/clients/client/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities client_capabilities = 174011229 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-capabilities"];
  if (this->has_client_capabilities()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->client_capabilities_);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf client_rf = 340039371 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf"];
  if (this->has_client_rf()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->client_rf_);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors dot11k_neighbors = 485662115 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors"];
  if (this->has_dot11k_neighbors()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dot11k_neighbors_);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection client_connection = 525041115 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection"];
  if (this->has_client_connection()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->client_connection_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ssids_Ssid_Clients_Client::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client)
  GOOGLE_DCHECK_NE(&from, this);
  const Ssids_Ssid_Clients_Client* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ssids_Ssid_Clients_Client>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client)
    MergeFrom(*source);
  }
}

void Ssids_Ssid_Clients_Client::MergeFrom(const Ssids_Ssid_Clients_Client& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State::MergeFrom(from.state());
  }
  if (from.has_client_capabilities()) {
    mutable_client_capabilities()->::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities::MergeFrom(from.client_capabilities());
  }
  if (from.has_client_rf()) {
    mutable_client_rf()->::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf::MergeFrom(from.client_rf());
  }
  if (from.has_dot11k_neighbors()) {
    mutable_dot11k_neighbors()->::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors::MergeFrom(from.dot11k_neighbors());
  }
  if (from.has_client_connection()) {
    mutable_client_connection()->::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection::MergeFrom(from.client_connection());
  }
}

void Ssids_Ssid_Clients_Client::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ssids_Ssid_Clients_Client::CopyFrom(const Ssids_Ssid_Clients_Client& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ssids_Ssid_Clients_Client::IsInitialized() const {
  return true;
}

void Ssids_Ssid_Clients_Client::Swap(Ssids_Ssid_Clients_Client* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ssids_Ssid_Clients_Client::InternalSwap(Ssids_Ssid_Clients_Client* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(client_capabilities_, other->client_capabilities_);
  swap(client_rf_, other->client_rf_);
  swap(dot11k_neighbors_, other->dot11k_neighbors_);
  swap(client_connection_, other->client_connection_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ssids_Ssid_Clients_Client::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ssids_Ssid_Clients_ClientKey::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_ClientKey_default_instance_._instance.get_mutable()->client_ = const_cast< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client*>(
      ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ssids_Ssid_Clients_ClientKey::kMacFieldNumber;
const int Ssids_Ssid_Clients_ClientKey::kClientFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ssids_Ssid_Clients_ClientKey::Ssids_Ssid_Clients_ClientKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_ClientKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey)
}
Ssids_Ssid_Clients_ClientKey::Ssids_Ssid_Clients_ClientKey(const Ssids_Ssid_Clients_ClientKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mac().size() > 0) {
    mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_);
  }
  if (from.has_client()) {
    client_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client(*from.client_);
  } else {
    client_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey)
}

void Ssids_Ssid_Clients_ClientKey::SharedCtor() {
  mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_ = NULL;
  _cached_size_ = 0;
}

Ssids_Ssid_Clients_ClientKey::~Ssids_Ssid_Clients_ClientKey() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey)
  SharedDtor();
}

void Ssids_Ssid_Clients_ClientKey::SharedDtor() {
  mac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete client_;
}

void Ssids_Ssid_Clients_ClientKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ssids_Ssid_Clients_ClientKey::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ssids_Ssid_Clients_ClientKey& Ssids_Ssid_Clients_ClientKey::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_ClientKey();
  return *internal_default_instance();
}

Ssids_Ssid_Clients_ClientKey* Ssids_Ssid_Clients_ClientKey::New(::google::protobuf::Arena* arena) const {
  Ssids_Ssid_Clients_ClientKey* n = new Ssids_Ssid_Clients_ClientKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ssids_Ssid_Clients_ClientKey::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && client_ != NULL) {
    delete client_;
  }
  client_ = NULL;
  _internal_metadata_.Clear();
}

bool Ssids_Ssid_Clients_ClientKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string mac = 1 [(.yext.schemapath) = "/ssids/ssid/clients/client/mac"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mac().data(), static_cast<int>(this->mac().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey.mac"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client client = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_client()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey)
  return false;
#undef DO_
}

void Ssids_Ssid_Clients_ClientKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string mac = 1 [(.yext.schemapath) = "/ssids/ssid/clients/client/mac"];
  if (this->mac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mac().data(), static_cast<int>(this->mac().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey.mac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mac(), output);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client client = 2;
  if (this->has_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->client_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey)
}

::google::protobuf::uint8* Ssids_Ssid_Clients_ClientKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string mac = 1 [(.yext.schemapath) = "/ssids/ssid/clients/client/mac"];
  if (this->mac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mac().data(), static_cast<int>(this->mac().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey.mac");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mac(), target);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client client = 2;
  if (this->has_client()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->client_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey)
  return target;
}

size_t Ssids_Ssid_Clients_ClientKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string mac = 1 [(.yext.schemapath) = "/ssids/ssid/clients/client/mac"];
  if (this->mac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mac());
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client client = 2;
  if (this->has_client()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->client_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ssids_Ssid_Clients_ClientKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Ssids_Ssid_Clients_ClientKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ssids_Ssid_Clients_ClientKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey)
    MergeFrom(*source);
  }
}

void Ssids_Ssid_Clients_ClientKey::MergeFrom(const Ssids_Ssid_Clients_ClientKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mac().size() > 0) {

    mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_);
  }
  if (from.has_client()) {
    mutable_client()->::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client::MergeFrom(from.client());
  }
}

void Ssids_Ssid_Clients_ClientKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ssids_Ssid_Clients_ClientKey::CopyFrom(const Ssids_Ssid_Clients_ClientKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ssids_Ssid_Clients_ClientKey::IsInitialized() const {
  return true;
}

void Ssids_Ssid_Clients_ClientKey::Swap(Ssids_Ssid_Clients_ClientKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ssids_Ssid_Clients_ClientKey::InternalSwap(Ssids_Ssid_Clients_ClientKey* other) {
  using std::swap;
  mac_.Swap(&other->mac_);
  swap(client_, other->client_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ssids_Ssid_Clients_ClientKey::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ssids_Ssid_Clients::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ssids_Ssid_Clients::kClientFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ssids_Ssid_Clients::Ssids_Ssid_Clients()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients)
}
Ssids_Ssid_Clients::Ssids_Ssid_Clients(const Ssids_Ssid_Clients& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      client_(from.client_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients)
}

void Ssids_Ssid_Clients::SharedCtor() {
  _cached_size_ = 0;
}

Ssids_Ssid_Clients::~Ssids_Ssid_Clients() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients)
  SharedDtor();
}

void Ssids_Ssid_Clients::SharedDtor() {
}

void Ssids_Ssid_Clients::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ssids_Ssid_Clients::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ssids_Ssid_Clients& Ssids_Ssid_Clients::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients();
  return *internal_default_instance();
}

Ssids_Ssid_Clients* Ssids_Ssid_Clients::New(::google::protobuf::Arena* arena) const {
  Ssids_Ssid_Clients* n = new Ssids_Ssid_Clients;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ssids_Ssid_Clients::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_.Clear();
  _internal_metadata_.Clear();
}

bool Ssids_Ssid_Clients::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(1580977954u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey client = 197622244 [(.yext.schemapath) = "/ssids/ssid/clients/client"];
      case 197622244: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 1580977954 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_client()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients)
  return false;
#undef DO_
}

void Ssids_Ssid_Clients::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey client = 197622244 [(.yext.schemapath) = "/ssids/ssid/clients/client"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->client_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      197622244, this->client(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients)
}

::google::protobuf::uint8* Ssids_Ssid_Clients::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey client = 197622244 [(.yext.schemapath) = "/ssids/ssid/clients/client"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->client_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        197622244, this->client(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients)
  return target;
}

size_t Ssids_Ssid_Clients::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey client = 197622244 [(.yext.schemapath) = "/ssids/ssid/clients/client"];
  {
    unsigned int count = static_cast<unsigned int>(this->client_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->client(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ssids_Ssid_Clients::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients)
  GOOGLE_DCHECK_NE(&from, this);
  const Ssids_Ssid_Clients* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ssids_Ssid_Clients>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients)
    MergeFrom(*source);
  }
}

void Ssids_Ssid_Clients::MergeFrom(const Ssids_Ssid_Clients& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  client_.MergeFrom(from.client_);
}

void Ssids_Ssid_Clients::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ssids_Ssid_Clients::CopyFrom(const Ssids_Ssid_Clients& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ssids_Ssid_Clients::IsInitialized() const {
  return true;
}

void Ssids_Ssid_Clients::Swap(Ssids_Ssid_Clients* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ssids_Ssid_Clients::InternalSwap(Ssids_Ssid_Clients* other) {
  using std::swap;
  client_.InternalSwap(&other->client_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ssids_Ssid_Clients::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ssids_Ssid_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Config_default_instance_._instance.get_mutable()->advertise_apname_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Config_default_instance_._instance.get_mutable()->broadcast_filter_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Config_default_instance_._instance.get_mutable()->csa_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Config_default_instance_._instance.get_mutable()->dhcp_required_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Config_default_instance_._instance.get_mutable()->dot11k_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Config_default_instance_._instance.get_mutable()->dva_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Config_default_instance_._instance.get_mutable()->enabled_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Config_default_instance_._instance.get_mutable()->gtk_timeout_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Config_default_instance_._instance.get_mutable()->hidden_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Config_default_instance_._instance.get_mutable()->ipv6_ndp_filter_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Config_default_instance_._instance.get_mutable()->ipv6_ndp_filter_timer_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Config_default_instance_._instance.get_mutable()->mobility_domain_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Config_default_instance_._instance.get_mutable()->multicast_filter_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Config_default_instance_._instance.get_mutable()->name_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Config_default_instance_._instance.get_mutable()->okc_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Config_default_instance_._instance.get_mutable()->ptk_timeout_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Config_default_instance_._instance.get_mutable()->qbss_load_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Config_default_instance_._instance.get_mutable()->server_group_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Config_default_instance_._instance.get_mutable()->station_isolation_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Config_default_instance_._instance.get_mutable()->vlan_id_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Config_default_instance_._instance.get_mutable()->wpa2_psk_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void Ssids_Ssid_Config::clear_advertise_apname() {
  if (GetArenaNoVirtual() == NULL && advertise_apname_ != NULL) {
    delete advertise_apname_;
  }
  advertise_apname_ = NULL;
}
void Ssids_Ssid_Config::clear_broadcast_filter() {
  if (GetArenaNoVirtual() == NULL && broadcast_filter_ != NULL) {
    delete broadcast_filter_;
  }
  broadcast_filter_ = NULL;
}
void Ssids_Ssid_Config::clear_csa() {
  if (GetArenaNoVirtual() == NULL && csa_ != NULL) {
    delete csa_;
  }
  csa_ = NULL;
}
void Ssids_Ssid_Config::clear_dhcp_required() {
  if (GetArenaNoVirtual() == NULL && dhcp_required_ != NULL) {
    delete dhcp_required_;
  }
  dhcp_required_ = NULL;
}
void Ssids_Ssid_Config::clear_dot11k() {
  if (GetArenaNoVirtual() == NULL && dot11k_ != NULL) {
    delete dot11k_;
  }
  dot11k_ = NULL;
}
void Ssids_Ssid_Config::clear_dva() {
  if (GetArenaNoVirtual() == NULL && dva_ != NULL) {
    delete dva_;
  }
  dva_ = NULL;
}
void Ssids_Ssid_Config::clear_enabled() {
  if (GetArenaNoVirtual() == NULL && enabled_ != NULL) {
    delete enabled_;
  }
  enabled_ = NULL;
}
void Ssids_Ssid_Config::clear_gtk_timeout() {
  if (GetArenaNoVirtual() == NULL && gtk_timeout_ != NULL) {
    delete gtk_timeout_;
  }
  gtk_timeout_ = NULL;
}
void Ssids_Ssid_Config::clear_hidden() {
  if (GetArenaNoVirtual() == NULL && hidden_ != NULL) {
    delete hidden_;
  }
  hidden_ = NULL;
}
void Ssids_Ssid_Config::clear_ipv6_ndp_filter() {
  if (GetArenaNoVirtual() == NULL && ipv6_ndp_filter_ != NULL) {
    delete ipv6_ndp_filter_;
  }
  ipv6_ndp_filter_ = NULL;
}
void Ssids_Ssid_Config::clear_ipv6_ndp_filter_timer() {
  if (GetArenaNoVirtual() == NULL && ipv6_ndp_filter_timer_ != NULL) {
    delete ipv6_ndp_filter_timer_;
  }
  ipv6_ndp_filter_timer_ = NULL;
}
void Ssids_Ssid_Config::clear_mobility_domain() {
  if (GetArenaNoVirtual() == NULL && mobility_domain_ != NULL) {
    delete mobility_domain_;
  }
  mobility_domain_ = NULL;
}
void Ssids_Ssid_Config::clear_multicast_filter() {
  if (GetArenaNoVirtual() == NULL && multicast_filter_ != NULL) {
    delete multicast_filter_;
  }
  multicast_filter_ = NULL;
}
void Ssids_Ssid_Config::clear_name() {
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
}
void Ssids_Ssid_Config::clear_okc() {
  if (GetArenaNoVirtual() == NULL && okc_ != NULL) {
    delete okc_;
  }
  okc_ = NULL;
}
void Ssids_Ssid_Config::clear_ptk_timeout() {
  if (GetArenaNoVirtual() == NULL && ptk_timeout_ != NULL) {
    delete ptk_timeout_;
  }
  ptk_timeout_ = NULL;
}
void Ssids_Ssid_Config::clear_qbss_load() {
  if (GetArenaNoVirtual() == NULL && qbss_load_ != NULL) {
    delete qbss_load_;
  }
  qbss_load_ = NULL;
}
void Ssids_Ssid_Config::clear_server_group() {
  if (GetArenaNoVirtual() == NULL && server_group_ != NULL) {
    delete server_group_;
  }
  server_group_ = NULL;
}
void Ssids_Ssid_Config::clear_station_isolation() {
  if (GetArenaNoVirtual() == NULL && station_isolation_ != NULL) {
    delete station_isolation_;
  }
  station_isolation_ = NULL;
}
void Ssids_Ssid_Config::clear_vlan_id() {
  if (GetArenaNoVirtual() == NULL && vlan_id_ != NULL) {
    delete vlan_id_;
  }
  vlan_id_ = NULL;
}
void Ssids_Ssid_Config::clear_wpa2_psk() {
  if (GetArenaNoVirtual() == NULL && wpa2_psk_ != NULL) {
    delete wpa2_psk_;
  }
  wpa2_psk_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ssids_Ssid_Config::kAdvertiseApnameFieldNumber;
const int Ssids_Ssid_Config::kBasicDataRatesFieldNumber;
const int Ssids_Ssid_Config::kBroadcastFilterFieldNumber;
const int Ssids_Ssid_Config::kCsaFieldNumber;
const int Ssids_Ssid_Config::kDhcpRequiredFieldNumber;
const int Ssids_Ssid_Config::kDot11KFieldNumber;
const int Ssids_Ssid_Config::kDvaFieldNumber;
const int Ssids_Ssid_Config::kEnabledFieldNumber;
const int Ssids_Ssid_Config::kGtkTimeoutFieldNumber;
const int Ssids_Ssid_Config::kHiddenFieldNumber;
const int Ssids_Ssid_Config::kIpv6NdpFilterFieldNumber;
const int Ssids_Ssid_Config::kIpv6NdpFilterTimerFieldNumber;
const int Ssids_Ssid_Config::kMobilityDomainFieldNumber;
const int Ssids_Ssid_Config::kMulticastFilterFieldNumber;
const int Ssids_Ssid_Config::kNameFieldNumber;
const int Ssids_Ssid_Config::kOkcFieldNumber;
const int Ssids_Ssid_Config::kOperatingFrequencyFieldNumber;
const int Ssids_Ssid_Config::kOpmodeFieldNumber;
const int Ssids_Ssid_Config::kPtkTimeoutFieldNumber;
const int Ssids_Ssid_Config::kQbssLoadFieldNumber;
const int Ssids_Ssid_Config::kServerGroupFieldNumber;
const int Ssids_Ssid_Config::kStationIsolationFieldNumber;
const int Ssids_Ssid_Config::kSupportedDataRatesFieldNumber;
const int Ssids_Ssid_Config::kVlanIdFieldNumber;
const int Ssids_Ssid_Config::kWpa2PskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ssids_Ssid_Config::Ssids_Ssid_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config)
}
Ssids_Ssid_Config::Ssids_Ssid_Config(const Ssids_Ssid_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      basic_data_rates_(from.basic_data_rates_),
      supported_data_rates_(from.supported_data_rates_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_name()) {
    name_ = new ::ywrapper::StringValue(*from.name_);
  } else {
    name_ = NULL;
  }
  if (from.has_enabled()) {
    enabled_ = new ::ywrapper::BoolValue(*from.enabled_);
  } else {
    enabled_ = NULL;
  }
  if (from.has_station_isolation()) {
    station_isolation_ = new ::ywrapper::BoolValue(*from.station_isolation_);
  } else {
    station_isolation_ = NULL;
  }
  if (from.has_mobility_domain()) {
    mobility_domain_ = new ::ywrapper::StringValue(*from.mobility_domain_);
  } else {
    mobility_domain_ = NULL;
  }
  if (from.has_qbss_load()) {
    qbss_load_ = new ::ywrapper::BoolValue(*from.qbss_load_);
  } else {
    qbss_load_ = NULL;
  }
  if (from.has_wpa2_psk()) {
    wpa2_psk_ = new ::ywrapper::StringValue(*from.wpa2_psk_);
  } else {
    wpa2_psk_ = NULL;
  }
  if (from.has_advertise_apname()) {
    advertise_apname_ = new ::ywrapper::BoolValue(*from.advertise_apname_);
  } else {
    advertise_apname_ = NULL;
  }
  if (from.has_okc()) {
    okc_ = new ::ywrapper::BoolValue(*from.okc_);
  } else {
    okc_ = NULL;
  }
  if (from.has_csa()) {
    csa_ = new ::ywrapper::BoolValue(*from.csa_);
  } else {
    csa_ = NULL;
  }
  if (from.has_vlan_id()) {
    vlan_id_ = new ::ywrapper::UintValue(*from.vlan_id_);
  } else {
    vlan_id_ = NULL;
  }
  if (from.has_broadcast_filter()) {
    broadcast_filter_ = new ::ywrapper::BoolValue(*from.broadcast_filter_);
  } else {
    broadcast_filter_ = NULL;
  }
  if (from.has_ipv6_ndp_filter()) {
    ipv6_ndp_filter_ = new ::ywrapper::BoolValue(*from.ipv6_ndp_filter_);
  } else {
    ipv6_ndp_filter_ = NULL;
  }
  if (from.has_dhcp_required()) {
    dhcp_required_ = new ::ywrapper::BoolValue(*from.dhcp_required_);
  } else {
    dhcp_required_ = NULL;
  }
  if (from.has_server_group()) {
    server_group_ = new ::ywrapper::StringValue(*from.server_group_);
  } else {
    server_group_ = NULL;
  }
  if (from.has_hidden()) {
    hidden_ = new ::ywrapper::BoolValue(*from.hidden_);
  } else {
    hidden_ = NULL;
  }
  if (from.has_ipv6_ndp_filter_timer()) {
    ipv6_ndp_filter_timer_ = new ::ywrapper::UintValue(*from.ipv6_ndp_filter_timer_);
  } else {
    ipv6_ndp_filter_timer_ = NULL;
  }
  if (from.has_ptk_timeout()) {
    ptk_timeout_ = new ::ywrapper::UintValue(*from.ptk_timeout_);
  } else {
    ptk_timeout_ = NULL;
  }
  if (from.has_gtk_timeout()) {
    gtk_timeout_ = new ::ywrapper::UintValue(*from.gtk_timeout_);
  } else {
    gtk_timeout_ = NULL;
  }
  if (from.has_dva()) {
    dva_ = new ::ywrapper::BoolValue(*from.dva_);
  } else {
    dva_ = NULL;
  }
  if (from.has_dot11k()) {
    dot11k_ = new ::ywrapper::BoolValue(*from.dot11k_);
  } else {
    dot11k_ = NULL;
  }
  if (from.has_multicast_filter()) {
    multicast_filter_ = new ::ywrapper::BoolValue(*from.multicast_filter_);
  } else {
    multicast_filter_ = NULL;
  }
  ::memcpy(&opmode_, &from.opmode_,
    static_cast<size_t>(reinterpret_cast<char*>(&operating_frequency_) -
    reinterpret_cast<char*>(&opmode_)) + sizeof(operating_frequency_));
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config)
}

void Ssids_Ssid_Config::SharedCtor() {
  ::memset(&name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operating_frequency_) -
      reinterpret_cast<char*>(&name_)) + sizeof(operating_frequency_));
  _cached_size_ = 0;
}

Ssids_Ssid_Config::~Ssids_Ssid_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config)
  SharedDtor();
}

void Ssids_Ssid_Config::SharedDtor() {
  if (this != internal_default_instance()) delete name_;
  if (this != internal_default_instance()) delete enabled_;
  if (this != internal_default_instance()) delete station_isolation_;
  if (this != internal_default_instance()) delete mobility_domain_;
  if (this != internal_default_instance()) delete qbss_load_;
  if (this != internal_default_instance()) delete wpa2_psk_;
  if (this != internal_default_instance()) delete advertise_apname_;
  if (this != internal_default_instance()) delete okc_;
  if (this != internal_default_instance()) delete csa_;
  if (this != internal_default_instance()) delete vlan_id_;
  if (this != internal_default_instance()) delete broadcast_filter_;
  if (this != internal_default_instance()) delete ipv6_ndp_filter_;
  if (this != internal_default_instance()) delete dhcp_required_;
  if (this != internal_default_instance()) delete server_group_;
  if (this != internal_default_instance()) delete hidden_;
  if (this != internal_default_instance()) delete ipv6_ndp_filter_timer_;
  if (this != internal_default_instance()) delete ptk_timeout_;
  if (this != internal_default_instance()) delete gtk_timeout_;
  if (this != internal_default_instance()) delete dva_;
  if (this != internal_default_instance()) delete dot11k_;
  if (this != internal_default_instance()) delete multicast_filter_;
}

void Ssids_Ssid_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ssids_Ssid_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ssids_Ssid_Config& Ssids_Ssid_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Config();
  return *internal_default_instance();
}

Ssids_Ssid_Config* Ssids_Ssid_Config::New(::google::protobuf::Arena* arena) const {
  Ssids_Ssid_Config* n = new Ssids_Ssid_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ssids_Ssid_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  basic_data_rates_.Clear();
  supported_data_rates_.Clear();
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
  if (GetArenaNoVirtual() == NULL && enabled_ != NULL) {
    delete enabled_;
  }
  enabled_ = NULL;
  if (GetArenaNoVirtual() == NULL && station_isolation_ != NULL) {
    delete station_isolation_;
  }
  station_isolation_ = NULL;
  if (GetArenaNoVirtual() == NULL && mobility_domain_ != NULL) {
    delete mobility_domain_;
  }
  mobility_domain_ = NULL;
  if (GetArenaNoVirtual() == NULL && qbss_load_ != NULL) {
    delete qbss_load_;
  }
  qbss_load_ = NULL;
  if (GetArenaNoVirtual() == NULL && wpa2_psk_ != NULL) {
    delete wpa2_psk_;
  }
  wpa2_psk_ = NULL;
  if (GetArenaNoVirtual() == NULL && advertise_apname_ != NULL) {
    delete advertise_apname_;
  }
  advertise_apname_ = NULL;
  if (GetArenaNoVirtual() == NULL && okc_ != NULL) {
    delete okc_;
  }
  okc_ = NULL;
  if (GetArenaNoVirtual() == NULL && csa_ != NULL) {
    delete csa_;
  }
  csa_ = NULL;
  if (GetArenaNoVirtual() == NULL && vlan_id_ != NULL) {
    delete vlan_id_;
  }
  vlan_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && broadcast_filter_ != NULL) {
    delete broadcast_filter_;
  }
  broadcast_filter_ = NULL;
  if (GetArenaNoVirtual() == NULL && ipv6_ndp_filter_ != NULL) {
    delete ipv6_ndp_filter_;
  }
  ipv6_ndp_filter_ = NULL;
  if (GetArenaNoVirtual() == NULL && dhcp_required_ != NULL) {
    delete dhcp_required_;
  }
  dhcp_required_ = NULL;
  if (GetArenaNoVirtual() == NULL && server_group_ != NULL) {
    delete server_group_;
  }
  server_group_ = NULL;
  if (GetArenaNoVirtual() == NULL && hidden_ != NULL) {
    delete hidden_;
  }
  hidden_ = NULL;
  if (GetArenaNoVirtual() == NULL && ipv6_ndp_filter_timer_ != NULL) {
    delete ipv6_ndp_filter_timer_;
  }
  ipv6_ndp_filter_timer_ = NULL;
  if (GetArenaNoVirtual() == NULL && ptk_timeout_ != NULL) {
    delete ptk_timeout_;
  }
  ptk_timeout_ = NULL;
  if (GetArenaNoVirtual() == NULL && gtk_timeout_ != NULL) {
    delete gtk_timeout_;
  }
  gtk_timeout_ = NULL;
  if (GetArenaNoVirtual() == NULL && dva_ != NULL) {
    delete dva_;
  }
  dva_ = NULL;
  if (GetArenaNoVirtual() == NULL && dot11k_ != NULL) {
    delete dot11k_;
  }
  dot11k_ = NULL;
  if (GetArenaNoVirtual() == NULL && multicast_filter_ != NULL) {
    delete multicast_filter_;
  }
  multicast_filter_ = NULL;
  ::memset(&opmode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operating_frequency_) -
      reinterpret_cast<char*>(&opmode_)) + sizeof(operating_frequency_));
  _internal_metadata_.Clear();
}

bool Ssids_Ssid_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3855647304u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.StringValue name = 16502406 [(.yext.schemapath) = "/ssids/ssid/config/name"];
      case 16502406: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 132019250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue enabled = 55874470 [(.yext.schemapath) = "/ssids/ssid/config/enabled"];
      case 55874470: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 446995762 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue station_isolation = 87616742 [(.yext.schemapath) = "/ssids/ssid/config/station-isolation"];
      case 87616742: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 700933938 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_station_isolation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .openconfig.enums.OpenconfigWifiTypesDATARATE basic_data_rates = 96025474 [(.yext.schemapath) = "/ssids/ssid/config/basic-data-rates"];
      case 96025474: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 768203794 & 0xFF */)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_basic_data_rates(static_cast< ::openconfig::enums::OpenconfigWifiTypesDATARATE >(value));
          }
          input->PopLimit(limit);
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 768203792 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_basic_data_rates(static_cast< ::openconfig::enums::OpenconfigWifiTypesDATARATE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .openconfig.enums.OpenconfigWifiTypesDATARATE supported_data_rates = 128647718 [(.yext.schemapath) = "/ssids/ssid/config/supported-data-rates"];
      case 128647718: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 1029181746 & 0xFF */)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_supported_data_rates(static_cast< ::openconfig::enums::OpenconfigWifiTypesDATARATE >(value));
          }
          input->PopLimit(limit);
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 1029181744 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_supported_data_rates(static_cast< ::openconfig::enums::OpenconfigWifiTypesDATARATE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue mobility_domain = 171956929 [(.yext.schemapath) = "/ssids/ssid/config/mobility-domain"];
      case 171956929: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 1375655434 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mobility_domain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue qbss_load = 179646833 [(.yext.schemapath) = "/ssids/ssid/config/qbss-load"];
      case 179646833: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 1437174666 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_qbss_load()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue wpa2_psk = 180186978 [(.yext.schemapath) = "/ssids/ssid/config/wpa2-psk"];
      case 180186978: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 1441495826 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_wpa2_psk()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue advertise_apname = 192650365 [(.yext.schemapath) = "/ssids/ssid/config/advertise-apname"];
      case 192650365: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 1541202922 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_advertise_apname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue okc = 247210280 [(.yext.schemapath) = "/ssids/ssid/config/okc"];
      case 247210280: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 1977682242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_okc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue csa = 247811686 [(.yext.schemapath) = "/ssids/ssid/config/csa"];
      case 247811686: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 1982493490 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_csa()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue vlan_id = 278924278 [(.yext.schemapath) = "/ssids/ssid/config/vlan-id"];
      case 278924278: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 2231394226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vlan_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue broadcast_filter = 291022387 [(.yext.schemapath) = "/ssids/ssid/config/broadcast-filter"];
      case 291022387: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 2328179098 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_broadcast_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue ipv6_ndp_filter = 318985876 [(.yext.schemapath) = "/ssids/ssid/config/ipv6-ndp-filter"];
      case 318985876: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 2551887010 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ipv6_ndp_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue dhcp_required = 330477468 [(.yext.schemapath) = "/ssids/ssid/config/dhcp-required"];
      case 330477468: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 2643819746 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dhcp_required()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue server_group = 344881248 [(.yext.schemapath) = "/ssids/ssid/config/server-group"];
      case 344881248: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 2759049986 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue hidden = 358439471 [(.yext.schemapath) = "/ssids/ssid/config/hidden"];
      case 358439471: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 2867515770 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hidden()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue ipv6_ndp_filter_timer = 393630952 [(.yext.schemapath) = "/ssids/ssid/config/ipv6-ndp-filter-timer"];
      case 393630952: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 3149047618 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ipv6_ndp_filter_timer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue ptk_timeout = 404316016 [(.yext.schemapath) = "/ssids/ssid/config/ptk-timeout"];
      case 404316016: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 3234528130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ptk_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.Opmode opmode = 409077039 [(.yext.schemapath) = "/ssids/ssid/config/opmode"];
      case 409077039: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 3272616312 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_opmode(static_cast< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config_Opmode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue gtk_timeout = 428436415 [(.yext.schemapath) = "/ssids/ssid/config/gtk-timeout"];
      case 428436415: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 3427491322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gtk_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue dva = 466452098 [(.yext.schemapath) = "/ssids/ssid/config/dva"];
      case 466452098: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 3731616786 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dva()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue dot11k = 473026033 [(.yext.schemapath) = "/ssids/ssid/config/dot11k"];
      case 473026033: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 3784208266 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dot11k()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue multicast_filter = 477942606 [(.yext.schemapath) = "/ssids/ssid/config/multicast-filter"];
      case 477942606: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 3823540850 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_multicast_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.enums.OpenconfigWifiTypesOPERATINGFREQUENCY operating_frequency = 481955913 [(.yext.schemapath) = "/ssids/ssid/config/operating-frequency"];
      case 481955913: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 3855647304 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operating_frequency(static_cast< ::openconfig::enums::OpenconfigWifiTypesOPERATINGFREQUENCY >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config)
  return false;
#undef DO_
}

void Ssids_Ssid_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue name = 16502406 [(.yext.schemapath) = "/ssids/ssid/config/name"];
  if (this->has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16502406, *this->name_, output);
  }

  // .ywrapper.BoolValue enabled = 55874470 [(.yext.schemapath) = "/ssids/ssid/config/enabled"];
  if (this->has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      55874470, *this->enabled_, output);
  }

  // .ywrapper.BoolValue station_isolation = 87616742 [(.yext.schemapath) = "/ssids/ssid/config/station-isolation"];
  if (this->has_station_isolation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      87616742, *this->station_isolation_, output);
  }

  // repeated .openconfig.enums.OpenconfigWifiTypesDATARATE basic_data_rates = 96025474 [(.yext.schemapath) = "/ssids/ssid/config/basic-data-rates"];
  if (this->basic_data_rates_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      96025474,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(
        static_cast< ::google::protobuf::uint32>(_basic_data_rates_cached_byte_size_));
  }
  for (int i = 0, n = this->basic_data_rates_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->basic_data_rates(i), output);
  }

  // repeated .openconfig.enums.OpenconfigWifiTypesDATARATE supported_data_rates = 128647718 [(.yext.schemapath) = "/ssids/ssid/config/supported-data-rates"];
  if (this->supported_data_rates_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      128647718,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(
        static_cast< ::google::protobuf::uint32>(_supported_data_rates_cached_byte_size_));
  }
  for (int i = 0, n = this->supported_data_rates_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->supported_data_rates(i), output);
  }

  // .ywrapper.StringValue mobility_domain = 171956929 [(.yext.schemapath) = "/ssids/ssid/config/mobility-domain"];
  if (this->has_mobility_domain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      171956929, *this->mobility_domain_, output);
  }

  // .ywrapper.BoolValue qbss_load = 179646833 [(.yext.schemapath) = "/ssids/ssid/config/qbss-load"];
  if (this->has_qbss_load()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      179646833, *this->qbss_load_, output);
  }

  // .ywrapper.StringValue wpa2_psk = 180186978 [(.yext.schemapath) = "/ssids/ssid/config/wpa2-psk"];
  if (this->has_wpa2_psk()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      180186978, *this->wpa2_psk_, output);
  }

  // .ywrapper.BoolValue advertise_apname = 192650365 [(.yext.schemapath) = "/ssids/ssid/config/advertise-apname"];
  if (this->has_advertise_apname()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      192650365, *this->advertise_apname_, output);
  }

  // .ywrapper.BoolValue okc = 247210280 [(.yext.schemapath) = "/ssids/ssid/config/okc"];
  if (this->has_okc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      247210280, *this->okc_, output);
  }

  // .ywrapper.BoolValue csa = 247811686 [(.yext.schemapath) = "/ssids/ssid/config/csa"];
  if (this->has_csa()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      247811686, *this->csa_, output);
  }

  // .ywrapper.UintValue vlan_id = 278924278 [(.yext.schemapath) = "/ssids/ssid/config/vlan-id"];
  if (this->has_vlan_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      278924278, *this->vlan_id_, output);
  }

  // .ywrapper.BoolValue broadcast_filter = 291022387 [(.yext.schemapath) = "/ssids/ssid/config/broadcast-filter"];
  if (this->has_broadcast_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      291022387, *this->broadcast_filter_, output);
  }

  // .ywrapper.BoolValue ipv6_ndp_filter = 318985876 [(.yext.schemapath) = "/ssids/ssid/config/ipv6-ndp-filter"];
  if (this->has_ipv6_ndp_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      318985876, *this->ipv6_ndp_filter_, output);
  }

  // .ywrapper.BoolValue dhcp_required = 330477468 [(.yext.schemapath) = "/ssids/ssid/config/dhcp-required"];
  if (this->has_dhcp_required()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      330477468, *this->dhcp_required_, output);
  }

  // .ywrapper.StringValue server_group = 344881248 [(.yext.schemapath) = "/ssids/ssid/config/server-group"];
  if (this->has_server_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      344881248, *this->server_group_, output);
  }

  // .ywrapper.BoolValue hidden = 358439471 [(.yext.schemapath) = "/ssids/ssid/config/hidden"];
  if (this->has_hidden()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      358439471, *this->hidden_, output);
  }

  // .ywrapper.UintValue ipv6_ndp_filter_timer = 393630952 [(.yext.schemapath) = "/ssids/ssid/config/ipv6-ndp-filter-timer"];
  if (this->has_ipv6_ndp_filter_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      393630952, *this->ipv6_ndp_filter_timer_, output);
  }

  // .ywrapper.UintValue ptk_timeout = 404316016 [(.yext.schemapath) = "/ssids/ssid/config/ptk-timeout"];
  if (this->has_ptk_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      404316016, *this->ptk_timeout_, output);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.Opmode opmode = 409077039 [(.yext.schemapath) = "/ssids/ssid/config/opmode"];
  if (this->opmode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      409077039, this->opmode(), output);
  }

  // .ywrapper.UintValue gtk_timeout = 428436415 [(.yext.schemapath) = "/ssids/ssid/config/gtk-timeout"];
  if (this->has_gtk_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      428436415, *this->gtk_timeout_, output);
  }

  // .ywrapper.BoolValue dva = 466452098 [(.yext.schemapath) = "/ssids/ssid/config/dva"];
  if (this->has_dva()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      466452098, *this->dva_, output);
  }

  // .ywrapper.BoolValue dot11k = 473026033 [(.yext.schemapath) = "/ssids/ssid/config/dot11k"];
  if (this->has_dot11k()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      473026033, *this->dot11k_, output);
  }

  // .ywrapper.BoolValue multicast_filter = 477942606 [(.yext.schemapath) = "/ssids/ssid/config/multicast-filter"];
  if (this->has_multicast_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      477942606, *this->multicast_filter_, output);
  }

  // .openconfig.enums.OpenconfigWifiTypesOPERATINGFREQUENCY operating_frequency = 481955913 [(.yext.schemapath) = "/ssids/ssid/config/operating-frequency"];
  if (this->operating_frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      481955913, this->operating_frequency(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config)
}

::google::protobuf::uint8* Ssids_Ssid_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.StringValue name = 16502406 [(.yext.schemapath) = "/ssids/ssid/config/name"];
  if (this->has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16502406, *this->name_, deterministic, target);
  }

  // .ywrapper.BoolValue enabled = 55874470 [(.yext.schemapath) = "/ssids/ssid/config/enabled"];
  if (this->has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        55874470, *this->enabled_, deterministic, target);
  }

  // .ywrapper.BoolValue station_isolation = 87616742 [(.yext.schemapath) = "/ssids/ssid/config/station-isolation"];
  if (this->has_station_isolation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        87616742, *this->station_isolation_, deterministic, target);
  }

  // repeated .openconfig.enums.OpenconfigWifiTypesDATARATE basic_data_rates = 96025474 [(.yext.schemapath) = "/ssids/ssid/config/basic-data-rates"];
  if (this->basic_data_rates_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      96025474,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      static_cast< ::google::protobuf::uint32>(
            _basic_data_rates_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->basic_data_rates_, target);
  }

  // repeated .openconfig.enums.OpenconfigWifiTypesDATARATE supported_data_rates = 128647718 [(.yext.schemapath) = "/ssids/ssid/config/supported-data-rates"];
  if (this->supported_data_rates_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      128647718,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      static_cast< ::google::protobuf::uint32>(
            _supported_data_rates_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->supported_data_rates_, target);
  }

  // .ywrapper.StringValue mobility_domain = 171956929 [(.yext.schemapath) = "/ssids/ssid/config/mobility-domain"];
  if (this->has_mobility_domain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        171956929, *this->mobility_domain_, deterministic, target);
  }

  // .ywrapper.BoolValue qbss_load = 179646833 [(.yext.schemapath) = "/ssids/ssid/config/qbss-load"];
  if (this->has_qbss_load()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        179646833, *this->qbss_load_, deterministic, target);
  }

  // .ywrapper.StringValue wpa2_psk = 180186978 [(.yext.schemapath) = "/ssids/ssid/config/wpa2-psk"];
  if (this->has_wpa2_psk()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        180186978, *this->wpa2_psk_, deterministic, target);
  }

  // .ywrapper.BoolValue advertise_apname = 192650365 [(.yext.schemapath) = "/ssids/ssid/config/advertise-apname"];
  if (this->has_advertise_apname()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        192650365, *this->advertise_apname_, deterministic, target);
  }

  // .ywrapper.BoolValue okc = 247210280 [(.yext.schemapath) = "/ssids/ssid/config/okc"];
  if (this->has_okc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        247210280, *this->okc_, deterministic, target);
  }

  // .ywrapper.BoolValue csa = 247811686 [(.yext.schemapath) = "/ssids/ssid/config/csa"];
  if (this->has_csa()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        247811686, *this->csa_, deterministic, target);
  }

  // .ywrapper.UintValue vlan_id = 278924278 [(.yext.schemapath) = "/ssids/ssid/config/vlan-id"];
  if (this->has_vlan_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        278924278, *this->vlan_id_, deterministic, target);
  }

  // .ywrapper.BoolValue broadcast_filter = 291022387 [(.yext.schemapath) = "/ssids/ssid/config/broadcast-filter"];
  if (this->has_broadcast_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        291022387, *this->broadcast_filter_, deterministic, target);
  }

  // .ywrapper.BoolValue ipv6_ndp_filter = 318985876 [(.yext.schemapath) = "/ssids/ssid/config/ipv6-ndp-filter"];
  if (this->has_ipv6_ndp_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        318985876, *this->ipv6_ndp_filter_, deterministic, target);
  }

  // .ywrapper.BoolValue dhcp_required = 330477468 [(.yext.schemapath) = "/ssids/ssid/config/dhcp-required"];
  if (this->has_dhcp_required()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        330477468, *this->dhcp_required_, deterministic, target);
  }

  // .ywrapper.StringValue server_group = 344881248 [(.yext.schemapath) = "/ssids/ssid/config/server-group"];
  if (this->has_server_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        344881248, *this->server_group_, deterministic, target);
  }

  // .ywrapper.BoolValue hidden = 358439471 [(.yext.schemapath) = "/ssids/ssid/config/hidden"];
  if (this->has_hidden()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        358439471, *this->hidden_, deterministic, target);
  }

  // .ywrapper.UintValue ipv6_ndp_filter_timer = 393630952 [(.yext.schemapath) = "/ssids/ssid/config/ipv6-ndp-filter-timer"];
  if (this->has_ipv6_ndp_filter_timer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        393630952, *this->ipv6_ndp_filter_timer_, deterministic, target);
  }

  // .ywrapper.UintValue ptk_timeout = 404316016 [(.yext.schemapath) = "/ssids/ssid/config/ptk-timeout"];
  if (this->has_ptk_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        404316016, *this->ptk_timeout_, deterministic, target);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.Opmode opmode = 409077039 [(.yext.schemapath) = "/ssids/ssid/config/opmode"];
  if (this->opmode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      409077039, this->opmode(), target);
  }

  // .ywrapper.UintValue gtk_timeout = 428436415 [(.yext.schemapath) = "/ssids/ssid/config/gtk-timeout"];
  if (this->has_gtk_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        428436415, *this->gtk_timeout_, deterministic, target);
  }

  // .ywrapper.BoolValue dva = 466452098 [(.yext.schemapath) = "/ssids/ssid/config/dva"];
  if (this->has_dva()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        466452098, *this->dva_, deterministic, target);
  }

  // .ywrapper.BoolValue dot11k = 473026033 [(.yext.schemapath) = "/ssids/ssid/config/dot11k"];
  if (this->has_dot11k()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        473026033, *this->dot11k_, deterministic, target);
  }

  // .ywrapper.BoolValue multicast_filter = 477942606 [(.yext.schemapath) = "/ssids/ssid/config/multicast-filter"];
  if (this->has_multicast_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        477942606, *this->multicast_filter_, deterministic, target);
  }

  // .openconfig.enums.OpenconfigWifiTypesOPERATINGFREQUENCY operating_frequency = 481955913 [(.yext.schemapath) = "/ssids/ssid/config/operating-frequency"];
  if (this->operating_frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      481955913, this->operating_frequency(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config)
  return target;
}

size_t Ssids_Ssid_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .openconfig.enums.OpenconfigWifiTypesDATARATE basic_data_rates = 96025474 [(.yext.schemapath) = "/ssids/ssid/config/basic-data-rates"];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->basic_data_rates_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->basic_data_rates(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _basic_data_rates_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .openconfig.enums.OpenconfigWifiTypesDATARATE supported_data_rates = 128647718 [(.yext.schemapath) = "/ssids/ssid/config/supported-data-rates"];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->supported_data_rates_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->supported_data_rates(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _supported_data_rates_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .ywrapper.StringValue name = 16502406 [(.yext.schemapath) = "/ssids/ssid/config/name"];
  if (this->has_name()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->name_);
  }

  // .ywrapper.BoolValue enabled = 55874470 [(.yext.schemapath) = "/ssids/ssid/config/enabled"];
  if (this->has_enabled()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->enabled_);
  }

  // .ywrapper.BoolValue station_isolation = 87616742 [(.yext.schemapath) = "/ssids/ssid/config/station-isolation"];
  if (this->has_station_isolation()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->station_isolation_);
  }

  // .ywrapper.StringValue mobility_domain = 171956929 [(.yext.schemapath) = "/ssids/ssid/config/mobility-domain"];
  if (this->has_mobility_domain()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mobility_domain_);
  }

  // .ywrapper.BoolValue qbss_load = 179646833 [(.yext.schemapath) = "/ssids/ssid/config/qbss-load"];
  if (this->has_qbss_load()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->qbss_load_);
  }

  // .ywrapper.StringValue wpa2_psk = 180186978 [(.yext.schemapath) = "/ssids/ssid/config/wpa2-psk"];
  if (this->has_wpa2_psk()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->wpa2_psk_);
  }

  // .ywrapper.BoolValue advertise_apname = 192650365 [(.yext.schemapath) = "/ssids/ssid/config/advertise-apname"];
  if (this->has_advertise_apname()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->advertise_apname_);
  }

  // .ywrapper.BoolValue okc = 247210280 [(.yext.schemapath) = "/ssids/ssid/config/okc"];
  if (this->has_okc()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->okc_);
  }

  // .ywrapper.BoolValue csa = 247811686 [(.yext.schemapath) = "/ssids/ssid/config/csa"];
  if (this->has_csa()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->csa_);
  }

  // .ywrapper.UintValue vlan_id = 278924278 [(.yext.schemapath) = "/ssids/ssid/config/vlan-id"];
  if (this->has_vlan_id()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->vlan_id_);
  }

  // .ywrapper.BoolValue broadcast_filter = 291022387 [(.yext.schemapath) = "/ssids/ssid/config/broadcast-filter"];
  if (this->has_broadcast_filter()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->broadcast_filter_);
  }

  // .ywrapper.BoolValue ipv6_ndp_filter = 318985876 [(.yext.schemapath) = "/ssids/ssid/config/ipv6-ndp-filter"];
  if (this->has_ipv6_ndp_filter()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->ipv6_ndp_filter_);
  }

  // .ywrapper.BoolValue dhcp_required = 330477468 [(.yext.schemapath) = "/ssids/ssid/config/dhcp-required"];
  if (this->has_dhcp_required()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dhcp_required_);
  }

  // .ywrapper.StringValue server_group = 344881248 [(.yext.schemapath) = "/ssids/ssid/config/server-group"];
  if (this->has_server_group()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->server_group_);
  }

  // .ywrapper.BoolValue hidden = 358439471 [(.yext.schemapath) = "/ssids/ssid/config/hidden"];
  if (this->has_hidden()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->hidden_);
  }

  // .ywrapper.UintValue ipv6_ndp_filter_timer = 393630952 [(.yext.schemapath) = "/ssids/ssid/config/ipv6-ndp-filter-timer"];
  if (this->has_ipv6_ndp_filter_timer()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->ipv6_ndp_filter_timer_);
  }

  // .ywrapper.UintValue ptk_timeout = 404316016 [(.yext.schemapath) = "/ssids/ssid/config/ptk-timeout"];
  if (this->has_ptk_timeout()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->ptk_timeout_);
  }

  // .ywrapper.UintValue gtk_timeout = 428436415 [(.yext.schemapath) = "/ssids/ssid/config/gtk-timeout"];
  if (this->has_gtk_timeout()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->gtk_timeout_);
  }

  // .ywrapper.BoolValue dva = 466452098 [(.yext.schemapath) = "/ssids/ssid/config/dva"];
  if (this->has_dva()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dva_);
  }

  // .ywrapper.BoolValue dot11k = 473026033 [(.yext.schemapath) = "/ssids/ssid/config/dot11k"];
  if (this->has_dot11k()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dot11k_);
  }

  // .ywrapper.BoolValue multicast_filter = 477942606 [(.yext.schemapath) = "/ssids/ssid/config/multicast-filter"];
  if (this->has_multicast_filter()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->multicast_filter_);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.Opmode opmode = 409077039 [(.yext.schemapath) = "/ssids/ssid/config/opmode"];
  if (this->opmode() != 0) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->opmode());
  }

  // .openconfig.enums.OpenconfigWifiTypesOPERATINGFREQUENCY operating_frequency = 481955913 [(.yext.schemapath) = "/ssids/ssid/config/operating-frequency"];
  if (this->operating_frequency() != 0) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operating_frequency());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ssids_Ssid_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Ssids_Ssid_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ssids_Ssid_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config)
    MergeFrom(*source);
  }
}

void Ssids_Ssid_Config::MergeFrom(const Ssids_Ssid_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  basic_data_rates_.MergeFrom(from.basic_data_rates_);
  supported_data_rates_.MergeFrom(from.supported_data_rates_);
  if (from.has_name()) {
    mutable_name()->::ywrapper::StringValue::MergeFrom(from.name());
  }
  if (from.has_enabled()) {
    mutable_enabled()->::ywrapper::BoolValue::MergeFrom(from.enabled());
  }
  if (from.has_station_isolation()) {
    mutable_station_isolation()->::ywrapper::BoolValue::MergeFrom(from.station_isolation());
  }
  if (from.has_mobility_domain()) {
    mutable_mobility_domain()->::ywrapper::StringValue::MergeFrom(from.mobility_domain());
  }
  if (from.has_qbss_load()) {
    mutable_qbss_load()->::ywrapper::BoolValue::MergeFrom(from.qbss_load());
  }
  if (from.has_wpa2_psk()) {
    mutable_wpa2_psk()->::ywrapper::StringValue::MergeFrom(from.wpa2_psk());
  }
  if (from.has_advertise_apname()) {
    mutable_advertise_apname()->::ywrapper::BoolValue::MergeFrom(from.advertise_apname());
  }
  if (from.has_okc()) {
    mutable_okc()->::ywrapper::BoolValue::MergeFrom(from.okc());
  }
  if (from.has_csa()) {
    mutable_csa()->::ywrapper::BoolValue::MergeFrom(from.csa());
  }
  if (from.has_vlan_id()) {
    mutable_vlan_id()->::ywrapper::UintValue::MergeFrom(from.vlan_id());
  }
  if (from.has_broadcast_filter()) {
    mutable_broadcast_filter()->::ywrapper::BoolValue::MergeFrom(from.broadcast_filter());
  }
  if (from.has_ipv6_ndp_filter()) {
    mutable_ipv6_ndp_filter()->::ywrapper::BoolValue::MergeFrom(from.ipv6_ndp_filter());
  }
  if (from.has_dhcp_required()) {
    mutable_dhcp_required()->::ywrapper::BoolValue::MergeFrom(from.dhcp_required());
  }
  if (from.has_server_group()) {
    mutable_server_group()->::ywrapper::StringValue::MergeFrom(from.server_group());
  }
  if (from.has_hidden()) {
    mutable_hidden()->::ywrapper::BoolValue::MergeFrom(from.hidden());
  }
  if (from.has_ipv6_ndp_filter_timer()) {
    mutable_ipv6_ndp_filter_timer()->::ywrapper::UintValue::MergeFrom(from.ipv6_ndp_filter_timer());
  }
  if (from.has_ptk_timeout()) {
    mutable_ptk_timeout()->::ywrapper::UintValue::MergeFrom(from.ptk_timeout());
  }
  if (from.has_gtk_timeout()) {
    mutable_gtk_timeout()->::ywrapper::UintValue::MergeFrom(from.gtk_timeout());
  }
  if (from.has_dva()) {
    mutable_dva()->::ywrapper::BoolValue::MergeFrom(from.dva());
  }
  if (from.has_dot11k()) {
    mutable_dot11k()->::ywrapper::BoolValue::MergeFrom(from.dot11k());
  }
  if (from.has_multicast_filter()) {
    mutable_multicast_filter()->::ywrapper::BoolValue::MergeFrom(from.multicast_filter());
  }
  if (from.opmode() != 0) {
    set_opmode(from.opmode());
  }
  if (from.operating_frequency() != 0) {
    set_operating_frequency(from.operating_frequency());
  }
}

void Ssids_Ssid_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ssids_Ssid_Config::CopyFrom(const Ssids_Ssid_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ssids_Ssid_Config::IsInitialized() const {
  return true;
}

void Ssids_Ssid_Config::Swap(Ssids_Ssid_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ssids_Ssid_Config::InternalSwap(Ssids_Ssid_Config* other) {
  using std::swap;
  basic_data_rates_.InternalSwap(&other->basic_data_rates_);
  supported_data_rates_.InternalSwap(&other->supported_data_rates_);
  swap(name_, other->name_);
  swap(enabled_, other->enabled_);
  swap(station_isolation_, other->station_isolation_);
  swap(mobility_domain_, other->mobility_domain_);
  swap(qbss_load_, other->qbss_load_);
  swap(wpa2_psk_, other->wpa2_psk_);
  swap(advertise_apname_, other->advertise_apname_);
  swap(okc_, other->okc_);
  swap(csa_, other->csa_);
  swap(vlan_id_, other->vlan_id_);
  swap(broadcast_filter_, other->broadcast_filter_);
  swap(ipv6_ndp_filter_, other->ipv6_ndp_filter_);
  swap(dhcp_required_, other->dhcp_required_);
  swap(server_group_, other->server_group_);
  swap(hidden_, other->hidden_);
  swap(ipv6_ndp_filter_timer_, other->ipv6_ndp_filter_timer_);
  swap(ptk_timeout_, other->ptk_timeout_);
  swap(gtk_timeout_, other->gtk_timeout_);
  swap(dva_, other->dva_);
  swap(dot11k_, other->dot11k_);
  swap(multicast_filter_, other->multicast_filter_);
  swap(opmode_, other->opmode_);
  swap(operating_frequency_, other->operating_frequency_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ssids_Ssid_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ssids_Ssid_Dot11R_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot11R_Config_default_instance_._instance.get_mutable()->dot11r_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot11R_Config_default_instance_._instance.get_mutable()->dot11r_domainid_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot11R_Config_default_instance_._instance.get_mutable()->dot11r_r1key_timeout_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Ssids_Ssid_Dot11R_Config::clear_dot11r() {
  if (GetArenaNoVirtual() == NULL && dot11r_ != NULL) {
    delete dot11r_;
  }
  dot11r_ = NULL;
}
void Ssids_Ssid_Dot11R_Config::clear_dot11r_domainid() {
  if (GetArenaNoVirtual() == NULL && dot11r_domainid_ != NULL) {
    delete dot11r_domainid_;
  }
  dot11r_domainid_ = NULL;
}
void Ssids_Ssid_Dot11R_Config::clear_dot11r_r1key_timeout() {
  if (GetArenaNoVirtual() == NULL && dot11r_r1key_timeout_ != NULL) {
    delete dot11r_r1key_timeout_;
  }
  dot11r_r1key_timeout_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ssids_Ssid_Dot11R_Config::kDot11RFieldNumber;
const int Ssids_Ssid_Dot11R_Config::kDot11RDomainidFieldNumber;
const int Ssids_Ssid_Dot11R_Config::kDot11RMethodFieldNumber;
const int Ssids_Ssid_Dot11R_Config::kDot11RR1KeyTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ssids_Ssid_Dot11R_Config::Ssids_Ssid_Dot11R_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Dot11R_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config)
}
Ssids_Ssid_Dot11R_Config::Ssids_Ssid_Dot11R_Config(const Ssids_Ssid_Dot11R_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dot11r_r1key_timeout()) {
    dot11r_r1key_timeout_ = new ::ywrapper::UintValue(*from.dot11r_r1key_timeout_);
  } else {
    dot11r_r1key_timeout_ = NULL;
  }
  if (from.has_dot11r()) {
    dot11r_ = new ::ywrapper::BoolValue(*from.dot11r_);
  } else {
    dot11r_ = NULL;
  }
  if (from.has_dot11r_domainid()) {
    dot11r_domainid_ = new ::ywrapper::UintValue(*from.dot11r_domainid_);
  } else {
    dot11r_domainid_ = NULL;
  }
  dot11r_method_ = from.dot11r_method_;
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config)
}

void Ssids_Ssid_Dot11R_Config::SharedCtor() {
  ::memset(&dot11r_r1key_timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dot11r_method_) -
      reinterpret_cast<char*>(&dot11r_r1key_timeout_)) + sizeof(dot11r_method_));
  _cached_size_ = 0;
}

Ssids_Ssid_Dot11R_Config::~Ssids_Ssid_Dot11R_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config)
  SharedDtor();
}

void Ssids_Ssid_Dot11R_Config::SharedDtor() {
  if (this != internal_default_instance()) delete dot11r_r1key_timeout_;
  if (this != internal_default_instance()) delete dot11r_;
  if (this != internal_default_instance()) delete dot11r_domainid_;
}

void Ssids_Ssid_Dot11R_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ssids_Ssid_Dot11R_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ssids_Ssid_Dot11R_Config& Ssids_Ssid_Dot11R_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Dot11R_Config();
  return *internal_default_instance();
}

Ssids_Ssid_Dot11R_Config* Ssids_Ssid_Dot11R_Config::New(::google::protobuf::Arena* arena) const {
  Ssids_Ssid_Dot11R_Config* n = new Ssids_Ssid_Dot11R_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ssids_Ssid_Dot11R_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && dot11r_r1key_timeout_ != NULL) {
    delete dot11r_r1key_timeout_;
  }
  dot11r_r1key_timeout_ = NULL;
  if (GetArenaNoVirtual() == NULL && dot11r_ != NULL) {
    delete dot11r_;
  }
  dot11r_ = NULL;
  if (GetArenaNoVirtual() == NULL && dot11r_domainid_ != NULL) {
    delete dot11r_domainid_;
  }
  dot11r_domainid_ = NULL;
  dot11r_method_ = 0;
  _internal_metadata_.Clear();
}

bool Ssids_Ssid_Dot11R_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3513417696u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue dot11r_r1key_timeout = 203505331 [(.yext.schemapath) = "/ssids/ssid/dot11r/config/dot11r-r1key-timeout"];
      case 203505331: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 1628042650 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dot11r_r1key_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue dot11r = 306866146 [(.yext.schemapath) = "/ssids/ssid/dot11r/config/dot11r"];
      case 306866146: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 2454929170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dot11r()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue dot11r_domainid = 383959528 [(.yext.schemapath) = "/ssids/ssid/dot11r/config/dot11r-domainid"];
      case 383959528: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 3071676226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dot11r_domainid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config.Dot11RMethod dot11r_method = 439177212 [(.yext.schemapath) = "/ssids/ssid/dot11r/config/dot11r-method"];
      case 439177212: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 3513417696 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dot11r_method(static_cast< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_Config_Dot11RMethod >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config)
  return false;
#undef DO_
}

void Ssids_Ssid_Dot11R_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue dot11r_r1key_timeout = 203505331 [(.yext.schemapath) = "/ssids/ssid/dot11r/config/dot11r-r1key-timeout"];
  if (this->has_dot11r_r1key_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      203505331, *this->dot11r_r1key_timeout_, output);
  }

  // .ywrapper.BoolValue dot11r = 306866146 [(.yext.schemapath) = "/ssids/ssid/dot11r/config/dot11r"];
  if (this->has_dot11r()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      306866146, *this->dot11r_, output);
  }

  // .ywrapper.UintValue dot11r_domainid = 383959528 [(.yext.schemapath) = "/ssids/ssid/dot11r/config/dot11r-domainid"];
  if (this->has_dot11r_domainid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      383959528, *this->dot11r_domainid_, output);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config.Dot11RMethod dot11r_method = 439177212 [(.yext.schemapath) = "/ssids/ssid/dot11r/config/dot11r-method"];
  if (this->dot11r_method() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      439177212, this->dot11r_method(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config)
}

::google::protobuf::uint8* Ssids_Ssid_Dot11R_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue dot11r_r1key_timeout = 203505331 [(.yext.schemapath) = "/ssids/ssid/dot11r/config/dot11r-r1key-timeout"];
  if (this->has_dot11r_r1key_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        203505331, *this->dot11r_r1key_timeout_, deterministic, target);
  }

  // .ywrapper.BoolValue dot11r = 306866146 [(.yext.schemapath) = "/ssids/ssid/dot11r/config/dot11r"];
  if (this->has_dot11r()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        306866146, *this->dot11r_, deterministic, target);
  }

  // .ywrapper.UintValue dot11r_domainid = 383959528 [(.yext.schemapath) = "/ssids/ssid/dot11r/config/dot11r-domainid"];
  if (this->has_dot11r_domainid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        383959528, *this->dot11r_domainid_, deterministic, target);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config.Dot11RMethod dot11r_method = 439177212 [(.yext.schemapath) = "/ssids/ssid/dot11r/config/dot11r-method"];
  if (this->dot11r_method() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      439177212, this->dot11r_method(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config)
  return target;
}

size_t Ssids_Ssid_Dot11R_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue dot11r_r1key_timeout = 203505331 [(.yext.schemapath) = "/ssids/ssid/dot11r/config/dot11r-r1key-timeout"];
  if (this->has_dot11r_r1key_timeout()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dot11r_r1key_timeout_);
  }

  // .ywrapper.BoolValue dot11r = 306866146 [(.yext.schemapath) = "/ssids/ssid/dot11r/config/dot11r"];
  if (this->has_dot11r()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dot11r_);
  }

  // .ywrapper.UintValue dot11r_domainid = 383959528 [(.yext.schemapath) = "/ssids/ssid/dot11r/config/dot11r-domainid"];
  if (this->has_dot11r_domainid()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dot11r_domainid_);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config.Dot11RMethod dot11r_method = 439177212 [(.yext.schemapath) = "/ssids/ssid/dot11r/config/dot11r-method"];
  if (this->dot11r_method() != 0) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dot11r_method());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ssids_Ssid_Dot11R_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Ssids_Ssid_Dot11R_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ssids_Ssid_Dot11R_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config)
    MergeFrom(*source);
  }
}

void Ssids_Ssid_Dot11R_Config::MergeFrom(const Ssids_Ssid_Dot11R_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dot11r_r1key_timeout()) {
    mutable_dot11r_r1key_timeout()->::ywrapper::UintValue::MergeFrom(from.dot11r_r1key_timeout());
  }
  if (from.has_dot11r()) {
    mutable_dot11r()->::ywrapper::BoolValue::MergeFrom(from.dot11r());
  }
  if (from.has_dot11r_domainid()) {
    mutable_dot11r_domainid()->::ywrapper::UintValue::MergeFrom(from.dot11r_domainid());
  }
  if (from.dot11r_method() != 0) {
    set_dot11r_method(from.dot11r_method());
  }
}

void Ssids_Ssid_Dot11R_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ssids_Ssid_Dot11R_Config::CopyFrom(const Ssids_Ssid_Dot11R_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ssids_Ssid_Dot11R_Config::IsInitialized() const {
  return true;
}

void Ssids_Ssid_Dot11R_Config::Swap(Ssids_Ssid_Dot11R_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ssids_Ssid_Dot11R_Config::InternalSwap(Ssids_Ssid_Dot11R_Config* other) {
  using std::swap;
  swap(dot11r_r1key_timeout_, other->dot11r_r1key_timeout_);
  swap(dot11r_, other->dot11r_);
  swap(dot11r_domainid_, other->dot11r_domainid_);
  swap(dot11r_method_, other->dot11r_method_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ssids_Ssid_Dot11R_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ssids_Ssid_Dot11R_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot11R_State_default_instance_._instance.get_mutable()->dot11r_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot11R_State_default_instance_._instance.get_mutable()->dot11r_domainid_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot11R_State_default_instance_._instance.get_mutable()->dot11r_r1key_timeout_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Ssids_Ssid_Dot11R_State::clear_dot11r() {
  if (GetArenaNoVirtual() == NULL && dot11r_ != NULL) {
    delete dot11r_;
  }
  dot11r_ = NULL;
}
void Ssids_Ssid_Dot11R_State::clear_dot11r_domainid() {
  if (GetArenaNoVirtual() == NULL && dot11r_domainid_ != NULL) {
    delete dot11r_domainid_;
  }
  dot11r_domainid_ = NULL;
}
void Ssids_Ssid_Dot11R_State::clear_dot11r_r1key_timeout() {
  if (GetArenaNoVirtual() == NULL && dot11r_r1key_timeout_ != NULL) {
    delete dot11r_r1key_timeout_;
  }
  dot11r_r1key_timeout_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ssids_Ssid_Dot11R_State::kDot11RFieldNumber;
const int Ssids_Ssid_Dot11R_State::kDot11RDomainidFieldNumber;
const int Ssids_Ssid_Dot11R_State::kDot11RMethodFieldNumber;
const int Ssids_Ssid_Dot11R_State::kDot11RR1KeyTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ssids_Ssid_Dot11R_State::Ssids_Ssid_Dot11R_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Dot11R_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State)
}
Ssids_Ssid_Dot11R_State::Ssids_Ssid_Dot11R_State(const Ssids_Ssid_Dot11R_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dot11r_r1key_timeout()) {
    dot11r_r1key_timeout_ = new ::ywrapper::UintValue(*from.dot11r_r1key_timeout_);
  } else {
    dot11r_r1key_timeout_ = NULL;
  }
  if (from.has_dot11r()) {
    dot11r_ = new ::ywrapper::BoolValue(*from.dot11r_);
  } else {
    dot11r_ = NULL;
  }
  if (from.has_dot11r_domainid()) {
    dot11r_domainid_ = new ::ywrapper::UintValue(*from.dot11r_domainid_);
  } else {
    dot11r_domainid_ = NULL;
  }
  dot11r_method_ = from.dot11r_method_;
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State)
}

void Ssids_Ssid_Dot11R_State::SharedCtor() {
  ::memset(&dot11r_r1key_timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dot11r_method_) -
      reinterpret_cast<char*>(&dot11r_r1key_timeout_)) + sizeof(dot11r_method_));
  _cached_size_ = 0;
}

Ssids_Ssid_Dot11R_State::~Ssids_Ssid_Dot11R_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State)
  SharedDtor();
}

void Ssids_Ssid_Dot11R_State::SharedDtor() {
  if (this != internal_default_instance()) delete dot11r_r1key_timeout_;
  if (this != internal_default_instance()) delete dot11r_;
  if (this != internal_default_instance()) delete dot11r_domainid_;
}

void Ssids_Ssid_Dot11R_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ssids_Ssid_Dot11R_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ssids_Ssid_Dot11R_State& Ssids_Ssid_Dot11R_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Dot11R_State();
  return *internal_default_instance();
}

Ssids_Ssid_Dot11R_State* Ssids_Ssid_Dot11R_State::New(::google::protobuf::Arena* arena) const {
  Ssids_Ssid_Dot11R_State* n = new Ssids_Ssid_Dot11R_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ssids_Ssid_Dot11R_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && dot11r_r1key_timeout_ != NULL) {
    delete dot11r_r1key_timeout_;
  }
  dot11r_r1key_timeout_ = NULL;
  if (GetArenaNoVirtual() == NULL && dot11r_ != NULL) {
    delete dot11r_;
  }
  dot11r_ = NULL;
  if (GetArenaNoVirtual() == NULL && dot11r_domainid_ != NULL) {
    delete dot11r_domainid_;
  }
  dot11r_domainid_ = NULL;
  dot11r_method_ = 0;
  _internal_metadata_.Clear();
}

bool Ssids_Ssid_Dot11R_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4086270696u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue dot11r_r1key_timeout = 86079248 [(.yext.schemapath) = "/ssids/ssid/dot11r/state/dot11r-r1key-timeout"];
      case 86079248: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 688633986 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dot11r_r1key_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue dot11r = 144351457 [(.yext.schemapath) = "/ssids/ssid/dot11r/state/dot11r"];
      case 144351457: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 1154811658 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dot11r()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue dot11r_domainid = 429805585 [(.yext.schemapath) = "/ssids/ssid/dot11r/state/dot11r-domainid"];
      case 429805585: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 3438444682 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dot11r_domainid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State.Dot11RMethod dot11r_method = 510783837 [(.yext.schemapath) = "/ssids/ssid/dot11r/state/dot11r-method"];
      case 510783837: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 4086270696 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dot11r_method(static_cast< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_State_Dot11RMethod >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State)
  return false;
#undef DO_
}

void Ssids_Ssid_Dot11R_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue dot11r_r1key_timeout = 86079248 [(.yext.schemapath) = "/ssids/ssid/dot11r/state/dot11r-r1key-timeout"];
  if (this->has_dot11r_r1key_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      86079248, *this->dot11r_r1key_timeout_, output);
  }

  // .ywrapper.BoolValue dot11r = 144351457 [(.yext.schemapath) = "/ssids/ssid/dot11r/state/dot11r"];
  if (this->has_dot11r()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      144351457, *this->dot11r_, output);
  }

  // .ywrapper.UintValue dot11r_domainid = 429805585 [(.yext.schemapath) = "/ssids/ssid/dot11r/state/dot11r-domainid"];
  if (this->has_dot11r_domainid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      429805585, *this->dot11r_domainid_, output);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State.Dot11RMethod dot11r_method = 510783837 [(.yext.schemapath) = "/ssids/ssid/dot11r/state/dot11r-method"];
  if (this->dot11r_method() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      510783837, this->dot11r_method(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State)
}

::google::protobuf::uint8* Ssids_Ssid_Dot11R_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue dot11r_r1key_timeout = 86079248 [(.yext.schemapath) = "/ssids/ssid/dot11r/state/dot11r-r1key-timeout"];
  if (this->has_dot11r_r1key_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        86079248, *this->dot11r_r1key_timeout_, deterministic, target);
  }

  // .ywrapper.BoolValue dot11r = 144351457 [(.yext.schemapath) = "/ssids/ssid/dot11r/state/dot11r"];
  if (this->has_dot11r()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        144351457, *this->dot11r_, deterministic, target);
  }

  // .ywrapper.UintValue dot11r_domainid = 429805585 [(.yext.schemapath) = "/ssids/ssid/dot11r/state/dot11r-domainid"];
  if (this->has_dot11r_domainid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        429805585, *this->dot11r_domainid_, deterministic, target);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State.Dot11RMethod dot11r_method = 510783837 [(.yext.schemapath) = "/ssids/ssid/dot11r/state/dot11r-method"];
  if (this->dot11r_method() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      510783837, this->dot11r_method(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State)
  return target;
}

size_t Ssids_Ssid_Dot11R_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue dot11r_r1key_timeout = 86079248 [(.yext.schemapath) = "/ssids/ssid/dot11r/state/dot11r-r1key-timeout"];
  if (this->has_dot11r_r1key_timeout()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dot11r_r1key_timeout_);
  }

  // .ywrapper.BoolValue dot11r = 144351457 [(.yext.schemapath) = "/ssids/ssid/dot11r/state/dot11r"];
  if (this->has_dot11r()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dot11r_);
  }

  // .ywrapper.UintValue dot11r_domainid = 429805585 [(.yext.schemapath) = "/ssids/ssid/dot11r/state/dot11r-domainid"];
  if (this->has_dot11r_domainid()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dot11r_domainid_);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State.Dot11RMethod dot11r_method = 510783837 [(.yext.schemapath) = "/ssids/ssid/dot11r/state/dot11r-method"];
  if (this->dot11r_method() != 0) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dot11r_method());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ssids_Ssid_Dot11R_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Ssids_Ssid_Dot11R_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ssids_Ssid_Dot11R_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State)
    MergeFrom(*source);
  }
}

void Ssids_Ssid_Dot11R_State::MergeFrom(const Ssids_Ssid_Dot11R_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dot11r_r1key_timeout()) {
    mutable_dot11r_r1key_timeout()->::ywrapper::UintValue::MergeFrom(from.dot11r_r1key_timeout());
  }
  if (from.has_dot11r()) {
    mutable_dot11r()->::ywrapper::BoolValue::MergeFrom(from.dot11r());
  }
  if (from.has_dot11r_domainid()) {
    mutable_dot11r_domainid()->::ywrapper::UintValue::MergeFrom(from.dot11r_domainid());
  }
  if (from.dot11r_method() != 0) {
    set_dot11r_method(from.dot11r_method());
  }
}

void Ssids_Ssid_Dot11R_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ssids_Ssid_Dot11R_State::CopyFrom(const Ssids_Ssid_Dot11R_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ssids_Ssid_Dot11R_State::IsInitialized() const {
  return true;
}

void Ssids_Ssid_Dot11R_State::Swap(Ssids_Ssid_Dot11R_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ssids_Ssid_Dot11R_State::InternalSwap(Ssids_Ssid_Dot11R_State* other) {
  using std::swap;
  swap(dot11r_r1key_timeout_, other->dot11r_r1key_timeout_);
  swap(dot11r_, other->dot11r_);
  swap(dot11r_domainid_, other->dot11r_domainid_);
  swap(dot11r_method_, other->dot11r_method_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ssids_Ssid_Dot11R_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ssids_Ssid_Dot11R::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot11R_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_Config*>(
      ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_Config::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot11R_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_State*>(
      ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ssids_Ssid_Dot11R::kConfigFieldNumber;
const int Ssids_Ssid_Dot11R::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ssids_Ssid_Dot11R::Ssids_Ssid_Dot11R()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Dot11R();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R)
}
Ssids_Ssid_Dot11R::Ssids_Ssid_Dot11R(const Ssids_Ssid_Dot11R& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R)
}

void Ssids_Ssid_Dot11R::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&state_)) + sizeof(config_));
  _cached_size_ = 0;
}

Ssids_Ssid_Dot11R::~Ssids_Ssid_Dot11R() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R)
  SharedDtor();
}

void Ssids_Ssid_Dot11R::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete config_;
}

void Ssids_Ssid_Dot11R::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ssids_Ssid_Dot11R::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ssids_Ssid_Dot11R& Ssids_Ssid_Dot11R::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Dot11R();
  return *internal_default_instance();
}

Ssids_Ssid_Dot11R* Ssids_Ssid_Dot11R::New(::google::protobuf::Arena* arena) const {
  Ssids_Ssid_Dot11R* n = new Ssids_Ssid_Dot11R;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ssids_Ssid_Dot11R::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  _internal_metadata_.Clear();
}

bool Ssids_Ssid_Dot11R::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3975886322u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State state = 150018731 [(.yext.schemapath) = "/ssids/ssid/dot11r/state"];
      case 150018731: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 1200149850 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config config = 496985790 [(.yext.schemapath) = "/ssids/ssid/dot11r/config"];
      case 496985790: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 3975886322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R)
  return false;
#undef DO_
}

void Ssids_Ssid_Dot11R::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State state = 150018731 [(.yext.schemapath) = "/ssids/ssid/dot11r/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      150018731, *this->state_, output);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config config = 496985790 [(.yext.schemapath) = "/ssids/ssid/dot11r/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      496985790, *this->config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R)
}

::google::protobuf::uint8* Ssids_Ssid_Dot11R::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State state = 150018731 [(.yext.schemapath) = "/ssids/ssid/dot11r/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        150018731, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config config = 496985790 [(.yext.schemapath) = "/ssids/ssid/dot11r/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        496985790, *this->config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R)
  return target;
}

size_t Ssids_Ssid_Dot11R::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State state = 150018731 [(.yext.schemapath) = "/ssids/ssid/dot11r/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config config = 496985790 [(.yext.schemapath) = "/ssids/ssid/dot11r/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ssids_Ssid_Dot11R::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R)
  GOOGLE_DCHECK_NE(&from, this);
  const Ssids_Ssid_Dot11R* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ssids_Ssid_Dot11R>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R)
    MergeFrom(*source);
  }
}

void Ssids_Ssid_Dot11R::MergeFrom(const Ssids_Ssid_Dot11R& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_State::MergeFrom(from.state());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_Config::MergeFrom(from.config());
  }
}

void Ssids_Ssid_Dot11R::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ssids_Ssid_Dot11R::CopyFrom(const Ssids_Ssid_Dot11R& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ssids_Ssid_Dot11R::IsInitialized() const {
  return true;
}

void Ssids_Ssid_Dot11R::Swap(Ssids_Ssid_Dot11R* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ssids_Ssid_Dot11R::InternalSwap(Ssids_Ssid_Dot11R* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(config_, other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ssids_Ssid_Dot11R::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ssids_Ssid_Dot11V_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot11V_Config_default_instance_._instance.get_mutable()->dot11v_bssidle_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot11V_Config_default_instance_._instance.get_mutable()->dot11v_bssidle_timeout_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot11V_Config_default_instance_._instance.get_mutable()->dot11v_bsstransition_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot11V_Config_default_instance_._instance.get_mutable()->dot11v_dms_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
}
void Ssids_Ssid_Dot11V_Config::clear_dot11v_bssidle() {
  if (GetArenaNoVirtual() == NULL && dot11v_bssidle_ != NULL) {
    delete dot11v_bssidle_;
  }
  dot11v_bssidle_ = NULL;
}
void Ssids_Ssid_Dot11V_Config::clear_dot11v_bssidle_timeout() {
  if (GetArenaNoVirtual() == NULL && dot11v_bssidle_timeout_ != NULL) {
    delete dot11v_bssidle_timeout_;
  }
  dot11v_bssidle_timeout_ = NULL;
}
void Ssids_Ssid_Dot11V_Config::clear_dot11v_bsstransition() {
  if (GetArenaNoVirtual() == NULL && dot11v_bsstransition_ != NULL) {
    delete dot11v_bsstransition_;
  }
  dot11v_bsstransition_ = NULL;
}
void Ssids_Ssid_Dot11V_Config::clear_dot11v_dms() {
  if (GetArenaNoVirtual() == NULL && dot11v_dms_ != NULL) {
    delete dot11v_dms_;
  }
  dot11v_dms_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ssids_Ssid_Dot11V_Config::kDot11VBssidleFieldNumber;
const int Ssids_Ssid_Dot11V_Config::kDot11VBssidleTimeoutFieldNumber;
const int Ssids_Ssid_Dot11V_Config::kDot11VBsstransitionFieldNumber;
const int Ssids_Ssid_Dot11V_Config::kDot11VDmsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ssids_Ssid_Dot11V_Config::Ssids_Ssid_Dot11V_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Dot11V_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config)
}
Ssids_Ssid_Dot11V_Config::Ssids_Ssid_Dot11V_Config(const Ssids_Ssid_Dot11V_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dot11v_dms()) {
    dot11v_dms_ = new ::ywrapper::BoolValue(*from.dot11v_dms_);
  } else {
    dot11v_dms_ = NULL;
  }
  if (from.has_dot11v_bssidle()) {
    dot11v_bssidle_ = new ::ywrapper::BoolValue(*from.dot11v_bssidle_);
  } else {
    dot11v_bssidle_ = NULL;
  }
  if (from.has_dot11v_bssidle_timeout()) {
    dot11v_bssidle_timeout_ = new ::ywrapper::UintValue(*from.dot11v_bssidle_timeout_);
  } else {
    dot11v_bssidle_timeout_ = NULL;
  }
  if (from.has_dot11v_bsstransition()) {
    dot11v_bsstransition_ = new ::ywrapper::BoolValue(*from.dot11v_bsstransition_);
  } else {
    dot11v_bsstransition_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config)
}

void Ssids_Ssid_Dot11V_Config::SharedCtor() {
  ::memset(&dot11v_dms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dot11v_bsstransition_) -
      reinterpret_cast<char*>(&dot11v_dms_)) + sizeof(dot11v_bsstransition_));
  _cached_size_ = 0;
}

Ssids_Ssid_Dot11V_Config::~Ssids_Ssid_Dot11V_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config)
  SharedDtor();
}

void Ssids_Ssid_Dot11V_Config::SharedDtor() {
  if (this != internal_default_instance()) delete dot11v_dms_;
  if (this != internal_default_instance()) delete dot11v_bssidle_;
  if (this != internal_default_instance()) delete dot11v_bssidle_timeout_;
  if (this != internal_default_instance()) delete dot11v_bsstransition_;
}

void Ssids_Ssid_Dot11V_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ssids_Ssid_Dot11V_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ssids_Ssid_Dot11V_Config& Ssids_Ssid_Dot11V_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Dot11V_Config();
  return *internal_default_instance();
}

Ssids_Ssid_Dot11V_Config* Ssids_Ssid_Dot11V_Config::New(::google::protobuf::Arena* arena) const {
  Ssids_Ssid_Dot11V_Config* n = new Ssids_Ssid_Dot11V_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ssids_Ssid_Dot11V_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && dot11v_dms_ != NULL) {
    delete dot11v_dms_;
  }
  dot11v_dms_ = NULL;
  if (GetArenaNoVirtual() == NULL && dot11v_bssidle_ != NULL) {
    delete dot11v_bssidle_;
  }
  dot11v_bssidle_ = NULL;
  if (GetArenaNoVirtual() == NULL && dot11v_bssidle_timeout_ != NULL) {
    delete dot11v_bssidle_timeout_;
  }
  dot11v_bssidle_timeout_ = NULL;
  if (GetArenaNoVirtual() == NULL && dot11v_bsstransition_ != NULL) {
    delete dot11v_bsstransition_;
  }
  dot11v_bsstransition_ = NULL;
  _internal_metadata_.Clear();
}

bool Ssids_Ssid_Dot11V_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(1966265218u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.BoolValue dot11v_dms = 15140429 [(.yext.schemapath) = "/ssids/ssid/dot11v/config/dot11v-dms"];
      case 15140429: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 121123434 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dot11v_dms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue dot11v_bssidle = 26064767 [(.yext.schemapath) = "/ssids/ssid/dot11v/config/dot11v-bssidle"];
      case 26064767: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 208518138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dot11v_bssidle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue dot11v_bssidle_timeout = 156062593 [(.yext.schemapath) = "/ssids/ssid/dot11v/config/dot11v-bssidle-timeout"];
      case 156062593: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 1248500746 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dot11v_bssidle_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue dot11v_bsstransition = 245783152 [(.yext.schemapath) = "/ssids/ssid/dot11v/config/dot11v-bsstransition"];
      case 245783152: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 1966265218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dot11v_bsstransition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config)
  return false;
#undef DO_
}

void Ssids_Ssid_Dot11V_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.BoolValue dot11v_dms = 15140429 [(.yext.schemapath) = "/ssids/ssid/dot11v/config/dot11v-dms"];
  if (this->has_dot11v_dms()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15140429, *this->dot11v_dms_, output);
  }

  // .ywrapper.BoolValue dot11v_bssidle = 26064767 [(.yext.schemapath) = "/ssids/ssid/dot11v/config/dot11v-bssidle"];
  if (this->has_dot11v_bssidle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26064767, *this->dot11v_bssidle_, output);
  }

  // .ywrapper.UintValue dot11v_bssidle_timeout = 156062593 [(.yext.schemapath) = "/ssids/ssid/dot11v/config/dot11v-bssidle-timeout"];
  if (this->has_dot11v_bssidle_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      156062593, *this->dot11v_bssidle_timeout_, output);
  }

  // .ywrapper.BoolValue dot11v_bsstransition = 245783152 [(.yext.schemapath) = "/ssids/ssid/dot11v/config/dot11v-bsstransition"];
  if (this->has_dot11v_bsstransition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      245783152, *this->dot11v_bsstransition_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config)
}

::google::protobuf::uint8* Ssids_Ssid_Dot11V_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.BoolValue dot11v_dms = 15140429 [(.yext.schemapath) = "/ssids/ssid/dot11v/config/dot11v-dms"];
  if (this->has_dot11v_dms()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15140429, *this->dot11v_dms_, deterministic, target);
  }

  // .ywrapper.BoolValue dot11v_bssidle = 26064767 [(.yext.schemapath) = "/ssids/ssid/dot11v/config/dot11v-bssidle"];
  if (this->has_dot11v_bssidle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        26064767, *this->dot11v_bssidle_, deterministic, target);
  }

  // .ywrapper.UintValue dot11v_bssidle_timeout = 156062593 [(.yext.schemapath) = "/ssids/ssid/dot11v/config/dot11v-bssidle-timeout"];
  if (this->has_dot11v_bssidle_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        156062593, *this->dot11v_bssidle_timeout_, deterministic, target);
  }

  // .ywrapper.BoolValue dot11v_bsstransition = 245783152 [(.yext.schemapath) = "/ssids/ssid/dot11v/config/dot11v-bsstransition"];
  if (this->has_dot11v_bsstransition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        245783152, *this->dot11v_bsstransition_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config)
  return target;
}

size_t Ssids_Ssid_Dot11V_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.BoolValue dot11v_dms = 15140429 [(.yext.schemapath) = "/ssids/ssid/dot11v/config/dot11v-dms"];
  if (this->has_dot11v_dms()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dot11v_dms_);
  }

  // .ywrapper.BoolValue dot11v_bssidle = 26064767 [(.yext.schemapath) = "/ssids/ssid/dot11v/config/dot11v-bssidle"];
  if (this->has_dot11v_bssidle()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dot11v_bssidle_);
  }

  // .ywrapper.UintValue dot11v_bssidle_timeout = 156062593 [(.yext.schemapath) = "/ssids/ssid/dot11v/config/dot11v-bssidle-timeout"];
  if (this->has_dot11v_bssidle_timeout()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dot11v_bssidle_timeout_);
  }

  // .ywrapper.BoolValue dot11v_bsstransition = 245783152 [(.yext.schemapath) = "/ssids/ssid/dot11v/config/dot11v-bsstransition"];
  if (this->has_dot11v_bsstransition()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dot11v_bsstransition_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ssids_Ssid_Dot11V_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Ssids_Ssid_Dot11V_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ssids_Ssid_Dot11V_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config)
    MergeFrom(*source);
  }
}

void Ssids_Ssid_Dot11V_Config::MergeFrom(const Ssids_Ssid_Dot11V_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dot11v_dms()) {
    mutable_dot11v_dms()->::ywrapper::BoolValue::MergeFrom(from.dot11v_dms());
  }
  if (from.has_dot11v_bssidle()) {
    mutable_dot11v_bssidle()->::ywrapper::BoolValue::MergeFrom(from.dot11v_bssidle());
  }
  if (from.has_dot11v_bssidle_timeout()) {
    mutable_dot11v_bssidle_timeout()->::ywrapper::UintValue::MergeFrom(from.dot11v_bssidle_timeout());
  }
  if (from.has_dot11v_bsstransition()) {
    mutable_dot11v_bsstransition()->::ywrapper::BoolValue::MergeFrom(from.dot11v_bsstransition());
  }
}

void Ssids_Ssid_Dot11V_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ssids_Ssid_Dot11V_Config::CopyFrom(const Ssids_Ssid_Dot11V_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ssids_Ssid_Dot11V_Config::IsInitialized() const {
  return true;
}

void Ssids_Ssid_Dot11V_Config::Swap(Ssids_Ssid_Dot11V_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ssids_Ssid_Dot11V_Config::InternalSwap(Ssids_Ssid_Dot11V_Config* other) {
  using std::swap;
  swap(dot11v_dms_, other->dot11v_dms_);
  swap(dot11v_bssidle_, other->dot11v_bssidle_);
  swap(dot11v_bssidle_timeout_, other->dot11v_bssidle_timeout_);
  swap(dot11v_bsstransition_, other->dot11v_bsstransition_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ssids_Ssid_Dot11V_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ssids_Ssid_Dot11V_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot11V_State_default_instance_._instance.get_mutable()->dot11v_bssidle_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot11V_State_default_instance_._instance.get_mutable()->dot11v_bssidle_timeout_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot11V_State_default_instance_._instance.get_mutable()->dot11v_bsstransition_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot11V_State_default_instance_._instance.get_mutable()->dot11v_dms_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
}
void Ssids_Ssid_Dot11V_State::clear_dot11v_bssidle() {
  if (GetArenaNoVirtual() == NULL && dot11v_bssidle_ != NULL) {
    delete dot11v_bssidle_;
  }
  dot11v_bssidle_ = NULL;
}
void Ssids_Ssid_Dot11V_State::clear_dot11v_bssidle_timeout() {
  if (GetArenaNoVirtual() == NULL && dot11v_bssidle_timeout_ != NULL) {
    delete dot11v_bssidle_timeout_;
  }
  dot11v_bssidle_timeout_ = NULL;
}
void Ssids_Ssid_Dot11V_State::clear_dot11v_bsstransition() {
  if (GetArenaNoVirtual() == NULL && dot11v_bsstransition_ != NULL) {
    delete dot11v_bsstransition_;
  }
  dot11v_bsstransition_ = NULL;
}
void Ssids_Ssid_Dot11V_State::clear_dot11v_dms() {
  if (GetArenaNoVirtual() == NULL && dot11v_dms_ != NULL) {
    delete dot11v_dms_;
  }
  dot11v_dms_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ssids_Ssid_Dot11V_State::kDot11VBssidleFieldNumber;
const int Ssids_Ssid_Dot11V_State::kDot11VBssidleTimeoutFieldNumber;
const int Ssids_Ssid_Dot11V_State::kDot11VBsstransitionFieldNumber;
const int Ssids_Ssid_Dot11V_State::kDot11VDmsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ssids_Ssid_Dot11V_State::Ssids_Ssid_Dot11V_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Dot11V_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State)
}
Ssids_Ssid_Dot11V_State::Ssids_Ssid_Dot11V_State(const Ssids_Ssid_Dot11V_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dot11v_dms()) {
    dot11v_dms_ = new ::ywrapper::BoolValue(*from.dot11v_dms_);
  } else {
    dot11v_dms_ = NULL;
  }
  if (from.has_dot11v_bssidle_timeout()) {
    dot11v_bssidle_timeout_ = new ::ywrapper::UintValue(*from.dot11v_bssidle_timeout_);
  } else {
    dot11v_bssidle_timeout_ = NULL;
  }
  if (from.has_dot11v_bsstransition()) {
    dot11v_bsstransition_ = new ::ywrapper::BoolValue(*from.dot11v_bsstransition_);
  } else {
    dot11v_bsstransition_ = NULL;
  }
  if (from.has_dot11v_bssidle()) {
    dot11v_bssidle_ = new ::ywrapper::BoolValue(*from.dot11v_bssidle_);
  } else {
    dot11v_bssidle_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State)
}

void Ssids_Ssid_Dot11V_State::SharedCtor() {
  ::memset(&dot11v_dms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dot11v_bssidle_) -
      reinterpret_cast<char*>(&dot11v_dms_)) + sizeof(dot11v_bssidle_));
  _cached_size_ = 0;
}

Ssids_Ssid_Dot11V_State::~Ssids_Ssid_Dot11V_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State)
  SharedDtor();
}

void Ssids_Ssid_Dot11V_State::SharedDtor() {
  if (this != internal_default_instance()) delete dot11v_dms_;
  if (this != internal_default_instance()) delete dot11v_bssidle_timeout_;
  if (this != internal_default_instance()) delete dot11v_bsstransition_;
  if (this != internal_default_instance()) delete dot11v_bssidle_;
}

void Ssids_Ssid_Dot11V_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ssids_Ssid_Dot11V_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ssids_Ssid_Dot11V_State& Ssids_Ssid_Dot11V_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Dot11V_State();
  return *internal_default_instance();
}

Ssids_Ssid_Dot11V_State* Ssids_Ssid_Dot11V_State::New(::google::protobuf::Arena* arena) const {
  Ssids_Ssid_Dot11V_State* n = new Ssids_Ssid_Dot11V_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ssids_Ssid_Dot11V_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && dot11v_dms_ != NULL) {
    delete dot11v_dms_;
  }
  dot11v_dms_ = NULL;
  if (GetArenaNoVirtual() == NULL && dot11v_bssidle_timeout_ != NULL) {
    delete dot11v_bssidle_timeout_;
  }
  dot11v_bssidle_timeout_ = NULL;
  if (GetArenaNoVirtual() == NULL && dot11v_bsstransition_ != NULL) {
    delete dot11v_bsstransition_;
  }
  dot11v_bsstransition_ = NULL;
  if (GetArenaNoVirtual() == NULL && dot11v_bssidle_ != NULL) {
    delete dot11v_bssidle_;
  }
  dot11v_bssidle_ = NULL;
  _internal_metadata_.Clear();
}

bool Ssids_Ssid_Dot11V_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2479398594u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.BoolValue dot11v_dms = 111152750 [(.yext.schemapath) = "/ssids/ssid/dot11v/state/dot11v-dms"];
      case 111152750: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 889222002 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dot11v_dms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue dot11v_bssidle_timeout = 132989062 [(.yext.schemapath) = "/ssids/ssid/dot11v/state/dot11v-bssidle-timeout"];
      case 132989062: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 1063912498 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dot11v_bssidle_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue dot11v_bsstransition = 165186503 [(.yext.schemapath) = "/ssids/ssid/dot11v/state/dot11v-bsstransition"];
      case 165186503: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 1321492026 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dot11v_bsstransition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue dot11v_bssidle = 309924824 [(.yext.schemapath) = "/ssids/ssid/dot11v/state/dot11v-bssidle"];
      case 309924824: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 2479398594 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dot11v_bssidle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State)
  return false;
#undef DO_
}

void Ssids_Ssid_Dot11V_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.BoolValue dot11v_dms = 111152750 [(.yext.schemapath) = "/ssids/ssid/dot11v/state/dot11v-dms"];
  if (this->has_dot11v_dms()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      111152750, *this->dot11v_dms_, output);
  }

  // .ywrapper.UintValue dot11v_bssidle_timeout = 132989062 [(.yext.schemapath) = "/ssids/ssid/dot11v/state/dot11v-bssidle-timeout"];
  if (this->has_dot11v_bssidle_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      132989062, *this->dot11v_bssidle_timeout_, output);
  }

  // .ywrapper.BoolValue dot11v_bsstransition = 165186503 [(.yext.schemapath) = "/ssids/ssid/dot11v/state/dot11v-bsstransition"];
  if (this->has_dot11v_bsstransition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      165186503, *this->dot11v_bsstransition_, output);
  }

  // .ywrapper.BoolValue dot11v_bssidle = 309924824 [(.yext.schemapath) = "/ssids/ssid/dot11v/state/dot11v-bssidle"];
  if (this->has_dot11v_bssidle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      309924824, *this->dot11v_bssidle_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State)
}

::google::protobuf::uint8* Ssids_Ssid_Dot11V_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.BoolValue dot11v_dms = 111152750 [(.yext.schemapath) = "/ssids/ssid/dot11v/state/dot11v-dms"];
  if (this->has_dot11v_dms()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        111152750, *this->dot11v_dms_, deterministic, target);
  }

  // .ywrapper.UintValue dot11v_bssidle_timeout = 132989062 [(.yext.schemapath) = "/ssids/ssid/dot11v/state/dot11v-bssidle-timeout"];
  if (this->has_dot11v_bssidle_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        132989062, *this->dot11v_bssidle_timeout_, deterministic, target);
  }

  // .ywrapper.BoolValue dot11v_bsstransition = 165186503 [(.yext.schemapath) = "/ssids/ssid/dot11v/state/dot11v-bsstransition"];
  if (this->has_dot11v_bsstransition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        165186503, *this->dot11v_bsstransition_, deterministic, target);
  }

  // .ywrapper.BoolValue dot11v_bssidle = 309924824 [(.yext.schemapath) = "/ssids/ssid/dot11v/state/dot11v-bssidle"];
  if (this->has_dot11v_bssidle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        309924824, *this->dot11v_bssidle_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State)
  return target;
}

size_t Ssids_Ssid_Dot11V_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.BoolValue dot11v_dms = 111152750 [(.yext.schemapath) = "/ssids/ssid/dot11v/state/dot11v-dms"];
  if (this->has_dot11v_dms()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dot11v_dms_);
  }

  // .ywrapper.UintValue dot11v_bssidle_timeout = 132989062 [(.yext.schemapath) = "/ssids/ssid/dot11v/state/dot11v-bssidle-timeout"];
  if (this->has_dot11v_bssidle_timeout()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dot11v_bssidle_timeout_);
  }

  // .ywrapper.BoolValue dot11v_bsstransition = 165186503 [(.yext.schemapath) = "/ssids/ssid/dot11v/state/dot11v-bsstransition"];
  if (this->has_dot11v_bsstransition()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dot11v_bsstransition_);
  }

  // .ywrapper.BoolValue dot11v_bssidle = 309924824 [(.yext.schemapath) = "/ssids/ssid/dot11v/state/dot11v-bssidle"];
  if (this->has_dot11v_bssidle()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dot11v_bssidle_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ssids_Ssid_Dot11V_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Ssids_Ssid_Dot11V_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ssids_Ssid_Dot11V_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State)
    MergeFrom(*source);
  }
}

void Ssids_Ssid_Dot11V_State::MergeFrom(const Ssids_Ssid_Dot11V_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dot11v_dms()) {
    mutable_dot11v_dms()->::ywrapper::BoolValue::MergeFrom(from.dot11v_dms());
  }
  if (from.has_dot11v_bssidle_timeout()) {
    mutable_dot11v_bssidle_timeout()->::ywrapper::UintValue::MergeFrom(from.dot11v_bssidle_timeout());
  }
  if (from.has_dot11v_bsstransition()) {
    mutable_dot11v_bsstransition()->::ywrapper::BoolValue::MergeFrom(from.dot11v_bsstransition());
  }
  if (from.has_dot11v_bssidle()) {
    mutable_dot11v_bssidle()->::ywrapper::BoolValue::MergeFrom(from.dot11v_bssidle());
  }
}

void Ssids_Ssid_Dot11V_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ssids_Ssid_Dot11V_State::CopyFrom(const Ssids_Ssid_Dot11V_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ssids_Ssid_Dot11V_State::IsInitialized() const {
  return true;
}

void Ssids_Ssid_Dot11V_State::Swap(Ssids_Ssid_Dot11V_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ssids_Ssid_Dot11V_State::InternalSwap(Ssids_Ssid_Dot11V_State* other) {
  using std::swap;
  swap(dot11v_dms_, other->dot11v_dms_);
  swap(dot11v_bssidle_timeout_, other->dot11v_bssidle_timeout_);
  swap(dot11v_bsstransition_, other->dot11v_bsstransition_);
  swap(dot11v_bssidle_, other->dot11v_bssidle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ssids_Ssid_Dot11V_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ssids_Ssid_Dot11V::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot11V_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_Config*>(
      ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_Config::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot11V_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_State*>(
      ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ssids_Ssid_Dot11V::kConfigFieldNumber;
const int Ssids_Ssid_Dot11V::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ssids_Ssid_Dot11V::Ssids_Ssid_Dot11V()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Dot11V();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V)
}
Ssids_Ssid_Dot11V::Ssids_Ssid_Dot11V(const Ssids_Ssid_Dot11V& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_State(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V)
}

void Ssids_Ssid_Dot11V::SharedCtor() {
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&config_)) + sizeof(state_));
  _cached_size_ = 0;
}

Ssids_Ssid_Dot11V::~Ssids_Ssid_Dot11V() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V)
  SharedDtor();
}

void Ssids_Ssid_Dot11V::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void Ssids_Ssid_Dot11V::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ssids_Ssid_Dot11V::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ssids_Ssid_Dot11V& Ssids_Ssid_Dot11V::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Dot11V();
  return *internal_default_instance();
}

Ssids_Ssid_Dot11V* Ssids_Ssid_Dot11V::New(::google::protobuf::Arena* arena) const {
  Ssids_Ssid_Dot11V* n = new Ssids_Ssid_Dot11V;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ssids_Ssid_Dot11V::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool Ssids_Ssid_Dot11V::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3468132602u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config config = 232099554 [(.yext.schemapath) = "/ssids/ssid/dot11v/config"];
      case 232099554: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 1856796434 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State state = 433516575 [(.yext.schemapath) = "/ssids/ssid/dot11v/state"];
      case 433516575: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 3468132602 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V)
  return false;
#undef DO_
}

void Ssids_Ssid_Dot11V::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config config = 232099554 [(.yext.schemapath) = "/ssids/ssid/dot11v/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      232099554, *this->config_, output);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State state = 433516575 [(.yext.schemapath) = "/ssids/ssid/dot11v/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      433516575, *this->state_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V)
}

::google::protobuf::uint8* Ssids_Ssid_Dot11V::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config config = 232099554 [(.yext.schemapath) = "/ssids/ssid/dot11v/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        232099554, *this->config_, deterministic, target);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State state = 433516575 [(.yext.schemapath) = "/ssids/ssid/dot11v/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        433516575, *this->state_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V)
  return target;
}

size_t Ssids_Ssid_Dot11V::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config config = 232099554 [(.yext.schemapath) = "/ssids/ssid/dot11v/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State state = 433516575 [(.yext.schemapath) = "/ssids/ssid/dot11v/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ssids_Ssid_Dot11V::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V)
  GOOGLE_DCHECK_NE(&from, this);
  const Ssids_Ssid_Dot11V* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ssids_Ssid_Dot11V>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V)
    MergeFrom(*source);
  }
}

void Ssids_Ssid_Dot11V::MergeFrom(const Ssids_Ssid_Dot11V& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_Config::MergeFrom(from.config());
  }
  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_State::MergeFrom(from.state());
  }
}

void Ssids_Ssid_Dot11V::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ssids_Ssid_Dot11V::CopyFrom(const Ssids_Ssid_Dot11V& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ssids_Ssid_Dot11V::IsInitialized() const {
  return true;
}

void Ssids_Ssid_Dot11V::Swap(Ssids_Ssid_Dot11V* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ssids_Ssid_Dot11V::InternalSwap(Ssids_Ssid_Dot11V* other) {
  using std::swap;
  swap(config_, other->config_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ssids_Ssid_Dot11V::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ssids_Ssid_Dot1XTimers_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot1XTimers_Config_default_instance_._instance.get_mutable()->blacklist_time_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot1XTimers_Config_default_instance_._instance.get_mutable()->max_auth_failures_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Ssids_Ssid_Dot1XTimers_Config::clear_blacklist_time() {
  if (GetArenaNoVirtual() == NULL && blacklist_time_ != NULL) {
    delete blacklist_time_;
  }
  blacklist_time_ = NULL;
}
void Ssids_Ssid_Dot1XTimers_Config::clear_max_auth_failures() {
  if (GetArenaNoVirtual() == NULL && max_auth_failures_ != NULL) {
    delete max_auth_failures_;
  }
  max_auth_failures_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ssids_Ssid_Dot1XTimers_Config::kBlacklistTimeFieldNumber;
const int Ssids_Ssid_Dot1XTimers_Config::kMaxAuthFailuresFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ssids_Ssid_Dot1XTimers_Config::Ssids_Ssid_Dot1XTimers_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Dot1XTimers_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.Config)
}
Ssids_Ssid_Dot1XTimers_Config::Ssids_Ssid_Dot1XTimers_Config(const Ssids_Ssid_Dot1XTimers_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_blacklist_time()) {
    blacklist_time_ = new ::ywrapper::UintValue(*from.blacklist_time_);
  } else {
    blacklist_time_ = NULL;
  }
  if (from.has_max_auth_failures()) {
    max_auth_failures_ = new ::ywrapper::UintValue(*from.max_auth_failures_);
  } else {
    max_auth_failures_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.Config)
}

void Ssids_Ssid_Dot1XTimers_Config::SharedCtor() {
  ::memset(&blacklist_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_auth_failures_) -
      reinterpret_cast<char*>(&blacklist_time_)) + sizeof(max_auth_failures_));
  _cached_size_ = 0;
}

Ssids_Ssid_Dot1XTimers_Config::~Ssids_Ssid_Dot1XTimers_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.Config)
  SharedDtor();
}

void Ssids_Ssid_Dot1XTimers_Config::SharedDtor() {
  if (this != internal_default_instance()) delete blacklist_time_;
  if (this != internal_default_instance()) delete max_auth_failures_;
}

void Ssids_Ssid_Dot1XTimers_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ssids_Ssid_Dot1XTimers_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ssids_Ssid_Dot1XTimers_Config& Ssids_Ssid_Dot1XTimers_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Dot1XTimers_Config();
  return *internal_default_instance();
}

Ssids_Ssid_Dot1XTimers_Config* Ssids_Ssid_Dot1XTimers_Config::New(::google::protobuf::Arena* arena) const {
  Ssids_Ssid_Dot1XTimers_Config* n = new Ssids_Ssid_Dot1XTimers_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ssids_Ssid_Dot1XTimers_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && blacklist_time_ != NULL) {
    delete blacklist_time_;
  }
  blacklist_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && max_auth_failures_ != NULL) {
    delete max_auth_failures_;
  }
  max_auth_failures_ = NULL;
  _internal_metadata_.Clear();
}

bool Ssids_Ssid_Dot1XTimers_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2288618066u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue blacklist_time = 60044230 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers/config/blacklist-time"];
      case 60044230: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 480353842 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_blacklist_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue max_auth_failures = 286077258 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers/config/max-auth-failures"];
      case 286077258: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 2288618066 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_max_auth_failures()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.Config)
  return false;
#undef DO_
}

void Ssids_Ssid_Dot1XTimers_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue blacklist_time = 60044230 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers/config/blacklist-time"];
  if (this->has_blacklist_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60044230, *this->blacklist_time_, output);
  }

  // .ywrapper.UintValue max_auth_failures = 286077258 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers/config/max-auth-failures"];
  if (this->has_max_auth_failures()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      286077258, *this->max_auth_failures_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.Config)
}

::google::protobuf::uint8* Ssids_Ssid_Dot1XTimers_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue blacklist_time = 60044230 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers/config/blacklist-time"];
  if (this->has_blacklist_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        60044230, *this->blacklist_time_, deterministic, target);
  }

  // .ywrapper.UintValue max_auth_failures = 286077258 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers/config/max-auth-failures"];
  if (this->has_max_auth_failures()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        286077258, *this->max_auth_failures_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.Config)
  return target;
}

size_t Ssids_Ssid_Dot1XTimers_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue blacklist_time = 60044230 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers/config/blacklist-time"];
  if (this->has_blacklist_time()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->blacklist_time_);
  }

  // .ywrapper.UintValue max_auth_failures = 286077258 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers/config/max-auth-failures"];
  if (this->has_max_auth_failures()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->max_auth_failures_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ssids_Ssid_Dot1XTimers_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Ssids_Ssid_Dot1XTimers_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ssids_Ssid_Dot1XTimers_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.Config)
    MergeFrom(*source);
  }
}

void Ssids_Ssid_Dot1XTimers_Config::MergeFrom(const Ssids_Ssid_Dot1XTimers_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_blacklist_time()) {
    mutable_blacklist_time()->::ywrapper::UintValue::MergeFrom(from.blacklist_time());
  }
  if (from.has_max_auth_failures()) {
    mutable_max_auth_failures()->::ywrapper::UintValue::MergeFrom(from.max_auth_failures());
  }
}

void Ssids_Ssid_Dot1XTimers_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ssids_Ssid_Dot1XTimers_Config::CopyFrom(const Ssids_Ssid_Dot1XTimers_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ssids_Ssid_Dot1XTimers_Config::IsInitialized() const {
  return true;
}

void Ssids_Ssid_Dot1XTimers_Config::Swap(Ssids_Ssid_Dot1XTimers_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ssids_Ssid_Dot1XTimers_Config::InternalSwap(Ssids_Ssid_Dot1XTimers_Config* other) {
  using std::swap;
  swap(blacklist_time_, other->blacklist_time_);
  swap(max_auth_failures_, other->max_auth_failures_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ssids_Ssid_Dot1XTimers_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ssids_Ssid_Dot1XTimers_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot1XTimers_State_default_instance_._instance.get_mutable()->blacklist_time_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot1XTimers_State_default_instance_._instance.get_mutable()->max_auth_failures_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
}
void Ssids_Ssid_Dot1XTimers_State::clear_blacklist_time() {
  if (GetArenaNoVirtual() == NULL && blacklist_time_ != NULL) {
    delete blacklist_time_;
  }
  blacklist_time_ = NULL;
}
void Ssids_Ssid_Dot1XTimers_State::clear_max_auth_failures() {
  if (GetArenaNoVirtual() == NULL && max_auth_failures_ != NULL) {
    delete max_auth_failures_;
  }
  max_auth_failures_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ssids_Ssid_Dot1XTimers_State::kBlacklistTimeFieldNumber;
const int Ssids_Ssid_Dot1XTimers_State::kMaxAuthFailuresFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ssids_Ssid_Dot1XTimers_State::Ssids_Ssid_Dot1XTimers_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Dot1XTimers_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.State)
}
Ssids_Ssid_Dot1XTimers_State::Ssids_Ssid_Dot1XTimers_State(const Ssids_Ssid_Dot1XTimers_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_max_auth_failures()) {
    max_auth_failures_ = new ::ywrapper::UintValue(*from.max_auth_failures_);
  } else {
    max_auth_failures_ = NULL;
  }
  if (from.has_blacklist_time()) {
    blacklist_time_ = new ::ywrapper::UintValue(*from.blacklist_time_);
  } else {
    blacklist_time_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.State)
}

void Ssids_Ssid_Dot1XTimers_State::SharedCtor() {
  ::memset(&max_auth_failures_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blacklist_time_) -
      reinterpret_cast<char*>(&max_auth_failures_)) + sizeof(blacklist_time_));
  _cached_size_ = 0;
}

Ssids_Ssid_Dot1XTimers_State::~Ssids_Ssid_Dot1XTimers_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.State)
  SharedDtor();
}

void Ssids_Ssid_Dot1XTimers_State::SharedDtor() {
  if (this != internal_default_instance()) delete max_auth_failures_;
  if (this != internal_default_instance()) delete blacklist_time_;
}

void Ssids_Ssid_Dot1XTimers_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ssids_Ssid_Dot1XTimers_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ssids_Ssid_Dot1XTimers_State& Ssids_Ssid_Dot1XTimers_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Dot1XTimers_State();
  return *internal_default_instance();
}

Ssids_Ssid_Dot1XTimers_State* Ssids_Ssid_Dot1XTimers_State::New(::google::protobuf::Arena* arena) const {
  Ssids_Ssid_Dot1XTimers_State* n = new Ssids_Ssid_Dot1XTimers_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ssids_Ssid_Dot1XTimers_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && max_auth_failures_ != NULL) {
    delete max_auth_failures_;
  }
  max_auth_failures_ = NULL;
  if (GetArenaNoVirtual() == NULL && blacklist_time_ != NULL) {
    delete blacklist_time_;
  }
  blacklist_time_ = NULL;
  _internal_metadata_.Clear();
}

bool Ssids_Ssid_Dot1XTimers_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(2771500138u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.UintValue max_auth_failures = 272897807 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers/state/max-auth-failures"];
      case 272897807: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 2183182458 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_max_auth_failures()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue blacklist_time = 346437517 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers/state/blacklist-time"];
      case 346437517: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 2771500138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_blacklist_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.State)
  return false;
#undef DO_
}

void Ssids_Ssid_Dot1XTimers_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue max_auth_failures = 272897807 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers/state/max-auth-failures"];
  if (this->has_max_auth_failures()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      272897807, *this->max_auth_failures_, output);
  }

  // .ywrapper.UintValue blacklist_time = 346437517 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers/state/blacklist-time"];
  if (this->has_blacklist_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      346437517, *this->blacklist_time_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.State)
}

::google::protobuf::uint8* Ssids_Ssid_Dot1XTimers_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.UintValue max_auth_failures = 272897807 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers/state/max-auth-failures"];
  if (this->has_max_auth_failures()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        272897807, *this->max_auth_failures_, deterministic, target);
  }

  // .ywrapper.UintValue blacklist_time = 346437517 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers/state/blacklist-time"];
  if (this->has_blacklist_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        346437517, *this->blacklist_time_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.State)
  return target;
}

size_t Ssids_Ssid_Dot1XTimers_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ywrapper.UintValue max_auth_failures = 272897807 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers/state/max-auth-failures"];
  if (this->has_max_auth_failures()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->max_auth_failures_);
  }

  // .ywrapper.UintValue blacklist_time = 346437517 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers/state/blacklist-time"];
  if (this->has_blacklist_time()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->blacklist_time_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ssids_Ssid_Dot1XTimers_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Ssids_Ssid_Dot1XTimers_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ssids_Ssid_Dot1XTimers_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.State)
    MergeFrom(*source);
  }
}

void Ssids_Ssid_Dot1XTimers_State::MergeFrom(const Ssids_Ssid_Dot1XTimers_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_max_auth_failures()) {
    mutable_max_auth_failures()->::ywrapper::UintValue::MergeFrom(from.max_auth_failures());
  }
  if (from.has_blacklist_time()) {
    mutable_blacklist_time()->::ywrapper::UintValue::MergeFrom(from.blacklist_time());
  }
}

void Ssids_Ssid_Dot1XTimers_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ssids_Ssid_Dot1XTimers_State::CopyFrom(const Ssids_Ssid_Dot1XTimers_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ssids_Ssid_Dot1XTimers_State::IsInitialized() const {
  return true;
}

void Ssids_Ssid_Dot1XTimers_State::Swap(Ssids_Ssid_Dot1XTimers_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ssids_Ssid_Dot1XTimers_State::InternalSwap(Ssids_Ssid_Dot1XTimers_State* other) {
  using std::swap;
  swap(max_auth_failures_, other->max_auth_failures_);
  swap(blacklist_time_, other->blacklist_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ssids_Ssid_Dot1XTimers_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ssids_Ssid_Dot1XTimers::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot1XTimers_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_Config*>(
      ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_Config::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot1XTimers_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_State*>(
      ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ssids_Ssid_Dot1XTimers::kConfigFieldNumber;
const int Ssids_Ssid_Dot1XTimers::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ssids_Ssid_Dot1XTimers::Ssids_Ssid_Dot1XTimers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Dot1XTimers();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers)
}
Ssids_Ssid_Dot1XTimers::Ssids_Ssid_Dot1XTimers(const Ssids_Ssid_Dot1XTimers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers)
}

void Ssids_Ssid_Dot1XTimers::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&state_)) + sizeof(config_));
  _cached_size_ = 0;
}

Ssids_Ssid_Dot1XTimers::~Ssids_Ssid_Dot1XTimers() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers)
  SharedDtor();
}

void Ssids_Ssid_Dot1XTimers::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete config_;
}

void Ssids_Ssid_Dot1XTimers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ssids_Ssid_Dot1XTimers::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ssids_Ssid_Dot1XTimers& Ssids_Ssid_Dot1XTimers::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Dot1XTimers();
  return *internal_default_instance();
}

Ssids_Ssid_Dot1XTimers* Ssids_Ssid_Dot1XTimers::New(::google::protobuf::Arena* arena) const {
  Ssids_Ssid_Dot1XTimers* n = new Ssids_Ssid_Dot1XTimers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ssids_Ssid_Dot1XTimers::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  _internal_metadata_.Clear();
}

bool Ssids_Ssid_Dot1XTimers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3569890562u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.State state = 73845529 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers/state"];
      case 73845529: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 590764234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.Config config = 446236320 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers/config"];
      case 446236320: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 3569890562 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers)
  return false;
#undef DO_
}

void Ssids_Ssid_Dot1XTimers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.State state = 73845529 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      73845529, *this->state_, output);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.Config config = 446236320 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      446236320, *this->config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers)
}

::google::protobuf::uint8* Ssids_Ssid_Dot1XTimers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.State state = 73845529 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        73845529, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.Config config = 446236320 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        446236320, *this->config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers)
  return target;
}

size_t Ssids_Ssid_Dot1XTimers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.State state = 73845529 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.Config config = 446236320 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ssids_Ssid_Dot1XTimers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers)
  GOOGLE_DCHECK_NE(&from, this);
  const Ssids_Ssid_Dot1XTimers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ssids_Ssid_Dot1XTimers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers)
    MergeFrom(*source);
  }
}

void Ssids_Ssid_Dot1XTimers::MergeFrom(const Ssids_Ssid_Dot1XTimers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_State::MergeFrom(from.state());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_Config::MergeFrom(from.config());
  }
}

void Ssids_Ssid_Dot1XTimers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ssids_Ssid_Dot1XTimers::CopyFrom(const Ssids_Ssid_Dot1XTimers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ssids_Ssid_Dot1XTimers::IsInitialized() const {
  return true;
}

void Ssids_Ssid_Dot1XTimers::Swap(Ssids_Ssid_Dot1XTimers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ssids_Ssid_Dot1XTimers::InternalSwap(Ssids_Ssid_Dot1XTimers* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(config_, other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ssids_Ssid_Dot1XTimers::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ssids_Ssid_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_State_default_instance_._instance.get_mutable()->advertise_apname_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_State_default_instance_._instance.get_mutable()->broadcast_filter_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_State_default_instance_._instance.get_mutable()->bss_channel_utilization_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_State_default_instance_._instance.get_mutable()->bssid_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_State_default_instance_._instance.get_mutable()->csa_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_State_default_instance_._instance.get_mutable()->dhcp_required_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_State_default_instance_._instance.get_mutable()->dot11k_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_State_default_instance_._instance.get_mutable()->dva_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_State_default_instance_._instance.get_mutable()->enabled_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_State_default_instance_._instance.get_mutable()->gtk_timeout_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_State_default_instance_._instance.get_mutable()->hidden_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_State_default_instance_._instance.get_mutable()->ipv6_ndp_filter_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_State_default_instance_._instance.get_mutable()->ipv6_ndp_filter_timer_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_State_default_instance_._instance.get_mutable()->mobility_domain_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_State_default_instance_._instance.get_mutable()->multicast_filter_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_State_default_instance_._instance.get_mutable()->name_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_State_default_instance_._instance.get_mutable()->okc_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_State_default_instance_._instance.get_mutable()->ptk_timeout_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_State_default_instance_._instance.get_mutable()->qbss_load_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_State_default_instance_._instance.get_mutable()->rx_bss_dot11_channel_utilization_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_State_default_instance_._instance.get_mutable()->server_group_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_State_default_instance_._instance.get_mutable()->station_isolation_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_State_default_instance_._instance.get_mutable()->tx_bss_dot11_channel_utilization_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_State_default_instance_._instance.get_mutable()->vlan_id_ = const_cast< ::ywrapper::UintValue*>(
      ::ywrapper::UintValue::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_State_default_instance_._instance.get_mutable()->wpa2_psk_ = const_cast< ::ywrapper::StringValue*>(
      ::ywrapper::StringValue::internal_default_instance());
}
void Ssids_Ssid_State::clear_advertise_apname() {
  if (GetArenaNoVirtual() == NULL && advertise_apname_ != NULL) {
    delete advertise_apname_;
  }
  advertise_apname_ = NULL;
}
void Ssids_Ssid_State::clear_broadcast_filter() {
  if (GetArenaNoVirtual() == NULL && broadcast_filter_ != NULL) {
    delete broadcast_filter_;
  }
  broadcast_filter_ = NULL;
}
void Ssids_Ssid_State::clear_bss_channel_utilization() {
  if (GetArenaNoVirtual() == NULL && bss_channel_utilization_ != NULL) {
    delete bss_channel_utilization_;
  }
  bss_channel_utilization_ = NULL;
}
void Ssids_Ssid_State::clear_bssid() {
  if (GetArenaNoVirtual() == NULL && bssid_ != NULL) {
    delete bssid_;
  }
  bssid_ = NULL;
}
void Ssids_Ssid_State::clear_csa() {
  if (GetArenaNoVirtual() == NULL && csa_ != NULL) {
    delete csa_;
  }
  csa_ = NULL;
}
void Ssids_Ssid_State::clear_dhcp_required() {
  if (GetArenaNoVirtual() == NULL && dhcp_required_ != NULL) {
    delete dhcp_required_;
  }
  dhcp_required_ = NULL;
}
void Ssids_Ssid_State::clear_dot11k() {
  if (GetArenaNoVirtual() == NULL && dot11k_ != NULL) {
    delete dot11k_;
  }
  dot11k_ = NULL;
}
void Ssids_Ssid_State::clear_dva() {
  if (GetArenaNoVirtual() == NULL && dva_ != NULL) {
    delete dva_;
  }
  dva_ = NULL;
}
void Ssids_Ssid_State::clear_enabled() {
  if (GetArenaNoVirtual() == NULL && enabled_ != NULL) {
    delete enabled_;
  }
  enabled_ = NULL;
}
void Ssids_Ssid_State::clear_gtk_timeout() {
  if (GetArenaNoVirtual() == NULL && gtk_timeout_ != NULL) {
    delete gtk_timeout_;
  }
  gtk_timeout_ = NULL;
}
void Ssids_Ssid_State::clear_hidden() {
  if (GetArenaNoVirtual() == NULL && hidden_ != NULL) {
    delete hidden_;
  }
  hidden_ = NULL;
}
void Ssids_Ssid_State::clear_ipv6_ndp_filter() {
  if (GetArenaNoVirtual() == NULL && ipv6_ndp_filter_ != NULL) {
    delete ipv6_ndp_filter_;
  }
  ipv6_ndp_filter_ = NULL;
}
void Ssids_Ssid_State::clear_ipv6_ndp_filter_timer() {
  if (GetArenaNoVirtual() == NULL && ipv6_ndp_filter_timer_ != NULL) {
    delete ipv6_ndp_filter_timer_;
  }
  ipv6_ndp_filter_timer_ = NULL;
}
void Ssids_Ssid_State::clear_mobility_domain() {
  if (GetArenaNoVirtual() == NULL && mobility_domain_ != NULL) {
    delete mobility_domain_;
  }
  mobility_domain_ = NULL;
}
void Ssids_Ssid_State::clear_multicast_filter() {
  if (GetArenaNoVirtual() == NULL && multicast_filter_ != NULL) {
    delete multicast_filter_;
  }
  multicast_filter_ = NULL;
}
void Ssids_Ssid_State::clear_name() {
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
}
void Ssids_Ssid_State::clear_okc() {
  if (GetArenaNoVirtual() == NULL && okc_ != NULL) {
    delete okc_;
  }
  okc_ = NULL;
}
void Ssids_Ssid_State::clear_ptk_timeout() {
  if (GetArenaNoVirtual() == NULL && ptk_timeout_ != NULL) {
    delete ptk_timeout_;
  }
  ptk_timeout_ = NULL;
}
void Ssids_Ssid_State::clear_qbss_load() {
  if (GetArenaNoVirtual() == NULL && qbss_load_ != NULL) {
    delete qbss_load_;
  }
  qbss_load_ = NULL;
}
void Ssids_Ssid_State::clear_rx_bss_dot11_channel_utilization() {
  if (GetArenaNoVirtual() == NULL && rx_bss_dot11_channel_utilization_ != NULL) {
    delete rx_bss_dot11_channel_utilization_;
  }
  rx_bss_dot11_channel_utilization_ = NULL;
}
void Ssids_Ssid_State::clear_server_group() {
  if (GetArenaNoVirtual() == NULL && server_group_ != NULL) {
    delete server_group_;
  }
  server_group_ = NULL;
}
void Ssids_Ssid_State::clear_station_isolation() {
  if (GetArenaNoVirtual() == NULL && station_isolation_ != NULL) {
    delete station_isolation_;
  }
  station_isolation_ = NULL;
}
void Ssids_Ssid_State::clear_tx_bss_dot11_channel_utilization() {
  if (GetArenaNoVirtual() == NULL && tx_bss_dot11_channel_utilization_ != NULL) {
    delete tx_bss_dot11_channel_utilization_;
  }
  tx_bss_dot11_channel_utilization_ = NULL;
}
void Ssids_Ssid_State::clear_vlan_id() {
  if (GetArenaNoVirtual() == NULL && vlan_id_ != NULL) {
    delete vlan_id_;
  }
  vlan_id_ = NULL;
}
void Ssids_Ssid_State::clear_wpa2_psk() {
  if (GetArenaNoVirtual() == NULL && wpa2_psk_ != NULL) {
    delete wpa2_psk_;
  }
  wpa2_psk_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ssids_Ssid_State::kAdvertiseApnameFieldNumber;
const int Ssids_Ssid_State::kBasicDataRatesFieldNumber;
const int Ssids_Ssid_State::kBroadcastFilterFieldNumber;
const int Ssids_Ssid_State::kBssChannelUtilizationFieldNumber;
const int Ssids_Ssid_State::kBssidFieldNumber;
const int Ssids_Ssid_State::kCsaFieldNumber;
const int Ssids_Ssid_State::kDhcpRequiredFieldNumber;
const int Ssids_Ssid_State::kDot11KFieldNumber;
const int Ssids_Ssid_State::kDvaFieldNumber;
const int Ssids_Ssid_State::kEnabledFieldNumber;
const int Ssids_Ssid_State::kGtkTimeoutFieldNumber;
const int Ssids_Ssid_State::kHiddenFieldNumber;
const int Ssids_Ssid_State::kIpv6NdpFilterFieldNumber;
const int Ssids_Ssid_State::kIpv6NdpFilterTimerFieldNumber;
const int Ssids_Ssid_State::kMobilityDomainFieldNumber;
const int Ssids_Ssid_State::kMulticastFilterFieldNumber;
const int Ssids_Ssid_State::kNameFieldNumber;
const int Ssids_Ssid_State::kOkcFieldNumber;
const int Ssids_Ssid_State::kOperatingFrequencyFieldNumber;
const int Ssids_Ssid_State::kOpmodeFieldNumber;
const int Ssids_Ssid_State::kPtkTimeoutFieldNumber;
const int Ssids_Ssid_State::kQbssLoadFieldNumber;
const int Ssids_Ssid_State::kRxBssDot11ChannelUtilizationFieldNumber;
const int Ssids_Ssid_State::kServerGroupFieldNumber;
const int Ssids_Ssid_State::kStationIsolationFieldNumber;
const int Ssids_Ssid_State::kSupportedDataRatesFieldNumber;
const int Ssids_Ssid_State::kTxBssDot11ChannelUtilizationFieldNumber;
const int Ssids_Ssid_State::kVlanIdFieldNumber;
const int Ssids_Ssid_State::kWpa2PskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ssids_Ssid_State::Ssids_Ssid_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.State)
}
Ssids_Ssid_State::Ssids_Ssid_State(const Ssids_Ssid_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      basic_data_rates_(from.basic_data_rates_),
      supported_data_rates_(from.supported_data_rates_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_station_isolation()) {
    station_isolation_ = new ::ywrapper::BoolValue(*from.station_isolation_);
  } else {
    station_isolation_ = NULL;
  }
  if (from.has_name()) {
    name_ = new ::ywrapper::StringValue(*from.name_);
  } else {
    name_ = NULL;
  }
  if (from.has_tx_bss_dot11_channel_utilization()) {
    tx_bss_dot11_channel_utilization_ = new ::ywrapper::UintValue(*from.tx_bss_dot11_channel_utilization_);
  } else {
    tx_bss_dot11_channel_utilization_ = NULL;
  }
  if (from.has_multicast_filter()) {
    multicast_filter_ = new ::ywrapper::BoolValue(*from.multicast_filter_);
  } else {
    multicast_filter_ = NULL;
  }
  if (from.has_vlan_id()) {
    vlan_id_ = new ::ywrapper::UintValue(*from.vlan_id_);
  } else {
    vlan_id_ = NULL;
  }
  if (from.has_okc()) {
    okc_ = new ::ywrapper::BoolValue(*from.okc_);
  } else {
    okc_ = NULL;
  }
  if (from.has_csa()) {
    csa_ = new ::ywrapper::BoolValue(*from.csa_);
  } else {
    csa_ = NULL;
  }
  if (from.has_advertise_apname()) {
    advertise_apname_ = new ::ywrapper::BoolValue(*from.advertise_apname_);
  } else {
    advertise_apname_ = NULL;
  }
  if (from.has_dva()) {
    dva_ = new ::ywrapper::BoolValue(*from.dva_);
  } else {
    dva_ = NULL;
  }
  if (from.has_hidden()) {
    hidden_ = new ::ywrapper::BoolValue(*from.hidden_);
  } else {
    hidden_ = NULL;
  }
  if (from.has_bssid()) {
    bssid_ = new ::ywrapper::StringValue(*from.bssid_);
  } else {
    bssid_ = NULL;
  }
  if (from.has_enabled()) {
    enabled_ = new ::ywrapper::BoolValue(*from.enabled_);
  } else {
    enabled_ = NULL;
  }
  if (from.has_bss_channel_utilization()) {
    bss_channel_utilization_ = new ::ywrapper::UintValue(*from.bss_channel_utilization_);
  } else {
    bss_channel_utilization_ = NULL;
  }
  if (from.has_mobility_domain()) {
    mobility_domain_ = new ::ywrapper::StringValue(*from.mobility_domain_);
  } else {
    mobility_domain_ = NULL;
  }
  if (from.has_ipv6_ndp_filter()) {
    ipv6_ndp_filter_ = new ::ywrapper::BoolValue(*from.ipv6_ndp_filter_);
  } else {
    ipv6_ndp_filter_ = NULL;
  }
  if (from.has_wpa2_psk()) {
    wpa2_psk_ = new ::ywrapper::StringValue(*from.wpa2_psk_);
  } else {
    wpa2_psk_ = NULL;
  }
  if (from.has_ptk_timeout()) {
    ptk_timeout_ = new ::ywrapper::UintValue(*from.ptk_timeout_);
  } else {
    ptk_timeout_ = NULL;
  }
  if (from.has_dot11k()) {
    dot11k_ = new ::ywrapper::BoolValue(*from.dot11k_);
  } else {
    dot11k_ = NULL;
  }
  if (from.has_rx_bss_dot11_channel_utilization()) {
    rx_bss_dot11_channel_utilization_ = new ::ywrapper::UintValue(*from.rx_bss_dot11_channel_utilization_);
  } else {
    rx_bss_dot11_channel_utilization_ = NULL;
  }
  if (from.has_gtk_timeout()) {
    gtk_timeout_ = new ::ywrapper::UintValue(*from.gtk_timeout_);
  } else {
    gtk_timeout_ = NULL;
  }
  if (from.has_dhcp_required()) {
    dhcp_required_ = new ::ywrapper::BoolValue(*from.dhcp_required_);
  } else {
    dhcp_required_ = NULL;
  }
  if (from.has_server_group()) {
    server_group_ = new ::ywrapper::StringValue(*from.server_group_);
  } else {
    server_group_ = NULL;
  }
  if (from.has_broadcast_filter()) {
    broadcast_filter_ = new ::ywrapper::BoolValue(*from.broadcast_filter_);
  } else {
    broadcast_filter_ = NULL;
  }
  if (from.has_ipv6_ndp_filter_timer()) {
    ipv6_ndp_filter_timer_ = new ::ywrapper::UintValue(*from.ipv6_ndp_filter_timer_);
  } else {
    ipv6_ndp_filter_timer_ = NULL;
  }
  if (from.has_qbss_load()) {
    qbss_load_ = new ::ywrapper::BoolValue(*from.qbss_load_);
  } else {
    qbss_load_ = NULL;
  }
  ::memcpy(&opmode_, &from.opmode_,
    static_cast<size_t>(reinterpret_cast<char*>(&operating_frequency_) -
    reinterpret_cast<char*>(&opmode_)) + sizeof(operating_frequency_));
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.State)
}

void Ssids_Ssid_State::SharedCtor() {
  ::memset(&station_isolation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operating_frequency_) -
      reinterpret_cast<char*>(&station_isolation_)) + sizeof(operating_frequency_));
  _cached_size_ = 0;
}

Ssids_Ssid_State::~Ssids_Ssid_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.State)
  SharedDtor();
}

void Ssids_Ssid_State::SharedDtor() {
  if (this != internal_default_instance()) delete station_isolation_;
  if (this != internal_default_instance()) delete name_;
  if (this != internal_default_instance()) delete tx_bss_dot11_channel_utilization_;
  if (this != internal_default_instance()) delete multicast_filter_;
  if (this != internal_default_instance()) delete vlan_id_;
  if (this != internal_default_instance()) delete okc_;
  if (this != internal_default_instance()) delete csa_;
  if (this != internal_default_instance()) delete advertise_apname_;
  if (this != internal_default_instance()) delete dva_;
  if (this != internal_default_instance()) delete hidden_;
  if (this != internal_default_instance()) delete bssid_;
  if (this != internal_default_instance()) delete enabled_;
  if (this != internal_default_instance()) delete bss_channel_utilization_;
  if (this != internal_default_instance()) delete mobility_domain_;
  if (this != internal_default_instance()) delete ipv6_ndp_filter_;
  if (this != internal_default_instance()) delete wpa2_psk_;
  if (this != internal_default_instance()) delete ptk_timeout_;
  if (this != internal_default_instance()) delete dot11k_;
  if (this != internal_default_instance()) delete rx_bss_dot11_channel_utilization_;
  if (this != internal_default_instance()) delete gtk_timeout_;
  if (this != internal_default_instance()) delete dhcp_required_;
  if (this != internal_default_instance()) delete server_group_;
  if (this != internal_default_instance()) delete broadcast_filter_;
  if (this != internal_default_instance()) delete ipv6_ndp_filter_timer_;
  if (this != internal_default_instance()) delete qbss_load_;
}

void Ssids_Ssid_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ssids_Ssid_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ssids_Ssid_State& Ssids_Ssid_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_State();
  return *internal_default_instance();
}

Ssids_Ssid_State* Ssids_Ssid_State::New(::google::protobuf::Arena* arena) const {
  Ssids_Ssid_State* n = new Ssids_Ssid_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ssids_Ssid_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  basic_data_rates_.Clear();
  supported_data_rates_.Clear();
  if (GetArenaNoVirtual() == NULL && station_isolation_ != NULL) {
    delete station_isolation_;
  }
  station_isolation_ = NULL;
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
  if (GetArenaNoVirtual() == NULL && tx_bss_dot11_channel_utilization_ != NULL) {
    delete tx_bss_dot11_channel_utilization_;
  }
  tx_bss_dot11_channel_utilization_ = NULL;
  if (GetArenaNoVirtual() == NULL && multicast_filter_ != NULL) {
    delete multicast_filter_;
  }
  multicast_filter_ = NULL;
  if (GetArenaNoVirtual() == NULL && vlan_id_ != NULL) {
    delete vlan_id_;
  }
  vlan_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && okc_ != NULL) {
    delete okc_;
  }
  okc_ = NULL;
  if (GetArenaNoVirtual() == NULL && csa_ != NULL) {
    delete csa_;
  }
  csa_ = NULL;
  if (GetArenaNoVirtual() == NULL && advertise_apname_ != NULL) {
    delete advertise_apname_;
  }
  advertise_apname_ = NULL;
  if (GetArenaNoVirtual() == NULL && dva_ != NULL) {
    delete dva_;
  }
  dva_ = NULL;
  if (GetArenaNoVirtual() == NULL && hidden_ != NULL) {
    delete hidden_;
  }
  hidden_ = NULL;
  if (GetArenaNoVirtual() == NULL && bssid_ != NULL) {
    delete bssid_;
  }
  bssid_ = NULL;
  if (GetArenaNoVirtual() == NULL && enabled_ != NULL) {
    delete enabled_;
  }
  enabled_ = NULL;
  if (GetArenaNoVirtual() == NULL && bss_channel_utilization_ != NULL) {
    delete bss_channel_utilization_;
  }
  bss_channel_utilization_ = NULL;
  if (GetArenaNoVirtual() == NULL && mobility_domain_ != NULL) {
    delete mobility_domain_;
  }
  mobility_domain_ = NULL;
  if (GetArenaNoVirtual() == NULL && ipv6_ndp_filter_ != NULL) {
    delete ipv6_ndp_filter_;
  }
  ipv6_ndp_filter_ = NULL;
  if (GetArenaNoVirtual() == NULL && wpa2_psk_ != NULL) {
    delete wpa2_psk_;
  }
  wpa2_psk_ = NULL;
  if (GetArenaNoVirtual() == NULL && ptk_timeout_ != NULL) {
    delete ptk_timeout_;
  }
  ptk_timeout_ = NULL;
  if (GetArenaNoVirtual() == NULL && dot11k_ != NULL) {
    delete dot11k_;
  }
  dot11k_ = NULL;
  if (GetArenaNoVirtual() == NULL && rx_bss_dot11_channel_utilization_ != NULL) {
    delete rx_bss_dot11_channel_utilization_;
  }
  rx_bss_dot11_channel_utilization_ = NULL;
  if (GetArenaNoVirtual() == NULL && gtk_timeout_ != NULL) {
    delete gtk_timeout_;
  }
  gtk_timeout_ = NULL;
  if (GetArenaNoVirtual() == NULL && dhcp_required_ != NULL) {
    delete dhcp_required_;
  }
  dhcp_required_ = NULL;
  if (GetArenaNoVirtual() == NULL && server_group_ != NULL) {
    delete server_group_;
  }
  server_group_ = NULL;
  if (GetArenaNoVirtual() == NULL && broadcast_filter_ != NULL) {
    delete broadcast_filter_;
  }
  broadcast_filter_ = NULL;
  if (GetArenaNoVirtual() == NULL && ipv6_ndp_filter_timer_ != NULL) {
    delete ipv6_ndp_filter_timer_;
  }
  ipv6_ndp_filter_timer_ = NULL;
  if (GetArenaNoVirtual() == NULL && qbss_load_ != NULL) {
    delete qbss_load_;
  }
  qbss_load_ = NULL;
  ::memset(&opmode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operating_frequency_) -
      reinterpret_cast<char*>(&opmode_)) + sizeof(operating_frequency_));
  _internal_metadata_.Clear();
}

bool Ssids_Ssid_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(4267046594u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ywrapper.BoolValue station_isolation = 28685195 [(.yext.schemapath) = "/ssids/ssid/state/station-isolation"];
      case 28685195: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 229481562 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_station_isolation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue name = 40491513 [(.yext.schemapath) = "/ssids/ssid/state/name"];
      case 40491513: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 323932106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_wifi_mac.Ssids.Ssid.State.Opmode opmode = 69208360 [(.yext.schemapath) = "/ssids/ssid/state/opmode"];
      case 69208360: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 553666880 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_opmode(static_cast< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_State_Opmode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue tx_bss_dot11_channel_utilization = 88246714 [(.yext.schemapath) = "/ssids/ssid/state/tx-bss-dot11-channel-utilization"];
      case 88246714: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 705973714 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx_bss_dot11_channel_utilization()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue multicast_filter = 127752161 [(.yext.schemapath) = "/ssids/ssid/state/multicast-filter"];
      case 127752161: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 1022017290 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_multicast_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue vlan_id = 143277031 [(.yext.schemapath) = "/ssids/ssid/state/vlan-id"];
      case 143277031: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 1146216250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vlan_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue okc = 150386809 [(.yext.schemapath) = "/ssids/ssid/state/okc"];
      case 150386809: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 1203094474 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_okc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue csa = 151065463 [(.yext.schemapath) = "/ssids/ssid/state/csa"];
      case 151065463: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 1208523706 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_csa()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue advertise_apname = 178502058 [(.yext.schemapath) = "/ssids/ssid/state/advertise-apname"];
      case 178502058: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 1428016466 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_advertise_apname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue dva = 201545223 [(.yext.schemapath) = "/ssids/ssid/state/dva"];
      case 201545223: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 1612361786 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dva()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue hidden = 203435396 [(.yext.schemapath) = "/ssids/ssid/state/hidden"];
      case 203435396: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 1627483170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hidden()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.enums.OpenconfigWifiTypesOPERATINGFREQUENCY operating_frequency = 231498376 [(.yext.schemapath) = "/ssids/ssid/state/operating-frequency"];
      case 231498376: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 1851987008 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operating_frequency(static_cast< ::openconfig::enums::OpenconfigWifiTypesOPERATINGFREQUENCY >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue bssid = 288958859 [(.yext.schemapath) = "/ssids/ssid/state/bssid"];
      case 288958859: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 2311670874 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bssid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue enabled = 293398579 [(.yext.schemapath) = "/ssids/ssid/state/enabled"];
      case 293398579: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 2347188634 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue bss_channel_utilization = 306927973 [(.yext.schemapath) = "/ssids/ssid/state/bss-channel-utilization"];
      case 306927973: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 2455423786 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bss_channel_utilization()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .openconfig.enums.OpenconfigWifiTypesDATARATE basic_data_rates = 323968205 [(.yext.schemapath) = "/ssids/ssid/state/basic-data-rates"];
      case 323968205: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 2591745642 & 0xFF */)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_basic_data_rates(static_cast< ::openconfig::enums::OpenconfigWifiTypesDATARATE >(value));
          }
          input->PopLimit(limit);
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 2591745640 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_basic_data_rates(static_cast< ::openconfig::enums::OpenconfigWifiTypesDATARATE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue mobility_domain = 335299980 [(.yext.schemapath) = "/ssids/ssid/state/mobility-domain"];
      case 335299980: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 2682399842 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mobility_domain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue ipv6_ndp_filter = 340044189 [(.yext.schemapath) = "/ssids/ssid/state/ipv6-ndp-filter"];
      case 340044189: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 2720353514 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ipv6_ndp_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue wpa2_psk = 346103257 [(.yext.schemapath) = "/ssids/ssid/state/wpa2-psk"];
      case 346103257: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 2768826058 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_wpa2_psk()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue ptk_timeout = 396952177 [(.yext.schemapath) = "/ssids/ssid/state/ptk-timeout"];
      case 396952177: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 3175617418 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ptk_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue dot11k = 442431610 [(.yext.schemapath) = "/ssids/ssid/state/dot11k"];
      case 442431610: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 3539452882 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dot11k()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue rx_bss_dot11_channel_utilization = 447270500 [(.yext.schemapath) = "/ssids/ssid/state/rx-bss-dot11-channel-utilization"];
      case 447270500: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 3578164002 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rx_bss_dot11_channel_utilization()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue gtk_timeout = 448160766 [(.yext.schemapath) = "/ssids/ssid/state/gtk-timeout"];
      case 448160766: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 3585286130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gtk_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .openconfig.enums.OpenconfigWifiTypesDATARATE supported_data_rates = 458218077 [(.yext.schemapath) = "/ssids/ssid/state/supported-data-rates"];
      case 458218077: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 3665744618 & 0xFF */)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_supported_data_rates(static_cast< ::openconfig::enums::OpenconfigWifiTypesDATARATE >(value));
          }
          input->PopLimit(limit);
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 3665744616 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_supported_data_rates(static_cast< ::openconfig::enums::OpenconfigWifiTypesDATARATE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue dhcp_required = 462568869 [(.yext.schemapath) = "/ssids/ssid/state/dhcp-required"];
      case 462568869: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 3700550954 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dhcp_required()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.StringValue server_group = 473876655 [(.yext.schemapath) = "/ssids/ssid/state/server-group"];
      case 473876655: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 3791013242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue broadcast_filter = 476264332 [(.yext.schemapath) = "/ssids/ssid/state/broadcast-filter"];
      case 476264332: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 3810114658 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_broadcast_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.UintValue ipv6_ndp_filter_timer = 490045669 [(.yext.schemapath) = "/ssids/ssid/state/ipv6-ndp-filter-timer"];
      case 490045669: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 3920365354 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ipv6_ndp_filter_timer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue qbss_load = 533380824 [(.yext.schemapath) = "/ssids/ssid/state/qbss-load"];
      case 533380824: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 4267046594 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_qbss_load()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Ssids.Ssid.State)
  return false;
#undef DO_
}

void Ssids_Ssid_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.BoolValue station_isolation = 28685195 [(.yext.schemapath) = "/ssids/ssid/state/station-isolation"];
  if (this->has_station_isolation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28685195, *this->station_isolation_, output);
  }

  // .ywrapper.StringValue name = 40491513 [(.yext.schemapath) = "/ssids/ssid/state/name"];
  if (this->has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40491513, *this->name_, output);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.State.Opmode opmode = 69208360 [(.yext.schemapath) = "/ssids/ssid/state/opmode"];
  if (this->opmode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      69208360, this->opmode(), output);
  }

  // .ywrapper.UintValue tx_bss_dot11_channel_utilization = 88246714 [(.yext.schemapath) = "/ssids/ssid/state/tx-bss-dot11-channel-utilization"];
  if (this->has_tx_bss_dot11_channel_utilization()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      88246714, *this->tx_bss_dot11_channel_utilization_, output);
  }

  // .ywrapper.BoolValue multicast_filter = 127752161 [(.yext.schemapath) = "/ssids/ssid/state/multicast-filter"];
  if (this->has_multicast_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      127752161, *this->multicast_filter_, output);
  }

  // .ywrapper.UintValue vlan_id = 143277031 [(.yext.schemapath) = "/ssids/ssid/state/vlan-id"];
  if (this->has_vlan_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      143277031, *this->vlan_id_, output);
  }

  // .ywrapper.BoolValue okc = 150386809 [(.yext.schemapath) = "/ssids/ssid/state/okc"];
  if (this->has_okc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      150386809, *this->okc_, output);
  }

  // .ywrapper.BoolValue csa = 151065463 [(.yext.schemapath) = "/ssids/ssid/state/csa"];
  if (this->has_csa()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      151065463, *this->csa_, output);
  }

  // .ywrapper.BoolValue advertise_apname = 178502058 [(.yext.schemapath) = "/ssids/ssid/state/advertise-apname"];
  if (this->has_advertise_apname()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      178502058, *this->advertise_apname_, output);
  }

  // .ywrapper.BoolValue dva = 201545223 [(.yext.schemapath) = "/ssids/ssid/state/dva"];
  if (this->has_dva()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      201545223, *this->dva_, output);
  }

  // .ywrapper.BoolValue hidden = 203435396 [(.yext.schemapath) = "/ssids/ssid/state/hidden"];
  if (this->has_hidden()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      203435396, *this->hidden_, output);
  }

  // .openconfig.enums.OpenconfigWifiTypesOPERATINGFREQUENCY operating_frequency = 231498376 [(.yext.schemapath) = "/ssids/ssid/state/operating-frequency"];
  if (this->operating_frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      231498376, this->operating_frequency(), output);
  }

  // .ywrapper.StringValue bssid = 288958859 [(.yext.schemapath) = "/ssids/ssid/state/bssid"];
  if (this->has_bssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      288958859, *this->bssid_, output);
  }

  // .ywrapper.BoolValue enabled = 293398579 [(.yext.schemapath) = "/ssids/ssid/state/enabled"];
  if (this->has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      293398579, *this->enabled_, output);
  }

  // .ywrapper.UintValue bss_channel_utilization = 306927973 [(.yext.schemapath) = "/ssids/ssid/state/bss-channel-utilization"];
  if (this->has_bss_channel_utilization()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      306927973, *this->bss_channel_utilization_, output);
  }

  // repeated .openconfig.enums.OpenconfigWifiTypesDATARATE basic_data_rates = 323968205 [(.yext.schemapath) = "/ssids/ssid/state/basic-data-rates"];
  if (this->basic_data_rates_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      323968205,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(
        static_cast< ::google::protobuf::uint32>(_basic_data_rates_cached_byte_size_));
  }
  for (int i = 0, n = this->basic_data_rates_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->basic_data_rates(i), output);
  }

  // .ywrapper.StringValue mobility_domain = 335299980 [(.yext.schemapath) = "/ssids/ssid/state/mobility-domain"];
  if (this->has_mobility_domain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      335299980, *this->mobility_domain_, output);
  }

  // .ywrapper.BoolValue ipv6_ndp_filter = 340044189 [(.yext.schemapath) = "/ssids/ssid/state/ipv6-ndp-filter"];
  if (this->has_ipv6_ndp_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      340044189, *this->ipv6_ndp_filter_, output);
  }

  // .ywrapper.StringValue wpa2_psk = 346103257 [(.yext.schemapath) = "/ssids/ssid/state/wpa2-psk"];
  if (this->has_wpa2_psk()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      346103257, *this->wpa2_psk_, output);
  }

  // .ywrapper.UintValue ptk_timeout = 396952177 [(.yext.schemapath) = "/ssids/ssid/state/ptk-timeout"];
  if (this->has_ptk_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      396952177, *this->ptk_timeout_, output);
  }

  // .ywrapper.BoolValue dot11k = 442431610 [(.yext.schemapath) = "/ssids/ssid/state/dot11k"];
  if (this->has_dot11k()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      442431610, *this->dot11k_, output);
  }

  // .ywrapper.UintValue rx_bss_dot11_channel_utilization = 447270500 [(.yext.schemapath) = "/ssids/ssid/state/rx-bss-dot11-channel-utilization"];
  if (this->has_rx_bss_dot11_channel_utilization()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      447270500, *this->rx_bss_dot11_channel_utilization_, output);
  }

  // .ywrapper.UintValue gtk_timeout = 448160766 [(.yext.schemapath) = "/ssids/ssid/state/gtk-timeout"];
  if (this->has_gtk_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      448160766, *this->gtk_timeout_, output);
  }

  // repeated .openconfig.enums.OpenconfigWifiTypesDATARATE supported_data_rates = 458218077 [(.yext.schemapath) = "/ssids/ssid/state/supported-data-rates"];
  if (this->supported_data_rates_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      458218077,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(
        static_cast< ::google::protobuf::uint32>(_supported_data_rates_cached_byte_size_));
  }
  for (int i = 0, n = this->supported_data_rates_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->supported_data_rates(i), output);
  }

  // .ywrapper.BoolValue dhcp_required = 462568869 [(.yext.schemapath) = "/ssids/ssid/state/dhcp-required"];
  if (this->has_dhcp_required()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      462568869, *this->dhcp_required_, output);
  }

  // .ywrapper.StringValue server_group = 473876655 [(.yext.schemapath) = "/ssids/ssid/state/server-group"];
  if (this->has_server_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      473876655, *this->server_group_, output);
  }

  // .ywrapper.BoolValue broadcast_filter = 476264332 [(.yext.schemapath) = "/ssids/ssid/state/broadcast-filter"];
  if (this->has_broadcast_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      476264332, *this->broadcast_filter_, output);
  }

  // .ywrapper.UintValue ipv6_ndp_filter_timer = 490045669 [(.yext.schemapath) = "/ssids/ssid/state/ipv6-ndp-filter-timer"];
  if (this->has_ipv6_ndp_filter_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      490045669, *this->ipv6_ndp_filter_timer_, output);
  }

  // .ywrapper.BoolValue qbss_load = 533380824 [(.yext.schemapath) = "/ssids/ssid/state/qbss-load"];
  if (this->has_qbss_load()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      533380824, *this->qbss_load_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.State)
}

::google::protobuf::uint8* Ssids_Ssid_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ywrapper.BoolValue station_isolation = 28685195 [(.yext.schemapath) = "/ssids/ssid/state/station-isolation"];
  if (this->has_station_isolation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        28685195, *this->station_isolation_, deterministic, target);
  }

  // .ywrapper.StringValue name = 40491513 [(.yext.schemapath) = "/ssids/ssid/state/name"];
  if (this->has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        40491513, *this->name_, deterministic, target);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.State.Opmode opmode = 69208360 [(.yext.schemapath) = "/ssids/ssid/state/opmode"];
  if (this->opmode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      69208360, this->opmode(), target);
  }

  // .ywrapper.UintValue tx_bss_dot11_channel_utilization = 88246714 [(.yext.schemapath) = "/ssids/ssid/state/tx-bss-dot11-channel-utilization"];
  if (this->has_tx_bss_dot11_channel_utilization()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        88246714, *this->tx_bss_dot11_channel_utilization_, deterministic, target);
  }

  // .ywrapper.BoolValue multicast_filter = 127752161 [(.yext.schemapath) = "/ssids/ssid/state/multicast-filter"];
  if (this->has_multicast_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        127752161, *this->multicast_filter_, deterministic, target);
  }

  // .ywrapper.UintValue vlan_id = 143277031 [(.yext.schemapath) = "/ssids/ssid/state/vlan-id"];
  if (this->has_vlan_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        143277031, *this->vlan_id_, deterministic, target);
  }

  // .ywrapper.BoolValue okc = 150386809 [(.yext.schemapath) = "/ssids/ssid/state/okc"];
  if (this->has_okc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        150386809, *this->okc_, deterministic, target);
  }

  // .ywrapper.BoolValue csa = 151065463 [(.yext.schemapath) = "/ssids/ssid/state/csa"];
  if (this->has_csa()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        151065463, *this->csa_, deterministic, target);
  }

  // .ywrapper.BoolValue advertise_apname = 178502058 [(.yext.schemapath) = "/ssids/ssid/state/advertise-apname"];
  if (this->has_advertise_apname()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        178502058, *this->advertise_apname_, deterministic, target);
  }

  // .ywrapper.BoolValue dva = 201545223 [(.yext.schemapath) = "/ssids/ssid/state/dva"];
  if (this->has_dva()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        201545223, *this->dva_, deterministic, target);
  }

  // .ywrapper.BoolValue hidden = 203435396 [(.yext.schemapath) = "/ssids/ssid/state/hidden"];
  if (this->has_hidden()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        203435396, *this->hidden_, deterministic, target);
  }

  // .openconfig.enums.OpenconfigWifiTypesOPERATINGFREQUENCY operating_frequency = 231498376 [(.yext.schemapath) = "/ssids/ssid/state/operating-frequency"];
  if (this->operating_frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      231498376, this->operating_frequency(), target);
  }

  // .ywrapper.StringValue bssid = 288958859 [(.yext.schemapath) = "/ssids/ssid/state/bssid"];
  if (this->has_bssid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        288958859, *this->bssid_, deterministic, target);
  }

  // .ywrapper.BoolValue enabled = 293398579 [(.yext.schemapath) = "/ssids/ssid/state/enabled"];
  if (this->has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        293398579, *this->enabled_, deterministic, target);
  }

  // .ywrapper.UintValue bss_channel_utilization = 306927973 [(.yext.schemapath) = "/ssids/ssid/state/bss-channel-utilization"];
  if (this->has_bss_channel_utilization()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        306927973, *this->bss_channel_utilization_, deterministic, target);
  }

  // repeated .openconfig.enums.OpenconfigWifiTypesDATARATE basic_data_rates = 323968205 [(.yext.schemapath) = "/ssids/ssid/state/basic-data-rates"];
  if (this->basic_data_rates_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      323968205,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      static_cast< ::google::protobuf::uint32>(
            _basic_data_rates_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->basic_data_rates_, target);
  }

  // .ywrapper.StringValue mobility_domain = 335299980 [(.yext.schemapath) = "/ssids/ssid/state/mobility-domain"];
  if (this->has_mobility_domain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        335299980, *this->mobility_domain_, deterministic, target);
  }

  // .ywrapper.BoolValue ipv6_ndp_filter = 340044189 [(.yext.schemapath) = "/ssids/ssid/state/ipv6-ndp-filter"];
  if (this->has_ipv6_ndp_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        340044189, *this->ipv6_ndp_filter_, deterministic, target);
  }

  // .ywrapper.StringValue wpa2_psk = 346103257 [(.yext.schemapath) = "/ssids/ssid/state/wpa2-psk"];
  if (this->has_wpa2_psk()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        346103257, *this->wpa2_psk_, deterministic, target);
  }

  // .ywrapper.UintValue ptk_timeout = 396952177 [(.yext.schemapath) = "/ssids/ssid/state/ptk-timeout"];
  if (this->has_ptk_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        396952177, *this->ptk_timeout_, deterministic, target);
  }

  // .ywrapper.BoolValue dot11k = 442431610 [(.yext.schemapath) = "/ssids/ssid/state/dot11k"];
  if (this->has_dot11k()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        442431610, *this->dot11k_, deterministic, target);
  }

  // .ywrapper.UintValue rx_bss_dot11_channel_utilization = 447270500 [(.yext.schemapath) = "/ssids/ssid/state/rx-bss-dot11-channel-utilization"];
  if (this->has_rx_bss_dot11_channel_utilization()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        447270500, *this->rx_bss_dot11_channel_utilization_, deterministic, target);
  }

  // .ywrapper.UintValue gtk_timeout = 448160766 [(.yext.schemapath) = "/ssids/ssid/state/gtk-timeout"];
  if (this->has_gtk_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        448160766, *this->gtk_timeout_, deterministic, target);
  }

  // repeated .openconfig.enums.OpenconfigWifiTypesDATARATE supported_data_rates = 458218077 [(.yext.schemapath) = "/ssids/ssid/state/supported-data-rates"];
  if (this->supported_data_rates_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      458218077,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      static_cast< ::google::protobuf::uint32>(
            _supported_data_rates_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->supported_data_rates_, target);
  }

  // .ywrapper.BoolValue dhcp_required = 462568869 [(.yext.schemapath) = "/ssids/ssid/state/dhcp-required"];
  if (this->has_dhcp_required()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        462568869, *this->dhcp_required_, deterministic, target);
  }

  // .ywrapper.StringValue server_group = 473876655 [(.yext.schemapath) = "/ssids/ssid/state/server-group"];
  if (this->has_server_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        473876655, *this->server_group_, deterministic, target);
  }

  // .ywrapper.BoolValue broadcast_filter = 476264332 [(.yext.schemapath) = "/ssids/ssid/state/broadcast-filter"];
  if (this->has_broadcast_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        476264332, *this->broadcast_filter_, deterministic, target);
  }

  // .ywrapper.UintValue ipv6_ndp_filter_timer = 490045669 [(.yext.schemapath) = "/ssids/ssid/state/ipv6-ndp-filter-timer"];
  if (this->has_ipv6_ndp_filter_timer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        490045669, *this->ipv6_ndp_filter_timer_, deterministic, target);
  }

  // .ywrapper.BoolValue qbss_load = 533380824 [(.yext.schemapath) = "/ssids/ssid/state/qbss-load"];
  if (this->has_qbss_load()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        533380824, *this->qbss_load_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.State)
  return target;
}

size_t Ssids_Ssid_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .openconfig.enums.OpenconfigWifiTypesDATARATE basic_data_rates = 323968205 [(.yext.schemapath) = "/ssids/ssid/state/basic-data-rates"];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->basic_data_rates_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->basic_data_rates(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _basic_data_rates_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .openconfig.enums.OpenconfigWifiTypesDATARATE supported_data_rates = 458218077 [(.yext.schemapath) = "/ssids/ssid/state/supported-data-rates"];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->supported_data_rates_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->supported_data_rates(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 5 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _supported_data_rates_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .ywrapper.BoolValue station_isolation = 28685195 [(.yext.schemapath) = "/ssids/ssid/state/station-isolation"];
  if (this->has_station_isolation()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->station_isolation_);
  }

  // .ywrapper.StringValue name = 40491513 [(.yext.schemapath) = "/ssids/ssid/state/name"];
  if (this->has_name()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->name_);
  }

  // .ywrapper.UintValue tx_bss_dot11_channel_utilization = 88246714 [(.yext.schemapath) = "/ssids/ssid/state/tx-bss-dot11-channel-utilization"];
  if (this->has_tx_bss_dot11_channel_utilization()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tx_bss_dot11_channel_utilization_);
  }

  // .ywrapper.BoolValue multicast_filter = 127752161 [(.yext.schemapath) = "/ssids/ssid/state/multicast-filter"];
  if (this->has_multicast_filter()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->multicast_filter_);
  }

  // .ywrapper.UintValue vlan_id = 143277031 [(.yext.schemapath) = "/ssids/ssid/state/vlan-id"];
  if (this->has_vlan_id()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->vlan_id_);
  }

  // .ywrapper.BoolValue okc = 150386809 [(.yext.schemapath) = "/ssids/ssid/state/okc"];
  if (this->has_okc()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->okc_);
  }

  // .ywrapper.BoolValue csa = 151065463 [(.yext.schemapath) = "/ssids/ssid/state/csa"];
  if (this->has_csa()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->csa_);
  }

  // .ywrapper.BoolValue advertise_apname = 178502058 [(.yext.schemapath) = "/ssids/ssid/state/advertise-apname"];
  if (this->has_advertise_apname()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->advertise_apname_);
  }

  // .ywrapper.BoolValue dva = 201545223 [(.yext.schemapath) = "/ssids/ssid/state/dva"];
  if (this->has_dva()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dva_);
  }

  // .ywrapper.BoolValue hidden = 203435396 [(.yext.schemapath) = "/ssids/ssid/state/hidden"];
  if (this->has_hidden()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->hidden_);
  }

  // .ywrapper.StringValue bssid = 288958859 [(.yext.schemapath) = "/ssids/ssid/state/bssid"];
  if (this->has_bssid()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->bssid_);
  }

  // .ywrapper.BoolValue enabled = 293398579 [(.yext.schemapath) = "/ssids/ssid/state/enabled"];
  if (this->has_enabled()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->enabled_);
  }

  // .ywrapper.UintValue bss_channel_utilization = 306927973 [(.yext.schemapath) = "/ssids/ssid/state/bss-channel-utilization"];
  if (this->has_bss_channel_utilization()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->bss_channel_utilization_);
  }

  // .ywrapper.StringValue mobility_domain = 335299980 [(.yext.schemapath) = "/ssids/ssid/state/mobility-domain"];
  if (this->has_mobility_domain()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mobility_domain_);
  }

  // .ywrapper.BoolValue ipv6_ndp_filter = 340044189 [(.yext.schemapath) = "/ssids/ssid/state/ipv6-ndp-filter"];
  if (this->has_ipv6_ndp_filter()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->ipv6_ndp_filter_);
  }

  // .ywrapper.StringValue wpa2_psk = 346103257 [(.yext.schemapath) = "/ssids/ssid/state/wpa2-psk"];
  if (this->has_wpa2_psk()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->wpa2_psk_);
  }

  // .ywrapper.UintValue ptk_timeout = 396952177 [(.yext.schemapath) = "/ssids/ssid/state/ptk-timeout"];
  if (this->has_ptk_timeout()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->ptk_timeout_);
  }

  // .ywrapper.BoolValue dot11k = 442431610 [(.yext.schemapath) = "/ssids/ssid/state/dot11k"];
  if (this->has_dot11k()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dot11k_);
  }

  // .ywrapper.UintValue rx_bss_dot11_channel_utilization = 447270500 [(.yext.schemapath) = "/ssids/ssid/state/rx-bss-dot11-channel-utilization"];
  if (this->has_rx_bss_dot11_channel_utilization()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rx_bss_dot11_channel_utilization_);
  }

  // .ywrapper.UintValue gtk_timeout = 448160766 [(.yext.schemapath) = "/ssids/ssid/state/gtk-timeout"];
  if (this->has_gtk_timeout()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->gtk_timeout_);
  }

  // .ywrapper.BoolValue dhcp_required = 462568869 [(.yext.schemapath) = "/ssids/ssid/state/dhcp-required"];
  if (this->has_dhcp_required()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dhcp_required_);
  }

  // .ywrapper.StringValue server_group = 473876655 [(.yext.schemapath) = "/ssids/ssid/state/server-group"];
  if (this->has_server_group()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->server_group_);
  }

  // .ywrapper.BoolValue broadcast_filter = 476264332 [(.yext.schemapath) = "/ssids/ssid/state/broadcast-filter"];
  if (this->has_broadcast_filter()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->broadcast_filter_);
  }

  // .ywrapper.UintValue ipv6_ndp_filter_timer = 490045669 [(.yext.schemapath) = "/ssids/ssid/state/ipv6-ndp-filter-timer"];
  if (this->has_ipv6_ndp_filter_timer()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->ipv6_ndp_filter_timer_);
  }

  // .ywrapper.BoolValue qbss_load = 533380824 [(.yext.schemapath) = "/ssids/ssid/state/qbss-load"];
  if (this->has_qbss_load()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->qbss_load_);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.State.Opmode opmode = 69208360 [(.yext.schemapath) = "/ssids/ssid/state/opmode"];
  if (this->opmode() != 0) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->opmode());
  }

  // .openconfig.enums.OpenconfigWifiTypesOPERATINGFREQUENCY operating_frequency = 231498376 [(.yext.schemapath) = "/ssids/ssid/state/operating-frequency"];
  if (this->operating_frequency() != 0) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operating_frequency());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ssids_Ssid_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Ssids_Ssid_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ssids_Ssid_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Ssids.Ssid.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.State)
    MergeFrom(*source);
  }
}

void Ssids_Ssid_State::MergeFrom(const Ssids_Ssid_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  basic_data_rates_.MergeFrom(from.basic_data_rates_);
  supported_data_rates_.MergeFrom(from.supported_data_rates_);
  if (from.has_station_isolation()) {
    mutable_station_isolation()->::ywrapper::BoolValue::MergeFrom(from.station_isolation());
  }
  if (from.has_name()) {
    mutable_name()->::ywrapper::StringValue::MergeFrom(from.name());
  }
  if (from.has_tx_bss_dot11_channel_utilization()) {
    mutable_tx_bss_dot11_channel_utilization()->::ywrapper::UintValue::MergeFrom(from.tx_bss_dot11_channel_utilization());
  }
  if (from.has_multicast_filter()) {
    mutable_multicast_filter()->::ywrapper::BoolValue::MergeFrom(from.multicast_filter());
  }
  if (from.has_vlan_id()) {
    mutable_vlan_id()->::ywrapper::UintValue::MergeFrom(from.vlan_id());
  }
  if (from.has_okc()) {
    mutable_okc()->::ywrapper::BoolValue::MergeFrom(from.okc());
  }
  if (from.has_csa()) {
    mutable_csa()->::ywrapper::BoolValue::MergeFrom(from.csa());
  }
  if (from.has_advertise_apname()) {
    mutable_advertise_apname()->::ywrapper::BoolValue::MergeFrom(from.advertise_apname());
  }
  if (from.has_dva()) {
    mutable_dva()->::ywrapper::BoolValue::MergeFrom(from.dva());
  }
  if (from.has_hidden()) {
    mutable_hidden()->::ywrapper::BoolValue::MergeFrom(from.hidden());
  }
  if (from.has_bssid()) {
    mutable_bssid()->::ywrapper::StringValue::MergeFrom(from.bssid());
  }
  if (from.has_enabled()) {
    mutable_enabled()->::ywrapper::BoolValue::MergeFrom(from.enabled());
  }
  if (from.has_bss_channel_utilization()) {
    mutable_bss_channel_utilization()->::ywrapper::UintValue::MergeFrom(from.bss_channel_utilization());
  }
  if (from.has_mobility_domain()) {
    mutable_mobility_domain()->::ywrapper::StringValue::MergeFrom(from.mobility_domain());
  }
  if (from.has_ipv6_ndp_filter()) {
    mutable_ipv6_ndp_filter()->::ywrapper::BoolValue::MergeFrom(from.ipv6_ndp_filter());
  }
  if (from.has_wpa2_psk()) {
    mutable_wpa2_psk()->::ywrapper::StringValue::MergeFrom(from.wpa2_psk());
  }
  if (from.has_ptk_timeout()) {
    mutable_ptk_timeout()->::ywrapper::UintValue::MergeFrom(from.ptk_timeout());
  }
  if (from.has_dot11k()) {
    mutable_dot11k()->::ywrapper::BoolValue::MergeFrom(from.dot11k());
  }
  if (from.has_rx_bss_dot11_channel_utilization()) {
    mutable_rx_bss_dot11_channel_utilization()->::ywrapper::UintValue::MergeFrom(from.rx_bss_dot11_channel_utilization());
  }
  if (from.has_gtk_timeout()) {
    mutable_gtk_timeout()->::ywrapper::UintValue::MergeFrom(from.gtk_timeout());
  }
  if (from.has_dhcp_required()) {
    mutable_dhcp_required()->::ywrapper::BoolValue::MergeFrom(from.dhcp_required());
  }
  if (from.has_server_group()) {
    mutable_server_group()->::ywrapper::StringValue::MergeFrom(from.server_group());
  }
  if (from.has_broadcast_filter()) {
    mutable_broadcast_filter()->::ywrapper::BoolValue::MergeFrom(from.broadcast_filter());
  }
  if (from.has_ipv6_ndp_filter_timer()) {
    mutable_ipv6_ndp_filter_timer()->::ywrapper::UintValue::MergeFrom(from.ipv6_ndp_filter_timer());
  }
  if (from.has_qbss_load()) {
    mutable_qbss_load()->::ywrapper::BoolValue::MergeFrom(from.qbss_load());
  }
  if (from.opmode() != 0) {
    set_opmode(from.opmode());
  }
  if (from.operating_frequency() != 0) {
    set_operating_frequency(from.operating_frequency());
  }
}

void Ssids_Ssid_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ssids_Ssid_State::CopyFrom(const Ssids_Ssid_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ssids_Ssid_State::IsInitialized() const {
  return true;
}

void Ssids_Ssid_State::Swap(Ssids_Ssid_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ssids_Ssid_State::InternalSwap(Ssids_Ssid_State* other) {
  using std::swap;
  basic_data_rates_.InternalSwap(&other->basic_data_rates_);
  supported_data_rates_.InternalSwap(&other->supported_data_rates_);
  swap(station_isolation_, other->station_isolation_);
  swap(name_, other->name_);
  swap(tx_bss_dot11_channel_utilization_, other->tx_bss_dot11_channel_utilization_);
  swap(multicast_filter_, other->multicast_filter_);
  swap(vlan_id_, other->vlan_id_);
  swap(okc_, other->okc_);
  swap(csa_, other->csa_);
  swap(advertise_apname_, other->advertise_apname_);
  swap(dva_, other->dva_);
  swap(hidden_, other->hidden_);
  swap(bssid_, other->bssid_);
  swap(enabled_, other->enabled_);
  swap(bss_channel_utilization_, other->bss_channel_utilization_);
  swap(mobility_domain_, other->mobility_domain_);
  swap(ipv6_ndp_filter_, other->ipv6_ndp_filter_);
  swap(wpa2_psk_, other->wpa2_psk_);
  swap(ptk_timeout_, other->ptk_timeout_);
  swap(dot11k_, other->dot11k_);
  swap(rx_bss_dot11_channel_utilization_, other->rx_bss_dot11_channel_utilization_);
  swap(gtk_timeout_, other->gtk_timeout_);
  swap(dhcp_required_, other->dhcp_required_);
  swap(server_group_, other->server_group_);
  swap(broadcast_filter_, other->broadcast_filter_);
  swap(ipv6_ndp_filter_timer_, other->ipv6_ndp_filter_timer_);
  swap(qbss_load_, other->qbss_load_);
  swap(opmode_, other->opmode_);
  swap(operating_frequency_, other->operating_frequency_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ssids_Ssid_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ssids_Ssid_Wmm_Config::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Wmm_Config_default_instance_._instance.get_mutable()->trust_dscp_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
}
void Ssids_Ssid_Wmm_Config::clear_trust_dscp() {
  if (GetArenaNoVirtual() == NULL && trust_dscp_ != NULL) {
    delete trust_dscp_;
  }
  trust_dscp_ = NULL;
}
void Ssids_Ssid_Wmm_Config::clear_wmm_be_remark() {
  wmm_be_remark_.Clear();
}
void Ssids_Ssid_Wmm_Config::clear_wmm_bk_remark() {
  wmm_bk_remark_.Clear();
}
void Ssids_Ssid_Wmm_Config::clear_wmm_vi_remark() {
  wmm_vi_remark_.Clear();
}
void Ssids_Ssid_Wmm_Config::clear_wmm_vo_remark() {
  wmm_vo_remark_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ssids_Ssid_Wmm_Config::kTrustDscpFieldNumber;
const int Ssids_Ssid_Wmm_Config::kWmmBeRemarkFieldNumber;
const int Ssids_Ssid_Wmm_Config::kWmmBkRemarkFieldNumber;
const int Ssids_Ssid_Wmm_Config::kWmmViRemarkFieldNumber;
const int Ssids_Ssid_Wmm_Config::kWmmVoRemarkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ssids_Ssid_Wmm_Config::Ssids_Ssid_Wmm_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Wmm_Config();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config)
}
Ssids_Ssid_Wmm_Config::Ssids_Ssid_Wmm_Config(const Ssids_Ssid_Wmm_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      wmm_be_remark_(from.wmm_be_remark_),
      wmm_vo_remark_(from.wmm_vo_remark_),
      wmm_vi_remark_(from.wmm_vi_remark_),
      wmm_bk_remark_(from.wmm_bk_remark_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_trust_dscp()) {
    trust_dscp_ = new ::ywrapper::BoolValue(*from.trust_dscp_);
  } else {
    trust_dscp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config)
}

void Ssids_Ssid_Wmm_Config::SharedCtor() {
  trust_dscp_ = NULL;
  _cached_size_ = 0;
}

Ssids_Ssid_Wmm_Config::~Ssids_Ssid_Wmm_Config() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config)
  SharedDtor();
}

void Ssids_Ssid_Wmm_Config::SharedDtor() {
  if (this != internal_default_instance()) delete trust_dscp_;
}

void Ssids_Ssid_Wmm_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ssids_Ssid_Wmm_Config::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ssids_Ssid_Wmm_Config& Ssids_Ssid_Wmm_Config::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Wmm_Config();
  return *internal_default_instance();
}

Ssids_Ssid_Wmm_Config* Ssids_Ssid_Wmm_Config::New(::google::protobuf::Arena* arena) const {
  Ssids_Ssid_Wmm_Config* n = new Ssids_Ssid_Wmm_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ssids_Ssid_Wmm_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wmm_be_remark_.Clear();
  wmm_vo_remark_.Clear();
  wmm_vi_remark_.Clear();
  wmm_bk_remark_.Clear();
  if (GetArenaNoVirtual() == NULL && trust_dscp_ != NULL) {
    delete trust_dscp_;
  }
  trust_dscp_ = NULL;
  _internal_metadata_.Clear();
}

bool Ssids_Ssid_Wmm_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3685140554u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ywrapper.UintValue wmm_be_remark = 11867575 [(.yext.schemapath) = "/ssids/ssid/wmm/config/wmm-be-remark"];
      case 11867575: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 94940602 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_wmm_be_remark()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ywrapper.UintValue wmm_vo_remark = 81366305 [(.yext.schemapath) = "/ssids/ssid/wmm/config/wmm-vo-remark"];
      case 81366305: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 650930442 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_wmm_vo_remark()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue trust_dscp = 177104862 [(.yext.schemapath) = "/ssids/ssid/wmm/config/trust-dscp"];
      case 177104862: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 1416838898 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trust_dscp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ywrapper.UintValue wmm_vi_remark = 411468615 [(.yext.schemapath) = "/ssids/ssid/wmm/config/wmm-vi-remark"];
      case 411468615: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 3291748922 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_wmm_vi_remark()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ywrapper.UintValue wmm_bk_remark = 460642569 [(.yext.schemapath) = "/ssids/ssid/wmm/config/wmm-bk-remark"];
      case 460642569: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 3685140554 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_wmm_bk_remark()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config)
  return false;
#undef DO_
}

void Ssids_Ssid_Wmm_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ywrapper.UintValue wmm_be_remark = 11867575 [(.yext.schemapath) = "/ssids/ssid/wmm/config/wmm-be-remark"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wmm_be_remark_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11867575, this->wmm_be_remark(static_cast<int>(i)), output);
  }

  // repeated .ywrapper.UintValue wmm_vo_remark = 81366305 [(.yext.schemapath) = "/ssids/ssid/wmm/config/wmm-vo-remark"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wmm_vo_remark_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      81366305, this->wmm_vo_remark(static_cast<int>(i)), output);
  }

  // .ywrapper.BoolValue trust_dscp = 177104862 [(.yext.schemapath) = "/ssids/ssid/wmm/config/trust-dscp"];
  if (this->has_trust_dscp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      177104862, *this->trust_dscp_, output);
  }

  // repeated .ywrapper.UintValue wmm_vi_remark = 411468615 [(.yext.schemapath) = "/ssids/ssid/wmm/config/wmm-vi-remark"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wmm_vi_remark_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      411468615, this->wmm_vi_remark(static_cast<int>(i)), output);
  }

  // repeated .ywrapper.UintValue wmm_bk_remark = 460642569 [(.yext.schemapath) = "/ssids/ssid/wmm/config/wmm-bk-remark"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wmm_bk_remark_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      460642569, this->wmm_bk_remark(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config)
}

::google::protobuf::uint8* Ssids_Ssid_Wmm_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ywrapper.UintValue wmm_be_remark = 11867575 [(.yext.schemapath) = "/ssids/ssid/wmm/config/wmm-be-remark"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wmm_be_remark_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11867575, this->wmm_be_remark(static_cast<int>(i)), deterministic, target);
  }

  // repeated .ywrapper.UintValue wmm_vo_remark = 81366305 [(.yext.schemapath) = "/ssids/ssid/wmm/config/wmm-vo-remark"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wmm_vo_remark_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        81366305, this->wmm_vo_remark(static_cast<int>(i)), deterministic, target);
  }

  // .ywrapper.BoolValue trust_dscp = 177104862 [(.yext.schemapath) = "/ssids/ssid/wmm/config/trust-dscp"];
  if (this->has_trust_dscp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        177104862, *this->trust_dscp_, deterministic, target);
  }

  // repeated .ywrapper.UintValue wmm_vi_remark = 411468615 [(.yext.schemapath) = "/ssids/ssid/wmm/config/wmm-vi-remark"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wmm_vi_remark_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        411468615, this->wmm_vi_remark(static_cast<int>(i)), deterministic, target);
  }

  // repeated .ywrapper.UintValue wmm_bk_remark = 460642569 [(.yext.schemapath) = "/ssids/ssid/wmm/config/wmm-bk-remark"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wmm_bk_remark_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        460642569, this->wmm_bk_remark(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config)
  return target;
}

size_t Ssids_Ssid_Wmm_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .ywrapper.UintValue wmm_be_remark = 11867575 [(.yext.schemapath) = "/ssids/ssid/wmm/config/wmm-be-remark"];
  {
    unsigned int count = static_cast<unsigned int>(this->wmm_be_remark_size());
    total_size += 4UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->wmm_be_remark(static_cast<int>(i)));
    }
  }

  // repeated .ywrapper.UintValue wmm_vo_remark = 81366305 [(.yext.schemapath) = "/ssids/ssid/wmm/config/wmm-vo-remark"];
  {
    unsigned int count = static_cast<unsigned int>(this->wmm_vo_remark_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->wmm_vo_remark(static_cast<int>(i)));
    }
  }

  // repeated .ywrapper.UintValue wmm_vi_remark = 411468615 [(.yext.schemapath) = "/ssids/ssid/wmm/config/wmm-vi-remark"];
  {
    unsigned int count = static_cast<unsigned int>(this->wmm_vi_remark_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->wmm_vi_remark(static_cast<int>(i)));
    }
  }

  // repeated .ywrapper.UintValue wmm_bk_remark = 460642569 [(.yext.schemapath) = "/ssids/ssid/wmm/config/wmm-bk-remark"];
  {
    unsigned int count = static_cast<unsigned int>(this->wmm_bk_remark_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->wmm_bk_remark(static_cast<int>(i)));
    }
  }

  // .ywrapper.BoolValue trust_dscp = 177104862 [(.yext.schemapath) = "/ssids/ssid/wmm/config/trust-dscp"];
  if (this->has_trust_dscp()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->trust_dscp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ssids_Ssid_Wmm_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Ssids_Ssid_Wmm_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ssids_Ssid_Wmm_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config)
    MergeFrom(*source);
  }
}

void Ssids_Ssid_Wmm_Config::MergeFrom(const Ssids_Ssid_Wmm_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wmm_be_remark_.MergeFrom(from.wmm_be_remark_);
  wmm_vo_remark_.MergeFrom(from.wmm_vo_remark_);
  wmm_vi_remark_.MergeFrom(from.wmm_vi_remark_);
  wmm_bk_remark_.MergeFrom(from.wmm_bk_remark_);
  if (from.has_trust_dscp()) {
    mutable_trust_dscp()->::ywrapper::BoolValue::MergeFrom(from.trust_dscp());
  }
}

void Ssids_Ssid_Wmm_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ssids_Ssid_Wmm_Config::CopyFrom(const Ssids_Ssid_Wmm_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ssids_Ssid_Wmm_Config::IsInitialized() const {
  return true;
}

void Ssids_Ssid_Wmm_Config::Swap(Ssids_Ssid_Wmm_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ssids_Ssid_Wmm_Config::InternalSwap(Ssids_Ssid_Wmm_Config* other) {
  using std::swap;
  wmm_be_remark_.InternalSwap(&other->wmm_be_remark_);
  wmm_vo_remark_.InternalSwap(&other->wmm_vo_remark_);
  wmm_vi_remark_.InternalSwap(&other->wmm_vi_remark_);
  wmm_bk_remark_.InternalSwap(&other->wmm_bk_remark_);
  swap(trust_dscp_, other->trust_dscp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ssids_Ssid_Wmm_Config::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ssids_Ssid_Wmm_State::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Wmm_State_default_instance_._instance.get_mutable()->trust_dscp_ = const_cast< ::ywrapper::BoolValue*>(
      ::ywrapper::BoolValue::internal_default_instance());
}
void Ssids_Ssid_Wmm_State::clear_trust_dscp() {
  if (GetArenaNoVirtual() == NULL && trust_dscp_ != NULL) {
    delete trust_dscp_;
  }
  trust_dscp_ = NULL;
}
void Ssids_Ssid_Wmm_State::clear_wmm_be_remark() {
  wmm_be_remark_.Clear();
}
void Ssids_Ssid_Wmm_State::clear_wmm_bk_remark() {
  wmm_bk_remark_.Clear();
}
void Ssids_Ssid_Wmm_State::clear_wmm_vi_remark() {
  wmm_vi_remark_.Clear();
}
void Ssids_Ssid_Wmm_State::clear_wmm_vo_remark() {
  wmm_vo_remark_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ssids_Ssid_Wmm_State::kTrustDscpFieldNumber;
const int Ssids_Ssid_Wmm_State::kWmmBeRemarkFieldNumber;
const int Ssids_Ssid_Wmm_State::kWmmBkRemarkFieldNumber;
const int Ssids_Ssid_Wmm_State::kWmmViRemarkFieldNumber;
const int Ssids_Ssid_Wmm_State::kWmmVoRemarkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ssids_Ssid_Wmm_State::Ssids_Ssid_Wmm_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Wmm_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State)
}
Ssids_Ssid_Wmm_State::Ssids_Ssid_Wmm_State(const Ssids_Ssid_Wmm_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      wmm_be_remark_(from.wmm_be_remark_),
      wmm_bk_remark_(from.wmm_bk_remark_),
      wmm_vo_remark_(from.wmm_vo_remark_),
      wmm_vi_remark_(from.wmm_vi_remark_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_trust_dscp()) {
    trust_dscp_ = new ::ywrapper::BoolValue(*from.trust_dscp_);
  } else {
    trust_dscp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State)
}

void Ssids_Ssid_Wmm_State::SharedCtor() {
  trust_dscp_ = NULL;
  _cached_size_ = 0;
}

Ssids_Ssid_Wmm_State::~Ssids_Ssid_Wmm_State() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State)
  SharedDtor();
}

void Ssids_Ssid_Wmm_State::SharedDtor() {
  if (this != internal_default_instance()) delete trust_dscp_;
}

void Ssids_Ssid_Wmm_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ssids_Ssid_Wmm_State::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ssids_Ssid_Wmm_State& Ssids_Ssid_Wmm_State::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Wmm_State();
  return *internal_default_instance();
}

Ssids_Ssid_Wmm_State* Ssids_Ssid_Wmm_State::New(::google::protobuf::Arena* arena) const {
  Ssids_Ssid_Wmm_State* n = new Ssids_Ssid_Wmm_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ssids_Ssid_Wmm_State::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wmm_be_remark_.Clear();
  wmm_bk_remark_.Clear();
  wmm_vo_remark_.Clear();
  wmm_vi_remark_.Clear();
  if (GetArenaNoVirtual() == NULL && trust_dscp_ != NULL) {
    delete trust_dscp_;
  }
  trust_dscp_ = NULL;
  _internal_metadata_.Clear();
}

bool Ssids_Ssid_Wmm_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3017981298u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ywrapper.UintValue wmm_be_remark = 12209598 [(.yext.schemapath) = "/ssids/ssid/wmm/state/wmm-be-remark"];
      case 12209598: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 97676786 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_wmm_be_remark()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ywrapper.BoolValue trust_dscp = 81961833 [(.yext.schemapath) = "/ssids/ssid/wmm/state/trust-dscp"];
      case 81961833: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 655694666 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trust_dscp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ywrapper.UintValue wmm_bk_remark = 177940556 [(.yext.schemapath) = "/ssids/ssid/wmm/state/wmm-bk-remark"];
      case 177940556: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 1423524450 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_wmm_bk_remark()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ywrapper.UintValue wmm_vo_remark = 207475684 [(.yext.schemapath) = "/ssids/ssid/wmm/state/wmm-vo-remark"];
      case 207475684: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 1659805474 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_wmm_vo_remark()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ywrapper.UintValue wmm_vi_remark = 377247662 [(.yext.schemapath) = "/ssids/ssid/wmm/state/wmm-vi-remark"];
      case 377247662: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 3017981298 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_wmm_vi_remark()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State)
  return false;
#undef DO_
}

void Ssids_Ssid_Wmm_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ywrapper.UintValue wmm_be_remark = 12209598 [(.yext.schemapath) = "/ssids/ssid/wmm/state/wmm-be-remark"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wmm_be_remark_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12209598, this->wmm_be_remark(static_cast<int>(i)), output);
  }

  // .ywrapper.BoolValue trust_dscp = 81961833 [(.yext.schemapath) = "/ssids/ssid/wmm/state/trust-dscp"];
  if (this->has_trust_dscp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      81961833, *this->trust_dscp_, output);
  }

  // repeated .ywrapper.UintValue wmm_bk_remark = 177940556 [(.yext.schemapath) = "/ssids/ssid/wmm/state/wmm-bk-remark"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wmm_bk_remark_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      177940556, this->wmm_bk_remark(static_cast<int>(i)), output);
  }

  // repeated .ywrapper.UintValue wmm_vo_remark = 207475684 [(.yext.schemapath) = "/ssids/ssid/wmm/state/wmm-vo-remark"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wmm_vo_remark_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      207475684, this->wmm_vo_remark(static_cast<int>(i)), output);
  }

  // repeated .ywrapper.UintValue wmm_vi_remark = 377247662 [(.yext.schemapath) = "/ssids/ssid/wmm/state/wmm-vi-remark"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wmm_vi_remark_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      377247662, this->wmm_vi_remark(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State)
}

::google::protobuf::uint8* Ssids_Ssid_Wmm_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ywrapper.UintValue wmm_be_remark = 12209598 [(.yext.schemapath) = "/ssids/ssid/wmm/state/wmm-be-remark"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wmm_be_remark_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12209598, this->wmm_be_remark(static_cast<int>(i)), deterministic, target);
  }

  // .ywrapper.BoolValue trust_dscp = 81961833 [(.yext.schemapath) = "/ssids/ssid/wmm/state/trust-dscp"];
  if (this->has_trust_dscp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        81961833, *this->trust_dscp_, deterministic, target);
  }

  // repeated .ywrapper.UintValue wmm_bk_remark = 177940556 [(.yext.schemapath) = "/ssids/ssid/wmm/state/wmm-bk-remark"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wmm_bk_remark_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        177940556, this->wmm_bk_remark(static_cast<int>(i)), deterministic, target);
  }

  // repeated .ywrapper.UintValue wmm_vo_remark = 207475684 [(.yext.schemapath) = "/ssids/ssid/wmm/state/wmm-vo-remark"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wmm_vo_remark_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        207475684, this->wmm_vo_remark(static_cast<int>(i)), deterministic, target);
  }

  // repeated .ywrapper.UintValue wmm_vi_remark = 377247662 [(.yext.schemapath) = "/ssids/ssid/wmm/state/wmm-vi-remark"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wmm_vi_remark_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        377247662, this->wmm_vi_remark(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State)
  return target;
}

size_t Ssids_Ssid_Wmm_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .ywrapper.UintValue wmm_be_remark = 12209598 [(.yext.schemapath) = "/ssids/ssid/wmm/state/wmm-be-remark"];
  {
    unsigned int count = static_cast<unsigned int>(this->wmm_be_remark_size());
    total_size += 4UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->wmm_be_remark(static_cast<int>(i)));
    }
  }

  // repeated .ywrapper.UintValue wmm_bk_remark = 177940556 [(.yext.schemapath) = "/ssids/ssid/wmm/state/wmm-bk-remark"];
  {
    unsigned int count = static_cast<unsigned int>(this->wmm_bk_remark_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->wmm_bk_remark(static_cast<int>(i)));
    }
  }

  // repeated .ywrapper.UintValue wmm_vo_remark = 207475684 [(.yext.schemapath) = "/ssids/ssid/wmm/state/wmm-vo-remark"];
  {
    unsigned int count = static_cast<unsigned int>(this->wmm_vo_remark_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->wmm_vo_remark(static_cast<int>(i)));
    }
  }

  // repeated .ywrapper.UintValue wmm_vi_remark = 377247662 [(.yext.schemapath) = "/ssids/ssid/wmm/state/wmm-vi-remark"];
  {
    unsigned int count = static_cast<unsigned int>(this->wmm_vi_remark_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->wmm_vi_remark(static_cast<int>(i)));
    }
  }

  // .ywrapper.BoolValue trust_dscp = 81961833 [(.yext.schemapath) = "/ssids/ssid/wmm/state/trust-dscp"];
  if (this->has_trust_dscp()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->trust_dscp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ssids_Ssid_Wmm_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State)
  GOOGLE_DCHECK_NE(&from, this);
  const Ssids_Ssid_Wmm_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ssids_Ssid_Wmm_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State)
    MergeFrom(*source);
  }
}

void Ssids_Ssid_Wmm_State::MergeFrom(const Ssids_Ssid_Wmm_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wmm_be_remark_.MergeFrom(from.wmm_be_remark_);
  wmm_bk_remark_.MergeFrom(from.wmm_bk_remark_);
  wmm_vo_remark_.MergeFrom(from.wmm_vo_remark_);
  wmm_vi_remark_.MergeFrom(from.wmm_vi_remark_);
  if (from.has_trust_dscp()) {
    mutable_trust_dscp()->::ywrapper::BoolValue::MergeFrom(from.trust_dscp());
  }
}

void Ssids_Ssid_Wmm_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ssids_Ssid_Wmm_State::CopyFrom(const Ssids_Ssid_Wmm_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ssids_Ssid_Wmm_State::IsInitialized() const {
  return true;
}

void Ssids_Ssid_Wmm_State::Swap(Ssids_Ssid_Wmm_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ssids_Ssid_Wmm_State::InternalSwap(Ssids_Ssid_Wmm_State* other) {
  using std::swap;
  wmm_be_remark_.InternalSwap(&other->wmm_be_remark_);
  wmm_bk_remark_.InternalSwap(&other->wmm_bk_remark_);
  wmm_vo_remark_.InternalSwap(&other->wmm_vo_remark_);
  wmm_vi_remark_.InternalSwap(&other->wmm_vi_remark_);
  swap(trust_dscp_, other->trust_dscp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ssids_Ssid_Wmm_State::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ssids_Ssid_Wmm::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Wmm_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_Config*>(
      ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_Config::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Wmm_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_State*>(
      ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ssids_Ssid_Wmm::kConfigFieldNumber;
const int Ssids_Ssid_Wmm::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ssids_Ssid_Wmm::Ssids_Ssid_Wmm()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Wmm();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm)
}
Ssids_Ssid_Wmm::Ssids_Ssid_Wmm(const Ssids_Ssid_Wmm& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm)
}

void Ssids_Ssid_Wmm::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&state_)) + sizeof(config_));
  _cached_size_ = 0;
}

Ssids_Ssid_Wmm::~Ssids_Ssid_Wmm() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm)
  SharedDtor();
}

void Ssids_Ssid_Wmm::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete config_;
}

void Ssids_Ssid_Wmm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ssids_Ssid_Wmm::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ssids_Ssid_Wmm& Ssids_Ssid_Wmm::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Wmm();
  return *internal_default_instance();
}

Ssids_Ssid_Wmm* Ssids_Ssid_Wmm::New(::google::protobuf::Arena* arena) const {
  Ssids_Ssid_Wmm* n = new Ssids_Ssid_Wmm;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ssids_Ssid_Wmm::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  _internal_metadata_.Clear();
}

bool Ssids_Ssid_Wmm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(1310159330u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State state = 157043509 [(.yext.schemapath) = "/ssids/ssid/wmm/state"];
      case 157043509: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 1256348074 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config config = 163769916 [(.yext.schemapath) = "/ssids/ssid/wmm/config"];
      case 163769916: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 1310159330 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm)
  return false;
#undef DO_
}

void Ssids_Ssid_Wmm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State state = 157043509 [(.yext.schemapath) = "/ssids/ssid/wmm/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      157043509, *this->state_, output);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config config = 163769916 [(.yext.schemapath) = "/ssids/ssid/wmm/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      163769916, *this->config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm)
}

::google::protobuf::uint8* Ssids_Ssid_Wmm::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State state = 157043509 [(.yext.schemapath) = "/ssids/ssid/wmm/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        157043509, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config config = 163769916 [(.yext.schemapath) = "/ssids/ssid/wmm/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        163769916, *this->config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm)
  return target;
}

size_t Ssids_Ssid_Wmm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State state = 157043509 [(.yext.schemapath) = "/ssids/ssid/wmm/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config config = 163769916 [(.yext.schemapath) = "/ssids/ssid/wmm/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ssids_Ssid_Wmm::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm)
  GOOGLE_DCHECK_NE(&from, this);
  const Ssids_Ssid_Wmm* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ssids_Ssid_Wmm>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm)
    MergeFrom(*source);
  }
}

void Ssids_Ssid_Wmm::MergeFrom(const Ssids_Ssid_Wmm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_State::MergeFrom(from.state());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_Config::MergeFrom(from.config());
  }
}

void Ssids_Ssid_Wmm::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ssids_Ssid_Wmm::CopyFrom(const Ssids_Ssid_Wmm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ssids_Ssid_Wmm::IsInitialized() const {
  return true;
}

void Ssids_Ssid_Wmm::Swap(Ssids_Ssid_Wmm* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ssids_Ssid_Wmm::InternalSwap(Ssids_Ssid_Wmm* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(config_, other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ssids_Ssid_Wmm::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ssids_Ssid::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_default_instance_._instance.get_mutable()->band_steering_ = const_cast< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering*>(
      ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_default_instance_._instance.get_mutable()->clients_ = const_cast< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients*>(
      ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_default_instance_._instance.get_mutable()->config_ = const_cast< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config*>(
      ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_default_instance_._instance.get_mutable()->dot11r_ = const_cast< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R*>(
      ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_default_instance_._instance.get_mutable()->dot11v_ = const_cast< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V*>(
      ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_default_instance_._instance.get_mutable()->dot1x_timers_ = const_cast< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers*>(
      ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_default_instance_._instance.get_mutable()->state_ = const_cast< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_State*>(
      ::openconfig::openconfig_wifi_mac::Ssids_Ssid_State::internal_default_instance());
  ::openconfig::openconfig_wifi_mac::_Ssids_Ssid_default_instance_._instance.get_mutable()->wmm_ = const_cast< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm*>(
      ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ssids_Ssid::kBandSteeringFieldNumber;
const int Ssids_Ssid::kClientsFieldNumber;
const int Ssids_Ssid::kConfigFieldNumber;
const int Ssids_Ssid::kDot11RFieldNumber;
const int Ssids_Ssid::kDot11VFieldNumber;
const int Ssids_Ssid::kDot1XTimersFieldNumber;
const int Ssids_Ssid::kStateFieldNumber;
const int Ssids_Ssid::kWmmFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ssids_Ssid::Ssids_Ssid()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid)
}
Ssids_Ssid::Ssids_Ssid(const Ssids_Ssid& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dot1x_timers()) {
    dot1x_timers_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers(*from.dot1x_timers_);
  } else {
    dot1x_timers_ = NULL;
  }
  if (from.has_dot11r()) {
    dot11r_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R(*from.dot11r_);
  } else {
    dot11r_ = NULL;
  }
  if (from.has_dot11v()) {
    dot11v_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V(*from.dot11v_);
  } else {
    dot11v_ = NULL;
  }
  if (from.has_clients()) {
    clients_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients(*from.clients_);
  } else {
    clients_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_wmm()) {
    wmm_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm(*from.wmm_);
  } else {
    wmm_ = NULL;
  }
  if (from.has_band_steering()) {
    band_steering_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering(*from.band_steering_);
  } else {
    band_steering_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Ssids.Ssid)
}

void Ssids_Ssid::SharedCtor() {
  ::memset(&dot1x_timers_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&band_steering_) -
      reinterpret_cast<char*>(&dot1x_timers_)) + sizeof(band_steering_));
  _cached_size_ = 0;
}

Ssids_Ssid::~Ssids_Ssid() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Ssids.Ssid)
  SharedDtor();
}

void Ssids_Ssid::SharedDtor() {
  if (this != internal_default_instance()) delete dot1x_timers_;
  if (this != internal_default_instance()) delete dot11r_;
  if (this != internal_default_instance()) delete dot11v_;
  if (this != internal_default_instance()) delete clients_;
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete wmm_;
  if (this != internal_default_instance()) delete band_steering_;
}

void Ssids_Ssid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ssids_Ssid::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ssids_Ssid& Ssids_Ssid::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid();
  return *internal_default_instance();
}

Ssids_Ssid* Ssids_Ssid::New(::google::protobuf::Arena* arena) const {
  Ssids_Ssid* n = new Ssids_Ssid;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ssids_Ssid::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Ssids.Ssid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && dot1x_timers_ != NULL) {
    delete dot1x_timers_;
  }
  dot1x_timers_ = NULL;
  if (GetArenaNoVirtual() == NULL && dot11r_ != NULL) {
    delete dot11r_;
  }
  dot11r_ = NULL;
  if (GetArenaNoVirtual() == NULL && dot11v_ != NULL) {
    delete dot11v_;
  }
  dot11v_ = NULL;
  if (GetArenaNoVirtual() == NULL && clients_ != NULL) {
    delete clients_;
  }
  clients_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && wmm_ != NULL) {
    delete wmm_;
  }
  wmm_ = NULL;
  if (GetArenaNoVirtual() == NULL && band_steering_ != NULL) {
    delete band_steering_;
  }
  band_steering_ = NULL;
  _internal_metadata_.Clear();
}

bool Ssids_Ssid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Ssids.Ssid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3804929418u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers dot1x_timers = 23265631 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers"];
      case 23265631: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 186125050 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dot1x_timers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R dot11r = 123416265 [(.yext.schemapath) = "/ssids/ssid/dot11r"];
      case 123416265: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 987330122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dot11r()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V dot11v = 123416269 [(.yext.schemapath) = "/ssids/ssid/dot11v"];
      case 123416269: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 987330154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dot11v()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients clients = 158986082 [(.yext.schemapath) = "/ssids/ssid/clients"];
      case 158986082: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 1271888658 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_clients()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Config config = 175369092 [(.yext.schemapath) = "/ssids/ssid/config"];
      case 175369092: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 1402952738 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_wifi_mac.Ssids.Ssid.State state = 247527581 [(.yext.schemapath) = "/ssids/ssid/state"];
      case 247527581: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 1980220650 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm wmm = 470892139 [(.yext.schemapath) = "/ssids/ssid/wmm"];
      case 470892139: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 3767137114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_wmm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering band_steering = 475616177 [(.yext.schemapath) = "/ssids/ssid/band-steering"];
      case 475616177: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 3804929418 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_band_steering()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Ssids.Ssid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Ssids.Ssid)
  return false;
#undef DO_
}

void Ssids_Ssid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Ssids.Ssid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers dot1x_timers = 23265631 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers"];
  if (this->has_dot1x_timers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23265631, *this->dot1x_timers_, output);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R dot11r = 123416265 [(.yext.schemapath) = "/ssids/ssid/dot11r"];
  if (this->has_dot11r()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      123416265, *this->dot11r_, output);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V dot11v = 123416269 [(.yext.schemapath) = "/ssids/ssid/dot11v"];
  if (this->has_dot11v()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      123416269, *this->dot11v_, output);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients clients = 158986082 [(.yext.schemapath) = "/ssids/ssid/clients"];
  if (this->has_clients()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      158986082, *this->clients_, output);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Config config = 175369092 [(.yext.schemapath) = "/ssids/ssid/config"];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      175369092, *this->config_, output);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.State state = 247527581 [(.yext.schemapath) = "/ssids/ssid/state"];
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      247527581, *this->state_, output);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm wmm = 470892139 [(.yext.schemapath) = "/ssids/ssid/wmm"];
  if (this->has_wmm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      470892139, *this->wmm_, output);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering band_steering = 475616177 [(.yext.schemapath) = "/ssids/ssid/band-steering"];
  if (this->has_band_steering()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      475616177, *this->band_steering_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Ssids.Ssid)
}

::google::protobuf::uint8* Ssids_Ssid::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Ssids.Ssid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers dot1x_timers = 23265631 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers"];
  if (this->has_dot1x_timers()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23265631, *this->dot1x_timers_, deterministic, target);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R dot11r = 123416265 [(.yext.schemapath) = "/ssids/ssid/dot11r"];
  if (this->has_dot11r()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        123416265, *this->dot11r_, deterministic, target);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V dot11v = 123416269 [(.yext.schemapath) = "/ssids/ssid/dot11v"];
  if (this->has_dot11v()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        123416269, *this->dot11v_, deterministic, target);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients clients = 158986082 [(.yext.schemapath) = "/ssids/ssid/clients"];
  if (this->has_clients()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        158986082, *this->clients_, deterministic, target);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Config config = 175369092 [(.yext.schemapath) = "/ssids/ssid/config"];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        175369092, *this->config_, deterministic, target);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.State state = 247527581 [(.yext.schemapath) = "/ssids/ssid/state"];
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        247527581, *this->state_, deterministic, target);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm wmm = 470892139 [(.yext.schemapath) = "/ssids/ssid/wmm"];
  if (this->has_wmm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        470892139, *this->wmm_, deterministic, target);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering band_steering = 475616177 [(.yext.schemapath) = "/ssids/ssid/band-steering"];
  if (this->has_band_steering()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        475616177, *this->band_steering_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Ssids.Ssid)
  return target;
}

size_t Ssids_Ssid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Ssids.Ssid)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers dot1x_timers = 23265631 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers"];
  if (this->has_dot1x_timers()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dot1x_timers_);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R dot11r = 123416265 [(.yext.schemapath) = "/ssids/ssid/dot11r"];
  if (this->has_dot11r()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dot11r_);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V dot11v = 123416269 [(.yext.schemapath) = "/ssids/ssid/dot11v"];
  if (this->has_dot11v()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dot11v_);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients clients = 158986082 [(.yext.schemapath) = "/ssids/ssid/clients"];
  if (this->has_clients()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->clients_);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Config config = 175369092 [(.yext.schemapath) = "/ssids/ssid/config"];
  if (this->has_config()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.State state = 247527581 [(.yext.schemapath) = "/ssids/ssid/state"];
  if (this->has_state()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm wmm = 470892139 [(.yext.schemapath) = "/ssids/ssid/wmm"];
  if (this->has_wmm()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->wmm_);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering band_steering = 475616177 [(.yext.schemapath) = "/ssids/ssid/band-steering"];
  if (this->has_band_steering()) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->band_steering_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ssids_Ssid::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid)
  GOOGLE_DCHECK_NE(&from, this);
  const Ssids_Ssid* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ssids_Ssid>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Ssids.Ssid)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Ssids.Ssid)
    MergeFrom(*source);
  }
}

void Ssids_Ssid::MergeFrom(const Ssids_Ssid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dot1x_timers()) {
    mutable_dot1x_timers()->::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers::MergeFrom(from.dot1x_timers());
  }
  if (from.has_dot11r()) {
    mutable_dot11r()->::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R::MergeFrom(from.dot11r());
  }
  if (from.has_dot11v()) {
    mutable_dot11v()->::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V::MergeFrom(from.dot11v());
  }
  if (from.has_clients()) {
    mutable_clients()->::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients::MergeFrom(from.clients());
  }
  if (from.has_config()) {
    mutable_config()->::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config::MergeFrom(from.config());
  }
  if (from.has_state()) {
    mutable_state()->::openconfig::openconfig_wifi_mac::Ssids_Ssid_State::MergeFrom(from.state());
  }
  if (from.has_wmm()) {
    mutable_wmm()->::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm::MergeFrom(from.wmm());
  }
  if (from.has_band_steering()) {
    mutable_band_steering()->::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering::MergeFrom(from.band_steering());
  }
}

void Ssids_Ssid::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ssids_Ssid::CopyFrom(const Ssids_Ssid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.Ssid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ssids_Ssid::IsInitialized() const {
  return true;
}

void Ssids_Ssid::Swap(Ssids_Ssid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ssids_Ssid::InternalSwap(Ssids_Ssid* other) {
  using std::swap;
  swap(dot1x_timers_, other->dot1x_timers_);
  swap(dot11r_, other->dot11r_);
  swap(dot11v_, other->dot11v_);
  swap(clients_, other->clients_);
  swap(config_, other->config_);
  swap(state_, other->state_);
  swap(wmm_, other->wmm_);
  swap(band_steering_, other->band_steering_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ssids_Ssid::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ssids_SsidKey::InitAsDefaultInstance() {
  ::openconfig::openconfig_wifi_mac::_Ssids_SsidKey_default_instance_._instance.get_mutable()->ssid_ = const_cast< ::openconfig::openconfig_wifi_mac::Ssids_Ssid*>(
      ::openconfig::openconfig_wifi_mac::Ssids_Ssid::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ssids_SsidKey::kNameFieldNumber;
const int Ssids_SsidKey::kSsidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ssids_SsidKey::Ssids_SsidKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_SsidKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Ssids.SsidKey)
}
Ssids_SsidKey::Ssids_SsidKey(const Ssids_SsidKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_ssid()) {
    ssid_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid(*from.ssid_);
  } else {
    ssid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Ssids.SsidKey)
}

void Ssids_SsidKey::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ssid_ = NULL;
  _cached_size_ = 0;
}

Ssids_SsidKey::~Ssids_SsidKey() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Ssids.SsidKey)
  SharedDtor();
}

void Ssids_SsidKey::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ssid_;
}

void Ssids_SsidKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ssids_SsidKey::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ssids_SsidKey& Ssids_SsidKey::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_SsidKey();
  return *internal_default_instance();
}

Ssids_SsidKey* Ssids_SsidKey::New(::google::protobuf::Arena* arena) const {
  Ssids_SsidKey* n = new Ssids_SsidKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ssids_SsidKey::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Ssids.SsidKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && ssid_ != NULL) {
    delete ssid_;
  }
  ssid_ = NULL;
  _internal_metadata_.Clear();
}

bool Ssids_SsidKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Ssids.SsidKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1 [(.yext.schemapath) = "/ssids/ssid/name"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "openconfig.openconfig_wifi_mac.Ssids.SsidKey.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .openconfig.openconfig_wifi_mac.Ssids.Ssid ssid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ssid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Ssids.SsidKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Ssids.SsidKey)
  return false;
#undef DO_
}

void Ssids_SsidKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Ssids.SsidKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.yext.schemapath) = "/ssids/ssid/name"];
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_wifi_mac.Ssids.SsidKey.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid ssid = 2;
  if (this->has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->ssid_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Ssids.SsidKey)
}

::google::protobuf::uint8* Ssids_SsidKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Ssids.SsidKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.yext.schemapath) = "/ssids/ssid/name"];
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "openconfig.openconfig_wifi_mac.Ssids.SsidKey.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid ssid = 2;
  if (this->has_ssid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->ssid_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Ssids.SsidKey)
  return target;
}

size_t Ssids_SsidKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Ssids.SsidKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1 [(.yext.schemapath) = "/ssids/ssid/name"];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid ssid = 2;
  if (this->has_ssid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->ssid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ssids_SsidKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.SsidKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Ssids_SsidKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ssids_SsidKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Ssids.SsidKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Ssids.SsidKey)
    MergeFrom(*source);
  }
}

void Ssids_SsidKey::MergeFrom(const Ssids_SsidKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Ssids.SsidKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_ssid()) {
    mutable_ssid()->::openconfig::openconfig_wifi_mac::Ssids_Ssid::MergeFrom(from.ssid());
  }
}

void Ssids_SsidKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.SsidKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ssids_SsidKey::CopyFrom(const Ssids_SsidKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Ssids.SsidKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ssids_SsidKey::IsInitialized() const {
  return true;
}

void Ssids_SsidKey::Swap(Ssids_SsidKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ssids_SsidKey::InternalSwap(Ssids_SsidKey* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(ssid_, other->ssid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ssids_SsidKey::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ssids::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ssids::kSsidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ssids::Ssids()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:openconfig.openconfig_wifi_mac.Ssids)
}
Ssids::Ssids(const Ssids& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ssid_(from.ssid_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openconfig.openconfig_wifi_mac.Ssids)
}

void Ssids::SharedCtor() {
  _cached_size_ = 0;
}

Ssids::~Ssids() {
  // @@protoc_insertion_point(destructor:openconfig.openconfig_wifi_mac.Ssids)
  SharedDtor();
}

void Ssids::SharedDtor() {
}

void Ssids::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ssids::descriptor() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ssids& Ssids::default_instance() {
  ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids();
  return *internal_default_instance();
}

Ssids* Ssids::New(::google::protobuf::Arena* arena) const {
  Ssids* n = new Ssids;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ssids::Clear() {
// @@protoc_insertion_point(message_clear_start:openconfig.openconfig_wifi_mac.Ssids)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ssid_.Clear();
  _internal_metadata_.Clear();
}

bool Ssids::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openconfig.openconfig_wifi_mac.Ssids)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(3537059866u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .openconfig.openconfig_wifi_mac.Ssids.SsidKey ssid = 442132483 [(.yext.schemapath) = "/ssids/ssid"];
      case 442132483: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 3537059866 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_ssid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openconfig.openconfig_wifi_mac.Ssids)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openconfig.openconfig_wifi_mac.Ssids)
  return false;
#undef DO_
}

void Ssids::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openconfig.openconfig_wifi_mac.Ssids)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_wifi_mac.Ssids.SsidKey ssid = 442132483 [(.yext.schemapath) = "/ssids/ssid"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ssid_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      442132483, this->ssid(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:openconfig.openconfig_wifi_mac.Ssids)
}

::google::protobuf::uint8* Ssids::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openconfig.openconfig_wifi_mac.Ssids)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openconfig.openconfig_wifi_mac.Ssids.SsidKey ssid = 442132483 [(.yext.schemapath) = "/ssids/ssid"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ssid_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        442132483, this->ssid(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openconfig.openconfig_wifi_mac.Ssids)
  return target;
}

size_t Ssids::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openconfig.openconfig_wifi_mac.Ssids)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .openconfig.openconfig_wifi_mac.Ssids.SsidKey ssid = 442132483 [(.yext.schemapath) = "/ssids/ssid"];
  {
    unsigned int count = static_cast<unsigned int>(this->ssid_size());
    total_size += 5UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ssid(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ssids::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openconfig.openconfig_wifi_mac.Ssids)
  GOOGLE_DCHECK_NE(&from, this);
  const Ssids* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ssids>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openconfig.openconfig_wifi_mac.Ssids)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openconfig.openconfig_wifi_mac.Ssids)
    MergeFrom(*source);
  }
}

void Ssids::MergeFrom(const Ssids& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openconfig.openconfig_wifi_mac.Ssids)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ssid_.MergeFrom(from.ssid_);
}

void Ssids::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openconfig.openconfig_wifi_mac.Ssids)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ssids::CopyFrom(const Ssids& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openconfig.openconfig_wifi_mac.Ssids)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ssids::IsInitialized() const {
  return true;
}

void Ssids::Swap(Ssids* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ssids::InternalSwap(Ssids* other) {
  using std::swap;
  ssid_.InternalSwap(&other->ssid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ssids::GetMetadata() const {
  protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace openconfig_wifi_mac
}  // namespace openconfig

// @@protoc_insertion_point(global_scope)
