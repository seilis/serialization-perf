// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openconfig/openconfig_wifi_mac/openconfig_wifi_mac.proto

#ifndef PROTOBUF_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto__INCLUDED
#define PROTOBUF_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "github.com/openconfig/ygot/proto/ywrapper/ywrapper.pb.h"
#include "github.com/openconfig/ygot/proto/yext/yext.pb.h"
#include "openconfig/enums/enums.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[44];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsBssids_Bssid_State_Counters_RxDataDistImpl();
void InitDefaultsBssids_Bssid_State_Counters_RxDataDist();
void InitDefaultsBssids_Bssid_State_Counters_RxDataWmmImpl();
void InitDefaultsBssids_Bssid_State_Counters_RxDataWmm();
void InitDefaultsBssids_Bssid_State_Counters_RxMcsImpl();
void InitDefaultsBssids_Bssid_State_Counters_RxMcs();
void InitDefaultsBssids_Bssid_State_Counters_TxDataDistImpl();
void InitDefaultsBssids_Bssid_State_Counters_TxDataDist();
void InitDefaultsBssids_Bssid_State_Counters_TxDataWmmImpl();
void InitDefaultsBssids_Bssid_State_Counters_TxDataWmm();
void InitDefaultsBssids_Bssid_State_Counters_TxMcsImpl();
void InitDefaultsBssids_Bssid_State_Counters_TxMcs();
void InitDefaultsBssids_Bssid_State_CountersImpl();
void InitDefaultsBssids_Bssid_State_Counters();
void InitDefaultsBssids_Bssid_StateImpl();
void InitDefaultsBssids_Bssid_State();
void InitDefaultsBssids_BssidImpl();
void InitDefaultsBssids_Bssid();
void InitDefaultsBssids_BssidKeyImpl();
void InitDefaultsBssids_BssidKey();
void InitDefaultsBssidsImpl();
void InitDefaultsBssids();
void InitDefaultsSsids_Ssid_BandSteering_ConfigImpl();
void InitDefaultsSsids_Ssid_BandSteering_Config();
void InitDefaultsSsids_Ssid_BandSteering_StateImpl();
void InitDefaultsSsids_Ssid_BandSteering_State();
void InitDefaultsSsids_Ssid_BandSteeringImpl();
void InitDefaultsSsids_Ssid_BandSteering();
void InitDefaultsSsids_Ssid_Clients_Client_ClientCapabilities_StateImpl();
void InitDefaultsSsids_Ssid_Clients_Client_ClientCapabilities_State();
void InitDefaultsSsids_Ssid_Clients_Client_ClientCapabilitiesImpl();
void InitDefaultsSsids_Ssid_Clients_Client_ClientCapabilities();
void InitDefaultsSsids_Ssid_Clients_Client_ClientConnection_StateImpl();
void InitDefaultsSsids_Ssid_Clients_Client_ClientConnection_State();
void InitDefaultsSsids_Ssid_Clients_Client_ClientConnectionImpl();
void InitDefaultsSsids_Ssid_Clients_Client_ClientConnection();
void InitDefaultsSsids_Ssid_Clients_Client_ClientRf_StateImpl();
void InitDefaultsSsids_Ssid_Clients_Client_ClientRf_State();
void InitDefaultsSsids_Ssid_Clients_Client_ClientRfImpl();
void InitDefaultsSsids_Ssid_Clients_Client_ClientRf();
void InitDefaultsSsids_Ssid_Clients_Client_Dot11KNeighbors_StateImpl();
void InitDefaultsSsids_Ssid_Clients_Client_Dot11KNeighbors_State();
void InitDefaultsSsids_Ssid_Clients_Client_Dot11KNeighborsImpl();
void InitDefaultsSsids_Ssid_Clients_Client_Dot11KNeighbors();
void InitDefaultsSsids_Ssid_Clients_Client_State_CountersImpl();
void InitDefaultsSsids_Ssid_Clients_Client_State_Counters();
void InitDefaultsSsids_Ssid_Clients_Client_StateImpl();
void InitDefaultsSsids_Ssid_Clients_Client_State();
void InitDefaultsSsids_Ssid_Clients_ClientImpl();
void InitDefaultsSsids_Ssid_Clients_Client();
void InitDefaultsSsids_Ssid_Clients_ClientKeyImpl();
void InitDefaultsSsids_Ssid_Clients_ClientKey();
void InitDefaultsSsids_Ssid_ClientsImpl();
void InitDefaultsSsids_Ssid_Clients();
void InitDefaultsSsids_Ssid_ConfigImpl();
void InitDefaultsSsids_Ssid_Config();
void InitDefaultsSsids_Ssid_Dot11R_ConfigImpl();
void InitDefaultsSsids_Ssid_Dot11R_Config();
void InitDefaultsSsids_Ssid_Dot11R_StateImpl();
void InitDefaultsSsids_Ssid_Dot11R_State();
void InitDefaultsSsids_Ssid_Dot11RImpl();
void InitDefaultsSsids_Ssid_Dot11R();
void InitDefaultsSsids_Ssid_Dot11V_ConfigImpl();
void InitDefaultsSsids_Ssid_Dot11V_Config();
void InitDefaultsSsids_Ssid_Dot11V_StateImpl();
void InitDefaultsSsids_Ssid_Dot11V_State();
void InitDefaultsSsids_Ssid_Dot11VImpl();
void InitDefaultsSsids_Ssid_Dot11V();
void InitDefaultsSsids_Ssid_Dot1XTimers_ConfigImpl();
void InitDefaultsSsids_Ssid_Dot1XTimers_Config();
void InitDefaultsSsids_Ssid_Dot1XTimers_StateImpl();
void InitDefaultsSsids_Ssid_Dot1XTimers_State();
void InitDefaultsSsids_Ssid_Dot1XTimersImpl();
void InitDefaultsSsids_Ssid_Dot1XTimers();
void InitDefaultsSsids_Ssid_StateImpl();
void InitDefaultsSsids_Ssid_State();
void InitDefaultsSsids_Ssid_Wmm_ConfigImpl();
void InitDefaultsSsids_Ssid_Wmm_Config();
void InitDefaultsSsids_Ssid_Wmm_StateImpl();
void InitDefaultsSsids_Ssid_Wmm_State();
void InitDefaultsSsids_Ssid_WmmImpl();
void InitDefaultsSsids_Ssid_Wmm();
void InitDefaultsSsids_SsidImpl();
void InitDefaultsSsids_Ssid();
void InitDefaultsSsids_SsidKeyImpl();
void InitDefaultsSsids_SsidKey();
void InitDefaultsSsidsImpl();
void InitDefaultsSsids();
inline void InitDefaults() {
  InitDefaultsBssids_Bssid_State_Counters_RxDataDist();
  InitDefaultsBssids_Bssid_State_Counters_RxDataWmm();
  InitDefaultsBssids_Bssid_State_Counters_RxMcs();
  InitDefaultsBssids_Bssid_State_Counters_TxDataDist();
  InitDefaultsBssids_Bssid_State_Counters_TxDataWmm();
  InitDefaultsBssids_Bssid_State_Counters_TxMcs();
  InitDefaultsBssids_Bssid_State_Counters();
  InitDefaultsBssids_Bssid_State();
  InitDefaultsBssids_Bssid();
  InitDefaultsBssids_BssidKey();
  InitDefaultsBssids();
  InitDefaultsSsids_Ssid_BandSteering_Config();
  InitDefaultsSsids_Ssid_BandSteering_State();
  InitDefaultsSsids_Ssid_BandSteering();
  InitDefaultsSsids_Ssid_Clients_Client_ClientCapabilities_State();
  InitDefaultsSsids_Ssid_Clients_Client_ClientCapabilities();
  InitDefaultsSsids_Ssid_Clients_Client_ClientConnection_State();
  InitDefaultsSsids_Ssid_Clients_Client_ClientConnection();
  InitDefaultsSsids_Ssid_Clients_Client_ClientRf_State();
  InitDefaultsSsids_Ssid_Clients_Client_ClientRf();
  InitDefaultsSsids_Ssid_Clients_Client_Dot11KNeighbors_State();
  InitDefaultsSsids_Ssid_Clients_Client_Dot11KNeighbors();
  InitDefaultsSsids_Ssid_Clients_Client_State_Counters();
  InitDefaultsSsids_Ssid_Clients_Client_State();
  InitDefaultsSsids_Ssid_Clients_Client();
  InitDefaultsSsids_Ssid_Clients_ClientKey();
  InitDefaultsSsids_Ssid_Clients();
  InitDefaultsSsids_Ssid_Config();
  InitDefaultsSsids_Ssid_Dot11R_Config();
  InitDefaultsSsids_Ssid_Dot11R_State();
  InitDefaultsSsids_Ssid_Dot11R();
  InitDefaultsSsids_Ssid_Dot11V_Config();
  InitDefaultsSsids_Ssid_Dot11V_State();
  InitDefaultsSsids_Ssid_Dot11V();
  InitDefaultsSsids_Ssid_Dot1XTimers_Config();
  InitDefaultsSsids_Ssid_Dot1XTimers_State();
  InitDefaultsSsids_Ssid_Dot1XTimers();
  InitDefaultsSsids_Ssid_State();
  InitDefaultsSsids_Ssid_Wmm_Config();
  InitDefaultsSsids_Ssid_Wmm_State();
  InitDefaultsSsids_Ssid_Wmm();
  InitDefaultsSsids_Ssid();
  InitDefaultsSsids_SsidKey();
  InitDefaultsSsids();
}
}  // namespace protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto
namespace openconfig {
namespace openconfig_wifi_mac {
class Bssids;
class BssidsDefaultTypeInternal;
extern BssidsDefaultTypeInternal _Bssids_default_instance_;
class Bssids_Bssid;
class Bssids_BssidDefaultTypeInternal;
extern Bssids_BssidDefaultTypeInternal _Bssids_Bssid_default_instance_;
class Bssids_BssidKey;
class Bssids_BssidKeyDefaultTypeInternal;
extern Bssids_BssidKeyDefaultTypeInternal _Bssids_BssidKey_default_instance_;
class Bssids_Bssid_State;
class Bssids_Bssid_StateDefaultTypeInternal;
extern Bssids_Bssid_StateDefaultTypeInternal _Bssids_Bssid_State_default_instance_;
class Bssids_Bssid_State_Counters;
class Bssids_Bssid_State_CountersDefaultTypeInternal;
extern Bssids_Bssid_State_CountersDefaultTypeInternal _Bssids_Bssid_State_Counters_default_instance_;
class Bssids_Bssid_State_Counters_RxDataDist;
class Bssids_Bssid_State_Counters_RxDataDistDefaultTypeInternal;
extern Bssids_Bssid_State_Counters_RxDataDistDefaultTypeInternal _Bssids_Bssid_State_Counters_RxDataDist_default_instance_;
class Bssids_Bssid_State_Counters_RxDataWmm;
class Bssids_Bssid_State_Counters_RxDataWmmDefaultTypeInternal;
extern Bssids_Bssid_State_Counters_RxDataWmmDefaultTypeInternal _Bssids_Bssid_State_Counters_RxDataWmm_default_instance_;
class Bssids_Bssid_State_Counters_RxMcs;
class Bssids_Bssid_State_Counters_RxMcsDefaultTypeInternal;
extern Bssids_Bssid_State_Counters_RxMcsDefaultTypeInternal _Bssids_Bssid_State_Counters_RxMcs_default_instance_;
class Bssids_Bssid_State_Counters_TxDataDist;
class Bssids_Bssid_State_Counters_TxDataDistDefaultTypeInternal;
extern Bssids_Bssid_State_Counters_TxDataDistDefaultTypeInternal _Bssids_Bssid_State_Counters_TxDataDist_default_instance_;
class Bssids_Bssid_State_Counters_TxDataWmm;
class Bssids_Bssid_State_Counters_TxDataWmmDefaultTypeInternal;
extern Bssids_Bssid_State_Counters_TxDataWmmDefaultTypeInternal _Bssids_Bssid_State_Counters_TxDataWmm_default_instance_;
class Bssids_Bssid_State_Counters_TxMcs;
class Bssids_Bssid_State_Counters_TxMcsDefaultTypeInternal;
extern Bssids_Bssid_State_Counters_TxMcsDefaultTypeInternal _Bssids_Bssid_State_Counters_TxMcs_default_instance_;
class Ssids;
class SsidsDefaultTypeInternal;
extern SsidsDefaultTypeInternal _Ssids_default_instance_;
class Ssids_Ssid;
class Ssids_SsidDefaultTypeInternal;
extern Ssids_SsidDefaultTypeInternal _Ssids_Ssid_default_instance_;
class Ssids_SsidKey;
class Ssids_SsidKeyDefaultTypeInternal;
extern Ssids_SsidKeyDefaultTypeInternal _Ssids_SsidKey_default_instance_;
class Ssids_Ssid_BandSteering;
class Ssids_Ssid_BandSteeringDefaultTypeInternal;
extern Ssids_Ssid_BandSteeringDefaultTypeInternal _Ssids_Ssid_BandSteering_default_instance_;
class Ssids_Ssid_BandSteering_Config;
class Ssids_Ssid_BandSteering_ConfigDefaultTypeInternal;
extern Ssids_Ssid_BandSteering_ConfigDefaultTypeInternal _Ssids_Ssid_BandSteering_Config_default_instance_;
class Ssids_Ssid_BandSteering_State;
class Ssids_Ssid_BandSteering_StateDefaultTypeInternal;
extern Ssids_Ssid_BandSteering_StateDefaultTypeInternal _Ssids_Ssid_BandSteering_State_default_instance_;
class Ssids_Ssid_Clients;
class Ssids_Ssid_ClientsDefaultTypeInternal;
extern Ssids_Ssid_ClientsDefaultTypeInternal _Ssids_Ssid_Clients_default_instance_;
class Ssids_Ssid_Clients_Client;
class Ssids_Ssid_Clients_ClientDefaultTypeInternal;
extern Ssids_Ssid_Clients_ClientDefaultTypeInternal _Ssids_Ssid_Clients_Client_default_instance_;
class Ssids_Ssid_Clients_ClientKey;
class Ssids_Ssid_Clients_ClientKeyDefaultTypeInternal;
extern Ssids_Ssid_Clients_ClientKeyDefaultTypeInternal _Ssids_Ssid_Clients_ClientKey_default_instance_;
class Ssids_Ssid_Clients_Client_ClientCapabilities;
class Ssids_Ssid_Clients_Client_ClientCapabilitiesDefaultTypeInternal;
extern Ssids_Ssid_Clients_Client_ClientCapabilitiesDefaultTypeInternal _Ssids_Ssid_Clients_Client_ClientCapabilities_default_instance_;
class Ssids_Ssid_Clients_Client_ClientCapabilities_State;
class Ssids_Ssid_Clients_Client_ClientCapabilities_StateDefaultTypeInternal;
extern Ssids_Ssid_Clients_Client_ClientCapabilities_StateDefaultTypeInternal _Ssids_Ssid_Clients_Client_ClientCapabilities_State_default_instance_;
class Ssids_Ssid_Clients_Client_ClientConnection;
class Ssids_Ssid_Clients_Client_ClientConnectionDefaultTypeInternal;
extern Ssids_Ssid_Clients_Client_ClientConnectionDefaultTypeInternal _Ssids_Ssid_Clients_Client_ClientConnection_default_instance_;
class Ssids_Ssid_Clients_Client_ClientConnection_State;
class Ssids_Ssid_Clients_Client_ClientConnection_StateDefaultTypeInternal;
extern Ssids_Ssid_Clients_Client_ClientConnection_StateDefaultTypeInternal _Ssids_Ssid_Clients_Client_ClientConnection_State_default_instance_;
class Ssids_Ssid_Clients_Client_ClientRf;
class Ssids_Ssid_Clients_Client_ClientRfDefaultTypeInternal;
extern Ssids_Ssid_Clients_Client_ClientRfDefaultTypeInternal _Ssids_Ssid_Clients_Client_ClientRf_default_instance_;
class Ssids_Ssid_Clients_Client_ClientRf_State;
class Ssids_Ssid_Clients_Client_ClientRf_StateDefaultTypeInternal;
extern Ssids_Ssid_Clients_Client_ClientRf_StateDefaultTypeInternal _Ssids_Ssid_Clients_Client_ClientRf_State_default_instance_;
class Ssids_Ssid_Clients_Client_Dot11KNeighbors;
class Ssids_Ssid_Clients_Client_Dot11KNeighborsDefaultTypeInternal;
extern Ssids_Ssid_Clients_Client_Dot11KNeighborsDefaultTypeInternal _Ssids_Ssid_Clients_Client_Dot11KNeighbors_default_instance_;
class Ssids_Ssid_Clients_Client_Dot11KNeighbors_State;
class Ssids_Ssid_Clients_Client_Dot11KNeighbors_StateDefaultTypeInternal;
extern Ssids_Ssid_Clients_Client_Dot11KNeighbors_StateDefaultTypeInternal _Ssids_Ssid_Clients_Client_Dot11KNeighbors_State_default_instance_;
class Ssids_Ssid_Clients_Client_State;
class Ssids_Ssid_Clients_Client_StateDefaultTypeInternal;
extern Ssids_Ssid_Clients_Client_StateDefaultTypeInternal _Ssids_Ssid_Clients_Client_State_default_instance_;
class Ssids_Ssid_Clients_Client_State_Counters;
class Ssids_Ssid_Clients_Client_State_CountersDefaultTypeInternal;
extern Ssids_Ssid_Clients_Client_State_CountersDefaultTypeInternal _Ssids_Ssid_Clients_Client_State_Counters_default_instance_;
class Ssids_Ssid_Config;
class Ssids_Ssid_ConfigDefaultTypeInternal;
extern Ssids_Ssid_ConfigDefaultTypeInternal _Ssids_Ssid_Config_default_instance_;
class Ssids_Ssid_Dot11R;
class Ssids_Ssid_Dot11RDefaultTypeInternal;
extern Ssids_Ssid_Dot11RDefaultTypeInternal _Ssids_Ssid_Dot11R_default_instance_;
class Ssids_Ssid_Dot11R_Config;
class Ssids_Ssid_Dot11R_ConfigDefaultTypeInternal;
extern Ssids_Ssid_Dot11R_ConfigDefaultTypeInternal _Ssids_Ssid_Dot11R_Config_default_instance_;
class Ssids_Ssid_Dot11R_State;
class Ssids_Ssid_Dot11R_StateDefaultTypeInternal;
extern Ssids_Ssid_Dot11R_StateDefaultTypeInternal _Ssids_Ssid_Dot11R_State_default_instance_;
class Ssids_Ssid_Dot11V;
class Ssids_Ssid_Dot11VDefaultTypeInternal;
extern Ssids_Ssid_Dot11VDefaultTypeInternal _Ssids_Ssid_Dot11V_default_instance_;
class Ssids_Ssid_Dot11V_Config;
class Ssids_Ssid_Dot11V_ConfigDefaultTypeInternal;
extern Ssids_Ssid_Dot11V_ConfigDefaultTypeInternal _Ssids_Ssid_Dot11V_Config_default_instance_;
class Ssids_Ssid_Dot11V_State;
class Ssids_Ssid_Dot11V_StateDefaultTypeInternal;
extern Ssids_Ssid_Dot11V_StateDefaultTypeInternal _Ssids_Ssid_Dot11V_State_default_instance_;
class Ssids_Ssid_Dot1XTimers;
class Ssids_Ssid_Dot1XTimersDefaultTypeInternal;
extern Ssids_Ssid_Dot1XTimersDefaultTypeInternal _Ssids_Ssid_Dot1XTimers_default_instance_;
class Ssids_Ssid_Dot1XTimers_Config;
class Ssids_Ssid_Dot1XTimers_ConfigDefaultTypeInternal;
extern Ssids_Ssid_Dot1XTimers_ConfigDefaultTypeInternal _Ssids_Ssid_Dot1XTimers_Config_default_instance_;
class Ssids_Ssid_Dot1XTimers_State;
class Ssids_Ssid_Dot1XTimers_StateDefaultTypeInternal;
extern Ssids_Ssid_Dot1XTimers_StateDefaultTypeInternal _Ssids_Ssid_Dot1XTimers_State_default_instance_;
class Ssids_Ssid_State;
class Ssids_Ssid_StateDefaultTypeInternal;
extern Ssids_Ssid_StateDefaultTypeInternal _Ssids_Ssid_State_default_instance_;
class Ssids_Ssid_Wmm;
class Ssids_Ssid_WmmDefaultTypeInternal;
extern Ssids_Ssid_WmmDefaultTypeInternal _Ssids_Ssid_Wmm_default_instance_;
class Ssids_Ssid_Wmm_Config;
class Ssids_Ssid_Wmm_ConfigDefaultTypeInternal;
extern Ssids_Ssid_Wmm_ConfigDefaultTypeInternal _Ssids_Ssid_Wmm_Config_default_instance_;
class Ssids_Ssid_Wmm_State;
class Ssids_Ssid_Wmm_StateDefaultTypeInternal;
extern Ssids_Ssid_Wmm_StateDefaultTypeInternal _Ssids_Ssid_Wmm_State_default_instance_;
}  // namespace openconfig_wifi_mac
}  // namespace openconfig
namespace openconfig {
namespace openconfig_wifi_mac {

enum Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode {
  Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_CONNECTIONMODE_UNSET = 0,
  Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_CONNECTIONMODE_A = 1,
  Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_CONNECTIONMODE_B = 2,
  Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_CONNECTIONMODE_G = 3,
  Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_CONNECTIONMODE_N = 4,
  Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_CONNECTIONMODE_AC = 5,
  Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_IsValid(int value);
const Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_ConnectionMode_MIN = Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_CONNECTIONMODE_UNSET;
const Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_ConnectionMode_MAX = Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_CONNECTIONMODE_AC;
const int Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_ConnectionMode_ARRAYSIZE = Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_ConnectionMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_descriptor();
inline const ::std::string& Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_Name(Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_descriptor(), value);
}
inline bool Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_Parse(
    const ::std::string& name, Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode>(
    Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_descriptor(), name, value);
}
enum Ssids_Ssid_Config_Opmode {
  Ssids_Ssid_Config_Opmode_OPMODE_OPEN = 0,
  Ssids_Ssid_Config_Opmode_OPMODE_WPA2_PERSONAL = 2,
  Ssids_Ssid_Config_Opmode_OPMODE_WPA2_ENTERPRISE = 3,
  Ssids_Ssid_Config_Opmode_Ssids_Ssid_Config_Opmode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Ssids_Ssid_Config_Opmode_Ssids_Ssid_Config_Opmode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Ssids_Ssid_Config_Opmode_IsValid(int value);
const Ssids_Ssid_Config_Opmode Ssids_Ssid_Config_Opmode_Opmode_MIN = Ssids_Ssid_Config_Opmode_OPMODE_OPEN;
const Ssids_Ssid_Config_Opmode Ssids_Ssid_Config_Opmode_Opmode_MAX = Ssids_Ssid_Config_Opmode_OPMODE_WPA2_ENTERPRISE;
const int Ssids_Ssid_Config_Opmode_Opmode_ARRAYSIZE = Ssids_Ssid_Config_Opmode_Opmode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ssids_Ssid_Config_Opmode_descriptor();
inline const ::std::string& Ssids_Ssid_Config_Opmode_Name(Ssids_Ssid_Config_Opmode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ssids_Ssid_Config_Opmode_descriptor(), value);
}
inline bool Ssids_Ssid_Config_Opmode_Parse(
    const ::std::string& name, Ssids_Ssid_Config_Opmode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ssids_Ssid_Config_Opmode>(
    Ssids_Ssid_Config_Opmode_descriptor(), name, value);
}
enum Ssids_Ssid_Dot11R_Config_Dot11RMethod {
  Ssids_Ssid_Dot11R_Config_Dot11RMethod_DOT11RMETHOD_OVA = 0,
  Ssids_Ssid_Dot11R_Config_Dot11RMethod_DOT11RMETHOD_ODS = 2,
  Ssids_Ssid_Dot11R_Config_Dot11RMethod_Ssids_Ssid_Dot11R_Config_Dot11RMethod_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Ssids_Ssid_Dot11R_Config_Dot11RMethod_Ssids_Ssid_Dot11R_Config_Dot11RMethod_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Ssids_Ssid_Dot11R_Config_Dot11RMethod_IsValid(int value);
const Ssids_Ssid_Dot11R_Config_Dot11RMethod Ssids_Ssid_Dot11R_Config_Dot11RMethod_Dot11RMethod_MIN = Ssids_Ssid_Dot11R_Config_Dot11RMethod_DOT11RMETHOD_OVA;
const Ssids_Ssid_Dot11R_Config_Dot11RMethod Ssids_Ssid_Dot11R_Config_Dot11RMethod_Dot11RMethod_MAX = Ssids_Ssid_Dot11R_Config_Dot11RMethod_DOT11RMETHOD_ODS;
const int Ssids_Ssid_Dot11R_Config_Dot11RMethod_Dot11RMethod_ARRAYSIZE = Ssids_Ssid_Dot11R_Config_Dot11RMethod_Dot11RMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ssids_Ssid_Dot11R_Config_Dot11RMethod_descriptor();
inline const ::std::string& Ssids_Ssid_Dot11R_Config_Dot11RMethod_Name(Ssids_Ssid_Dot11R_Config_Dot11RMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ssids_Ssid_Dot11R_Config_Dot11RMethod_descriptor(), value);
}
inline bool Ssids_Ssid_Dot11R_Config_Dot11RMethod_Parse(
    const ::std::string& name, Ssids_Ssid_Dot11R_Config_Dot11RMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ssids_Ssid_Dot11R_Config_Dot11RMethod>(
    Ssids_Ssid_Dot11R_Config_Dot11RMethod_descriptor(), name, value);
}
enum Ssids_Ssid_Dot11R_State_Dot11RMethod {
  Ssids_Ssid_Dot11R_State_Dot11RMethod_DOT11RMETHOD_OVA = 0,
  Ssids_Ssid_Dot11R_State_Dot11RMethod_DOT11RMETHOD_ODS = 2,
  Ssids_Ssid_Dot11R_State_Dot11RMethod_Ssids_Ssid_Dot11R_State_Dot11RMethod_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Ssids_Ssid_Dot11R_State_Dot11RMethod_Ssids_Ssid_Dot11R_State_Dot11RMethod_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Ssids_Ssid_Dot11R_State_Dot11RMethod_IsValid(int value);
const Ssids_Ssid_Dot11R_State_Dot11RMethod Ssids_Ssid_Dot11R_State_Dot11RMethod_Dot11RMethod_MIN = Ssids_Ssid_Dot11R_State_Dot11RMethod_DOT11RMETHOD_OVA;
const Ssids_Ssid_Dot11R_State_Dot11RMethod Ssids_Ssid_Dot11R_State_Dot11RMethod_Dot11RMethod_MAX = Ssids_Ssid_Dot11R_State_Dot11RMethod_DOT11RMETHOD_ODS;
const int Ssids_Ssid_Dot11R_State_Dot11RMethod_Dot11RMethod_ARRAYSIZE = Ssids_Ssid_Dot11R_State_Dot11RMethod_Dot11RMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ssids_Ssid_Dot11R_State_Dot11RMethod_descriptor();
inline const ::std::string& Ssids_Ssid_Dot11R_State_Dot11RMethod_Name(Ssids_Ssid_Dot11R_State_Dot11RMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ssids_Ssid_Dot11R_State_Dot11RMethod_descriptor(), value);
}
inline bool Ssids_Ssid_Dot11R_State_Dot11RMethod_Parse(
    const ::std::string& name, Ssids_Ssid_Dot11R_State_Dot11RMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ssids_Ssid_Dot11R_State_Dot11RMethod>(
    Ssids_Ssid_Dot11R_State_Dot11RMethod_descriptor(), name, value);
}
enum Ssids_Ssid_State_Opmode {
  Ssids_Ssid_State_Opmode_OPMODE_OPEN = 0,
  Ssids_Ssid_State_Opmode_OPMODE_WPA2_PERSONAL = 2,
  Ssids_Ssid_State_Opmode_OPMODE_WPA2_ENTERPRISE = 3,
  Ssids_Ssid_State_Opmode_Ssids_Ssid_State_Opmode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Ssids_Ssid_State_Opmode_Ssids_Ssid_State_Opmode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Ssids_Ssid_State_Opmode_IsValid(int value);
const Ssids_Ssid_State_Opmode Ssids_Ssid_State_Opmode_Opmode_MIN = Ssids_Ssid_State_Opmode_OPMODE_OPEN;
const Ssids_Ssid_State_Opmode Ssids_Ssid_State_Opmode_Opmode_MAX = Ssids_Ssid_State_Opmode_OPMODE_WPA2_ENTERPRISE;
const int Ssids_Ssid_State_Opmode_Opmode_ARRAYSIZE = Ssids_Ssid_State_Opmode_Opmode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ssids_Ssid_State_Opmode_descriptor();
inline const ::std::string& Ssids_Ssid_State_Opmode_Name(Ssids_Ssid_State_Opmode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ssids_Ssid_State_Opmode_descriptor(), value);
}
inline bool Ssids_Ssid_State_Opmode_Parse(
    const ::std::string& name, Ssids_Ssid_State_Opmode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ssids_Ssid_State_Opmode>(
    Ssids_Ssid_State_Opmode_descriptor(), name, value);
}
// ===================================================================

class Bssids_Bssid_State_Counters_RxDataDist : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist) */ {
 public:
  Bssids_Bssid_State_Counters_RxDataDist();
  virtual ~Bssids_Bssid_State_Counters_RxDataDist();

  Bssids_Bssid_State_Counters_RxDataDist(const Bssids_Bssid_State_Counters_RxDataDist& from);

  inline Bssids_Bssid_State_Counters_RxDataDist& operator=(const Bssids_Bssid_State_Counters_RxDataDist& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Bssids_Bssid_State_Counters_RxDataDist(Bssids_Bssid_State_Counters_RxDataDist&& from) noexcept
    : Bssids_Bssid_State_Counters_RxDataDist() {
    *this = ::std::move(from);
  }

  inline Bssids_Bssid_State_Counters_RxDataDist& operator=(Bssids_Bssid_State_Counters_RxDataDist&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Bssids_Bssid_State_Counters_RxDataDist& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bssids_Bssid_State_Counters_RxDataDist* internal_default_instance() {
    return reinterpret_cast<const Bssids_Bssid_State_Counters_RxDataDist*>(
               &_Bssids_Bssid_State_Counters_RxDataDist_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Bssids_Bssid_State_Counters_RxDataDist* other);
  friend void swap(Bssids_Bssid_State_Counters_RxDataDist& a, Bssids_Bssid_State_Counters_RxDataDist& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Bssids_Bssid_State_Counters_RxDataDist* New() const PROTOBUF_FINAL { return New(NULL); }

  Bssids_Bssid_State_Counters_RxDataDist* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Bssids_Bssid_State_Counters_RxDataDist& from);
  void MergeFrom(const Bssids_Bssid_State_Counters_RxDataDist& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Bssids_Bssid_State_Counters_RxDataDist* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue rx_262145_524288 = 78039798 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-262145-524288"];
  bool has_rx_262145_524288() const;
  void clear_rx_262145_524288();
  static const int kRx262145524288FieldNumber = 78039798;
  const ::ywrapper::UintValue& rx_262145_524288() const;
  ::ywrapper::UintValue* release_rx_262145_524288();
  ::ywrapper::UintValue* mutable_rx_262145_524288();
  void set_allocated_rx_262145_524288(::ywrapper::UintValue* rx_262145_524288);

  // .ywrapper.UintValue rx_524289_1048576 = 103930652 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-524289-1048576"];
  bool has_rx_524289_1048576() const;
  void clear_rx_524289_1048576();
  static const int kRx5242891048576FieldNumber = 103930652;
  const ::ywrapper::UintValue& rx_524289_1048576() const;
  ::ywrapper::UintValue* release_rx_524289_1048576();
  ::ywrapper::UintValue* mutable_rx_524289_1048576();
  void set_allocated_rx_524289_1048576(::ywrapper::UintValue* rx_524289_1048576);

  // .ywrapper.UintValue rx_0_64 = 163240557 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-0-64"];
  bool has_rx_0_64() const;
  void clear_rx_0_64();
  static const int kRx064FieldNumber = 163240557;
  const ::ywrapper::UintValue& rx_0_64() const;
  ::ywrapper::UintValue* release_rx_0_64();
  ::ywrapper::UintValue* mutable_rx_0_64();
  void set_allocated_rx_0_64(::ywrapper::UintValue* rx_0_64);

  // .ywrapper.UintValue rx_513_1024 = 171543073 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-513-1024"];
  bool has_rx_513_1024() const;
  void clear_rx_513_1024();
  static const int kRx5131024FieldNumber = 171543073;
  const ::ywrapper::UintValue& rx_513_1024() const;
  ::ywrapper::UintValue* release_rx_513_1024();
  ::ywrapper::UintValue* mutable_rx_513_1024();
  void set_allocated_rx_513_1024(::ywrapper::UintValue* rx_513_1024);

  // .ywrapper.UintValue rx_65537_131072 = 177561669 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-65537-131072"];
  bool has_rx_65537_131072() const;
  void clear_rx_65537_131072();
  static const int kRx65537131072FieldNumber = 177561669;
  const ::ywrapper::UintValue& rx_65537_131072() const;
  ::ywrapper::UintValue* release_rx_65537_131072();
  ::ywrapper::UintValue* mutable_rx_65537_131072();
  void set_allocated_rx_65537_131072(::ywrapper::UintValue* rx_65537_131072);

  // .ywrapper.UintValue rx_65_128 = 207221893 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-65-128"];
  bool has_rx_65_128() const;
  void clear_rx_65_128();
  static const int kRx65128FieldNumber = 207221893;
  const ::ywrapper::UintValue& rx_65_128() const;
  ::ywrapper::UintValue* release_rx_65_128();
  ::ywrapper::UintValue* mutable_rx_65_128();
  void set_allocated_rx_65_128(::ywrapper::UintValue* rx_65_128);

  // .ywrapper.UintValue rx_4097_8192 = 212656659 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-4097-8192"];
  bool has_rx_4097_8192() const;
  void clear_rx_4097_8192();
  static const int kRx40978192FieldNumber = 212656659;
  const ::ywrapper::UintValue& rx_4097_8192() const;
  ::ywrapper::UintValue* release_rx_4097_8192();
  ::ywrapper::UintValue* mutable_rx_4097_8192();
  void set_allocated_rx_4097_8192(::ywrapper::UintValue* rx_4097_8192);

  // .ywrapper.UintValue rx_2049_4096 = 263507443 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-2049-4096"];
  bool has_rx_2049_4096() const;
  void clear_rx_2049_4096();
  static const int kRx20494096FieldNumber = 263507443;
  const ::ywrapper::UintValue& rx_2049_4096() const;
  ::ywrapper::UintValue* release_rx_2049_4096();
  ::ywrapper::UintValue* mutable_rx_2049_4096();
  void set_allocated_rx_2049_4096(::ywrapper::UintValue* rx_2049_4096);

  // .ywrapper.UintValue rx_257_512 = 274835051 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-257-512"];
  bool has_rx_257_512() const;
  void clear_rx_257_512();
  static const int kRx257512FieldNumber = 274835051;
  const ::ywrapper::UintValue& rx_257_512() const;
  ::ywrapper::UintValue* release_rx_257_512();
  ::ywrapper::UintValue* mutable_rx_257_512();
  void set_allocated_rx_257_512(::ywrapper::UintValue* rx_257_512);

  // .ywrapper.UintValue rx_1025_2048 = 319752669 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-1025-2048"];
  bool has_rx_1025_2048() const;
  void clear_rx_1025_2048();
  static const int kRx10252048FieldNumber = 319752669;
  const ::ywrapper::UintValue& rx_1025_2048() const;
  ::ywrapper::UintValue* release_rx_1025_2048();
  ::ywrapper::UintValue* mutable_rx_1025_2048();
  void set_allocated_rx_1025_2048(::ywrapper::UintValue* rx_1025_2048);

  // .ywrapper.UintValue rx_8193_16384 = 337500764 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-8193-16384"];
  bool has_rx_8193_16384() const;
  void clear_rx_8193_16384();
  static const int kRx819316384FieldNumber = 337500764;
  const ::ywrapper::UintValue& rx_8193_16384() const;
  ::ywrapper::UintValue* release_rx_8193_16384();
  ::ywrapper::UintValue* mutable_rx_8193_16384();
  void set_allocated_rx_8193_16384(::ywrapper::UintValue* rx_8193_16384);

  // .ywrapper.UintValue rx_131073_262144 = 376738071 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-131073-262144"];
  bool has_rx_131073_262144() const;
  void clear_rx_131073_262144();
  static const int kRx131073262144FieldNumber = 376738071;
  const ::ywrapper::UintValue& rx_131073_262144() const;
  ::ywrapper::UintValue* release_rx_131073_262144();
  ::ywrapper::UintValue* mutable_rx_131073_262144();
  void set_allocated_rx_131073_262144(::ywrapper::UintValue* rx_131073_262144);

  // .ywrapper.UintValue rx_32769_65536 = 399680219 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-32769-65536"];
  bool has_rx_32769_65536() const;
  void clear_rx_32769_65536();
  static const int kRx3276965536FieldNumber = 399680219;
  const ::ywrapper::UintValue& rx_32769_65536() const;
  ::ywrapper::UintValue* release_rx_32769_65536();
  ::ywrapper::UintValue* mutable_rx_32769_65536();
  void set_allocated_rx_32769_65536(::ywrapper::UintValue* rx_32769_65536);

  // .ywrapper.UintValue rx_16385_32768 = 461886212 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-16385-32768"];
  bool has_rx_16385_32768() const;
  void clear_rx_16385_32768();
  static const int kRx1638532768FieldNumber = 461886212;
  const ::ywrapper::UintValue& rx_16385_32768() const;
  ::ywrapper::UintValue* release_rx_16385_32768();
  ::ywrapper::UintValue* mutable_rx_16385_32768();
  void set_allocated_rx_16385_32768(::ywrapper::UintValue* rx_16385_32768);

  // .ywrapper.UintValue rx_129_256 = 481275956 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-129-256"];
  bool has_rx_129_256() const;
  void clear_rx_129_256();
  static const int kRx129256FieldNumber = 481275956;
  const ::ywrapper::UintValue& rx_129_256() const;
  ::ywrapper::UintValue* release_rx_129_256();
  ::ywrapper::UintValue* mutable_rx_129_256();
  void set_allocated_rx_129_256(::ywrapper::UintValue* rx_129_256);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* rx_262145_524288_;
  ::ywrapper::UintValue* rx_524289_1048576_;
  ::ywrapper::UintValue* rx_0_64_;
  ::ywrapper::UintValue* rx_513_1024_;
  ::ywrapper::UintValue* rx_65537_131072_;
  ::ywrapper::UintValue* rx_65_128_;
  ::ywrapper::UintValue* rx_4097_8192_;
  ::ywrapper::UintValue* rx_2049_4096_;
  ::ywrapper::UintValue* rx_257_512_;
  ::ywrapper::UintValue* rx_1025_2048_;
  ::ywrapper::UintValue* rx_8193_16384_;
  ::ywrapper::UintValue* rx_131073_262144_;
  ::ywrapper::UintValue* rx_32769_65536_;
  ::ywrapper::UintValue* rx_16385_32768_;
  ::ywrapper::UintValue* rx_129_256_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids_Bssid_State_Counters_RxDataDistImpl();
};
// -------------------------------------------------------------------

class Bssids_Bssid_State_Counters_RxDataWmm : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm) */ {
 public:
  Bssids_Bssid_State_Counters_RxDataWmm();
  virtual ~Bssids_Bssid_State_Counters_RxDataWmm();

  Bssids_Bssid_State_Counters_RxDataWmm(const Bssids_Bssid_State_Counters_RxDataWmm& from);

  inline Bssids_Bssid_State_Counters_RxDataWmm& operator=(const Bssids_Bssid_State_Counters_RxDataWmm& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Bssids_Bssid_State_Counters_RxDataWmm(Bssids_Bssid_State_Counters_RxDataWmm&& from) noexcept
    : Bssids_Bssid_State_Counters_RxDataWmm() {
    *this = ::std::move(from);
  }

  inline Bssids_Bssid_State_Counters_RxDataWmm& operator=(Bssids_Bssid_State_Counters_RxDataWmm&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Bssids_Bssid_State_Counters_RxDataWmm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bssids_Bssid_State_Counters_RxDataWmm* internal_default_instance() {
    return reinterpret_cast<const Bssids_Bssid_State_Counters_RxDataWmm*>(
               &_Bssids_Bssid_State_Counters_RxDataWmm_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Bssids_Bssid_State_Counters_RxDataWmm* other);
  friend void swap(Bssids_Bssid_State_Counters_RxDataWmm& a, Bssids_Bssid_State_Counters_RxDataWmm& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Bssids_Bssid_State_Counters_RxDataWmm* New() const PROTOBUF_FINAL { return New(NULL); }

  Bssids_Bssid_State_Counters_RxDataWmm* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Bssids_Bssid_State_Counters_RxDataWmm& from);
  void MergeFrom(const Bssids_Bssid_State_Counters_RxDataWmm& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Bssids_Bssid_State_Counters_RxDataWmm* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue bk = 147126133 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-wmm/bk"];
  bool has_bk() const;
  void clear_bk();
  static const int kBkFieldNumber = 147126133;
  const ::ywrapper::UintValue& bk() const;
  ::ywrapper::UintValue* release_bk();
  ::ywrapper::UintValue* mutable_bk();
  void set_allocated_bk(::ywrapper::UintValue* bk);

  // .ywrapper.UintValue be = 147126139 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-wmm/be"];
  bool has_be() const;
  void clear_be();
  static const int kBeFieldNumber = 147126139;
  const ::ywrapper::UintValue& be() const;
  ::ywrapper::UintValue* release_be();
  ::ywrapper::UintValue* mutable_be();
  void set_allocated_be(::ywrapper::UintValue* be);

  // .ywrapper.UintValue vi = 482678515 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-wmm/vi"];
  bool has_vi() const;
  void clear_vi();
  static const int kViFieldNumber = 482678515;
  const ::ywrapper::UintValue& vi() const;
  ::ywrapper::UintValue* release_vi();
  ::ywrapper::UintValue* mutable_vi();
  void set_allocated_vi(::ywrapper::UintValue* vi);

  // .ywrapper.UintValue vo = 482678517 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-wmm/vo"];
  bool has_vo() const;
  void clear_vo();
  static const int kVoFieldNumber = 482678517;
  const ::ywrapper::UintValue& vo() const;
  ::ywrapper::UintValue* release_vo();
  ::ywrapper::UintValue* mutable_vo();
  void set_allocated_vo(::ywrapper::UintValue* vo);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* bk_;
  ::ywrapper::UintValue* be_;
  ::ywrapper::UintValue* vi_;
  ::ywrapper::UintValue* vo_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids_Bssid_State_Counters_RxDataWmmImpl();
};
// -------------------------------------------------------------------

class Bssids_Bssid_State_Counters_RxMcs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs) */ {
 public:
  Bssids_Bssid_State_Counters_RxMcs();
  virtual ~Bssids_Bssid_State_Counters_RxMcs();

  Bssids_Bssid_State_Counters_RxMcs(const Bssids_Bssid_State_Counters_RxMcs& from);

  inline Bssids_Bssid_State_Counters_RxMcs& operator=(const Bssids_Bssid_State_Counters_RxMcs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Bssids_Bssid_State_Counters_RxMcs(Bssids_Bssid_State_Counters_RxMcs&& from) noexcept
    : Bssids_Bssid_State_Counters_RxMcs() {
    *this = ::std::move(from);
  }

  inline Bssids_Bssid_State_Counters_RxMcs& operator=(Bssids_Bssid_State_Counters_RxMcs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Bssids_Bssid_State_Counters_RxMcs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bssids_Bssid_State_Counters_RxMcs* internal_default_instance() {
    return reinterpret_cast<const Bssids_Bssid_State_Counters_RxMcs*>(
               &_Bssids_Bssid_State_Counters_RxMcs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Bssids_Bssid_State_Counters_RxMcs* other);
  friend void swap(Bssids_Bssid_State_Counters_RxMcs& a, Bssids_Bssid_State_Counters_RxMcs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Bssids_Bssid_State_Counters_RxMcs* New() const PROTOBUF_FINAL { return New(NULL); }

  Bssids_Bssid_State_Counters_RxMcs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Bssids_Bssid_State_Counters_RxMcs& from);
  void MergeFrom(const Bssids_Bssid_State_Counters_RxMcs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Bssids_Bssid_State_Counters_RxMcs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue mcs0 = 360817472 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs0"];
  bool has_mcs0() const;
  void clear_mcs0();
  static const int kMcs0FieldNumber = 360817472;
  const ::ywrapper::UintValue& mcs0() const;
  ::ywrapper::UintValue* release_mcs0();
  ::ywrapper::UintValue* mutable_mcs0();
  void set_allocated_mcs0(::ywrapper::UintValue* mcs0);

  // .ywrapper.UintValue mcs1 = 360817473 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs1"];
  bool has_mcs1() const;
  void clear_mcs1();
  static const int kMcs1FieldNumber = 360817473;
  const ::ywrapper::UintValue& mcs1() const;
  ::ywrapper::UintValue* release_mcs1();
  ::ywrapper::UintValue* mutable_mcs1();
  void set_allocated_mcs1(::ywrapper::UintValue* mcs1);

  // .ywrapper.UintValue mcs2 = 360817474 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs2"];
  bool has_mcs2() const;
  void clear_mcs2();
  static const int kMcs2FieldNumber = 360817474;
  const ::ywrapper::UintValue& mcs2() const;
  ::ywrapper::UintValue* release_mcs2();
  ::ywrapper::UintValue* mutable_mcs2();
  void set_allocated_mcs2(::ywrapper::UintValue* mcs2);

  // .ywrapper.UintValue mcs3 = 360817475 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs3"];
  bool has_mcs3() const;
  void clear_mcs3();
  static const int kMcs3FieldNumber = 360817475;
  const ::ywrapper::UintValue& mcs3() const;
  ::ywrapper::UintValue* release_mcs3();
  ::ywrapper::UintValue* mutable_mcs3();
  void set_allocated_mcs3(::ywrapper::UintValue* mcs3);

  // .ywrapper.UintValue mcs4 = 360817476 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs4"];
  bool has_mcs4() const;
  void clear_mcs4();
  static const int kMcs4FieldNumber = 360817476;
  const ::ywrapper::UintValue& mcs4() const;
  ::ywrapper::UintValue* release_mcs4();
  ::ywrapper::UintValue* mutable_mcs4();
  void set_allocated_mcs4(::ywrapper::UintValue* mcs4);

  // .ywrapper.UintValue mcs5 = 360817477 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs5"];
  bool has_mcs5() const;
  void clear_mcs5();
  static const int kMcs5FieldNumber = 360817477;
  const ::ywrapper::UintValue& mcs5() const;
  ::ywrapper::UintValue* release_mcs5();
  ::ywrapper::UintValue* mutable_mcs5();
  void set_allocated_mcs5(::ywrapper::UintValue* mcs5);

  // .ywrapper.UintValue mcs6 = 360817478 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs6"];
  bool has_mcs6() const;
  void clear_mcs6();
  static const int kMcs6FieldNumber = 360817478;
  const ::ywrapper::UintValue& mcs6() const;
  ::ywrapper::UintValue* release_mcs6();
  ::ywrapper::UintValue* mutable_mcs6();
  void set_allocated_mcs6(::ywrapper::UintValue* mcs6);

  // .ywrapper.UintValue mcs7 = 360817479 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs7"];
  bool has_mcs7() const;
  void clear_mcs7();
  static const int kMcs7FieldNumber = 360817479;
  const ::ywrapper::UintValue& mcs7() const;
  ::ywrapper::UintValue* release_mcs7();
  ::ywrapper::UintValue* mutable_mcs7();
  void set_allocated_mcs7(::ywrapper::UintValue* mcs7);

  // .ywrapper.UintValue mcs8 = 360817480 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs8"];
  bool has_mcs8() const;
  void clear_mcs8();
  static const int kMcs8FieldNumber = 360817480;
  const ::ywrapper::UintValue& mcs8() const;
  ::ywrapper::UintValue* release_mcs8();
  ::ywrapper::UintValue* mutable_mcs8();
  void set_allocated_mcs8(::ywrapper::UintValue* mcs8);

  // .ywrapper.UintValue mcs9 = 360817481 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs9"];
  bool has_mcs9() const;
  void clear_mcs9();
  static const int kMcs9FieldNumber = 360817481;
  const ::ywrapper::UintValue& mcs9() const;
  ::ywrapper::UintValue* release_mcs9();
  ::ywrapper::UintValue* mutable_mcs9();
  void set_allocated_mcs9(::ywrapper::UintValue* mcs9);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* mcs0_;
  ::ywrapper::UintValue* mcs1_;
  ::ywrapper::UintValue* mcs2_;
  ::ywrapper::UintValue* mcs3_;
  ::ywrapper::UintValue* mcs4_;
  ::ywrapper::UintValue* mcs5_;
  ::ywrapper::UintValue* mcs6_;
  ::ywrapper::UintValue* mcs7_;
  ::ywrapper::UintValue* mcs8_;
  ::ywrapper::UintValue* mcs9_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids_Bssid_State_Counters_RxMcsImpl();
};
// -------------------------------------------------------------------

class Bssids_Bssid_State_Counters_TxDataDist : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist) */ {
 public:
  Bssids_Bssid_State_Counters_TxDataDist();
  virtual ~Bssids_Bssid_State_Counters_TxDataDist();

  Bssids_Bssid_State_Counters_TxDataDist(const Bssids_Bssid_State_Counters_TxDataDist& from);

  inline Bssids_Bssid_State_Counters_TxDataDist& operator=(const Bssids_Bssid_State_Counters_TxDataDist& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Bssids_Bssid_State_Counters_TxDataDist(Bssids_Bssid_State_Counters_TxDataDist&& from) noexcept
    : Bssids_Bssid_State_Counters_TxDataDist() {
    *this = ::std::move(from);
  }

  inline Bssids_Bssid_State_Counters_TxDataDist& operator=(Bssids_Bssid_State_Counters_TxDataDist&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Bssids_Bssid_State_Counters_TxDataDist& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bssids_Bssid_State_Counters_TxDataDist* internal_default_instance() {
    return reinterpret_cast<const Bssids_Bssid_State_Counters_TxDataDist*>(
               &_Bssids_Bssid_State_Counters_TxDataDist_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Bssids_Bssid_State_Counters_TxDataDist* other);
  friend void swap(Bssids_Bssid_State_Counters_TxDataDist& a, Bssids_Bssid_State_Counters_TxDataDist& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Bssids_Bssid_State_Counters_TxDataDist* New() const PROTOBUF_FINAL { return New(NULL); }

  Bssids_Bssid_State_Counters_TxDataDist* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Bssids_Bssid_State_Counters_TxDataDist& from);
  void MergeFrom(const Bssids_Bssid_State_Counters_TxDataDist& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Bssids_Bssid_State_Counters_TxDataDist* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue tx_32769_65536 = 53919811 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-32769-65536"];
  bool has_tx_32769_65536() const;
  void clear_tx_32769_65536();
  static const int kTx3276965536FieldNumber = 53919811;
  const ::ywrapper::UintValue& tx_32769_65536() const;
  ::ywrapper::UintValue* release_tx_32769_65536();
  ::ywrapper::UintValue* mutable_tx_32769_65536();
  void set_allocated_tx_32769_65536(::ywrapper::UintValue* tx_32769_65536);

  // .ywrapper.UintValue tx_0_64 = 88126549 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-0-64"];
  bool has_tx_0_64() const;
  void clear_tx_0_64();
  static const int kTx064FieldNumber = 88126549;
  const ::ywrapper::UintValue& tx_0_64() const;
  ::ywrapper::UintValue* release_tx_0_64();
  ::ywrapper::UintValue* mutable_tx_0_64();
  void set_allocated_tx_0_64(::ywrapper::UintValue* tx_0_64);

  // .ywrapper.UintValue tx_4097_8192 = 106713499 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-4097-8192"];
  bool has_tx_4097_8192() const;
  void clear_tx_4097_8192();
  static const int kTx40978192FieldNumber = 106713499;
  const ::ywrapper::UintValue& tx_4097_8192() const;
  ::ywrapper::UintValue* release_tx_4097_8192();
  ::ywrapper::UintValue* mutable_tx_4097_8192();
  void set_allocated_tx_4097_8192(::ywrapper::UintValue* tx_4097_8192);

  // .ywrapper.UintValue tx_524289_1048576 = 106783764 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-524289-1048576"];
  bool has_tx_524289_1048576() const;
  void clear_tx_524289_1048576();
  static const int kTx5242891048576FieldNumber = 106783764;
  const ::ywrapper::UintValue& tx_524289_1048576() const;
  ::ywrapper::UintValue* release_tx_524289_1048576();
  ::ywrapper::UintValue* mutable_tx_524289_1048576();
  void set_allocated_tx_524289_1048576(::ywrapper::UintValue* tx_524289_1048576);

  // .ywrapper.UintValue tx_257_512 = 114841827 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-257-512"];
  bool has_tx_257_512() const;
  void clear_tx_257_512();
  static const int kTx257512FieldNumber = 114841827;
  const ::ywrapper::UintValue& tx_257_512() const;
  ::ywrapper::UintValue* release_tx_257_512();
  ::ywrapper::UintValue* mutable_tx_257_512();
  void set_allocated_tx_257_512(::ywrapper::UintValue* tx_257_512);

  // .ywrapper.UintValue tx_65537_131072 = 123295085 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-65537-131072"];
  bool has_tx_65537_131072() const;
  void clear_tx_65537_131072();
  static const int kTx65537131072FieldNumber = 123295085;
  const ::ywrapper::UintValue& tx_65537_131072() const;
  ::ywrapper::UintValue* release_tx_65537_131072();
  ::ywrapper::UintValue* mutable_tx_65537_131072();
  void set_allocated_tx_65537_131072(::ywrapper::UintValue* tx_65537_131072);

  // .ywrapper.UintValue tx_129_256 = 125235836 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-129-256"];
  bool has_tx_129_256() const;
  void clear_tx_129_256();
  static const int kTx129256FieldNumber = 125235836;
  const ::ywrapper::UintValue& tx_129_256() const;
  ::ywrapper::UintValue* release_tx_129_256();
  ::ywrapper::UintValue* mutable_tx_129_256();
  void set_allocated_tx_129_256(::ywrapper::UintValue* tx_129_256);

  // .ywrapper.UintValue tx_1025_2048 = 196667525 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-1025-2048"];
  bool has_tx_1025_2048() const;
  void clear_tx_1025_2048();
  static const int kTx10252048FieldNumber = 196667525;
  const ::ywrapper::UintValue& tx_1025_2048() const;
  ::ywrapper::UintValue* release_tx_1025_2048();
  ::ywrapper::UintValue* mutable_tx_1025_2048();
  void set_allocated_tx_1025_2048(::ywrapper::UintValue* tx_1025_2048);

  // .ywrapper.UintValue tx_65_128 = 211883005 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-65-128"];
  bool has_tx_65_128() const;
  void clear_tx_65_128();
  static const int kTx65128FieldNumber = 211883005;
  const ::ywrapper::UintValue& tx_65_128() const;
  ::ywrapper::UintValue* release_tx_65_128();
  ::ywrapper::UintValue* mutable_tx_65_128();
  void set_allocated_tx_65_128(::ywrapper::UintValue* tx_65_128);

  // .ywrapper.UintValue tx_2049_4096 = 220523787 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-2049-4096"];
  bool has_tx_2049_4096() const;
  void clear_tx_2049_4096();
  static const int kTx20494096FieldNumber = 220523787;
  const ::ywrapper::UintValue& tx_2049_4096() const;
  ::ywrapper::UintValue* release_tx_2049_4096();
  ::ywrapper::UintValue* mutable_tx_2049_4096();
  void set_allocated_tx_2049_4096(::ywrapper::UintValue* tx_2049_4096);

  // .ywrapper.UintValue tx_8193_16384 = 304431444 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-8193-16384"];
  bool has_tx_8193_16384() const;
  void clear_tx_8193_16384();
  static const int kTx819316384FieldNumber = 304431444;
  const ::ywrapper::UintValue& tx_8193_16384() const;
  ::ywrapper::UintValue* release_tx_8193_16384();
  ::ywrapper::UintValue* mutable_tx_8193_16384();
  void set_allocated_tx_8193_16384(::ywrapper::UintValue* tx_8193_16384);

  // .ywrapper.UintValue tx_131073_262144 = 335307663 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-131073-262144"];
  bool has_tx_131073_262144() const;
  void clear_tx_131073_262144();
  static const int kTx131073262144FieldNumber = 335307663;
  const ::ywrapper::UintValue& tx_131073_262144() const;
  ::ywrapper::UintValue* release_tx_131073_262144();
  ::ywrapper::UintValue* mutable_tx_131073_262144();
  void set_allocated_tx_131073_262144(::ywrapper::UintValue* tx_131073_262144);

  // .ywrapper.UintValue tx_262145_524288 = 386821806 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-262145-524288"];
  bool has_tx_262145_524288() const;
  void clear_tx_262145_524288();
  static const int kTx262145524288FieldNumber = 386821806;
  const ::ywrapper::UintValue& tx_262145_524288() const;
  ::ywrapper::UintValue* release_tx_262145_524288();
  ::ywrapper::UintValue* mutable_tx_262145_524288();
  void set_allocated_tx_262145_524288(::ywrapper::UintValue* tx_262145_524288);

  // .ywrapper.UintValue tx_513_1024 = 517866953 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-513-1024"];
  bool has_tx_513_1024() const;
  void clear_tx_513_1024();
  static const int kTx5131024FieldNumber = 517866953;
  const ::ywrapper::UintValue& tx_513_1024() const;
  ::ywrapper::UintValue* release_tx_513_1024();
  ::ywrapper::UintValue* mutable_tx_513_1024();
  void set_allocated_tx_513_1024(::ywrapper::UintValue* tx_513_1024);

  // .ywrapper.UintValue tx_16385_32768 = 519209788 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-16385-32768"];
  bool has_tx_16385_32768() const;
  void clear_tx_16385_32768();
  static const int kTx1638532768FieldNumber = 519209788;
  const ::ywrapper::UintValue& tx_16385_32768() const;
  ::ywrapper::UintValue* release_tx_16385_32768();
  ::ywrapper::UintValue* mutable_tx_16385_32768();
  void set_allocated_tx_16385_32768(::ywrapper::UintValue* tx_16385_32768);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* tx_32769_65536_;
  ::ywrapper::UintValue* tx_0_64_;
  ::ywrapper::UintValue* tx_4097_8192_;
  ::ywrapper::UintValue* tx_524289_1048576_;
  ::ywrapper::UintValue* tx_257_512_;
  ::ywrapper::UintValue* tx_65537_131072_;
  ::ywrapper::UintValue* tx_129_256_;
  ::ywrapper::UintValue* tx_1025_2048_;
  ::ywrapper::UintValue* tx_65_128_;
  ::ywrapper::UintValue* tx_2049_4096_;
  ::ywrapper::UintValue* tx_8193_16384_;
  ::ywrapper::UintValue* tx_131073_262144_;
  ::ywrapper::UintValue* tx_262145_524288_;
  ::ywrapper::UintValue* tx_513_1024_;
  ::ywrapper::UintValue* tx_16385_32768_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids_Bssid_State_Counters_TxDataDistImpl();
};
// -------------------------------------------------------------------

class Bssids_Bssid_State_Counters_TxDataWmm : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm) */ {
 public:
  Bssids_Bssid_State_Counters_TxDataWmm();
  virtual ~Bssids_Bssid_State_Counters_TxDataWmm();

  Bssids_Bssid_State_Counters_TxDataWmm(const Bssids_Bssid_State_Counters_TxDataWmm& from);

  inline Bssids_Bssid_State_Counters_TxDataWmm& operator=(const Bssids_Bssid_State_Counters_TxDataWmm& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Bssids_Bssid_State_Counters_TxDataWmm(Bssids_Bssid_State_Counters_TxDataWmm&& from) noexcept
    : Bssids_Bssid_State_Counters_TxDataWmm() {
    *this = ::std::move(from);
  }

  inline Bssids_Bssid_State_Counters_TxDataWmm& operator=(Bssids_Bssid_State_Counters_TxDataWmm&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Bssids_Bssid_State_Counters_TxDataWmm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bssids_Bssid_State_Counters_TxDataWmm* internal_default_instance() {
    return reinterpret_cast<const Bssids_Bssid_State_Counters_TxDataWmm*>(
               &_Bssids_Bssid_State_Counters_TxDataWmm_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Bssids_Bssid_State_Counters_TxDataWmm* other);
  friend void swap(Bssids_Bssid_State_Counters_TxDataWmm& a, Bssids_Bssid_State_Counters_TxDataWmm& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Bssids_Bssid_State_Counters_TxDataWmm* New() const PROTOBUF_FINAL { return New(NULL); }

  Bssids_Bssid_State_Counters_TxDataWmm* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Bssids_Bssid_State_Counters_TxDataWmm& from);
  void MergeFrom(const Bssids_Bssid_State_Counters_TxDataWmm& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Bssids_Bssid_State_Counters_TxDataWmm* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue vi = 223126141 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-wmm/vi"];
  bool has_vi() const;
  void clear_vi();
  static const int kViFieldNumber = 223126141;
  const ::ywrapper::UintValue& vi() const;
  ::ywrapper::UintValue* release_vi();
  ::ywrapper::UintValue* mutable_vi();
  void set_allocated_vi(::ywrapper::UintValue* vi);

  // .ywrapper.UintValue vo = 223126139 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-wmm/vo"];
  bool has_vo() const;
  void clear_vo();
  static const int kVoFieldNumber = 223126139;
  const ::ywrapper::UintValue& vo() const;
  ::ywrapper::UintValue* release_vo();
  ::ywrapper::UintValue* mutable_vo();
  void set_allocated_vo(::ywrapper::UintValue* vo);

  // .ywrapper.UintValue be = 424444669 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-wmm/be"];
  bool has_be() const;
  void clear_be();
  static const int kBeFieldNumber = 424444669;
  const ::ywrapper::UintValue& be() const;
  ::ywrapper::UintValue* release_be();
  ::ywrapper::UintValue* mutable_be();
  void set_allocated_be(::ywrapper::UintValue* be);

  // .ywrapper.UintValue bk = 424444659 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-wmm/bk"];
  bool has_bk() const;
  void clear_bk();
  static const int kBkFieldNumber = 424444659;
  const ::ywrapper::UintValue& bk() const;
  ::ywrapper::UintValue* release_bk();
  ::ywrapper::UintValue* mutable_bk();
  void set_allocated_bk(::ywrapper::UintValue* bk);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* vi_;
  ::ywrapper::UintValue* vo_;
  ::ywrapper::UintValue* be_;
  ::ywrapper::UintValue* bk_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids_Bssid_State_Counters_TxDataWmmImpl();
};
// -------------------------------------------------------------------

class Bssids_Bssid_State_Counters_TxMcs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs) */ {
 public:
  Bssids_Bssid_State_Counters_TxMcs();
  virtual ~Bssids_Bssid_State_Counters_TxMcs();

  Bssids_Bssid_State_Counters_TxMcs(const Bssids_Bssid_State_Counters_TxMcs& from);

  inline Bssids_Bssid_State_Counters_TxMcs& operator=(const Bssids_Bssid_State_Counters_TxMcs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Bssids_Bssid_State_Counters_TxMcs(Bssids_Bssid_State_Counters_TxMcs&& from) noexcept
    : Bssids_Bssid_State_Counters_TxMcs() {
    *this = ::std::move(from);
  }

  inline Bssids_Bssid_State_Counters_TxMcs& operator=(Bssids_Bssid_State_Counters_TxMcs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Bssids_Bssid_State_Counters_TxMcs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bssids_Bssid_State_Counters_TxMcs* internal_default_instance() {
    return reinterpret_cast<const Bssids_Bssid_State_Counters_TxMcs*>(
               &_Bssids_Bssid_State_Counters_TxMcs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Bssids_Bssid_State_Counters_TxMcs* other);
  friend void swap(Bssids_Bssid_State_Counters_TxMcs& a, Bssids_Bssid_State_Counters_TxMcs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Bssids_Bssid_State_Counters_TxMcs* New() const PROTOBUF_FINAL { return New(NULL); }

  Bssids_Bssid_State_Counters_TxMcs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Bssids_Bssid_State_Counters_TxMcs& from);
  void MergeFrom(const Bssids_Bssid_State_Counters_TxMcs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Bssids_Bssid_State_Counters_TxMcs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue mcs0 = 224524070 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs0"];
  bool has_mcs0() const;
  void clear_mcs0();
  static const int kMcs0FieldNumber = 224524070;
  const ::ywrapper::UintValue& mcs0() const;
  ::ywrapper::UintValue* release_mcs0();
  ::ywrapper::UintValue* mutable_mcs0();
  void set_allocated_mcs0(::ywrapper::UintValue* mcs0);

  // .ywrapper.UintValue mcs1 = 224524071 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs1"];
  bool has_mcs1() const;
  void clear_mcs1();
  static const int kMcs1FieldNumber = 224524071;
  const ::ywrapper::UintValue& mcs1() const;
  ::ywrapper::UintValue* release_mcs1();
  ::ywrapper::UintValue* mutable_mcs1();
  void set_allocated_mcs1(::ywrapper::UintValue* mcs1);

  // .ywrapper.UintValue mcs2 = 224524068 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs2"];
  bool has_mcs2() const;
  void clear_mcs2();
  static const int kMcs2FieldNumber = 224524068;
  const ::ywrapper::UintValue& mcs2() const;
  ::ywrapper::UintValue* release_mcs2();
  ::ywrapper::UintValue* mutable_mcs2();
  void set_allocated_mcs2(::ywrapper::UintValue* mcs2);

  // .ywrapper.UintValue mcs3 = 224524069 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs3"];
  bool has_mcs3() const;
  void clear_mcs3();
  static const int kMcs3FieldNumber = 224524069;
  const ::ywrapper::UintValue& mcs3() const;
  ::ywrapper::UintValue* release_mcs3();
  ::ywrapper::UintValue* mutable_mcs3();
  void set_allocated_mcs3(::ywrapper::UintValue* mcs3);

  // .ywrapper.UintValue mcs4 = 224524066 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs4"];
  bool has_mcs4() const;
  void clear_mcs4();
  static const int kMcs4FieldNumber = 224524066;
  const ::ywrapper::UintValue& mcs4() const;
  ::ywrapper::UintValue* release_mcs4();
  ::ywrapper::UintValue* mutable_mcs4();
  void set_allocated_mcs4(::ywrapper::UintValue* mcs4);

  // .ywrapper.UintValue mcs5 = 224524067 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs5"];
  bool has_mcs5() const;
  void clear_mcs5();
  static const int kMcs5FieldNumber = 224524067;
  const ::ywrapper::UintValue& mcs5() const;
  ::ywrapper::UintValue* release_mcs5();
  ::ywrapper::UintValue* mutable_mcs5();
  void set_allocated_mcs5(::ywrapper::UintValue* mcs5);

  // .ywrapper.UintValue mcs6 = 224524064 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs6"];
  bool has_mcs6() const;
  void clear_mcs6();
  static const int kMcs6FieldNumber = 224524064;
  const ::ywrapper::UintValue& mcs6() const;
  ::ywrapper::UintValue* release_mcs6();
  ::ywrapper::UintValue* mutable_mcs6();
  void set_allocated_mcs6(::ywrapper::UintValue* mcs6);

  // .ywrapper.UintValue mcs7 = 224524065 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs7"];
  bool has_mcs7() const;
  void clear_mcs7();
  static const int kMcs7FieldNumber = 224524065;
  const ::ywrapper::UintValue& mcs7() const;
  ::ywrapper::UintValue* release_mcs7();
  ::ywrapper::UintValue* mutable_mcs7();
  void set_allocated_mcs7(::ywrapper::UintValue* mcs7);

  // .ywrapper.UintValue mcs8 = 224524078 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs8"];
  bool has_mcs8() const;
  void clear_mcs8();
  static const int kMcs8FieldNumber = 224524078;
  const ::ywrapper::UintValue& mcs8() const;
  ::ywrapper::UintValue* release_mcs8();
  ::ywrapper::UintValue* mutable_mcs8();
  void set_allocated_mcs8(::ywrapper::UintValue* mcs8);

  // .ywrapper.UintValue mcs9 = 224524079 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs9"];
  bool has_mcs9() const;
  void clear_mcs9();
  static const int kMcs9FieldNumber = 224524079;
  const ::ywrapper::UintValue& mcs9() const;
  ::ywrapper::UintValue* release_mcs9();
  ::ywrapper::UintValue* mutable_mcs9();
  void set_allocated_mcs9(::ywrapper::UintValue* mcs9);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* mcs0_;
  ::ywrapper::UintValue* mcs1_;
  ::ywrapper::UintValue* mcs2_;
  ::ywrapper::UintValue* mcs3_;
  ::ywrapper::UintValue* mcs4_;
  ::ywrapper::UintValue* mcs5_;
  ::ywrapper::UintValue* mcs6_;
  ::ywrapper::UintValue* mcs7_;
  ::ywrapper::UintValue* mcs8_;
  ::ywrapper::UintValue* mcs9_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids_Bssid_State_Counters_TxMcsImpl();
};
// -------------------------------------------------------------------

class Bssids_Bssid_State_Counters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters) */ {
 public:
  Bssids_Bssid_State_Counters();
  virtual ~Bssids_Bssid_State_Counters();

  Bssids_Bssid_State_Counters(const Bssids_Bssid_State_Counters& from);

  inline Bssids_Bssid_State_Counters& operator=(const Bssids_Bssid_State_Counters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Bssids_Bssid_State_Counters(Bssids_Bssid_State_Counters&& from) noexcept
    : Bssids_Bssid_State_Counters() {
    *this = ::std::move(from);
  }

  inline Bssids_Bssid_State_Counters& operator=(Bssids_Bssid_State_Counters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Bssids_Bssid_State_Counters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bssids_Bssid_State_Counters* internal_default_instance() {
    return reinterpret_cast<const Bssids_Bssid_State_Counters*>(
               &_Bssids_Bssid_State_Counters_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Bssids_Bssid_State_Counters* other);
  friend void swap(Bssids_Bssid_State_Counters& a, Bssids_Bssid_State_Counters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Bssids_Bssid_State_Counters* New() const PROTOBUF_FINAL { return New(NULL); }

  Bssids_Bssid_State_Counters* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Bssids_Bssid_State_Counters& from);
  void MergeFrom(const Bssids_Bssid_State_Counters& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Bssids_Bssid_State_Counters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Bssids_Bssid_State_Counters_RxDataDist RxDataDist;
  typedef Bssids_Bssid_State_Counters_RxDataWmm RxDataWmm;
  typedef Bssids_Bssid_State_Counters_RxMcs RxMcs;
  typedef Bssids_Bssid_State_Counters_TxDataDist TxDataDist;
  typedef Bssids_Bssid_State_Counters_TxDataWmm TxDataWmm;
  typedef Bssids_Bssid_State_Counters_TxMcs TxMcs;

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue tx_retries_data = 22635174 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-retries-data"];
  bool has_tx_retries_data() const;
  void clear_tx_retries_data();
  static const int kTxRetriesDataFieldNumber = 22635174;
  const ::ywrapper::UintValue& tx_retries_data() const;
  ::ywrapper::UintValue* release_tx_retries_data();
  ::ywrapper::UintValue* mutable_tx_retries_data();
  void set_allocated_tx_retries_data(::ywrapper::UintValue* tx_retries_data);

  // .ywrapper.UintValue rx_retries_subframe = 29082905 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-retries-subframe"];
  bool has_rx_retries_subframe() const;
  void clear_rx_retries_subframe();
  static const int kRxRetriesSubframeFieldNumber = 29082905;
  const ::ywrapper::UintValue& rx_retries_subframe() const;
  ::ywrapper::UintValue* release_rx_retries_subframe();
  ::ywrapper::UintValue* mutable_rx_retries_subframe();
  void set_allocated_rx_retries_subframe(::ywrapper::UintValue* rx_retries_subframe);

  // .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist tx_data_dist = 60772850 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist"];
  bool has_tx_data_dist() const;
  void clear_tx_data_dist();
  static const int kTxDataDistFieldNumber = 60772850;
  const ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataDist& tx_data_dist() const;
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataDist* release_tx_data_dist();
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataDist* mutable_tx_data_dist();
  void set_allocated_tx_data_dist(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataDist* tx_data_dist);

  // .ywrapper.UintValue tx_retries_subframe = 67415871 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-retries-subframe"];
  bool has_tx_retries_subframe() const;
  void clear_tx_retries_subframe();
  static const int kTxRetriesSubframeFieldNumber = 67415871;
  const ::ywrapper::UintValue& tx_retries_subframe() const;
  ::ywrapper::UintValue* release_tx_retries_subframe();
  ::ywrapper::UintValue* mutable_tx_retries_subframe();
  void set_allocated_tx_retries_subframe(::ywrapper::UintValue* tx_retries_subframe);

  // .ywrapper.UintValue tx_retries = 94814937 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-retries"];
  bool has_tx_retries() const;
  void clear_tx_retries();
  static const int kTxRetriesFieldNumber = 94814937;
  const ::ywrapper::UintValue& tx_retries() const;
  ::ywrapper::UintValue* release_tx_retries();
  ::ywrapper::UintValue* mutable_tx_retries();
  void set_allocated_tx_retries(::ywrapper::UintValue* tx_retries);

  // .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs tx_mcs = 103367384 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs"];
  bool has_tx_mcs() const;
  void clear_tx_mcs();
  static const int kTxMcsFieldNumber = 103367384;
  const ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxMcs& tx_mcs() const;
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxMcs* release_tx_mcs();
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxMcs* mutable_tx_mcs();
  void set_allocated_tx_mcs(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxMcs* tx_mcs);

  // .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist rx_data_dist = 119677688 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist"];
  bool has_rx_data_dist() const;
  void clear_rx_data_dist();
  static const int kRxDataDistFieldNumber = 119677688;
  const ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataDist& rx_data_dist() const;
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataDist* release_rx_data_dist();
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataDist* mutable_rx_data_dist();
  void set_allocated_rx_data_dist(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataDist* rx_data_dist);

  // .ywrapper.UintValue tx_control = 126063340 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-control"];
  bool has_tx_control() const;
  void clear_tx_control();
  static const int kTxControlFieldNumber = 126063340;
  const ::ywrapper::UintValue& tx_control() const;
  ::ywrapper::UintValue* release_tx_control();
  ::ywrapper::UintValue* mutable_tx_control();
  void set_allocated_tx_control(::ywrapper::UintValue* tx_control);

  // .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm rx_data_wmm = 139948749 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-wmm"];
  bool has_rx_data_wmm() const;
  void clear_rx_data_wmm();
  static const int kRxDataWmmFieldNumber = 139948749;
  const ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataWmm& rx_data_wmm() const;
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataWmm* release_rx_data_wmm();
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataWmm* mutable_rx_data_wmm();
  void set_allocated_rx_data_wmm(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataWmm* rx_data_wmm);

  // .ywrapper.UintValue tx_bytes_data = 141694443 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-bytes-data"];
  bool has_tx_bytes_data() const;
  void clear_tx_bytes_data();
  static const int kTxBytesDataFieldNumber = 141694443;
  const ::ywrapper::UintValue& tx_bytes_data() const;
  ::ywrapper::UintValue* release_tx_bytes_data();
  ::ywrapper::UintValue* mutable_tx_bytes_data();
  void set_allocated_tx_bytes_data(::ywrapper::UintValue* tx_bytes_data);

  // .ywrapper.UintValue rx_bytes_data = 175562161 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-bytes-data"];
  bool has_rx_bytes_data() const;
  void clear_rx_bytes_data();
  static const int kRxBytesDataFieldNumber = 175562161;
  const ::ywrapper::UintValue& rx_bytes_data() const;
  ::ywrapper::UintValue* release_rx_bytes_data();
  ::ywrapper::UintValue* mutable_rx_bytes_data();
  void set_allocated_rx_bytes_data(::ywrapper::UintValue* rx_bytes_data);

  // .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs rx_mcs = 192795234 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs"];
  bool has_rx_mcs() const;
  void clear_rx_mcs();
  static const int kRxMcsFieldNumber = 192795234;
  const ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxMcs& rx_mcs() const;
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxMcs* release_rx_mcs();
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxMcs* mutable_rx_mcs();
  void set_allocated_rx_mcs(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxMcs* rx_mcs);

  // .ywrapper.UintValue rx_retries = 227864295 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-retries"];
  bool has_rx_retries() const;
  void clear_rx_retries();
  static const int kRxRetriesFieldNumber = 227864295;
  const ::ywrapper::UintValue& rx_retries() const;
  ::ywrapper::UintValue* release_rx_retries();
  ::ywrapper::UintValue* mutable_rx_retries();
  void set_allocated_rx_retries(::ywrapper::UintValue* rx_retries);

  // .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm tx_data_wmm = 312270491 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-wmm"];
  bool has_tx_data_wmm() const;
  void clear_tx_data_wmm();
  static const int kTxDataWmmFieldNumber = 312270491;
  const ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataWmm& tx_data_wmm() const;
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataWmm* release_tx_data_wmm();
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataWmm* mutable_tx_data_wmm();
  void set_allocated_tx_data_wmm(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataWmm* tx_data_wmm);

  // .ywrapper.UintValue rx_mgmt = 320558052 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mgmt"];
  bool has_rx_mgmt() const;
  void clear_rx_mgmt();
  static const int kRxMgmtFieldNumber = 320558052;
  const ::ywrapper::UintValue& rx_mgmt() const;
  ::ywrapper::UintValue* release_rx_mgmt();
  ::ywrapper::UintValue* mutable_rx_mgmt();
  void set_allocated_rx_mgmt(::ywrapper::UintValue* rx_mgmt);

  // .ywrapper.UintValue rx_control = 348207354 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-control"];
  bool has_rx_control() const;
  void clear_rx_control();
  static const int kRxControlFieldNumber = 348207354;
  const ::ywrapper::UintValue& rx_control() const;
  ::ywrapper::UintValue* release_rx_control();
  ::ywrapper::UintValue* mutable_rx_control();
  void set_allocated_rx_control(::ywrapper::UintValue* rx_control);

  // .ywrapper.UintValue rx_retries_data = 416388864 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-retries-data"];
  bool has_rx_retries_data() const;
  void clear_rx_retries_data();
  static const int kRxRetriesDataFieldNumber = 416388864;
  const ::ywrapper::UintValue& rx_retries_data() const;
  ::ywrapper::UintValue* release_rx_retries_data();
  ::ywrapper::UintValue* mutable_rx_retries_data();
  void set_allocated_rx_retries_data(::ywrapper::UintValue* rx_retries_data);

  // .ywrapper.UintValue tx_mgmt = 419252762 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mgmt"];
  bool has_tx_mgmt() const;
  void clear_tx_mgmt();
  static const int kTxMgmtFieldNumber = 419252762;
  const ::ywrapper::UintValue& tx_mgmt() const;
  ::ywrapper::UintValue* release_tx_mgmt();
  ::ywrapper::UintValue* mutable_tx_mgmt();
  void set_allocated_tx_mgmt(::ywrapper::UintValue* tx_mgmt);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* tx_retries_data_;
  ::ywrapper::UintValue* rx_retries_subframe_;
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataDist* tx_data_dist_;
  ::ywrapper::UintValue* tx_retries_subframe_;
  ::ywrapper::UintValue* tx_retries_;
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxMcs* tx_mcs_;
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataDist* rx_data_dist_;
  ::ywrapper::UintValue* tx_control_;
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataWmm* rx_data_wmm_;
  ::ywrapper::UintValue* tx_bytes_data_;
  ::ywrapper::UintValue* rx_bytes_data_;
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxMcs* rx_mcs_;
  ::ywrapper::UintValue* rx_retries_;
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataWmm* tx_data_wmm_;
  ::ywrapper::UintValue* rx_mgmt_;
  ::ywrapper::UintValue* rx_control_;
  ::ywrapper::UintValue* rx_retries_data_;
  ::ywrapper::UintValue* tx_mgmt_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids_Bssid_State_CountersImpl();
};
// -------------------------------------------------------------------

class Bssids_Bssid_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Bssids.Bssid.State) */ {
 public:
  Bssids_Bssid_State();
  virtual ~Bssids_Bssid_State();

  Bssids_Bssid_State(const Bssids_Bssid_State& from);

  inline Bssids_Bssid_State& operator=(const Bssids_Bssid_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Bssids_Bssid_State(Bssids_Bssid_State&& from) noexcept
    : Bssids_Bssid_State() {
    *this = ::std::move(from);
  }

  inline Bssids_Bssid_State& operator=(Bssids_Bssid_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Bssids_Bssid_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bssids_Bssid_State* internal_default_instance() {
    return reinterpret_cast<const Bssids_Bssid_State*>(
               &_Bssids_Bssid_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Bssids_Bssid_State* other);
  friend void swap(Bssids_Bssid_State& a, Bssids_Bssid_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Bssids_Bssid_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Bssids_Bssid_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Bssids_Bssid_State& from);
  void MergeFrom(const Bssids_Bssid_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Bssids_Bssid_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Bssids_Bssid_State_Counters Counters;

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue num_associated_clients = 76274334 [(.yext.schemapath) = "/bssids/bssid/state/num-associated-clients"];
  bool has_num_associated_clients() const;
  void clear_num_associated_clients();
  static const int kNumAssociatedClientsFieldNumber = 76274334;
  const ::ywrapper::UintValue& num_associated_clients() const;
  ::ywrapper::UintValue* release_num_associated_clients();
  ::ywrapper::UintValue* mutable_num_associated_clients();
  void set_allocated_num_associated_clients(::ywrapper::UintValue* num_associated_clients);

  // .ywrapper.StringValue ess = 117830205 [(.yext.schemapath) = "/bssids/bssid/state/ess"];
  bool has_ess() const;
  void clear_ess();
  static const int kEssFieldNumber = 117830205;
  const ::ywrapper::StringValue& ess() const;
  ::ywrapper::StringValue* release_ess();
  ::ywrapper::StringValue* mutable_ess();
  void set_allocated_ess(::ywrapper::StringValue* ess);

  // .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters counters = 502972933 [(.yext.schemapath) = "/bssids/bssid/state/counters"];
  bool has_counters() const;
  void clear_counters();
  static const int kCountersFieldNumber = 502972933;
  const ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters& counters() const;
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters* release_counters();
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters* mutable_counters();
  void set_allocated_counters(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters* counters);

  // .ywrapper.StringValue bssid = 513163965 [(.yext.schemapath) = "/bssids/bssid/state/bssid"];
  bool has_bssid() const;
  void clear_bssid();
  static const int kBssidFieldNumber = 513163965;
  const ::ywrapper::StringValue& bssid() const;
  ::ywrapper::StringValue* release_bssid();
  ::ywrapper::StringValue* mutable_bssid();
  void set_allocated_bssid(::ywrapper::StringValue* bssid);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Bssids.Bssid.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* num_associated_clients_;
  ::ywrapper::StringValue* ess_;
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters* counters_;
  ::ywrapper::StringValue* bssid_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids_Bssid_StateImpl();
};
// -------------------------------------------------------------------

class Bssids_Bssid : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Bssids.Bssid) */ {
 public:
  Bssids_Bssid();
  virtual ~Bssids_Bssid();

  Bssids_Bssid(const Bssids_Bssid& from);

  inline Bssids_Bssid& operator=(const Bssids_Bssid& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Bssids_Bssid(Bssids_Bssid&& from) noexcept
    : Bssids_Bssid() {
    *this = ::std::move(from);
  }

  inline Bssids_Bssid& operator=(Bssids_Bssid&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Bssids_Bssid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bssids_Bssid* internal_default_instance() {
    return reinterpret_cast<const Bssids_Bssid*>(
               &_Bssids_Bssid_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(Bssids_Bssid* other);
  friend void swap(Bssids_Bssid& a, Bssids_Bssid& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Bssids_Bssid* New() const PROTOBUF_FINAL { return New(NULL); }

  Bssids_Bssid* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Bssids_Bssid& from);
  void MergeFrom(const Bssids_Bssid& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Bssids_Bssid* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Bssids_Bssid_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_wifi_mac.Bssids.Bssid.State state = 10736623 [(.yext.schemapath) = "/bssids/bssid/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 10736623;
  const ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State& state() const;
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State* release_state();
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State* state);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Bssids.Bssid)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State* state_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids_BssidImpl();
};
// -------------------------------------------------------------------

class Bssids_BssidKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Bssids.BssidKey) */ {
 public:
  Bssids_BssidKey();
  virtual ~Bssids_BssidKey();

  Bssids_BssidKey(const Bssids_BssidKey& from);

  inline Bssids_BssidKey& operator=(const Bssids_BssidKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Bssids_BssidKey(Bssids_BssidKey&& from) noexcept
    : Bssids_BssidKey() {
    *this = ::std::move(from);
  }

  inline Bssids_BssidKey& operator=(Bssids_BssidKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Bssids_BssidKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bssids_BssidKey* internal_default_instance() {
    return reinterpret_cast<const Bssids_BssidKey*>(
               &_Bssids_BssidKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(Bssids_BssidKey* other);
  friend void swap(Bssids_BssidKey& a, Bssids_BssidKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Bssids_BssidKey* New() const PROTOBUF_FINAL { return New(NULL); }

  Bssids_BssidKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Bssids_BssidKey& from);
  void MergeFrom(const Bssids_BssidKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Bssids_BssidKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string bssid_key = 1 [(.yext.schemapath) = "/bssids/bssid/bssid"];
  void clear_bssid_key();
  static const int kBssidKeyFieldNumber = 1;
  const ::std::string& bssid_key() const;
  void set_bssid_key(const ::std::string& value);
  #if LANG_CXX11
  void set_bssid_key(::std::string&& value);
  #endif
  void set_bssid_key(const char* value);
  void set_bssid_key(const char* value, size_t size);
  ::std::string* mutable_bssid_key();
  ::std::string* release_bssid_key();
  void set_allocated_bssid_key(::std::string* bssid_key);

  // .openconfig.openconfig_wifi_mac.Bssids.Bssid bssid = 2;
  bool has_bssid() const;
  void clear_bssid();
  static const int kBssidFieldNumber = 2;
  const ::openconfig::openconfig_wifi_mac::Bssids_Bssid& bssid() const;
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid* release_bssid();
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid* mutable_bssid();
  void set_allocated_bssid(::openconfig::openconfig_wifi_mac::Bssids_Bssid* bssid);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Bssids.BssidKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr bssid_key_;
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid* bssid_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssids_BssidKeyImpl();
};
// -------------------------------------------------------------------

class Bssids : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Bssids) */ {
 public:
  Bssids();
  virtual ~Bssids();

  Bssids(const Bssids& from);

  inline Bssids& operator=(const Bssids& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Bssids(Bssids&& from) noexcept
    : Bssids() {
    *this = ::std::move(from);
  }

  inline Bssids& operator=(Bssids&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Bssids& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bssids* internal_default_instance() {
    return reinterpret_cast<const Bssids*>(
               &_Bssids_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(Bssids* other);
  friend void swap(Bssids& a, Bssids& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Bssids* New() const PROTOBUF_FINAL { return New(NULL); }

  Bssids* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Bssids& from);
  void MergeFrom(const Bssids& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Bssids* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Bssids_Bssid Bssid;
  typedef Bssids_BssidKey BssidKey;

  // accessors -------------------------------------------------------

  // repeated .openconfig.openconfig_wifi_mac.Bssids.BssidKey bssid = 281271229 [(.yext.schemapath) = "/bssids/bssid"];
  int bssid_size() const;
  void clear_bssid();
  static const int kBssidFieldNumber = 281271229;
  const ::openconfig::openconfig_wifi_mac::Bssids_BssidKey& bssid(int index) const;
  ::openconfig::openconfig_wifi_mac::Bssids_BssidKey* mutable_bssid(int index);
  ::openconfig::openconfig_wifi_mac::Bssids_BssidKey* add_bssid();
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_wifi_mac::Bssids_BssidKey >*
      mutable_bssid();
  const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_wifi_mac::Bssids_BssidKey >&
      bssid() const;

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Bssids)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_wifi_mac::Bssids_BssidKey > bssid_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsBssidsImpl();
};
// -------------------------------------------------------------------

class Ssids_Ssid_BandSteering_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.Config) */ {
 public:
  Ssids_Ssid_BandSteering_Config();
  virtual ~Ssids_Ssid_BandSteering_Config();

  Ssids_Ssid_BandSteering_Config(const Ssids_Ssid_BandSteering_Config& from);

  inline Ssids_Ssid_BandSteering_Config& operator=(const Ssids_Ssid_BandSteering_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ssids_Ssid_BandSteering_Config(Ssids_Ssid_BandSteering_Config&& from) noexcept
    : Ssids_Ssid_BandSteering_Config() {
    *this = ::std::move(from);
  }

  inline Ssids_Ssid_BandSteering_Config& operator=(Ssids_Ssid_BandSteering_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ssids_Ssid_BandSteering_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ssids_Ssid_BandSteering_Config* internal_default_instance() {
    return reinterpret_cast<const Ssids_Ssid_BandSteering_Config*>(
               &_Ssids_Ssid_BandSteering_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(Ssids_Ssid_BandSteering_Config* other);
  friend void swap(Ssids_Ssid_BandSteering_Config& a, Ssids_Ssid_BandSteering_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ssids_Ssid_BandSteering_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Ssids_Ssid_BandSteering_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ssids_Ssid_BandSteering_Config& from);
  void MergeFrom(const Ssids_Ssid_BandSteering_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ssids_Ssid_BandSteering_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.IntValue steering_rssi = 103564288 [(.yext.schemapath) = "/ssids/ssid/band-steering/config/steering-rssi"];
  bool has_steering_rssi() const;
  void clear_steering_rssi();
  static const int kSteeringRssiFieldNumber = 103564288;
  const ::ywrapper::IntValue& steering_rssi() const;
  ::ywrapper::IntValue* release_steering_rssi();
  ::ywrapper::IntValue* mutable_steering_rssi();
  void set_allocated_steering_rssi(::ywrapper::IntValue* steering_rssi);

  // .ywrapper.BoolValue band_steering = 490062060 [(.yext.schemapath) = "/ssids/ssid/band-steering/config/band-steering"];
  bool has_band_steering() const;
  void clear_band_steering();
  static const int kBandSteeringFieldNumber = 490062060;
  const ::ywrapper::BoolValue& band_steering() const;
  ::ywrapper::BoolValue* release_band_steering();
  ::ywrapper::BoolValue* mutable_band_steering();
  void set_allocated_band_steering(::ywrapper::BoolValue* band_steering);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::IntValue* steering_rssi_;
  ::ywrapper::BoolValue* band_steering_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_BandSteering_ConfigImpl();
};
// -------------------------------------------------------------------

class Ssids_Ssid_BandSteering_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.State) */ {
 public:
  Ssids_Ssid_BandSteering_State();
  virtual ~Ssids_Ssid_BandSteering_State();

  Ssids_Ssid_BandSteering_State(const Ssids_Ssid_BandSteering_State& from);

  inline Ssids_Ssid_BandSteering_State& operator=(const Ssids_Ssid_BandSteering_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ssids_Ssid_BandSteering_State(Ssids_Ssid_BandSteering_State&& from) noexcept
    : Ssids_Ssid_BandSteering_State() {
    *this = ::std::move(from);
  }

  inline Ssids_Ssid_BandSteering_State& operator=(Ssids_Ssid_BandSteering_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ssids_Ssid_BandSteering_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ssids_Ssid_BandSteering_State* internal_default_instance() {
    return reinterpret_cast<const Ssids_Ssid_BandSteering_State*>(
               &_Ssids_Ssid_BandSteering_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(Ssids_Ssid_BandSteering_State* other);
  friend void swap(Ssids_Ssid_BandSteering_State& a, Ssids_Ssid_BandSteering_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ssids_Ssid_BandSteering_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Ssids_Ssid_BandSteering_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ssids_Ssid_BandSteering_State& from);
  void MergeFrom(const Ssids_Ssid_BandSteering_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ssids_Ssid_BandSteering_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.BoolValue band_steering = 380350897 [(.yext.schemapath) = "/ssids/ssid/band-steering/state/band-steering"];
  bool has_band_steering() const;
  void clear_band_steering();
  static const int kBandSteeringFieldNumber = 380350897;
  const ::ywrapper::BoolValue& band_steering() const;
  ::ywrapper::BoolValue* release_band_steering();
  ::ywrapper::BoolValue* mutable_band_steering();
  void set_allocated_band_steering(::ywrapper::BoolValue* band_steering);

  // .ywrapper.IntValue steering_rssi = 526361865 [(.yext.schemapath) = "/ssids/ssid/band-steering/state/steering-rssi"];
  bool has_steering_rssi() const;
  void clear_steering_rssi();
  static const int kSteeringRssiFieldNumber = 526361865;
  const ::ywrapper::IntValue& steering_rssi() const;
  ::ywrapper::IntValue* release_steering_rssi();
  ::ywrapper::IntValue* mutable_steering_rssi();
  void set_allocated_steering_rssi(::ywrapper::IntValue* steering_rssi);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::BoolValue* band_steering_;
  ::ywrapper::IntValue* steering_rssi_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_BandSteering_StateImpl();
};
// -------------------------------------------------------------------

class Ssids_Ssid_BandSteering : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering) */ {
 public:
  Ssids_Ssid_BandSteering();
  virtual ~Ssids_Ssid_BandSteering();

  Ssids_Ssid_BandSteering(const Ssids_Ssid_BandSteering& from);

  inline Ssids_Ssid_BandSteering& operator=(const Ssids_Ssid_BandSteering& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ssids_Ssid_BandSteering(Ssids_Ssid_BandSteering&& from) noexcept
    : Ssids_Ssid_BandSteering() {
    *this = ::std::move(from);
  }

  inline Ssids_Ssid_BandSteering& operator=(Ssids_Ssid_BandSteering&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ssids_Ssid_BandSteering& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ssids_Ssid_BandSteering* internal_default_instance() {
    return reinterpret_cast<const Ssids_Ssid_BandSteering*>(
               &_Ssids_Ssid_BandSteering_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(Ssids_Ssid_BandSteering* other);
  friend void swap(Ssids_Ssid_BandSteering& a, Ssids_Ssid_BandSteering& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ssids_Ssid_BandSteering* New() const PROTOBUF_FINAL { return New(NULL); }

  Ssids_Ssid_BandSteering* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ssids_Ssid_BandSteering& from);
  void MergeFrom(const Ssids_Ssid_BandSteering& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ssids_Ssid_BandSteering* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Ssids_Ssid_BandSteering_Config Config;
  typedef Ssids_Ssid_BandSteering_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.State state = 177174019 [(.yext.schemapath) = "/ssids/ssid/band-steering/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 177174019;
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_State& state() const;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_State* release_state();
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_State* state);

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.Config config = 250387798 [(.yext.schemapath) = "/ssids/ssid/band-steering/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 250387798;
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_Config& config() const;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_Config* release_config();
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_Config* config);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_State* state_;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_Config* config_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_BandSteeringImpl();
};
// -------------------------------------------------------------------

class Ssids_Ssid_Clients_Client_ClientCapabilities_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities.State) */ {
 public:
  Ssids_Ssid_Clients_Client_ClientCapabilities_State();
  virtual ~Ssids_Ssid_Clients_Client_ClientCapabilities_State();

  Ssids_Ssid_Clients_Client_ClientCapabilities_State(const Ssids_Ssid_Clients_Client_ClientCapabilities_State& from);

  inline Ssids_Ssid_Clients_Client_ClientCapabilities_State& operator=(const Ssids_Ssid_Clients_Client_ClientCapabilities_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ssids_Ssid_Clients_Client_ClientCapabilities_State(Ssids_Ssid_Clients_Client_ClientCapabilities_State&& from) noexcept
    : Ssids_Ssid_Clients_Client_ClientCapabilities_State() {
    *this = ::std::move(from);
  }

  inline Ssids_Ssid_Clients_Client_ClientCapabilities_State& operator=(Ssids_Ssid_Clients_Client_ClientCapabilities_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ssids_Ssid_Clients_Client_ClientCapabilities_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ssids_Ssid_Clients_Client_ClientCapabilities_State* internal_default_instance() {
    return reinterpret_cast<const Ssids_Ssid_Clients_Client_ClientCapabilities_State*>(
               &_Ssids_Ssid_Clients_Client_ClientCapabilities_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(Ssids_Ssid_Clients_Client_ClientCapabilities_State* other);
  friend void swap(Ssids_Ssid_Clients_Client_ClientCapabilities_State& a, Ssids_Ssid_Clients_Client_ClientCapabilities_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ssids_Ssid_Clients_Client_ClientCapabilities_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Ssids_Ssid_Clients_Client_ClientCapabilities_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ssids_Ssid_Clients_Client_ClientCapabilities_State& from);
  void MergeFrom(const Ssids_Ssid_Clients_Client_ClientCapabilities_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ssids_Ssid_Clients_Client_ClientCapabilities_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ywrapper.UintValue channel_support = 241576153 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-capabilities/state/channel-support"];
  int channel_support_size() const;
  void clear_channel_support();
  static const int kChannelSupportFieldNumber = 241576153;
  const ::ywrapper::UintValue& channel_support(int index) const;
  ::ywrapper::UintValue* mutable_channel_support(int index);
  ::ywrapper::UintValue* add_channel_support();
  ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >*
      mutable_channel_support();
  const ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >&
      channel_support() const;

  // repeated .openconfig.enums.OpenconfigWifiTypesCLIENTCAPABILITIES client_capabilities = 280277706 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-capabilities/state/client-capabilities"];
  int client_capabilities_size() const;
  void clear_client_capabilities();
  static const int kClientCapabilitiesFieldNumber = 280277706;
  ::openconfig::enums::OpenconfigWifiTypesCLIENTCAPABILITIES client_capabilities(int index) const;
  void set_client_capabilities(int index, ::openconfig::enums::OpenconfigWifiTypesCLIENTCAPABILITIES value);
  void add_client_capabilities(::openconfig::enums::OpenconfigWifiTypesCLIENTCAPABILITIES value);
  const ::google::protobuf::RepeatedField<int>& client_capabilities() const;
  ::google::protobuf::RepeatedField<int>* mutable_client_capabilities();

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue > channel_support_;
  ::google::protobuf::RepeatedField<int> client_capabilities_;
  mutable int _client_capabilities_cached_byte_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client_ClientCapabilities_StateImpl();
};
// -------------------------------------------------------------------

class Ssids_Ssid_Clients_Client_ClientCapabilities : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities) */ {
 public:
  Ssids_Ssid_Clients_Client_ClientCapabilities();
  virtual ~Ssids_Ssid_Clients_Client_ClientCapabilities();

  Ssids_Ssid_Clients_Client_ClientCapabilities(const Ssids_Ssid_Clients_Client_ClientCapabilities& from);

  inline Ssids_Ssid_Clients_Client_ClientCapabilities& operator=(const Ssids_Ssid_Clients_Client_ClientCapabilities& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ssids_Ssid_Clients_Client_ClientCapabilities(Ssids_Ssid_Clients_Client_ClientCapabilities&& from) noexcept
    : Ssids_Ssid_Clients_Client_ClientCapabilities() {
    *this = ::std::move(from);
  }

  inline Ssids_Ssid_Clients_Client_ClientCapabilities& operator=(Ssids_Ssid_Clients_Client_ClientCapabilities&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ssids_Ssid_Clients_Client_ClientCapabilities& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ssids_Ssid_Clients_Client_ClientCapabilities* internal_default_instance() {
    return reinterpret_cast<const Ssids_Ssid_Clients_Client_ClientCapabilities*>(
               &_Ssids_Ssid_Clients_Client_ClientCapabilities_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(Ssids_Ssid_Clients_Client_ClientCapabilities* other);
  friend void swap(Ssids_Ssid_Clients_Client_ClientCapabilities& a, Ssids_Ssid_Clients_Client_ClientCapabilities& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ssids_Ssid_Clients_Client_ClientCapabilities* New() const PROTOBUF_FINAL { return New(NULL); }

  Ssids_Ssid_Clients_Client_ClientCapabilities* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ssids_Ssid_Clients_Client_ClientCapabilities& from);
  void MergeFrom(const Ssids_Ssid_Clients_Client_ClientCapabilities& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ssids_Ssid_Clients_Client_ClientCapabilities* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Ssids_Ssid_Clients_Client_ClientCapabilities_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities.State state = 502338319 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-capabilities/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 502338319;
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities_State& state() const;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities_State* release_state();
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities_State* state);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities_State* state_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client_ClientCapabilitiesImpl();
};
// -------------------------------------------------------------------

class Ssids_Ssid_Clients_Client_ClientConnection_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State) */ {
 public:
  Ssids_Ssid_Clients_Client_ClientConnection_State();
  virtual ~Ssids_Ssid_Clients_Client_ClientConnection_State();

  Ssids_Ssid_Clients_Client_ClientConnection_State(const Ssids_Ssid_Clients_Client_ClientConnection_State& from);

  inline Ssids_Ssid_Clients_Client_ClientConnection_State& operator=(const Ssids_Ssid_Clients_Client_ClientConnection_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ssids_Ssid_Clients_Client_ClientConnection_State(Ssids_Ssid_Clients_Client_ClientConnection_State&& from) noexcept
    : Ssids_Ssid_Clients_Client_ClientConnection_State() {
    *this = ::std::move(from);
  }

  inline Ssids_Ssid_Clients_Client_ClientConnection_State& operator=(Ssids_Ssid_Clients_Client_ClientConnection_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ssids_Ssid_Clients_Client_ClientConnection_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ssids_Ssid_Clients_Client_ClientConnection_State* internal_default_instance() {
    return reinterpret_cast<const Ssids_Ssid_Clients_Client_ClientConnection_State*>(
               &_Ssids_Ssid_Clients_Client_ClientConnection_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(Ssids_Ssid_Clients_Client_ClientConnection_State* other);
  friend void swap(Ssids_Ssid_Clients_Client_ClientConnection_State& a, Ssids_Ssid_Clients_Client_ClientConnection_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ssids_Ssid_Clients_Client_ClientConnection_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Ssids_Ssid_Clients_Client_ClientConnection_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ssids_Ssid_Clients_Client_ClientConnection_State& from);
  void MergeFrom(const Ssids_Ssid_Clients_Client_ClientConnection_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ssids_Ssid_Clients_Client_ClientConnection_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue username = 102440552 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/username"];
  bool has_username() const;
  void clear_username();
  static const int kUsernameFieldNumber = 102440552;
  const ::ywrapper::StringValue& username() const;
  ::ywrapper::StringValue* release_username();
  ::ywrapper::StringValue* mutable_username();
  void set_allocated_username(::ywrapper::StringValue* username);

  // .ywrapper.StringValue hostname = 159385715 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/hostname"];
  bool has_hostname() const;
  void clear_hostname();
  static const int kHostnameFieldNumber = 159385715;
  const ::ywrapper::StringValue& hostname() const;
  ::ywrapper::StringValue* release_hostname();
  ::ywrapper::StringValue* mutable_hostname();
  void set_allocated_hostname(::ywrapper::StringValue* hostname);

  // .ywrapper.StringValue ipv6_address = 168200404 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/ipv6-address"];
  bool has_ipv6_address() const;
  void clear_ipv6_address();
  static const int kIpv6AddressFieldNumber = 168200404;
  const ::ywrapper::StringValue& ipv6_address() const;
  ::ywrapper::StringValue* release_ipv6_address();
  ::ywrapper::StringValue* mutable_ipv6_address();
  void set_allocated_ipv6_address(::ywrapper::StringValue* ipv6_address);

  // .ywrapper.StringValue operating_system = 204114517 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/operating-system"];
  bool has_operating_system() const;
  void clear_operating_system();
  static const int kOperatingSystemFieldNumber = 204114517;
  const ::ywrapper::StringValue& operating_system() const;
  ::ywrapper::StringValue* release_operating_system();
  ::ywrapper::StringValue* mutable_operating_system();
  void set_allocated_operating_system(::ywrapper::StringValue* operating_system);

  // .ywrapper.StringValue ipv4_address = 227044086 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/ipv4-address"];
  bool has_ipv4_address() const;
  void clear_ipv4_address();
  static const int kIpv4AddressFieldNumber = 227044086;
  const ::ywrapper::StringValue& ipv4_address() const;
  ::ywrapper::StringValue* release_ipv4_address();
  ::ywrapper::StringValue* mutable_ipv4_address();
  void set_allocated_ipv4_address(::ywrapper::StringValue* ipv4_address);

  // .ywrapper.UintValue connection_time = 483233146 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/connection-time"];
  bool has_connection_time() const;
  void clear_connection_time();
  static const int kConnectionTimeFieldNumber = 483233146;
  const ::ywrapper::UintValue& connection_time() const;
  ::ywrapper::UintValue* release_connection_time();
  ::ywrapper::UintValue* mutable_connection_time();
  void set_allocated_connection_time(::ywrapper::UintValue* connection_time);

  // .openconfig.enums.OpenconfigWifiTypesCLIENTSTATE client_state = 12611625 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/client-state"];
  void clear_client_state();
  static const int kClientStateFieldNumber = 12611625;
  ::openconfig::enums::OpenconfigWifiTypesCLIENTSTATE client_state() const;
  void set_client_state(::openconfig::enums::OpenconfigWifiTypesCLIENTSTATE value);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* username_;
  ::ywrapper::StringValue* hostname_;
  ::ywrapper::StringValue* ipv6_address_;
  ::ywrapper::StringValue* operating_system_;
  ::ywrapper::StringValue* ipv4_address_;
  ::ywrapper::UintValue* connection_time_;
  int client_state_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client_ClientConnection_StateImpl();
};
// -------------------------------------------------------------------

class Ssids_Ssid_Clients_Client_ClientConnection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection) */ {
 public:
  Ssids_Ssid_Clients_Client_ClientConnection();
  virtual ~Ssids_Ssid_Clients_Client_ClientConnection();

  Ssids_Ssid_Clients_Client_ClientConnection(const Ssids_Ssid_Clients_Client_ClientConnection& from);

  inline Ssids_Ssid_Clients_Client_ClientConnection& operator=(const Ssids_Ssid_Clients_Client_ClientConnection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ssids_Ssid_Clients_Client_ClientConnection(Ssids_Ssid_Clients_Client_ClientConnection&& from) noexcept
    : Ssids_Ssid_Clients_Client_ClientConnection() {
    *this = ::std::move(from);
  }

  inline Ssids_Ssid_Clients_Client_ClientConnection& operator=(Ssids_Ssid_Clients_Client_ClientConnection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ssids_Ssid_Clients_Client_ClientConnection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ssids_Ssid_Clients_Client_ClientConnection* internal_default_instance() {
    return reinterpret_cast<const Ssids_Ssid_Clients_Client_ClientConnection*>(
               &_Ssids_Ssid_Clients_Client_ClientConnection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(Ssids_Ssid_Clients_Client_ClientConnection* other);
  friend void swap(Ssids_Ssid_Clients_Client_ClientConnection& a, Ssids_Ssid_Clients_Client_ClientConnection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ssids_Ssid_Clients_Client_ClientConnection* New() const PROTOBUF_FINAL { return New(NULL); }

  Ssids_Ssid_Clients_Client_ClientConnection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ssids_Ssid_Clients_Client_ClientConnection& from);
  void MergeFrom(const Ssids_Ssid_Clients_Client_ClientConnection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ssids_Ssid_Clients_Client_ClientConnection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Ssids_Ssid_Clients_Client_ClientConnection_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State state = 303644037 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 303644037;
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection_State& state() const;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection_State* release_state();
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection_State* state);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection_State* state_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client_ClientConnectionImpl();
};
// -------------------------------------------------------------------

class Ssids_Ssid_Clients_Client_ClientRf_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State) */ {
 public:
  Ssids_Ssid_Clients_Client_ClientRf_State();
  virtual ~Ssids_Ssid_Clients_Client_ClientRf_State();

  Ssids_Ssid_Clients_Client_ClientRf_State(const Ssids_Ssid_Clients_Client_ClientRf_State& from);

  inline Ssids_Ssid_Clients_Client_ClientRf_State& operator=(const Ssids_Ssid_Clients_Client_ClientRf_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ssids_Ssid_Clients_Client_ClientRf_State(Ssids_Ssid_Clients_Client_ClientRf_State&& from) noexcept
    : Ssids_Ssid_Clients_Client_ClientRf_State() {
    *this = ::std::move(from);
  }

  inline Ssids_Ssid_Clients_Client_ClientRf_State& operator=(Ssids_Ssid_Clients_Client_ClientRf_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ssids_Ssid_Clients_Client_ClientRf_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ssids_Ssid_Clients_Client_ClientRf_State* internal_default_instance() {
    return reinterpret_cast<const Ssids_Ssid_Clients_Client_ClientRf_State*>(
               &_Ssids_Ssid_Clients_Client_ClientRf_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(Ssids_Ssid_Clients_Client_ClientRf_State* other);
  friend void swap(Ssids_Ssid_Clients_Client_ClientRf_State& a, Ssids_Ssid_Clients_Client_ClientRf_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ssids_Ssid_Clients_Client_ClientRf_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Ssids_Ssid_Clients_Client_ClientRf_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ssids_Ssid_Clients_Client_ClientRf_State& from);
  void MergeFrom(const Ssids_Ssid_Clients_Client_ClientRf_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ssids_Ssid_Clients_Client_ClientRf_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode ConnectionMode;
  static const ConnectionMode CONNECTIONMODE_UNSET =
    Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_CONNECTIONMODE_UNSET;
  static const ConnectionMode CONNECTIONMODE_A =
    Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_CONNECTIONMODE_A;
  static const ConnectionMode CONNECTIONMODE_B =
    Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_CONNECTIONMODE_B;
  static const ConnectionMode CONNECTIONMODE_G =
    Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_CONNECTIONMODE_G;
  static const ConnectionMode CONNECTIONMODE_N =
    Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_CONNECTIONMODE_N;
  static const ConnectionMode CONNECTIONMODE_AC =
    Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_CONNECTIONMODE_AC;
  static inline bool ConnectionMode_IsValid(int value) {
    return Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_IsValid(value);
  }
  static const ConnectionMode ConnectionMode_MIN =
    Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_ConnectionMode_MIN;
  static const ConnectionMode ConnectionMode_MAX =
    Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_ConnectionMode_MAX;
  static const int ConnectionMode_ARRAYSIZE =
    Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_ConnectionMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ConnectionMode_descriptor() {
    return Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_descriptor();
  }
  static inline const ::std::string& ConnectionMode_Name(ConnectionMode value) {
    return Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_Name(value);
  }
  static inline bool ConnectionMode_Parse(const ::std::string& name,
      ConnectionMode* value) {
    return Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .ywrapper.IntValue rssi = 82312397 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state/rssi"];
  bool has_rssi() const;
  void clear_rssi();
  static const int kRssiFieldNumber = 82312397;
  const ::ywrapper::IntValue& rssi() const;
  ::ywrapper::IntValue* release_rssi();
  ::ywrapper::IntValue* mutable_rssi();
  void set_allocated_rssi(::ywrapper::IntValue* rssi);

  // .ywrapper.UintValue frequency = 89735306 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state/frequency"];
  bool has_frequency() const;
  void clear_frequency();
  static const int kFrequencyFieldNumber = 89735306;
  const ::ywrapper::UintValue& frequency() const;
  ::ywrapper::UintValue* release_frequency();
  ::ywrapper::UintValue* mutable_frequency();
  void set_allocated_frequency(::ywrapper::UintValue* frequency);

  // .ywrapper.UintValue phy_rate = 110227624 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state/phy-rate"];
  bool has_phy_rate() const;
  void clear_phy_rate();
  static const int kPhyRateFieldNumber = 110227624;
  const ::ywrapper::UintValue& phy_rate() const;
  ::ywrapper::UintValue* release_phy_rate();
  ::ywrapper::UintValue* mutable_phy_rate();
  void set_allocated_phy_rate(::ywrapper::UintValue* phy_rate);

  // .ywrapper.UintValue ss = 297640090 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state/ss"];
  bool has_ss() const;
  void clear_ss();
  static const int kSsFieldNumber = 297640090;
  const ::ywrapper::UintValue& ss() const;
  ::ywrapper::UintValue* release_ss();
  ::ywrapper::UintValue* mutable_ss();
  void set_allocated_ss(::ywrapper::UintValue* ss);

  // .ywrapper.UintValue snr = 344175863 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state/snr"];
  bool has_snr() const;
  void clear_snr();
  static const int kSnrFieldNumber = 344175863;
  const ::ywrapper::UintValue& snr() const;
  ::ywrapper::UintValue* release_snr();
  ::ywrapper::UintValue* mutable_snr();
  void set_allocated_snr(::ywrapper::UintValue* snr);

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State.ConnectionMode connection_mode = 239140312 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state/connection-mode"];
  void clear_connection_mode();
  static const int kConnectionModeFieldNumber = 239140312;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode connection_mode() const;
  void set_connection_mode(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode value);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::IntValue* rssi_;
  ::ywrapper::UintValue* frequency_;
  ::ywrapper::UintValue* phy_rate_;
  ::ywrapper::UintValue* ss_;
  ::ywrapper::UintValue* snr_;
  int connection_mode_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client_ClientRf_StateImpl();
};
// -------------------------------------------------------------------

class Ssids_Ssid_Clients_Client_ClientRf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf) */ {
 public:
  Ssids_Ssid_Clients_Client_ClientRf();
  virtual ~Ssids_Ssid_Clients_Client_ClientRf();

  Ssids_Ssid_Clients_Client_ClientRf(const Ssids_Ssid_Clients_Client_ClientRf& from);

  inline Ssids_Ssid_Clients_Client_ClientRf& operator=(const Ssids_Ssid_Clients_Client_ClientRf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ssids_Ssid_Clients_Client_ClientRf(Ssids_Ssid_Clients_Client_ClientRf&& from) noexcept
    : Ssids_Ssid_Clients_Client_ClientRf() {
    *this = ::std::move(from);
  }

  inline Ssids_Ssid_Clients_Client_ClientRf& operator=(Ssids_Ssid_Clients_Client_ClientRf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ssids_Ssid_Clients_Client_ClientRf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ssids_Ssid_Clients_Client_ClientRf* internal_default_instance() {
    return reinterpret_cast<const Ssids_Ssid_Clients_Client_ClientRf*>(
               &_Ssids_Ssid_Clients_Client_ClientRf_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(Ssids_Ssid_Clients_Client_ClientRf* other);
  friend void swap(Ssids_Ssid_Clients_Client_ClientRf& a, Ssids_Ssid_Clients_Client_ClientRf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ssids_Ssid_Clients_Client_ClientRf* New() const PROTOBUF_FINAL { return New(NULL); }

  Ssids_Ssid_Clients_Client_ClientRf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ssids_Ssid_Clients_Client_ClientRf& from);
  void MergeFrom(const Ssids_Ssid_Clients_Client_ClientRf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ssids_Ssid_Clients_Client_ClientRf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Ssids_Ssid_Clients_Client_ClientRf_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State state = 103238677 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 103238677;
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf_State& state() const;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf_State* release_state();
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf_State* state);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf_State* state_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client_ClientRfImpl();
};
// -------------------------------------------------------------------

class Ssids_Ssid_Clients_Client_Dot11KNeighbors_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State) */ {
 public:
  Ssids_Ssid_Clients_Client_Dot11KNeighbors_State();
  virtual ~Ssids_Ssid_Clients_Client_Dot11KNeighbors_State();

  Ssids_Ssid_Clients_Client_Dot11KNeighbors_State(const Ssids_Ssid_Clients_Client_Dot11KNeighbors_State& from);

  inline Ssids_Ssid_Clients_Client_Dot11KNeighbors_State& operator=(const Ssids_Ssid_Clients_Client_Dot11KNeighbors_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ssids_Ssid_Clients_Client_Dot11KNeighbors_State(Ssids_Ssid_Clients_Client_Dot11KNeighbors_State&& from) noexcept
    : Ssids_Ssid_Clients_Client_Dot11KNeighbors_State() {
    *this = ::std::move(from);
  }

  inline Ssids_Ssid_Clients_Client_Dot11KNeighbors_State& operator=(Ssids_Ssid_Clients_Client_Dot11KNeighbors_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ssids_Ssid_Clients_Client_Dot11KNeighbors_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ssids_Ssid_Clients_Client_Dot11KNeighbors_State* internal_default_instance() {
    return reinterpret_cast<const Ssids_Ssid_Clients_Client_Dot11KNeighbors_State*>(
               &_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(Ssids_Ssid_Clients_Client_Dot11KNeighbors_State* other);
  friend void swap(Ssids_Ssid_Clients_Client_Dot11KNeighbors_State& a, Ssids_Ssid_Clients_Client_Dot11KNeighbors_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ssids_Ssid_Clients_Client_Dot11KNeighbors_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Ssids_Ssid_Clients_Client_Dot11KNeighbors_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ssids_Ssid_Clients_Client_Dot11KNeighbors_State& from);
  void MergeFrom(const Ssids_Ssid_Clients_Client_Dot11KNeighbors_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ssids_Ssid_Clients_Client_Dot11KNeighbors_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.IntValue neighbor_rssi = 162709186 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors/state/neighbor-rssi"];
  bool has_neighbor_rssi() const;
  void clear_neighbor_rssi();
  static const int kNeighborRssiFieldNumber = 162709186;
  const ::ywrapper::IntValue& neighbor_rssi() const;
  ::ywrapper::IntValue* release_neighbor_rssi();
  ::ywrapper::IntValue* mutable_neighbor_rssi();
  void set_allocated_neighbor_rssi(::ywrapper::IntValue* neighbor_rssi);

  // .ywrapper.UintValue channel_load_report = 177485393 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors/state/channel-load-report"];
  bool has_channel_load_report() const;
  void clear_channel_load_report();
  static const int kChannelLoadReportFieldNumber = 177485393;
  const ::ywrapper::UintValue& channel_load_report() const;
  ::ywrapper::UintValue* release_channel_load_report();
  ::ywrapper::UintValue* mutable_channel_load_report();
  void set_allocated_channel_load_report(::ywrapper::UintValue* channel_load_report);

  // .ywrapper.UintValue neighbor_channel = 333603412 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors/state/neighbor-channel"];
  bool has_neighbor_channel() const;
  void clear_neighbor_channel();
  static const int kNeighborChannelFieldNumber = 333603412;
  const ::ywrapper::UintValue& neighbor_channel() const;
  ::ywrapper::UintValue* release_neighbor_channel();
  ::ywrapper::UintValue* mutable_neighbor_channel();
  void set_allocated_neighbor_channel(::ywrapper::UintValue* neighbor_channel);

  // .ywrapper.StringValue neighbor_bssid = 362323378 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors/state/neighbor-bssid"];
  bool has_neighbor_bssid() const;
  void clear_neighbor_bssid();
  static const int kNeighborBssidFieldNumber = 362323378;
  const ::ywrapper::StringValue& neighbor_bssid() const;
  ::ywrapper::StringValue* release_neighbor_bssid();
  ::ywrapper::StringValue* mutable_neighbor_bssid();
  void set_allocated_neighbor_bssid(::ywrapper::StringValue* neighbor_bssid);

  // .ywrapper.UintValue neighbor_antenna = 490954216 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors/state/neighbor-antenna"];
  bool has_neighbor_antenna() const;
  void clear_neighbor_antenna();
  static const int kNeighborAntennaFieldNumber = 490954216;
  const ::ywrapper::UintValue& neighbor_antenna() const;
  ::ywrapper::UintValue* release_neighbor_antenna();
  ::ywrapper::UintValue* mutable_neighbor_antenna();
  void set_allocated_neighbor_antenna(::ywrapper::UintValue* neighbor_antenna);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::IntValue* neighbor_rssi_;
  ::ywrapper::UintValue* channel_load_report_;
  ::ywrapper::UintValue* neighbor_channel_;
  ::ywrapper::StringValue* neighbor_bssid_;
  ::ywrapper::UintValue* neighbor_antenna_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client_Dot11KNeighbors_StateImpl();
};
// -------------------------------------------------------------------

class Ssids_Ssid_Clients_Client_Dot11KNeighbors : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors) */ {
 public:
  Ssids_Ssid_Clients_Client_Dot11KNeighbors();
  virtual ~Ssids_Ssid_Clients_Client_Dot11KNeighbors();

  Ssids_Ssid_Clients_Client_Dot11KNeighbors(const Ssids_Ssid_Clients_Client_Dot11KNeighbors& from);

  inline Ssids_Ssid_Clients_Client_Dot11KNeighbors& operator=(const Ssids_Ssid_Clients_Client_Dot11KNeighbors& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ssids_Ssid_Clients_Client_Dot11KNeighbors(Ssids_Ssid_Clients_Client_Dot11KNeighbors&& from) noexcept
    : Ssids_Ssid_Clients_Client_Dot11KNeighbors() {
    *this = ::std::move(from);
  }

  inline Ssids_Ssid_Clients_Client_Dot11KNeighbors& operator=(Ssids_Ssid_Clients_Client_Dot11KNeighbors&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ssids_Ssid_Clients_Client_Dot11KNeighbors& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ssids_Ssid_Clients_Client_Dot11KNeighbors* internal_default_instance() {
    return reinterpret_cast<const Ssids_Ssid_Clients_Client_Dot11KNeighbors*>(
               &_Ssids_Ssid_Clients_Client_Dot11KNeighbors_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(Ssids_Ssid_Clients_Client_Dot11KNeighbors* other);
  friend void swap(Ssids_Ssid_Clients_Client_Dot11KNeighbors& a, Ssids_Ssid_Clients_Client_Dot11KNeighbors& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ssids_Ssid_Clients_Client_Dot11KNeighbors* New() const PROTOBUF_FINAL { return New(NULL); }

  Ssids_Ssid_Clients_Client_Dot11KNeighbors* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ssids_Ssid_Clients_Client_Dot11KNeighbors& from);
  void MergeFrom(const Ssids_Ssid_Clients_Client_Dot11KNeighbors& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ssids_Ssid_Clients_Client_Dot11KNeighbors* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Ssids_Ssid_Clients_Client_Dot11KNeighbors_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State state = 119848253 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 119848253;
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors_State& state() const;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors_State* release_state();
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors_State* state);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors_State* state_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client_Dot11KNeighborsImpl();
};
// -------------------------------------------------------------------

class Ssids_Ssid_Clients_Client_State_Counters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters) */ {
 public:
  Ssids_Ssid_Clients_Client_State_Counters();
  virtual ~Ssids_Ssid_Clients_Client_State_Counters();

  Ssids_Ssid_Clients_Client_State_Counters(const Ssids_Ssid_Clients_Client_State_Counters& from);

  inline Ssids_Ssid_Clients_Client_State_Counters& operator=(const Ssids_Ssid_Clients_Client_State_Counters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ssids_Ssid_Clients_Client_State_Counters(Ssids_Ssid_Clients_Client_State_Counters&& from) noexcept
    : Ssids_Ssid_Clients_Client_State_Counters() {
    *this = ::std::move(from);
  }

  inline Ssids_Ssid_Clients_Client_State_Counters& operator=(Ssids_Ssid_Clients_Client_State_Counters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ssids_Ssid_Clients_Client_State_Counters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ssids_Ssid_Clients_Client_State_Counters* internal_default_instance() {
    return reinterpret_cast<const Ssids_Ssid_Clients_Client_State_Counters*>(
               &_Ssids_Ssid_Clients_Client_State_Counters_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(Ssids_Ssid_Clients_Client_State_Counters* other);
  friend void swap(Ssids_Ssid_Clients_Client_State_Counters& a, Ssids_Ssid_Clients_Client_State_Counters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ssids_Ssid_Clients_Client_State_Counters* New() const PROTOBUF_FINAL { return New(NULL); }

  Ssids_Ssid_Clients_Client_State_Counters* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ssids_Ssid_Clients_Client_State_Counters& from);
  void MergeFrom(const Ssids_Ssid_Clients_Client_State_Counters& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ssids_Ssid_Clients_Client_State_Counters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue tx_bytes = 23313743 [(.yext.schemapath) = "/ssids/ssid/clients/client/state/counters/tx-bytes"];
  bool has_tx_bytes() const;
  void clear_tx_bytes();
  static const int kTxBytesFieldNumber = 23313743;
  const ::ywrapper::UintValue& tx_bytes() const;
  ::ywrapper::UintValue* release_tx_bytes();
  ::ywrapper::UintValue* mutable_tx_bytes();
  void set_allocated_tx_bytes(::ywrapper::UintValue* tx_bytes);

  // .ywrapper.UintValue tx_retries = 98702232 [(.yext.schemapath) = "/ssids/ssid/clients/client/state/counters/tx-retries"];
  bool has_tx_retries() const;
  void clear_tx_retries();
  static const int kTxRetriesFieldNumber = 98702232;
  const ::ywrapper::UintValue& tx_retries() const;
  ::ywrapper::UintValue* release_tx_retries();
  ::ywrapper::UintValue* mutable_tx_retries();
  void set_allocated_tx_retries(::ywrapper::UintValue* tx_retries);

  // .ywrapper.UintValue rx_retries = 189738762 [(.yext.schemapath) = "/ssids/ssid/clients/client/state/counters/rx-retries"];
  bool has_rx_retries() const;
  void clear_rx_retries();
  static const int kRxRetriesFieldNumber = 189738762;
  const ::ywrapper::UintValue& rx_retries() const;
  ::ywrapper::UintValue* release_rx_retries();
  ::ywrapper::UintValue* mutable_rx_retries();
  void set_allocated_rx_retries(::ywrapper::UintValue* rx_retries);

  // .ywrapper.UintValue rx_bytes = 495845557 [(.yext.schemapath) = "/ssids/ssid/clients/client/state/counters/rx-bytes"];
  bool has_rx_bytes() const;
  void clear_rx_bytes();
  static const int kRxBytesFieldNumber = 495845557;
  const ::ywrapper::UintValue& rx_bytes() const;
  ::ywrapper::UintValue* release_rx_bytes();
  ::ywrapper::UintValue* mutable_rx_bytes();
  void set_allocated_rx_bytes(::ywrapper::UintValue* rx_bytes);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* tx_bytes_;
  ::ywrapper::UintValue* tx_retries_;
  ::ywrapper::UintValue* rx_retries_;
  ::ywrapper::UintValue* rx_bytes_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client_State_CountersImpl();
};
// -------------------------------------------------------------------

class Ssids_Ssid_Clients_Client_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State) */ {
 public:
  Ssids_Ssid_Clients_Client_State();
  virtual ~Ssids_Ssid_Clients_Client_State();

  Ssids_Ssid_Clients_Client_State(const Ssids_Ssid_Clients_Client_State& from);

  inline Ssids_Ssid_Clients_Client_State& operator=(const Ssids_Ssid_Clients_Client_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ssids_Ssid_Clients_Client_State(Ssids_Ssid_Clients_Client_State&& from) noexcept
    : Ssids_Ssid_Clients_Client_State() {
    *this = ::std::move(from);
  }

  inline Ssids_Ssid_Clients_Client_State& operator=(Ssids_Ssid_Clients_Client_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ssids_Ssid_Clients_Client_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ssids_Ssid_Clients_Client_State* internal_default_instance() {
    return reinterpret_cast<const Ssids_Ssid_Clients_Client_State*>(
               &_Ssids_Ssid_Clients_Client_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(Ssids_Ssid_Clients_Client_State* other);
  friend void swap(Ssids_Ssid_Clients_Client_State& a, Ssids_Ssid_Clients_Client_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ssids_Ssid_Clients_Client_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Ssids_Ssid_Clients_Client_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ssids_Ssid_Clients_Client_State& from);
  void MergeFrom(const Ssids_Ssid_Clients_Client_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ssids_Ssid_Clients_Client_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Ssids_Ssid_Clients_Client_State_Counters Counters;

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue mac = 199348678 [(.yext.schemapath) = "/ssids/ssid/clients/client/state/mac"];
  bool has_mac() const;
  void clear_mac();
  static const int kMacFieldNumber = 199348678;
  const ::ywrapper::StringValue& mac() const;
  ::ywrapper::StringValue* release_mac();
  ::ywrapper::StringValue* mutable_mac();
  void set_allocated_mac(::ywrapper::StringValue* mac);

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters counters = 481400498 [(.yext.schemapath) = "/ssids/ssid/clients/client/state/counters"];
  bool has_counters() const;
  void clear_counters();
  static const int kCountersFieldNumber = 481400498;
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State_Counters& counters() const;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State_Counters* release_counters();
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State_Counters* mutable_counters();
  void set_allocated_counters(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State_Counters* counters);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* mac_;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State_Counters* counters_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_Client_StateImpl();
};
// -------------------------------------------------------------------

class Ssids_Ssid_Clients_Client : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client) */ {
 public:
  Ssids_Ssid_Clients_Client();
  virtual ~Ssids_Ssid_Clients_Client();

  Ssids_Ssid_Clients_Client(const Ssids_Ssid_Clients_Client& from);

  inline Ssids_Ssid_Clients_Client& operator=(const Ssids_Ssid_Clients_Client& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ssids_Ssid_Clients_Client(Ssids_Ssid_Clients_Client&& from) noexcept
    : Ssids_Ssid_Clients_Client() {
    *this = ::std::move(from);
  }

  inline Ssids_Ssid_Clients_Client& operator=(Ssids_Ssid_Clients_Client&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ssids_Ssid_Clients_Client& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ssids_Ssid_Clients_Client* internal_default_instance() {
    return reinterpret_cast<const Ssids_Ssid_Clients_Client*>(
               &_Ssids_Ssid_Clients_Client_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(Ssids_Ssid_Clients_Client* other);
  friend void swap(Ssids_Ssid_Clients_Client& a, Ssids_Ssid_Clients_Client& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ssids_Ssid_Clients_Client* New() const PROTOBUF_FINAL { return New(NULL); }

  Ssids_Ssid_Clients_Client* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ssids_Ssid_Clients_Client& from);
  void MergeFrom(const Ssids_Ssid_Clients_Client& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ssids_Ssid_Clients_Client* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Ssids_Ssid_Clients_Client_ClientCapabilities ClientCapabilities;
  typedef Ssids_Ssid_Clients_Client_ClientConnection ClientConnection;
  typedef Ssids_Ssid_Clients_Client_ClientRf ClientRf;
  typedef Ssids_Ssid_Clients_Client_Dot11KNeighbors Dot11KNeighbors;
  typedef Ssids_Ssid_Clients_Client_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State state = 71274334 [(.yext.schemapath) = "/ssids/ssid/clients/client/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 71274334;
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State& state() const;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State* release_state();
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State* state);

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities client_capabilities = 174011229 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-capabilities"];
  bool has_client_capabilities() const;
  void clear_client_capabilities();
  static const int kClientCapabilitiesFieldNumber = 174011229;
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities& client_capabilities() const;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities* release_client_capabilities();
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities* mutable_client_capabilities();
  void set_allocated_client_capabilities(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities* client_capabilities);

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf client_rf = 340039371 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf"];
  bool has_client_rf() const;
  void clear_client_rf();
  static const int kClientRfFieldNumber = 340039371;
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf& client_rf() const;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf* release_client_rf();
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf* mutable_client_rf();
  void set_allocated_client_rf(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf* client_rf);

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors dot11k_neighbors = 485662115 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors"];
  bool has_dot11k_neighbors() const;
  void clear_dot11k_neighbors();
  static const int kDot11KNeighborsFieldNumber = 485662115;
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors& dot11k_neighbors() const;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors* release_dot11k_neighbors();
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors* mutable_dot11k_neighbors();
  void set_allocated_dot11k_neighbors(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors* dot11k_neighbors);

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection client_connection = 525041115 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection"];
  bool has_client_connection() const;
  void clear_client_connection();
  static const int kClientConnectionFieldNumber = 525041115;
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection& client_connection() const;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection* release_client_connection();
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection* mutable_client_connection();
  void set_allocated_client_connection(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection* client_connection);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State* state_;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities* client_capabilities_;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf* client_rf_;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors* dot11k_neighbors_;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection* client_connection_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_ClientImpl();
};
// -------------------------------------------------------------------

class Ssids_Ssid_Clients_ClientKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey) */ {
 public:
  Ssids_Ssid_Clients_ClientKey();
  virtual ~Ssids_Ssid_Clients_ClientKey();

  Ssids_Ssid_Clients_ClientKey(const Ssids_Ssid_Clients_ClientKey& from);

  inline Ssids_Ssid_Clients_ClientKey& operator=(const Ssids_Ssid_Clients_ClientKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ssids_Ssid_Clients_ClientKey(Ssids_Ssid_Clients_ClientKey&& from) noexcept
    : Ssids_Ssid_Clients_ClientKey() {
    *this = ::std::move(from);
  }

  inline Ssids_Ssid_Clients_ClientKey& operator=(Ssids_Ssid_Clients_ClientKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ssids_Ssid_Clients_ClientKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ssids_Ssid_Clients_ClientKey* internal_default_instance() {
    return reinterpret_cast<const Ssids_Ssid_Clients_ClientKey*>(
               &_Ssids_Ssid_Clients_ClientKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(Ssids_Ssid_Clients_ClientKey* other);
  friend void swap(Ssids_Ssid_Clients_ClientKey& a, Ssids_Ssid_Clients_ClientKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ssids_Ssid_Clients_ClientKey* New() const PROTOBUF_FINAL { return New(NULL); }

  Ssids_Ssid_Clients_ClientKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ssids_Ssid_Clients_ClientKey& from);
  void MergeFrom(const Ssids_Ssid_Clients_ClientKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ssids_Ssid_Clients_ClientKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string mac = 1 [(.yext.schemapath) = "/ssids/ssid/clients/client/mac"];
  void clear_mac();
  static const int kMacFieldNumber = 1;
  const ::std::string& mac() const;
  void set_mac(const ::std::string& value);
  #if LANG_CXX11
  void set_mac(::std::string&& value);
  #endif
  void set_mac(const char* value);
  void set_mac(const char* value, size_t size);
  ::std::string* mutable_mac();
  ::std::string* release_mac();
  void set_allocated_mac(::std::string* mac);

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client client = 2;
  bool has_client() const;
  void clear_client();
  static const int kClientFieldNumber = 2;
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client& client() const;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client* release_client();
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client* mutable_client();
  void set_allocated_client(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client* client);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr mac_;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client* client_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Clients_ClientKeyImpl();
};
// -------------------------------------------------------------------

class Ssids_Ssid_Clients : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients) */ {
 public:
  Ssids_Ssid_Clients();
  virtual ~Ssids_Ssid_Clients();

  Ssids_Ssid_Clients(const Ssids_Ssid_Clients& from);

  inline Ssids_Ssid_Clients& operator=(const Ssids_Ssid_Clients& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ssids_Ssid_Clients(Ssids_Ssid_Clients&& from) noexcept
    : Ssids_Ssid_Clients() {
    *this = ::std::move(from);
  }

  inline Ssids_Ssid_Clients& operator=(Ssids_Ssid_Clients&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ssids_Ssid_Clients& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ssids_Ssid_Clients* internal_default_instance() {
    return reinterpret_cast<const Ssids_Ssid_Clients*>(
               &_Ssids_Ssid_Clients_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(Ssids_Ssid_Clients* other);
  friend void swap(Ssids_Ssid_Clients& a, Ssids_Ssid_Clients& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ssids_Ssid_Clients* New() const PROTOBUF_FINAL { return New(NULL); }

  Ssids_Ssid_Clients* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ssids_Ssid_Clients& from);
  void MergeFrom(const Ssids_Ssid_Clients& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ssids_Ssid_Clients* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Ssids_Ssid_Clients_Client Client;
  typedef Ssids_Ssid_Clients_ClientKey ClientKey;

  // accessors -------------------------------------------------------

  // repeated .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey client = 197622244 [(.yext.schemapath) = "/ssids/ssid/clients/client"];
  int client_size() const;
  void clear_client();
  static const int kClientFieldNumber = 197622244;
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_ClientKey& client(int index) const;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_ClientKey* mutable_client(int index);
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_ClientKey* add_client();
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_ClientKey >*
      mutable_client();
  const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_ClientKey >&
      client() const;

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_ClientKey > client_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_ClientsImpl();
};
// -------------------------------------------------------------------

class Ssids_Ssid_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config) */ {
 public:
  Ssids_Ssid_Config();
  virtual ~Ssids_Ssid_Config();

  Ssids_Ssid_Config(const Ssids_Ssid_Config& from);

  inline Ssids_Ssid_Config& operator=(const Ssids_Ssid_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ssids_Ssid_Config(Ssids_Ssid_Config&& from) noexcept
    : Ssids_Ssid_Config() {
    *this = ::std::move(from);
  }

  inline Ssids_Ssid_Config& operator=(Ssids_Ssid_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ssids_Ssid_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ssids_Ssid_Config* internal_default_instance() {
    return reinterpret_cast<const Ssids_Ssid_Config*>(
               &_Ssids_Ssid_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(Ssids_Ssid_Config* other);
  friend void swap(Ssids_Ssid_Config& a, Ssids_Ssid_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ssids_Ssid_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Ssids_Ssid_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ssids_Ssid_Config& from);
  void MergeFrom(const Ssids_Ssid_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ssids_Ssid_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Ssids_Ssid_Config_Opmode Opmode;
  static const Opmode OPMODE_OPEN =
    Ssids_Ssid_Config_Opmode_OPMODE_OPEN;
  static const Opmode OPMODE_WPA2_PERSONAL =
    Ssids_Ssid_Config_Opmode_OPMODE_WPA2_PERSONAL;
  static const Opmode OPMODE_WPA2_ENTERPRISE =
    Ssids_Ssid_Config_Opmode_OPMODE_WPA2_ENTERPRISE;
  static inline bool Opmode_IsValid(int value) {
    return Ssids_Ssid_Config_Opmode_IsValid(value);
  }
  static const Opmode Opmode_MIN =
    Ssids_Ssid_Config_Opmode_Opmode_MIN;
  static const Opmode Opmode_MAX =
    Ssids_Ssid_Config_Opmode_Opmode_MAX;
  static const int Opmode_ARRAYSIZE =
    Ssids_Ssid_Config_Opmode_Opmode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Opmode_descriptor() {
    return Ssids_Ssid_Config_Opmode_descriptor();
  }
  static inline const ::std::string& Opmode_Name(Opmode value) {
    return Ssids_Ssid_Config_Opmode_Name(value);
  }
  static inline bool Opmode_Parse(const ::std::string& name,
      Opmode* value) {
    return Ssids_Ssid_Config_Opmode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .openconfig.enums.OpenconfigWifiTypesDATARATE basic_data_rates = 96025474 [(.yext.schemapath) = "/ssids/ssid/config/basic-data-rates"];
  int basic_data_rates_size() const;
  void clear_basic_data_rates();
  static const int kBasicDataRatesFieldNumber = 96025474;
  ::openconfig::enums::OpenconfigWifiTypesDATARATE basic_data_rates(int index) const;
  void set_basic_data_rates(int index, ::openconfig::enums::OpenconfigWifiTypesDATARATE value);
  void add_basic_data_rates(::openconfig::enums::OpenconfigWifiTypesDATARATE value);
  const ::google::protobuf::RepeatedField<int>& basic_data_rates() const;
  ::google::protobuf::RepeatedField<int>* mutable_basic_data_rates();

  // repeated .openconfig.enums.OpenconfigWifiTypesDATARATE supported_data_rates = 128647718 [(.yext.schemapath) = "/ssids/ssid/config/supported-data-rates"];
  int supported_data_rates_size() const;
  void clear_supported_data_rates();
  static const int kSupportedDataRatesFieldNumber = 128647718;
  ::openconfig::enums::OpenconfigWifiTypesDATARATE supported_data_rates(int index) const;
  void set_supported_data_rates(int index, ::openconfig::enums::OpenconfigWifiTypesDATARATE value);
  void add_supported_data_rates(::openconfig::enums::OpenconfigWifiTypesDATARATE value);
  const ::google::protobuf::RepeatedField<int>& supported_data_rates() const;
  ::google::protobuf::RepeatedField<int>* mutable_supported_data_rates();

  // .ywrapper.StringValue name = 16502406 [(.yext.schemapath) = "/ssids/ssid/config/name"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 16502406;
  const ::ywrapper::StringValue& name() const;
  ::ywrapper::StringValue* release_name();
  ::ywrapper::StringValue* mutable_name();
  void set_allocated_name(::ywrapper::StringValue* name);

  // .ywrapper.BoolValue enabled = 55874470 [(.yext.schemapath) = "/ssids/ssid/config/enabled"];
  bool has_enabled() const;
  void clear_enabled();
  static const int kEnabledFieldNumber = 55874470;
  const ::ywrapper::BoolValue& enabled() const;
  ::ywrapper::BoolValue* release_enabled();
  ::ywrapper::BoolValue* mutable_enabled();
  void set_allocated_enabled(::ywrapper::BoolValue* enabled);

  // .ywrapper.BoolValue station_isolation = 87616742 [(.yext.schemapath) = "/ssids/ssid/config/station-isolation"];
  bool has_station_isolation() const;
  void clear_station_isolation();
  static const int kStationIsolationFieldNumber = 87616742;
  const ::ywrapper::BoolValue& station_isolation() const;
  ::ywrapper::BoolValue* release_station_isolation();
  ::ywrapper::BoolValue* mutable_station_isolation();
  void set_allocated_station_isolation(::ywrapper::BoolValue* station_isolation);

  // .ywrapper.StringValue mobility_domain = 171956929 [(.yext.schemapath) = "/ssids/ssid/config/mobility-domain"];
  bool has_mobility_domain() const;
  void clear_mobility_domain();
  static const int kMobilityDomainFieldNumber = 171956929;
  const ::ywrapper::StringValue& mobility_domain() const;
  ::ywrapper::StringValue* release_mobility_domain();
  ::ywrapper::StringValue* mutable_mobility_domain();
  void set_allocated_mobility_domain(::ywrapper::StringValue* mobility_domain);

  // .ywrapper.BoolValue qbss_load = 179646833 [(.yext.schemapath) = "/ssids/ssid/config/qbss-load"];
  bool has_qbss_load() const;
  void clear_qbss_load();
  static const int kQbssLoadFieldNumber = 179646833;
  const ::ywrapper::BoolValue& qbss_load() const;
  ::ywrapper::BoolValue* release_qbss_load();
  ::ywrapper::BoolValue* mutable_qbss_load();
  void set_allocated_qbss_load(::ywrapper::BoolValue* qbss_load);

  // .ywrapper.StringValue wpa2_psk = 180186978 [(.yext.schemapath) = "/ssids/ssid/config/wpa2-psk"];
  bool has_wpa2_psk() const;
  void clear_wpa2_psk();
  static const int kWpa2PskFieldNumber = 180186978;
  const ::ywrapper::StringValue& wpa2_psk() const;
  ::ywrapper::StringValue* release_wpa2_psk();
  ::ywrapper::StringValue* mutable_wpa2_psk();
  void set_allocated_wpa2_psk(::ywrapper::StringValue* wpa2_psk);

  // .ywrapper.BoolValue advertise_apname = 192650365 [(.yext.schemapath) = "/ssids/ssid/config/advertise-apname"];
  bool has_advertise_apname() const;
  void clear_advertise_apname();
  static const int kAdvertiseApnameFieldNumber = 192650365;
  const ::ywrapper::BoolValue& advertise_apname() const;
  ::ywrapper::BoolValue* release_advertise_apname();
  ::ywrapper::BoolValue* mutable_advertise_apname();
  void set_allocated_advertise_apname(::ywrapper::BoolValue* advertise_apname);

  // .ywrapper.BoolValue okc = 247210280 [(.yext.schemapath) = "/ssids/ssid/config/okc"];
  bool has_okc() const;
  void clear_okc();
  static const int kOkcFieldNumber = 247210280;
  const ::ywrapper::BoolValue& okc() const;
  ::ywrapper::BoolValue* release_okc();
  ::ywrapper::BoolValue* mutable_okc();
  void set_allocated_okc(::ywrapper::BoolValue* okc);

  // .ywrapper.BoolValue csa = 247811686 [(.yext.schemapath) = "/ssids/ssid/config/csa"];
  bool has_csa() const;
  void clear_csa();
  static const int kCsaFieldNumber = 247811686;
  const ::ywrapper::BoolValue& csa() const;
  ::ywrapper::BoolValue* release_csa();
  ::ywrapper::BoolValue* mutable_csa();
  void set_allocated_csa(::ywrapper::BoolValue* csa);

  // .ywrapper.UintValue vlan_id = 278924278 [(.yext.schemapath) = "/ssids/ssid/config/vlan-id"];
  bool has_vlan_id() const;
  void clear_vlan_id();
  static const int kVlanIdFieldNumber = 278924278;
  const ::ywrapper::UintValue& vlan_id() const;
  ::ywrapper::UintValue* release_vlan_id();
  ::ywrapper::UintValue* mutable_vlan_id();
  void set_allocated_vlan_id(::ywrapper::UintValue* vlan_id);

  // .ywrapper.BoolValue broadcast_filter = 291022387 [(.yext.schemapath) = "/ssids/ssid/config/broadcast-filter"];
  bool has_broadcast_filter() const;
  void clear_broadcast_filter();
  static const int kBroadcastFilterFieldNumber = 291022387;
  const ::ywrapper::BoolValue& broadcast_filter() const;
  ::ywrapper::BoolValue* release_broadcast_filter();
  ::ywrapper::BoolValue* mutable_broadcast_filter();
  void set_allocated_broadcast_filter(::ywrapper::BoolValue* broadcast_filter);

  // .ywrapper.BoolValue ipv6_ndp_filter = 318985876 [(.yext.schemapath) = "/ssids/ssid/config/ipv6-ndp-filter"];
  bool has_ipv6_ndp_filter() const;
  void clear_ipv6_ndp_filter();
  static const int kIpv6NdpFilterFieldNumber = 318985876;
  const ::ywrapper::BoolValue& ipv6_ndp_filter() const;
  ::ywrapper::BoolValue* release_ipv6_ndp_filter();
  ::ywrapper::BoolValue* mutable_ipv6_ndp_filter();
  void set_allocated_ipv6_ndp_filter(::ywrapper::BoolValue* ipv6_ndp_filter);

  // .ywrapper.BoolValue dhcp_required = 330477468 [(.yext.schemapath) = "/ssids/ssid/config/dhcp-required"];
  bool has_dhcp_required() const;
  void clear_dhcp_required();
  static const int kDhcpRequiredFieldNumber = 330477468;
  const ::ywrapper::BoolValue& dhcp_required() const;
  ::ywrapper::BoolValue* release_dhcp_required();
  ::ywrapper::BoolValue* mutable_dhcp_required();
  void set_allocated_dhcp_required(::ywrapper::BoolValue* dhcp_required);

  // .ywrapper.StringValue server_group = 344881248 [(.yext.schemapath) = "/ssids/ssid/config/server-group"];
  bool has_server_group() const;
  void clear_server_group();
  static const int kServerGroupFieldNumber = 344881248;
  const ::ywrapper::StringValue& server_group() const;
  ::ywrapper::StringValue* release_server_group();
  ::ywrapper::StringValue* mutable_server_group();
  void set_allocated_server_group(::ywrapper::StringValue* server_group);

  // .ywrapper.BoolValue hidden = 358439471 [(.yext.schemapath) = "/ssids/ssid/config/hidden"];
  bool has_hidden() const;
  void clear_hidden();
  static const int kHiddenFieldNumber = 358439471;
  const ::ywrapper::BoolValue& hidden() const;
  ::ywrapper::BoolValue* release_hidden();
  ::ywrapper::BoolValue* mutable_hidden();
  void set_allocated_hidden(::ywrapper::BoolValue* hidden);

  // .ywrapper.UintValue ipv6_ndp_filter_timer = 393630952 [(.yext.schemapath) = "/ssids/ssid/config/ipv6-ndp-filter-timer"];
  bool has_ipv6_ndp_filter_timer() const;
  void clear_ipv6_ndp_filter_timer();
  static const int kIpv6NdpFilterTimerFieldNumber = 393630952;
  const ::ywrapper::UintValue& ipv6_ndp_filter_timer() const;
  ::ywrapper::UintValue* release_ipv6_ndp_filter_timer();
  ::ywrapper::UintValue* mutable_ipv6_ndp_filter_timer();
  void set_allocated_ipv6_ndp_filter_timer(::ywrapper::UintValue* ipv6_ndp_filter_timer);

  // .ywrapper.UintValue ptk_timeout = 404316016 [(.yext.schemapath) = "/ssids/ssid/config/ptk-timeout"];
  bool has_ptk_timeout() const;
  void clear_ptk_timeout();
  static const int kPtkTimeoutFieldNumber = 404316016;
  const ::ywrapper::UintValue& ptk_timeout() const;
  ::ywrapper::UintValue* release_ptk_timeout();
  ::ywrapper::UintValue* mutable_ptk_timeout();
  void set_allocated_ptk_timeout(::ywrapper::UintValue* ptk_timeout);

  // .ywrapper.UintValue gtk_timeout = 428436415 [(.yext.schemapath) = "/ssids/ssid/config/gtk-timeout"];
  bool has_gtk_timeout() const;
  void clear_gtk_timeout();
  static const int kGtkTimeoutFieldNumber = 428436415;
  const ::ywrapper::UintValue& gtk_timeout() const;
  ::ywrapper::UintValue* release_gtk_timeout();
  ::ywrapper::UintValue* mutable_gtk_timeout();
  void set_allocated_gtk_timeout(::ywrapper::UintValue* gtk_timeout);

  // .ywrapper.BoolValue dva = 466452098 [(.yext.schemapath) = "/ssids/ssid/config/dva"];
  bool has_dva() const;
  void clear_dva();
  static const int kDvaFieldNumber = 466452098;
  const ::ywrapper::BoolValue& dva() const;
  ::ywrapper::BoolValue* release_dva();
  ::ywrapper::BoolValue* mutable_dva();
  void set_allocated_dva(::ywrapper::BoolValue* dva);

  // .ywrapper.BoolValue dot11k = 473026033 [(.yext.schemapath) = "/ssids/ssid/config/dot11k"];
  bool has_dot11k() const;
  void clear_dot11k();
  static const int kDot11KFieldNumber = 473026033;
  const ::ywrapper::BoolValue& dot11k() const;
  ::ywrapper::BoolValue* release_dot11k();
  ::ywrapper::BoolValue* mutable_dot11k();
  void set_allocated_dot11k(::ywrapper::BoolValue* dot11k);

  // .ywrapper.BoolValue multicast_filter = 477942606 [(.yext.schemapath) = "/ssids/ssid/config/multicast-filter"];
  bool has_multicast_filter() const;
  void clear_multicast_filter();
  static const int kMulticastFilterFieldNumber = 477942606;
  const ::ywrapper::BoolValue& multicast_filter() const;
  ::ywrapper::BoolValue* release_multicast_filter();
  ::ywrapper::BoolValue* mutable_multicast_filter();
  void set_allocated_multicast_filter(::ywrapper::BoolValue* multicast_filter);

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.Opmode opmode = 409077039 [(.yext.schemapath) = "/ssids/ssid/config/opmode"];
  void clear_opmode();
  static const int kOpmodeFieldNumber = 409077039;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config_Opmode opmode() const;
  void set_opmode(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config_Opmode value);

  // .openconfig.enums.OpenconfigWifiTypesOPERATINGFREQUENCY operating_frequency = 481955913 [(.yext.schemapath) = "/ssids/ssid/config/operating-frequency"];
  void clear_operating_frequency();
  static const int kOperatingFrequencyFieldNumber = 481955913;
  ::openconfig::enums::OpenconfigWifiTypesOPERATINGFREQUENCY operating_frequency() const;
  void set_operating_frequency(::openconfig::enums::OpenconfigWifiTypesOPERATINGFREQUENCY value);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> basic_data_rates_;
  mutable int _basic_data_rates_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> supported_data_rates_;
  mutable int _supported_data_rates_cached_byte_size_;
  ::ywrapper::StringValue* name_;
  ::ywrapper::BoolValue* enabled_;
  ::ywrapper::BoolValue* station_isolation_;
  ::ywrapper::StringValue* mobility_domain_;
  ::ywrapper::BoolValue* qbss_load_;
  ::ywrapper::StringValue* wpa2_psk_;
  ::ywrapper::BoolValue* advertise_apname_;
  ::ywrapper::BoolValue* okc_;
  ::ywrapper::BoolValue* csa_;
  ::ywrapper::UintValue* vlan_id_;
  ::ywrapper::BoolValue* broadcast_filter_;
  ::ywrapper::BoolValue* ipv6_ndp_filter_;
  ::ywrapper::BoolValue* dhcp_required_;
  ::ywrapper::StringValue* server_group_;
  ::ywrapper::BoolValue* hidden_;
  ::ywrapper::UintValue* ipv6_ndp_filter_timer_;
  ::ywrapper::UintValue* ptk_timeout_;
  ::ywrapper::UintValue* gtk_timeout_;
  ::ywrapper::BoolValue* dva_;
  ::ywrapper::BoolValue* dot11k_;
  ::ywrapper::BoolValue* multicast_filter_;
  int opmode_;
  int operating_frequency_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_ConfigImpl();
};
// -------------------------------------------------------------------

class Ssids_Ssid_Dot11R_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config) */ {
 public:
  Ssids_Ssid_Dot11R_Config();
  virtual ~Ssids_Ssid_Dot11R_Config();

  Ssids_Ssid_Dot11R_Config(const Ssids_Ssid_Dot11R_Config& from);

  inline Ssids_Ssid_Dot11R_Config& operator=(const Ssids_Ssid_Dot11R_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ssids_Ssid_Dot11R_Config(Ssids_Ssid_Dot11R_Config&& from) noexcept
    : Ssids_Ssid_Dot11R_Config() {
    *this = ::std::move(from);
  }

  inline Ssids_Ssid_Dot11R_Config& operator=(Ssids_Ssid_Dot11R_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ssids_Ssid_Dot11R_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ssids_Ssid_Dot11R_Config* internal_default_instance() {
    return reinterpret_cast<const Ssids_Ssid_Dot11R_Config*>(
               &_Ssids_Ssid_Dot11R_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(Ssids_Ssid_Dot11R_Config* other);
  friend void swap(Ssids_Ssid_Dot11R_Config& a, Ssids_Ssid_Dot11R_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ssids_Ssid_Dot11R_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Ssids_Ssid_Dot11R_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ssids_Ssid_Dot11R_Config& from);
  void MergeFrom(const Ssids_Ssid_Dot11R_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ssids_Ssid_Dot11R_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Ssids_Ssid_Dot11R_Config_Dot11RMethod Dot11RMethod;
  static const Dot11RMethod DOT11RMETHOD_OVA =
    Ssids_Ssid_Dot11R_Config_Dot11RMethod_DOT11RMETHOD_OVA;
  static const Dot11RMethod DOT11RMETHOD_ODS =
    Ssids_Ssid_Dot11R_Config_Dot11RMethod_DOT11RMETHOD_ODS;
  static inline bool Dot11RMethod_IsValid(int value) {
    return Ssids_Ssid_Dot11R_Config_Dot11RMethod_IsValid(value);
  }
  static const Dot11RMethod Dot11RMethod_MIN =
    Ssids_Ssid_Dot11R_Config_Dot11RMethod_Dot11RMethod_MIN;
  static const Dot11RMethod Dot11RMethod_MAX =
    Ssids_Ssid_Dot11R_Config_Dot11RMethod_Dot11RMethod_MAX;
  static const int Dot11RMethod_ARRAYSIZE =
    Ssids_Ssid_Dot11R_Config_Dot11RMethod_Dot11RMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Dot11RMethod_descriptor() {
    return Ssids_Ssid_Dot11R_Config_Dot11RMethod_descriptor();
  }
  static inline const ::std::string& Dot11RMethod_Name(Dot11RMethod value) {
    return Ssids_Ssid_Dot11R_Config_Dot11RMethod_Name(value);
  }
  static inline bool Dot11RMethod_Parse(const ::std::string& name,
      Dot11RMethod* value) {
    return Ssids_Ssid_Dot11R_Config_Dot11RMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue dot11r_r1key_timeout = 203505331 [(.yext.schemapath) = "/ssids/ssid/dot11r/config/dot11r-r1key-timeout"];
  bool has_dot11r_r1key_timeout() const;
  void clear_dot11r_r1key_timeout();
  static const int kDot11RR1KeyTimeoutFieldNumber = 203505331;
  const ::ywrapper::UintValue& dot11r_r1key_timeout() const;
  ::ywrapper::UintValue* release_dot11r_r1key_timeout();
  ::ywrapper::UintValue* mutable_dot11r_r1key_timeout();
  void set_allocated_dot11r_r1key_timeout(::ywrapper::UintValue* dot11r_r1key_timeout);

  // .ywrapper.BoolValue dot11r = 306866146 [(.yext.schemapath) = "/ssids/ssid/dot11r/config/dot11r"];
  bool has_dot11r() const;
  void clear_dot11r();
  static const int kDot11RFieldNumber = 306866146;
  const ::ywrapper::BoolValue& dot11r() const;
  ::ywrapper::BoolValue* release_dot11r();
  ::ywrapper::BoolValue* mutable_dot11r();
  void set_allocated_dot11r(::ywrapper::BoolValue* dot11r);

  // .ywrapper.UintValue dot11r_domainid = 383959528 [(.yext.schemapath) = "/ssids/ssid/dot11r/config/dot11r-domainid"];
  bool has_dot11r_domainid() const;
  void clear_dot11r_domainid();
  static const int kDot11RDomainidFieldNumber = 383959528;
  const ::ywrapper::UintValue& dot11r_domainid() const;
  ::ywrapper::UintValue* release_dot11r_domainid();
  ::ywrapper::UintValue* mutable_dot11r_domainid();
  void set_allocated_dot11r_domainid(::ywrapper::UintValue* dot11r_domainid);

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config.Dot11RMethod dot11r_method = 439177212 [(.yext.schemapath) = "/ssids/ssid/dot11r/config/dot11r-method"];
  void clear_dot11r_method();
  static const int kDot11RMethodFieldNumber = 439177212;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_Config_Dot11RMethod dot11r_method() const;
  void set_dot11r_method(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_Config_Dot11RMethod value);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* dot11r_r1key_timeout_;
  ::ywrapper::BoolValue* dot11r_;
  ::ywrapper::UintValue* dot11r_domainid_;
  int dot11r_method_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Dot11R_ConfigImpl();
};
// -------------------------------------------------------------------

class Ssids_Ssid_Dot11R_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State) */ {
 public:
  Ssids_Ssid_Dot11R_State();
  virtual ~Ssids_Ssid_Dot11R_State();

  Ssids_Ssid_Dot11R_State(const Ssids_Ssid_Dot11R_State& from);

  inline Ssids_Ssid_Dot11R_State& operator=(const Ssids_Ssid_Dot11R_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ssids_Ssid_Dot11R_State(Ssids_Ssid_Dot11R_State&& from) noexcept
    : Ssids_Ssid_Dot11R_State() {
    *this = ::std::move(from);
  }

  inline Ssids_Ssid_Dot11R_State& operator=(Ssids_Ssid_Dot11R_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ssids_Ssid_Dot11R_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ssids_Ssid_Dot11R_State* internal_default_instance() {
    return reinterpret_cast<const Ssids_Ssid_Dot11R_State*>(
               &_Ssids_Ssid_Dot11R_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(Ssids_Ssid_Dot11R_State* other);
  friend void swap(Ssids_Ssid_Dot11R_State& a, Ssids_Ssid_Dot11R_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ssids_Ssid_Dot11R_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Ssids_Ssid_Dot11R_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ssids_Ssid_Dot11R_State& from);
  void MergeFrom(const Ssids_Ssid_Dot11R_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ssids_Ssid_Dot11R_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Ssids_Ssid_Dot11R_State_Dot11RMethod Dot11RMethod;
  static const Dot11RMethod DOT11RMETHOD_OVA =
    Ssids_Ssid_Dot11R_State_Dot11RMethod_DOT11RMETHOD_OVA;
  static const Dot11RMethod DOT11RMETHOD_ODS =
    Ssids_Ssid_Dot11R_State_Dot11RMethod_DOT11RMETHOD_ODS;
  static inline bool Dot11RMethod_IsValid(int value) {
    return Ssids_Ssid_Dot11R_State_Dot11RMethod_IsValid(value);
  }
  static const Dot11RMethod Dot11RMethod_MIN =
    Ssids_Ssid_Dot11R_State_Dot11RMethod_Dot11RMethod_MIN;
  static const Dot11RMethod Dot11RMethod_MAX =
    Ssids_Ssid_Dot11R_State_Dot11RMethod_Dot11RMethod_MAX;
  static const int Dot11RMethod_ARRAYSIZE =
    Ssids_Ssid_Dot11R_State_Dot11RMethod_Dot11RMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Dot11RMethod_descriptor() {
    return Ssids_Ssid_Dot11R_State_Dot11RMethod_descriptor();
  }
  static inline const ::std::string& Dot11RMethod_Name(Dot11RMethod value) {
    return Ssids_Ssid_Dot11R_State_Dot11RMethod_Name(value);
  }
  static inline bool Dot11RMethod_Parse(const ::std::string& name,
      Dot11RMethod* value) {
    return Ssids_Ssid_Dot11R_State_Dot11RMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue dot11r_r1key_timeout = 86079248 [(.yext.schemapath) = "/ssids/ssid/dot11r/state/dot11r-r1key-timeout"];
  bool has_dot11r_r1key_timeout() const;
  void clear_dot11r_r1key_timeout();
  static const int kDot11RR1KeyTimeoutFieldNumber = 86079248;
  const ::ywrapper::UintValue& dot11r_r1key_timeout() const;
  ::ywrapper::UintValue* release_dot11r_r1key_timeout();
  ::ywrapper::UintValue* mutable_dot11r_r1key_timeout();
  void set_allocated_dot11r_r1key_timeout(::ywrapper::UintValue* dot11r_r1key_timeout);

  // .ywrapper.BoolValue dot11r = 144351457 [(.yext.schemapath) = "/ssids/ssid/dot11r/state/dot11r"];
  bool has_dot11r() const;
  void clear_dot11r();
  static const int kDot11RFieldNumber = 144351457;
  const ::ywrapper::BoolValue& dot11r() const;
  ::ywrapper::BoolValue* release_dot11r();
  ::ywrapper::BoolValue* mutable_dot11r();
  void set_allocated_dot11r(::ywrapper::BoolValue* dot11r);

  // .ywrapper.UintValue dot11r_domainid = 429805585 [(.yext.schemapath) = "/ssids/ssid/dot11r/state/dot11r-domainid"];
  bool has_dot11r_domainid() const;
  void clear_dot11r_domainid();
  static const int kDot11RDomainidFieldNumber = 429805585;
  const ::ywrapper::UintValue& dot11r_domainid() const;
  ::ywrapper::UintValue* release_dot11r_domainid();
  ::ywrapper::UintValue* mutable_dot11r_domainid();
  void set_allocated_dot11r_domainid(::ywrapper::UintValue* dot11r_domainid);

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State.Dot11RMethod dot11r_method = 510783837 [(.yext.schemapath) = "/ssids/ssid/dot11r/state/dot11r-method"];
  void clear_dot11r_method();
  static const int kDot11RMethodFieldNumber = 510783837;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_State_Dot11RMethod dot11r_method() const;
  void set_dot11r_method(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_State_Dot11RMethod value);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* dot11r_r1key_timeout_;
  ::ywrapper::BoolValue* dot11r_;
  ::ywrapper::UintValue* dot11r_domainid_;
  int dot11r_method_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Dot11R_StateImpl();
};
// -------------------------------------------------------------------

class Ssids_Ssid_Dot11R : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R) */ {
 public:
  Ssids_Ssid_Dot11R();
  virtual ~Ssids_Ssid_Dot11R();

  Ssids_Ssid_Dot11R(const Ssids_Ssid_Dot11R& from);

  inline Ssids_Ssid_Dot11R& operator=(const Ssids_Ssid_Dot11R& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ssids_Ssid_Dot11R(Ssids_Ssid_Dot11R&& from) noexcept
    : Ssids_Ssid_Dot11R() {
    *this = ::std::move(from);
  }

  inline Ssids_Ssid_Dot11R& operator=(Ssids_Ssid_Dot11R&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ssids_Ssid_Dot11R& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ssids_Ssid_Dot11R* internal_default_instance() {
    return reinterpret_cast<const Ssids_Ssid_Dot11R*>(
               &_Ssids_Ssid_Dot11R_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(Ssids_Ssid_Dot11R* other);
  friend void swap(Ssids_Ssid_Dot11R& a, Ssids_Ssid_Dot11R& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ssids_Ssid_Dot11R* New() const PROTOBUF_FINAL { return New(NULL); }

  Ssids_Ssid_Dot11R* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ssids_Ssid_Dot11R& from);
  void MergeFrom(const Ssids_Ssid_Dot11R& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ssids_Ssid_Dot11R* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Ssids_Ssid_Dot11R_Config Config;
  typedef Ssids_Ssid_Dot11R_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State state = 150018731 [(.yext.schemapath) = "/ssids/ssid/dot11r/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 150018731;
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_State& state() const;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_State* release_state();
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_State* state);

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config config = 496985790 [(.yext.schemapath) = "/ssids/ssid/dot11r/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 496985790;
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_Config& config() const;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_Config* release_config();
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_Config* config);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_State* state_;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_Config* config_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Dot11RImpl();
};
// -------------------------------------------------------------------

class Ssids_Ssid_Dot11V_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config) */ {
 public:
  Ssids_Ssid_Dot11V_Config();
  virtual ~Ssids_Ssid_Dot11V_Config();

  Ssids_Ssid_Dot11V_Config(const Ssids_Ssid_Dot11V_Config& from);

  inline Ssids_Ssid_Dot11V_Config& operator=(const Ssids_Ssid_Dot11V_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ssids_Ssid_Dot11V_Config(Ssids_Ssid_Dot11V_Config&& from) noexcept
    : Ssids_Ssid_Dot11V_Config() {
    *this = ::std::move(from);
  }

  inline Ssids_Ssid_Dot11V_Config& operator=(Ssids_Ssid_Dot11V_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ssids_Ssid_Dot11V_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ssids_Ssid_Dot11V_Config* internal_default_instance() {
    return reinterpret_cast<const Ssids_Ssid_Dot11V_Config*>(
               &_Ssids_Ssid_Dot11V_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(Ssids_Ssid_Dot11V_Config* other);
  friend void swap(Ssids_Ssid_Dot11V_Config& a, Ssids_Ssid_Dot11V_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ssids_Ssid_Dot11V_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Ssids_Ssid_Dot11V_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ssids_Ssid_Dot11V_Config& from);
  void MergeFrom(const Ssids_Ssid_Dot11V_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ssids_Ssid_Dot11V_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.BoolValue dot11v_dms = 15140429 [(.yext.schemapath) = "/ssids/ssid/dot11v/config/dot11v-dms"];
  bool has_dot11v_dms() const;
  void clear_dot11v_dms();
  static const int kDot11VDmsFieldNumber = 15140429;
  const ::ywrapper::BoolValue& dot11v_dms() const;
  ::ywrapper::BoolValue* release_dot11v_dms();
  ::ywrapper::BoolValue* mutable_dot11v_dms();
  void set_allocated_dot11v_dms(::ywrapper::BoolValue* dot11v_dms);

  // .ywrapper.BoolValue dot11v_bssidle = 26064767 [(.yext.schemapath) = "/ssids/ssid/dot11v/config/dot11v-bssidle"];
  bool has_dot11v_bssidle() const;
  void clear_dot11v_bssidle();
  static const int kDot11VBssidleFieldNumber = 26064767;
  const ::ywrapper::BoolValue& dot11v_bssidle() const;
  ::ywrapper::BoolValue* release_dot11v_bssidle();
  ::ywrapper::BoolValue* mutable_dot11v_bssidle();
  void set_allocated_dot11v_bssidle(::ywrapper::BoolValue* dot11v_bssidle);

  // .ywrapper.UintValue dot11v_bssidle_timeout = 156062593 [(.yext.schemapath) = "/ssids/ssid/dot11v/config/dot11v-bssidle-timeout"];
  bool has_dot11v_bssidle_timeout() const;
  void clear_dot11v_bssidle_timeout();
  static const int kDot11VBssidleTimeoutFieldNumber = 156062593;
  const ::ywrapper::UintValue& dot11v_bssidle_timeout() const;
  ::ywrapper::UintValue* release_dot11v_bssidle_timeout();
  ::ywrapper::UintValue* mutable_dot11v_bssidle_timeout();
  void set_allocated_dot11v_bssidle_timeout(::ywrapper::UintValue* dot11v_bssidle_timeout);

  // .ywrapper.BoolValue dot11v_bsstransition = 245783152 [(.yext.schemapath) = "/ssids/ssid/dot11v/config/dot11v-bsstransition"];
  bool has_dot11v_bsstransition() const;
  void clear_dot11v_bsstransition();
  static const int kDot11VBsstransitionFieldNumber = 245783152;
  const ::ywrapper::BoolValue& dot11v_bsstransition() const;
  ::ywrapper::BoolValue* release_dot11v_bsstransition();
  ::ywrapper::BoolValue* mutable_dot11v_bsstransition();
  void set_allocated_dot11v_bsstransition(::ywrapper::BoolValue* dot11v_bsstransition);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::BoolValue* dot11v_dms_;
  ::ywrapper::BoolValue* dot11v_bssidle_;
  ::ywrapper::UintValue* dot11v_bssidle_timeout_;
  ::ywrapper::BoolValue* dot11v_bsstransition_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Dot11V_ConfigImpl();
};
// -------------------------------------------------------------------

class Ssids_Ssid_Dot11V_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State) */ {
 public:
  Ssids_Ssid_Dot11V_State();
  virtual ~Ssids_Ssid_Dot11V_State();

  Ssids_Ssid_Dot11V_State(const Ssids_Ssid_Dot11V_State& from);

  inline Ssids_Ssid_Dot11V_State& operator=(const Ssids_Ssid_Dot11V_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ssids_Ssid_Dot11V_State(Ssids_Ssid_Dot11V_State&& from) noexcept
    : Ssids_Ssid_Dot11V_State() {
    *this = ::std::move(from);
  }

  inline Ssids_Ssid_Dot11V_State& operator=(Ssids_Ssid_Dot11V_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ssids_Ssid_Dot11V_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ssids_Ssid_Dot11V_State* internal_default_instance() {
    return reinterpret_cast<const Ssids_Ssid_Dot11V_State*>(
               &_Ssids_Ssid_Dot11V_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(Ssids_Ssid_Dot11V_State* other);
  friend void swap(Ssids_Ssid_Dot11V_State& a, Ssids_Ssid_Dot11V_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ssids_Ssid_Dot11V_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Ssids_Ssid_Dot11V_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ssids_Ssid_Dot11V_State& from);
  void MergeFrom(const Ssids_Ssid_Dot11V_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ssids_Ssid_Dot11V_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.BoolValue dot11v_dms = 111152750 [(.yext.schemapath) = "/ssids/ssid/dot11v/state/dot11v-dms"];
  bool has_dot11v_dms() const;
  void clear_dot11v_dms();
  static const int kDot11VDmsFieldNumber = 111152750;
  const ::ywrapper::BoolValue& dot11v_dms() const;
  ::ywrapper::BoolValue* release_dot11v_dms();
  ::ywrapper::BoolValue* mutable_dot11v_dms();
  void set_allocated_dot11v_dms(::ywrapper::BoolValue* dot11v_dms);

  // .ywrapper.UintValue dot11v_bssidle_timeout = 132989062 [(.yext.schemapath) = "/ssids/ssid/dot11v/state/dot11v-bssidle-timeout"];
  bool has_dot11v_bssidle_timeout() const;
  void clear_dot11v_bssidle_timeout();
  static const int kDot11VBssidleTimeoutFieldNumber = 132989062;
  const ::ywrapper::UintValue& dot11v_bssidle_timeout() const;
  ::ywrapper::UintValue* release_dot11v_bssidle_timeout();
  ::ywrapper::UintValue* mutable_dot11v_bssidle_timeout();
  void set_allocated_dot11v_bssidle_timeout(::ywrapper::UintValue* dot11v_bssidle_timeout);

  // .ywrapper.BoolValue dot11v_bsstransition = 165186503 [(.yext.schemapath) = "/ssids/ssid/dot11v/state/dot11v-bsstransition"];
  bool has_dot11v_bsstransition() const;
  void clear_dot11v_bsstransition();
  static const int kDot11VBsstransitionFieldNumber = 165186503;
  const ::ywrapper::BoolValue& dot11v_bsstransition() const;
  ::ywrapper::BoolValue* release_dot11v_bsstransition();
  ::ywrapper::BoolValue* mutable_dot11v_bsstransition();
  void set_allocated_dot11v_bsstransition(::ywrapper::BoolValue* dot11v_bsstransition);

  // .ywrapper.BoolValue dot11v_bssidle = 309924824 [(.yext.schemapath) = "/ssids/ssid/dot11v/state/dot11v-bssidle"];
  bool has_dot11v_bssidle() const;
  void clear_dot11v_bssidle();
  static const int kDot11VBssidleFieldNumber = 309924824;
  const ::ywrapper::BoolValue& dot11v_bssidle() const;
  ::ywrapper::BoolValue* release_dot11v_bssidle();
  ::ywrapper::BoolValue* mutable_dot11v_bssidle();
  void set_allocated_dot11v_bssidle(::ywrapper::BoolValue* dot11v_bssidle);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::BoolValue* dot11v_dms_;
  ::ywrapper::UintValue* dot11v_bssidle_timeout_;
  ::ywrapper::BoolValue* dot11v_bsstransition_;
  ::ywrapper::BoolValue* dot11v_bssidle_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Dot11V_StateImpl();
};
// -------------------------------------------------------------------

class Ssids_Ssid_Dot11V : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V) */ {
 public:
  Ssids_Ssid_Dot11V();
  virtual ~Ssids_Ssid_Dot11V();

  Ssids_Ssid_Dot11V(const Ssids_Ssid_Dot11V& from);

  inline Ssids_Ssid_Dot11V& operator=(const Ssids_Ssid_Dot11V& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ssids_Ssid_Dot11V(Ssids_Ssid_Dot11V&& from) noexcept
    : Ssids_Ssid_Dot11V() {
    *this = ::std::move(from);
  }

  inline Ssids_Ssid_Dot11V& operator=(Ssids_Ssid_Dot11V&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ssids_Ssid_Dot11V& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ssids_Ssid_Dot11V* internal_default_instance() {
    return reinterpret_cast<const Ssids_Ssid_Dot11V*>(
               &_Ssids_Ssid_Dot11V_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(Ssids_Ssid_Dot11V* other);
  friend void swap(Ssids_Ssid_Dot11V& a, Ssids_Ssid_Dot11V& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ssids_Ssid_Dot11V* New() const PROTOBUF_FINAL { return New(NULL); }

  Ssids_Ssid_Dot11V* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ssids_Ssid_Dot11V& from);
  void MergeFrom(const Ssids_Ssid_Dot11V& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ssids_Ssid_Dot11V* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Ssids_Ssid_Dot11V_Config Config;
  typedef Ssids_Ssid_Dot11V_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config config = 232099554 [(.yext.schemapath) = "/ssids/ssid/dot11v/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 232099554;
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_Config& config() const;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_Config* release_config();
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_Config* config);

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State state = 433516575 [(.yext.schemapath) = "/ssids/ssid/dot11v/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 433516575;
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_State& state() const;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_State* release_state();
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_State* state);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_Config* config_;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_State* state_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Dot11VImpl();
};
// -------------------------------------------------------------------

class Ssids_Ssid_Dot1XTimers_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.Config) */ {
 public:
  Ssids_Ssid_Dot1XTimers_Config();
  virtual ~Ssids_Ssid_Dot1XTimers_Config();

  Ssids_Ssid_Dot1XTimers_Config(const Ssids_Ssid_Dot1XTimers_Config& from);

  inline Ssids_Ssid_Dot1XTimers_Config& operator=(const Ssids_Ssid_Dot1XTimers_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ssids_Ssid_Dot1XTimers_Config(Ssids_Ssid_Dot1XTimers_Config&& from) noexcept
    : Ssids_Ssid_Dot1XTimers_Config() {
    *this = ::std::move(from);
  }

  inline Ssids_Ssid_Dot1XTimers_Config& operator=(Ssids_Ssid_Dot1XTimers_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ssids_Ssid_Dot1XTimers_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ssids_Ssid_Dot1XTimers_Config* internal_default_instance() {
    return reinterpret_cast<const Ssids_Ssid_Dot1XTimers_Config*>(
               &_Ssids_Ssid_Dot1XTimers_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(Ssids_Ssid_Dot1XTimers_Config* other);
  friend void swap(Ssids_Ssid_Dot1XTimers_Config& a, Ssids_Ssid_Dot1XTimers_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ssids_Ssid_Dot1XTimers_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Ssids_Ssid_Dot1XTimers_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ssids_Ssid_Dot1XTimers_Config& from);
  void MergeFrom(const Ssids_Ssid_Dot1XTimers_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ssids_Ssid_Dot1XTimers_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue blacklist_time = 60044230 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers/config/blacklist-time"];
  bool has_blacklist_time() const;
  void clear_blacklist_time();
  static const int kBlacklistTimeFieldNumber = 60044230;
  const ::ywrapper::UintValue& blacklist_time() const;
  ::ywrapper::UintValue* release_blacklist_time();
  ::ywrapper::UintValue* mutable_blacklist_time();
  void set_allocated_blacklist_time(::ywrapper::UintValue* blacklist_time);

  // .ywrapper.UintValue max_auth_failures = 286077258 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers/config/max-auth-failures"];
  bool has_max_auth_failures() const;
  void clear_max_auth_failures();
  static const int kMaxAuthFailuresFieldNumber = 286077258;
  const ::ywrapper::UintValue& max_auth_failures() const;
  ::ywrapper::UintValue* release_max_auth_failures();
  ::ywrapper::UintValue* mutable_max_auth_failures();
  void set_allocated_max_auth_failures(::ywrapper::UintValue* max_auth_failures);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* blacklist_time_;
  ::ywrapper::UintValue* max_auth_failures_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Dot1XTimers_ConfigImpl();
};
// -------------------------------------------------------------------

class Ssids_Ssid_Dot1XTimers_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.State) */ {
 public:
  Ssids_Ssid_Dot1XTimers_State();
  virtual ~Ssids_Ssid_Dot1XTimers_State();

  Ssids_Ssid_Dot1XTimers_State(const Ssids_Ssid_Dot1XTimers_State& from);

  inline Ssids_Ssid_Dot1XTimers_State& operator=(const Ssids_Ssid_Dot1XTimers_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ssids_Ssid_Dot1XTimers_State(Ssids_Ssid_Dot1XTimers_State&& from) noexcept
    : Ssids_Ssid_Dot1XTimers_State() {
    *this = ::std::move(from);
  }

  inline Ssids_Ssid_Dot1XTimers_State& operator=(Ssids_Ssid_Dot1XTimers_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ssids_Ssid_Dot1XTimers_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ssids_Ssid_Dot1XTimers_State* internal_default_instance() {
    return reinterpret_cast<const Ssids_Ssid_Dot1XTimers_State*>(
               &_Ssids_Ssid_Dot1XTimers_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void Swap(Ssids_Ssid_Dot1XTimers_State* other);
  friend void swap(Ssids_Ssid_Dot1XTimers_State& a, Ssids_Ssid_Dot1XTimers_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ssids_Ssid_Dot1XTimers_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Ssids_Ssid_Dot1XTimers_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ssids_Ssid_Dot1XTimers_State& from);
  void MergeFrom(const Ssids_Ssid_Dot1XTimers_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ssids_Ssid_Dot1XTimers_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue max_auth_failures = 272897807 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers/state/max-auth-failures"];
  bool has_max_auth_failures() const;
  void clear_max_auth_failures();
  static const int kMaxAuthFailuresFieldNumber = 272897807;
  const ::ywrapper::UintValue& max_auth_failures() const;
  ::ywrapper::UintValue* release_max_auth_failures();
  ::ywrapper::UintValue* mutable_max_auth_failures();
  void set_allocated_max_auth_failures(::ywrapper::UintValue* max_auth_failures);

  // .ywrapper.UintValue blacklist_time = 346437517 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers/state/blacklist-time"];
  bool has_blacklist_time() const;
  void clear_blacklist_time();
  static const int kBlacklistTimeFieldNumber = 346437517;
  const ::ywrapper::UintValue& blacklist_time() const;
  ::ywrapper::UintValue* release_blacklist_time();
  ::ywrapper::UintValue* mutable_blacklist_time();
  void set_allocated_blacklist_time(::ywrapper::UintValue* blacklist_time);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* max_auth_failures_;
  ::ywrapper::UintValue* blacklist_time_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Dot1XTimers_StateImpl();
};
// -------------------------------------------------------------------

class Ssids_Ssid_Dot1XTimers : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers) */ {
 public:
  Ssids_Ssid_Dot1XTimers();
  virtual ~Ssids_Ssid_Dot1XTimers();

  Ssids_Ssid_Dot1XTimers(const Ssids_Ssid_Dot1XTimers& from);

  inline Ssids_Ssid_Dot1XTimers& operator=(const Ssids_Ssid_Dot1XTimers& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ssids_Ssid_Dot1XTimers(Ssids_Ssid_Dot1XTimers&& from) noexcept
    : Ssids_Ssid_Dot1XTimers() {
    *this = ::std::move(from);
  }

  inline Ssids_Ssid_Dot1XTimers& operator=(Ssids_Ssid_Dot1XTimers&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ssids_Ssid_Dot1XTimers& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ssids_Ssid_Dot1XTimers* internal_default_instance() {
    return reinterpret_cast<const Ssids_Ssid_Dot1XTimers*>(
               &_Ssids_Ssid_Dot1XTimers_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void Swap(Ssids_Ssid_Dot1XTimers* other);
  friend void swap(Ssids_Ssid_Dot1XTimers& a, Ssids_Ssid_Dot1XTimers& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ssids_Ssid_Dot1XTimers* New() const PROTOBUF_FINAL { return New(NULL); }

  Ssids_Ssid_Dot1XTimers* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ssids_Ssid_Dot1XTimers& from);
  void MergeFrom(const Ssids_Ssid_Dot1XTimers& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ssids_Ssid_Dot1XTimers* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Ssids_Ssid_Dot1XTimers_Config Config;
  typedef Ssids_Ssid_Dot1XTimers_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.State state = 73845529 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 73845529;
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_State& state() const;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_State* release_state();
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_State* state);

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.Config config = 446236320 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 446236320;
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_Config& config() const;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_Config* release_config();
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_Config* config);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_State* state_;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_Config* config_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Dot1XTimersImpl();
};
// -------------------------------------------------------------------

class Ssids_Ssid_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Ssids.Ssid.State) */ {
 public:
  Ssids_Ssid_State();
  virtual ~Ssids_Ssid_State();

  Ssids_Ssid_State(const Ssids_Ssid_State& from);

  inline Ssids_Ssid_State& operator=(const Ssids_Ssid_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ssids_Ssid_State(Ssids_Ssid_State&& from) noexcept
    : Ssids_Ssid_State() {
    *this = ::std::move(from);
  }

  inline Ssids_Ssid_State& operator=(Ssids_Ssid_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ssids_Ssid_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ssids_Ssid_State* internal_default_instance() {
    return reinterpret_cast<const Ssids_Ssid_State*>(
               &_Ssids_Ssid_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void Swap(Ssids_Ssid_State* other);
  friend void swap(Ssids_Ssid_State& a, Ssids_Ssid_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ssids_Ssid_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Ssids_Ssid_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ssids_Ssid_State& from);
  void MergeFrom(const Ssids_Ssid_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ssids_Ssid_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Ssids_Ssid_State_Opmode Opmode;
  static const Opmode OPMODE_OPEN =
    Ssids_Ssid_State_Opmode_OPMODE_OPEN;
  static const Opmode OPMODE_WPA2_PERSONAL =
    Ssids_Ssid_State_Opmode_OPMODE_WPA2_PERSONAL;
  static const Opmode OPMODE_WPA2_ENTERPRISE =
    Ssids_Ssid_State_Opmode_OPMODE_WPA2_ENTERPRISE;
  static inline bool Opmode_IsValid(int value) {
    return Ssids_Ssid_State_Opmode_IsValid(value);
  }
  static const Opmode Opmode_MIN =
    Ssids_Ssid_State_Opmode_Opmode_MIN;
  static const Opmode Opmode_MAX =
    Ssids_Ssid_State_Opmode_Opmode_MAX;
  static const int Opmode_ARRAYSIZE =
    Ssids_Ssid_State_Opmode_Opmode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Opmode_descriptor() {
    return Ssids_Ssid_State_Opmode_descriptor();
  }
  static inline const ::std::string& Opmode_Name(Opmode value) {
    return Ssids_Ssid_State_Opmode_Name(value);
  }
  static inline bool Opmode_Parse(const ::std::string& name,
      Opmode* value) {
    return Ssids_Ssid_State_Opmode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .openconfig.enums.OpenconfigWifiTypesDATARATE basic_data_rates = 323968205 [(.yext.schemapath) = "/ssids/ssid/state/basic-data-rates"];
  int basic_data_rates_size() const;
  void clear_basic_data_rates();
  static const int kBasicDataRatesFieldNumber = 323968205;
  ::openconfig::enums::OpenconfigWifiTypesDATARATE basic_data_rates(int index) const;
  void set_basic_data_rates(int index, ::openconfig::enums::OpenconfigWifiTypesDATARATE value);
  void add_basic_data_rates(::openconfig::enums::OpenconfigWifiTypesDATARATE value);
  const ::google::protobuf::RepeatedField<int>& basic_data_rates() const;
  ::google::protobuf::RepeatedField<int>* mutable_basic_data_rates();

  // repeated .openconfig.enums.OpenconfigWifiTypesDATARATE supported_data_rates = 458218077 [(.yext.schemapath) = "/ssids/ssid/state/supported-data-rates"];
  int supported_data_rates_size() const;
  void clear_supported_data_rates();
  static const int kSupportedDataRatesFieldNumber = 458218077;
  ::openconfig::enums::OpenconfigWifiTypesDATARATE supported_data_rates(int index) const;
  void set_supported_data_rates(int index, ::openconfig::enums::OpenconfigWifiTypesDATARATE value);
  void add_supported_data_rates(::openconfig::enums::OpenconfigWifiTypesDATARATE value);
  const ::google::protobuf::RepeatedField<int>& supported_data_rates() const;
  ::google::protobuf::RepeatedField<int>* mutable_supported_data_rates();

  // .ywrapper.BoolValue station_isolation = 28685195 [(.yext.schemapath) = "/ssids/ssid/state/station-isolation"];
  bool has_station_isolation() const;
  void clear_station_isolation();
  static const int kStationIsolationFieldNumber = 28685195;
  const ::ywrapper::BoolValue& station_isolation() const;
  ::ywrapper::BoolValue* release_station_isolation();
  ::ywrapper::BoolValue* mutable_station_isolation();
  void set_allocated_station_isolation(::ywrapper::BoolValue* station_isolation);

  // .ywrapper.StringValue name = 40491513 [(.yext.schemapath) = "/ssids/ssid/state/name"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 40491513;
  const ::ywrapper::StringValue& name() const;
  ::ywrapper::StringValue* release_name();
  ::ywrapper::StringValue* mutable_name();
  void set_allocated_name(::ywrapper::StringValue* name);

  // .ywrapper.UintValue tx_bss_dot11_channel_utilization = 88246714 [(.yext.schemapath) = "/ssids/ssid/state/tx-bss-dot11-channel-utilization"];
  bool has_tx_bss_dot11_channel_utilization() const;
  void clear_tx_bss_dot11_channel_utilization();
  static const int kTxBssDot11ChannelUtilizationFieldNumber = 88246714;
  const ::ywrapper::UintValue& tx_bss_dot11_channel_utilization() const;
  ::ywrapper::UintValue* release_tx_bss_dot11_channel_utilization();
  ::ywrapper::UintValue* mutable_tx_bss_dot11_channel_utilization();
  void set_allocated_tx_bss_dot11_channel_utilization(::ywrapper::UintValue* tx_bss_dot11_channel_utilization);

  // .ywrapper.BoolValue multicast_filter = 127752161 [(.yext.schemapath) = "/ssids/ssid/state/multicast-filter"];
  bool has_multicast_filter() const;
  void clear_multicast_filter();
  static const int kMulticastFilterFieldNumber = 127752161;
  const ::ywrapper::BoolValue& multicast_filter() const;
  ::ywrapper::BoolValue* release_multicast_filter();
  ::ywrapper::BoolValue* mutable_multicast_filter();
  void set_allocated_multicast_filter(::ywrapper::BoolValue* multicast_filter);

  // .ywrapper.UintValue vlan_id = 143277031 [(.yext.schemapath) = "/ssids/ssid/state/vlan-id"];
  bool has_vlan_id() const;
  void clear_vlan_id();
  static const int kVlanIdFieldNumber = 143277031;
  const ::ywrapper::UintValue& vlan_id() const;
  ::ywrapper::UintValue* release_vlan_id();
  ::ywrapper::UintValue* mutable_vlan_id();
  void set_allocated_vlan_id(::ywrapper::UintValue* vlan_id);

  // .ywrapper.BoolValue okc = 150386809 [(.yext.schemapath) = "/ssids/ssid/state/okc"];
  bool has_okc() const;
  void clear_okc();
  static const int kOkcFieldNumber = 150386809;
  const ::ywrapper::BoolValue& okc() const;
  ::ywrapper::BoolValue* release_okc();
  ::ywrapper::BoolValue* mutable_okc();
  void set_allocated_okc(::ywrapper::BoolValue* okc);

  // .ywrapper.BoolValue csa = 151065463 [(.yext.schemapath) = "/ssids/ssid/state/csa"];
  bool has_csa() const;
  void clear_csa();
  static const int kCsaFieldNumber = 151065463;
  const ::ywrapper::BoolValue& csa() const;
  ::ywrapper::BoolValue* release_csa();
  ::ywrapper::BoolValue* mutable_csa();
  void set_allocated_csa(::ywrapper::BoolValue* csa);

  // .ywrapper.BoolValue advertise_apname = 178502058 [(.yext.schemapath) = "/ssids/ssid/state/advertise-apname"];
  bool has_advertise_apname() const;
  void clear_advertise_apname();
  static const int kAdvertiseApnameFieldNumber = 178502058;
  const ::ywrapper::BoolValue& advertise_apname() const;
  ::ywrapper::BoolValue* release_advertise_apname();
  ::ywrapper::BoolValue* mutable_advertise_apname();
  void set_allocated_advertise_apname(::ywrapper::BoolValue* advertise_apname);

  // .ywrapper.BoolValue dva = 201545223 [(.yext.schemapath) = "/ssids/ssid/state/dva"];
  bool has_dva() const;
  void clear_dva();
  static const int kDvaFieldNumber = 201545223;
  const ::ywrapper::BoolValue& dva() const;
  ::ywrapper::BoolValue* release_dva();
  ::ywrapper::BoolValue* mutable_dva();
  void set_allocated_dva(::ywrapper::BoolValue* dva);

  // .ywrapper.BoolValue hidden = 203435396 [(.yext.schemapath) = "/ssids/ssid/state/hidden"];
  bool has_hidden() const;
  void clear_hidden();
  static const int kHiddenFieldNumber = 203435396;
  const ::ywrapper::BoolValue& hidden() const;
  ::ywrapper::BoolValue* release_hidden();
  ::ywrapper::BoolValue* mutable_hidden();
  void set_allocated_hidden(::ywrapper::BoolValue* hidden);

  // .ywrapper.StringValue bssid = 288958859 [(.yext.schemapath) = "/ssids/ssid/state/bssid"];
  bool has_bssid() const;
  void clear_bssid();
  static const int kBssidFieldNumber = 288958859;
  const ::ywrapper::StringValue& bssid() const;
  ::ywrapper::StringValue* release_bssid();
  ::ywrapper::StringValue* mutable_bssid();
  void set_allocated_bssid(::ywrapper::StringValue* bssid);

  // .ywrapper.BoolValue enabled = 293398579 [(.yext.schemapath) = "/ssids/ssid/state/enabled"];
  bool has_enabled() const;
  void clear_enabled();
  static const int kEnabledFieldNumber = 293398579;
  const ::ywrapper::BoolValue& enabled() const;
  ::ywrapper::BoolValue* release_enabled();
  ::ywrapper::BoolValue* mutable_enabled();
  void set_allocated_enabled(::ywrapper::BoolValue* enabled);

  // .ywrapper.UintValue bss_channel_utilization = 306927973 [(.yext.schemapath) = "/ssids/ssid/state/bss-channel-utilization"];
  bool has_bss_channel_utilization() const;
  void clear_bss_channel_utilization();
  static const int kBssChannelUtilizationFieldNumber = 306927973;
  const ::ywrapper::UintValue& bss_channel_utilization() const;
  ::ywrapper::UintValue* release_bss_channel_utilization();
  ::ywrapper::UintValue* mutable_bss_channel_utilization();
  void set_allocated_bss_channel_utilization(::ywrapper::UintValue* bss_channel_utilization);

  // .ywrapper.StringValue mobility_domain = 335299980 [(.yext.schemapath) = "/ssids/ssid/state/mobility-domain"];
  bool has_mobility_domain() const;
  void clear_mobility_domain();
  static const int kMobilityDomainFieldNumber = 335299980;
  const ::ywrapper::StringValue& mobility_domain() const;
  ::ywrapper::StringValue* release_mobility_domain();
  ::ywrapper::StringValue* mutable_mobility_domain();
  void set_allocated_mobility_domain(::ywrapper::StringValue* mobility_domain);

  // .ywrapper.BoolValue ipv6_ndp_filter = 340044189 [(.yext.schemapath) = "/ssids/ssid/state/ipv6-ndp-filter"];
  bool has_ipv6_ndp_filter() const;
  void clear_ipv6_ndp_filter();
  static const int kIpv6NdpFilterFieldNumber = 340044189;
  const ::ywrapper::BoolValue& ipv6_ndp_filter() const;
  ::ywrapper::BoolValue* release_ipv6_ndp_filter();
  ::ywrapper::BoolValue* mutable_ipv6_ndp_filter();
  void set_allocated_ipv6_ndp_filter(::ywrapper::BoolValue* ipv6_ndp_filter);

  // .ywrapper.StringValue wpa2_psk = 346103257 [(.yext.schemapath) = "/ssids/ssid/state/wpa2-psk"];
  bool has_wpa2_psk() const;
  void clear_wpa2_psk();
  static const int kWpa2PskFieldNumber = 346103257;
  const ::ywrapper::StringValue& wpa2_psk() const;
  ::ywrapper::StringValue* release_wpa2_psk();
  ::ywrapper::StringValue* mutable_wpa2_psk();
  void set_allocated_wpa2_psk(::ywrapper::StringValue* wpa2_psk);

  // .ywrapper.UintValue ptk_timeout = 396952177 [(.yext.schemapath) = "/ssids/ssid/state/ptk-timeout"];
  bool has_ptk_timeout() const;
  void clear_ptk_timeout();
  static const int kPtkTimeoutFieldNumber = 396952177;
  const ::ywrapper::UintValue& ptk_timeout() const;
  ::ywrapper::UintValue* release_ptk_timeout();
  ::ywrapper::UintValue* mutable_ptk_timeout();
  void set_allocated_ptk_timeout(::ywrapper::UintValue* ptk_timeout);

  // .ywrapper.BoolValue dot11k = 442431610 [(.yext.schemapath) = "/ssids/ssid/state/dot11k"];
  bool has_dot11k() const;
  void clear_dot11k();
  static const int kDot11KFieldNumber = 442431610;
  const ::ywrapper::BoolValue& dot11k() const;
  ::ywrapper::BoolValue* release_dot11k();
  ::ywrapper::BoolValue* mutable_dot11k();
  void set_allocated_dot11k(::ywrapper::BoolValue* dot11k);

  // .ywrapper.UintValue rx_bss_dot11_channel_utilization = 447270500 [(.yext.schemapath) = "/ssids/ssid/state/rx-bss-dot11-channel-utilization"];
  bool has_rx_bss_dot11_channel_utilization() const;
  void clear_rx_bss_dot11_channel_utilization();
  static const int kRxBssDot11ChannelUtilizationFieldNumber = 447270500;
  const ::ywrapper::UintValue& rx_bss_dot11_channel_utilization() const;
  ::ywrapper::UintValue* release_rx_bss_dot11_channel_utilization();
  ::ywrapper::UintValue* mutable_rx_bss_dot11_channel_utilization();
  void set_allocated_rx_bss_dot11_channel_utilization(::ywrapper::UintValue* rx_bss_dot11_channel_utilization);

  // .ywrapper.UintValue gtk_timeout = 448160766 [(.yext.schemapath) = "/ssids/ssid/state/gtk-timeout"];
  bool has_gtk_timeout() const;
  void clear_gtk_timeout();
  static const int kGtkTimeoutFieldNumber = 448160766;
  const ::ywrapper::UintValue& gtk_timeout() const;
  ::ywrapper::UintValue* release_gtk_timeout();
  ::ywrapper::UintValue* mutable_gtk_timeout();
  void set_allocated_gtk_timeout(::ywrapper::UintValue* gtk_timeout);

  // .ywrapper.BoolValue dhcp_required = 462568869 [(.yext.schemapath) = "/ssids/ssid/state/dhcp-required"];
  bool has_dhcp_required() const;
  void clear_dhcp_required();
  static const int kDhcpRequiredFieldNumber = 462568869;
  const ::ywrapper::BoolValue& dhcp_required() const;
  ::ywrapper::BoolValue* release_dhcp_required();
  ::ywrapper::BoolValue* mutable_dhcp_required();
  void set_allocated_dhcp_required(::ywrapper::BoolValue* dhcp_required);

  // .ywrapper.StringValue server_group = 473876655 [(.yext.schemapath) = "/ssids/ssid/state/server-group"];
  bool has_server_group() const;
  void clear_server_group();
  static const int kServerGroupFieldNumber = 473876655;
  const ::ywrapper::StringValue& server_group() const;
  ::ywrapper::StringValue* release_server_group();
  ::ywrapper::StringValue* mutable_server_group();
  void set_allocated_server_group(::ywrapper::StringValue* server_group);

  // .ywrapper.BoolValue broadcast_filter = 476264332 [(.yext.schemapath) = "/ssids/ssid/state/broadcast-filter"];
  bool has_broadcast_filter() const;
  void clear_broadcast_filter();
  static const int kBroadcastFilterFieldNumber = 476264332;
  const ::ywrapper::BoolValue& broadcast_filter() const;
  ::ywrapper::BoolValue* release_broadcast_filter();
  ::ywrapper::BoolValue* mutable_broadcast_filter();
  void set_allocated_broadcast_filter(::ywrapper::BoolValue* broadcast_filter);

  // .ywrapper.UintValue ipv6_ndp_filter_timer = 490045669 [(.yext.schemapath) = "/ssids/ssid/state/ipv6-ndp-filter-timer"];
  bool has_ipv6_ndp_filter_timer() const;
  void clear_ipv6_ndp_filter_timer();
  static const int kIpv6NdpFilterTimerFieldNumber = 490045669;
  const ::ywrapper::UintValue& ipv6_ndp_filter_timer() const;
  ::ywrapper::UintValue* release_ipv6_ndp_filter_timer();
  ::ywrapper::UintValue* mutable_ipv6_ndp_filter_timer();
  void set_allocated_ipv6_ndp_filter_timer(::ywrapper::UintValue* ipv6_ndp_filter_timer);

  // .ywrapper.BoolValue qbss_load = 533380824 [(.yext.schemapath) = "/ssids/ssid/state/qbss-load"];
  bool has_qbss_load() const;
  void clear_qbss_load();
  static const int kQbssLoadFieldNumber = 533380824;
  const ::ywrapper::BoolValue& qbss_load() const;
  ::ywrapper::BoolValue* release_qbss_load();
  ::ywrapper::BoolValue* mutable_qbss_load();
  void set_allocated_qbss_load(::ywrapper::BoolValue* qbss_load);

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.State.Opmode opmode = 69208360 [(.yext.schemapath) = "/ssids/ssid/state/opmode"];
  void clear_opmode();
  static const int kOpmodeFieldNumber = 69208360;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_State_Opmode opmode() const;
  void set_opmode(::openconfig::openconfig_wifi_mac::Ssids_Ssid_State_Opmode value);

  // .openconfig.enums.OpenconfigWifiTypesOPERATINGFREQUENCY operating_frequency = 231498376 [(.yext.schemapath) = "/ssids/ssid/state/operating-frequency"];
  void clear_operating_frequency();
  static const int kOperatingFrequencyFieldNumber = 231498376;
  ::openconfig::enums::OpenconfigWifiTypesOPERATINGFREQUENCY operating_frequency() const;
  void set_operating_frequency(::openconfig::enums::OpenconfigWifiTypesOPERATINGFREQUENCY value);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Ssids.Ssid.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> basic_data_rates_;
  mutable int _basic_data_rates_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> supported_data_rates_;
  mutable int _supported_data_rates_cached_byte_size_;
  ::ywrapper::BoolValue* station_isolation_;
  ::ywrapper::StringValue* name_;
  ::ywrapper::UintValue* tx_bss_dot11_channel_utilization_;
  ::ywrapper::BoolValue* multicast_filter_;
  ::ywrapper::UintValue* vlan_id_;
  ::ywrapper::BoolValue* okc_;
  ::ywrapper::BoolValue* csa_;
  ::ywrapper::BoolValue* advertise_apname_;
  ::ywrapper::BoolValue* dva_;
  ::ywrapper::BoolValue* hidden_;
  ::ywrapper::StringValue* bssid_;
  ::ywrapper::BoolValue* enabled_;
  ::ywrapper::UintValue* bss_channel_utilization_;
  ::ywrapper::StringValue* mobility_domain_;
  ::ywrapper::BoolValue* ipv6_ndp_filter_;
  ::ywrapper::StringValue* wpa2_psk_;
  ::ywrapper::UintValue* ptk_timeout_;
  ::ywrapper::BoolValue* dot11k_;
  ::ywrapper::UintValue* rx_bss_dot11_channel_utilization_;
  ::ywrapper::UintValue* gtk_timeout_;
  ::ywrapper::BoolValue* dhcp_required_;
  ::ywrapper::StringValue* server_group_;
  ::ywrapper::BoolValue* broadcast_filter_;
  ::ywrapper::UintValue* ipv6_ndp_filter_timer_;
  ::ywrapper::BoolValue* qbss_load_;
  int opmode_;
  int operating_frequency_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_StateImpl();
};
// -------------------------------------------------------------------

class Ssids_Ssid_Wmm_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config) */ {
 public:
  Ssids_Ssid_Wmm_Config();
  virtual ~Ssids_Ssid_Wmm_Config();

  Ssids_Ssid_Wmm_Config(const Ssids_Ssid_Wmm_Config& from);

  inline Ssids_Ssid_Wmm_Config& operator=(const Ssids_Ssid_Wmm_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ssids_Ssid_Wmm_Config(Ssids_Ssid_Wmm_Config&& from) noexcept
    : Ssids_Ssid_Wmm_Config() {
    *this = ::std::move(from);
  }

  inline Ssids_Ssid_Wmm_Config& operator=(Ssids_Ssid_Wmm_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ssids_Ssid_Wmm_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ssids_Ssid_Wmm_Config* internal_default_instance() {
    return reinterpret_cast<const Ssids_Ssid_Wmm_Config*>(
               &_Ssids_Ssid_Wmm_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    38;

  void Swap(Ssids_Ssid_Wmm_Config* other);
  friend void swap(Ssids_Ssid_Wmm_Config& a, Ssids_Ssid_Wmm_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ssids_Ssid_Wmm_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Ssids_Ssid_Wmm_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ssids_Ssid_Wmm_Config& from);
  void MergeFrom(const Ssids_Ssid_Wmm_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ssids_Ssid_Wmm_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ywrapper.UintValue wmm_be_remark = 11867575 [(.yext.schemapath) = "/ssids/ssid/wmm/config/wmm-be-remark"];
  int wmm_be_remark_size() const;
  void clear_wmm_be_remark();
  static const int kWmmBeRemarkFieldNumber = 11867575;
  const ::ywrapper::UintValue& wmm_be_remark(int index) const;
  ::ywrapper::UintValue* mutable_wmm_be_remark(int index);
  ::ywrapper::UintValue* add_wmm_be_remark();
  ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >*
      mutable_wmm_be_remark();
  const ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >&
      wmm_be_remark() const;

  // repeated .ywrapper.UintValue wmm_vo_remark = 81366305 [(.yext.schemapath) = "/ssids/ssid/wmm/config/wmm-vo-remark"];
  int wmm_vo_remark_size() const;
  void clear_wmm_vo_remark();
  static const int kWmmVoRemarkFieldNumber = 81366305;
  const ::ywrapper::UintValue& wmm_vo_remark(int index) const;
  ::ywrapper::UintValue* mutable_wmm_vo_remark(int index);
  ::ywrapper::UintValue* add_wmm_vo_remark();
  ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >*
      mutable_wmm_vo_remark();
  const ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >&
      wmm_vo_remark() const;

  // repeated .ywrapper.UintValue wmm_vi_remark = 411468615 [(.yext.schemapath) = "/ssids/ssid/wmm/config/wmm-vi-remark"];
  int wmm_vi_remark_size() const;
  void clear_wmm_vi_remark();
  static const int kWmmViRemarkFieldNumber = 411468615;
  const ::ywrapper::UintValue& wmm_vi_remark(int index) const;
  ::ywrapper::UintValue* mutable_wmm_vi_remark(int index);
  ::ywrapper::UintValue* add_wmm_vi_remark();
  ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >*
      mutable_wmm_vi_remark();
  const ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >&
      wmm_vi_remark() const;

  // repeated .ywrapper.UintValue wmm_bk_remark = 460642569 [(.yext.schemapath) = "/ssids/ssid/wmm/config/wmm-bk-remark"];
  int wmm_bk_remark_size() const;
  void clear_wmm_bk_remark();
  static const int kWmmBkRemarkFieldNumber = 460642569;
  const ::ywrapper::UintValue& wmm_bk_remark(int index) const;
  ::ywrapper::UintValue* mutable_wmm_bk_remark(int index);
  ::ywrapper::UintValue* add_wmm_bk_remark();
  ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >*
      mutable_wmm_bk_remark();
  const ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >&
      wmm_bk_remark() const;

  // .ywrapper.BoolValue trust_dscp = 177104862 [(.yext.schemapath) = "/ssids/ssid/wmm/config/trust-dscp"];
  bool has_trust_dscp() const;
  void clear_trust_dscp();
  static const int kTrustDscpFieldNumber = 177104862;
  const ::ywrapper::BoolValue& trust_dscp() const;
  ::ywrapper::BoolValue* release_trust_dscp();
  ::ywrapper::BoolValue* mutable_trust_dscp();
  void set_allocated_trust_dscp(::ywrapper::BoolValue* trust_dscp);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue > wmm_be_remark_;
  ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue > wmm_vo_remark_;
  ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue > wmm_vi_remark_;
  ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue > wmm_bk_remark_;
  ::ywrapper::BoolValue* trust_dscp_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Wmm_ConfigImpl();
};
// -------------------------------------------------------------------

class Ssids_Ssid_Wmm_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State) */ {
 public:
  Ssids_Ssid_Wmm_State();
  virtual ~Ssids_Ssid_Wmm_State();

  Ssids_Ssid_Wmm_State(const Ssids_Ssid_Wmm_State& from);

  inline Ssids_Ssid_Wmm_State& operator=(const Ssids_Ssid_Wmm_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ssids_Ssid_Wmm_State(Ssids_Ssid_Wmm_State&& from) noexcept
    : Ssids_Ssid_Wmm_State() {
    *this = ::std::move(from);
  }

  inline Ssids_Ssid_Wmm_State& operator=(Ssids_Ssid_Wmm_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ssids_Ssid_Wmm_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ssids_Ssid_Wmm_State* internal_default_instance() {
    return reinterpret_cast<const Ssids_Ssid_Wmm_State*>(
               &_Ssids_Ssid_Wmm_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    39;

  void Swap(Ssids_Ssid_Wmm_State* other);
  friend void swap(Ssids_Ssid_Wmm_State& a, Ssids_Ssid_Wmm_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ssids_Ssid_Wmm_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Ssids_Ssid_Wmm_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ssids_Ssid_Wmm_State& from);
  void MergeFrom(const Ssids_Ssid_Wmm_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ssids_Ssid_Wmm_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ywrapper.UintValue wmm_be_remark = 12209598 [(.yext.schemapath) = "/ssids/ssid/wmm/state/wmm-be-remark"];
  int wmm_be_remark_size() const;
  void clear_wmm_be_remark();
  static const int kWmmBeRemarkFieldNumber = 12209598;
  const ::ywrapper::UintValue& wmm_be_remark(int index) const;
  ::ywrapper::UintValue* mutable_wmm_be_remark(int index);
  ::ywrapper::UintValue* add_wmm_be_remark();
  ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >*
      mutable_wmm_be_remark();
  const ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >&
      wmm_be_remark() const;

  // repeated .ywrapper.UintValue wmm_bk_remark = 177940556 [(.yext.schemapath) = "/ssids/ssid/wmm/state/wmm-bk-remark"];
  int wmm_bk_remark_size() const;
  void clear_wmm_bk_remark();
  static const int kWmmBkRemarkFieldNumber = 177940556;
  const ::ywrapper::UintValue& wmm_bk_remark(int index) const;
  ::ywrapper::UintValue* mutable_wmm_bk_remark(int index);
  ::ywrapper::UintValue* add_wmm_bk_remark();
  ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >*
      mutable_wmm_bk_remark();
  const ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >&
      wmm_bk_remark() const;

  // repeated .ywrapper.UintValue wmm_vo_remark = 207475684 [(.yext.schemapath) = "/ssids/ssid/wmm/state/wmm-vo-remark"];
  int wmm_vo_remark_size() const;
  void clear_wmm_vo_remark();
  static const int kWmmVoRemarkFieldNumber = 207475684;
  const ::ywrapper::UintValue& wmm_vo_remark(int index) const;
  ::ywrapper::UintValue* mutable_wmm_vo_remark(int index);
  ::ywrapper::UintValue* add_wmm_vo_remark();
  ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >*
      mutable_wmm_vo_remark();
  const ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >&
      wmm_vo_remark() const;

  // repeated .ywrapper.UintValue wmm_vi_remark = 377247662 [(.yext.schemapath) = "/ssids/ssid/wmm/state/wmm-vi-remark"];
  int wmm_vi_remark_size() const;
  void clear_wmm_vi_remark();
  static const int kWmmViRemarkFieldNumber = 377247662;
  const ::ywrapper::UintValue& wmm_vi_remark(int index) const;
  ::ywrapper::UintValue* mutable_wmm_vi_remark(int index);
  ::ywrapper::UintValue* add_wmm_vi_remark();
  ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >*
      mutable_wmm_vi_remark();
  const ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >&
      wmm_vi_remark() const;

  // .ywrapper.BoolValue trust_dscp = 81961833 [(.yext.schemapath) = "/ssids/ssid/wmm/state/trust-dscp"];
  bool has_trust_dscp() const;
  void clear_trust_dscp();
  static const int kTrustDscpFieldNumber = 81961833;
  const ::ywrapper::BoolValue& trust_dscp() const;
  ::ywrapper::BoolValue* release_trust_dscp();
  ::ywrapper::BoolValue* mutable_trust_dscp();
  void set_allocated_trust_dscp(::ywrapper::BoolValue* trust_dscp);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue > wmm_be_remark_;
  ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue > wmm_bk_remark_;
  ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue > wmm_vo_remark_;
  ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue > wmm_vi_remark_;
  ::ywrapper::BoolValue* trust_dscp_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_Wmm_StateImpl();
};
// -------------------------------------------------------------------

class Ssids_Ssid_Wmm : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm) */ {
 public:
  Ssids_Ssid_Wmm();
  virtual ~Ssids_Ssid_Wmm();

  Ssids_Ssid_Wmm(const Ssids_Ssid_Wmm& from);

  inline Ssids_Ssid_Wmm& operator=(const Ssids_Ssid_Wmm& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ssids_Ssid_Wmm(Ssids_Ssid_Wmm&& from) noexcept
    : Ssids_Ssid_Wmm() {
    *this = ::std::move(from);
  }

  inline Ssids_Ssid_Wmm& operator=(Ssids_Ssid_Wmm&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ssids_Ssid_Wmm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ssids_Ssid_Wmm* internal_default_instance() {
    return reinterpret_cast<const Ssids_Ssid_Wmm*>(
               &_Ssids_Ssid_Wmm_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    40;

  void Swap(Ssids_Ssid_Wmm* other);
  friend void swap(Ssids_Ssid_Wmm& a, Ssids_Ssid_Wmm& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ssids_Ssid_Wmm* New() const PROTOBUF_FINAL { return New(NULL); }

  Ssids_Ssid_Wmm* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ssids_Ssid_Wmm& from);
  void MergeFrom(const Ssids_Ssid_Wmm& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ssids_Ssid_Wmm* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Ssids_Ssid_Wmm_Config Config;
  typedef Ssids_Ssid_Wmm_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State state = 157043509 [(.yext.schemapath) = "/ssids/ssid/wmm/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 157043509;
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_State& state() const;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_State* release_state();
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_State* state);

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config config = 163769916 [(.yext.schemapath) = "/ssids/ssid/wmm/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 163769916;
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_Config& config() const;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_Config* release_config();
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_Config* config);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_State* state_;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_Config* config_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_Ssid_WmmImpl();
};
// -------------------------------------------------------------------

class Ssids_Ssid : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Ssids.Ssid) */ {
 public:
  Ssids_Ssid();
  virtual ~Ssids_Ssid();

  Ssids_Ssid(const Ssids_Ssid& from);

  inline Ssids_Ssid& operator=(const Ssids_Ssid& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ssids_Ssid(Ssids_Ssid&& from) noexcept
    : Ssids_Ssid() {
    *this = ::std::move(from);
  }

  inline Ssids_Ssid& operator=(Ssids_Ssid&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ssids_Ssid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ssids_Ssid* internal_default_instance() {
    return reinterpret_cast<const Ssids_Ssid*>(
               &_Ssids_Ssid_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    41;

  void Swap(Ssids_Ssid* other);
  friend void swap(Ssids_Ssid& a, Ssids_Ssid& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ssids_Ssid* New() const PROTOBUF_FINAL { return New(NULL); }

  Ssids_Ssid* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ssids_Ssid& from);
  void MergeFrom(const Ssids_Ssid& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ssids_Ssid* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Ssids_Ssid_BandSteering BandSteering;
  typedef Ssids_Ssid_Clients Clients;
  typedef Ssids_Ssid_Config Config;
  typedef Ssids_Ssid_Dot11R Dot11R;
  typedef Ssids_Ssid_Dot11V Dot11V;
  typedef Ssids_Ssid_Dot1XTimers Dot1XTimers;
  typedef Ssids_Ssid_State State;
  typedef Ssids_Ssid_Wmm Wmm;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers dot1x_timers = 23265631 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers"];
  bool has_dot1x_timers() const;
  void clear_dot1x_timers();
  static const int kDot1XTimersFieldNumber = 23265631;
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers& dot1x_timers() const;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers* release_dot1x_timers();
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers* mutable_dot1x_timers();
  void set_allocated_dot1x_timers(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers* dot1x_timers);

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R dot11r = 123416265 [(.yext.schemapath) = "/ssids/ssid/dot11r"];
  bool has_dot11r() const;
  void clear_dot11r();
  static const int kDot11RFieldNumber = 123416265;
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R& dot11r() const;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R* release_dot11r();
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R* mutable_dot11r();
  void set_allocated_dot11r(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R* dot11r);

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V dot11v = 123416269 [(.yext.schemapath) = "/ssids/ssid/dot11v"];
  bool has_dot11v() const;
  void clear_dot11v();
  static const int kDot11VFieldNumber = 123416269;
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V& dot11v() const;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V* release_dot11v();
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V* mutable_dot11v();
  void set_allocated_dot11v(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V* dot11v);

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients clients = 158986082 [(.yext.schemapath) = "/ssids/ssid/clients"];
  bool has_clients() const;
  void clear_clients();
  static const int kClientsFieldNumber = 158986082;
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients& clients() const;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients* release_clients();
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients* mutable_clients();
  void set_allocated_clients(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients* clients);

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Config config = 175369092 [(.yext.schemapath) = "/ssids/ssid/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 175369092;
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config& config() const;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config* release_config();
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config* config);

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.State state = 247527581 [(.yext.schemapath) = "/ssids/ssid/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 247527581;
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_State& state() const;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_State* release_state();
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_wifi_mac::Ssids_Ssid_State* state);

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm wmm = 470892139 [(.yext.schemapath) = "/ssids/ssid/wmm"];
  bool has_wmm() const;
  void clear_wmm();
  static const int kWmmFieldNumber = 470892139;
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm& wmm() const;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm* release_wmm();
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm* mutable_wmm();
  void set_allocated_wmm(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm* wmm);

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering band_steering = 475616177 [(.yext.schemapath) = "/ssids/ssid/band-steering"];
  bool has_band_steering() const;
  void clear_band_steering();
  static const int kBandSteeringFieldNumber = 475616177;
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering& band_steering() const;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering* release_band_steering();
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering* mutable_band_steering();
  void set_allocated_band_steering(::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering* band_steering);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Ssids.Ssid)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers* dot1x_timers_;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R* dot11r_;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V* dot11v_;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients* clients_;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config* config_;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_State* state_;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm* wmm_;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering* band_steering_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_SsidImpl();
};
// -------------------------------------------------------------------

class Ssids_SsidKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Ssids.SsidKey) */ {
 public:
  Ssids_SsidKey();
  virtual ~Ssids_SsidKey();

  Ssids_SsidKey(const Ssids_SsidKey& from);

  inline Ssids_SsidKey& operator=(const Ssids_SsidKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ssids_SsidKey(Ssids_SsidKey&& from) noexcept
    : Ssids_SsidKey() {
    *this = ::std::move(from);
  }

  inline Ssids_SsidKey& operator=(Ssids_SsidKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ssids_SsidKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ssids_SsidKey* internal_default_instance() {
    return reinterpret_cast<const Ssids_SsidKey*>(
               &_Ssids_SsidKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    42;

  void Swap(Ssids_SsidKey* other);
  friend void swap(Ssids_SsidKey& a, Ssids_SsidKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ssids_SsidKey* New() const PROTOBUF_FINAL { return New(NULL); }

  Ssids_SsidKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ssids_SsidKey& from);
  void MergeFrom(const Ssids_SsidKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ssids_SsidKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1 [(.yext.schemapath) = "/ssids/ssid/name"];
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .openconfig.openconfig_wifi_mac.Ssids.Ssid ssid = 2;
  bool has_ssid() const;
  void clear_ssid();
  static const int kSsidFieldNumber = 2;
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid& ssid() const;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid* release_ssid();
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid* mutable_ssid();
  void set_allocated_ssid(::openconfig::openconfig_wifi_mac::Ssids_Ssid* ssid);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Ssids.SsidKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid* ssid_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsids_SsidKeyImpl();
};
// -------------------------------------------------------------------

class Ssids : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_wifi_mac.Ssids) */ {
 public:
  Ssids();
  virtual ~Ssids();

  Ssids(const Ssids& from);

  inline Ssids& operator=(const Ssids& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ssids(Ssids&& from) noexcept
    : Ssids() {
    *this = ::std::move(from);
  }

  inline Ssids& operator=(Ssids&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ssids& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ssids* internal_default_instance() {
    return reinterpret_cast<const Ssids*>(
               &_Ssids_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    43;

  void Swap(Ssids* other);
  friend void swap(Ssids& a, Ssids& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ssids* New() const PROTOBUF_FINAL { return New(NULL); }

  Ssids* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ssids& from);
  void MergeFrom(const Ssids& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ssids* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Ssids_Ssid Ssid;
  typedef Ssids_SsidKey SsidKey;

  // accessors -------------------------------------------------------

  // repeated .openconfig.openconfig_wifi_mac.Ssids.SsidKey ssid = 442132483 [(.yext.schemapath) = "/ssids/ssid"];
  int ssid_size() const;
  void clear_ssid();
  static const int kSsidFieldNumber = 442132483;
  const ::openconfig::openconfig_wifi_mac::Ssids_SsidKey& ssid(int index) const;
  ::openconfig::openconfig_wifi_mac::Ssids_SsidKey* mutable_ssid(int index);
  ::openconfig::openconfig_wifi_mac::Ssids_SsidKey* add_ssid();
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_wifi_mac::Ssids_SsidKey >*
      mutable_ssid();
  const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_wifi_mac::Ssids_SsidKey >&
      ssid() const;

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_wifi_mac.Ssids)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_wifi_mac::Ssids_SsidKey > ssid_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto::InitDefaultsSsidsImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Bssids_Bssid_State_Counters_RxDataDist

// .ywrapper.UintValue rx_0_64 = 163240557 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-0-64"];
inline bool Bssids_Bssid_State_Counters_RxDataDist::has_rx_0_64() const {
  return this != internal_default_instance() && rx_0_64_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_RxDataDist::rx_0_64() const {
  const ::ywrapper::UintValue* p = rx_0_64_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_0_64)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxDataDist::release_rx_0_64() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_0_64)
  
  ::ywrapper::UintValue* temp = rx_0_64_;
  rx_0_64_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxDataDist::mutable_rx_0_64() {
  
  if (rx_0_64_ == NULL) {
    rx_0_64_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_0_64)
  return rx_0_64_;
}
inline void Bssids_Bssid_State_Counters_RxDataDist::set_allocated_rx_0_64(::ywrapper::UintValue* rx_0_64) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rx_0_64_);
  }
  if (rx_0_64) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rx_0_64 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rx_0_64, submessage_arena);
    }
    
  } else {
    
  }
  rx_0_64_ = rx_0_64;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_0_64)
}

// .ywrapper.UintValue rx_1025_2048 = 319752669 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-1025-2048"];
inline bool Bssids_Bssid_State_Counters_RxDataDist::has_rx_1025_2048() const {
  return this != internal_default_instance() && rx_1025_2048_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_RxDataDist::rx_1025_2048() const {
  const ::ywrapper::UintValue* p = rx_1025_2048_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_1025_2048)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxDataDist::release_rx_1025_2048() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_1025_2048)
  
  ::ywrapper::UintValue* temp = rx_1025_2048_;
  rx_1025_2048_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxDataDist::mutable_rx_1025_2048() {
  
  if (rx_1025_2048_ == NULL) {
    rx_1025_2048_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_1025_2048)
  return rx_1025_2048_;
}
inline void Bssids_Bssid_State_Counters_RxDataDist::set_allocated_rx_1025_2048(::ywrapper::UintValue* rx_1025_2048) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rx_1025_2048_);
  }
  if (rx_1025_2048) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rx_1025_2048 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rx_1025_2048, submessage_arena);
    }
    
  } else {
    
  }
  rx_1025_2048_ = rx_1025_2048;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_1025_2048)
}

// .ywrapper.UintValue rx_129_256 = 481275956 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-129-256"];
inline bool Bssids_Bssid_State_Counters_RxDataDist::has_rx_129_256() const {
  return this != internal_default_instance() && rx_129_256_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_RxDataDist::rx_129_256() const {
  const ::ywrapper::UintValue* p = rx_129_256_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_129_256)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxDataDist::release_rx_129_256() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_129_256)
  
  ::ywrapper::UintValue* temp = rx_129_256_;
  rx_129_256_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxDataDist::mutable_rx_129_256() {
  
  if (rx_129_256_ == NULL) {
    rx_129_256_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_129_256)
  return rx_129_256_;
}
inline void Bssids_Bssid_State_Counters_RxDataDist::set_allocated_rx_129_256(::ywrapper::UintValue* rx_129_256) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rx_129_256_);
  }
  if (rx_129_256) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rx_129_256 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rx_129_256, submessage_arena);
    }
    
  } else {
    
  }
  rx_129_256_ = rx_129_256;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_129_256)
}

// .ywrapper.UintValue rx_131073_262144 = 376738071 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-131073-262144"];
inline bool Bssids_Bssid_State_Counters_RxDataDist::has_rx_131073_262144() const {
  return this != internal_default_instance() && rx_131073_262144_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_RxDataDist::rx_131073_262144() const {
  const ::ywrapper::UintValue* p = rx_131073_262144_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_131073_262144)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxDataDist::release_rx_131073_262144() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_131073_262144)
  
  ::ywrapper::UintValue* temp = rx_131073_262144_;
  rx_131073_262144_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxDataDist::mutable_rx_131073_262144() {
  
  if (rx_131073_262144_ == NULL) {
    rx_131073_262144_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_131073_262144)
  return rx_131073_262144_;
}
inline void Bssids_Bssid_State_Counters_RxDataDist::set_allocated_rx_131073_262144(::ywrapper::UintValue* rx_131073_262144) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rx_131073_262144_);
  }
  if (rx_131073_262144) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rx_131073_262144 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rx_131073_262144, submessage_arena);
    }
    
  } else {
    
  }
  rx_131073_262144_ = rx_131073_262144;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_131073_262144)
}

// .ywrapper.UintValue rx_16385_32768 = 461886212 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-16385-32768"];
inline bool Bssids_Bssid_State_Counters_RxDataDist::has_rx_16385_32768() const {
  return this != internal_default_instance() && rx_16385_32768_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_RxDataDist::rx_16385_32768() const {
  const ::ywrapper::UintValue* p = rx_16385_32768_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_16385_32768)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxDataDist::release_rx_16385_32768() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_16385_32768)
  
  ::ywrapper::UintValue* temp = rx_16385_32768_;
  rx_16385_32768_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxDataDist::mutable_rx_16385_32768() {
  
  if (rx_16385_32768_ == NULL) {
    rx_16385_32768_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_16385_32768)
  return rx_16385_32768_;
}
inline void Bssids_Bssid_State_Counters_RxDataDist::set_allocated_rx_16385_32768(::ywrapper::UintValue* rx_16385_32768) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rx_16385_32768_);
  }
  if (rx_16385_32768) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rx_16385_32768 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rx_16385_32768, submessage_arena);
    }
    
  } else {
    
  }
  rx_16385_32768_ = rx_16385_32768;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_16385_32768)
}

// .ywrapper.UintValue rx_2049_4096 = 263507443 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-2049-4096"];
inline bool Bssids_Bssid_State_Counters_RxDataDist::has_rx_2049_4096() const {
  return this != internal_default_instance() && rx_2049_4096_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_RxDataDist::rx_2049_4096() const {
  const ::ywrapper::UintValue* p = rx_2049_4096_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_2049_4096)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxDataDist::release_rx_2049_4096() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_2049_4096)
  
  ::ywrapper::UintValue* temp = rx_2049_4096_;
  rx_2049_4096_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxDataDist::mutable_rx_2049_4096() {
  
  if (rx_2049_4096_ == NULL) {
    rx_2049_4096_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_2049_4096)
  return rx_2049_4096_;
}
inline void Bssids_Bssid_State_Counters_RxDataDist::set_allocated_rx_2049_4096(::ywrapper::UintValue* rx_2049_4096) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rx_2049_4096_);
  }
  if (rx_2049_4096) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rx_2049_4096 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rx_2049_4096, submessage_arena);
    }
    
  } else {
    
  }
  rx_2049_4096_ = rx_2049_4096;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_2049_4096)
}

// .ywrapper.UintValue rx_257_512 = 274835051 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-257-512"];
inline bool Bssids_Bssid_State_Counters_RxDataDist::has_rx_257_512() const {
  return this != internal_default_instance() && rx_257_512_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_RxDataDist::rx_257_512() const {
  const ::ywrapper::UintValue* p = rx_257_512_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_257_512)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxDataDist::release_rx_257_512() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_257_512)
  
  ::ywrapper::UintValue* temp = rx_257_512_;
  rx_257_512_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxDataDist::mutable_rx_257_512() {
  
  if (rx_257_512_ == NULL) {
    rx_257_512_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_257_512)
  return rx_257_512_;
}
inline void Bssids_Bssid_State_Counters_RxDataDist::set_allocated_rx_257_512(::ywrapper::UintValue* rx_257_512) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rx_257_512_);
  }
  if (rx_257_512) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rx_257_512 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rx_257_512, submessage_arena);
    }
    
  } else {
    
  }
  rx_257_512_ = rx_257_512;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_257_512)
}

// .ywrapper.UintValue rx_262145_524288 = 78039798 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-262145-524288"];
inline bool Bssids_Bssid_State_Counters_RxDataDist::has_rx_262145_524288() const {
  return this != internal_default_instance() && rx_262145_524288_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_RxDataDist::rx_262145_524288() const {
  const ::ywrapper::UintValue* p = rx_262145_524288_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_262145_524288)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxDataDist::release_rx_262145_524288() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_262145_524288)
  
  ::ywrapper::UintValue* temp = rx_262145_524288_;
  rx_262145_524288_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxDataDist::mutable_rx_262145_524288() {
  
  if (rx_262145_524288_ == NULL) {
    rx_262145_524288_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_262145_524288)
  return rx_262145_524288_;
}
inline void Bssids_Bssid_State_Counters_RxDataDist::set_allocated_rx_262145_524288(::ywrapper::UintValue* rx_262145_524288) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rx_262145_524288_);
  }
  if (rx_262145_524288) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rx_262145_524288 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rx_262145_524288, submessage_arena);
    }
    
  } else {
    
  }
  rx_262145_524288_ = rx_262145_524288;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_262145_524288)
}

// .ywrapper.UintValue rx_32769_65536 = 399680219 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-32769-65536"];
inline bool Bssids_Bssid_State_Counters_RxDataDist::has_rx_32769_65536() const {
  return this != internal_default_instance() && rx_32769_65536_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_RxDataDist::rx_32769_65536() const {
  const ::ywrapper::UintValue* p = rx_32769_65536_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_32769_65536)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxDataDist::release_rx_32769_65536() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_32769_65536)
  
  ::ywrapper::UintValue* temp = rx_32769_65536_;
  rx_32769_65536_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxDataDist::mutable_rx_32769_65536() {
  
  if (rx_32769_65536_ == NULL) {
    rx_32769_65536_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_32769_65536)
  return rx_32769_65536_;
}
inline void Bssids_Bssid_State_Counters_RxDataDist::set_allocated_rx_32769_65536(::ywrapper::UintValue* rx_32769_65536) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rx_32769_65536_);
  }
  if (rx_32769_65536) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rx_32769_65536 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rx_32769_65536, submessage_arena);
    }
    
  } else {
    
  }
  rx_32769_65536_ = rx_32769_65536;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_32769_65536)
}

// .ywrapper.UintValue rx_4097_8192 = 212656659 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-4097-8192"];
inline bool Bssids_Bssid_State_Counters_RxDataDist::has_rx_4097_8192() const {
  return this != internal_default_instance() && rx_4097_8192_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_RxDataDist::rx_4097_8192() const {
  const ::ywrapper::UintValue* p = rx_4097_8192_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_4097_8192)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxDataDist::release_rx_4097_8192() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_4097_8192)
  
  ::ywrapper::UintValue* temp = rx_4097_8192_;
  rx_4097_8192_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxDataDist::mutable_rx_4097_8192() {
  
  if (rx_4097_8192_ == NULL) {
    rx_4097_8192_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_4097_8192)
  return rx_4097_8192_;
}
inline void Bssids_Bssid_State_Counters_RxDataDist::set_allocated_rx_4097_8192(::ywrapper::UintValue* rx_4097_8192) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rx_4097_8192_);
  }
  if (rx_4097_8192) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rx_4097_8192 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rx_4097_8192, submessage_arena);
    }
    
  } else {
    
  }
  rx_4097_8192_ = rx_4097_8192;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_4097_8192)
}

// .ywrapper.UintValue rx_513_1024 = 171543073 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-513-1024"];
inline bool Bssids_Bssid_State_Counters_RxDataDist::has_rx_513_1024() const {
  return this != internal_default_instance() && rx_513_1024_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_RxDataDist::rx_513_1024() const {
  const ::ywrapper::UintValue* p = rx_513_1024_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_513_1024)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxDataDist::release_rx_513_1024() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_513_1024)
  
  ::ywrapper::UintValue* temp = rx_513_1024_;
  rx_513_1024_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxDataDist::mutable_rx_513_1024() {
  
  if (rx_513_1024_ == NULL) {
    rx_513_1024_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_513_1024)
  return rx_513_1024_;
}
inline void Bssids_Bssid_State_Counters_RxDataDist::set_allocated_rx_513_1024(::ywrapper::UintValue* rx_513_1024) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rx_513_1024_);
  }
  if (rx_513_1024) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rx_513_1024 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rx_513_1024, submessage_arena);
    }
    
  } else {
    
  }
  rx_513_1024_ = rx_513_1024;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_513_1024)
}

// .ywrapper.UintValue rx_524289_1048576 = 103930652 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-524289-1048576"];
inline bool Bssids_Bssid_State_Counters_RxDataDist::has_rx_524289_1048576() const {
  return this != internal_default_instance() && rx_524289_1048576_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_RxDataDist::rx_524289_1048576() const {
  const ::ywrapper::UintValue* p = rx_524289_1048576_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_524289_1048576)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxDataDist::release_rx_524289_1048576() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_524289_1048576)
  
  ::ywrapper::UintValue* temp = rx_524289_1048576_;
  rx_524289_1048576_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxDataDist::mutable_rx_524289_1048576() {
  
  if (rx_524289_1048576_ == NULL) {
    rx_524289_1048576_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_524289_1048576)
  return rx_524289_1048576_;
}
inline void Bssids_Bssid_State_Counters_RxDataDist::set_allocated_rx_524289_1048576(::ywrapper::UintValue* rx_524289_1048576) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rx_524289_1048576_);
  }
  if (rx_524289_1048576) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rx_524289_1048576 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rx_524289_1048576, submessage_arena);
    }
    
  } else {
    
  }
  rx_524289_1048576_ = rx_524289_1048576;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_524289_1048576)
}

// .ywrapper.UintValue rx_65_128 = 207221893 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-65-128"];
inline bool Bssids_Bssid_State_Counters_RxDataDist::has_rx_65_128() const {
  return this != internal_default_instance() && rx_65_128_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_RxDataDist::rx_65_128() const {
  const ::ywrapper::UintValue* p = rx_65_128_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_65_128)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxDataDist::release_rx_65_128() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_65_128)
  
  ::ywrapper::UintValue* temp = rx_65_128_;
  rx_65_128_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxDataDist::mutable_rx_65_128() {
  
  if (rx_65_128_ == NULL) {
    rx_65_128_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_65_128)
  return rx_65_128_;
}
inline void Bssids_Bssid_State_Counters_RxDataDist::set_allocated_rx_65_128(::ywrapper::UintValue* rx_65_128) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rx_65_128_);
  }
  if (rx_65_128) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rx_65_128 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rx_65_128, submessage_arena);
    }
    
  } else {
    
  }
  rx_65_128_ = rx_65_128;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_65_128)
}

// .ywrapper.UintValue rx_65537_131072 = 177561669 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-65537-131072"];
inline bool Bssids_Bssid_State_Counters_RxDataDist::has_rx_65537_131072() const {
  return this != internal_default_instance() && rx_65537_131072_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_RxDataDist::rx_65537_131072() const {
  const ::ywrapper::UintValue* p = rx_65537_131072_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_65537_131072)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxDataDist::release_rx_65537_131072() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_65537_131072)
  
  ::ywrapper::UintValue* temp = rx_65537_131072_;
  rx_65537_131072_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxDataDist::mutable_rx_65537_131072() {
  
  if (rx_65537_131072_ == NULL) {
    rx_65537_131072_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_65537_131072)
  return rx_65537_131072_;
}
inline void Bssids_Bssid_State_Counters_RxDataDist::set_allocated_rx_65537_131072(::ywrapper::UintValue* rx_65537_131072) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rx_65537_131072_);
  }
  if (rx_65537_131072) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rx_65537_131072 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rx_65537_131072, submessage_arena);
    }
    
  } else {
    
  }
  rx_65537_131072_ = rx_65537_131072;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_65537_131072)
}

// .ywrapper.UintValue rx_8193_16384 = 337500764 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist/rx-8193-16384"];
inline bool Bssids_Bssid_State_Counters_RxDataDist::has_rx_8193_16384() const {
  return this != internal_default_instance() && rx_8193_16384_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_RxDataDist::rx_8193_16384() const {
  const ::ywrapper::UintValue* p = rx_8193_16384_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_8193_16384)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxDataDist::release_rx_8193_16384() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_8193_16384)
  
  ::ywrapper::UintValue* temp = rx_8193_16384_;
  rx_8193_16384_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxDataDist::mutable_rx_8193_16384() {
  
  if (rx_8193_16384_ == NULL) {
    rx_8193_16384_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_8193_16384)
  return rx_8193_16384_;
}
inline void Bssids_Bssid_State_Counters_RxDataDist::set_allocated_rx_8193_16384(::ywrapper::UintValue* rx_8193_16384) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rx_8193_16384_);
  }
  if (rx_8193_16384) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rx_8193_16384 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rx_8193_16384, submessage_arena);
    }
    
  } else {
    
  }
  rx_8193_16384_ = rx_8193_16384;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist.rx_8193_16384)
}

// -------------------------------------------------------------------

// Bssids_Bssid_State_Counters_RxDataWmm

// .ywrapper.UintValue be = 147126139 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-wmm/be"];
inline bool Bssids_Bssid_State_Counters_RxDataWmm::has_be() const {
  return this != internal_default_instance() && be_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_RxDataWmm::be() const {
  const ::ywrapper::UintValue* p = be_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm.be)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxDataWmm::release_be() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm.be)
  
  ::ywrapper::UintValue* temp = be_;
  be_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxDataWmm::mutable_be() {
  
  if (be_ == NULL) {
    be_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm.be)
  return be_;
}
inline void Bssids_Bssid_State_Counters_RxDataWmm::set_allocated_be(::ywrapper::UintValue* be) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(be_);
  }
  if (be) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      be = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, be, submessage_arena);
    }
    
  } else {
    
  }
  be_ = be;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm.be)
}

// .ywrapper.UintValue bk = 147126133 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-wmm/bk"];
inline bool Bssids_Bssid_State_Counters_RxDataWmm::has_bk() const {
  return this != internal_default_instance() && bk_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_RxDataWmm::bk() const {
  const ::ywrapper::UintValue* p = bk_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm.bk)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxDataWmm::release_bk() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm.bk)
  
  ::ywrapper::UintValue* temp = bk_;
  bk_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxDataWmm::mutable_bk() {
  
  if (bk_ == NULL) {
    bk_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm.bk)
  return bk_;
}
inline void Bssids_Bssid_State_Counters_RxDataWmm::set_allocated_bk(::ywrapper::UintValue* bk) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(bk_);
  }
  if (bk) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bk = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bk, submessage_arena);
    }
    
  } else {
    
  }
  bk_ = bk;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm.bk)
}

// .ywrapper.UintValue vi = 482678515 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-wmm/vi"];
inline bool Bssids_Bssid_State_Counters_RxDataWmm::has_vi() const {
  return this != internal_default_instance() && vi_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_RxDataWmm::vi() const {
  const ::ywrapper::UintValue* p = vi_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm.vi)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxDataWmm::release_vi() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm.vi)
  
  ::ywrapper::UintValue* temp = vi_;
  vi_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxDataWmm::mutable_vi() {
  
  if (vi_ == NULL) {
    vi_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm.vi)
  return vi_;
}
inline void Bssids_Bssid_State_Counters_RxDataWmm::set_allocated_vi(::ywrapper::UintValue* vi) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(vi_);
  }
  if (vi) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vi = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vi, submessage_arena);
    }
    
  } else {
    
  }
  vi_ = vi;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm.vi)
}

// .ywrapper.UintValue vo = 482678517 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-wmm/vo"];
inline bool Bssids_Bssid_State_Counters_RxDataWmm::has_vo() const {
  return this != internal_default_instance() && vo_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_RxDataWmm::vo() const {
  const ::ywrapper::UintValue* p = vo_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm.vo)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxDataWmm::release_vo() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm.vo)
  
  ::ywrapper::UintValue* temp = vo_;
  vo_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxDataWmm::mutable_vo() {
  
  if (vo_ == NULL) {
    vo_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm.vo)
  return vo_;
}
inline void Bssids_Bssid_State_Counters_RxDataWmm::set_allocated_vo(::ywrapper::UintValue* vo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(vo_);
  }
  if (vo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vo, submessage_arena);
    }
    
  } else {
    
  }
  vo_ = vo;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm.vo)
}

// -------------------------------------------------------------------

// Bssids_Bssid_State_Counters_RxMcs

// .ywrapper.UintValue mcs0 = 360817472 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs0"];
inline bool Bssids_Bssid_State_Counters_RxMcs::has_mcs0() const {
  return this != internal_default_instance() && mcs0_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_RxMcs::mcs0() const {
  const ::ywrapper::UintValue* p = mcs0_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs.mcs0)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxMcs::release_mcs0() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs.mcs0)
  
  ::ywrapper::UintValue* temp = mcs0_;
  mcs0_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxMcs::mutable_mcs0() {
  
  if (mcs0_ == NULL) {
    mcs0_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs.mcs0)
  return mcs0_;
}
inline void Bssids_Bssid_State_Counters_RxMcs::set_allocated_mcs0(::ywrapper::UintValue* mcs0) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mcs0_);
  }
  if (mcs0) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mcs0 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mcs0, submessage_arena);
    }
    
  } else {
    
  }
  mcs0_ = mcs0;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs.mcs0)
}

// .ywrapper.UintValue mcs1 = 360817473 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs1"];
inline bool Bssids_Bssid_State_Counters_RxMcs::has_mcs1() const {
  return this != internal_default_instance() && mcs1_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_RxMcs::mcs1() const {
  const ::ywrapper::UintValue* p = mcs1_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs.mcs1)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxMcs::release_mcs1() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs.mcs1)
  
  ::ywrapper::UintValue* temp = mcs1_;
  mcs1_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxMcs::mutable_mcs1() {
  
  if (mcs1_ == NULL) {
    mcs1_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs.mcs1)
  return mcs1_;
}
inline void Bssids_Bssid_State_Counters_RxMcs::set_allocated_mcs1(::ywrapper::UintValue* mcs1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mcs1_);
  }
  if (mcs1) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mcs1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mcs1, submessage_arena);
    }
    
  } else {
    
  }
  mcs1_ = mcs1;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs.mcs1)
}

// .ywrapper.UintValue mcs2 = 360817474 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs2"];
inline bool Bssids_Bssid_State_Counters_RxMcs::has_mcs2() const {
  return this != internal_default_instance() && mcs2_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_RxMcs::mcs2() const {
  const ::ywrapper::UintValue* p = mcs2_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs.mcs2)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxMcs::release_mcs2() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs.mcs2)
  
  ::ywrapper::UintValue* temp = mcs2_;
  mcs2_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxMcs::mutable_mcs2() {
  
  if (mcs2_ == NULL) {
    mcs2_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs.mcs2)
  return mcs2_;
}
inline void Bssids_Bssid_State_Counters_RxMcs::set_allocated_mcs2(::ywrapper::UintValue* mcs2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mcs2_);
  }
  if (mcs2) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mcs2 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mcs2, submessage_arena);
    }
    
  } else {
    
  }
  mcs2_ = mcs2;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs.mcs2)
}

// .ywrapper.UintValue mcs3 = 360817475 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs3"];
inline bool Bssids_Bssid_State_Counters_RxMcs::has_mcs3() const {
  return this != internal_default_instance() && mcs3_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_RxMcs::mcs3() const {
  const ::ywrapper::UintValue* p = mcs3_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs.mcs3)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxMcs::release_mcs3() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs.mcs3)
  
  ::ywrapper::UintValue* temp = mcs3_;
  mcs3_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxMcs::mutable_mcs3() {
  
  if (mcs3_ == NULL) {
    mcs3_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs.mcs3)
  return mcs3_;
}
inline void Bssids_Bssid_State_Counters_RxMcs::set_allocated_mcs3(::ywrapper::UintValue* mcs3) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mcs3_);
  }
  if (mcs3) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mcs3 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mcs3, submessage_arena);
    }
    
  } else {
    
  }
  mcs3_ = mcs3;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs.mcs3)
}

// .ywrapper.UintValue mcs4 = 360817476 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs4"];
inline bool Bssids_Bssid_State_Counters_RxMcs::has_mcs4() const {
  return this != internal_default_instance() && mcs4_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_RxMcs::mcs4() const {
  const ::ywrapper::UintValue* p = mcs4_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs.mcs4)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxMcs::release_mcs4() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs.mcs4)
  
  ::ywrapper::UintValue* temp = mcs4_;
  mcs4_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxMcs::mutable_mcs4() {
  
  if (mcs4_ == NULL) {
    mcs4_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs.mcs4)
  return mcs4_;
}
inline void Bssids_Bssid_State_Counters_RxMcs::set_allocated_mcs4(::ywrapper::UintValue* mcs4) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mcs4_);
  }
  if (mcs4) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mcs4 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mcs4, submessage_arena);
    }
    
  } else {
    
  }
  mcs4_ = mcs4;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs.mcs4)
}

// .ywrapper.UintValue mcs5 = 360817477 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs5"];
inline bool Bssids_Bssid_State_Counters_RxMcs::has_mcs5() const {
  return this != internal_default_instance() && mcs5_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_RxMcs::mcs5() const {
  const ::ywrapper::UintValue* p = mcs5_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs.mcs5)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxMcs::release_mcs5() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs.mcs5)
  
  ::ywrapper::UintValue* temp = mcs5_;
  mcs5_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxMcs::mutable_mcs5() {
  
  if (mcs5_ == NULL) {
    mcs5_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs.mcs5)
  return mcs5_;
}
inline void Bssids_Bssid_State_Counters_RxMcs::set_allocated_mcs5(::ywrapper::UintValue* mcs5) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mcs5_);
  }
  if (mcs5) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mcs5 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mcs5, submessage_arena);
    }
    
  } else {
    
  }
  mcs5_ = mcs5;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs.mcs5)
}

// .ywrapper.UintValue mcs6 = 360817478 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs6"];
inline bool Bssids_Bssid_State_Counters_RxMcs::has_mcs6() const {
  return this != internal_default_instance() && mcs6_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_RxMcs::mcs6() const {
  const ::ywrapper::UintValue* p = mcs6_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs.mcs6)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxMcs::release_mcs6() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs.mcs6)
  
  ::ywrapper::UintValue* temp = mcs6_;
  mcs6_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxMcs::mutable_mcs6() {
  
  if (mcs6_ == NULL) {
    mcs6_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs.mcs6)
  return mcs6_;
}
inline void Bssids_Bssid_State_Counters_RxMcs::set_allocated_mcs6(::ywrapper::UintValue* mcs6) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mcs6_);
  }
  if (mcs6) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mcs6 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mcs6, submessage_arena);
    }
    
  } else {
    
  }
  mcs6_ = mcs6;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs.mcs6)
}

// .ywrapper.UintValue mcs7 = 360817479 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs7"];
inline bool Bssids_Bssid_State_Counters_RxMcs::has_mcs7() const {
  return this != internal_default_instance() && mcs7_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_RxMcs::mcs7() const {
  const ::ywrapper::UintValue* p = mcs7_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs.mcs7)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxMcs::release_mcs7() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs.mcs7)
  
  ::ywrapper::UintValue* temp = mcs7_;
  mcs7_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxMcs::mutable_mcs7() {
  
  if (mcs7_ == NULL) {
    mcs7_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs.mcs7)
  return mcs7_;
}
inline void Bssids_Bssid_State_Counters_RxMcs::set_allocated_mcs7(::ywrapper::UintValue* mcs7) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mcs7_);
  }
  if (mcs7) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mcs7 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mcs7, submessage_arena);
    }
    
  } else {
    
  }
  mcs7_ = mcs7;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs.mcs7)
}

// .ywrapper.UintValue mcs8 = 360817480 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs8"];
inline bool Bssids_Bssid_State_Counters_RxMcs::has_mcs8() const {
  return this != internal_default_instance() && mcs8_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_RxMcs::mcs8() const {
  const ::ywrapper::UintValue* p = mcs8_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs.mcs8)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxMcs::release_mcs8() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs.mcs8)
  
  ::ywrapper::UintValue* temp = mcs8_;
  mcs8_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxMcs::mutable_mcs8() {
  
  if (mcs8_ == NULL) {
    mcs8_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs.mcs8)
  return mcs8_;
}
inline void Bssids_Bssid_State_Counters_RxMcs::set_allocated_mcs8(::ywrapper::UintValue* mcs8) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mcs8_);
  }
  if (mcs8) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mcs8 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mcs8, submessage_arena);
    }
    
  } else {
    
  }
  mcs8_ = mcs8;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs.mcs8)
}

// .ywrapper.UintValue mcs9 = 360817481 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs/mcs9"];
inline bool Bssids_Bssid_State_Counters_RxMcs::has_mcs9() const {
  return this != internal_default_instance() && mcs9_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_RxMcs::mcs9() const {
  const ::ywrapper::UintValue* p = mcs9_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs.mcs9)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxMcs::release_mcs9() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs.mcs9)
  
  ::ywrapper::UintValue* temp = mcs9_;
  mcs9_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_RxMcs::mutable_mcs9() {
  
  if (mcs9_ == NULL) {
    mcs9_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs.mcs9)
  return mcs9_;
}
inline void Bssids_Bssid_State_Counters_RxMcs::set_allocated_mcs9(::ywrapper::UintValue* mcs9) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mcs9_);
  }
  if (mcs9) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mcs9 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mcs9, submessage_arena);
    }
    
  } else {
    
  }
  mcs9_ = mcs9;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs.mcs9)
}

// -------------------------------------------------------------------

// Bssids_Bssid_State_Counters_TxDataDist

// .ywrapper.UintValue tx_0_64 = 88126549 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-0-64"];
inline bool Bssids_Bssid_State_Counters_TxDataDist::has_tx_0_64() const {
  return this != internal_default_instance() && tx_0_64_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_TxDataDist::tx_0_64() const {
  const ::ywrapper::UintValue* p = tx_0_64_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_0_64)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxDataDist::release_tx_0_64() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_0_64)
  
  ::ywrapper::UintValue* temp = tx_0_64_;
  tx_0_64_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxDataDist::mutable_tx_0_64() {
  
  if (tx_0_64_ == NULL) {
    tx_0_64_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_0_64)
  return tx_0_64_;
}
inline void Bssids_Bssid_State_Counters_TxDataDist::set_allocated_tx_0_64(::ywrapper::UintValue* tx_0_64) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(tx_0_64_);
  }
  if (tx_0_64) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tx_0_64 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx_0_64, submessage_arena);
    }
    
  } else {
    
  }
  tx_0_64_ = tx_0_64;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_0_64)
}

// .ywrapper.UintValue tx_1025_2048 = 196667525 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-1025-2048"];
inline bool Bssids_Bssid_State_Counters_TxDataDist::has_tx_1025_2048() const {
  return this != internal_default_instance() && tx_1025_2048_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_TxDataDist::tx_1025_2048() const {
  const ::ywrapper::UintValue* p = tx_1025_2048_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_1025_2048)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxDataDist::release_tx_1025_2048() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_1025_2048)
  
  ::ywrapper::UintValue* temp = tx_1025_2048_;
  tx_1025_2048_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxDataDist::mutable_tx_1025_2048() {
  
  if (tx_1025_2048_ == NULL) {
    tx_1025_2048_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_1025_2048)
  return tx_1025_2048_;
}
inline void Bssids_Bssid_State_Counters_TxDataDist::set_allocated_tx_1025_2048(::ywrapper::UintValue* tx_1025_2048) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(tx_1025_2048_);
  }
  if (tx_1025_2048) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tx_1025_2048 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx_1025_2048, submessage_arena);
    }
    
  } else {
    
  }
  tx_1025_2048_ = tx_1025_2048;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_1025_2048)
}

// .ywrapper.UintValue tx_129_256 = 125235836 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-129-256"];
inline bool Bssids_Bssid_State_Counters_TxDataDist::has_tx_129_256() const {
  return this != internal_default_instance() && tx_129_256_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_TxDataDist::tx_129_256() const {
  const ::ywrapper::UintValue* p = tx_129_256_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_129_256)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxDataDist::release_tx_129_256() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_129_256)
  
  ::ywrapper::UintValue* temp = tx_129_256_;
  tx_129_256_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxDataDist::mutable_tx_129_256() {
  
  if (tx_129_256_ == NULL) {
    tx_129_256_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_129_256)
  return tx_129_256_;
}
inline void Bssids_Bssid_State_Counters_TxDataDist::set_allocated_tx_129_256(::ywrapper::UintValue* tx_129_256) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(tx_129_256_);
  }
  if (tx_129_256) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tx_129_256 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx_129_256, submessage_arena);
    }
    
  } else {
    
  }
  tx_129_256_ = tx_129_256;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_129_256)
}

// .ywrapper.UintValue tx_131073_262144 = 335307663 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-131073-262144"];
inline bool Bssids_Bssid_State_Counters_TxDataDist::has_tx_131073_262144() const {
  return this != internal_default_instance() && tx_131073_262144_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_TxDataDist::tx_131073_262144() const {
  const ::ywrapper::UintValue* p = tx_131073_262144_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_131073_262144)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxDataDist::release_tx_131073_262144() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_131073_262144)
  
  ::ywrapper::UintValue* temp = tx_131073_262144_;
  tx_131073_262144_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxDataDist::mutable_tx_131073_262144() {
  
  if (tx_131073_262144_ == NULL) {
    tx_131073_262144_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_131073_262144)
  return tx_131073_262144_;
}
inline void Bssids_Bssid_State_Counters_TxDataDist::set_allocated_tx_131073_262144(::ywrapper::UintValue* tx_131073_262144) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(tx_131073_262144_);
  }
  if (tx_131073_262144) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tx_131073_262144 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx_131073_262144, submessage_arena);
    }
    
  } else {
    
  }
  tx_131073_262144_ = tx_131073_262144;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_131073_262144)
}

// .ywrapper.UintValue tx_16385_32768 = 519209788 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-16385-32768"];
inline bool Bssids_Bssid_State_Counters_TxDataDist::has_tx_16385_32768() const {
  return this != internal_default_instance() && tx_16385_32768_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_TxDataDist::tx_16385_32768() const {
  const ::ywrapper::UintValue* p = tx_16385_32768_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_16385_32768)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxDataDist::release_tx_16385_32768() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_16385_32768)
  
  ::ywrapper::UintValue* temp = tx_16385_32768_;
  tx_16385_32768_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxDataDist::mutable_tx_16385_32768() {
  
  if (tx_16385_32768_ == NULL) {
    tx_16385_32768_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_16385_32768)
  return tx_16385_32768_;
}
inline void Bssids_Bssid_State_Counters_TxDataDist::set_allocated_tx_16385_32768(::ywrapper::UintValue* tx_16385_32768) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(tx_16385_32768_);
  }
  if (tx_16385_32768) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tx_16385_32768 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx_16385_32768, submessage_arena);
    }
    
  } else {
    
  }
  tx_16385_32768_ = tx_16385_32768;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_16385_32768)
}

// .ywrapper.UintValue tx_2049_4096 = 220523787 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-2049-4096"];
inline bool Bssids_Bssid_State_Counters_TxDataDist::has_tx_2049_4096() const {
  return this != internal_default_instance() && tx_2049_4096_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_TxDataDist::tx_2049_4096() const {
  const ::ywrapper::UintValue* p = tx_2049_4096_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_2049_4096)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxDataDist::release_tx_2049_4096() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_2049_4096)
  
  ::ywrapper::UintValue* temp = tx_2049_4096_;
  tx_2049_4096_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxDataDist::mutable_tx_2049_4096() {
  
  if (tx_2049_4096_ == NULL) {
    tx_2049_4096_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_2049_4096)
  return tx_2049_4096_;
}
inline void Bssids_Bssid_State_Counters_TxDataDist::set_allocated_tx_2049_4096(::ywrapper::UintValue* tx_2049_4096) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(tx_2049_4096_);
  }
  if (tx_2049_4096) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tx_2049_4096 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx_2049_4096, submessage_arena);
    }
    
  } else {
    
  }
  tx_2049_4096_ = tx_2049_4096;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_2049_4096)
}

// .ywrapper.UintValue tx_257_512 = 114841827 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-257-512"];
inline bool Bssids_Bssid_State_Counters_TxDataDist::has_tx_257_512() const {
  return this != internal_default_instance() && tx_257_512_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_TxDataDist::tx_257_512() const {
  const ::ywrapper::UintValue* p = tx_257_512_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_257_512)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxDataDist::release_tx_257_512() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_257_512)
  
  ::ywrapper::UintValue* temp = tx_257_512_;
  tx_257_512_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxDataDist::mutable_tx_257_512() {
  
  if (tx_257_512_ == NULL) {
    tx_257_512_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_257_512)
  return tx_257_512_;
}
inline void Bssids_Bssid_State_Counters_TxDataDist::set_allocated_tx_257_512(::ywrapper::UintValue* tx_257_512) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(tx_257_512_);
  }
  if (tx_257_512) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tx_257_512 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx_257_512, submessage_arena);
    }
    
  } else {
    
  }
  tx_257_512_ = tx_257_512;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_257_512)
}

// .ywrapper.UintValue tx_262145_524288 = 386821806 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-262145-524288"];
inline bool Bssids_Bssid_State_Counters_TxDataDist::has_tx_262145_524288() const {
  return this != internal_default_instance() && tx_262145_524288_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_TxDataDist::tx_262145_524288() const {
  const ::ywrapper::UintValue* p = tx_262145_524288_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_262145_524288)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxDataDist::release_tx_262145_524288() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_262145_524288)
  
  ::ywrapper::UintValue* temp = tx_262145_524288_;
  tx_262145_524288_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxDataDist::mutable_tx_262145_524288() {
  
  if (tx_262145_524288_ == NULL) {
    tx_262145_524288_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_262145_524288)
  return tx_262145_524288_;
}
inline void Bssids_Bssid_State_Counters_TxDataDist::set_allocated_tx_262145_524288(::ywrapper::UintValue* tx_262145_524288) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(tx_262145_524288_);
  }
  if (tx_262145_524288) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tx_262145_524288 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx_262145_524288, submessage_arena);
    }
    
  } else {
    
  }
  tx_262145_524288_ = tx_262145_524288;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_262145_524288)
}

// .ywrapper.UintValue tx_32769_65536 = 53919811 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-32769-65536"];
inline bool Bssids_Bssid_State_Counters_TxDataDist::has_tx_32769_65536() const {
  return this != internal_default_instance() && tx_32769_65536_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_TxDataDist::tx_32769_65536() const {
  const ::ywrapper::UintValue* p = tx_32769_65536_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_32769_65536)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxDataDist::release_tx_32769_65536() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_32769_65536)
  
  ::ywrapper::UintValue* temp = tx_32769_65536_;
  tx_32769_65536_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxDataDist::mutable_tx_32769_65536() {
  
  if (tx_32769_65536_ == NULL) {
    tx_32769_65536_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_32769_65536)
  return tx_32769_65536_;
}
inline void Bssids_Bssid_State_Counters_TxDataDist::set_allocated_tx_32769_65536(::ywrapper::UintValue* tx_32769_65536) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(tx_32769_65536_);
  }
  if (tx_32769_65536) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tx_32769_65536 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx_32769_65536, submessage_arena);
    }
    
  } else {
    
  }
  tx_32769_65536_ = tx_32769_65536;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_32769_65536)
}

// .ywrapper.UintValue tx_4097_8192 = 106713499 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-4097-8192"];
inline bool Bssids_Bssid_State_Counters_TxDataDist::has_tx_4097_8192() const {
  return this != internal_default_instance() && tx_4097_8192_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_TxDataDist::tx_4097_8192() const {
  const ::ywrapper::UintValue* p = tx_4097_8192_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_4097_8192)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxDataDist::release_tx_4097_8192() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_4097_8192)
  
  ::ywrapper::UintValue* temp = tx_4097_8192_;
  tx_4097_8192_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxDataDist::mutable_tx_4097_8192() {
  
  if (tx_4097_8192_ == NULL) {
    tx_4097_8192_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_4097_8192)
  return tx_4097_8192_;
}
inline void Bssids_Bssid_State_Counters_TxDataDist::set_allocated_tx_4097_8192(::ywrapper::UintValue* tx_4097_8192) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(tx_4097_8192_);
  }
  if (tx_4097_8192) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tx_4097_8192 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx_4097_8192, submessage_arena);
    }
    
  } else {
    
  }
  tx_4097_8192_ = tx_4097_8192;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_4097_8192)
}

// .ywrapper.UintValue tx_513_1024 = 517866953 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-513-1024"];
inline bool Bssids_Bssid_State_Counters_TxDataDist::has_tx_513_1024() const {
  return this != internal_default_instance() && tx_513_1024_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_TxDataDist::tx_513_1024() const {
  const ::ywrapper::UintValue* p = tx_513_1024_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_513_1024)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxDataDist::release_tx_513_1024() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_513_1024)
  
  ::ywrapper::UintValue* temp = tx_513_1024_;
  tx_513_1024_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxDataDist::mutable_tx_513_1024() {
  
  if (tx_513_1024_ == NULL) {
    tx_513_1024_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_513_1024)
  return tx_513_1024_;
}
inline void Bssids_Bssid_State_Counters_TxDataDist::set_allocated_tx_513_1024(::ywrapper::UintValue* tx_513_1024) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(tx_513_1024_);
  }
  if (tx_513_1024) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tx_513_1024 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx_513_1024, submessage_arena);
    }
    
  } else {
    
  }
  tx_513_1024_ = tx_513_1024;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_513_1024)
}

// .ywrapper.UintValue tx_524289_1048576 = 106783764 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-524289-1048576"];
inline bool Bssids_Bssid_State_Counters_TxDataDist::has_tx_524289_1048576() const {
  return this != internal_default_instance() && tx_524289_1048576_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_TxDataDist::tx_524289_1048576() const {
  const ::ywrapper::UintValue* p = tx_524289_1048576_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_524289_1048576)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxDataDist::release_tx_524289_1048576() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_524289_1048576)
  
  ::ywrapper::UintValue* temp = tx_524289_1048576_;
  tx_524289_1048576_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxDataDist::mutable_tx_524289_1048576() {
  
  if (tx_524289_1048576_ == NULL) {
    tx_524289_1048576_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_524289_1048576)
  return tx_524289_1048576_;
}
inline void Bssids_Bssid_State_Counters_TxDataDist::set_allocated_tx_524289_1048576(::ywrapper::UintValue* tx_524289_1048576) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(tx_524289_1048576_);
  }
  if (tx_524289_1048576) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tx_524289_1048576 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx_524289_1048576, submessage_arena);
    }
    
  } else {
    
  }
  tx_524289_1048576_ = tx_524289_1048576;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_524289_1048576)
}

// .ywrapper.UintValue tx_65_128 = 211883005 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-65-128"];
inline bool Bssids_Bssid_State_Counters_TxDataDist::has_tx_65_128() const {
  return this != internal_default_instance() && tx_65_128_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_TxDataDist::tx_65_128() const {
  const ::ywrapper::UintValue* p = tx_65_128_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_65_128)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxDataDist::release_tx_65_128() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_65_128)
  
  ::ywrapper::UintValue* temp = tx_65_128_;
  tx_65_128_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxDataDist::mutable_tx_65_128() {
  
  if (tx_65_128_ == NULL) {
    tx_65_128_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_65_128)
  return tx_65_128_;
}
inline void Bssids_Bssid_State_Counters_TxDataDist::set_allocated_tx_65_128(::ywrapper::UintValue* tx_65_128) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(tx_65_128_);
  }
  if (tx_65_128) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tx_65_128 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx_65_128, submessage_arena);
    }
    
  } else {
    
  }
  tx_65_128_ = tx_65_128;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_65_128)
}

// .ywrapper.UintValue tx_65537_131072 = 123295085 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-65537-131072"];
inline bool Bssids_Bssid_State_Counters_TxDataDist::has_tx_65537_131072() const {
  return this != internal_default_instance() && tx_65537_131072_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_TxDataDist::tx_65537_131072() const {
  const ::ywrapper::UintValue* p = tx_65537_131072_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_65537_131072)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxDataDist::release_tx_65537_131072() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_65537_131072)
  
  ::ywrapper::UintValue* temp = tx_65537_131072_;
  tx_65537_131072_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxDataDist::mutable_tx_65537_131072() {
  
  if (tx_65537_131072_ == NULL) {
    tx_65537_131072_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_65537_131072)
  return tx_65537_131072_;
}
inline void Bssids_Bssid_State_Counters_TxDataDist::set_allocated_tx_65537_131072(::ywrapper::UintValue* tx_65537_131072) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(tx_65537_131072_);
  }
  if (tx_65537_131072) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tx_65537_131072 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx_65537_131072, submessage_arena);
    }
    
  } else {
    
  }
  tx_65537_131072_ = tx_65537_131072;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_65537_131072)
}

// .ywrapper.UintValue tx_8193_16384 = 304431444 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist/tx-8193-16384"];
inline bool Bssids_Bssid_State_Counters_TxDataDist::has_tx_8193_16384() const {
  return this != internal_default_instance() && tx_8193_16384_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_TxDataDist::tx_8193_16384() const {
  const ::ywrapper::UintValue* p = tx_8193_16384_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_8193_16384)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxDataDist::release_tx_8193_16384() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_8193_16384)
  
  ::ywrapper::UintValue* temp = tx_8193_16384_;
  tx_8193_16384_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxDataDist::mutable_tx_8193_16384() {
  
  if (tx_8193_16384_ == NULL) {
    tx_8193_16384_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_8193_16384)
  return tx_8193_16384_;
}
inline void Bssids_Bssid_State_Counters_TxDataDist::set_allocated_tx_8193_16384(::ywrapper::UintValue* tx_8193_16384) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(tx_8193_16384_);
  }
  if (tx_8193_16384) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tx_8193_16384 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx_8193_16384, submessage_arena);
    }
    
  } else {
    
  }
  tx_8193_16384_ = tx_8193_16384;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist.tx_8193_16384)
}

// -------------------------------------------------------------------

// Bssids_Bssid_State_Counters_TxDataWmm

// .ywrapper.UintValue be = 424444669 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-wmm/be"];
inline bool Bssids_Bssid_State_Counters_TxDataWmm::has_be() const {
  return this != internal_default_instance() && be_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_TxDataWmm::be() const {
  const ::ywrapper::UintValue* p = be_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm.be)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxDataWmm::release_be() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm.be)
  
  ::ywrapper::UintValue* temp = be_;
  be_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxDataWmm::mutable_be() {
  
  if (be_ == NULL) {
    be_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm.be)
  return be_;
}
inline void Bssids_Bssid_State_Counters_TxDataWmm::set_allocated_be(::ywrapper::UintValue* be) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(be_);
  }
  if (be) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      be = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, be, submessage_arena);
    }
    
  } else {
    
  }
  be_ = be;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm.be)
}

// .ywrapper.UintValue bk = 424444659 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-wmm/bk"];
inline bool Bssids_Bssid_State_Counters_TxDataWmm::has_bk() const {
  return this != internal_default_instance() && bk_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_TxDataWmm::bk() const {
  const ::ywrapper::UintValue* p = bk_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm.bk)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxDataWmm::release_bk() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm.bk)
  
  ::ywrapper::UintValue* temp = bk_;
  bk_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxDataWmm::mutable_bk() {
  
  if (bk_ == NULL) {
    bk_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm.bk)
  return bk_;
}
inline void Bssids_Bssid_State_Counters_TxDataWmm::set_allocated_bk(::ywrapper::UintValue* bk) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(bk_);
  }
  if (bk) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bk = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bk, submessage_arena);
    }
    
  } else {
    
  }
  bk_ = bk;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm.bk)
}

// .ywrapper.UintValue vi = 223126141 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-wmm/vi"];
inline bool Bssids_Bssid_State_Counters_TxDataWmm::has_vi() const {
  return this != internal_default_instance() && vi_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_TxDataWmm::vi() const {
  const ::ywrapper::UintValue* p = vi_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm.vi)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxDataWmm::release_vi() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm.vi)
  
  ::ywrapper::UintValue* temp = vi_;
  vi_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxDataWmm::mutable_vi() {
  
  if (vi_ == NULL) {
    vi_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm.vi)
  return vi_;
}
inline void Bssids_Bssid_State_Counters_TxDataWmm::set_allocated_vi(::ywrapper::UintValue* vi) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(vi_);
  }
  if (vi) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vi = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vi, submessage_arena);
    }
    
  } else {
    
  }
  vi_ = vi;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm.vi)
}

// .ywrapper.UintValue vo = 223126139 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-wmm/vo"];
inline bool Bssids_Bssid_State_Counters_TxDataWmm::has_vo() const {
  return this != internal_default_instance() && vo_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_TxDataWmm::vo() const {
  const ::ywrapper::UintValue* p = vo_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm.vo)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxDataWmm::release_vo() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm.vo)
  
  ::ywrapper::UintValue* temp = vo_;
  vo_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxDataWmm::mutable_vo() {
  
  if (vo_ == NULL) {
    vo_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm.vo)
  return vo_;
}
inline void Bssids_Bssid_State_Counters_TxDataWmm::set_allocated_vo(::ywrapper::UintValue* vo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(vo_);
  }
  if (vo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vo, submessage_arena);
    }
    
  } else {
    
  }
  vo_ = vo;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm.vo)
}

// -------------------------------------------------------------------

// Bssids_Bssid_State_Counters_TxMcs

// .ywrapper.UintValue mcs0 = 224524070 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs0"];
inline bool Bssids_Bssid_State_Counters_TxMcs::has_mcs0() const {
  return this != internal_default_instance() && mcs0_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_TxMcs::mcs0() const {
  const ::ywrapper::UintValue* p = mcs0_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs.mcs0)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxMcs::release_mcs0() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs.mcs0)
  
  ::ywrapper::UintValue* temp = mcs0_;
  mcs0_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxMcs::mutable_mcs0() {
  
  if (mcs0_ == NULL) {
    mcs0_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs.mcs0)
  return mcs0_;
}
inline void Bssids_Bssid_State_Counters_TxMcs::set_allocated_mcs0(::ywrapper::UintValue* mcs0) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mcs0_);
  }
  if (mcs0) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mcs0 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mcs0, submessage_arena);
    }
    
  } else {
    
  }
  mcs0_ = mcs0;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs.mcs0)
}

// .ywrapper.UintValue mcs1 = 224524071 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs1"];
inline bool Bssids_Bssid_State_Counters_TxMcs::has_mcs1() const {
  return this != internal_default_instance() && mcs1_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_TxMcs::mcs1() const {
  const ::ywrapper::UintValue* p = mcs1_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs.mcs1)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxMcs::release_mcs1() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs.mcs1)
  
  ::ywrapper::UintValue* temp = mcs1_;
  mcs1_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxMcs::mutable_mcs1() {
  
  if (mcs1_ == NULL) {
    mcs1_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs.mcs1)
  return mcs1_;
}
inline void Bssids_Bssid_State_Counters_TxMcs::set_allocated_mcs1(::ywrapper::UintValue* mcs1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mcs1_);
  }
  if (mcs1) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mcs1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mcs1, submessage_arena);
    }
    
  } else {
    
  }
  mcs1_ = mcs1;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs.mcs1)
}

// .ywrapper.UintValue mcs2 = 224524068 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs2"];
inline bool Bssids_Bssid_State_Counters_TxMcs::has_mcs2() const {
  return this != internal_default_instance() && mcs2_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_TxMcs::mcs2() const {
  const ::ywrapper::UintValue* p = mcs2_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs.mcs2)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxMcs::release_mcs2() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs.mcs2)
  
  ::ywrapper::UintValue* temp = mcs2_;
  mcs2_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxMcs::mutable_mcs2() {
  
  if (mcs2_ == NULL) {
    mcs2_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs.mcs2)
  return mcs2_;
}
inline void Bssids_Bssid_State_Counters_TxMcs::set_allocated_mcs2(::ywrapper::UintValue* mcs2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mcs2_);
  }
  if (mcs2) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mcs2 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mcs2, submessage_arena);
    }
    
  } else {
    
  }
  mcs2_ = mcs2;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs.mcs2)
}

// .ywrapper.UintValue mcs3 = 224524069 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs3"];
inline bool Bssids_Bssid_State_Counters_TxMcs::has_mcs3() const {
  return this != internal_default_instance() && mcs3_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_TxMcs::mcs3() const {
  const ::ywrapper::UintValue* p = mcs3_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs.mcs3)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxMcs::release_mcs3() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs.mcs3)
  
  ::ywrapper::UintValue* temp = mcs3_;
  mcs3_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxMcs::mutable_mcs3() {
  
  if (mcs3_ == NULL) {
    mcs3_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs.mcs3)
  return mcs3_;
}
inline void Bssids_Bssid_State_Counters_TxMcs::set_allocated_mcs3(::ywrapper::UintValue* mcs3) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mcs3_);
  }
  if (mcs3) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mcs3 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mcs3, submessage_arena);
    }
    
  } else {
    
  }
  mcs3_ = mcs3;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs.mcs3)
}

// .ywrapper.UintValue mcs4 = 224524066 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs4"];
inline bool Bssids_Bssid_State_Counters_TxMcs::has_mcs4() const {
  return this != internal_default_instance() && mcs4_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_TxMcs::mcs4() const {
  const ::ywrapper::UintValue* p = mcs4_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs.mcs4)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxMcs::release_mcs4() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs.mcs4)
  
  ::ywrapper::UintValue* temp = mcs4_;
  mcs4_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxMcs::mutable_mcs4() {
  
  if (mcs4_ == NULL) {
    mcs4_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs.mcs4)
  return mcs4_;
}
inline void Bssids_Bssid_State_Counters_TxMcs::set_allocated_mcs4(::ywrapper::UintValue* mcs4) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mcs4_);
  }
  if (mcs4) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mcs4 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mcs4, submessage_arena);
    }
    
  } else {
    
  }
  mcs4_ = mcs4;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs.mcs4)
}

// .ywrapper.UintValue mcs5 = 224524067 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs5"];
inline bool Bssids_Bssid_State_Counters_TxMcs::has_mcs5() const {
  return this != internal_default_instance() && mcs5_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_TxMcs::mcs5() const {
  const ::ywrapper::UintValue* p = mcs5_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs.mcs5)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxMcs::release_mcs5() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs.mcs5)
  
  ::ywrapper::UintValue* temp = mcs5_;
  mcs5_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxMcs::mutable_mcs5() {
  
  if (mcs5_ == NULL) {
    mcs5_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs.mcs5)
  return mcs5_;
}
inline void Bssids_Bssid_State_Counters_TxMcs::set_allocated_mcs5(::ywrapper::UintValue* mcs5) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mcs5_);
  }
  if (mcs5) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mcs5 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mcs5, submessage_arena);
    }
    
  } else {
    
  }
  mcs5_ = mcs5;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs.mcs5)
}

// .ywrapper.UintValue mcs6 = 224524064 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs6"];
inline bool Bssids_Bssid_State_Counters_TxMcs::has_mcs6() const {
  return this != internal_default_instance() && mcs6_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_TxMcs::mcs6() const {
  const ::ywrapper::UintValue* p = mcs6_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs.mcs6)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxMcs::release_mcs6() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs.mcs6)
  
  ::ywrapper::UintValue* temp = mcs6_;
  mcs6_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxMcs::mutable_mcs6() {
  
  if (mcs6_ == NULL) {
    mcs6_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs.mcs6)
  return mcs6_;
}
inline void Bssids_Bssid_State_Counters_TxMcs::set_allocated_mcs6(::ywrapper::UintValue* mcs6) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mcs6_);
  }
  if (mcs6) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mcs6 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mcs6, submessage_arena);
    }
    
  } else {
    
  }
  mcs6_ = mcs6;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs.mcs6)
}

// .ywrapper.UintValue mcs7 = 224524065 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs7"];
inline bool Bssids_Bssid_State_Counters_TxMcs::has_mcs7() const {
  return this != internal_default_instance() && mcs7_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_TxMcs::mcs7() const {
  const ::ywrapper::UintValue* p = mcs7_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs.mcs7)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxMcs::release_mcs7() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs.mcs7)
  
  ::ywrapper::UintValue* temp = mcs7_;
  mcs7_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxMcs::mutable_mcs7() {
  
  if (mcs7_ == NULL) {
    mcs7_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs.mcs7)
  return mcs7_;
}
inline void Bssids_Bssid_State_Counters_TxMcs::set_allocated_mcs7(::ywrapper::UintValue* mcs7) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mcs7_);
  }
  if (mcs7) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mcs7 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mcs7, submessage_arena);
    }
    
  } else {
    
  }
  mcs7_ = mcs7;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs.mcs7)
}

// .ywrapper.UintValue mcs8 = 224524078 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs8"];
inline bool Bssids_Bssid_State_Counters_TxMcs::has_mcs8() const {
  return this != internal_default_instance() && mcs8_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_TxMcs::mcs8() const {
  const ::ywrapper::UintValue* p = mcs8_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs.mcs8)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxMcs::release_mcs8() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs.mcs8)
  
  ::ywrapper::UintValue* temp = mcs8_;
  mcs8_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxMcs::mutable_mcs8() {
  
  if (mcs8_ == NULL) {
    mcs8_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs.mcs8)
  return mcs8_;
}
inline void Bssids_Bssid_State_Counters_TxMcs::set_allocated_mcs8(::ywrapper::UintValue* mcs8) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mcs8_);
  }
  if (mcs8) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mcs8 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mcs8, submessage_arena);
    }
    
  } else {
    
  }
  mcs8_ = mcs8;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs.mcs8)
}

// .ywrapper.UintValue mcs9 = 224524079 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs/mcs9"];
inline bool Bssids_Bssid_State_Counters_TxMcs::has_mcs9() const {
  return this != internal_default_instance() && mcs9_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters_TxMcs::mcs9() const {
  const ::ywrapper::UintValue* p = mcs9_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs.mcs9)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxMcs::release_mcs9() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs.mcs9)
  
  ::ywrapper::UintValue* temp = mcs9_;
  mcs9_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters_TxMcs::mutable_mcs9() {
  
  if (mcs9_ == NULL) {
    mcs9_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs.mcs9)
  return mcs9_;
}
inline void Bssids_Bssid_State_Counters_TxMcs::set_allocated_mcs9(::ywrapper::UintValue* mcs9) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mcs9_);
  }
  if (mcs9) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mcs9 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mcs9, submessage_arena);
    }
    
  } else {
    
  }
  mcs9_ = mcs9;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs.mcs9)
}

// -------------------------------------------------------------------

// Bssids_Bssid_State_Counters

// .ywrapper.UintValue rx_bytes_data = 175562161 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-bytes-data"];
inline bool Bssids_Bssid_State_Counters::has_rx_bytes_data() const {
  return this != internal_default_instance() && rx_bytes_data_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters::rx_bytes_data() const {
  const ::ywrapper::UintValue* p = rx_bytes_data_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.rx_bytes_data)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters::release_rx_bytes_data() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.rx_bytes_data)
  
  ::ywrapper::UintValue* temp = rx_bytes_data_;
  rx_bytes_data_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters::mutable_rx_bytes_data() {
  
  if (rx_bytes_data_ == NULL) {
    rx_bytes_data_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.rx_bytes_data)
  return rx_bytes_data_;
}
inline void Bssids_Bssid_State_Counters::set_allocated_rx_bytes_data(::ywrapper::UintValue* rx_bytes_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rx_bytes_data_);
  }
  if (rx_bytes_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rx_bytes_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rx_bytes_data, submessage_arena);
    }
    
  } else {
    
  }
  rx_bytes_data_ = rx_bytes_data;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.rx_bytes_data)
}

// .ywrapper.UintValue rx_control = 348207354 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-control"];
inline bool Bssids_Bssid_State_Counters::has_rx_control() const {
  return this != internal_default_instance() && rx_control_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters::rx_control() const {
  const ::ywrapper::UintValue* p = rx_control_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.rx_control)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters::release_rx_control() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.rx_control)
  
  ::ywrapper::UintValue* temp = rx_control_;
  rx_control_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters::mutable_rx_control() {
  
  if (rx_control_ == NULL) {
    rx_control_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.rx_control)
  return rx_control_;
}
inline void Bssids_Bssid_State_Counters::set_allocated_rx_control(::ywrapper::UintValue* rx_control) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rx_control_);
  }
  if (rx_control) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rx_control = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rx_control, submessage_arena);
    }
    
  } else {
    
  }
  rx_control_ = rx_control;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.rx_control)
}

// .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataDist rx_data_dist = 119677688 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-dist"];
inline bool Bssids_Bssid_State_Counters::has_rx_data_dist() const {
  return this != internal_default_instance() && rx_data_dist_ != NULL;
}
inline void Bssids_Bssid_State_Counters::clear_rx_data_dist() {
  if (GetArenaNoVirtual() == NULL && rx_data_dist_ != NULL) {
    delete rx_data_dist_;
  }
  rx_data_dist_ = NULL;
}
inline const ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataDist& Bssids_Bssid_State_Counters::rx_data_dist() const {
  const ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataDist* p = rx_data_dist_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.rx_data_dist)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataDist*>(
      &::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_RxDataDist_default_instance_);
}
inline ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataDist* Bssids_Bssid_State_Counters::release_rx_data_dist() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.rx_data_dist)
  
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataDist* temp = rx_data_dist_;
  rx_data_dist_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataDist* Bssids_Bssid_State_Counters::mutable_rx_data_dist() {
  
  if (rx_data_dist_ == NULL) {
    rx_data_dist_ = new ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataDist;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.rx_data_dist)
  return rx_data_dist_;
}
inline void Bssids_Bssid_State_Counters::set_allocated_rx_data_dist(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataDist* rx_data_dist) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rx_data_dist_;
  }
  if (rx_data_dist) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rx_data_dist = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rx_data_dist, submessage_arena);
    }
    
  } else {
    
  }
  rx_data_dist_ = rx_data_dist;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.rx_data_dist)
}

// .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxDataWmm rx_data_wmm = 139948749 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-data-wmm"];
inline bool Bssids_Bssid_State_Counters::has_rx_data_wmm() const {
  return this != internal_default_instance() && rx_data_wmm_ != NULL;
}
inline void Bssids_Bssid_State_Counters::clear_rx_data_wmm() {
  if (GetArenaNoVirtual() == NULL && rx_data_wmm_ != NULL) {
    delete rx_data_wmm_;
  }
  rx_data_wmm_ = NULL;
}
inline const ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataWmm& Bssids_Bssid_State_Counters::rx_data_wmm() const {
  const ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataWmm* p = rx_data_wmm_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.rx_data_wmm)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataWmm*>(
      &::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_RxDataWmm_default_instance_);
}
inline ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataWmm* Bssids_Bssid_State_Counters::release_rx_data_wmm() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.rx_data_wmm)
  
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataWmm* temp = rx_data_wmm_;
  rx_data_wmm_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataWmm* Bssids_Bssid_State_Counters::mutable_rx_data_wmm() {
  
  if (rx_data_wmm_ == NULL) {
    rx_data_wmm_ = new ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataWmm;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.rx_data_wmm)
  return rx_data_wmm_;
}
inline void Bssids_Bssid_State_Counters::set_allocated_rx_data_wmm(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxDataWmm* rx_data_wmm) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rx_data_wmm_;
  }
  if (rx_data_wmm) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rx_data_wmm = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rx_data_wmm, submessage_arena);
    }
    
  } else {
    
  }
  rx_data_wmm_ = rx_data_wmm;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.rx_data_wmm)
}

// .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.RxMcs rx_mcs = 192795234 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mcs"];
inline bool Bssids_Bssid_State_Counters::has_rx_mcs() const {
  return this != internal_default_instance() && rx_mcs_ != NULL;
}
inline void Bssids_Bssid_State_Counters::clear_rx_mcs() {
  if (GetArenaNoVirtual() == NULL && rx_mcs_ != NULL) {
    delete rx_mcs_;
  }
  rx_mcs_ = NULL;
}
inline const ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxMcs& Bssids_Bssid_State_Counters::rx_mcs() const {
  const ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxMcs* p = rx_mcs_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.rx_mcs)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxMcs*>(
      &::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_RxMcs_default_instance_);
}
inline ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxMcs* Bssids_Bssid_State_Counters::release_rx_mcs() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.rx_mcs)
  
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxMcs* temp = rx_mcs_;
  rx_mcs_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxMcs* Bssids_Bssid_State_Counters::mutable_rx_mcs() {
  
  if (rx_mcs_ == NULL) {
    rx_mcs_ = new ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxMcs;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.rx_mcs)
  return rx_mcs_;
}
inline void Bssids_Bssid_State_Counters::set_allocated_rx_mcs(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_RxMcs* rx_mcs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rx_mcs_;
  }
  if (rx_mcs) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rx_mcs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rx_mcs, submessage_arena);
    }
    
  } else {
    
  }
  rx_mcs_ = rx_mcs;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.rx_mcs)
}

// .ywrapper.UintValue rx_mgmt = 320558052 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-mgmt"];
inline bool Bssids_Bssid_State_Counters::has_rx_mgmt() const {
  return this != internal_default_instance() && rx_mgmt_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters::rx_mgmt() const {
  const ::ywrapper::UintValue* p = rx_mgmt_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.rx_mgmt)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters::release_rx_mgmt() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.rx_mgmt)
  
  ::ywrapper::UintValue* temp = rx_mgmt_;
  rx_mgmt_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters::mutable_rx_mgmt() {
  
  if (rx_mgmt_ == NULL) {
    rx_mgmt_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.rx_mgmt)
  return rx_mgmt_;
}
inline void Bssids_Bssid_State_Counters::set_allocated_rx_mgmt(::ywrapper::UintValue* rx_mgmt) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rx_mgmt_);
  }
  if (rx_mgmt) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rx_mgmt = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rx_mgmt, submessage_arena);
    }
    
  } else {
    
  }
  rx_mgmt_ = rx_mgmt;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.rx_mgmt)
}

// .ywrapper.UintValue rx_retries = 227864295 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-retries"];
inline bool Bssids_Bssid_State_Counters::has_rx_retries() const {
  return this != internal_default_instance() && rx_retries_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters::rx_retries() const {
  const ::ywrapper::UintValue* p = rx_retries_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.rx_retries)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters::release_rx_retries() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.rx_retries)
  
  ::ywrapper::UintValue* temp = rx_retries_;
  rx_retries_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters::mutable_rx_retries() {
  
  if (rx_retries_ == NULL) {
    rx_retries_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.rx_retries)
  return rx_retries_;
}
inline void Bssids_Bssid_State_Counters::set_allocated_rx_retries(::ywrapper::UintValue* rx_retries) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rx_retries_);
  }
  if (rx_retries) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rx_retries = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rx_retries, submessage_arena);
    }
    
  } else {
    
  }
  rx_retries_ = rx_retries;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.rx_retries)
}

// .ywrapper.UintValue rx_retries_data = 416388864 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-retries-data"];
inline bool Bssids_Bssid_State_Counters::has_rx_retries_data() const {
  return this != internal_default_instance() && rx_retries_data_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters::rx_retries_data() const {
  const ::ywrapper::UintValue* p = rx_retries_data_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.rx_retries_data)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters::release_rx_retries_data() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.rx_retries_data)
  
  ::ywrapper::UintValue* temp = rx_retries_data_;
  rx_retries_data_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters::mutable_rx_retries_data() {
  
  if (rx_retries_data_ == NULL) {
    rx_retries_data_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.rx_retries_data)
  return rx_retries_data_;
}
inline void Bssids_Bssid_State_Counters::set_allocated_rx_retries_data(::ywrapper::UintValue* rx_retries_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rx_retries_data_);
  }
  if (rx_retries_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rx_retries_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rx_retries_data, submessage_arena);
    }
    
  } else {
    
  }
  rx_retries_data_ = rx_retries_data;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.rx_retries_data)
}

// .ywrapper.UintValue rx_retries_subframe = 29082905 [(.yext.schemapath) = "/bssids/bssid/state/counters/rx-retries-subframe"];
inline bool Bssids_Bssid_State_Counters::has_rx_retries_subframe() const {
  return this != internal_default_instance() && rx_retries_subframe_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters::rx_retries_subframe() const {
  const ::ywrapper::UintValue* p = rx_retries_subframe_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.rx_retries_subframe)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters::release_rx_retries_subframe() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.rx_retries_subframe)
  
  ::ywrapper::UintValue* temp = rx_retries_subframe_;
  rx_retries_subframe_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters::mutable_rx_retries_subframe() {
  
  if (rx_retries_subframe_ == NULL) {
    rx_retries_subframe_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.rx_retries_subframe)
  return rx_retries_subframe_;
}
inline void Bssids_Bssid_State_Counters::set_allocated_rx_retries_subframe(::ywrapper::UintValue* rx_retries_subframe) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rx_retries_subframe_);
  }
  if (rx_retries_subframe) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rx_retries_subframe = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rx_retries_subframe, submessage_arena);
    }
    
  } else {
    
  }
  rx_retries_subframe_ = rx_retries_subframe;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.rx_retries_subframe)
}

// .ywrapper.UintValue tx_bytes_data = 141694443 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-bytes-data"];
inline bool Bssids_Bssid_State_Counters::has_tx_bytes_data() const {
  return this != internal_default_instance() && tx_bytes_data_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters::tx_bytes_data() const {
  const ::ywrapper::UintValue* p = tx_bytes_data_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.tx_bytes_data)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters::release_tx_bytes_data() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.tx_bytes_data)
  
  ::ywrapper::UintValue* temp = tx_bytes_data_;
  tx_bytes_data_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters::mutable_tx_bytes_data() {
  
  if (tx_bytes_data_ == NULL) {
    tx_bytes_data_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.tx_bytes_data)
  return tx_bytes_data_;
}
inline void Bssids_Bssid_State_Counters::set_allocated_tx_bytes_data(::ywrapper::UintValue* tx_bytes_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(tx_bytes_data_);
  }
  if (tx_bytes_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tx_bytes_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx_bytes_data, submessage_arena);
    }
    
  } else {
    
  }
  tx_bytes_data_ = tx_bytes_data;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.tx_bytes_data)
}

// .ywrapper.UintValue tx_control = 126063340 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-control"];
inline bool Bssids_Bssid_State_Counters::has_tx_control() const {
  return this != internal_default_instance() && tx_control_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters::tx_control() const {
  const ::ywrapper::UintValue* p = tx_control_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.tx_control)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters::release_tx_control() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.tx_control)
  
  ::ywrapper::UintValue* temp = tx_control_;
  tx_control_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters::mutable_tx_control() {
  
  if (tx_control_ == NULL) {
    tx_control_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.tx_control)
  return tx_control_;
}
inline void Bssids_Bssid_State_Counters::set_allocated_tx_control(::ywrapper::UintValue* tx_control) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(tx_control_);
  }
  if (tx_control) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tx_control = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx_control, submessage_arena);
    }
    
  } else {
    
  }
  tx_control_ = tx_control;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.tx_control)
}

// .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataDist tx_data_dist = 60772850 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-dist"];
inline bool Bssids_Bssid_State_Counters::has_tx_data_dist() const {
  return this != internal_default_instance() && tx_data_dist_ != NULL;
}
inline void Bssids_Bssid_State_Counters::clear_tx_data_dist() {
  if (GetArenaNoVirtual() == NULL && tx_data_dist_ != NULL) {
    delete tx_data_dist_;
  }
  tx_data_dist_ = NULL;
}
inline const ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataDist& Bssids_Bssid_State_Counters::tx_data_dist() const {
  const ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataDist* p = tx_data_dist_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.tx_data_dist)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataDist*>(
      &::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_TxDataDist_default_instance_);
}
inline ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataDist* Bssids_Bssid_State_Counters::release_tx_data_dist() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.tx_data_dist)
  
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataDist* temp = tx_data_dist_;
  tx_data_dist_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataDist* Bssids_Bssid_State_Counters::mutable_tx_data_dist() {
  
  if (tx_data_dist_ == NULL) {
    tx_data_dist_ = new ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataDist;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.tx_data_dist)
  return tx_data_dist_;
}
inline void Bssids_Bssid_State_Counters::set_allocated_tx_data_dist(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataDist* tx_data_dist) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tx_data_dist_;
  }
  if (tx_data_dist) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tx_data_dist = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx_data_dist, submessage_arena);
    }
    
  } else {
    
  }
  tx_data_dist_ = tx_data_dist;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.tx_data_dist)
}

// .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxDataWmm tx_data_wmm = 312270491 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-data-wmm"];
inline bool Bssids_Bssid_State_Counters::has_tx_data_wmm() const {
  return this != internal_default_instance() && tx_data_wmm_ != NULL;
}
inline void Bssids_Bssid_State_Counters::clear_tx_data_wmm() {
  if (GetArenaNoVirtual() == NULL && tx_data_wmm_ != NULL) {
    delete tx_data_wmm_;
  }
  tx_data_wmm_ = NULL;
}
inline const ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataWmm& Bssids_Bssid_State_Counters::tx_data_wmm() const {
  const ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataWmm* p = tx_data_wmm_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.tx_data_wmm)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataWmm*>(
      &::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_TxDataWmm_default_instance_);
}
inline ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataWmm* Bssids_Bssid_State_Counters::release_tx_data_wmm() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.tx_data_wmm)
  
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataWmm* temp = tx_data_wmm_;
  tx_data_wmm_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataWmm* Bssids_Bssid_State_Counters::mutable_tx_data_wmm() {
  
  if (tx_data_wmm_ == NULL) {
    tx_data_wmm_ = new ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataWmm;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.tx_data_wmm)
  return tx_data_wmm_;
}
inline void Bssids_Bssid_State_Counters::set_allocated_tx_data_wmm(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxDataWmm* tx_data_wmm) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tx_data_wmm_;
  }
  if (tx_data_wmm) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tx_data_wmm = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx_data_wmm, submessage_arena);
    }
    
  } else {
    
  }
  tx_data_wmm_ = tx_data_wmm;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.tx_data_wmm)
}

// .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.TxMcs tx_mcs = 103367384 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mcs"];
inline bool Bssids_Bssid_State_Counters::has_tx_mcs() const {
  return this != internal_default_instance() && tx_mcs_ != NULL;
}
inline void Bssids_Bssid_State_Counters::clear_tx_mcs() {
  if (GetArenaNoVirtual() == NULL && tx_mcs_ != NULL) {
    delete tx_mcs_;
  }
  tx_mcs_ = NULL;
}
inline const ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxMcs& Bssids_Bssid_State_Counters::tx_mcs() const {
  const ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxMcs* p = tx_mcs_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.tx_mcs)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxMcs*>(
      &::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_TxMcs_default_instance_);
}
inline ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxMcs* Bssids_Bssid_State_Counters::release_tx_mcs() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.tx_mcs)
  
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxMcs* temp = tx_mcs_;
  tx_mcs_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxMcs* Bssids_Bssid_State_Counters::mutable_tx_mcs() {
  
  if (tx_mcs_ == NULL) {
    tx_mcs_ = new ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxMcs;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.tx_mcs)
  return tx_mcs_;
}
inline void Bssids_Bssid_State_Counters::set_allocated_tx_mcs(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters_TxMcs* tx_mcs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tx_mcs_;
  }
  if (tx_mcs) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tx_mcs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx_mcs, submessage_arena);
    }
    
  } else {
    
  }
  tx_mcs_ = tx_mcs;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.tx_mcs)
}

// .ywrapper.UintValue tx_mgmt = 419252762 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-mgmt"];
inline bool Bssids_Bssid_State_Counters::has_tx_mgmt() const {
  return this != internal_default_instance() && tx_mgmt_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters::tx_mgmt() const {
  const ::ywrapper::UintValue* p = tx_mgmt_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.tx_mgmt)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters::release_tx_mgmt() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.tx_mgmt)
  
  ::ywrapper::UintValue* temp = tx_mgmt_;
  tx_mgmt_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters::mutable_tx_mgmt() {
  
  if (tx_mgmt_ == NULL) {
    tx_mgmt_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.tx_mgmt)
  return tx_mgmt_;
}
inline void Bssids_Bssid_State_Counters::set_allocated_tx_mgmt(::ywrapper::UintValue* tx_mgmt) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(tx_mgmt_);
  }
  if (tx_mgmt) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tx_mgmt = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx_mgmt, submessage_arena);
    }
    
  } else {
    
  }
  tx_mgmt_ = tx_mgmt;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.tx_mgmt)
}

// .ywrapper.UintValue tx_retries = 94814937 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-retries"];
inline bool Bssids_Bssid_State_Counters::has_tx_retries() const {
  return this != internal_default_instance() && tx_retries_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters::tx_retries() const {
  const ::ywrapper::UintValue* p = tx_retries_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.tx_retries)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters::release_tx_retries() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.tx_retries)
  
  ::ywrapper::UintValue* temp = tx_retries_;
  tx_retries_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters::mutable_tx_retries() {
  
  if (tx_retries_ == NULL) {
    tx_retries_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.tx_retries)
  return tx_retries_;
}
inline void Bssids_Bssid_State_Counters::set_allocated_tx_retries(::ywrapper::UintValue* tx_retries) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(tx_retries_);
  }
  if (tx_retries) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tx_retries = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx_retries, submessage_arena);
    }
    
  } else {
    
  }
  tx_retries_ = tx_retries;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.tx_retries)
}

// .ywrapper.UintValue tx_retries_data = 22635174 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-retries-data"];
inline bool Bssids_Bssid_State_Counters::has_tx_retries_data() const {
  return this != internal_default_instance() && tx_retries_data_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters::tx_retries_data() const {
  const ::ywrapper::UintValue* p = tx_retries_data_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.tx_retries_data)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters::release_tx_retries_data() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.tx_retries_data)
  
  ::ywrapper::UintValue* temp = tx_retries_data_;
  tx_retries_data_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters::mutable_tx_retries_data() {
  
  if (tx_retries_data_ == NULL) {
    tx_retries_data_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.tx_retries_data)
  return tx_retries_data_;
}
inline void Bssids_Bssid_State_Counters::set_allocated_tx_retries_data(::ywrapper::UintValue* tx_retries_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(tx_retries_data_);
  }
  if (tx_retries_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tx_retries_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx_retries_data, submessage_arena);
    }
    
  } else {
    
  }
  tx_retries_data_ = tx_retries_data;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.tx_retries_data)
}

// .ywrapper.UintValue tx_retries_subframe = 67415871 [(.yext.schemapath) = "/bssids/bssid/state/counters/tx-retries-subframe"];
inline bool Bssids_Bssid_State_Counters::has_tx_retries_subframe() const {
  return this != internal_default_instance() && tx_retries_subframe_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State_Counters::tx_retries_subframe() const {
  const ::ywrapper::UintValue* p = tx_retries_subframe_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.tx_retries_subframe)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters::release_tx_retries_subframe() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.tx_retries_subframe)
  
  ::ywrapper::UintValue* temp = tx_retries_subframe_;
  tx_retries_subframe_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State_Counters::mutable_tx_retries_subframe() {
  
  if (tx_retries_subframe_ == NULL) {
    tx_retries_subframe_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.tx_retries_subframe)
  return tx_retries_subframe_;
}
inline void Bssids_Bssid_State_Counters::set_allocated_tx_retries_subframe(::ywrapper::UintValue* tx_retries_subframe) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(tx_retries_subframe_);
  }
  if (tx_retries_subframe) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tx_retries_subframe = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx_retries_subframe, submessage_arena);
    }
    
  } else {
    
  }
  tx_retries_subframe_ = tx_retries_subframe;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters.tx_retries_subframe)
}

// -------------------------------------------------------------------

// Bssids_Bssid_State

// .ywrapper.StringValue bssid = 513163965 [(.yext.schemapath) = "/bssids/bssid/state/bssid"];
inline bool Bssids_Bssid_State::has_bssid() const {
  return this != internal_default_instance() && bssid_ != NULL;
}
inline const ::ywrapper::StringValue& Bssids_Bssid_State::bssid() const {
  const ::ywrapper::StringValue* p = bssid_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.bssid)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Bssids_Bssid_State::release_bssid() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.bssid)
  
  ::ywrapper::StringValue* temp = bssid_;
  bssid_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Bssids_Bssid_State::mutable_bssid() {
  
  if (bssid_ == NULL) {
    bssid_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.bssid)
  return bssid_;
}
inline void Bssids_Bssid_State::set_allocated_bssid(::ywrapper::StringValue* bssid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(bssid_);
  }
  if (bssid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bssid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bssid, submessage_arena);
    }
    
  } else {
    
  }
  bssid_ = bssid;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.bssid)
}

// .openconfig.openconfig_wifi_mac.Bssids.Bssid.State.Counters counters = 502972933 [(.yext.schemapath) = "/bssids/bssid/state/counters"];
inline bool Bssids_Bssid_State::has_counters() const {
  return this != internal_default_instance() && counters_ != NULL;
}
inline void Bssids_Bssid_State::clear_counters() {
  if (GetArenaNoVirtual() == NULL && counters_ != NULL) {
    delete counters_;
  }
  counters_ = NULL;
}
inline const ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters& Bssids_Bssid_State::counters() const {
  const ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters* p = counters_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.counters)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters*>(
      &::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_Counters_default_instance_);
}
inline ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters* Bssids_Bssid_State::release_counters() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.counters)
  
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters* temp = counters_;
  counters_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters* Bssids_Bssid_State::mutable_counters() {
  
  if (counters_ == NULL) {
    counters_ = new ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.counters)
  return counters_;
}
inline void Bssids_Bssid_State::set_allocated_counters(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State_Counters* counters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete counters_;
  }
  if (counters) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      counters = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, counters, submessage_arena);
    }
    
  } else {
    
  }
  counters_ = counters;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.counters)
}

// .ywrapper.StringValue ess = 117830205 [(.yext.schemapath) = "/bssids/bssid/state/ess"];
inline bool Bssids_Bssid_State::has_ess() const {
  return this != internal_default_instance() && ess_ != NULL;
}
inline const ::ywrapper::StringValue& Bssids_Bssid_State::ess() const {
  const ::ywrapper::StringValue* p = ess_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.ess)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Bssids_Bssid_State::release_ess() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.ess)
  
  ::ywrapper::StringValue* temp = ess_;
  ess_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Bssids_Bssid_State::mutable_ess() {
  
  if (ess_ == NULL) {
    ess_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.ess)
  return ess_;
}
inline void Bssids_Bssid_State::set_allocated_ess(::ywrapper::StringValue* ess) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ess_);
  }
  if (ess) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ess = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ess, submessage_arena);
    }
    
  } else {
    
  }
  ess_ = ess;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.ess)
}

// .ywrapper.UintValue num_associated_clients = 76274334 [(.yext.schemapath) = "/bssids/bssid/state/num-associated-clients"];
inline bool Bssids_Bssid_State::has_num_associated_clients() const {
  return this != internal_default_instance() && num_associated_clients_ != NULL;
}
inline const ::ywrapper::UintValue& Bssids_Bssid_State::num_associated_clients() const {
  const ::ywrapper::UintValue* p = num_associated_clients_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.num_associated_clients)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Bssids_Bssid_State::release_num_associated_clients() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.num_associated_clients)
  
  ::ywrapper::UintValue* temp = num_associated_clients_;
  num_associated_clients_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Bssids_Bssid_State::mutable_num_associated_clients() {
  
  if (num_associated_clients_ == NULL) {
    num_associated_clients_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.num_associated_clients)
  return num_associated_clients_;
}
inline void Bssids_Bssid_State::set_allocated_num_associated_clients(::ywrapper::UintValue* num_associated_clients) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(num_associated_clients_);
  }
  if (num_associated_clients) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      num_associated_clients = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, num_associated_clients, submessage_arena);
    }
    
  } else {
    
  }
  num_associated_clients_ = num_associated_clients;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.State.num_associated_clients)
}

// -------------------------------------------------------------------

// Bssids_Bssid

// .openconfig.openconfig_wifi_mac.Bssids.Bssid.State state = 10736623 [(.yext.schemapath) = "/bssids/bssid/state"];
inline bool Bssids_Bssid::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Bssids_Bssid::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State& Bssids_Bssid::state() const {
  const ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.Bssid.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State*>(
      &::openconfig::openconfig_wifi_mac::_Bssids_Bssid_State_default_instance_);
}
inline ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State* Bssids_Bssid::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.Bssid.state)
  
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State* Bssids_Bssid::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_wifi_mac::Bssids_Bssid_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.Bssid.state)
  return state_;
}
inline void Bssids_Bssid::set_allocated_state(::openconfig::openconfig_wifi_mac::Bssids_Bssid_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.Bssid.state)
}

// -------------------------------------------------------------------

// Bssids_BssidKey

// string bssid_key = 1 [(.yext.schemapath) = "/bssids/bssid/bssid"];
inline void Bssids_BssidKey::clear_bssid_key() {
  bssid_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Bssids_BssidKey::bssid_key() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.BssidKey.bssid_key)
  return bssid_key_.GetNoArena();
}
inline void Bssids_BssidKey::set_bssid_key(const ::std::string& value) {
  
  bssid_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openconfig.openconfig_wifi_mac.Bssids.BssidKey.bssid_key)
}
#if LANG_CXX11
inline void Bssids_BssidKey::set_bssid_key(::std::string&& value) {
  
  bssid_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openconfig.openconfig_wifi_mac.Bssids.BssidKey.bssid_key)
}
#endif
inline void Bssids_BssidKey::set_bssid_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bssid_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openconfig.openconfig_wifi_mac.Bssids.BssidKey.bssid_key)
}
inline void Bssids_BssidKey::set_bssid_key(const char* value, size_t size) {
  
  bssid_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openconfig.openconfig_wifi_mac.Bssids.BssidKey.bssid_key)
}
inline ::std::string* Bssids_BssidKey::mutable_bssid_key() {
  
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.BssidKey.bssid_key)
  return bssid_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Bssids_BssidKey::release_bssid_key() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.BssidKey.bssid_key)
  
  return bssid_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Bssids_BssidKey::set_allocated_bssid_key(::std::string* bssid_key) {
  if (bssid_key != NULL) {
    
  } else {
    
  }
  bssid_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bssid_key);
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.BssidKey.bssid_key)
}

// .openconfig.openconfig_wifi_mac.Bssids.Bssid bssid = 2;
inline bool Bssids_BssidKey::has_bssid() const {
  return this != internal_default_instance() && bssid_ != NULL;
}
inline void Bssids_BssidKey::clear_bssid() {
  if (GetArenaNoVirtual() == NULL && bssid_ != NULL) {
    delete bssid_;
  }
  bssid_ = NULL;
}
inline const ::openconfig::openconfig_wifi_mac::Bssids_Bssid& Bssids_BssidKey::bssid() const {
  const ::openconfig::openconfig_wifi_mac::Bssids_Bssid* p = bssid_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.BssidKey.bssid)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_mac::Bssids_Bssid*>(
      &::openconfig::openconfig_wifi_mac::_Bssids_Bssid_default_instance_);
}
inline ::openconfig::openconfig_wifi_mac::Bssids_Bssid* Bssids_BssidKey::release_bssid() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Bssids.BssidKey.bssid)
  
  ::openconfig::openconfig_wifi_mac::Bssids_Bssid* temp = bssid_;
  bssid_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_mac::Bssids_Bssid* Bssids_BssidKey::mutable_bssid() {
  
  if (bssid_ == NULL) {
    bssid_ = new ::openconfig::openconfig_wifi_mac::Bssids_Bssid;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.BssidKey.bssid)
  return bssid_;
}
inline void Bssids_BssidKey::set_allocated_bssid(::openconfig::openconfig_wifi_mac::Bssids_Bssid* bssid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bssid_;
  }
  if (bssid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bssid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bssid, submessage_arena);
    }
    
  } else {
    
  }
  bssid_ = bssid;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Bssids.BssidKey.bssid)
}

// -------------------------------------------------------------------

// Bssids

// repeated .openconfig.openconfig_wifi_mac.Bssids.BssidKey bssid = 281271229 [(.yext.schemapath) = "/bssids/bssid"];
inline int Bssids::bssid_size() const {
  return bssid_.size();
}
inline void Bssids::clear_bssid() {
  bssid_.Clear();
}
inline const ::openconfig::openconfig_wifi_mac::Bssids_BssidKey& Bssids::bssid(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Bssids.bssid)
  return bssid_.Get(index);
}
inline ::openconfig::openconfig_wifi_mac::Bssids_BssidKey* Bssids::mutable_bssid(int index) {
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Bssids.bssid)
  return bssid_.Mutable(index);
}
inline ::openconfig::openconfig_wifi_mac::Bssids_BssidKey* Bssids::add_bssid() {
  // @@protoc_insertion_point(field_add:openconfig.openconfig_wifi_mac.Bssids.bssid)
  return bssid_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_wifi_mac::Bssids_BssidKey >*
Bssids::mutable_bssid() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_wifi_mac.Bssids.bssid)
  return &bssid_;
}
inline const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_wifi_mac::Bssids_BssidKey >&
Bssids::bssid() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_wifi_mac.Bssids.bssid)
  return bssid_;
}

// -------------------------------------------------------------------

// Ssids_Ssid_BandSteering_Config

// .ywrapper.BoolValue band_steering = 490062060 [(.yext.schemapath) = "/ssids/ssid/band-steering/config/band-steering"];
inline bool Ssids_Ssid_BandSteering_Config::has_band_steering() const {
  return this != internal_default_instance() && band_steering_ != NULL;
}
inline const ::ywrapper::BoolValue& Ssids_Ssid_BandSteering_Config::band_steering() const {
  const ::ywrapper::BoolValue* p = band_steering_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.Config.band_steering)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Ssids_Ssid_BandSteering_Config::release_band_steering() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.Config.band_steering)
  
  ::ywrapper::BoolValue* temp = band_steering_;
  band_steering_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Ssids_Ssid_BandSteering_Config::mutable_band_steering() {
  
  if (band_steering_ == NULL) {
    band_steering_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.Config.band_steering)
  return band_steering_;
}
inline void Ssids_Ssid_BandSteering_Config::set_allocated_band_steering(::ywrapper::BoolValue* band_steering) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(band_steering_);
  }
  if (band_steering) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      band_steering = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, band_steering, submessage_arena);
    }
    
  } else {
    
  }
  band_steering_ = band_steering;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.Config.band_steering)
}

// .ywrapper.IntValue steering_rssi = 103564288 [(.yext.schemapath) = "/ssids/ssid/band-steering/config/steering-rssi"];
inline bool Ssids_Ssid_BandSteering_Config::has_steering_rssi() const {
  return this != internal_default_instance() && steering_rssi_ != NULL;
}
inline const ::ywrapper::IntValue& Ssids_Ssid_BandSteering_Config::steering_rssi() const {
  const ::ywrapper::IntValue* p = steering_rssi_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.Config.steering_rssi)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::IntValue*>(
      &::ywrapper::_IntValue_default_instance_);
}
inline ::ywrapper::IntValue* Ssids_Ssid_BandSteering_Config::release_steering_rssi() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.Config.steering_rssi)
  
  ::ywrapper::IntValue* temp = steering_rssi_;
  steering_rssi_ = NULL;
  return temp;
}
inline ::ywrapper::IntValue* Ssids_Ssid_BandSteering_Config::mutable_steering_rssi() {
  
  if (steering_rssi_ == NULL) {
    steering_rssi_ = new ::ywrapper::IntValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.Config.steering_rssi)
  return steering_rssi_;
}
inline void Ssids_Ssid_BandSteering_Config::set_allocated_steering_rssi(::ywrapper::IntValue* steering_rssi) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(steering_rssi_);
  }
  if (steering_rssi) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      steering_rssi = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, steering_rssi, submessage_arena);
    }
    
  } else {
    
  }
  steering_rssi_ = steering_rssi;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.Config.steering_rssi)
}

// -------------------------------------------------------------------

// Ssids_Ssid_BandSteering_State

// .ywrapper.BoolValue band_steering = 380350897 [(.yext.schemapath) = "/ssids/ssid/band-steering/state/band-steering"];
inline bool Ssids_Ssid_BandSteering_State::has_band_steering() const {
  return this != internal_default_instance() && band_steering_ != NULL;
}
inline const ::ywrapper::BoolValue& Ssids_Ssid_BandSteering_State::band_steering() const {
  const ::ywrapper::BoolValue* p = band_steering_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.State.band_steering)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Ssids_Ssid_BandSteering_State::release_band_steering() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.State.band_steering)
  
  ::ywrapper::BoolValue* temp = band_steering_;
  band_steering_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Ssids_Ssid_BandSteering_State::mutable_band_steering() {
  
  if (band_steering_ == NULL) {
    band_steering_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.State.band_steering)
  return band_steering_;
}
inline void Ssids_Ssid_BandSteering_State::set_allocated_band_steering(::ywrapper::BoolValue* band_steering) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(band_steering_);
  }
  if (band_steering) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      band_steering = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, band_steering, submessage_arena);
    }
    
  } else {
    
  }
  band_steering_ = band_steering;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.State.band_steering)
}

// .ywrapper.IntValue steering_rssi = 526361865 [(.yext.schemapath) = "/ssids/ssid/band-steering/state/steering-rssi"];
inline bool Ssids_Ssid_BandSteering_State::has_steering_rssi() const {
  return this != internal_default_instance() && steering_rssi_ != NULL;
}
inline const ::ywrapper::IntValue& Ssids_Ssid_BandSteering_State::steering_rssi() const {
  const ::ywrapper::IntValue* p = steering_rssi_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.State.steering_rssi)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::IntValue*>(
      &::ywrapper::_IntValue_default_instance_);
}
inline ::ywrapper::IntValue* Ssids_Ssid_BandSteering_State::release_steering_rssi() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.State.steering_rssi)
  
  ::ywrapper::IntValue* temp = steering_rssi_;
  steering_rssi_ = NULL;
  return temp;
}
inline ::ywrapper::IntValue* Ssids_Ssid_BandSteering_State::mutable_steering_rssi() {
  
  if (steering_rssi_ == NULL) {
    steering_rssi_ = new ::ywrapper::IntValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.State.steering_rssi)
  return steering_rssi_;
}
inline void Ssids_Ssid_BandSteering_State::set_allocated_steering_rssi(::ywrapper::IntValue* steering_rssi) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(steering_rssi_);
  }
  if (steering_rssi) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      steering_rssi = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, steering_rssi, submessage_arena);
    }
    
  } else {
    
  }
  steering_rssi_ = steering_rssi;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.State.steering_rssi)
}

// -------------------------------------------------------------------

// Ssids_Ssid_BandSteering

// .openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.Config config = 250387798 [(.yext.schemapath) = "/ssids/ssid/band-steering/config"];
inline bool Ssids_Ssid_BandSteering::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Ssids_Ssid_BandSteering::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_Config& Ssids_Ssid_BandSteering::config() const {
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_Config*>(
      &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_BandSteering_Config_default_instance_);
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_Config* Ssids_Ssid_BandSteering::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.config)
  
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_Config* Ssids_Ssid_BandSteering::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.config)
  return config_;
}
inline void Ssids_Ssid_BandSteering::set_allocated_config(::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.config)
}

// .openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.State state = 177174019 [(.yext.schemapath) = "/ssids/ssid/band-steering/state"];
inline bool Ssids_Ssid_BandSteering::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Ssids_Ssid_BandSteering::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_State& Ssids_Ssid_BandSteering::state() const {
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_State*>(
      &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_BandSteering_State_default_instance_);
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_State* Ssids_Ssid_BandSteering::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.state)
  
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_State* Ssids_Ssid_BandSteering::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.state)
  return state_;
}
inline void Ssids_Ssid_BandSteering::set_allocated_state(::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering.state)
}

// -------------------------------------------------------------------

// Ssids_Ssid_Clients_Client_ClientCapabilities_State

// repeated .ywrapper.UintValue channel_support = 241576153 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-capabilities/state/channel-support"];
inline int Ssids_Ssid_Clients_Client_ClientCapabilities_State::channel_support_size() const {
  return channel_support_.size();
}
inline const ::ywrapper::UintValue& Ssids_Ssid_Clients_Client_ClientCapabilities_State::channel_support(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities.State.channel_support)
  return channel_support_.Get(index);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Clients_Client_ClientCapabilities_State::mutable_channel_support(int index) {
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities.State.channel_support)
  return channel_support_.Mutable(index);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Clients_Client_ClientCapabilities_State::add_channel_support() {
  // @@protoc_insertion_point(field_add:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities.State.channel_support)
  return channel_support_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >*
Ssids_Ssid_Clients_Client_ClientCapabilities_State::mutable_channel_support() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities.State.channel_support)
  return &channel_support_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >&
Ssids_Ssid_Clients_Client_ClientCapabilities_State::channel_support() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities.State.channel_support)
  return channel_support_;
}

// repeated .openconfig.enums.OpenconfigWifiTypesCLIENTCAPABILITIES client_capabilities = 280277706 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-capabilities/state/client-capabilities"];
inline int Ssids_Ssid_Clients_Client_ClientCapabilities_State::client_capabilities_size() const {
  return client_capabilities_.size();
}
inline void Ssids_Ssid_Clients_Client_ClientCapabilities_State::clear_client_capabilities() {
  client_capabilities_.Clear();
}
inline ::openconfig::enums::OpenconfigWifiTypesCLIENTCAPABILITIES Ssids_Ssid_Clients_Client_ClientCapabilities_State::client_capabilities(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities.State.client_capabilities)
  return static_cast< ::openconfig::enums::OpenconfigWifiTypesCLIENTCAPABILITIES >(client_capabilities_.Get(index));
}
inline void Ssids_Ssid_Clients_Client_ClientCapabilities_State::set_client_capabilities(int index, ::openconfig::enums::OpenconfigWifiTypesCLIENTCAPABILITIES value) {
  client_capabilities_.Set(index, value);
  // @@protoc_insertion_point(field_set:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities.State.client_capabilities)
}
inline void Ssids_Ssid_Clients_Client_ClientCapabilities_State::add_client_capabilities(::openconfig::enums::OpenconfigWifiTypesCLIENTCAPABILITIES value) {
  client_capabilities_.Add(value);
  // @@protoc_insertion_point(field_add:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities.State.client_capabilities)
}
inline const ::google::protobuf::RepeatedField<int>&
Ssids_Ssid_Clients_Client_ClientCapabilities_State::client_capabilities() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities.State.client_capabilities)
  return client_capabilities_;
}
inline ::google::protobuf::RepeatedField<int>*
Ssids_Ssid_Clients_Client_ClientCapabilities_State::mutable_client_capabilities() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities.State.client_capabilities)
  return &client_capabilities_;
}

// -------------------------------------------------------------------

// Ssids_Ssid_Clients_Client_ClientCapabilities

// .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities.State state = 502338319 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-capabilities/state"];
inline bool Ssids_Ssid_Clients_Client_ClientCapabilities::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Ssids_Ssid_Clients_Client_ClientCapabilities::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities_State& Ssids_Ssid_Clients_Client_ClientCapabilities::state() const {
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities_State*>(
      &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_ClientCapabilities_State_default_instance_);
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities_State* Ssids_Ssid_Clients_Client_ClientCapabilities::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities.state)
  
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities_State* Ssids_Ssid_Clients_Client_ClientCapabilities::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities.state)
  return state_;
}
inline void Ssids_Ssid_Clients_Client_ClientCapabilities::set_allocated_state(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities.state)
}

// -------------------------------------------------------------------

// Ssids_Ssid_Clients_Client_ClientConnection_State

// .openconfig.enums.OpenconfigWifiTypesCLIENTSTATE client_state = 12611625 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/client-state"];
inline void Ssids_Ssid_Clients_Client_ClientConnection_State::clear_client_state() {
  client_state_ = 0;
}
inline ::openconfig::enums::OpenconfigWifiTypesCLIENTSTATE Ssids_Ssid_Clients_Client_ClientConnection_State::client_state() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State.client_state)
  return static_cast< ::openconfig::enums::OpenconfigWifiTypesCLIENTSTATE >(client_state_);
}
inline void Ssids_Ssid_Clients_Client_ClientConnection_State::set_client_state(::openconfig::enums::OpenconfigWifiTypesCLIENTSTATE value) {
  
  client_state_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State.client_state)
}

// .ywrapper.UintValue connection_time = 483233146 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/connection-time"];
inline bool Ssids_Ssid_Clients_Client_ClientConnection_State::has_connection_time() const {
  return this != internal_default_instance() && connection_time_ != NULL;
}
inline const ::ywrapper::UintValue& Ssids_Ssid_Clients_Client_ClientConnection_State::connection_time() const {
  const ::ywrapper::UintValue* p = connection_time_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State.connection_time)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Clients_Client_ClientConnection_State::release_connection_time() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State.connection_time)
  
  ::ywrapper::UintValue* temp = connection_time_;
  connection_time_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Ssids_Ssid_Clients_Client_ClientConnection_State::mutable_connection_time() {
  
  if (connection_time_ == NULL) {
    connection_time_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State.connection_time)
  return connection_time_;
}
inline void Ssids_Ssid_Clients_Client_ClientConnection_State::set_allocated_connection_time(::ywrapper::UintValue* connection_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(connection_time_);
  }
  if (connection_time) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      connection_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, connection_time, submessage_arena);
    }
    
  } else {
    
  }
  connection_time_ = connection_time;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State.connection_time)
}

// .ywrapper.StringValue hostname = 159385715 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/hostname"];
inline bool Ssids_Ssid_Clients_Client_ClientConnection_State::has_hostname() const {
  return this != internal_default_instance() && hostname_ != NULL;
}
inline const ::ywrapper::StringValue& Ssids_Ssid_Clients_Client_ClientConnection_State::hostname() const {
  const ::ywrapper::StringValue* p = hostname_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State.hostname)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Ssids_Ssid_Clients_Client_ClientConnection_State::release_hostname() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State.hostname)
  
  ::ywrapper::StringValue* temp = hostname_;
  hostname_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Ssids_Ssid_Clients_Client_ClientConnection_State::mutable_hostname() {
  
  if (hostname_ == NULL) {
    hostname_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State.hostname)
  return hostname_;
}
inline void Ssids_Ssid_Clients_Client_ClientConnection_State::set_allocated_hostname(::ywrapper::StringValue* hostname) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(hostname_);
  }
  if (hostname) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hostname = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hostname, submessage_arena);
    }
    
  } else {
    
  }
  hostname_ = hostname;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State.hostname)
}

// .ywrapper.StringValue ipv4_address = 227044086 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/ipv4-address"];
inline bool Ssids_Ssid_Clients_Client_ClientConnection_State::has_ipv4_address() const {
  return this != internal_default_instance() && ipv4_address_ != NULL;
}
inline const ::ywrapper::StringValue& Ssids_Ssid_Clients_Client_ClientConnection_State::ipv4_address() const {
  const ::ywrapper::StringValue* p = ipv4_address_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State.ipv4_address)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Ssids_Ssid_Clients_Client_ClientConnection_State::release_ipv4_address() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State.ipv4_address)
  
  ::ywrapper::StringValue* temp = ipv4_address_;
  ipv4_address_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Ssids_Ssid_Clients_Client_ClientConnection_State::mutable_ipv4_address() {
  
  if (ipv4_address_ == NULL) {
    ipv4_address_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State.ipv4_address)
  return ipv4_address_;
}
inline void Ssids_Ssid_Clients_Client_ClientConnection_State::set_allocated_ipv4_address(::ywrapper::StringValue* ipv4_address) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ipv4_address_);
  }
  if (ipv4_address) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ipv4_address = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ipv4_address, submessage_arena);
    }
    
  } else {
    
  }
  ipv4_address_ = ipv4_address;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State.ipv4_address)
}

// .ywrapper.StringValue ipv6_address = 168200404 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/ipv6-address"];
inline bool Ssids_Ssid_Clients_Client_ClientConnection_State::has_ipv6_address() const {
  return this != internal_default_instance() && ipv6_address_ != NULL;
}
inline const ::ywrapper::StringValue& Ssids_Ssid_Clients_Client_ClientConnection_State::ipv6_address() const {
  const ::ywrapper::StringValue* p = ipv6_address_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State.ipv6_address)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Ssids_Ssid_Clients_Client_ClientConnection_State::release_ipv6_address() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State.ipv6_address)
  
  ::ywrapper::StringValue* temp = ipv6_address_;
  ipv6_address_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Ssids_Ssid_Clients_Client_ClientConnection_State::mutable_ipv6_address() {
  
  if (ipv6_address_ == NULL) {
    ipv6_address_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State.ipv6_address)
  return ipv6_address_;
}
inline void Ssids_Ssid_Clients_Client_ClientConnection_State::set_allocated_ipv6_address(::ywrapper::StringValue* ipv6_address) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ipv6_address_);
  }
  if (ipv6_address) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ipv6_address = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ipv6_address, submessage_arena);
    }
    
  } else {
    
  }
  ipv6_address_ = ipv6_address;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State.ipv6_address)
}

// .ywrapper.StringValue operating_system = 204114517 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/operating-system"];
inline bool Ssids_Ssid_Clients_Client_ClientConnection_State::has_operating_system() const {
  return this != internal_default_instance() && operating_system_ != NULL;
}
inline const ::ywrapper::StringValue& Ssids_Ssid_Clients_Client_ClientConnection_State::operating_system() const {
  const ::ywrapper::StringValue* p = operating_system_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State.operating_system)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Ssids_Ssid_Clients_Client_ClientConnection_State::release_operating_system() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State.operating_system)
  
  ::ywrapper::StringValue* temp = operating_system_;
  operating_system_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Ssids_Ssid_Clients_Client_ClientConnection_State::mutable_operating_system() {
  
  if (operating_system_ == NULL) {
    operating_system_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State.operating_system)
  return operating_system_;
}
inline void Ssids_Ssid_Clients_Client_ClientConnection_State::set_allocated_operating_system(::ywrapper::StringValue* operating_system) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(operating_system_);
  }
  if (operating_system) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      operating_system = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, operating_system, submessage_arena);
    }
    
  } else {
    
  }
  operating_system_ = operating_system;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State.operating_system)
}

// .ywrapper.StringValue username = 102440552 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state/username"];
inline bool Ssids_Ssid_Clients_Client_ClientConnection_State::has_username() const {
  return this != internal_default_instance() && username_ != NULL;
}
inline const ::ywrapper::StringValue& Ssids_Ssid_Clients_Client_ClientConnection_State::username() const {
  const ::ywrapper::StringValue* p = username_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State.username)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Ssids_Ssid_Clients_Client_ClientConnection_State::release_username() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State.username)
  
  ::ywrapper::StringValue* temp = username_;
  username_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Ssids_Ssid_Clients_Client_ClientConnection_State::mutable_username() {
  
  if (username_ == NULL) {
    username_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State.username)
  return username_;
}
inline void Ssids_Ssid_Clients_Client_ClientConnection_State::set_allocated_username(::ywrapper::StringValue* username) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(username_);
  }
  if (username) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      username = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, username, submessage_arena);
    }
    
  } else {
    
  }
  username_ = username;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State.username)
}

// -------------------------------------------------------------------

// Ssids_Ssid_Clients_Client_ClientConnection

// .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.State state = 303644037 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection/state"];
inline bool Ssids_Ssid_Clients_Client_ClientConnection::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Ssids_Ssid_Clients_Client_ClientConnection::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection_State& Ssids_Ssid_Clients_Client_ClientConnection::state() const {
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection_State*>(
      &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_ClientConnection_State_default_instance_);
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection_State* Ssids_Ssid_Clients_Client_ClientConnection::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.state)
  
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection_State* Ssids_Ssid_Clients_Client_ClientConnection::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.state)
  return state_;
}
inline void Ssids_Ssid_Clients_Client_ClientConnection::set_allocated_state(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection.state)
}

// -------------------------------------------------------------------

// Ssids_Ssid_Clients_Client_ClientRf_State

// .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State.ConnectionMode connection_mode = 239140312 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state/connection-mode"];
inline void Ssids_Ssid_Clients_Client_ClientRf_State::clear_connection_mode() {
  connection_mode_ = 0;
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode Ssids_Ssid_Clients_Client_ClientRf_State::connection_mode() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State.connection_mode)
  return static_cast< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode >(connection_mode_);
}
inline void Ssids_Ssid_Clients_Client_ClientRf_State::set_connection_mode(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode value) {
  
  connection_mode_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State.connection_mode)
}

// .ywrapper.UintValue frequency = 89735306 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state/frequency"];
inline bool Ssids_Ssid_Clients_Client_ClientRf_State::has_frequency() const {
  return this != internal_default_instance() && frequency_ != NULL;
}
inline const ::ywrapper::UintValue& Ssids_Ssid_Clients_Client_ClientRf_State::frequency() const {
  const ::ywrapper::UintValue* p = frequency_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State.frequency)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Clients_Client_ClientRf_State::release_frequency() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State.frequency)
  
  ::ywrapper::UintValue* temp = frequency_;
  frequency_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Ssids_Ssid_Clients_Client_ClientRf_State::mutable_frequency() {
  
  if (frequency_ == NULL) {
    frequency_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State.frequency)
  return frequency_;
}
inline void Ssids_Ssid_Clients_Client_ClientRf_State::set_allocated_frequency(::ywrapper::UintValue* frequency) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(frequency_);
  }
  if (frequency) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      frequency = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, frequency, submessage_arena);
    }
    
  } else {
    
  }
  frequency_ = frequency;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State.frequency)
}

// .ywrapper.UintValue phy_rate = 110227624 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state/phy-rate"];
inline bool Ssids_Ssid_Clients_Client_ClientRf_State::has_phy_rate() const {
  return this != internal_default_instance() && phy_rate_ != NULL;
}
inline const ::ywrapper::UintValue& Ssids_Ssid_Clients_Client_ClientRf_State::phy_rate() const {
  const ::ywrapper::UintValue* p = phy_rate_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State.phy_rate)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Clients_Client_ClientRf_State::release_phy_rate() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State.phy_rate)
  
  ::ywrapper::UintValue* temp = phy_rate_;
  phy_rate_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Ssids_Ssid_Clients_Client_ClientRf_State::mutable_phy_rate() {
  
  if (phy_rate_ == NULL) {
    phy_rate_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State.phy_rate)
  return phy_rate_;
}
inline void Ssids_Ssid_Clients_Client_ClientRf_State::set_allocated_phy_rate(::ywrapper::UintValue* phy_rate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(phy_rate_);
  }
  if (phy_rate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      phy_rate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, phy_rate, submessage_arena);
    }
    
  } else {
    
  }
  phy_rate_ = phy_rate;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State.phy_rate)
}

// .ywrapper.IntValue rssi = 82312397 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state/rssi"];
inline bool Ssids_Ssid_Clients_Client_ClientRf_State::has_rssi() const {
  return this != internal_default_instance() && rssi_ != NULL;
}
inline const ::ywrapper::IntValue& Ssids_Ssid_Clients_Client_ClientRf_State::rssi() const {
  const ::ywrapper::IntValue* p = rssi_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State.rssi)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::IntValue*>(
      &::ywrapper::_IntValue_default_instance_);
}
inline ::ywrapper::IntValue* Ssids_Ssid_Clients_Client_ClientRf_State::release_rssi() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State.rssi)
  
  ::ywrapper::IntValue* temp = rssi_;
  rssi_ = NULL;
  return temp;
}
inline ::ywrapper::IntValue* Ssids_Ssid_Clients_Client_ClientRf_State::mutable_rssi() {
  
  if (rssi_ == NULL) {
    rssi_ = new ::ywrapper::IntValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State.rssi)
  return rssi_;
}
inline void Ssids_Ssid_Clients_Client_ClientRf_State::set_allocated_rssi(::ywrapper::IntValue* rssi) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rssi_);
  }
  if (rssi) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rssi = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rssi, submessage_arena);
    }
    
  } else {
    
  }
  rssi_ = rssi;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State.rssi)
}

// .ywrapper.UintValue snr = 344175863 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state/snr"];
inline bool Ssids_Ssid_Clients_Client_ClientRf_State::has_snr() const {
  return this != internal_default_instance() && snr_ != NULL;
}
inline const ::ywrapper::UintValue& Ssids_Ssid_Clients_Client_ClientRf_State::snr() const {
  const ::ywrapper::UintValue* p = snr_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State.snr)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Clients_Client_ClientRf_State::release_snr() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State.snr)
  
  ::ywrapper::UintValue* temp = snr_;
  snr_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Ssids_Ssid_Clients_Client_ClientRf_State::mutable_snr() {
  
  if (snr_ == NULL) {
    snr_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State.snr)
  return snr_;
}
inline void Ssids_Ssid_Clients_Client_ClientRf_State::set_allocated_snr(::ywrapper::UintValue* snr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(snr_);
  }
  if (snr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      snr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, snr, submessage_arena);
    }
    
  } else {
    
  }
  snr_ = snr;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State.snr)
}

// .ywrapper.UintValue ss = 297640090 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state/ss"];
inline bool Ssids_Ssid_Clients_Client_ClientRf_State::has_ss() const {
  return this != internal_default_instance() && ss_ != NULL;
}
inline const ::ywrapper::UintValue& Ssids_Ssid_Clients_Client_ClientRf_State::ss() const {
  const ::ywrapper::UintValue* p = ss_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State.ss)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Clients_Client_ClientRf_State::release_ss() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State.ss)
  
  ::ywrapper::UintValue* temp = ss_;
  ss_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Ssids_Ssid_Clients_Client_ClientRf_State::mutable_ss() {
  
  if (ss_ == NULL) {
    ss_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State.ss)
  return ss_;
}
inline void Ssids_Ssid_Clients_Client_ClientRf_State::set_allocated_ss(::ywrapper::UintValue* ss) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ss_);
  }
  if (ss) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ss = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ss, submessage_arena);
    }
    
  } else {
    
  }
  ss_ = ss;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State.ss)
}

// -------------------------------------------------------------------

// Ssids_Ssid_Clients_Client_ClientRf

// .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.State state = 103238677 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf/state"];
inline bool Ssids_Ssid_Clients_Client_ClientRf::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Ssids_Ssid_Clients_Client_ClientRf::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf_State& Ssids_Ssid_Clients_Client_ClientRf::state() const {
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf_State*>(
      &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_ClientRf_State_default_instance_);
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf_State* Ssids_Ssid_Clients_Client_ClientRf::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.state)
  
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf_State* Ssids_Ssid_Clients_Client_ClientRf::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.state)
  return state_;
}
inline void Ssids_Ssid_Clients_Client_ClientRf::set_allocated_state(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf.state)
}

// -------------------------------------------------------------------

// Ssids_Ssid_Clients_Client_Dot11KNeighbors_State

// .ywrapper.UintValue channel_load_report = 177485393 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors/state/channel-load-report"];
inline bool Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::has_channel_load_report() const {
  return this != internal_default_instance() && channel_load_report_ != NULL;
}
inline const ::ywrapper::UintValue& Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::channel_load_report() const {
  const ::ywrapper::UintValue* p = channel_load_report_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State.channel_load_report)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::release_channel_load_report() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State.channel_load_report)
  
  ::ywrapper::UintValue* temp = channel_load_report_;
  channel_load_report_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::mutable_channel_load_report() {
  
  if (channel_load_report_ == NULL) {
    channel_load_report_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State.channel_load_report)
  return channel_load_report_;
}
inline void Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::set_allocated_channel_load_report(::ywrapper::UintValue* channel_load_report) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(channel_load_report_);
  }
  if (channel_load_report) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      channel_load_report = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, channel_load_report, submessage_arena);
    }
    
  } else {
    
  }
  channel_load_report_ = channel_load_report;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State.channel_load_report)
}

// .ywrapper.UintValue neighbor_antenna = 490954216 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors/state/neighbor-antenna"];
inline bool Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::has_neighbor_antenna() const {
  return this != internal_default_instance() && neighbor_antenna_ != NULL;
}
inline const ::ywrapper::UintValue& Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::neighbor_antenna() const {
  const ::ywrapper::UintValue* p = neighbor_antenna_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State.neighbor_antenna)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::release_neighbor_antenna() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State.neighbor_antenna)
  
  ::ywrapper::UintValue* temp = neighbor_antenna_;
  neighbor_antenna_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::mutable_neighbor_antenna() {
  
  if (neighbor_antenna_ == NULL) {
    neighbor_antenna_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State.neighbor_antenna)
  return neighbor_antenna_;
}
inline void Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::set_allocated_neighbor_antenna(::ywrapper::UintValue* neighbor_antenna) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(neighbor_antenna_);
  }
  if (neighbor_antenna) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      neighbor_antenna = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, neighbor_antenna, submessage_arena);
    }
    
  } else {
    
  }
  neighbor_antenna_ = neighbor_antenna;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State.neighbor_antenna)
}

// .ywrapper.StringValue neighbor_bssid = 362323378 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors/state/neighbor-bssid"];
inline bool Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::has_neighbor_bssid() const {
  return this != internal_default_instance() && neighbor_bssid_ != NULL;
}
inline const ::ywrapper::StringValue& Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::neighbor_bssid() const {
  const ::ywrapper::StringValue* p = neighbor_bssid_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State.neighbor_bssid)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::release_neighbor_bssid() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State.neighbor_bssid)
  
  ::ywrapper::StringValue* temp = neighbor_bssid_;
  neighbor_bssid_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::mutable_neighbor_bssid() {
  
  if (neighbor_bssid_ == NULL) {
    neighbor_bssid_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State.neighbor_bssid)
  return neighbor_bssid_;
}
inline void Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::set_allocated_neighbor_bssid(::ywrapper::StringValue* neighbor_bssid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(neighbor_bssid_);
  }
  if (neighbor_bssid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      neighbor_bssid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, neighbor_bssid, submessage_arena);
    }
    
  } else {
    
  }
  neighbor_bssid_ = neighbor_bssid;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State.neighbor_bssid)
}

// .ywrapper.UintValue neighbor_channel = 333603412 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors/state/neighbor-channel"];
inline bool Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::has_neighbor_channel() const {
  return this != internal_default_instance() && neighbor_channel_ != NULL;
}
inline const ::ywrapper::UintValue& Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::neighbor_channel() const {
  const ::ywrapper::UintValue* p = neighbor_channel_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State.neighbor_channel)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::release_neighbor_channel() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State.neighbor_channel)
  
  ::ywrapper::UintValue* temp = neighbor_channel_;
  neighbor_channel_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::mutable_neighbor_channel() {
  
  if (neighbor_channel_ == NULL) {
    neighbor_channel_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State.neighbor_channel)
  return neighbor_channel_;
}
inline void Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::set_allocated_neighbor_channel(::ywrapper::UintValue* neighbor_channel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(neighbor_channel_);
  }
  if (neighbor_channel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      neighbor_channel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, neighbor_channel, submessage_arena);
    }
    
  } else {
    
  }
  neighbor_channel_ = neighbor_channel;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State.neighbor_channel)
}

// .ywrapper.IntValue neighbor_rssi = 162709186 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors/state/neighbor-rssi"];
inline bool Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::has_neighbor_rssi() const {
  return this != internal_default_instance() && neighbor_rssi_ != NULL;
}
inline const ::ywrapper::IntValue& Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::neighbor_rssi() const {
  const ::ywrapper::IntValue* p = neighbor_rssi_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State.neighbor_rssi)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::IntValue*>(
      &::ywrapper::_IntValue_default_instance_);
}
inline ::ywrapper::IntValue* Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::release_neighbor_rssi() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State.neighbor_rssi)
  
  ::ywrapper::IntValue* temp = neighbor_rssi_;
  neighbor_rssi_ = NULL;
  return temp;
}
inline ::ywrapper::IntValue* Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::mutable_neighbor_rssi() {
  
  if (neighbor_rssi_ == NULL) {
    neighbor_rssi_ = new ::ywrapper::IntValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State.neighbor_rssi)
  return neighbor_rssi_;
}
inline void Ssids_Ssid_Clients_Client_Dot11KNeighbors_State::set_allocated_neighbor_rssi(::ywrapper::IntValue* neighbor_rssi) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(neighbor_rssi_);
  }
  if (neighbor_rssi) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      neighbor_rssi = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, neighbor_rssi, submessage_arena);
    }
    
  } else {
    
  }
  neighbor_rssi_ = neighbor_rssi;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State.neighbor_rssi)
}

// -------------------------------------------------------------------

// Ssids_Ssid_Clients_Client_Dot11KNeighbors

// .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.State state = 119848253 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors/state"];
inline bool Ssids_Ssid_Clients_Client_Dot11KNeighbors::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Ssids_Ssid_Clients_Client_Dot11KNeighbors::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors_State& Ssids_Ssid_Clients_Client_Dot11KNeighbors::state() const {
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors_State*>(
      &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State_default_instance_);
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors_State* Ssids_Ssid_Clients_Client_Dot11KNeighbors::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.state)
  
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors_State* Ssids_Ssid_Clients_Client_Dot11KNeighbors::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.state)
  return state_;
}
inline void Ssids_Ssid_Clients_Client_Dot11KNeighbors::set_allocated_state(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors.state)
}

// -------------------------------------------------------------------

// Ssids_Ssid_Clients_Client_State_Counters

// .ywrapper.UintValue rx_bytes = 495845557 [(.yext.schemapath) = "/ssids/ssid/clients/client/state/counters/rx-bytes"];
inline bool Ssids_Ssid_Clients_Client_State_Counters::has_rx_bytes() const {
  return this != internal_default_instance() && rx_bytes_ != NULL;
}
inline const ::ywrapper::UintValue& Ssids_Ssid_Clients_Client_State_Counters::rx_bytes() const {
  const ::ywrapper::UintValue* p = rx_bytes_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters.rx_bytes)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Clients_Client_State_Counters::release_rx_bytes() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters.rx_bytes)
  
  ::ywrapper::UintValue* temp = rx_bytes_;
  rx_bytes_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Ssids_Ssid_Clients_Client_State_Counters::mutable_rx_bytes() {
  
  if (rx_bytes_ == NULL) {
    rx_bytes_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters.rx_bytes)
  return rx_bytes_;
}
inline void Ssids_Ssid_Clients_Client_State_Counters::set_allocated_rx_bytes(::ywrapper::UintValue* rx_bytes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rx_bytes_);
  }
  if (rx_bytes) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rx_bytes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rx_bytes, submessage_arena);
    }
    
  } else {
    
  }
  rx_bytes_ = rx_bytes;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters.rx_bytes)
}

// .ywrapper.UintValue rx_retries = 189738762 [(.yext.schemapath) = "/ssids/ssid/clients/client/state/counters/rx-retries"];
inline bool Ssids_Ssid_Clients_Client_State_Counters::has_rx_retries() const {
  return this != internal_default_instance() && rx_retries_ != NULL;
}
inline const ::ywrapper::UintValue& Ssids_Ssid_Clients_Client_State_Counters::rx_retries() const {
  const ::ywrapper::UintValue* p = rx_retries_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters.rx_retries)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Clients_Client_State_Counters::release_rx_retries() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters.rx_retries)
  
  ::ywrapper::UintValue* temp = rx_retries_;
  rx_retries_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Ssids_Ssid_Clients_Client_State_Counters::mutable_rx_retries() {
  
  if (rx_retries_ == NULL) {
    rx_retries_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters.rx_retries)
  return rx_retries_;
}
inline void Ssids_Ssid_Clients_Client_State_Counters::set_allocated_rx_retries(::ywrapper::UintValue* rx_retries) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rx_retries_);
  }
  if (rx_retries) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rx_retries = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rx_retries, submessage_arena);
    }
    
  } else {
    
  }
  rx_retries_ = rx_retries;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters.rx_retries)
}

// .ywrapper.UintValue tx_bytes = 23313743 [(.yext.schemapath) = "/ssids/ssid/clients/client/state/counters/tx-bytes"];
inline bool Ssids_Ssid_Clients_Client_State_Counters::has_tx_bytes() const {
  return this != internal_default_instance() && tx_bytes_ != NULL;
}
inline const ::ywrapper::UintValue& Ssids_Ssid_Clients_Client_State_Counters::tx_bytes() const {
  const ::ywrapper::UintValue* p = tx_bytes_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters.tx_bytes)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Clients_Client_State_Counters::release_tx_bytes() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters.tx_bytes)
  
  ::ywrapper::UintValue* temp = tx_bytes_;
  tx_bytes_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Ssids_Ssid_Clients_Client_State_Counters::mutable_tx_bytes() {
  
  if (tx_bytes_ == NULL) {
    tx_bytes_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters.tx_bytes)
  return tx_bytes_;
}
inline void Ssids_Ssid_Clients_Client_State_Counters::set_allocated_tx_bytes(::ywrapper::UintValue* tx_bytes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(tx_bytes_);
  }
  if (tx_bytes) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tx_bytes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx_bytes, submessage_arena);
    }
    
  } else {
    
  }
  tx_bytes_ = tx_bytes;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters.tx_bytes)
}

// .ywrapper.UintValue tx_retries = 98702232 [(.yext.schemapath) = "/ssids/ssid/clients/client/state/counters/tx-retries"];
inline bool Ssids_Ssid_Clients_Client_State_Counters::has_tx_retries() const {
  return this != internal_default_instance() && tx_retries_ != NULL;
}
inline const ::ywrapper::UintValue& Ssids_Ssid_Clients_Client_State_Counters::tx_retries() const {
  const ::ywrapper::UintValue* p = tx_retries_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters.tx_retries)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Clients_Client_State_Counters::release_tx_retries() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters.tx_retries)
  
  ::ywrapper::UintValue* temp = tx_retries_;
  tx_retries_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Ssids_Ssid_Clients_Client_State_Counters::mutable_tx_retries() {
  
  if (tx_retries_ == NULL) {
    tx_retries_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters.tx_retries)
  return tx_retries_;
}
inline void Ssids_Ssid_Clients_Client_State_Counters::set_allocated_tx_retries(::ywrapper::UintValue* tx_retries) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(tx_retries_);
  }
  if (tx_retries) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tx_retries = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx_retries, submessage_arena);
    }
    
  } else {
    
  }
  tx_retries_ = tx_retries;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters.tx_retries)
}

// -------------------------------------------------------------------

// Ssids_Ssid_Clients_Client_State

// .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.Counters counters = 481400498 [(.yext.schemapath) = "/ssids/ssid/clients/client/state/counters"];
inline bool Ssids_Ssid_Clients_Client_State::has_counters() const {
  return this != internal_default_instance() && counters_ != NULL;
}
inline void Ssids_Ssid_Clients_Client_State::clear_counters() {
  if (GetArenaNoVirtual() == NULL && counters_ != NULL) {
    delete counters_;
  }
  counters_ = NULL;
}
inline const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State_Counters& Ssids_Ssid_Clients_Client_State::counters() const {
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State_Counters* p = counters_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.counters)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State_Counters*>(
      &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_State_Counters_default_instance_);
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State_Counters* Ssids_Ssid_Clients_Client_State::release_counters() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.counters)
  
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State_Counters* temp = counters_;
  counters_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State_Counters* Ssids_Ssid_Clients_Client_State::mutable_counters() {
  
  if (counters_ == NULL) {
    counters_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State_Counters;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.counters)
  return counters_;
}
inline void Ssids_Ssid_Clients_Client_State::set_allocated_counters(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State_Counters* counters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete counters_;
  }
  if (counters) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      counters = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, counters, submessage_arena);
    }
    
  } else {
    
  }
  counters_ = counters;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.counters)
}

// .ywrapper.StringValue mac = 199348678 [(.yext.schemapath) = "/ssids/ssid/clients/client/state/mac"];
inline bool Ssids_Ssid_Clients_Client_State::has_mac() const {
  return this != internal_default_instance() && mac_ != NULL;
}
inline const ::ywrapper::StringValue& Ssids_Ssid_Clients_Client_State::mac() const {
  const ::ywrapper::StringValue* p = mac_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.mac)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Ssids_Ssid_Clients_Client_State::release_mac() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.mac)
  
  ::ywrapper::StringValue* temp = mac_;
  mac_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Ssids_Ssid_Clients_Client_State::mutable_mac() {
  
  if (mac_ == NULL) {
    mac_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.mac)
  return mac_;
}
inline void Ssids_Ssid_Clients_Client_State::set_allocated_mac(::ywrapper::StringValue* mac) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mac_);
  }
  if (mac) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mac = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mac, submessage_arena);
    }
    
  } else {
    
  }
  mac_ = mac;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State.mac)
}

// -------------------------------------------------------------------

// Ssids_Ssid_Clients_Client

// .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientCapabilities client_capabilities = 174011229 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-capabilities"];
inline bool Ssids_Ssid_Clients_Client::has_client_capabilities() const {
  return this != internal_default_instance() && client_capabilities_ != NULL;
}
inline void Ssids_Ssid_Clients_Client::clear_client_capabilities() {
  if (GetArenaNoVirtual() == NULL && client_capabilities_ != NULL) {
    delete client_capabilities_;
  }
  client_capabilities_ = NULL;
}
inline const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities& Ssids_Ssid_Clients_Client::client_capabilities() const {
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities* p = client_capabilities_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.client_capabilities)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities*>(
      &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_ClientCapabilities_default_instance_);
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities* Ssids_Ssid_Clients_Client::release_client_capabilities() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.client_capabilities)
  
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities* temp = client_capabilities_;
  client_capabilities_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities* Ssids_Ssid_Clients_Client::mutable_client_capabilities() {
  
  if (client_capabilities_ == NULL) {
    client_capabilities_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.client_capabilities)
  return client_capabilities_;
}
inline void Ssids_Ssid_Clients_Client::set_allocated_client_capabilities(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientCapabilities* client_capabilities) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete client_capabilities_;
  }
  if (client_capabilities) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      client_capabilities = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, client_capabilities, submessage_arena);
    }
    
  } else {
    
  }
  client_capabilities_ = client_capabilities;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.client_capabilities)
}

// .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientConnection client_connection = 525041115 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-connection"];
inline bool Ssids_Ssid_Clients_Client::has_client_connection() const {
  return this != internal_default_instance() && client_connection_ != NULL;
}
inline void Ssids_Ssid_Clients_Client::clear_client_connection() {
  if (GetArenaNoVirtual() == NULL && client_connection_ != NULL) {
    delete client_connection_;
  }
  client_connection_ = NULL;
}
inline const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection& Ssids_Ssid_Clients_Client::client_connection() const {
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection* p = client_connection_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.client_connection)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection*>(
      &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_ClientConnection_default_instance_);
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection* Ssids_Ssid_Clients_Client::release_client_connection() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.client_connection)
  
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection* temp = client_connection_;
  client_connection_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection* Ssids_Ssid_Clients_Client::mutable_client_connection() {
  
  if (client_connection_ == NULL) {
    client_connection_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.client_connection)
  return client_connection_;
}
inline void Ssids_Ssid_Clients_Client::set_allocated_client_connection(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientConnection* client_connection) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete client_connection_;
  }
  if (client_connection) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      client_connection = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, client_connection, submessage_arena);
    }
    
  } else {
    
  }
  client_connection_ = client_connection;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.client_connection)
}

// .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.ClientRf client_rf = 340039371 [(.yext.schemapath) = "/ssids/ssid/clients/client/client-rf"];
inline bool Ssids_Ssid_Clients_Client::has_client_rf() const {
  return this != internal_default_instance() && client_rf_ != NULL;
}
inline void Ssids_Ssid_Clients_Client::clear_client_rf() {
  if (GetArenaNoVirtual() == NULL && client_rf_ != NULL) {
    delete client_rf_;
  }
  client_rf_ = NULL;
}
inline const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf& Ssids_Ssid_Clients_Client::client_rf() const {
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf* p = client_rf_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.client_rf)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf*>(
      &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_ClientRf_default_instance_);
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf* Ssids_Ssid_Clients_Client::release_client_rf() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.client_rf)
  
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf* temp = client_rf_;
  client_rf_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf* Ssids_Ssid_Clients_Client::mutable_client_rf() {
  
  if (client_rf_ == NULL) {
    client_rf_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.client_rf)
  return client_rf_;
}
inline void Ssids_Ssid_Clients_Client::set_allocated_client_rf(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf* client_rf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete client_rf_;
  }
  if (client_rf) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      client_rf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, client_rf, submessage_arena);
    }
    
  } else {
    
  }
  client_rf_ = client_rf;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.client_rf)
}

// .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.Dot11KNeighbors dot11k_neighbors = 485662115 [(.yext.schemapath) = "/ssids/ssid/clients/client/dot11k-neighbors"];
inline bool Ssids_Ssid_Clients_Client::has_dot11k_neighbors() const {
  return this != internal_default_instance() && dot11k_neighbors_ != NULL;
}
inline void Ssids_Ssid_Clients_Client::clear_dot11k_neighbors() {
  if (GetArenaNoVirtual() == NULL && dot11k_neighbors_ != NULL) {
    delete dot11k_neighbors_;
  }
  dot11k_neighbors_ = NULL;
}
inline const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors& Ssids_Ssid_Clients_Client::dot11k_neighbors() const {
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors* p = dot11k_neighbors_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.dot11k_neighbors)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors*>(
      &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_Dot11KNeighbors_default_instance_);
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors* Ssids_Ssid_Clients_Client::release_dot11k_neighbors() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.dot11k_neighbors)
  
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors* temp = dot11k_neighbors_;
  dot11k_neighbors_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors* Ssids_Ssid_Clients_Client::mutable_dot11k_neighbors() {
  
  if (dot11k_neighbors_ == NULL) {
    dot11k_neighbors_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.dot11k_neighbors)
  return dot11k_neighbors_;
}
inline void Ssids_Ssid_Clients_Client::set_allocated_dot11k_neighbors(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_Dot11KNeighbors* dot11k_neighbors) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dot11k_neighbors_;
  }
  if (dot11k_neighbors) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dot11k_neighbors = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dot11k_neighbors, submessage_arena);
    }
    
  } else {
    
  }
  dot11k_neighbors_ = dot11k_neighbors;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.dot11k_neighbors)
}

// .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.State state = 71274334 [(.yext.schemapath) = "/ssids/ssid/clients/client/state"];
inline bool Ssids_Ssid_Clients_Client::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Ssids_Ssid_Clients_Client::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State& Ssids_Ssid_Clients_Client::state() const {
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State*>(
      &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_State_default_instance_);
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State* Ssids_Ssid_Clients_Client::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.state)
  
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State* Ssids_Ssid_Clients_Client::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.state)
  return state_;
}
inline void Ssids_Ssid_Clients_Client::set_allocated_state(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client.state)
}

// -------------------------------------------------------------------

// Ssids_Ssid_Clients_ClientKey

// string mac = 1 [(.yext.schemapath) = "/ssids/ssid/clients/client/mac"];
inline void Ssids_Ssid_Clients_ClientKey::clear_mac() {
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Ssids_Ssid_Clients_ClientKey::mac() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey.mac)
  return mac_.GetNoArena();
}
inline void Ssids_Ssid_Clients_ClientKey::set_mac(const ::std::string& value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey.mac)
}
#if LANG_CXX11
inline void Ssids_Ssid_Clients_ClientKey::set_mac(::std::string&& value) {
  
  mac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey.mac)
}
#endif
inline void Ssids_Ssid_Clients_ClientKey::set_mac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey.mac)
}
inline void Ssids_Ssid_Clients_ClientKey::set_mac(const char* value, size_t size) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey.mac)
}
inline ::std::string* Ssids_Ssid_Clients_ClientKey::mutable_mac() {
  
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey.mac)
  return mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Ssids_Ssid_Clients_ClientKey::release_mac() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey.mac)
  
  return mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Ssids_Ssid_Clients_ClientKey::set_allocated_mac(::std::string* mac) {
  if (mac != NULL) {
    
  } else {
    
  }
  mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey.mac)
}

// .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.Client client = 2;
inline bool Ssids_Ssid_Clients_ClientKey::has_client() const {
  return this != internal_default_instance() && client_ != NULL;
}
inline void Ssids_Ssid_Clients_ClientKey::clear_client() {
  if (GetArenaNoVirtual() == NULL && client_ != NULL) {
    delete client_;
  }
  client_ = NULL;
}
inline const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client& Ssids_Ssid_Clients_ClientKey::client() const {
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client* p = client_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey.client)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client*>(
      &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_Client_default_instance_);
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client* Ssids_Ssid_Clients_ClientKey::release_client() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey.client)
  
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client* temp = client_;
  client_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client* Ssids_Ssid_Clients_ClientKey::mutable_client() {
  
  if (client_ == NULL) {
    client_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey.client)
  return client_;
}
inline void Ssids_Ssid_Clients_ClientKey::set_allocated_client(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client* client) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete client_;
  }
  if (client) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      client = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, client, submessage_arena);
    }
    
  } else {
    
  }
  client_ = client;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey.client)
}

// -------------------------------------------------------------------

// Ssids_Ssid_Clients

// repeated .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.ClientKey client = 197622244 [(.yext.schemapath) = "/ssids/ssid/clients/client"];
inline int Ssids_Ssid_Clients::client_size() const {
  return client_.size();
}
inline void Ssids_Ssid_Clients::clear_client() {
  client_.Clear();
}
inline const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_ClientKey& Ssids_Ssid_Clients::client(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.client)
  return client_.Get(index);
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_ClientKey* Ssids_Ssid_Clients::mutable_client(int index) {
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.client)
  return client_.Mutable(index);
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_ClientKey* Ssids_Ssid_Clients::add_client() {
  // @@protoc_insertion_point(field_add:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.client)
  return client_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_ClientKey >*
Ssids_Ssid_Clients::mutable_client() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.client)
  return &client_;
}
inline const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_ClientKey >&
Ssids_Ssid_Clients::client() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients.client)
  return client_;
}

// -------------------------------------------------------------------

// Ssids_Ssid_Config

// .ywrapper.BoolValue advertise_apname = 192650365 [(.yext.schemapath) = "/ssids/ssid/config/advertise-apname"];
inline bool Ssids_Ssid_Config::has_advertise_apname() const {
  return this != internal_default_instance() && advertise_apname_ != NULL;
}
inline const ::ywrapper::BoolValue& Ssids_Ssid_Config::advertise_apname() const {
  const ::ywrapper::BoolValue* p = advertise_apname_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.advertise_apname)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Config::release_advertise_apname() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.advertise_apname)
  
  ::ywrapper::BoolValue* temp = advertise_apname_;
  advertise_apname_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Config::mutable_advertise_apname() {
  
  if (advertise_apname_ == NULL) {
    advertise_apname_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.advertise_apname)
  return advertise_apname_;
}
inline void Ssids_Ssid_Config::set_allocated_advertise_apname(::ywrapper::BoolValue* advertise_apname) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(advertise_apname_);
  }
  if (advertise_apname) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      advertise_apname = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, advertise_apname, submessage_arena);
    }
    
  } else {
    
  }
  advertise_apname_ = advertise_apname;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.advertise_apname)
}

// repeated .openconfig.enums.OpenconfigWifiTypesDATARATE basic_data_rates = 96025474 [(.yext.schemapath) = "/ssids/ssid/config/basic-data-rates"];
inline int Ssids_Ssid_Config::basic_data_rates_size() const {
  return basic_data_rates_.size();
}
inline void Ssids_Ssid_Config::clear_basic_data_rates() {
  basic_data_rates_.Clear();
}
inline ::openconfig::enums::OpenconfigWifiTypesDATARATE Ssids_Ssid_Config::basic_data_rates(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.basic_data_rates)
  return static_cast< ::openconfig::enums::OpenconfigWifiTypesDATARATE >(basic_data_rates_.Get(index));
}
inline void Ssids_Ssid_Config::set_basic_data_rates(int index, ::openconfig::enums::OpenconfigWifiTypesDATARATE value) {
  basic_data_rates_.Set(index, value);
  // @@protoc_insertion_point(field_set:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.basic_data_rates)
}
inline void Ssids_Ssid_Config::add_basic_data_rates(::openconfig::enums::OpenconfigWifiTypesDATARATE value) {
  basic_data_rates_.Add(value);
  // @@protoc_insertion_point(field_add:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.basic_data_rates)
}
inline const ::google::protobuf::RepeatedField<int>&
Ssids_Ssid_Config::basic_data_rates() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.basic_data_rates)
  return basic_data_rates_;
}
inline ::google::protobuf::RepeatedField<int>*
Ssids_Ssid_Config::mutable_basic_data_rates() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.basic_data_rates)
  return &basic_data_rates_;
}

// .ywrapper.BoolValue broadcast_filter = 291022387 [(.yext.schemapath) = "/ssids/ssid/config/broadcast-filter"];
inline bool Ssids_Ssid_Config::has_broadcast_filter() const {
  return this != internal_default_instance() && broadcast_filter_ != NULL;
}
inline const ::ywrapper::BoolValue& Ssids_Ssid_Config::broadcast_filter() const {
  const ::ywrapper::BoolValue* p = broadcast_filter_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.broadcast_filter)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Config::release_broadcast_filter() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.broadcast_filter)
  
  ::ywrapper::BoolValue* temp = broadcast_filter_;
  broadcast_filter_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Config::mutable_broadcast_filter() {
  
  if (broadcast_filter_ == NULL) {
    broadcast_filter_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.broadcast_filter)
  return broadcast_filter_;
}
inline void Ssids_Ssid_Config::set_allocated_broadcast_filter(::ywrapper::BoolValue* broadcast_filter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(broadcast_filter_);
  }
  if (broadcast_filter) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      broadcast_filter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, broadcast_filter, submessage_arena);
    }
    
  } else {
    
  }
  broadcast_filter_ = broadcast_filter;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.broadcast_filter)
}

// .ywrapper.BoolValue csa = 247811686 [(.yext.schemapath) = "/ssids/ssid/config/csa"];
inline bool Ssids_Ssid_Config::has_csa() const {
  return this != internal_default_instance() && csa_ != NULL;
}
inline const ::ywrapper::BoolValue& Ssids_Ssid_Config::csa() const {
  const ::ywrapper::BoolValue* p = csa_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.csa)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Config::release_csa() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.csa)
  
  ::ywrapper::BoolValue* temp = csa_;
  csa_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Config::mutable_csa() {
  
  if (csa_ == NULL) {
    csa_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.csa)
  return csa_;
}
inline void Ssids_Ssid_Config::set_allocated_csa(::ywrapper::BoolValue* csa) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(csa_);
  }
  if (csa) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      csa = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, csa, submessage_arena);
    }
    
  } else {
    
  }
  csa_ = csa;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.csa)
}

// .ywrapper.BoolValue dhcp_required = 330477468 [(.yext.schemapath) = "/ssids/ssid/config/dhcp-required"];
inline bool Ssids_Ssid_Config::has_dhcp_required() const {
  return this != internal_default_instance() && dhcp_required_ != NULL;
}
inline const ::ywrapper::BoolValue& Ssids_Ssid_Config::dhcp_required() const {
  const ::ywrapper::BoolValue* p = dhcp_required_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.dhcp_required)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Config::release_dhcp_required() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.dhcp_required)
  
  ::ywrapper::BoolValue* temp = dhcp_required_;
  dhcp_required_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Config::mutable_dhcp_required() {
  
  if (dhcp_required_ == NULL) {
    dhcp_required_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.dhcp_required)
  return dhcp_required_;
}
inline void Ssids_Ssid_Config::set_allocated_dhcp_required(::ywrapper::BoolValue* dhcp_required) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dhcp_required_);
  }
  if (dhcp_required) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dhcp_required = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dhcp_required, submessage_arena);
    }
    
  } else {
    
  }
  dhcp_required_ = dhcp_required;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.dhcp_required)
}

// .ywrapper.BoolValue dot11k = 473026033 [(.yext.schemapath) = "/ssids/ssid/config/dot11k"];
inline bool Ssids_Ssid_Config::has_dot11k() const {
  return this != internal_default_instance() && dot11k_ != NULL;
}
inline const ::ywrapper::BoolValue& Ssids_Ssid_Config::dot11k() const {
  const ::ywrapper::BoolValue* p = dot11k_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.dot11k)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Config::release_dot11k() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.dot11k)
  
  ::ywrapper::BoolValue* temp = dot11k_;
  dot11k_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Config::mutable_dot11k() {
  
  if (dot11k_ == NULL) {
    dot11k_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.dot11k)
  return dot11k_;
}
inline void Ssids_Ssid_Config::set_allocated_dot11k(::ywrapper::BoolValue* dot11k) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dot11k_);
  }
  if (dot11k) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dot11k = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dot11k, submessage_arena);
    }
    
  } else {
    
  }
  dot11k_ = dot11k;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.dot11k)
}

// .ywrapper.BoolValue dva = 466452098 [(.yext.schemapath) = "/ssids/ssid/config/dva"];
inline bool Ssids_Ssid_Config::has_dva() const {
  return this != internal_default_instance() && dva_ != NULL;
}
inline const ::ywrapper::BoolValue& Ssids_Ssid_Config::dva() const {
  const ::ywrapper::BoolValue* p = dva_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.dva)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Config::release_dva() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.dva)
  
  ::ywrapper::BoolValue* temp = dva_;
  dva_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Config::mutable_dva() {
  
  if (dva_ == NULL) {
    dva_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.dva)
  return dva_;
}
inline void Ssids_Ssid_Config::set_allocated_dva(::ywrapper::BoolValue* dva) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dva_);
  }
  if (dva) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dva = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dva, submessage_arena);
    }
    
  } else {
    
  }
  dva_ = dva;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.dva)
}

// .ywrapper.BoolValue enabled = 55874470 [(.yext.schemapath) = "/ssids/ssid/config/enabled"];
inline bool Ssids_Ssid_Config::has_enabled() const {
  return this != internal_default_instance() && enabled_ != NULL;
}
inline const ::ywrapper::BoolValue& Ssids_Ssid_Config::enabled() const {
  const ::ywrapper::BoolValue* p = enabled_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.enabled)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Config::release_enabled() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.enabled)
  
  ::ywrapper::BoolValue* temp = enabled_;
  enabled_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Config::mutable_enabled() {
  
  if (enabled_ == NULL) {
    enabled_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.enabled)
  return enabled_;
}
inline void Ssids_Ssid_Config::set_allocated_enabled(::ywrapper::BoolValue* enabled) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(enabled_);
  }
  if (enabled) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      enabled = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, enabled, submessage_arena);
    }
    
  } else {
    
  }
  enabled_ = enabled;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.enabled)
}

// .ywrapper.UintValue gtk_timeout = 428436415 [(.yext.schemapath) = "/ssids/ssid/config/gtk-timeout"];
inline bool Ssids_Ssid_Config::has_gtk_timeout() const {
  return this != internal_default_instance() && gtk_timeout_ != NULL;
}
inline const ::ywrapper::UintValue& Ssids_Ssid_Config::gtk_timeout() const {
  const ::ywrapper::UintValue* p = gtk_timeout_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.gtk_timeout)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Config::release_gtk_timeout() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.gtk_timeout)
  
  ::ywrapper::UintValue* temp = gtk_timeout_;
  gtk_timeout_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Ssids_Ssid_Config::mutable_gtk_timeout() {
  
  if (gtk_timeout_ == NULL) {
    gtk_timeout_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.gtk_timeout)
  return gtk_timeout_;
}
inline void Ssids_Ssid_Config::set_allocated_gtk_timeout(::ywrapper::UintValue* gtk_timeout) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(gtk_timeout_);
  }
  if (gtk_timeout) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gtk_timeout = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gtk_timeout, submessage_arena);
    }
    
  } else {
    
  }
  gtk_timeout_ = gtk_timeout;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.gtk_timeout)
}

// .ywrapper.BoolValue hidden = 358439471 [(.yext.schemapath) = "/ssids/ssid/config/hidden"];
inline bool Ssids_Ssid_Config::has_hidden() const {
  return this != internal_default_instance() && hidden_ != NULL;
}
inline const ::ywrapper::BoolValue& Ssids_Ssid_Config::hidden() const {
  const ::ywrapper::BoolValue* p = hidden_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.hidden)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Config::release_hidden() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.hidden)
  
  ::ywrapper::BoolValue* temp = hidden_;
  hidden_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Config::mutable_hidden() {
  
  if (hidden_ == NULL) {
    hidden_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.hidden)
  return hidden_;
}
inline void Ssids_Ssid_Config::set_allocated_hidden(::ywrapper::BoolValue* hidden) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(hidden_);
  }
  if (hidden) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hidden = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hidden, submessage_arena);
    }
    
  } else {
    
  }
  hidden_ = hidden;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.hidden)
}

// .ywrapper.BoolValue ipv6_ndp_filter = 318985876 [(.yext.schemapath) = "/ssids/ssid/config/ipv6-ndp-filter"];
inline bool Ssids_Ssid_Config::has_ipv6_ndp_filter() const {
  return this != internal_default_instance() && ipv6_ndp_filter_ != NULL;
}
inline const ::ywrapper::BoolValue& Ssids_Ssid_Config::ipv6_ndp_filter() const {
  const ::ywrapper::BoolValue* p = ipv6_ndp_filter_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.ipv6_ndp_filter)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Config::release_ipv6_ndp_filter() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.ipv6_ndp_filter)
  
  ::ywrapper::BoolValue* temp = ipv6_ndp_filter_;
  ipv6_ndp_filter_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Config::mutable_ipv6_ndp_filter() {
  
  if (ipv6_ndp_filter_ == NULL) {
    ipv6_ndp_filter_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.ipv6_ndp_filter)
  return ipv6_ndp_filter_;
}
inline void Ssids_Ssid_Config::set_allocated_ipv6_ndp_filter(::ywrapper::BoolValue* ipv6_ndp_filter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ipv6_ndp_filter_);
  }
  if (ipv6_ndp_filter) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ipv6_ndp_filter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ipv6_ndp_filter, submessage_arena);
    }
    
  } else {
    
  }
  ipv6_ndp_filter_ = ipv6_ndp_filter;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.ipv6_ndp_filter)
}

// .ywrapper.UintValue ipv6_ndp_filter_timer = 393630952 [(.yext.schemapath) = "/ssids/ssid/config/ipv6-ndp-filter-timer"];
inline bool Ssids_Ssid_Config::has_ipv6_ndp_filter_timer() const {
  return this != internal_default_instance() && ipv6_ndp_filter_timer_ != NULL;
}
inline const ::ywrapper::UintValue& Ssids_Ssid_Config::ipv6_ndp_filter_timer() const {
  const ::ywrapper::UintValue* p = ipv6_ndp_filter_timer_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.ipv6_ndp_filter_timer)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Config::release_ipv6_ndp_filter_timer() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.ipv6_ndp_filter_timer)
  
  ::ywrapper::UintValue* temp = ipv6_ndp_filter_timer_;
  ipv6_ndp_filter_timer_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Ssids_Ssid_Config::mutable_ipv6_ndp_filter_timer() {
  
  if (ipv6_ndp_filter_timer_ == NULL) {
    ipv6_ndp_filter_timer_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.ipv6_ndp_filter_timer)
  return ipv6_ndp_filter_timer_;
}
inline void Ssids_Ssid_Config::set_allocated_ipv6_ndp_filter_timer(::ywrapper::UintValue* ipv6_ndp_filter_timer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ipv6_ndp_filter_timer_);
  }
  if (ipv6_ndp_filter_timer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ipv6_ndp_filter_timer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ipv6_ndp_filter_timer, submessage_arena);
    }
    
  } else {
    
  }
  ipv6_ndp_filter_timer_ = ipv6_ndp_filter_timer;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.ipv6_ndp_filter_timer)
}

// .ywrapper.StringValue mobility_domain = 171956929 [(.yext.schemapath) = "/ssids/ssid/config/mobility-domain"];
inline bool Ssids_Ssid_Config::has_mobility_domain() const {
  return this != internal_default_instance() && mobility_domain_ != NULL;
}
inline const ::ywrapper::StringValue& Ssids_Ssid_Config::mobility_domain() const {
  const ::ywrapper::StringValue* p = mobility_domain_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.mobility_domain)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Ssids_Ssid_Config::release_mobility_domain() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.mobility_domain)
  
  ::ywrapper::StringValue* temp = mobility_domain_;
  mobility_domain_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Ssids_Ssid_Config::mutable_mobility_domain() {
  
  if (mobility_domain_ == NULL) {
    mobility_domain_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.mobility_domain)
  return mobility_domain_;
}
inline void Ssids_Ssid_Config::set_allocated_mobility_domain(::ywrapper::StringValue* mobility_domain) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mobility_domain_);
  }
  if (mobility_domain) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mobility_domain = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mobility_domain, submessage_arena);
    }
    
  } else {
    
  }
  mobility_domain_ = mobility_domain;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.mobility_domain)
}

// .ywrapper.BoolValue multicast_filter = 477942606 [(.yext.schemapath) = "/ssids/ssid/config/multicast-filter"];
inline bool Ssids_Ssid_Config::has_multicast_filter() const {
  return this != internal_default_instance() && multicast_filter_ != NULL;
}
inline const ::ywrapper::BoolValue& Ssids_Ssid_Config::multicast_filter() const {
  const ::ywrapper::BoolValue* p = multicast_filter_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.multicast_filter)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Config::release_multicast_filter() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.multicast_filter)
  
  ::ywrapper::BoolValue* temp = multicast_filter_;
  multicast_filter_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Config::mutable_multicast_filter() {
  
  if (multicast_filter_ == NULL) {
    multicast_filter_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.multicast_filter)
  return multicast_filter_;
}
inline void Ssids_Ssid_Config::set_allocated_multicast_filter(::ywrapper::BoolValue* multicast_filter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(multicast_filter_);
  }
  if (multicast_filter) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      multicast_filter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, multicast_filter, submessage_arena);
    }
    
  } else {
    
  }
  multicast_filter_ = multicast_filter;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.multicast_filter)
}

// .ywrapper.StringValue name = 16502406 [(.yext.schemapath) = "/ssids/ssid/config/name"];
inline bool Ssids_Ssid_Config::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::ywrapper::StringValue& Ssids_Ssid_Config::name() const {
  const ::ywrapper::StringValue* p = name_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.name)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Ssids_Ssid_Config::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.name)
  
  ::ywrapper::StringValue* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Ssids_Ssid_Config::mutable_name() {
  
  if (name_ == NULL) {
    name_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.name)
  return name_;
}
inline void Ssids_Ssid_Config::set_allocated_name(::ywrapper::StringValue* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.name)
}

// .ywrapper.BoolValue okc = 247210280 [(.yext.schemapath) = "/ssids/ssid/config/okc"];
inline bool Ssids_Ssid_Config::has_okc() const {
  return this != internal_default_instance() && okc_ != NULL;
}
inline const ::ywrapper::BoolValue& Ssids_Ssid_Config::okc() const {
  const ::ywrapper::BoolValue* p = okc_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.okc)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Config::release_okc() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.okc)
  
  ::ywrapper::BoolValue* temp = okc_;
  okc_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Config::mutable_okc() {
  
  if (okc_ == NULL) {
    okc_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.okc)
  return okc_;
}
inline void Ssids_Ssid_Config::set_allocated_okc(::ywrapper::BoolValue* okc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(okc_);
  }
  if (okc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      okc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, okc, submessage_arena);
    }
    
  } else {
    
  }
  okc_ = okc;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.okc)
}

// .openconfig.enums.OpenconfigWifiTypesOPERATINGFREQUENCY operating_frequency = 481955913 [(.yext.schemapath) = "/ssids/ssid/config/operating-frequency"];
inline void Ssids_Ssid_Config::clear_operating_frequency() {
  operating_frequency_ = 0;
}
inline ::openconfig::enums::OpenconfigWifiTypesOPERATINGFREQUENCY Ssids_Ssid_Config::operating_frequency() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.operating_frequency)
  return static_cast< ::openconfig::enums::OpenconfigWifiTypesOPERATINGFREQUENCY >(operating_frequency_);
}
inline void Ssids_Ssid_Config::set_operating_frequency(::openconfig::enums::OpenconfigWifiTypesOPERATINGFREQUENCY value) {
  
  operating_frequency_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.operating_frequency)
}

// .openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.Opmode opmode = 409077039 [(.yext.schemapath) = "/ssids/ssid/config/opmode"];
inline void Ssids_Ssid_Config::clear_opmode() {
  opmode_ = 0;
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config_Opmode Ssids_Ssid_Config::opmode() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.opmode)
  return static_cast< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config_Opmode >(opmode_);
}
inline void Ssids_Ssid_Config::set_opmode(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config_Opmode value) {
  
  opmode_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.opmode)
}

// .ywrapper.UintValue ptk_timeout = 404316016 [(.yext.schemapath) = "/ssids/ssid/config/ptk-timeout"];
inline bool Ssids_Ssid_Config::has_ptk_timeout() const {
  return this != internal_default_instance() && ptk_timeout_ != NULL;
}
inline const ::ywrapper::UintValue& Ssids_Ssid_Config::ptk_timeout() const {
  const ::ywrapper::UintValue* p = ptk_timeout_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.ptk_timeout)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Config::release_ptk_timeout() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.ptk_timeout)
  
  ::ywrapper::UintValue* temp = ptk_timeout_;
  ptk_timeout_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Ssids_Ssid_Config::mutable_ptk_timeout() {
  
  if (ptk_timeout_ == NULL) {
    ptk_timeout_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.ptk_timeout)
  return ptk_timeout_;
}
inline void Ssids_Ssid_Config::set_allocated_ptk_timeout(::ywrapper::UintValue* ptk_timeout) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ptk_timeout_);
  }
  if (ptk_timeout) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ptk_timeout = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ptk_timeout, submessage_arena);
    }
    
  } else {
    
  }
  ptk_timeout_ = ptk_timeout;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.ptk_timeout)
}

// .ywrapper.BoolValue qbss_load = 179646833 [(.yext.schemapath) = "/ssids/ssid/config/qbss-load"];
inline bool Ssids_Ssid_Config::has_qbss_load() const {
  return this != internal_default_instance() && qbss_load_ != NULL;
}
inline const ::ywrapper::BoolValue& Ssids_Ssid_Config::qbss_load() const {
  const ::ywrapper::BoolValue* p = qbss_load_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.qbss_load)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Config::release_qbss_load() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.qbss_load)
  
  ::ywrapper::BoolValue* temp = qbss_load_;
  qbss_load_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Config::mutable_qbss_load() {
  
  if (qbss_load_ == NULL) {
    qbss_load_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.qbss_load)
  return qbss_load_;
}
inline void Ssids_Ssid_Config::set_allocated_qbss_load(::ywrapper::BoolValue* qbss_load) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(qbss_load_);
  }
  if (qbss_load) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      qbss_load = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, qbss_load, submessage_arena);
    }
    
  } else {
    
  }
  qbss_load_ = qbss_load;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.qbss_load)
}

// .ywrapper.StringValue server_group = 344881248 [(.yext.schemapath) = "/ssids/ssid/config/server-group"];
inline bool Ssids_Ssid_Config::has_server_group() const {
  return this != internal_default_instance() && server_group_ != NULL;
}
inline const ::ywrapper::StringValue& Ssids_Ssid_Config::server_group() const {
  const ::ywrapper::StringValue* p = server_group_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.server_group)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Ssids_Ssid_Config::release_server_group() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.server_group)
  
  ::ywrapper::StringValue* temp = server_group_;
  server_group_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Ssids_Ssid_Config::mutable_server_group() {
  
  if (server_group_ == NULL) {
    server_group_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.server_group)
  return server_group_;
}
inline void Ssids_Ssid_Config::set_allocated_server_group(::ywrapper::StringValue* server_group) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(server_group_);
  }
  if (server_group) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      server_group = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, server_group, submessage_arena);
    }
    
  } else {
    
  }
  server_group_ = server_group;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.server_group)
}

// .ywrapper.BoolValue station_isolation = 87616742 [(.yext.schemapath) = "/ssids/ssid/config/station-isolation"];
inline bool Ssids_Ssid_Config::has_station_isolation() const {
  return this != internal_default_instance() && station_isolation_ != NULL;
}
inline const ::ywrapper::BoolValue& Ssids_Ssid_Config::station_isolation() const {
  const ::ywrapper::BoolValue* p = station_isolation_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.station_isolation)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Config::release_station_isolation() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.station_isolation)
  
  ::ywrapper::BoolValue* temp = station_isolation_;
  station_isolation_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Config::mutable_station_isolation() {
  
  if (station_isolation_ == NULL) {
    station_isolation_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.station_isolation)
  return station_isolation_;
}
inline void Ssids_Ssid_Config::set_allocated_station_isolation(::ywrapper::BoolValue* station_isolation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(station_isolation_);
  }
  if (station_isolation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      station_isolation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, station_isolation, submessage_arena);
    }
    
  } else {
    
  }
  station_isolation_ = station_isolation;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.station_isolation)
}

// repeated .openconfig.enums.OpenconfigWifiTypesDATARATE supported_data_rates = 128647718 [(.yext.schemapath) = "/ssids/ssid/config/supported-data-rates"];
inline int Ssids_Ssid_Config::supported_data_rates_size() const {
  return supported_data_rates_.size();
}
inline void Ssids_Ssid_Config::clear_supported_data_rates() {
  supported_data_rates_.Clear();
}
inline ::openconfig::enums::OpenconfigWifiTypesDATARATE Ssids_Ssid_Config::supported_data_rates(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.supported_data_rates)
  return static_cast< ::openconfig::enums::OpenconfigWifiTypesDATARATE >(supported_data_rates_.Get(index));
}
inline void Ssids_Ssid_Config::set_supported_data_rates(int index, ::openconfig::enums::OpenconfigWifiTypesDATARATE value) {
  supported_data_rates_.Set(index, value);
  // @@protoc_insertion_point(field_set:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.supported_data_rates)
}
inline void Ssids_Ssid_Config::add_supported_data_rates(::openconfig::enums::OpenconfigWifiTypesDATARATE value) {
  supported_data_rates_.Add(value);
  // @@protoc_insertion_point(field_add:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.supported_data_rates)
}
inline const ::google::protobuf::RepeatedField<int>&
Ssids_Ssid_Config::supported_data_rates() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.supported_data_rates)
  return supported_data_rates_;
}
inline ::google::protobuf::RepeatedField<int>*
Ssids_Ssid_Config::mutable_supported_data_rates() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.supported_data_rates)
  return &supported_data_rates_;
}

// .ywrapper.UintValue vlan_id = 278924278 [(.yext.schemapath) = "/ssids/ssid/config/vlan-id"];
inline bool Ssids_Ssid_Config::has_vlan_id() const {
  return this != internal_default_instance() && vlan_id_ != NULL;
}
inline const ::ywrapper::UintValue& Ssids_Ssid_Config::vlan_id() const {
  const ::ywrapper::UintValue* p = vlan_id_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.vlan_id)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Config::release_vlan_id() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.vlan_id)
  
  ::ywrapper::UintValue* temp = vlan_id_;
  vlan_id_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Ssids_Ssid_Config::mutable_vlan_id() {
  
  if (vlan_id_ == NULL) {
    vlan_id_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.vlan_id)
  return vlan_id_;
}
inline void Ssids_Ssid_Config::set_allocated_vlan_id(::ywrapper::UintValue* vlan_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(vlan_id_);
  }
  if (vlan_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vlan_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vlan_id, submessage_arena);
    }
    
  } else {
    
  }
  vlan_id_ = vlan_id;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.vlan_id)
}

// .ywrapper.StringValue wpa2_psk = 180186978 [(.yext.schemapath) = "/ssids/ssid/config/wpa2-psk"];
inline bool Ssids_Ssid_Config::has_wpa2_psk() const {
  return this != internal_default_instance() && wpa2_psk_ != NULL;
}
inline const ::ywrapper::StringValue& Ssids_Ssid_Config::wpa2_psk() const {
  const ::ywrapper::StringValue* p = wpa2_psk_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.wpa2_psk)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Ssids_Ssid_Config::release_wpa2_psk() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.wpa2_psk)
  
  ::ywrapper::StringValue* temp = wpa2_psk_;
  wpa2_psk_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Ssids_Ssid_Config::mutable_wpa2_psk() {
  
  if (wpa2_psk_ == NULL) {
    wpa2_psk_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.wpa2_psk)
  return wpa2_psk_;
}
inline void Ssids_Ssid_Config::set_allocated_wpa2_psk(::ywrapper::StringValue* wpa2_psk) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(wpa2_psk_);
  }
  if (wpa2_psk) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      wpa2_psk = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, wpa2_psk, submessage_arena);
    }
    
  } else {
    
  }
  wpa2_psk_ = wpa2_psk;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Config.wpa2_psk)
}

// -------------------------------------------------------------------

// Ssids_Ssid_Dot11R_Config

// .ywrapper.BoolValue dot11r = 306866146 [(.yext.schemapath) = "/ssids/ssid/dot11r/config/dot11r"];
inline bool Ssids_Ssid_Dot11R_Config::has_dot11r() const {
  return this != internal_default_instance() && dot11r_ != NULL;
}
inline const ::ywrapper::BoolValue& Ssids_Ssid_Dot11R_Config::dot11r() const {
  const ::ywrapper::BoolValue* p = dot11r_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config.dot11r)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Dot11R_Config::release_dot11r() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config.dot11r)
  
  ::ywrapper::BoolValue* temp = dot11r_;
  dot11r_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Dot11R_Config::mutable_dot11r() {
  
  if (dot11r_ == NULL) {
    dot11r_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config.dot11r)
  return dot11r_;
}
inline void Ssids_Ssid_Dot11R_Config::set_allocated_dot11r(::ywrapper::BoolValue* dot11r) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dot11r_);
  }
  if (dot11r) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dot11r = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dot11r, submessage_arena);
    }
    
  } else {
    
  }
  dot11r_ = dot11r;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config.dot11r)
}

// .ywrapper.UintValue dot11r_domainid = 383959528 [(.yext.schemapath) = "/ssids/ssid/dot11r/config/dot11r-domainid"];
inline bool Ssids_Ssid_Dot11R_Config::has_dot11r_domainid() const {
  return this != internal_default_instance() && dot11r_domainid_ != NULL;
}
inline const ::ywrapper::UintValue& Ssids_Ssid_Dot11R_Config::dot11r_domainid() const {
  const ::ywrapper::UintValue* p = dot11r_domainid_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config.dot11r_domainid)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Dot11R_Config::release_dot11r_domainid() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config.dot11r_domainid)
  
  ::ywrapper::UintValue* temp = dot11r_domainid_;
  dot11r_domainid_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Ssids_Ssid_Dot11R_Config::mutable_dot11r_domainid() {
  
  if (dot11r_domainid_ == NULL) {
    dot11r_domainid_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config.dot11r_domainid)
  return dot11r_domainid_;
}
inline void Ssids_Ssid_Dot11R_Config::set_allocated_dot11r_domainid(::ywrapper::UintValue* dot11r_domainid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dot11r_domainid_);
  }
  if (dot11r_domainid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dot11r_domainid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dot11r_domainid, submessage_arena);
    }
    
  } else {
    
  }
  dot11r_domainid_ = dot11r_domainid;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config.dot11r_domainid)
}

// .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config.Dot11RMethod dot11r_method = 439177212 [(.yext.schemapath) = "/ssids/ssid/dot11r/config/dot11r-method"];
inline void Ssids_Ssid_Dot11R_Config::clear_dot11r_method() {
  dot11r_method_ = 0;
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_Config_Dot11RMethod Ssids_Ssid_Dot11R_Config::dot11r_method() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config.dot11r_method)
  return static_cast< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_Config_Dot11RMethod >(dot11r_method_);
}
inline void Ssids_Ssid_Dot11R_Config::set_dot11r_method(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_Config_Dot11RMethod value) {
  
  dot11r_method_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config.dot11r_method)
}

// .ywrapper.UintValue dot11r_r1key_timeout = 203505331 [(.yext.schemapath) = "/ssids/ssid/dot11r/config/dot11r-r1key-timeout"];
inline bool Ssids_Ssid_Dot11R_Config::has_dot11r_r1key_timeout() const {
  return this != internal_default_instance() && dot11r_r1key_timeout_ != NULL;
}
inline const ::ywrapper::UintValue& Ssids_Ssid_Dot11R_Config::dot11r_r1key_timeout() const {
  const ::ywrapper::UintValue* p = dot11r_r1key_timeout_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config.dot11r_r1key_timeout)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Dot11R_Config::release_dot11r_r1key_timeout() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config.dot11r_r1key_timeout)
  
  ::ywrapper::UintValue* temp = dot11r_r1key_timeout_;
  dot11r_r1key_timeout_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Ssids_Ssid_Dot11R_Config::mutable_dot11r_r1key_timeout() {
  
  if (dot11r_r1key_timeout_ == NULL) {
    dot11r_r1key_timeout_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config.dot11r_r1key_timeout)
  return dot11r_r1key_timeout_;
}
inline void Ssids_Ssid_Dot11R_Config::set_allocated_dot11r_r1key_timeout(::ywrapper::UintValue* dot11r_r1key_timeout) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dot11r_r1key_timeout_);
  }
  if (dot11r_r1key_timeout) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dot11r_r1key_timeout = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dot11r_r1key_timeout, submessage_arena);
    }
    
  } else {
    
  }
  dot11r_r1key_timeout_ = dot11r_r1key_timeout;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config.dot11r_r1key_timeout)
}

// -------------------------------------------------------------------

// Ssids_Ssid_Dot11R_State

// .ywrapper.BoolValue dot11r = 144351457 [(.yext.schemapath) = "/ssids/ssid/dot11r/state/dot11r"];
inline bool Ssids_Ssid_Dot11R_State::has_dot11r() const {
  return this != internal_default_instance() && dot11r_ != NULL;
}
inline const ::ywrapper::BoolValue& Ssids_Ssid_Dot11R_State::dot11r() const {
  const ::ywrapper::BoolValue* p = dot11r_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State.dot11r)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Dot11R_State::release_dot11r() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State.dot11r)
  
  ::ywrapper::BoolValue* temp = dot11r_;
  dot11r_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Dot11R_State::mutable_dot11r() {
  
  if (dot11r_ == NULL) {
    dot11r_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State.dot11r)
  return dot11r_;
}
inline void Ssids_Ssid_Dot11R_State::set_allocated_dot11r(::ywrapper::BoolValue* dot11r) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dot11r_);
  }
  if (dot11r) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dot11r = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dot11r, submessage_arena);
    }
    
  } else {
    
  }
  dot11r_ = dot11r;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State.dot11r)
}

// .ywrapper.UintValue dot11r_domainid = 429805585 [(.yext.schemapath) = "/ssids/ssid/dot11r/state/dot11r-domainid"];
inline bool Ssids_Ssid_Dot11R_State::has_dot11r_domainid() const {
  return this != internal_default_instance() && dot11r_domainid_ != NULL;
}
inline const ::ywrapper::UintValue& Ssids_Ssid_Dot11R_State::dot11r_domainid() const {
  const ::ywrapper::UintValue* p = dot11r_domainid_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State.dot11r_domainid)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Dot11R_State::release_dot11r_domainid() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State.dot11r_domainid)
  
  ::ywrapper::UintValue* temp = dot11r_domainid_;
  dot11r_domainid_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Ssids_Ssid_Dot11R_State::mutable_dot11r_domainid() {
  
  if (dot11r_domainid_ == NULL) {
    dot11r_domainid_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State.dot11r_domainid)
  return dot11r_domainid_;
}
inline void Ssids_Ssid_Dot11R_State::set_allocated_dot11r_domainid(::ywrapper::UintValue* dot11r_domainid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dot11r_domainid_);
  }
  if (dot11r_domainid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dot11r_domainid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dot11r_domainid, submessage_arena);
    }
    
  } else {
    
  }
  dot11r_domainid_ = dot11r_domainid;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State.dot11r_domainid)
}

// .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State.Dot11RMethod dot11r_method = 510783837 [(.yext.schemapath) = "/ssids/ssid/dot11r/state/dot11r-method"];
inline void Ssids_Ssid_Dot11R_State::clear_dot11r_method() {
  dot11r_method_ = 0;
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_State_Dot11RMethod Ssids_Ssid_Dot11R_State::dot11r_method() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State.dot11r_method)
  return static_cast< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_State_Dot11RMethod >(dot11r_method_);
}
inline void Ssids_Ssid_Dot11R_State::set_dot11r_method(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_State_Dot11RMethod value) {
  
  dot11r_method_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State.dot11r_method)
}

// .ywrapper.UintValue dot11r_r1key_timeout = 86079248 [(.yext.schemapath) = "/ssids/ssid/dot11r/state/dot11r-r1key-timeout"];
inline bool Ssids_Ssid_Dot11R_State::has_dot11r_r1key_timeout() const {
  return this != internal_default_instance() && dot11r_r1key_timeout_ != NULL;
}
inline const ::ywrapper::UintValue& Ssids_Ssid_Dot11R_State::dot11r_r1key_timeout() const {
  const ::ywrapper::UintValue* p = dot11r_r1key_timeout_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State.dot11r_r1key_timeout)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Dot11R_State::release_dot11r_r1key_timeout() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State.dot11r_r1key_timeout)
  
  ::ywrapper::UintValue* temp = dot11r_r1key_timeout_;
  dot11r_r1key_timeout_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Ssids_Ssid_Dot11R_State::mutable_dot11r_r1key_timeout() {
  
  if (dot11r_r1key_timeout_ == NULL) {
    dot11r_r1key_timeout_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State.dot11r_r1key_timeout)
  return dot11r_r1key_timeout_;
}
inline void Ssids_Ssid_Dot11R_State::set_allocated_dot11r_r1key_timeout(::ywrapper::UintValue* dot11r_r1key_timeout) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dot11r_r1key_timeout_);
  }
  if (dot11r_r1key_timeout) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dot11r_r1key_timeout = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dot11r_r1key_timeout, submessage_arena);
    }
    
  } else {
    
  }
  dot11r_r1key_timeout_ = dot11r_r1key_timeout;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State.dot11r_r1key_timeout)
}

// -------------------------------------------------------------------

// Ssids_Ssid_Dot11R

// .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.Config config = 496985790 [(.yext.schemapath) = "/ssids/ssid/dot11r/config"];
inline bool Ssids_Ssid_Dot11R::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Ssids_Ssid_Dot11R::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_Config& Ssids_Ssid_Dot11R::config() const {
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_Config*>(
      &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot11R_Config_default_instance_);
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_Config* Ssids_Ssid_Dot11R::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.config)
  
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_Config* Ssids_Ssid_Dot11R::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.config)
  return config_;
}
inline void Ssids_Ssid_Dot11R::set_allocated_config(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.config)
}

// .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.State state = 150018731 [(.yext.schemapath) = "/ssids/ssid/dot11r/state"];
inline bool Ssids_Ssid_Dot11R::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Ssids_Ssid_Dot11R::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_State& Ssids_Ssid_Dot11R::state() const {
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_State*>(
      &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot11R_State_default_instance_);
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_State* Ssids_Ssid_Dot11R::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.state)
  
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_State* Ssids_Ssid_Dot11R::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.state)
  return state_;
}
inline void Ssids_Ssid_Dot11R::set_allocated_state(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R.state)
}

// -------------------------------------------------------------------

// Ssids_Ssid_Dot11V_Config

// .ywrapper.BoolValue dot11v_bssidle = 26064767 [(.yext.schemapath) = "/ssids/ssid/dot11v/config/dot11v-bssidle"];
inline bool Ssids_Ssid_Dot11V_Config::has_dot11v_bssidle() const {
  return this != internal_default_instance() && dot11v_bssidle_ != NULL;
}
inline const ::ywrapper::BoolValue& Ssids_Ssid_Dot11V_Config::dot11v_bssidle() const {
  const ::ywrapper::BoolValue* p = dot11v_bssidle_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config.dot11v_bssidle)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Dot11V_Config::release_dot11v_bssidle() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config.dot11v_bssidle)
  
  ::ywrapper::BoolValue* temp = dot11v_bssidle_;
  dot11v_bssidle_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Dot11V_Config::mutable_dot11v_bssidle() {
  
  if (dot11v_bssidle_ == NULL) {
    dot11v_bssidle_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config.dot11v_bssidle)
  return dot11v_bssidle_;
}
inline void Ssids_Ssid_Dot11V_Config::set_allocated_dot11v_bssidle(::ywrapper::BoolValue* dot11v_bssidle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dot11v_bssidle_);
  }
  if (dot11v_bssidle) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dot11v_bssidle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dot11v_bssidle, submessage_arena);
    }
    
  } else {
    
  }
  dot11v_bssidle_ = dot11v_bssidle;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config.dot11v_bssidle)
}

// .ywrapper.UintValue dot11v_bssidle_timeout = 156062593 [(.yext.schemapath) = "/ssids/ssid/dot11v/config/dot11v-bssidle-timeout"];
inline bool Ssids_Ssid_Dot11V_Config::has_dot11v_bssidle_timeout() const {
  return this != internal_default_instance() && dot11v_bssidle_timeout_ != NULL;
}
inline const ::ywrapper::UintValue& Ssids_Ssid_Dot11V_Config::dot11v_bssidle_timeout() const {
  const ::ywrapper::UintValue* p = dot11v_bssidle_timeout_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config.dot11v_bssidle_timeout)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Dot11V_Config::release_dot11v_bssidle_timeout() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config.dot11v_bssidle_timeout)
  
  ::ywrapper::UintValue* temp = dot11v_bssidle_timeout_;
  dot11v_bssidle_timeout_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Ssids_Ssid_Dot11V_Config::mutable_dot11v_bssidle_timeout() {
  
  if (dot11v_bssidle_timeout_ == NULL) {
    dot11v_bssidle_timeout_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config.dot11v_bssidle_timeout)
  return dot11v_bssidle_timeout_;
}
inline void Ssids_Ssid_Dot11V_Config::set_allocated_dot11v_bssidle_timeout(::ywrapper::UintValue* dot11v_bssidle_timeout) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dot11v_bssidle_timeout_);
  }
  if (dot11v_bssidle_timeout) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dot11v_bssidle_timeout = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dot11v_bssidle_timeout, submessage_arena);
    }
    
  } else {
    
  }
  dot11v_bssidle_timeout_ = dot11v_bssidle_timeout;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config.dot11v_bssidle_timeout)
}

// .ywrapper.BoolValue dot11v_bsstransition = 245783152 [(.yext.schemapath) = "/ssids/ssid/dot11v/config/dot11v-bsstransition"];
inline bool Ssids_Ssid_Dot11V_Config::has_dot11v_bsstransition() const {
  return this != internal_default_instance() && dot11v_bsstransition_ != NULL;
}
inline const ::ywrapper::BoolValue& Ssids_Ssid_Dot11V_Config::dot11v_bsstransition() const {
  const ::ywrapper::BoolValue* p = dot11v_bsstransition_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config.dot11v_bsstransition)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Dot11V_Config::release_dot11v_bsstransition() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config.dot11v_bsstransition)
  
  ::ywrapper::BoolValue* temp = dot11v_bsstransition_;
  dot11v_bsstransition_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Dot11V_Config::mutable_dot11v_bsstransition() {
  
  if (dot11v_bsstransition_ == NULL) {
    dot11v_bsstransition_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config.dot11v_bsstransition)
  return dot11v_bsstransition_;
}
inline void Ssids_Ssid_Dot11V_Config::set_allocated_dot11v_bsstransition(::ywrapper::BoolValue* dot11v_bsstransition) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dot11v_bsstransition_);
  }
  if (dot11v_bsstransition) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dot11v_bsstransition = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dot11v_bsstransition, submessage_arena);
    }
    
  } else {
    
  }
  dot11v_bsstransition_ = dot11v_bsstransition;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config.dot11v_bsstransition)
}

// .ywrapper.BoolValue dot11v_dms = 15140429 [(.yext.schemapath) = "/ssids/ssid/dot11v/config/dot11v-dms"];
inline bool Ssids_Ssid_Dot11V_Config::has_dot11v_dms() const {
  return this != internal_default_instance() && dot11v_dms_ != NULL;
}
inline const ::ywrapper::BoolValue& Ssids_Ssid_Dot11V_Config::dot11v_dms() const {
  const ::ywrapper::BoolValue* p = dot11v_dms_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config.dot11v_dms)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Dot11V_Config::release_dot11v_dms() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config.dot11v_dms)
  
  ::ywrapper::BoolValue* temp = dot11v_dms_;
  dot11v_dms_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Dot11V_Config::mutable_dot11v_dms() {
  
  if (dot11v_dms_ == NULL) {
    dot11v_dms_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config.dot11v_dms)
  return dot11v_dms_;
}
inline void Ssids_Ssid_Dot11V_Config::set_allocated_dot11v_dms(::ywrapper::BoolValue* dot11v_dms) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dot11v_dms_);
  }
  if (dot11v_dms) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dot11v_dms = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dot11v_dms, submessage_arena);
    }
    
  } else {
    
  }
  dot11v_dms_ = dot11v_dms;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config.dot11v_dms)
}

// -------------------------------------------------------------------

// Ssids_Ssid_Dot11V_State

// .ywrapper.BoolValue dot11v_bssidle = 309924824 [(.yext.schemapath) = "/ssids/ssid/dot11v/state/dot11v-bssidle"];
inline bool Ssids_Ssid_Dot11V_State::has_dot11v_bssidle() const {
  return this != internal_default_instance() && dot11v_bssidle_ != NULL;
}
inline const ::ywrapper::BoolValue& Ssids_Ssid_Dot11V_State::dot11v_bssidle() const {
  const ::ywrapper::BoolValue* p = dot11v_bssidle_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State.dot11v_bssidle)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Dot11V_State::release_dot11v_bssidle() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State.dot11v_bssidle)
  
  ::ywrapper::BoolValue* temp = dot11v_bssidle_;
  dot11v_bssidle_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Dot11V_State::mutable_dot11v_bssidle() {
  
  if (dot11v_bssidle_ == NULL) {
    dot11v_bssidle_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State.dot11v_bssidle)
  return dot11v_bssidle_;
}
inline void Ssids_Ssid_Dot11V_State::set_allocated_dot11v_bssidle(::ywrapper::BoolValue* dot11v_bssidle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dot11v_bssidle_);
  }
  if (dot11v_bssidle) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dot11v_bssidle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dot11v_bssidle, submessage_arena);
    }
    
  } else {
    
  }
  dot11v_bssidle_ = dot11v_bssidle;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State.dot11v_bssidle)
}

// .ywrapper.UintValue dot11v_bssidle_timeout = 132989062 [(.yext.schemapath) = "/ssids/ssid/dot11v/state/dot11v-bssidle-timeout"];
inline bool Ssids_Ssid_Dot11V_State::has_dot11v_bssidle_timeout() const {
  return this != internal_default_instance() && dot11v_bssidle_timeout_ != NULL;
}
inline const ::ywrapper::UintValue& Ssids_Ssid_Dot11V_State::dot11v_bssidle_timeout() const {
  const ::ywrapper::UintValue* p = dot11v_bssidle_timeout_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State.dot11v_bssidle_timeout)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Dot11V_State::release_dot11v_bssidle_timeout() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State.dot11v_bssidle_timeout)
  
  ::ywrapper::UintValue* temp = dot11v_bssidle_timeout_;
  dot11v_bssidle_timeout_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Ssids_Ssid_Dot11V_State::mutable_dot11v_bssidle_timeout() {
  
  if (dot11v_bssidle_timeout_ == NULL) {
    dot11v_bssidle_timeout_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State.dot11v_bssidle_timeout)
  return dot11v_bssidle_timeout_;
}
inline void Ssids_Ssid_Dot11V_State::set_allocated_dot11v_bssidle_timeout(::ywrapper::UintValue* dot11v_bssidle_timeout) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dot11v_bssidle_timeout_);
  }
  if (dot11v_bssidle_timeout) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dot11v_bssidle_timeout = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dot11v_bssidle_timeout, submessage_arena);
    }
    
  } else {
    
  }
  dot11v_bssidle_timeout_ = dot11v_bssidle_timeout;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State.dot11v_bssidle_timeout)
}

// .ywrapper.BoolValue dot11v_bsstransition = 165186503 [(.yext.schemapath) = "/ssids/ssid/dot11v/state/dot11v-bsstransition"];
inline bool Ssids_Ssid_Dot11V_State::has_dot11v_bsstransition() const {
  return this != internal_default_instance() && dot11v_bsstransition_ != NULL;
}
inline const ::ywrapper::BoolValue& Ssids_Ssid_Dot11V_State::dot11v_bsstransition() const {
  const ::ywrapper::BoolValue* p = dot11v_bsstransition_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State.dot11v_bsstransition)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Dot11V_State::release_dot11v_bsstransition() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State.dot11v_bsstransition)
  
  ::ywrapper::BoolValue* temp = dot11v_bsstransition_;
  dot11v_bsstransition_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Dot11V_State::mutable_dot11v_bsstransition() {
  
  if (dot11v_bsstransition_ == NULL) {
    dot11v_bsstransition_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State.dot11v_bsstransition)
  return dot11v_bsstransition_;
}
inline void Ssids_Ssid_Dot11V_State::set_allocated_dot11v_bsstransition(::ywrapper::BoolValue* dot11v_bsstransition) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dot11v_bsstransition_);
  }
  if (dot11v_bsstransition) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dot11v_bsstransition = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dot11v_bsstransition, submessage_arena);
    }
    
  } else {
    
  }
  dot11v_bsstransition_ = dot11v_bsstransition;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State.dot11v_bsstransition)
}

// .ywrapper.BoolValue dot11v_dms = 111152750 [(.yext.schemapath) = "/ssids/ssid/dot11v/state/dot11v-dms"];
inline bool Ssids_Ssid_Dot11V_State::has_dot11v_dms() const {
  return this != internal_default_instance() && dot11v_dms_ != NULL;
}
inline const ::ywrapper::BoolValue& Ssids_Ssid_Dot11V_State::dot11v_dms() const {
  const ::ywrapper::BoolValue* p = dot11v_dms_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State.dot11v_dms)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Dot11V_State::release_dot11v_dms() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State.dot11v_dms)
  
  ::ywrapper::BoolValue* temp = dot11v_dms_;
  dot11v_dms_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Dot11V_State::mutable_dot11v_dms() {
  
  if (dot11v_dms_ == NULL) {
    dot11v_dms_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State.dot11v_dms)
  return dot11v_dms_;
}
inline void Ssids_Ssid_Dot11V_State::set_allocated_dot11v_dms(::ywrapper::BoolValue* dot11v_dms) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dot11v_dms_);
  }
  if (dot11v_dms) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dot11v_dms = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dot11v_dms, submessage_arena);
    }
    
  } else {
    
  }
  dot11v_dms_ = dot11v_dms;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State.dot11v_dms)
}

// -------------------------------------------------------------------

// Ssids_Ssid_Dot11V

// .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.Config config = 232099554 [(.yext.schemapath) = "/ssids/ssid/dot11v/config"];
inline bool Ssids_Ssid_Dot11V::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Ssids_Ssid_Dot11V::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_Config& Ssids_Ssid_Dot11V::config() const {
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_Config*>(
      &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot11V_Config_default_instance_);
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_Config* Ssids_Ssid_Dot11V::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.config)
  
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_Config* Ssids_Ssid_Dot11V::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.config)
  return config_;
}
inline void Ssids_Ssid_Dot11V::set_allocated_config(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.config)
}

// .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.State state = 433516575 [(.yext.schemapath) = "/ssids/ssid/dot11v/state"];
inline bool Ssids_Ssid_Dot11V::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Ssids_Ssid_Dot11V::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_State& Ssids_Ssid_Dot11V::state() const {
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_State*>(
      &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot11V_State_default_instance_);
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_State* Ssids_Ssid_Dot11V::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.state)
  
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_State* Ssids_Ssid_Dot11V::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.state)
  return state_;
}
inline void Ssids_Ssid_Dot11V::set_allocated_state(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V.state)
}

// -------------------------------------------------------------------

// Ssids_Ssid_Dot1XTimers_Config

// .ywrapper.UintValue blacklist_time = 60044230 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers/config/blacklist-time"];
inline bool Ssids_Ssid_Dot1XTimers_Config::has_blacklist_time() const {
  return this != internal_default_instance() && blacklist_time_ != NULL;
}
inline const ::ywrapper::UintValue& Ssids_Ssid_Dot1XTimers_Config::blacklist_time() const {
  const ::ywrapper::UintValue* p = blacklist_time_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.Config.blacklist_time)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Dot1XTimers_Config::release_blacklist_time() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.Config.blacklist_time)
  
  ::ywrapper::UintValue* temp = blacklist_time_;
  blacklist_time_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Ssids_Ssid_Dot1XTimers_Config::mutable_blacklist_time() {
  
  if (blacklist_time_ == NULL) {
    blacklist_time_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.Config.blacklist_time)
  return blacklist_time_;
}
inline void Ssids_Ssid_Dot1XTimers_Config::set_allocated_blacklist_time(::ywrapper::UintValue* blacklist_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(blacklist_time_);
  }
  if (blacklist_time) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      blacklist_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, blacklist_time, submessage_arena);
    }
    
  } else {
    
  }
  blacklist_time_ = blacklist_time;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.Config.blacklist_time)
}

// .ywrapper.UintValue max_auth_failures = 286077258 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers/config/max-auth-failures"];
inline bool Ssids_Ssid_Dot1XTimers_Config::has_max_auth_failures() const {
  return this != internal_default_instance() && max_auth_failures_ != NULL;
}
inline const ::ywrapper::UintValue& Ssids_Ssid_Dot1XTimers_Config::max_auth_failures() const {
  const ::ywrapper::UintValue* p = max_auth_failures_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.Config.max_auth_failures)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Dot1XTimers_Config::release_max_auth_failures() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.Config.max_auth_failures)
  
  ::ywrapper::UintValue* temp = max_auth_failures_;
  max_auth_failures_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Ssids_Ssid_Dot1XTimers_Config::mutable_max_auth_failures() {
  
  if (max_auth_failures_ == NULL) {
    max_auth_failures_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.Config.max_auth_failures)
  return max_auth_failures_;
}
inline void Ssids_Ssid_Dot1XTimers_Config::set_allocated_max_auth_failures(::ywrapper::UintValue* max_auth_failures) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(max_auth_failures_);
  }
  if (max_auth_failures) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      max_auth_failures = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, max_auth_failures, submessage_arena);
    }
    
  } else {
    
  }
  max_auth_failures_ = max_auth_failures;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.Config.max_auth_failures)
}

// -------------------------------------------------------------------

// Ssids_Ssid_Dot1XTimers_State

// .ywrapper.UintValue blacklist_time = 346437517 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers/state/blacklist-time"];
inline bool Ssids_Ssid_Dot1XTimers_State::has_blacklist_time() const {
  return this != internal_default_instance() && blacklist_time_ != NULL;
}
inline const ::ywrapper::UintValue& Ssids_Ssid_Dot1XTimers_State::blacklist_time() const {
  const ::ywrapper::UintValue* p = blacklist_time_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.State.blacklist_time)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Dot1XTimers_State::release_blacklist_time() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.State.blacklist_time)
  
  ::ywrapper::UintValue* temp = blacklist_time_;
  blacklist_time_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Ssids_Ssid_Dot1XTimers_State::mutable_blacklist_time() {
  
  if (blacklist_time_ == NULL) {
    blacklist_time_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.State.blacklist_time)
  return blacklist_time_;
}
inline void Ssids_Ssid_Dot1XTimers_State::set_allocated_blacklist_time(::ywrapper::UintValue* blacklist_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(blacklist_time_);
  }
  if (blacklist_time) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      blacklist_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, blacklist_time, submessage_arena);
    }
    
  } else {
    
  }
  blacklist_time_ = blacklist_time;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.State.blacklist_time)
}

// .ywrapper.UintValue max_auth_failures = 272897807 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers/state/max-auth-failures"];
inline bool Ssids_Ssid_Dot1XTimers_State::has_max_auth_failures() const {
  return this != internal_default_instance() && max_auth_failures_ != NULL;
}
inline const ::ywrapper::UintValue& Ssids_Ssid_Dot1XTimers_State::max_auth_failures() const {
  const ::ywrapper::UintValue* p = max_auth_failures_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.State.max_auth_failures)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Dot1XTimers_State::release_max_auth_failures() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.State.max_auth_failures)
  
  ::ywrapper::UintValue* temp = max_auth_failures_;
  max_auth_failures_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Ssids_Ssid_Dot1XTimers_State::mutable_max_auth_failures() {
  
  if (max_auth_failures_ == NULL) {
    max_auth_failures_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.State.max_auth_failures)
  return max_auth_failures_;
}
inline void Ssids_Ssid_Dot1XTimers_State::set_allocated_max_auth_failures(::ywrapper::UintValue* max_auth_failures) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(max_auth_failures_);
  }
  if (max_auth_failures) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      max_auth_failures = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, max_auth_failures, submessage_arena);
    }
    
  } else {
    
  }
  max_auth_failures_ = max_auth_failures;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.State.max_auth_failures)
}

// -------------------------------------------------------------------

// Ssids_Ssid_Dot1XTimers

// .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.Config config = 446236320 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers/config"];
inline bool Ssids_Ssid_Dot1XTimers::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Ssids_Ssid_Dot1XTimers::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_Config& Ssids_Ssid_Dot1XTimers::config() const {
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_Config*>(
      &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot1XTimers_Config_default_instance_);
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_Config* Ssids_Ssid_Dot1XTimers::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.config)
  
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_Config* Ssids_Ssid_Dot1XTimers::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.config)
  return config_;
}
inline void Ssids_Ssid_Dot1XTimers::set_allocated_config(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.config)
}

// .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.State state = 73845529 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers/state"];
inline bool Ssids_Ssid_Dot1XTimers::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Ssids_Ssid_Dot1XTimers::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_State& Ssids_Ssid_Dot1XTimers::state() const {
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_State*>(
      &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot1XTimers_State_default_instance_);
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_State* Ssids_Ssid_Dot1XTimers::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.state)
  
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_State* Ssids_Ssid_Dot1XTimers::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.state)
  return state_;
}
inline void Ssids_Ssid_Dot1XTimers::set_allocated_state(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers.state)
}

// -------------------------------------------------------------------

// Ssids_Ssid_State

// .ywrapper.BoolValue advertise_apname = 178502058 [(.yext.schemapath) = "/ssids/ssid/state/advertise-apname"];
inline bool Ssids_Ssid_State::has_advertise_apname() const {
  return this != internal_default_instance() && advertise_apname_ != NULL;
}
inline const ::ywrapper::BoolValue& Ssids_Ssid_State::advertise_apname() const {
  const ::ywrapper::BoolValue* p = advertise_apname_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.advertise_apname)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Ssids_Ssid_State::release_advertise_apname() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.advertise_apname)
  
  ::ywrapper::BoolValue* temp = advertise_apname_;
  advertise_apname_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Ssids_Ssid_State::mutable_advertise_apname() {
  
  if (advertise_apname_ == NULL) {
    advertise_apname_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.advertise_apname)
  return advertise_apname_;
}
inline void Ssids_Ssid_State::set_allocated_advertise_apname(::ywrapper::BoolValue* advertise_apname) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(advertise_apname_);
  }
  if (advertise_apname) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      advertise_apname = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, advertise_apname, submessage_arena);
    }
    
  } else {
    
  }
  advertise_apname_ = advertise_apname;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.advertise_apname)
}

// repeated .openconfig.enums.OpenconfigWifiTypesDATARATE basic_data_rates = 323968205 [(.yext.schemapath) = "/ssids/ssid/state/basic-data-rates"];
inline int Ssids_Ssid_State::basic_data_rates_size() const {
  return basic_data_rates_.size();
}
inline void Ssids_Ssid_State::clear_basic_data_rates() {
  basic_data_rates_.Clear();
}
inline ::openconfig::enums::OpenconfigWifiTypesDATARATE Ssids_Ssid_State::basic_data_rates(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.basic_data_rates)
  return static_cast< ::openconfig::enums::OpenconfigWifiTypesDATARATE >(basic_data_rates_.Get(index));
}
inline void Ssids_Ssid_State::set_basic_data_rates(int index, ::openconfig::enums::OpenconfigWifiTypesDATARATE value) {
  basic_data_rates_.Set(index, value);
  // @@protoc_insertion_point(field_set:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.basic_data_rates)
}
inline void Ssids_Ssid_State::add_basic_data_rates(::openconfig::enums::OpenconfigWifiTypesDATARATE value) {
  basic_data_rates_.Add(value);
  // @@protoc_insertion_point(field_add:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.basic_data_rates)
}
inline const ::google::protobuf::RepeatedField<int>&
Ssids_Ssid_State::basic_data_rates() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.basic_data_rates)
  return basic_data_rates_;
}
inline ::google::protobuf::RepeatedField<int>*
Ssids_Ssid_State::mutable_basic_data_rates() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.basic_data_rates)
  return &basic_data_rates_;
}

// .ywrapper.BoolValue broadcast_filter = 476264332 [(.yext.schemapath) = "/ssids/ssid/state/broadcast-filter"];
inline bool Ssids_Ssid_State::has_broadcast_filter() const {
  return this != internal_default_instance() && broadcast_filter_ != NULL;
}
inline const ::ywrapper::BoolValue& Ssids_Ssid_State::broadcast_filter() const {
  const ::ywrapper::BoolValue* p = broadcast_filter_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.broadcast_filter)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Ssids_Ssid_State::release_broadcast_filter() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.broadcast_filter)
  
  ::ywrapper::BoolValue* temp = broadcast_filter_;
  broadcast_filter_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Ssids_Ssid_State::mutable_broadcast_filter() {
  
  if (broadcast_filter_ == NULL) {
    broadcast_filter_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.broadcast_filter)
  return broadcast_filter_;
}
inline void Ssids_Ssid_State::set_allocated_broadcast_filter(::ywrapper::BoolValue* broadcast_filter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(broadcast_filter_);
  }
  if (broadcast_filter) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      broadcast_filter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, broadcast_filter, submessage_arena);
    }
    
  } else {
    
  }
  broadcast_filter_ = broadcast_filter;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.broadcast_filter)
}

// .ywrapper.UintValue bss_channel_utilization = 306927973 [(.yext.schemapath) = "/ssids/ssid/state/bss-channel-utilization"];
inline bool Ssids_Ssid_State::has_bss_channel_utilization() const {
  return this != internal_default_instance() && bss_channel_utilization_ != NULL;
}
inline const ::ywrapper::UintValue& Ssids_Ssid_State::bss_channel_utilization() const {
  const ::ywrapper::UintValue* p = bss_channel_utilization_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.bss_channel_utilization)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Ssids_Ssid_State::release_bss_channel_utilization() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.bss_channel_utilization)
  
  ::ywrapper::UintValue* temp = bss_channel_utilization_;
  bss_channel_utilization_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Ssids_Ssid_State::mutable_bss_channel_utilization() {
  
  if (bss_channel_utilization_ == NULL) {
    bss_channel_utilization_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.bss_channel_utilization)
  return bss_channel_utilization_;
}
inline void Ssids_Ssid_State::set_allocated_bss_channel_utilization(::ywrapper::UintValue* bss_channel_utilization) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(bss_channel_utilization_);
  }
  if (bss_channel_utilization) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bss_channel_utilization = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bss_channel_utilization, submessage_arena);
    }
    
  } else {
    
  }
  bss_channel_utilization_ = bss_channel_utilization;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.bss_channel_utilization)
}

// .ywrapper.StringValue bssid = 288958859 [(.yext.schemapath) = "/ssids/ssid/state/bssid"];
inline bool Ssids_Ssid_State::has_bssid() const {
  return this != internal_default_instance() && bssid_ != NULL;
}
inline const ::ywrapper::StringValue& Ssids_Ssid_State::bssid() const {
  const ::ywrapper::StringValue* p = bssid_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.bssid)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Ssids_Ssid_State::release_bssid() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.bssid)
  
  ::ywrapper::StringValue* temp = bssid_;
  bssid_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Ssids_Ssid_State::mutable_bssid() {
  
  if (bssid_ == NULL) {
    bssid_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.bssid)
  return bssid_;
}
inline void Ssids_Ssid_State::set_allocated_bssid(::ywrapper::StringValue* bssid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(bssid_);
  }
  if (bssid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bssid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bssid, submessage_arena);
    }
    
  } else {
    
  }
  bssid_ = bssid;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.bssid)
}

// .ywrapper.BoolValue csa = 151065463 [(.yext.schemapath) = "/ssids/ssid/state/csa"];
inline bool Ssids_Ssid_State::has_csa() const {
  return this != internal_default_instance() && csa_ != NULL;
}
inline const ::ywrapper::BoolValue& Ssids_Ssid_State::csa() const {
  const ::ywrapper::BoolValue* p = csa_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.csa)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Ssids_Ssid_State::release_csa() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.csa)
  
  ::ywrapper::BoolValue* temp = csa_;
  csa_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Ssids_Ssid_State::mutable_csa() {
  
  if (csa_ == NULL) {
    csa_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.csa)
  return csa_;
}
inline void Ssids_Ssid_State::set_allocated_csa(::ywrapper::BoolValue* csa) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(csa_);
  }
  if (csa) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      csa = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, csa, submessage_arena);
    }
    
  } else {
    
  }
  csa_ = csa;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.csa)
}

// .ywrapper.BoolValue dhcp_required = 462568869 [(.yext.schemapath) = "/ssids/ssid/state/dhcp-required"];
inline bool Ssids_Ssid_State::has_dhcp_required() const {
  return this != internal_default_instance() && dhcp_required_ != NULL;
}
inline const ::ywrapper::BoolValue& Ssids_Ssid_State::dhcp_required() const {
  const ::ywrapper::BoolValue* p = dhcp_required_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.dhcp_required)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Ssids_Ssid_State::release_dhcp_required() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.dhcp_required)
  
  ::ywrapper::BoolValue* temp = dhcp_required_;
  dhcp_required_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Ssids_Ssid_State::mutable_dhcp_required() {
  
  if (dhcp_required_ == NULL) {
    dhcp_required_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.dhcp_required)
  return dhcp_required_;
}
inline void Ssids_Ssid_State::set_allocated_dhcp_required(::ywrapper::BoolValue* dhcp_required) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dhcp_required_);
  }
  if (dhcp_required) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dhcp_required = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dhcp_required, submessage_arena);
    }
    
  } else {
    
  }
  dhcp_required_ = dhcp_required;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.dhcp_required)
}

// .ywrapper.BoolValue dot11k = 442431610 [(.yext.schemapath) = "/ssids/ssid/state/dot11k"];
inline bool Ssids_Ssid_State::has_dot11k() const {
  return this != internal_default_instance() && dot11k_ != NULL;
}
inline const ::ywrapper::BoolValue& Ssids_Ssid_State::dot11k() const {
  const ::ywrapper::BoolValue* p = dot11k_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.dot11k)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Ssids_Ssid_State::release_dot11k() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.dot11k)
  
  ::ywrapper::BoolValue* temp = dot11k_;
  dot11k_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Ssids_Ssid_State::mutable_dot11k() {
  
  if (dot11k_ == NULL) {
    dot11k_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.dot11k)
  return dot11k_;
}
inline void Ssids_Ssid_State::set_allocated_dot11k(::ywrapper::BoolValue* dot11k) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dot11k_);
  }
  if (dot11k) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dot11k = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dot11k, submessage_arena);
    }
    
  } else {
    
  }
  dot11k_ = dot11k;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.dot11k)
}

// .ywrapper.BoolValue dva = 201545223 [(.yext.schemapath) = "/ssids/ssid/state/dva"];
inline bool Ssids_Ssid_State::has_dva() const {
  return this != internal_default_instance() && dva_ != NULL;
}
inline const ::ywrapper::BoolValue& Ssids_Ssid_State::dva() const {
  const ::ywrapper::BoolValue* p = dva_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.dva)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Ssids_Ssid_State::release_dva() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.dva)
  
  ::ywrapper::BoolValue* temp = dva_;
  dva_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Ssids_Ssid_State::mutable_dva() {
  
  if (dva_ == NULL) {
    dva_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.dva)
  return dva_;
}
inline void Ssids_Ssid_State::set_allocated_dva(::ywrapper::BoolValue* dva) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dva_);
  }
  if (dva) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dva = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dva, submessage_arena);
    }
    
  } else {
    
  }
  dva_ = dva;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.dva)
}

// .ywrapper.BoolValue enabled = 293398579 [(.yext.schemapath) = "/ssids/ssid/state/enabled"];
inline bool Ssids_Ssid_State::has_enabled() const {
  return this != internal_default_instance() && enabled_ != NULL;
}
inline const ::ywrapper::BoolValue& Ssids_Ssid_State::enabled() const {
  const ::ywrapper::BoolValue* p = enabled_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.enabled)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Ssids_Ssid_State::release_enabled() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.enabled)
  
  ::ywrapper::BoolValue* temp = enabled_;
  enabled_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Ssids_Ssid_State::mutable_enabled() {
  
  if (enabled_ == NULL) {
    enabled_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.enabled)
  return enabled_;
}
inline void Ssids_Ssid_State::set_allocated_enabled(::ywrapper::BoolValue* enabled) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(enabled_);
  }
  if (enabled) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      enabled = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, enabled, submessage_arena);
    }
    
  } else {
    
  }
  enabled_ = enabled;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.enabled)
}

// .ywrapper.UintValue gtk_timeout = 448160766 [(.yext.schemapath) = "/ssids/ssid/state/gtk-timeout"];
inline bool Ssids_Ssid_State::has_gtk_timeout() const {
  return this != internal_default_instance() && gtk_timeout_ != NULL;
}
inline const ::ywrapper::UintValue& Ssids_Ssid_State::gtk_timeout() const {
  const ::ywrapper::UintValue* p = gtk_timeout_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.gtk_timeout)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Ssids_Ssid_State::release_gtk_timeout() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.gtk_timeout)
  
  ::ywrapper::UintValue* temp = gtk_timeout_;
  gtk_timeout_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Ssids_Ssid_State::mutable_gtk_timeout() {
  
  if (gtk_timeout_ == NULL) {
    gtk_timeout_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.gtk_timeout)
  return gtk_timeout_;
}
inline void Ssids_Ssid_State::set_allocated_gtk_timeout(::ywrapper::UintValue* gtk_timeout) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(gtk_timeout_);
  }
  if (gtk_timeout) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gtk_timeout = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gtk_timeout, submessage_arena);
    }
    
  } else {
    
  }
  gtk_timeout_ = gtk_timeout;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.gtk_timeout)
}

// .ywrapper.BoolValue hidden = 203435396 [(.yext.schemapath) = "/ssids/ssid/state/hidden"];
inline bool Ssids_Ssid_State::has_hidden() const {
  return this != internal_default_instance() && hidden_ != NULL;
}
inline const ::ywrapper::BoolValue& Ssids_Ssid_State::hidden() const {
  const ::ywrapper::BoolValue* p = hidden_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.hidden)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Ssids_Ssid_State::release_hidden() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.hidden)
  
  ::ywrapper::BoolValue* temp = hidden_;
  hidden_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Ssids_Ssid_State::mutable_hidden() {
  
  if (hidden_ == NULL) {
    hidden_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.hidden)
  return hidden_;
}
inline void Ssids_Ssid_State::set_allocated_hidden(::ywrapper::BoolValue* hidden) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(hidden_);
  }
  if (hidden) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hidden = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hidden, submessage_arena);
    }
    
  } else {
    
  }
  hidden_ = hidden;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.hidden)
}

// .ywrapper.BoolValue ipv6_ndp_filter = 340044189 [(.yext.schemapath) = "/ssids/ssid/state/ipv6-ndp-filter"];
inline bool Ssids_Ssid_State::has_ipv6_ndp_filter() const {
  return this != internal_default_instance() && ipv6_ndp_filter_ != NULL;
}
inline const ::ywrapper::BoolValue& Ssids_Ssid_State::ipv6_ndp_filter() const {
  const ::ywrapper::BoolValue* p = ipv6_ndp_filter_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.ipv6_ndp_filter)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Ssids_Ssid_State::release_ipv6_ndp_filter() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.ipv6_ndp_filter)
  
  ::ywrapper::BoolValue* temp = ipv6_ndp_filter_;
  ipv6_ndp_filter_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Ssids_Ssid_State::mutable_ipv6_ndp_filter() {
  
  if (ipv6_ndp_filter_ == NULL) {
    ipv6_ndp_filter_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.ipv6_ndp_filter)
  return ipv6_ndp_filter_;
}
inline void Ssids_Ssid_State::set_allocated_ipv6_ndp_filter(::ywrapper::BoolValue* ipv6_ndp_filter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ipv6_ndp_filter_);
  }
  if (ipv6_ndp_filter) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ipv6_ndp_filter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ipv6_ndp_filter, submessage_arena);
    }
    
  } else {
    
  }
  ipv6_ndp_filter_ = ipv6_ndp_filter;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.ipv6_ndp_filter)
}

// .ywrapper.UintValue ipv6_ndp_filter_timer = 490045669 [(.yext.schemapath) = "/ssids/ssid/state/ipv6-ndp-filter-timer"];
inline bool Ssids_Ssid_State::has_ipv6_ndp_filter_timer() const {
  return this != internal_default_instance() && ipv6_ndp_filter_timer_ != NULL;
}
inline const ::ywrapper::UintValue& Ssids_Ssid_State::ipv6_ndp_filter_timer() const {
  const ::ywrapper::UintValue* p = ipv6_ndp_filter_timer_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.ipv6_ndp_filter_timer)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Ssids_Ssid_State::release_ipv6_ndp_filter_timer() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.ipv6_ndp_filter_timer)
  
  ::ywrapper::UintValue* temp = ipv6_ndp_filter_timer_;
  ipv6_ndp_filter_timer_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Ssids_Ssid_State::mutable_ipv6_ndp_filter_timer() {
  
  if (ipv6_ndp_filter_timer_ == NULL) {
    ipv6_ndp_filter_timer_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.ipv6_ndp_filter_timer)
  return ipv6_ndp_filter_timer_;
}
inline void Ssids_Ssid_State::set_allocated_ipv6_ndp_filter_timer(::ywrapper::UintValue* ipv6_ndp_filter_timer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ipv6_ndp_filter_timer_);
  }
  if (ipv6_ndp_filter_timer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ipv6_ndp_filter_timer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ipv6_ndp_filter_timer, submessage_arena);
    }
    
  } else {
    
  }
  ipv6_ndp_filter_timer_ = ipv6_ndp_filter_timer;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.ipv6_ndp_filter_timer)
}

// .ywrapper.StringValue mobility_domain = 335299980 [(.yext.schemapath) = "/ssids/ssid/state/mobility-domain"];
inline bool Ssids_Ssid_State::has_mobility_domain() const {
  return this != internal_default_instance() && mobility_domain_ != NULL;
}
inline const ::ywrapper::StringValue& Ssids_Ssid_State::mobility_domain() const {
  const ::ywrapper::StringValue* p = mobility_domain_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.mobility_domain)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Ssids_Ssid_State::release_mobility_domain() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.mobility_domain)
  
  ::ywrapper::StringValue* temp = mobility_domain_;
  mobility_domain_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Ssids_Ssid_State::mutable_mobility_domain() {
  
  if (mobility_domain_ == NULL) {
    mobility_domain_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.mobility_domain)
  return mobility_domain_;
}
inline void Ssids_Ssid_State::set_allocated_mobility_domain(::ywrapper::StringValue* mobility_domain) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mobility_domain_);
  }
  if (mobility_domain) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mobility_domain = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mobility_domain, submessage_arena);
    }
    
  } else {
    
  }
  mobility_domain_ = mobility_domain;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.mobility_domain)
}

// .ywrapper.BoolValue multicast_filter = 127752161 [(.yext.schemapath) = "/ssids/ssid/state/multicast-filter"];
inline bool Ssids_Ssid_State::has_multicast_filter() const {
  return this != internal_default_instance() && multicast_filter_ != NULL;
}
inline const ::ywrapper::BoolValue& Ssids_Ssid_State::multicast_filter() const {
  const ::ywrapper::BoolValue* p = multicast_filter_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.multicast_filter)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Ssids_Ssid_State::release_multicast_filter() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.multicast_filter)
  
  ::ywrapper::BoolValue* temp = multicast_filter_;
  multicast_filter_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Ssids_Ssid_State::mutable_multicast_filter() {
  
  if (multicast_filter_ == NULL) {
    multicast_filter_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.multicast_filter)
  return multicast_filter_;
}
inline void Ssids_Ssid_State::set_allocated_multicast_filter(::ywrapper::BoolValue* multicast_filter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(multicast_filter_);
  }
  if (multicast_filter) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      multicast_filter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, multicast_filter, submessage_arena);
    }
    
  } else {
    
  }
  multicast_filter_ = multicast_filter;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.multicast_filter)
}

// .ywrapper.StringValue name = 40491513 [(.yext.schemapath) = "/ssids/ssid/state/name"];
inline bool Ssids_Ssid_State::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::ywrapper::StringValue& Ssids_Ssid_State::name() const {
  const ::ywrapper::StringValue* p = name_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.name)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Ssids_Ssid_State::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.name)
  
  ::ywrapper::StringValue* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Ssids_Ssid_State::mutable_name() {
  
  if (name_ == NULL) {
    name_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.name)
  return name_;
}
inline void Ssids_Ssid_State::set_allocated_name(::ywrapper::StringValue* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.name)
}

// .ywrapper.BoolValue okc = 150386809 [(.yext.schemapath) = "/ssids/ssid/state/okc"];
inline bool Ssids_Ssid_State::has_okc() const {
  return this != internal_default_instance() && okc_ != NULL;
}
inline const ::ywrapper::BoolValue& Ssids_Ssid_State::okc() const {
  const ::ywrapper::BoolValue* p = okc_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.okc)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Ssids_Ssid_State::release_okc() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.okc)
  
  ::ywrapper::BoolValue* temp = okc_;
  okc_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Ssids_Ssid_State::mutable_okc() {
  
  if (okc_ == NULL) {
    okc_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.okc)
  return okc_;
}
inline void Ssids_Ssid_State::set_allocated_okc(::ywrapper::BoolValue* okc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(okc_);
  }
  if (okc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      okc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, okc, submessage_arena);
    }
    
  } else {
    
  }
  okc_ = okc;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.okc)
}

// .openconfig.enums.OpenconfigWifiTypesOPERATINGFREQUENCY operating_frequency = 231498376 [(.yext.schemapath) = "/ssids/ssid/state/operating-frequency"];
inline void Ssids_Ssid_State::clear_operating_frequency() {
  operating_frequency_ = 0;
}
inline ::openconfig::enums::OpenconfigWifiTypesOPERATINGFREQUENCY Ssids_Ssid_State::operating_frequency() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.operating_frequency)
  return static_cast< ::openconfig::enums::OpenconfigWifiTypesOPERATINGFREQUENCY >(operating_frequency_);
}
inline void Ssids_Ssid_State::set_operating_frequency(::openconfig::enums::OpenconfigWifiTypesOPERATINGFREQUENCY value) {
  
  operating_frequency_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.operating_frequency)
}

// .openconfig.openconfig_wifi_mac.Ssids.Ssid.State.Opmode opmode = 69208360 [(.yext.schemapath) = "/ssids/ssid/state/opmode"];
inline void Ssids_Ssid_State::clear_opmode() {
  opmode_ = 0;
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_State_Opmode Ssids_Ssid_State::opmode() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.opmode)
  return static_cast< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_State_Opmode >(opmode_);
}
inline void Ssids_Ssid_State::set_opmode(::openconfig::openconfig_wifi_mac::Ssids_Ssid_State_Opmode value) {
  
  opmode_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.opmode)
}

// .ywrapper.UintValue ptk_timeout = 396952177 [(.yext.schemapath) = "/ssids/ssid/state/ptk-timeout"];
inline bool Ssids_Ssid_State::has_ptk_timeout() const {
  return this != internal_default_instance() && ptk_timeout_ != NULL;
}
inline const ::ywrapper::UintValue& Ssids_Ssid_State::ptk_timeout() const {
  const ::ywrapper::UintValue* p = ptk_timeout_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.ptk_timeout)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Ssids_Ssid_State::release_ptk_timeout() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.ptk_timeout)
  
  ::ywrapper::UintValue* temp = ptk_timeout_;
  ptk_timeout_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Ssids_Ssid_State::mutable_ptk_timeout() {
  
  if (ptk_timeout_ == NULL) {
    ptk_timeout_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.ptk_timeout)
  return ptk_timeout_;
}
inline void Ssids_Ssid_State::set_allocated_ptk_timeout(::ywrapper::UintValue* ptk_timeout) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ptk_timeout_);
  }
  if (ptk_timeout) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ptk_timeout = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ptk_timeout, submessage_arena);
    }
    
  } else {
    
  }
  ptk_timeout_ = ptk_timeout;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.ptk_timeout)
}

// .ywrapper.BoolValue qbss_load = 533380824 [(.yext.schemapath) = "/ssids/ssid/state/qbss-load"];
inline bool Ssids_Ssid_State::has_qbss_load() const {
  return this != internal_default_instance() && qbss_load_ != NULL;
}
inline const ::ywrapper::BoolValue& Ssids_Ssid_State::qbss_load() const {
  const ::ywrapper::BoolValue* p = qbss_load_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.qbss_load)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Ssids_Ssid_State::release_qbss_load() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.qbss_load)
  
  ::ywrapper::BoolValue* temp = qbss_load_;
  qbss_load_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Ssids_Ssid_State::mutable_qbss_load() {
  
  if (qbss_load_ == NULL) {
    qbss_load_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.qbss_load)
  return qbss_load_;
}
inline void Ssids_Ssid_State::set_allocated_qbss_load(::ywrapper::BoolValue* qbss_load) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(qbss_load_);
  }
  if (qbss_load) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      qbss_load = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, qbss_load, submessage_arena);
    }
    
  } else {
    
  }
  qbss_load_ = qbss_load;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.qbss_load)
}

// .ywrapper.UintValue rx_bss_dot11_channel_utilization = 447270500 [(.yext.schemapath) = "/ssids/ssid/state/rx-bss-dot11-channel-utilization"];
inline bool Ssids_Ssid_State::has_rx_bss_dot11_channel_utilization() const {
  return this != internal_default_instance() && rx_bss_dot11_channel_utilization_ != NULL;
}
inline const ::ywrapper::UintValue& Ssids_Ssid_State::rx_bss_dot11_channel_utilization() const {
  const ::ywrapper::UintValue* p = rx_bss_dot11_channel_utilization_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.rx_bss_dot11_channel_utilization)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Ssids_Ssid_State::release_rx_bss_dot11_channel_utilization() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.rx_bss_dot11_channel_utilization)
  
  ::ywrapper::UintValue* temp = rx_bss_dot11_channel_utilization_;
  rx_bss_dot11_channel_utilization_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Ssids_Ssid_State::mutable_rx_bss_dot11_channel_utilization() {
  
  if (rx_bss_dot11_channel_utilization_ == NULL) {
    rx_bss_dot11_channel_utilization_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.rx_bss_dot11_channel_utilization)
  return rx_bss_dot11_channel_utilization_;
}
inline void Ssids_Ssid_State::set_allocated_rx_bss_dot11_channel_utilization(::ywrapper::UintValue* rx_bss_dot11_channel_utilization) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rx_bss_dot11_channel_utilization_);
  }
  if (rx_bss_dot11_channel_utilization) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rx_bss_dot11_channel_utilization = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rx_bss_dot11_channel_utilization, submessage_arena);
    }
    
  } else {
    
  }
  rx_bss_dot11_channel_utilization_ = rx_bss_dot11_channel_utilization;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.rx_bss_dot11_channel_utilization)
}

// .ywrapper.StringValue server_group = 473876655 [(.yext.schemapath) = "/ssids/ssid/state/server-group"];
inline bool Ssids_Ssid_State::has_server_group() const {
  return this != internal_default_instance() && server_group_ != NULL;
}
inline const ::ywrapper::StringValue& Ssids_Ssid_State::server_group() const {
  const ::ywrapper::StringValue* p = server_group_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.server_group)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Ssids_Ssid_State::release_server_group() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.server_group)
  
  ::ywrapper::StringValue* temp = server_group_;
  server_group_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Ssids_Ssid_State::mutable_server_group() {
  
  if (server_group_ == NULL) {
    server_group_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.server_group)
  return server_group_;
}
inline void Ssids_Ssid_State::set_allocated_server_group(::ywrapper::StringValue* server_group) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(server_group_);
  }
  if (server_group) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      server_group = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, server_group, submessage_arena);
    }
    
  } else {
    
  }
  server_group_ = server_group;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.server_group)
}

// .ywrapper.BoolValue station_isolation = 28685195 [(.yext.schemapath) = "/ssids/ssid/state/station-isolation"];
inline bool Ssids_Ssid_State::has_station_isolation() const {
  return this != internal_default_instance() && station_isolation_ != NULL;
}
inline const ::ywrapper::BoolValue& Ssids_Ssid_State::station_isolation() const {
  const ::ywrapper::BoolValue* p = station_isolation_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.station_isolation)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Ssids_Ssid_State::release_station_isolation() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.station_isolation)
  
  ::ywrapper::BoolValue* temp = station_isolation_;
  station_isolation_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Ssids_Ssid_State::mutable_station_isolation() {
  
  if (station_isolation_ == NULL) {
    station_isolation_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.station_isolation)
  return station_isolation_;
}
inline void Ssids_Ssid_State::set_allocated_station_isolation(::ywrapper::BoolValue* station_isolation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(station_isolation_);
  }
  if (station_isolation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      station_isolation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, station_isolation, submessage_arena);
    }
    
  } else {
    
  }
  station_isolation_ = station_isolation;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.station_isolation)
}

// repeated .openconfig.enums.OpenconfigWifiTypesDATARATE supported_data_rates = 458218077 [(.yext.schemapath) = "/ssids/ssid/state/supported-data-rates"];
inline int Ssids_Ssid_State::supported_data_rates_size() const {
  return supported_data_rates_.size();
}
inline void Ssids_Ssid_State::clear_supported_data_rates() {
  supported_data_rates_.Clear();
}
inline ::openconfig::enums::OpenconfigWifiTypesDATARATE Ssids_Ssid_State::supported_data_rates(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.supported_data_rates)
  return static_cast< ::openconfig::enums::OpenconfigWifiTypesDATARATE >(supported_data_rates_.Get(index));
}
inline void Ssids_Ssid_State::set_supported_data_rates(int index, ::openconfig::enums::OpenconfigWifiTypesDATARATE value) {
  supported_data_rates_.Set(index, value);
  // @@protoc_insertion_point(field_set:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.supported_data_rates)
}
inline void Ssids_Ssid_State::add_supported_data_rates(::openconfig::enums::OpenconfigWifiTypesDATARATE value) {
  supported_data_rates_.Add(value);
  // @@protoc_insertion_point(field_add:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.supported_data_rates)
}
inline const ::google::protobuf::RepeatedField<int>&
Ssids_Ssid_State::supported_data_rates() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.supported_data_rates)
  return supported_data_rates_;
}
inline ::google::protobuf::RepeatedField<int>*
Ssids_Ssid_State::mutable_supported_data_rates() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.supported_data_rates)
  return &supported_data_rates_;
}

// .ywrapper.UintValue tx_bss_dot11_channel_utilization = 88246714 [(.yext.schemapath) = "/ssids/ssid/state/tx-bss-dot11-channel-utilization"];
inline bool Ssids_Ssid_State::has_tx_bss_dot11_channel_utilization() const {
  return this != internal_default_instance() && tx_bss_dot11_channel_utilization_ != NULL;
}
inline const ::ywrapper::UintValue& Ssids_Ssid_State::tx_bss_dot11_channel_utilization() const {
  const ::ywrapper::UintValue* p = tx_bss_dot11_channel_utilization_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.tx_bss_dot11_channel_utilization)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Ssids_Ssid_State::release_tx_bss_dot11_channel_utilization() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.tx_bss_dot11_channel_utilization)
  
  ::ywrapper::UintValue* temp = tx_bss_dot11_channel_utilization_;
  tx_bss_dot11_channel_utilization_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Ssids_Ssid_State::mutable_tx_bss_dot11_channel_utilization() {
  
  if (tx_bss_dot11_channel_utilization_ == NULL) {
    tx_bss_dot11_channel_utilization_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.tx_bss_dot11_channel_utilization)
  return tx_bss_dot11_channel_utilization_;
}
inline void Ssids_Ssid_State::set_allocated_tx_bss_dot11_channel_utilization(::ywrapper::UintValue* tx_bss_dot11_channel_utilization) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(tx_bss_dot11_channel_utilization_);
  }
  if (tx_bss_dot11_channel_utilization) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tx_bss_dot11_channel_utilization = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx_bss_dot11_channel_utilization, submessage_arena);
    }
    
  } else {
    
  }
  tx_bss_dot11_channel_utilization_ = tx_bss_dot11_channel_utilization;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.tx_bss_dot11_channel_utilization)
}

// .ywrapper.UintValue vlan_id = 143277031 [(.yext.schemapath) = "/ssids/ssid/state/vlan-id"];
inline bool Ssids_Ssid_State::has_vlan_id() const {
  return this != internal_default_instance() && vlan_id_ != NULL;
}
inline const ::ywrapper::UintValue& Ssids_Ssid_State::vlan_id() const {
  const ::ywrapper::UintValue* p = vlan_id_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.vlan_id)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Ssids_Ssid_State::release_vlan_id() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.vlan_id)
  
  ::ywrapper::UintValue* temp = vlan_id_;
  vlan_id_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Ssids_Ssid_State::mutable_vlan_id() {
  
  if (vlan_id_ == NULL) {
    vlan_id_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.vlan_id)
  return vlan_id_;
}
inline void Ssids_Ssid_State::set_allocated_vlan_id(::ywrapper::UintValue* vlan_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(vlan_id_);
  }
  if (vlan_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vlan_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vlan_id, submessage_arena);
    }
    
  } else {
    
  }
  vlan_id_ = vlan_id;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.vlan_id)
}

// .ywrapper.StringValue wpa2_psk = 346103257 [(.yext.schemapath) = "/ssids/ssid/state/wpa2-psk"];
inline bool Ssids_Ssid_State::has_wpa2_psk() const {
  return this != internal_default_instance() && wpa2_psk_ != NULL;
}
inline const ::ywrapper::StringValue& Ssids_Ssid_State::wpa2_psk() const {
  const ::ywrapper::StringValue* p = wpa2_psk_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.wpa2_psk)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Ssids_Ssid_State::release_wpa2_psk() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.wpa2_psk)
  
  ::ywrapper::StringValue* temp = wpa2_psk_;
  wpa2_psk_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Ssids_Ssid_State::mutable_wpa2_psk() {
  
  if (wpa2_psk_ == NULL) {
    wpa2_psk_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.wpa2_psk)
  return wpa2_psk_;
}
inline void Ssids_Ssid_State::set_allocated_wpa2_psk(::ywrapper::StringValue* wpa2_psk) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(wpa2_psk_);
  }
  if (wpa2_psk) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      wpa2_psk = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, wpa2_psk, submessage_arena);
    }
    
  } else {
    
  }
  wpa2_psk_ = wpa2_psk;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.State.wpa2_psk)
}

// -------------------------------------------------------------------

// Ssids_Ssid_Wmm_Config

// .ywrapper.BoolValue trust_dscp = 177104862 [(.yext.schemapath) = "/ssids/ssid/wmm/config/trust-dscp"];
inline bool Ssids_Ssid_Wmm_Config::has_trust_dscp() const {
  return this != internal_default_instance() && trust_dscp_ != NULL;
}
inline const ::ywrapper::BoolValue& Ssids_Ssid_Wmm_Config::trust_dscp() const {
  const ::ywrapper::BoolValue* p = trust_dscp_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config.trust_dscp)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Wmm_Config::release_trust_dscp() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config.trust_dscp)
  
  ::ywrapper::BoolValue* temp = trust_dscp_;
  trust_dscp_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Wmm_Config::mutable_trust_dscp() {
  
  if (trust_dscp_ == NULL) {
    trust_dscp_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config.trust_dscp)
  return trust_dscp_;
}
inline void Ssids_Ssid_Wmm_Config::set_allocated_trust_dscp(::ywrapper::BoolValue* trust_dscp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(trust_dscp_);
  }
  if (trust_dscp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      trust_dscp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, trust_dscp, submessage_arena);
    }
    
  } else {
    
  }
  trust_dscp_ = trust_dscp;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config.trust_dscp)
}

// repeated .ywrapper.UintValue wmm_be_remark = 11867575 [(.yext.schemapath) = "/ssids/ssid/wmm/config/wmm-be-remark"];
inline int Ssids_Ssid_Wmm_Config::wmm_be_remark_size() const {
  return wmm_be_remark_.size();
}
inline const ::ywrapper::UintValue& Ssids_Ssid_Wmm_Config::wmm_be_remark(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config.wmm_be_remark)
  return wmm_be_remark_.Get(index);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Wmm_Config::mutable_wmm_be_remark(int index) {
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config.wmm_be_remark)
  return wmm_be_remark_.Mutable(index);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Wmm_Config::add_wmm_be_remark() {
  // @@protoc_insertion_point(field_add:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config.wmm_be_remark)
  return wmm_be_remark_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >*
Ssids_Ssid_Wmm_Config::mutable_wmm_be_remark() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config.wmm_be_remark)
  return &wmm_be_remark_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >&
Ssids_Ssid_Wmm_Config::wmm_be_remark() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config.wmm_be_remark)
  return wmm_be_remark_;
}

// repeated .ywrapper.UintValue wmm_bk_remark = 460642569 [(.yext.schemapath) = "/ssids/ssid/wmm/config/wmm-bk-remark"];
inline int Ssids_Ssid_Wmm_Config::wmm_bk_remark_size() const {
  return wmm_bk_remark_.size();
}
inline const ::ywrapper::UintValue& Ssids_Ssid_Wmm_Config::wmm_bk_remark(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config.wmm_bk_remark)
  return wmm_bk_remark_.Get(index);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Wmm_Config::mutable_wmm_bk_remark(int index) {
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config.wmm_bk_remark)
  return wmm_bk_remark_.Mutable(index);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Wmm_Config::add_wmm_bk_remark() {
  // @@protoc_insertion_point(field_add:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config.wmm_bk_remark)
  return wmm_bk_remark_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >*
Ssids_Ssid_Wmm_Config::mutable_wmm_bk_remark() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config.wmm_bk_remark)
  return &wmm_bk_remark_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >&
Ssids_Ssid_Wmm_Config::wmm_bk_remark() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config.wmm_bk_remark)
  return wmm_bk_remark_;
}

// repeated .ywrapper.UintValue wmm_vi_remark = 411468615 [(.yext.schemapath) = "/ssids/ssid/wmm/config/wmm-vi-remark"];
inline int Ssids_Ssid_Wmm_Config::wmm_vi_remark_size() const {
  return wmm_vi_remark_.size();
}
inline const ::ywrapper::UintValue& Ssids_Ssid_Wmm_Config::wmm_vi_remark(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config.wmm_vi_remark)
  return wmm_vi_remark_.Get(index);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Wmm_Config::mutable_wmm_vi_remark(int index) {
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config.wmm_vi_remark)
  return wmm_vi_remark_.Mutable(index);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Wmm_Config::add_wmm_vi_remark() {
  // @@protoc_insertion_point(field_add:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config.wmm_vi_remark)
  return wmm_vi_remark_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >*
Ssids_Ssid_Wmm_Config::mutable_wmm_vi_remark() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config.wmm_vi_remark)
  return &wmm_vi_remark_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >&
Ssids_Ssid_Wmm_Config::wmm_vi_remark() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config.wmm_vi_remark)
  return wmm_vi_remark_;
}

// repeated .ywrapper.UintValue wmm_vo_remark = 81366305 [(.yext.schemapath) = "/ssids/ssid/wmm/config/wmm-vo-remark"];
inline int Ssids_Ssid_Wmm_Config::wmm_vo_remark_size() const {
  return wmm_vo_remark_.size();
}
inline const ::ywrapper::UintValue& Ssids_Ssid_Wmm_Config::wmm_vo_remark(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config.wmm_vo_remark)
  return wmm_vo_remark_.Get(index);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Wmm_Config::mutable_wmm_vo_remark(int index) {
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config.wmm_vo_remark)
  return wmm_vo_remark_.Mutable(index);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Wmm_Config::add_wmm_vo_remark() {
  // @@protoc_insertion_point(field_add:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config.wmm_vo_remark)
  return wmm_vo_remark_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >*
Ssids_Ssid_Wmm_Config::mutable_wmm_vo_remark() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config.wmm_vo_remark)
  return &wmm_vo_remark_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >&
Ssids_Ssid_Wmm_Config::wmm_vo_remark() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config.wmm_vo_remark)
  return wmm_vo_remark_;
}

// -------------------------------------------------------------------

// Ssids_Ssid_Wmm_State

// .ywrapper.BoolValue trust_dscp = 81961833 [(.yext.schemapath) = "/ssids/ssid/wmm/state/trust-dscp"];
inline bool Ssids_Ssid_Wmm_State::has_trust_dscp() const {
  return this != internal_default_instance() && trust_dscp_ != NULL;
}
inline const ::ywrapper::BoolValue& Ssids_Ssid_Wmm_State::trust_dscp() const {
  const ::ywrapper::BoolValue* p = trust_dscp_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State.trust_dscp)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Wmm_State::release_trust_dscp() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State.trust_dscp)
  
  ::ywrapper::BoolValue* temp = trust_dscp_;
  trust_dscp_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Ssids_Ssid_Wmm_State::mutable_trust_dscp() {
  
  if (trust_dscp_ == NULL) {
    trust_dscp_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State.trust_dscp)
  return trust_dscp_;
}
inline void Ssids_Ssid_Wmm_State::set_allocated_trust_dscp(::ywrapper::BoolValue* trust_dscp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(trust_dscp_);
  }
  if (trust_dscp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      trust_dscp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, trust_dscp, submessage_arena);
    }
    
  } else {
    
  }
  trust_dscp_ = trust_dscp;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State.trust_dscp)
}

// repeated .ywrapper.UintValue wmm_be_remark = 12209598 [(.yext.schemapath) = "/ssids/ssid/wmm/state/wmm-be-remark"];
inline int Ssids_Ssid_Wmm_State::wmm_be_remark_size() const {
  return wmm_be_remark_.size();
}
inline const ::ywrapper::UintValue& Ssids_Ssid_Wmm_State::wmm_be_remark(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State.wmm_be_remark)
  return wmm_be_remark_.Get(index);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Wmm_State::mutable_wmm_be_remark(int index) {
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State.wmm_be_remark)
  return wmm_be_remark_.Mutable(index);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Wmm_State::add_wmm_be_remark() {
  // @@protoc_insertion_point(field_add:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State.wmm_be_remark)
  return wmm_be_remark_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >*
Ssids_Ssid_Wmm_State::mutable_wmm_be_remark() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State.wmm_be_remark)
  return &wmm_be_remark_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >&
Ssids_Ssid_Wmm_State::wmm_be_remark() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State.wmm_be_remark)
  return wmm_be_remark_;
}

// repeated .ywrapper.UintValue wmm_bk_remark = 177940556 [(.yext.schemapath) = "/ssids/ssid/wmm/state/wmm-bk-remark"];
inline int Ssids_Ssid_Wmm_State::wmm_bk_remark_size() const {
  return wmm_bk_remark_.size();
}
inline const ::ywrapper::UintValue& Ssids_Ssid_Wmm_State::wmm_bk_remark(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State.wmm_bk_remark)
  return wmm_bk_remark_.Get(index);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Wmm_State::mutable_wmm_bk_remark(int index) {
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State.wmm_bk_remark)
  return wmm_bk_remark_.Mutable(index);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Wmm_State::add_wmm_bk_remark() {
  // @@protoc_insertion_point(field_add:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State.wmm_bk_remark)
  return wmm_bk_remark_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >*
Ssids_Ssid_Wmm_State::mutable_wmm_bk_remark() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State.wmm_bk_remark)
  return &wmm_bk_remark_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >&
Ssids_Ssid_Wmm_State::wmm_bk_remark() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State.wmm_bk_remark)
  return wmm_bk_remark_;
}

// repeated .ywrapper.UintValue wmm_vi_remark = 377247662 [(.yext.schemapath) = "/ssids/ssid/wmm/state/wmm-vi-remark"];
inline int Ssids_Ssid_Wmm_State::wmm_vi_remark_size() const {
  return wmm_vi_remark_.size();
}
inline const ::ywrapper::UintValue& Ssids_Ssid_Wmm_State::wmm_vi_remark(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State.wmm_vi_remark)
  return wmm_vi_remark_.Get(index);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Wmm_State::mutable_wmm_vi_remark(int index) {
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State.wmm_vi_remark)
  return wmm_vi_remark_.Mutable(index);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Wmm_State::add_wmm_vi_remark() {
  // @@protoc_insertion_point(field_add:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State.wmm_vi_remark)
  return wmm_vi_remark_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >*
Ssids_Ssid_Wmm_State::mutable_wmm_vi_remark() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State.wmm_vi_remark)
  return &wmm_vi_remark_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >&
Ssids_Ssid_Wmm_State::wmm_vi_remark() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State.wmm_vi_remark)
  return wmm_vi_remark_;
}

// repeated .ywrapper.UintValue wmm_vo_remark = 207475684 [(.yext.schemapath) = "/ssids/ssid/wmm/state/wmm-vo-remark"];
inline int Ssids_Ssid_Wmm_State::wmm_vo_remark_size() const {
  return wmm_vo_remark_.size();
}
inline const ::ywrapper::UintValue& Ssids_Ssid_Wmm_State::wmm_vo_remark(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State.wmm_vo_remark)
  return wmm_vo_remark_.Get(index);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Wmm_State::mutable_wmm_vo_remark(int index) {
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State.wmm_vo_remark)
  return wmm_vo_remark_.Mutable(index);
}
inline ::ywrapper::UintValue* Ssids_Ssid_Wmm_State::add_wmm_vo_remark() {
  // @@protoc_insertion_point(field_add:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State.wmm_vo_remark)
  return wmm_vo_remark_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >*
Ssids_Ssid_Wmm_State::mutable_wmm_vo_remark() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State.wmm_vo_remark)
  return &wmm_vo_remark_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ywrapper::UintValue >&
Ssids_Ssid_Wmm_State::wmm_vo_remark() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State.wmm_vo_remark)
  return wmm_vo_remark_;
}

// -------------------------------------------------------------------

// Ssids_Ssid_Wmm

// .openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.Config config = 163769916 [(.yext.schemapath) = "/ssids/ssid/wmm/config"];
inline bool Ssids_Ssid_Wmm::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Ssids_Ssid_Wmm::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_Config& Ssids_Ssid_Wmm::config() const {
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_Config*>(
      &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Wmm_Config_default_instance_);
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_Config* Ssids_Ssid_Wmm::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.config)
  
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_Config* Ssids_Ssid_Wmm::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.config)
  return config_;
}
inline void Ssids_Ssid_Wmm::set_allocated_config(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.config)
}

// .openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.State state = 157043509 [(.yext.schemapath) = "/ssids/ssid/wmm/state"];
inline bool Ssids_Ssid_Wmm::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Ssids_Ssid_Wmm::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_State& Ssids_Ssid_Wmm::state() const {
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_State*>(
      &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Wmm_State_default_instance_);
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_State* Ssids_Ssid_Wmm::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.state)
  
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_State* Ssids_Ssid_Wmm::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.state)
  return state_;
}
inline void Ssids_Ssid_Wmm::set_allocated_state(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm.state)
}

// -------------------------------------------------------------------

// Ssids_Ssid

// .openconfig.openconfig_wifi_mac.Ssids.Ssid.BandSteering band_steering = 475616177 [(.yext.schemapath) = "/ssids/ssid/band-steering"];
inline bool Ssids_Ssid::has_band_steering() const {
  return this != internal_default_instance() && band_steering_ != NULL;
}
inline void Ssids_Ssid::clear_band_steering() {
  if (GetArenaNoVirtual() == NULL && band_steering_ != NULL) {
    delete band_steering_;
  }
  band_steering_ = NULL;
}
inline const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering& Ssids_Ssid::band_steering() const {
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering* p = band_steering_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.band_steering)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering*>(
      &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_BandSteering_default_instance_);
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering* Ssids_Ssid::release_band_steering() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.band_steering)
  
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering* temp = band_steering_;
  band_steering_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering* Ssids_Ssid::mutable_band_steering() {
  
  if (band_steering_ == NULL) {
    band_steering_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.band_steering)
  return band_steering_;
}
inline void Ssids_Ssid::set_allocated_band_steering(::openconfig::openconfig_wifi_mac::Ssids_Ssid_BandSteering* band_steering) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete band_steering_;
  }
  if (band_steering) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      band_steering = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, band_steering, submessage_arena);
    }
    
  } else {
    
  }
  band_steering_ = band_steering;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.band_steering)
}

// .openconfig.openconfig_wifi_mac.Ssids.Ssid.Clients clients = 158986082 [(.yext.schemapath) = "/ssids/ssid/clients"];
inline bool Ssids_Ssid::has_clients() const {
  return this != internal_default_instance() && clients_ != NULL;
}
inline void Ssids_Ssid::clear_clients() {
  if (GetArenaNoVirtual() == NULL && clients_ != NULL) {
    delete clients_;
  }
  clients_ = NULL;
}
inline const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients& Ssids_Ssid::clients() const {
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients* p = clients_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.clients)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients*>(
      &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Clients_default_instance_);
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients* Ssids_Ssid::release_clients() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.clients)
  
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients* temp = clients_;
  clients_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients* Ssids_Ssid::mutable_clients() {
  
  if (clients_ == NULL) {
    clients_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.clients)
  return clients_;
}
inline void Ssids_Ssid::set_allocated_clients(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients* clients) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete clients_;
  }
  if (clients) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      clients = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, clients, submessage_arena);
    }
    
  } else {
    
  }
  clients_ = clients;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.clients)
}

// .openconfig.openconfig_wifi_mac.Ssids.Ssid.Config config = 175369092 [(.yext.schemapath) = "/ssids/ssid/config"];
inline bool Ssids_Ssid::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Ssids_Ssid::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config& Ssids_Ssid::config() const {
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config*>(
      &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Config_default_instance_);
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config* Ssids_Ssid::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.config)
  
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config* Ssids_Ssid::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.config)
  return config_;
}
inline void Ssids_Ssid::set_allocated_config(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.config)
}

// .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11R dot11r = 123416265 [(.yext.schemapath) = "/ssids/ssid/dot11r"];
inline bool Ssids_Ssid::has_dot11r() const {
  return this != internal_default_instance() && dot11r_ != NULL;
}
inline void Ssids_Ssid::clear_dot11r() {
  if (GetArenaNoVirtual() == NULL && dot11r_ != NULL) {
    delete dot11r_;
  }
  dot11r_ = NULL;
}
inline const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R& Ssids_Ssid::dot11r() const {
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R* p = dot11r_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.dot11r)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R*>(
      &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot11R_default_instance_);
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R* Ssids_Ssid::release_dot11r() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.dot11r)
  
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R* temp = dot11r_;
  dot11r_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R* Ssids_Ssid::mutable_dot11r() {
  
  if (dot11r_ == NULL) {
    dot11r_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.dot11r)
  return dot11r_;
}
inline void Ssids_Ssid::set_allocated_dot11r(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R* dot11r) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dot11r_;
  }
  if (dot11r) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dot11r = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dot11r, submessage_arena);
    }
    
  } else {
    
  }
  dot11r_ = dot11r;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.dot11r)
}

// .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot11V dot11v = 123416269 [(.yext.schemapath) = "/ssids/ssid/dot11v"];
inline bool Ssids_Ssid::has_dot11v() const {
  return this != internal_default_instance() && dot11v_ != NULL;
}
inline void Ssids_Ssid::clear_dot11v() {
  if (GetArenaNoVirtual() == NULL && dot11v_ != NULL) {
    delete dot11v_;
  }
  dot11v_ = NULL;
}
inline const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V& Ssids_Ssid::dot11v() const {
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V* p = dot11v_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.dot11v)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V*>(
      &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot11V_default_instance_);
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V* Ssids_Ssid::release_dot11v() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.dot11v)
  
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V* temp = dot11v_;
  dot11v_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V* Ssids_Ssid::mutable_dot11v() {
  
  if (dot11v_ == NULL) {
    dot11v_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.dot11v)
  return dot11v_;
}
inline void Ssids_Ssid::set_allocated_dot11v(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11V* dot11v) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dot11v_;
  }
  if (dot11v) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dot11v = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dot11v, submessage_arena);
    }
    
  } else {
    
  }
  dot11v_ = dot11v;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.dot11v)
}

// .openconfig.openconfig_wifi_mac.Ssids.Ssid.Dot1XTimers dot1x_timers = 23265631 [(.yext.schemapath) = "/ssids/ssid/dot1x-timers"];
inline bool Ssids_Ssid::has_dot1x_timers() const {
  return this != internal_default_instance() && dot1x_timers_ != NULL;
}
inline void Ssids_Ssid::clear_dot1x_timers() {
  if (GetArenaNoVirtual() == NULL && dot1x_timers_ != NULL) {
    delete dot1x_timers_;
  }
  dot1x_timers_ = NULL;
}
inline const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers& Ssids_Ssid::dot1x_timers() const {
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers* p = dot1x_timers_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.dot1x_timers)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers*>(
      &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Dot1XTimers_default_instance_);
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers* Ssids_Ssid::release_dot1x_timers() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.dot1x_timers)
  
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers* temp = dot1x_timers_;
  dot1x_timers_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers* Ssids_Ssid::mutable_dot1x_timers() {
  
  if (dot1x_timers_ == NULL) {
    dot1x_timers_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.dot1x_timers)
  return dot1x_timers_;
}
inline void Ssids_Ssid::set_allocated_dot1x_timers(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot1XTimers* dot1x_timers) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dot1x_timers_;
  }
  if (dot1x_timers) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dot1x_timers = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dot1x_timers, submessage_arena);
    }
    
  } else {
    
  }
  dot1x_timers_ = dot1x_timers;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.dot1x_timers)
}

// .openconfig.openconfig_wifi_mac.Ssids.Ssid.State state = 247527581 [(.yext.schemapath) = "/ssids/ssid/state"];
inline bool Ssids_Ssid::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Ssids_Ssid::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_State& Ssids_Ssid::state() const {
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_State*>(
      &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_State_default_instance_);
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_State* Ssids_Ssid::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.state)
  
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_State* Ssids_Ssid::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.state)
  return state_;
}
inline void Ssids_Ssid::set_allocated_state(::openconfig::openconfig_wifi_mac::Ssids_Ssid_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.state)
}

// .openconfig.openconfig_wifi_mac.Ssids.Ssid.Wmm wmm = 470892139 [(.yext.schemapath) = "/ssids/ssid/wmm"];
inline bool Ssids_Ssid::has_wmm() const {
  return this != internal_default_instance() && wmm_ != NULL;
}
inline void Ssids_Ssid::clear_wmm() {
  if (GetArenaNoVirtual() == NULL && wmm_ != NULL) {
    delete wmm_;
  }
  wmm_ = NULL;
}
inline const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm& Ssids_Ssid::wmm() const {
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm* p = wmm_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.Ssid.wmm)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm*>(
      &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_Wmm_default_instance_);
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm* Ssids_Ssid::release_wmm() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.Ssid.wmm)
  
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm* temp = wmm_;
  wmm_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm* Ssids_Ssid::mutable_wmm() {
  
  if (wmm_ == NULL) {
    wmm_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.Ssid.wmm)
  return wmm_;
}
inline void Ssids_Ssid::set_allocated_wmm(::openconfig::openconfig_wifi_mac::Ssids_Ssid_Wmm* wmm) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete wmm_;
  }
  if (wmm) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      wmm = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, wmm, submessage_arena);
    }
    
  } else {
    
  }
  wmm_ = wmm;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.Ssid.wmm)
}

// -------------------------------------------------------------------

// Ssids_SsidKey

// string name = 1 [(.yext.schemapath) = "/ssids/ssid/name"];
inline void Ssids_SsidKey::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Ssids_SsidKey::name() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.SsidKey.name)
  return name_.GetNoArena();
}
inline void Ssids_SsidKey::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openconfig.openconfig_wifi_mac.Ssids.SsidKey.name)
}
#if LANG_CXX11
inline void Ssids_SsidKey::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openconfig.openconfig_wifi_mac.Ssids.SsidKey.name)
}
#endif
inline void Ssids_SsidKey::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openconfig.openconfig_wifi_mac.Ssids.SsidKey.name)
}
inline void Ssids_SsidKey::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openconfig.openconfig_wifi_mac.Ssids.SsidKey.name)
}
inline ::std::string* Ssids_SsidKey::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.SsidKey.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Ssids_SsidKey::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.SsidKey.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Ssids_SsidKey::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.SsidKey.name)
}

// .openconfig.openconfig_wifi_mac.Ssids.Ssid ssid = 2;
inline bool Ssids_SsidKey::has_ssid() const {
  return this != internal_default_instance() && ssid_ != NULL;
}
inline void Ssids_SsidKey::clear_ssid() {
  if (GetArenaNoVirtual() == NULL && ssid_ != NULL) {
    delete ssid_;
  }
  ssid_ = NULL;
}
inline const ::openconfig::openconfig_wifi_mac::Ssids_Ssid& Ssids_SsidKey::ssid() const {
  const ::openconfig::openconfig_wifi_mac::Ssids_Ssid* p = ssid_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.SsidKey.ssid)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_wifi_mac::Ssids_Ssid*>(
      &::openconfig::openconfig_wifi_mac::_Ssids_Ssid_default_instance_);
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid* Ssids_SsidKey::release_ssid() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_wifi_mac.Ssids.SsidKey.ssid)
  
  ::openconfig::openconfig_wifi_mac::Ssids_Ssid* temp = ssid_;
  ssid_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_wifi_mac::Ssids_Ssid* Ssids_SsidKey::mutable_ssid() {
  
  if (ssid_ == NULL) {
    ssid_ = new ::openconfig::openconfig_wifi_mac::Ssids_Ssid;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.SsidKey.ssid)
  return ssid_;
}
inline void Ssids_SsidKey::set_allocated_ssid(::openconfig::openconfig_wifi_mac::Ssids_Ssid* ssid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ssid_;
  }
  if (ssid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ssid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ssid, submessage_arena);
    }
    
  } else {
    
  }
  ssid_ = ssid;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_wifi_mac.Ssids.SsidKey.ssid)
}

// -------------------------------------------------------------------

// Ssids

// repeated .openconfig.openconfig_wifi_mac.Ssids.SsidKey ssid = 442132483 [(.yext.schemapath) = "/ssids/ssid"];
inline int Ssids::ssid_size() const {
  return ssid_.size();
}
inline void Ssids::clear_ssid() {
  ssid_.Clear();
}
inline const ::openconfig::openconfig_wifi_mac::Ssids_SsidKey& Ssids::ssid(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_wifi_mac.Ssids.ssid)
  return ssid_.Get(index);
}
inline ::openconfig::openconfig_wifi_mac::Ssids_SsidKey* Ssids::mutable_ssid(int index) {
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_wifi_mac.Ssids.ssid)
  return ssid_.Mutable(index);
}
inline ::openconfig::openconfig_wifi_mac::Ssids_SsidKey* Ssids::add_ssid() {
  // @@protoc_insertion_point(field_add:openconfig.openconfig_wifi_mac.Ssids.ssid)
  return ssid_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_wifi_mac::Ssids_SsidKey >*
Ssids::mutable_ssid() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_wifi_mac.Ssids.ssid)
  return &ssid_;
}
inline const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_wifi_mac::Ssids_SsidKey >&
Ssids::ssid() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_wifi_mac.Ssids.ssid)
  return ssid_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace openconfig_wifi_mac
}  // namespace openconfig

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode>() {
  return ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_descriptor();
}
template <> struct is_proto_enum< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config_Opmode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config_Opmode>() {
  return ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Config_Opmode_descriptor();
}
template <> struct is_proto_enum< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_Config_Dot11RMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_Config_Dot11RMethod>() {
  return ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_Config_Dot11RMethod_descriptor();
}
template <> struct is_proto_enum< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_State_Dot11RMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_State_Dot11RMethod>() {
  return ::openconfig::openconfig_wifi_mac::Ssids_Ssid_Dot11R_State_Dot11RMethod_descriptor();
}
template <> struct is_proto_enum< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_State_Opmode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openconfig::openconfig_wifi_mac::Ssids_Ssid_State_Opmode>() {
  return ::openconfig::openconfig_wifi_mac::Ssids_Ssid_State_Opmode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_openconfig_2fopenconfig_5fwifi_5fmac_2fopenconfig_5fwifi_5fmac_2eproto__INCLUDED
