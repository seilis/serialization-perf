// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openconfig/openconfig_lacp/openconfig_lacp.proto

#ifndef PROTOBUF_openconfig_2fopenconfig_5flacp_2fopenconfig_5flacp_2eproto__INCLUDED
#define PROTOBUF_openconfig_2fopenconfig_5flacp_2fopenconfig_5flacp_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "github.com/openconfig/ygot/proto/ywrapper/ywrapper.pb.h"
#include "github.com/openconfig/ygot/proto/yext/yext.pb.h"
#include "openconfig/enums/enums.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_openconfig_2fopenconfig_5flacp_2fopenconfig_5flacp_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[13];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsLacp_ConfigImpl();
void InitDefaultsLacp_Config();
void InitDefaultsLacp_Interfaces_Interface_ConfigImpl();
void InitDefaultsLacp_Interfaces_Interface_Config();
void InitDefaultsLacp_Interfaces_Interface_Members_Member_State_CountersImpl();
void InitDefaultsLacp_Interfaces_Interface_Members_Member_State_Counters();
void InitDefaultsLacp_Interfaces_Interface_Members_Member_StateImpl();
void InitDefaultsLacp_Interfaces_Interface_Members_Member_State();
void InitDefaultsLacp_Interfaces_Interface_Members_MemberImpl();
void InitDefaultsLacp_Interfaces_Interface_Members_Member();
void InitDefaultsLacp_Interfaces_Interface_Members_MemberKeyImpl();
void InitDefaultsLacp_Interfaces_Interface_Members_MemberKey();
void InitDefaultsLacp_Interfaces_Interface_MembersImpl();
void InitDefaultsLacp_Interfaces_Interface_Members();
void InitDefaultsLacp_Interfaces_Interface_StateImpl();
void InitDefaultsLacp_Interfaces_Interface_State();
void InitDefaultsLacp_Interfaces_InterfaceImpl();
void InitDefaultsLacp_Interfaces_Interface();
void InitDefaultsLacp_Interfaces_InterfaceKeyImpl();
void InitDefaultsLacp_Interfaces_InterfaceKey();
void InitDefaultsLacp_InterfacesImpl();
void InitDefaultsLacp_Interfaces();
void InitDefaultsLacp_StateImpl();
void InitDefaultsLacp_State();
void InitDefaultsLacpImpl();
void InitDefaultsLacp();
inline void InitDefaults() {
  InitDefaultsLacp_Config();
  InitDefaultsLacp_Interfaces_Interface_Config();
  InitDefaultsLacp_Interfaces_Interface_Members_Member_State_Counters();
  InitDefaultsLacp_Interfaces_Interface_Members_Member_State();
  InitDefaultsLacp_Interfaces_Interface_Members_Member();
  InitDefaultsLacp_Interfaces_Interface_Members_MemberKey();
  InitDefaultsLacp_Interfaces_Interface_Members();
  InitDefaultsLacp_Interfaces_Interface_State();
  InitDefaultsLacp_Interfaces_Interface();
  InitDefaultsLacp_Interfaces_InterfaceKey();
  InitDefaultsLacp_Interfaces();
  InitDefaultsLacp_State();
  InitDefaultsLacp();
}
}  // namespace protobuf_openconfig_2fopenconfig_5flacp_2fopenconfig_5flacp_2eproto
namespace openconfig {
namespace openconfig_lacp {
class Lacp;
class LacpDefaultTypeInternal;
extern LacpDefaultTypeInternal _Lacp_default_instance_;
class Lacp_Config;
class Lacp_ConfigDefaultTypeInternal;
extern Lacp_ConfigDefaultTypeInternal _Lacp_Config_default_instance_;
class Lacp_Interfaces;
class Lacp_InterfacesDefaultTypeInternal;
extern Lacp_InterfacesDefaultTypeInternal _Lacp_Interfaces_default_instance_;
class Lacp_Interfaces_Interface;
class Lacp_Interfaces_InterfaceDefaultTypeInternal;
extern Lacp_Interfaces_InterfaceDefaultTypeInternal _Lacp_Interfaces_Interface_default_instance_;
class Lacp_Interfaces_InterfaceKey;
class Lacp_Interfaces_InterfaceKeyDefaultTypeInternal;
extern Lacp_Interfaces_InterfaceKeyDefaultTypeInternal _Lacp_Interfaces_InterfaceKey_default_instance_;
class Lacp_Interfaces_Interface_Config;
class Lacp_Interfaces_Interface_ConfigDefaultTypeInternal;
extern Lacp_Interfaces_Interface_ConfigDefaultTypeInternal _Lacp_Interfaces_Interface_Config_default_instance_;
class Lacp_Interfaces_Interface_Members;
class Lacp_Interfaces_Interface_MembersDefaultTypeInternal;
extern Lacp_Interfaces_Interface_MembersDefaultTypeInternal _Lacp_Interfaces_Interface_Members_default_instance_;
class Lacp_Interfaces_Interface_Members_Member;
class Lacp_Interfaces_Interface_Members_MemberDefaultTypeInternal;
extern Lacp_Interfaces_Interface_Members_MemberDefaultTypeInternal _Lacp_Interfaces_Interface_Members_Member_default_instance_;
class Lacp_Interfaces_Interface_Members_MemberKey;
class Lacp_Interfaces_Interface_Members_MemberKeyDefaultTypeInternal;
extern Lacp_Interfaces_Interface_Members_MemberKeyDefaultTypeInternal _Lacp_Interfaces_Interface_Members_MemberKey_default_instance_;
class Lacp_Interfaces_Interface_Members_Member_State;
class Lacp_Interfaces_Interface_Members_Member_StateDefaultTypeInternal;
extern Lacp_Interfaces_Interface_Members_Member_StateDefaultTypeInternal _Lacp_Interfaces_Interface_Members_Member_State_default_instance_;
class Lacp_Interfaces_Interface_Members_Member_State_Counters;
class Lacp_Interfaces_Interface_Members_Member_State_CountersDefaultTypeInternal;
extern Lacp_Interfaces_Interface_Members_Member_State_CountersDefaultTypeInternal _Lacp_Interfaces_Interface_Members_Member_State_Counters_default_instance_;
class Lacp_Interfaces_Interface_State;
class Lacp_Interfaces_Interface_StateDefaultTypeInternal;
extern Lacp_Interfaces_Interface_StateDefaultTypeInternal _Lacp_Interfaces_Interface_State_default_instance_;
class Lacp_State;
class Lacp_StateDefaultTypeInternal;
extern Lacp_StateDefaultTypeInternal _Lacp_State_default_instance_;
}  // namespace openconfig_lacp
}  // namespace openconfig
namespace openconfig {
namespace openconfig_lacp {

// ===================================================================

class Lacp_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_lacp.Lacp.Config) */ {
 public:
  Lacp_Config();
  virtual ~Lacp_Config();

  Lacp_Config(const Lacp_Config& from);

  inline Lacp_Config& operator=(const Lacp_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Lacp_Config(Lacp_Config&& from) noexcept
    : Lacp_Config() {
    *this = ::std::move(from);
  }

  inline Lacp_Config& operator=(Lacp_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Lacp_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lacp_Config* internal_default_instance() {
    return reinterpret_cast<const Lacp_Config*>(
               &_Lacp_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Lacp_Config* other);
  friend void swap(Lacp_Config& a, Lacp_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Lacp_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Lacp_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Lacp_Config& from);
  void MergeFrom(const Lacp_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Lacp_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue system_priority = 71542334 [(.yext.schemapath) = "/lacp/config/system-priority"];
  bool has_system_priority() const;
  void clear_system_priority();
  static const int kSystemPriorityFieldNumber = 71542334;
  const ::ywrapper::UintValue& system_priority() const;
  ::ywrapper::UintValue* release_system_priority();
  ::ywrapper::UintValue* mutable_system_priority();
  void set_allocated_system_priority(::ywrapper::UintValue* system_priority);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_lacp.Lacp.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* system_priority_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5flacp_2fopenconfig_5flacp_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5flacp_2fopenconfig_5flacp_2eproto::InitDefaultsLacp_ConfigImpl();
};
// -------------------------------------------------------------------

class Lacp_Interfaces_Interface_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Config) */ {
 public:
  Lacp_Interfaces_Interface_Config();
  virtual ~Lacp_Interfaces_Interface_Config();

  Lacp_Interfaces_Interface_Config(const Lacp_Interfaces_Interface_Config& from);

  inline Lacp_Interfaces_Interface_Config& operator=(const Lacp_Interfaces_Interface_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Lacp_Interfaces_Interface_Config(Lacp_Interfaces_Interface_Config&& from) noexcept
    : Lacp_Interfaces_Interface_Config() {
    *this = ::std::move(from);
  }

  inline Lacp_Interfaces_Interface_Config& operator=(Lacp_Interfaces_Interface_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Lacp_Interfaces_Interface_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lacp_Interfaces_Interface_Config* internal_default_instance() {
    return reinterpret_cast<const Lacp_Interfaces_Interface_Config*>(
               &_Lacp_Interfaces_Interface_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Lacp_Interfaces_Interface_Config* other);
  friend void swap(Lacp_Interfaces_Interface_Config& a, Lacp_Interfaces_Interface_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Lacp_Interfaces_Interface_Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Lacp_Interfaces_Interface_Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Lacp_Interfaces_Interface_Config& from);
  void MergeFrom(const Lacp_Interfaces_Interface_Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Lacp_Interfaces_Interface_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue name = 73148204 [(.yext.schemapath) = "/lacp/interfaces/interface/config/name"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 73148204;
  const ::ywrapper::StringValue& name() const;
  ::ywrapper::StringValue* release_name();
  ::ywrapper::StringValue* mutable_name();
  void set_allocated_name(::ywrapper::StringValue* name);

  // .ywrapper.UintValue system_priority = 131529879 [(.yext.schemapath) = "/lacp/interfaces/interface/config/system-priority"];
  bool has_system_priority() const;
  void clear_system_priority();
  static const int kSystemPriorityFieldNumber = 131529879;
  const ::ywrapper::UintValue& system_priority() const;
  ::ywrapper::UintValue* release_system_priority();
  ::ywrapper::UintValue* mutable_system_priority();
  void set_allocated_system_priority(::ywrapper::UintValue* system_priority);

  // .ywrapper.StringValue system_id_mac = 461403306 [(.yext.schemapath) = "/lacp/interfaces/interface/config/system-id-mac"];
  bool has_system_id_mac() const;
  void clear_system_id_mac();
  static const int kSystemIdMacFieldNumber = 461403306;
  const ::ywrapper::StringValue& system_id_mac() const;
  ::ywrapper::StringValue* release_system_id_mac();
  ::ywrapper::StringValue* mutable_system_id_mac();
  void set_allocated_system_id_mac(::ywrapper::StringValue* system_id_mac);

  // .openconfig.enums.OpenconfigLacpLacpActivityType lacp_mode = 43173203 [(.yext.schemapath) = "/lacp/interfaces/interface/config/lacp-mode"];
  void clear_lacp_mode();
  static const int kLacpModeFieldNumber = 43173203;
  ::openconfig::enums::OpenconfigLacpLacpActivityType lacp_mode() const;
  void set_lacp_mode(::openconfig::enums::OpenconfigLacpLacpActivityType value);

  // .openconfig.enums.OpenconfigLacpLacpPeriodType interval = 463085042 [(.yext.schemapath) = "/lacp/interfaces/interface/config/interval"];
  void clear_interval();
  static const int kIntervalFieldNumber = 463085042;
  ::openconfig::enums::OpenconfigLacpLacpPeriodType interval() const;
  void set_interval(::openconfig::enums::OpenconfigLacpLacpPeriodType value);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* name_;
  ::ywrapper::UintValue* system_priority_;
  ::ywrapper::StringValue* system_id_mac_;
  int lacp_mode_;
  int interval_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5flacp_2fopenconfig_5flacp_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5flacp_2fopenconfig_5flacp_2eproto::InitDefaultsLacp_Interfaces_Interface_ConfigImpl();
};
// -------------------------------------------------------------------

class Lacp_Interfaces_Interface_Members_Member_State_Counters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.Counters) */ {
 public:
  Lacp_Interfaces_Interface_Members_Member_State_Counters();
  virtual ~Lacp_Interfaces_Interface_Members_Member_State_Counters();

  Lacp_Interfaces_Interface_Members_Member_State_Counters(const Lacp_Interfaces_Interface_Members_Member_State_Counters& from);

  inline Lacp_Interfaces_Interface_Members_Member_State_Counters& operator=(const Lacp_Interfaces_Interface_Members_Member_State_Counters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Lacp_Interfaces_Interface_Members_Member_State_Counters(Lacp_Interfaces_Interface_Members_Member_State_Counters&& from) noexcept
    : Lacp_Interfaces_Interface_Members_Member_State_Counters() {
    *this = ::std::move(from);
  }

  inline Lacp_Interfaces_Interface_Members_Member_State_Counters& operator=(Lacp_Interfaces_Interface_Members_Member_State_Counters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Lacp_Interfaces_Interface_Members_Member_State_Counters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lacp_Interfaces_Interface_Members_Member_State_Counters* internal_default_instance() {
    return reinterpret_cast<const Lacp_Interfaces_Interface_Members_Member_State_Counters*>(
               &_Lacp_Interfaces_Interface_Members_Member_State_Counters_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Lacp_Interfaces_Interface_Members_Member_State_Counters* other);
  friend void swap(Lacp_Interfaces_Interface_Members_Member_State_Counters& a, Lacp_Interfaces_Interface_Members_Member_State_Counters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Lacp_Interfaces_Interface_Members_Member_State_Counters* New() const PROTOBUF_FINAL { return New(NULL); }

  Lacp_Interfaces_Interface_Members_Member_State_Counters* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Lacp_Interfaces_Interface_Members_Member_State_Counters& from);
  void MergeFrom(const Lacp_Interfaces_Interface_Members_Member_State_Counters& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Lacp_Interfaces_Interface_Members_Member_State_Counters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue lacp_unknown_errors = 33984050 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state/counters/lacp-unknown-errors"];
  bool has_lacp_unknown_errors() const;
  void clear_lacp_unknown_errors();
  static const int kLacpUnknownErrorsFieldNumber = 33984050;
  const ::ywrapper::UintValue& lacp_unknown_errors() const;
  ::ywrapper::UintValue* release_lacp_unknown_errors();
  ::ywrapper::UintValue* mutable_lacp_unknown_errors();
  void set_allocated_lacp_unknown_errors(::ywrapper::UintValue* lacp_unknown_errors);

  // .ywrapper.UintValue lacp_tx_errors = 98014728 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state/counters/lacp-tx-errors"];
  bool has_lacp_tx_errors() const;
  void clear_lacp_tx_errors();
  static const int kLacpTxErrorsFieldNumber = 98014728;
  const ::ywrapper::UintValue& lacp_tx_errors() const;
  ::ywrapper::UintValue* release_lacp_tx_errors();
  ::ywrapper::UintValue* mutable_lacp_tx_errors();
  void set_allocated_lacp_tx_errors(::ywrapper::UintValue* lacp_tx_errors);

  // .ywrapper.UintValue lacp_rx_errors = 124474434 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state/counters/lacp-rx-errors"];
  bool has_lacp_rx_errors() const;
  void clear_lacp_rx_errors();
  static const int kLacpRxErrorsFieldNumber = 124474434;
  const ::ywrapper::UintValue& lacp_rx_errors() const;
  ::ywrapper::UintValue* release_lacp_rx_errors();
  ::ywrapper::UintValue* mutable_lacp_rx_errors();
  void set_allocated_lacp_rx_errors(::ywrapper::UintValue* lacp_rx_errors);

  // .ywrapper.UintValue lacp_in_pkts = 133444718 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state/counters/lacp-in-pkts"];
  bool has_lacp_in_pkts() const;
  void clear_lacp_in_pkts();
  static const int kLacpInPktsFieldNumber = 133444718;
  const ::ywrapper::UintValue& lacp_in_pkts() const;
  ::ywrapper::UintValue* release_lacp_in_pkts();
  ::ywrapper::UintValue* mutable_lacp_in_pkts();
  void set_allocated_lacp_in_pkts(::ywrapper::UintValue* lacp_in_pkts);

  // .ywrapper.UintValue lacp_out_pkts = 391388365 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state/counters/lacp-out-pkts"];
  bool has_lacp_out_pkts() const;
  void clear_lacp_out_pkts();
  static const int kLacpOutPktsFieldNumber = 391388365;
  const ::ywrapper::UintValue& lacp_out_pkts() const;
  ::ywrapper::UintValue* release_lacp_out_pkts();
  ::ywrapper::UintValue* mutable_lacp_out_pkts();
  void set_allocated_lacp_out_pkts(::ywrapper::UintValue* lacp_out_pkts);

  // .ywrapper.UintValue lacp_errors = 432819317 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state/counters/lacp-errors"];
  bool has_lacp_errors() const;
  void clear_lacp_errors();
  static const int kLacpErrorsFieldNumber = 432819317;
  const ::ywrapper::UintValue& lacp_errors() const;
  ::ywrapper::UintValue* release_lacp_errors();
  ::ywrapper::UintValue* mutable_lacp_errors();
  void set_allocated_lacp_errors(::ywrapper::UintValue* lacp_errors);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.Counters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* lacp_unknown_errors_;
  ::ywrapper::UintValue* lacp_tx_errors_;
  ::ywrapper::UintValue* lacp_rx_errors_;
  ::ywrapper::UintValue* lacp_in_pkts_;
  ::ywrapper::UintValue* lacp_out_pkts_;
  ::ywrapper::UintValue* lacp_errors_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5flacp_2fopenconfig_5flacp_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5flacp_2fopenconfig_5flacp_2eproto::InitDefaultsLacp_Interfaces_Interface_Members_Member_State_CountersImpl();
};
// -------------------------------------------------------------------

class Lacp_Interfaces_Interface_Members_Member_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State) */ {
 public:
  Lacp_Interfaces_Interface_Members_Member_State();
  virtual ~Lacp_Interfaces_Interface_Members_Member_State();

  Lacp_Interfaces_Interface_Members_Member_State(const Lacp_Interfaces_Interface_Members_Member_State& from);

  inline Lacp_Interfaces_Interface_Members_Member_State& operator=(const Lacp_Interfaces_Interface_Members_Member_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Lacp_Interfaces_Interface_Members_Member_State(Lacp_Interfaces_Interface_Members_Member_State&& from) noexcept
    : Lacp_Interfaces_Interface_Members_Member_State() {
    *this = ::std::move(from);
  }

  inline Lacp_Interfaces_Interface_Members_Member_State& operator=(Lacp_Interfaces_Interface_Members_Member_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Lacp_Interfaces_Interface_Members_Member_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lacp_Interfaces_Interface_Members_Member_State* internal_default_instance() {
    return reinterpret_cast<const Lacp_Interfaces_Interface_Members_Member_State*>(
               &_Lacp_Interfaces_Interface_Members_Member_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Lacp_Interfaces_Interface_Members_Member_State* other);
  friend void swap(Lacp_Interfaces_Interface_Members_Member_State& a, Lacp_Interfaces_Interface_Members_Member_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Lacp_Interfaces_Interface_Members_Member_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Lacp_Interfaces_Interface_Members_Member_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Lacp_Interfaces_Interface_Members_Member_State& from);
  void MergeFrom(const Lacp_Interfaces_Interface_Members_Member_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Lacp_Interfaces_Interface_Members_Member_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Lacp_Interfaces_Interface_Members_Member_State_Counters Counters;

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue partner_port_num = 11089282 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state/partner-port-num"];
  bool has_partner_port_num() const;
  void clear_partner_port_num();
  static const int kPartnerPortNumFieldNumber = 11089282;
  const ::ywrapper::UintValue& partner_port_num() const;
  ::ywrapper::UintValue* release_partner_port_num();
  ::ywrapper::UintValue* mutable_partner_port_num();
  void set_allocated_partner_port_num(::ywrapper::UintValue* partner_port_num);

  // .ywrapper.UintValue port_num = 55409541 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state/port-num"];
  bool has_port_num() const;
  void clear_port_num();
  static const int kPortNumFieldNumber = 55409541;
  const ::ywrapper::UintValue& port_num() const;
  ::ywrapper::UintValue* release_port_num();
  ::ywrapper::UintValue* mutable_port_num();
  void set_allocated_port_num(::ywrapper::UintValue* port_num);

  // .ywrapper.StringValue interface = 140807600 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state/interface"];
  bool has_interface() const;
  void clear_interface();
  static const int kInterfaceFieldNumber = 140807600;
  const ::ywrapper::StringValue& interface() const;
  ::ywrapper::StringValue* release_interface();
  ::ywrapper::StringValue* mutable_interface();
  void set_allocated_interface(::ywrapper::StringValue* interface);

  // .openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.Counters counters = 159126128 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state/counters"];
  bool has_counters() const;
  void clear_counters();
  static const int kCountersFieldNumber = 159126128;
  const ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_Member_State_Counters& counters() const;
  ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_Member_State_Counters* release_counters();
  ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_Member_State_Counters* mutable_counters();
  void set_allocated_counters(::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_Member_State_Counters* counters);

  // .ywrapper.StringValue system_id = 207537082 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state/system-id"];
  bool has_system_id() const;
  void clear_system_id();
  static const int kSystemIdFieldNumber = 207537082;
  const ::ywrapper::StringValue& system_id() const;
  ::ywrapper::StringValue* release_system_id();
  ::ywrapper::StringValue* mutable_system_id();
  void set_allocated_system_id(::ywrapper::StringValue* system_id);

  // .ywrapper.UintValue partner_key = 313821353 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state/partner-key"];
  bool has_partner_key() const;
  void clear_partner_key();
  static const int kPartnerKeyFieldNumber = 313821353;
  const ::ywrapper::UintValue& partner_key() const;
  ::ywrapper::UintValue* release_partner_key();
  ::ywrapper::UintValue* mutable_partner_key();
  void set_allocated_partner_key(::ywrapper::UintValue* partner_key);

  // .ywrapper.BoolValue distributing = 325869523 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state/distributing"];
  bool has_distributing() const;
  void clear_distributing();
  static const int kDistributingFieldNumber = 325869523;
  const ::ywrapper::BoolValue& distributing() const;
  ::ywrapper::BoolValue* release_distributing();
  ::ywrapper::BoolValue* mutable_distributing();
  void set_allocated_distributing(::ywrapper::BoolValue* distributing);

  // .ywrapper.StringValue partner_id = 342233611 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state/partner-id"];
  bool has_partner_id() const;
  void clear_partner_id();
  static const int kPartnerIdFieldNumber = 342233611;
  const ::ywrapper::StringValue& partner_id() const;
  ::ywrapper::StringValue* release_partner_id();
  ::ywrapper::StringValue* mutable_partner_id();
  void set_allocated_partner_id(::ywrapper::StringValue* partner_id);

  // .ywrapper.BoolValue collecting = 431241365 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state/collecting"];
  bool has_collecting() const;
  void clear_collecting();
  static const int kCollectingFieldNumber = 431241365;
  const ::ywrapper::BoolValue& collecting() const;
  ::ywrapper::BoolValue* release_collecting();
  ::ywrapper::BoolValue* mutable_collecting();
  void set_allocated_collecting(::ywrapper::BoolValue* collecting);

  // .ywrapper.BoolValue aggregatable = 490059983 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state/aggregatable"];
  bool has_aggregatable() const;
  void clear_aggregatable();
  static const int kAggregatableFieldNumber = 490059983;
  const ::ywrapper::BoolValue& aggregatable() const;
  ::ywrapper::BoolValue* release_aggregatable();
  ::ywrapper::BoolValue* mutable_aggregatable();
  void set_allocated_aggregatable(::ywrapper::BoolValue* aggregatable);

  // .ywrapper.UintValue oper_key = 503255861 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state/oper-key"];
  bool has_oper_key() const;
  void clear_oper_key();
  static const int kOperKeyFieldNumber = 503255861;
  const ::ywrapper::UintValue& oper_key() const;
  ::ywrapper::UintValue* release_oper_key();
  ::ywrapper::UintValue* mutable_oper_key();
  void set_allocated_oper_key(::ywrapper::UintValue* oper_key);

  // .openconfig.enums.OpenconfigLacpLacpActivityType activity = 344383748 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state/activity"];
  void clear_activity();
  static const int kActivityFieldNumber = 344383748;
  ::openconfig::enums::OpenconfigLacpLacpActivityType activity() const;
  void set_activity(::openconfig::enums::OpenconfigLacpLacpActivityType value);

  // .openconfig.enums.OpenconfigLacpLacpTimeoutType timeout = 834808 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state/timeout"];
  void clear_timeout();
  static const int kTimeoutFieldNumber = 834808;
  ::openconfig::enums::OpenconfigLacpLacpTimeoutType timeout() const;
  void set_timeout(::openconfig::enums::OpenconfigLacpLacpTimeoutType value);

  // .openconfig.enums.OpenconfigLacpLacpSynchronizationType synchronization = 179070617 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state/synchronization"];
  void clear_synchronization();
  static const int kSynchronizationFieldNumber = 179070617;
  ::openconfig::enums::OpenconfigLacpLacpSynchronizationType synchronization() const;
  void set_synchronization(::openconfig::enums::OpenconfigLacpLacpSynchronizationType value);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* partner_port_num_;
  ::ywrapper::UintValue* port_num_;
  ::ywrapper::StringValue* interface_;
  ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_Member_State_Counters* counters_;
  ::ywrapper::StringValue* system_id_;
  ::ywrapper::UintValue* partner_key_;
  ::ywrapper::BoolValue* distributing_;
  ::ywrapper::StringValue* partner_id_;
  ::ywrapper::BoolValue* collecting_;
  ::ywrapper::BoolValue* aggregatable_;
  ::ywrapper::UintValue* oper_key_;
  int activity_;
  int timeout_;
  int synchronization_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5flacp_2fopenconfig_5flacp_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5flacp_2fopenconfig_5flacp_2eproto::InitDefaultsLacp_Interfaces_Interface_Members_Member_StateImpl();
};
// -------------------------------------------------------------------

class Lacp_Interfaces_Interface_Members_Member : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member) */ {
 public:
  Lacp_Interfaces_Interface_Members_Member();
  virtual ~Lacp_Interfaces_Interface_Members_Member();

  Lacp_Interfaces_Interface_Members_Member(const Lacp_Interfaces_Interface_Members_Member& from);

  inline Lacp_Interfaces_Interface_Members_Member& operator=(const Lacp_Interfaces_Interface_Members_Member& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Lacp_Interfaces_Interface_Members_Member(Lacp_Interfaces_Interface_Members_Member&& from) noexcept
    : Lacp_Interfaces_Interface_Members_Member() {
    *this = ::std::move(from);
  }

  inline Lacp_Interfaces_Interface_Members_Member& operator=(Lacp_Interfaces_Interface_Members_Member&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Lacp_Interfaces_Interface_Members_Member& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lacp_Interfaces_Interface_Members_Member* internal_default_instance() {
    return reinterpret_cast<const Lacp_Interfaces_Interface_Members_Member*>(
               &_Lacp_Interfaces_Interface_Members_Member_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Lacp_Interfaces_Interface_Members_Member* other);
  friend void swap(Lacp_Interfaces_Interface_Members_Member& a, Lacp_Interfaces_Interface_Members_Member& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Lacp_Interfaces_Interface_Members_Member* New() const PROTOBUF_FINAL { return New(NULL); }

  Lacp_Interfaces_Interface_Members_Member* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Lacp_Interfaces_Interface_Members_Member& from);
  void MergeFrom(const Lacp_Interfaces_Interface_Members_Member& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Lacp_Interfaces_Interface_Members_Member* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Lacp_Interfaces_Interface_Members_Member_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State state = 101613208 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 101613208;
  const ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_Member_State& state() const;
  ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_Member_State* release_state();
  ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_Member_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_Member_State* state);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_Member_State* state_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5flacp_2fopenconfig_5flacp_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5flacp_2fopenconfig_5flacp_2eproto::InitDefaultsLacp_Interfaces_Interface_Members_MemberImpl();
};
// -------------------------------------------------------------------

class Lacp_Interfaces_Interface_Members_MemberKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.MemberKey) */ {
 public:
  Lacp_Interfaces_Interface_Members_MemberKey();
  virtual ~Lacp_Interfaces_Interface_Members_MemberKey();

  Lacp_Interfaces_Interface_Members_MemberKey(const Lacp_Interfaces_Interface_Members_MemberKey& from);

  inline Lacp_Interfaces_Interface_Members_MemberKey& operator=(const Lacp_Interfaces_Interface_Members_MemberKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Lacp_Interfaces_Interface_Members_MemberKey(Lacp_Interfaces_Interface_Members_MemberKey&& from) noexcept
    : Lacp_Interfaces_Interface_Members_MemberKey() {
    *this = ::std::move(from);
  }

  inline Lacp_Interfaces_Interface_Members_MemberKey& operator=(Lacp_Interfaces_Interface_Members_MemberKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Lacp_Interfaces_Interface_Members_MemberKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lacp_Interfaces_Interface_Members_MemberKey* internal_default_instance() {
    return reinterpret_cast<const Lacp_Interfaces_Interface_Members_MemberKey*>(
               &_Lacp_Interfaces_Interface_Members_MemberKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Lacp_Interfaces_Interface_Members_MemberKey* other);
  friend void swap(Lacp_Interfaces_Interface_Members_MemberKey& a, Lacp_Interfaces_Interface_Members_MemberKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Lacp_Interfaces_Interface_Members_MemberKey* New() const PROTOBUF_FINAL { return New(NULL); }

  Lacp_Interfaces_Interface_Members_MemberKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Lacp_Interfaces_Interface_Members_MemberKey& from);
  void MergeFrom(const Lacp_Interfaces_Interface_Members_MemberKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Lacp_Interfaces_Interface_Members_MemberKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string interface = 1 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/interface"];
  void clear_interface();
  static const int kInterfaceFieldNumber = 1;
  const ::std::string& interface() const;
  void set_interface(const ::std::string& value);
  #if LANG_CXX11
  void set_interface(::std::string&& value);
  #endif
  void set_interface(const char* value);
  void set_interface(const char* value, size_t size);
  ::std::string* mutable_interface();
  ::std::string* release_interface();
  void set_allocated_interface(::std::string* interface);

  // .openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member member = 2;
  bool has_member() const;
  void clear_member();
  static const int kMemberFieldNumber = 2;
  const ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_Member& member() const;
  ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_Member* release_member();
  ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_Member* mutable_member();
  void set_allocated_member(::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_Member* member);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.MemberKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr interface_;
  ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_Member* member_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5flacp_2fopenconfig_5flacp_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5flacp_2fopenconfig_5flacp_2eproto::InitDefaultsLacp_Interfaces_Interface_Members_MemberKeyImpl();
};
// -------------------------------------------------------------------

class Lacp_Interfaces_Interface_Members : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members) */ {
 public:
  Lacp_Interfaces_Interface_Members();
  virtual ~Lacp_Interfaces_Interface_Members();

  Lacp_Interfaces_Interface_Members(const Lacp_Interfaces_Interface_Members& from);

  inline Lacp_Interfaces_Interface_Members& operator=(const Lacp_Interfaces_Interface_Members& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Lacp_Interfaces_Interface_Members(Lacp_Interfaces_Interface_Members&& from) noexcept
    : Lacp_Interfaces_Interface_Members() {
    *this = ::std::move(from);
  }

  inline Lacp_Interfaces_Interface_Members& operator=(Lacp_Interfaces_Interface_Members&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Lacp_Interfaces_Interface_Members& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lacp_Interfaces_Interface_Members* internal_default_instance() {
    return reinterpret_cast<const Lacp_Interfaces_Interface_Members*>(
               &_Lacp_Interfaces_Interface_Members_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Lacp_Interfaces_Interface_Members* other);
  friend void swap(Lacp_Interfaces_Interface_Members& a, Lacp_Interfaces_Interface_Members& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Lacp_Interfaces_Interface_Members* New() const PROTOBUF_FINAL { return New(NULL); }

  Lacp_Interfaces_Interface_Members* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Lacp_Interfaces_Interface_Members& from);
  void MergeFrom(const Lacp_Interfaces_Interface_Members& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Lacp_Interfaces_Interface_Members* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Lacp_Interfaces_Interface_Members_Member Member;
  typedef Lacp_Interfaces_Interface_Members_MemberKey MemberKey;

  // accessors -------------------------------------------------------

  // repeated .openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.MemberKey member = 107372070 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member"];
  int member_size() const;
  void clear_member();
  static const int kMemberFieldNumber = 107372070;
  const ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_MemberKey& member(int index) const;
  ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_MemberKey* mutable_member(int index);
  ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_MemberKey* add_member();
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_MemberKey >*
      mutable_member();
  const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_MemberKey >&
      member() const;

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_MemberKey > member_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5flacp_2fopenconfig_5flacp_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5flacp_2fopenconfig_5flacp_2eproto::InitDefaultsLacp_Interfaces_Interface_MembersImpl();
};
// -------------------------------------------------------------------

class Lacp_Interfaces_Interface_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.State) */ {
 public:
  Lacp_Interfaces_Interface_State();
  virtual ~Lacp_Interfaces_Interface_State();

  Lacp_Interfaces_Interface_State(const Lacp_Interfaces_Interface_State& from);

  inline Lacp_Interfaces_Interface_State& operator=(const Lacp_Interfaces_Interface_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Lacp_Interfaces_Interface_State(Lacp_Interfaces_Interface_State&& from) noexcept
    : Lacp_Interfaces_Interface_State() {
    *this = ::std::move(from);
  }

  inline Lacp_Interfaces_Interface_State& operator=(Lacp_Interfaces_Interface_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Lacp_Interfaces_Interface_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lacp_Interfaces_Interface_State* internal_default_instance() {
    return reinterpret_cast<const Lacp_Interfaces_Interface_State*>(
               &_Lacp_Interfaces_Interface_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Lacp_Interfaces_Interface_State* other);
  friend void swap(Lacp_Interfaces_Interface_State& a, Lacp_Interfaces_Interface_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Lacp_Interfaces_Interface_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Lacp_Interfaces_Interface_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Lacp_Interfaces_Interface_State& from);
  void MergeFrom(const Lacp_Interfaces_Interface_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Lacp_Interfaces_Interface_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.StringValue name = 53396163 [(.yext.schemapath) = "/lacp/interfaces/interface/state/name"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 53396163;
  const ::ywrapper::StringValue& name() const;
  ::ywrapper::StringValue* release_name();
  ::ywrapper::StringValue* mutable_name();
  void set_allocated_name(::ywrapper::StringValue* name);

  // .ywrapper.StringValue system_id_mac = 308184979 [(.yext.schemapath) = "/lacp/interfaces/interface/state/system-id-mac"];
  bool has_system_id_mac() const;
  void clear_system_id_mac();
  static const int kSystemIdMacFieldNumber = 308184979;
  const ::ywrapper::StringValue& system_id_mac() const;
  ::ywrapper::StringValue* release_system_id_mac();
  ::ywrapper::StringValue* mutable_system_id_mac();
  void set_allocated_system_id_mac(::ywrapper::StringValue* system_id_mac);

  // .ywrapper.UintValue system_priority = 386600370 [(.yext.schemapath) = "/lacp/interfaces/interface/state/system-priority"];
  bool has_system_priority() const;
  void clear_system_priority();
  static const int kSystemPriorityFieldNumber = 386600370;
  const ::ywrapper::UintValue& system_priority() const;
  ::ywrapper::UintValue* release_system_priority();
  ::ywrapper::UintValue* mutable_system_priority();
  void set_allocated_system_priority(::ywrapper::UintValue* system_priority);

  // .openconfig.enums.OpenconfigLacpLacpPeriodType interval = 156781677 [(.yext.schemapath) = "/lacp/interfaces/interface/state/interval"];
  void clear_interval();
  static const int kIntervalFieldNumber = 156781677;
  ::openconfig::enums::OpenconfigLacpLacpPeriodType interval() const;
  void set_interval(::openconfig::enums::OpenconfigLacpLacpPeriodType value);

  // .openconfig.enums.OpenconfigLacpLacpActivityType lacp_mode = 285910318 [(.yext.schemapath) = "/lacp/interfaces/interface/state/lacp-mode"];
  void clear_lacp_mode();
  static const int kLacpModeFieldNumber = 285910318;
  ::openconfig::enums::OpenconfigLacpLacpActivityType lacp_mode() const;
  void set_lacp_mode(::openconfig::enums::OpenconfigLacpLacpActivityType value);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::StringValue* name_;
  ::ywrapper::StringValue* system_id_mac_;
  ::ywrapper::UintValue* system_priority_;
  int interval_;
  int lacp_mode_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5flacp_2fopenconfig_5flacp_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5flacp_2fopenconfig_5flacp_2eproto::InitDefaultsLacp_Interfaces_Interface_StateImpl();
};
// -------------------------------------------------------------------

class Lacp_Interfaces_Interface : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_lacp.Lacp.Interfaces.Interface) */ {
 public:
  Lacp_Interfaces_Interface();
  virtual ~Lacp_Interfaces_Interface();

  Lacp_Interfaces_Interface(const Lacp_Interfaces_Interface& from);

  inline Lacp_Interfaces_Interface& operator=(const Lacp_Interfaces_Interface& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Lacp_Interfaces_Interface(Lacp_Interfaces_Interface&& from) noexcept
    : Lacp_Interfaces_Interface() {
    *this = ::std::move(from);
  }

  inline Lacp_Interfaces_Interface& operator=(Lacp_Interfaces_Interface&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Lacp_Interfaces_Interface& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lacp_Interfaces_Interface* internal_default_instance() {
    return reinterpret_cast<const Lacp_Interfaces_Interface*>(
               &_Lacp_Interfaces_Interface_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(Lacp_Interfaces_Interface* other);
  friend void swap(Lacp_Interfaces_Interface& a, Lacp_Interfaces_Interface& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Lacp_Interfaces_Interface* New() const PROTOBUF_FINAL { return New(NULL); }

  Lacp_Interfaces_Interface* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Lacp_Interfaces_Interface& from);
  void MergeFrom(const Lacp_Interfaces_Interface& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Lacp_Interfaces_Interface* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Lacp_Interfaces_Interface_Config Config;
  typedef Lacp_Interfaces_Interface_Members Members;
  typedef Lacp_Interfaces_Interface_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Config config = 267814 [(.yext.schemapath) = "/lacp/interfaces/interface/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 267814;
  const ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Config& config() const;
  ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Config* release_config();
  ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Config* config);

  // .openconfig.openconfig_lacp.Lacp.Interfaces.Interface.State state = 409381779 [(.yext.schemapath) = "/lacp/interfaces/interface/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 409381779;
  const ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_State& state() const;
  ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_State* release_state();
  ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_State* state);

  // .openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members members = 448219541 [(.yext.schemapath) = "/lacp/interfaces/interface/members"];
  bool has_members() const;
  void clear_members();
  static const int kMembersFieldNumber = 448219541;
  const ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members& members() const;
  ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members* release_members();
  ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members* mutable_members();
  void set_allocated_members(::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members* members);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_lacp.Lacp.Interfaces.Interface)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Config* config_;
  ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_State* state_;
  ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members* members_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5flacp_2fopenconfig_5flacp_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5flacp_2fopenconfig_5flacp_2eproto::InitDefaultsLacp_Interfaces_InterfaceImpl();
};
// -------------------------------------------------------------------

class Lacp_Interfaces_InterfaceKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_lacp.Lacp.Interfaces.InterfaceKey) */ {
 public:
  Lacp_Interfaces_InterfaceKey();
  virtual ~Lacp_Interfaces_InterfaceKey();

  Lacp_Interfaces_InterfaceKey(const Lacp_Interfaces_InterfaceKey& from);

  inline Lacp_Interfaces_InterfaceKey& operator=(const Lacp_Interfaces_InterfaceKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Lacp_Interfaces_InterfaceKey(Lacp_Interfaces_InterfaceKey&& from) noexcept
    : Lacp_Interfaces_InterfaceKey() {
    *this = ::std::move(from);
  }

  inline Lacp_Interfaces_InterfaceKey& operator=(Lacp_Interfaces_InterfaceKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Lacp_Interfaces_InterfaceKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lacp_Interfaces_InterfaceKey* internal_default_instance() {
    return reinterpret_cast<const Lacp_Interfaces_InterfaceKey*>(
               &_Lacp_Interfaces_InterfaceKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(Lacp_Interfaces_InterfaceKey* other);
  friend void swap(Lacp_Interfaces_InterfaceKey& a, Lacp_Interfaces_InterfaceKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Lacp_Interfaces_InterfaceKey* New() const PROTOBUF_FINAL { return New(NULL); }

  Lacp_Interfaces_InterfaceKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Lacp_Interfaces_InterfaceKey& from);
  void MergeFrom(const Lacp_Interfaces_InterfaceKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Lacp_Interfaces_InterfaceKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1 [(.yext.schemapath) = "/lacp/interfaces/interface/name"];
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .openconfig.openconfig_lacp.Lacp.Interfaces.Interface interface = 2;
  bool has_interface() const;
  void clear_interface();
  static const int kInterfaceFieldNumber = 2;
  const ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface& interface() const;
  ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface* release_interface();
  ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface* mutable_interface();
  void set_allocated_interface(::openconfig::openconfig_lacp::Lacp_Interfaces_Interface* interface);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_lacp.Lacp.Interfaces.InterfaceKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface* interface_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5flacp_2fopenconfig_5flacp_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5flacp_2fopenconfig_5flacp_2eproto::InitDefaultsLacp_Interfaces_InterfaceKeyImpl();
};
// -------------------------------------------------------------------

class Lacp_Interfaces : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_lacp.Lacp.Interfaces) */ {
 public:
  Lacp_Interfaces();
  virtual ~Lacp_Interfaces();

  Lacp_Interfaces(const Lacp_Interfaces& from);

  inline Lacp_Interfaces& operator=(const Lacp_Interfaces& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Lacp_Interfaces(Lacp_Interfaces&& from) noexcept
    : Lacp_Interfaces() {
    *this = ::std::move(from);
  }

  inline Lacp_Interfaces& operator=(Lacp_Interfaces&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Lacp_Interfaces& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lacp_Interfaces* internal_default_instance() {
    return reinterpret_cast<const Lacp_Interfaces*>(
               &_Lacp_Interfaces_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(Lacp_Interfaces* other);
  friend void swap(Lacp_Interfaces& a, Lacp_Interfaces& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Lacp_Interfaces* New() const PROTOBUF_FINAL { return New(NULL); }

  Lacp_Interfaces* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Lacp_Interfaces& from);
  void MergeFrom(const Lacp_Interfaces& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Lacp_Interfaces* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Lacp_Interfaces_Interface Interface;
  typedef Lacp_Interfaces_InterfaceKey InterfaceKey;

  // accessors -------------------------------------------------------

  // repeated .openconfig.openconfig_lacp.Lacp.Interfaces.InterfaceKey interface = 212110241 [(.yext.schemapath) = "/lacp/interfaces/interface"];
  int interface_size() const;
  void clear_interface();
  static const int kInterfaceFieldNumber = 212110241;
  const ::openconfig::openconfig_lacp::Lacp_Interfaces_InterfaceKey& interface(int index) const;
  ::openconfig::openconfig_lacp::Lacp_Interfaces_InterfaceKey* mutable_interface(int index);
  ::openconfig::openconfig_lacp::Lacp_Interfaces_InterfaceKey* add_interface();
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_lacp::Lacp_Interfaces_InterfaceKey >*
      mutable_interface();
  const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_lacp::Lacp_Interfaces_InterfaceKey >&
      interface() const;

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_lacp.Lacp.Interfaces)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_lacp::Lacp_Interfaces_InterfaceKey > interface_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5flacp_2fopenconfig_5flacp_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5flacp_2fopenconfig_5flacp_2eproto::InitDefaultsLacp_InterfacesImpl();
};
// -------------------------------------------------------------------

class Lacp_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_lacp.Lacp.State) */ {
 public:
  Lacp_State();
  virtual ~Lacp_State();

  Lacp_State(const Lacp_State& from);

  inline Lacp_State& operator=(const Lacp_State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Lacp_State(Lacp_State&& from) noexcept
    : Lacp_State() {
    *this = ::std::move(from);
  }

  inline Lacp_State& operator=(Lacp_State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Lacp_State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lacp_State* internal_default_instance() {
    return reinterpret_cast<const Lacp_State*>(
               &_Lacp_State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(Lacp_State* other);
  friend void swap(Lacp_State& a, Lacp_State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Lacp_State* New() const PROTOBUF_FINAL { return New(NULL); }

  Lacp_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Lacp_State& from);
  void MergeFrom(const Lacp_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Lacp_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ywrapper.UintValue system_priority = 509622121 [(.yext.schemapath) = "/lacp/state/system-priority"];
  bool has_system_priority() const;
  void clear_system_priority();
  static const int kSystemPriorityFieldNumber = 509622121;
  const ::ywrapper::UintValue& system_priority() const;
  ::ywrapper::UintValue* release_system_priority();
  ::ywrapper::UintValue* mutable_system_priority();
  void set_allocated_system_priority(::ywrapper::UintValue* system_priority);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_lacp.Lacp.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ywrapper::UintValue* system_priority_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5flacp_2fopenconfig_5flacp_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5flacp_2fopenconfig_5flacp_2eproto::InitDefaultsLacp_StateImpl();
};
// -------------------------------------------------------------------

class Lacp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openconfig.openconfig_lacp.Lacp) */ {
 public:
  Lacp();
  virtual ~Lacp();

  Lacp(const Lacp& from);

  inline Lacp& operator=(const Lacp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Lacp(Lacp&& from) noexcept
    : Lacp() {
    *this = ::std::move(from);
  }

  inline Lacp& operator=(Lacp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Lacp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lacp* internal_default_instance() {
    return reinterpret_cast<const Lacp*>(
               &_Lacp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(Lacp* other);
  friend void swap(Lacp& a, Lacp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Lacp* New() const PROTOBUF_FINAL { return New(NULL); }

  Lacp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Lacp& from);
  void MergeFrom(const Lacp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Lacp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Lacp_Config Config;
  typedef Lacp_Interfaces Interfaces;
  typedef Lacp_State State;

  // accessors -------------------------------------------------------

  // .openconfig.openconfig_lacp.Lacp.Interfaces interfaces = 278182533 [(.yext.schemapath) = "/lacp/interfaces"];
  bool has_interfaces() const;
  void clear_interfaces();
  static const int kInterfacesFieldNumber = 278182533;
  const ::openconfig::openconfig_lacp::Lacp_Interfaces& interfaces() const;
  ::openconfig::openconfig_lacp::Lacp_Interfaces* release_interfaces();
  ::openconfig::openconfig_lacp::Lacp_Interfaces* mutable_interfaces();
  void set_allocated_interfaces(::openconfig::openconfig_lacp::Lacp_Interfaces* interfaces);

  // .openconfig.openconfig_lacp.Lacp.State state = 340469368 [(.yext.schemapath) = "/lacp/state"];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 340469368;
  const ::openconfig::openconfig_lacp::Lacp_State& state() const;
  ::openconfig::openconfig_lacp::Lacp_State* release_state();
  ::openconfig::openconfig_lacp::Lacp_State* mutable_state();
  void set_allocated_state(::openconfig::openconfig_lacp::Lacp_State* state);

  // .openconfig.openconfig_lacp.Lacp.Config config = 416417031 [(.yext.schemapath) = "/lacp/config"];
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 416417031;
  const ::openconfig::openconfig_lacp::Lacp_Config& config() const;
  ::openconfig::openconfig_lacp::Lacp_Config* release_config();
  ::openconfig::openconfig_lacp::Lacp_Config* mutable_config();
  void set_allocated_config(::openconfig::openconfig_lacp::Lacp_Config* config);

  // @@protoc_insertion_point(class_scope:openconfig.openconfig_lacp.Lacp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::openconfig::openconfig_lacp::Lacp_Interfaces* interfaces_;
  ::openconfig::openconfig_lacp::Lacp_State* state_;
  ::openconfig::openconfig_lacp::Lacp_Config* config_;
  mutable int _cached_size_;
  friend struct ::protobuf_openconfig_2fopenconfig_5flacp_2fopenconfig_5flacp_2eproto::TableStruct;
  friend void ::protobuf_openconfig_2fopenconfig_5flacp_2fopenconfig_5flacp_2eproto::InitDefaultsLacpImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Lacp_Config

// .ywrapper.UintValue system_priority = 71542334 [(.yext.schemapath) = "/lacp/config/system-priority"];
inline bool Lacp_Config::has_system_priority() const {
  return this != internal_default_instance() && system_priority_ != NULL;
}
inline const ::ywrapper::UintValue& Lacp_Config::system_priority() const {
  const ::ywrapper::UintValue* p = system_priority_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Config.system_priority)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Lacp_Config::release_system_priority() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_lacp.Lacp.Config.system_priority)
  
  ::ywrapper::UintValue* temp = system_priority_;
  system_priority_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Lacp_Config::mutable_system_priority() {
  
  if (system_priority_ == NULL) {
    system_priority_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_lacp.Lacp.Config.system_priority)
  return system_priority_;
}
inline void Lacp_Config::set_allocated_system_priority(::ywrapper::UintValue* system_priority) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(system_priority_);
  }
  if (system_priority) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      system_priority = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, system_priority, submessage_arena);
    }
    
  } else {
    
  }
  system_priority_ = system_priority;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_lacp.Lacp.Config.system_priority)
}

// -------------------------------------------------------------------

// Lacp_Interfaces_Interface_Config

// .openconfig.enums.OpenconfigLacpLacpPeriodType interval = 463085042 [(.yext.schemapath) = "/lacp/interfaces/interface/config/interval"];
inline void Lacp_Interfaces_Interface_Config::clear_interval() {
  interval_ = 0;
}
inline ::openconfig::enums::OpenconfigLacpLacpPeriodType Lacp_Interfaces_Interface_Config::interval() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Config.interval)
  return static_cast< ::openconfig::enums::OpenconfigLacpLacpPeriodType >(interval_);
}
inline void Lacp_Interfaces_Interface_Config::set_interval(::openconfig::enums::OpenconfigLacpLacpPeriodType value) {
  
  interval_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Config.interval)
}

// .openconfig.enums.OpenconfigLacpLacpActivityType lacp_mode = 43173203 [(.yext.schemapath) = "/lacp/interfaces/interface/config/lacp-mode"];
inline void Lacp_Interfaces_Interface_Config::clear_lacp_mode() {
  lacp_mode_ = 0;
}
inline ::openconfig::enums::OpenconfigLacpLacpActivityType Lacp_Interfaces_Interface_Config::lacp_mode() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Config.lacp_mode)
  return static_cast< ::openconfig::enums::OpenconfigLacpLacpActivityType >(lacp_mode_);
}
inline void Lacp_Interfaces_Interface_Config::set_lacp_mode(::openconfig::enums::OpenconfigLacpLacpActivityType value) {
  
  lacp_mode_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Config.lacp_mode)
}

// .ywrapper.StringValue name = 73148204 [(.yext.schemapath) = "/lacp/interfaces/interface/config/name"];
inline bool Lacp_Interfaces_Interface_Config::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::ywrapper::StringValue& Lacp_Interfaces_Interface_Config::name() const {
  const ::ywrapper::StringValue* p = name_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Config.name)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Lacp_Interfaces_Interface_Config::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Config.name)
  
  ::ywrapper::StringValue* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Lacp_Interfaces_Interface_Config::mutable_name() {
  
  if (name_ == NULL) {
    name_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Config.name)
  return name_;
}
inline void Lacp_Interfaces_Interface_Config::set_allocated_name(::ywrapper::StringValue* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Config.name)
}

// .ywrapper.StringValue system_id_mac = 461403306 [(.yext.schemapath) = "/lacp/interfaces/interface/config/system-id-mac"];
inline bool Lacp_Interfaces_Interface_Config::has_system_id_mac() const {
  return this != internal_default_instance() && system_id_mac_ != NULL;
}
inline const ::ywrapper::StringValue& Lacp_Interfaces_Interface_Config::system_id_mac() const {
  const ::ywrapper::StringValue* p = system_id_mac_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Config.system_id_mac)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Lacp_Interfaces_Interface_Config::release_system_id_mac() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Config.system_id_mac)
  
  ::ywrapper::StringValue* temp = system_id_mac_;
  system_id_mac_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Lacp_Interfaces_Interface_Config::mutable_system_id_mac() {
  
  if (system_id_mac_ == NULL) {
    system_id_mac_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Config.system_id_mac)
  return system_id_mac_;
}
inline void Lacp_Interfaces_Interface_Config::set_allocated_system_id_mac(::ywrapper::StringValue* system_id_mac) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(system_id_mac_);
  }
  if (system_id_mac) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      system_id_mac = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, system_id_mac, submessage_arena);
    }
    
  } else {
    
  }
  system_id_mac_ = system_id_mac;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Config.system_id_mac)
}

// .ywrapper.UintValue system_priority = 131529879 [(.yext.schemapath) = "/lacp/interfaces/interface/config/system-priority"];
inline bool Lacp_Interfaces_Interface_Config::has_system_priority() const {
  return this != internal_default_instance() && system_priority_ != NULL;
}
inline const ::ywrapper::UintValue& Lacp_Interfaces_Interface_Config::system_priority() const {
  const ::ywrapper::UintValue* p = system_priority_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Config.system_priority)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Lacp_Interfaces_Interface_Config::release_system_priority() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Config.system_priority)
  
  ::ywrapper::UintValue* temp = system_priority_;
  system_priority_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Lacp_Interfaces_Interface_Config::mutable_system_priority() {
  
  if (system_priority_ == NULL) {
    system_priority_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Config.system_priority)
  return system_priority_;
}
inline void Lacp_Interfaces_Interface_Config::set_allocated_system_priority(::ywrapper::UintValue* system_priority) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(system_priority_);
  }
  if (system_priority) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      system_priority = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, system_priority, submessage_arena);
    }
    
  } else {
    
  }
  system_priority_ = system_priority;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Config.system_priority)
}

// -------------------------------------------------------------------

// Lacp_Interfaces_Interface_Members_Member_State_Counters

// .ywrapper.UintValue lacp_errors = 432819317 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state/counters/lacp-errors"];
inline bool Lacp_Interfaces_Interface_Members_Member_State_Counters::has_lacp_errors() const {
  return this != internal_default_instance() && lacp_errors_ != NULL;
}
inline const ::ywrapper::UintValue& Lacp_Interfaces_Interface_Members_Member_State_Counters::lacp_errors() const {
  const ::ywrapper::UintValue* p = lacp_errors_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.Counters.lacp_errors)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Lacp_Interfaces_Interface_Members_Member_State_Counters::release_lacp_errors() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.Counters.lacp_errors)
  
  ::ywrapper::UintValue* temp = lacp_errors_;
  lacp_errors_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Lacp_Interfaces_Interface_Members_Member_State_Counters::mutable_lacp_errors() {
  
  if (lacp_errors_ == NULL) {
    lacp_errors_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.Counters.lacp_errors)
  return lacp_errors_;
}
inline void Lacp_Interfaces_Interface_Members_Member_State_Counters::set_allocated_lacp_errors(::ywrapper::UintValue* lacp_errors) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lacp_errors_);
  }
  if (lacp_errors) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lacp_errors = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lacp_errors, submessage_arena);
    }
    
  } else {
    
  }
  lacp_errors_ = lacp_errors;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.Counters.lacp_errors)
}

// .ywrapper.UintValue lacp_in_pkts = 133444718 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state/counters/lacp-in-pkts"];
inline bool Lacp_Interfaces_Interface_Members_Member_State_Counters::has_lacp_in_pkts() const {
  return this != internal_default_instance() && lacp_in_pkts_ != NULL;
}
inline const ::ywrapper::UintValue& Lacp_Interfaces_Interface_Members_Member_State_Counters::lacp_in_pkts() const {
  const ::ywrapper::UintValue* p = lacp_in_pkts_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.Counters.lacp_in_pkts)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Lacp_Interfaces_Interface_Members_Member_State_Counters::release_lacp_in_pkts() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.Counters.lacp_in_pkts)
  
  ::ywrapper::UintValue* temp = lacp_in_pkts_;
  lacp_in_pkts_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Lacp_Interfaces_Interface_Members_Member_State_Counters::mutable_lacp_in_pkts() {
  
  if (lacp_in_pkts_ == NULL) {
    lacp_in_pkts_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.Counters.lacp_in_pkts)
  return lacp_in_pkts_;
}
inline void Lacp_Interfaces_Interface_Members_Member_State_Counters::set_allocated_lacp_in_pkts(::ywrapper::UintValue* lacp_in_pkts) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lacp_in_pkts_);
  }
  if (lacp_in_pkts) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lacp_in_pkts = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lacp_in_pkts, submessage_arena);
    }
    
  } else {
    
  }
  lacp_in_pkts_ = lacp_in_pkts;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.Counters.lacp_in_pkts)
}

// .ywrapper.UintValue lacp_out_pkts = 391388365 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state/counters/lacp-out-pkts"];
inline bool Lacp_Interfaces_Interface_Members_Member_State_Counters::has_lacp_out_pkts() const {
  return this != internal_default_instance() && lacp_out_pkts_ != NULL;
}
inline const ::ywrapper::UintValue& Lacp_Interfaces_Interface_Members_Member_State_Counters::lacp_out_pkts() const {
  const ::ywrapper::UintValue* p = lacp_out_pkts_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.Counters.lacp_out_pkts)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Lacp_Interfaces_Interface_Members_Member_State_Counters::release_lacp_out_pkts() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.Counters.lacp_out_pkts)
  
  ::ywrapper::UintValue* temp = lacp_out_pkts_;
  lacp_out_pkts_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Lacp_Interfaces_Interface_Members_Member_State_Counters::mutable_lacp_out_pkts() {
  
  if (lacp_out_pkts_ == NULL) {
    lacp_out_pkts_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.Counters.lacp_out_pkts)
  return lacp_out_pkts_;
}
inline void Lacp_Interfaces_Interface_Members_Member_State_Counters::set_allocated_lacp_out_pkts(::ywrapper::UintValue* lacp_out_pkts) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lacp_out_pkts_);
  }
  if (lacp_out_pkts) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lacp_out_pkts = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lacp_out_pkts, submessage_arena);
    }
    
  } else {
    
  }
  lacp_out_pkts_ = lacp_out_pkts;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.Counters.lacp_out_pkts)
}

// .ywrapper.UintValue lacp_rx_errors = 124474434 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state/counters/lacp-rx-errors"];
inline bool Lacp_Interfaces_Interface_Members_Member_State_Counters::has_lacp_rx_errors() const {
  return this != internal_default_instance() && lacp_rx_errors_ != NULL;
}
inline const ::ywrapper::UintValue& Lacp_Interfaces_Interface_Members_Member_State_Counters::lacp_rx_errors() const {
  const ::ywrapper::UintValue* p = lacp_rx_errors_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.Counters.lacp_rx_errors)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Lacp_Interfaces_Interface_Members_Member_State_Counters::release_lacp_rx_errors() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.Counters.lacp_rx_errors)
  
  ::ywrapper::UintValue* temp = lacp_rx_errors_;
  lacp_rx_errors_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Lacp_Interfaces_Interface_Members_Member_State_Counters::mutable_lacp_rx_errors() {
  
  if (lacp_rx_errors_ == NULL) {
    lacp_rx_errors_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.Counters.lacp_rx_errors)
  return lacp_rx_errors_;
}
inline void Lacp_Interfaces_Interface_Members_Member_State_Counters::set_allocated_lacp_rx_errors(::ywrapper::UintValue* lacp_rx_errors) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lacp_rx_errors_);
  }
  if (lacp_rx_errors) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lacp_rx_errors = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lacp_rx_errors, submessage_arena);
    }
    
  } else {
    
  }
  lacp_rx_errors_ = lacp_rx_errors;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.Counters.lacp_rx_errors)
}

// .ywrapper.UintValue lacp_tx_errors = 98014728 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state/counters/lacp-tx-errors"];
inline bool Lacp_Interfaces_Interface_Members_Member_State_Counters::has_lacp_tx_errors() const {
  return this != internal_default_instance() && lacp_tx_errors_ != NULL;
}
inline const ::ywrapper::UintValue& Lacp_Interfaces_Interface_Members_Member_State_Counters::lacp_tx_errors() const {
  const ::ywrapper::UintValue* p = lacp_tx_errors_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.Counters.lacp_tx_errors)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Lacp_Interfaces_Interface_Members_Member_State_Counters::release_lacp_tx_errors() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.Counters.lacp_tx_errors)
  
  ::ywrapper::UintValue* temp = lacp_tx_errors_;
  lacp_tx_errors_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Lacp_Interfaces_Interface_Members_Member_State_Counters::mutable_lacp_tx_errors() {
  
  if (lacp_tx_errors_ == NULL) {
    lacp_tx_errors_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.Counters.lacp_tx_errors)
  return lacp_tx_errors_;
}
inline void Lacp_Interfaces_Interface_Members_Member_State_Counters::set_allocated_lacp_tx_errors(::ywrapper::UintValue* lacp_tx_errors) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lacp_tx_errors_);
  }
  if (lacp_tx_errors) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lacp_tx_errors = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lacp_tx_errors, submessage_arena);
    }
    
  } else {
    
  }
  lacp_tx_errors_ = lacp_tx_errors;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.Counters.lacp_tx_errors)
}

// .ywrapper.UintValue lacp_unknown_errors = 33984050 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state/counters/lacp-unknown-errors"];
inline bool Lacp_Interfaces_Interface_Members_Member_State_Counters::has_lacp_unknown_errors() const {
  return this != internal_default_instance() && lacp_unknown_errors_ != NULL;
}
inline const ::ywrapper::UintValue& Lacp_Interfaces_Interface_Members_Member_State_Counters::lacp_unknown_errors() const {
  const ::ywrapper::UintValue* p = lacp_unknown_errors_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.Counters.lacp_unknown_errors)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Lacp_Interfaces_Interface_Members_Member_State_Counters::release_lacp_unknown_errors() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.Counters.lacp_unknown_errors)
  
  ::ywrapper::UintValue* temp = lacp_unknown_errors_;
  lacp_unknown_errors_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Lacp_Interfaces_Interface_Members_Member_State_Counters::mutable_lacp_unknown_errors() {
  
  if (lacp_unknown_errors_ == NULL) {
    lacp_unknown_errors_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.Counters.lacp_unknown_errors)
  return lacp_unknown_errors_;
}
inline void Lacp_Interfaces_Interface_Members_Member_State_Counters::set_allocated_lacp_unknown_errors(::ywrapper::UintValue* lacp_unknown_errors) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lacp_unknown_errors_);
  }
  if (lacp_unknown_errors) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lacp_unknown_errors = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lacp_unknown_errors, submessage_arena);
    }
    
  } else {
    
  }
  lacp_unknown_errors_ = lacp_unknown_errors;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.Counters.lacp_unknown_errors)
}

// -------------------------------------------------------------------

// Lacp_Interfaces_Interface_Members_Member_State

// .openconfig.enums.OpenconfigLacpLacpActivityType activity = 344383748 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state/activity"];
inline void Lacp_Interfaces_Interface_Members_Member_State::clear_activity() {
  activity_ = 0;
}
inline ::openconfig::enums::OpenconfigLacpLacpActivityType Lacp_Interfaces_Interface_Members_Member_State::activity() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.activity)
  return static_cast< ::openconfig::enums::OpenconfigLacpLacpActivityType >(activity_);
}
inline void Lacp_Interfaces_Interface_Members_Member_State::set_activity(::openconfig::enums::OpenconfigLacpLacpActivityType value) {
  
  activity_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.activity)
}

// .ywrapper.BoolValue aggregatable = 490059983 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state/aggregatable"];
inline bool Lacp_Interfaces_Interface_Members_Member_State::has_aggregatable() const {
  return this != internal_default_instance() && aggregatable_ != NULL;
}
inline const ::ywrapper::BoolValue& Lacp_Interfaces_Interface_Members_Member_State::aggregatable() const {
  const ::ywrapper::BoolValue* p = aggregatable_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.aggregatable)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Lacp_Interfaces_Interface_Members_Member_State::release_aggregatable() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.aggregatable)
  
  ::ywrapper::BoolValue* temp = aggregatable_;
  aggregatable_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Lacp_Interfaces_Interface_Members_Member_State::mutable_aggregatable() {
  
  if (aggregatable_ == NULL) {
    aggregatable_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.aggregatable)
  return aggregatable_;
}
inline void Lacp_Interfaces_Interface_Members_Member_State::set_allocated_aggregatable(::ywrapper::BoolValue* aggregatable) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(aggregatable_);
  }
  if (aggregatable) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      aggregatable = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, aggregatable, submessage_arena);
    }
    
  } else {
    
  }
  aggregatable_ = aggregatable;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.aggregatable)
}

// .ywrapper.BoolValue collecting = 431241365 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state/collecting"];
inline bool Lacp_Interfaces_Interface_Members_Member_State::has_collecting() const {
  return this != internal_default_instance() && collecting_ != NULL;
}
inline const ::ywrapper::BoolValue& Lacp_Interfaces_Interface_Members_Member_State::collecting() const {
  const ::ywrapper::BoolValue* p = collecting_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.collecting)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Lacp_Interfaces_Interface_Members_Member_State::release_collecting() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.collecting)
  
  ::ywrapper::BoolValue* temp = collecting_;
  collecting_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Lacp_Interfaces_Interface_Members_Member_State::mutable_collecting() {
  
  if (collecting_ == NULL) {
    collecting_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.collecting)
  return collecting_;
}
inline void Lacp_Interfaces_Interface_Members_Member_State::set_allocated_collecting(::ywrapper::BoolValue* collecting) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(collecting_);
  }
  if (collecting) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      collecting = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, collecting, submessage_arena);
    }
    
  } else {
    
  }
  collecting_ = collecting;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.collecting)
}

// .openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.Counters counters = 159126128 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state/counters"];
inline bool Lacp_Interfaces_Interface_Members_Member_State::has_counters() const {
  return this != internal_default_instance() && counters_ != NULL;
}
inline void Lacp_Interfaces_Interface_Members_Member_State::clear_counters() {
  if (GetArenaNoVirtual() == NULL && counters_ != NULL) {
    delete counters_;
  }
  counters_ = NULL;
}
inline const ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_Member_State_Counters& Lacp_Interfaces_Interface_Members_Member_State::counters() const {
  const ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_Member_State_Counters* p = counters_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.counters)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_Member_State_Counters*>(
      &::openconfig::openconfig_lacp::_Lacp_Interfaces_Interface_Members_Member_State_Counters_default_instance_);
}
inline ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_Member_State_Counters* Lacp_Interfaces_Interface_Members_Member_State::release_counters() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.counters)
  
  ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_Member_State_Counters* temp = counters_;
  counters_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_Member_State_Counters* Lacp_Interfaces_Interface_Members_Member_State::mutable_counters() {
  
  if (counters_ == NULL) {
    counters_ = new ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_Member_State_Counters;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.counters)
  return counters_;
}
inline void Lacp_Interfaces_Interface_Members_Member_State::set_allocated_counters(::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_Member_State_Counters* counters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete counters_;
  }
  if (counters) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      counters = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, counters, submessage_arena);
    }
    
  } else {
    
  }
  counters_ = counters;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.counters)
}

// .ywrapper.BoolValue distributing = 325869523 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state/distributing"];
inline bool Lacp_Interfaces_Interface_Members_Member_State::has_distributing() const {
  return this != internal_default_instance() && distributing_ != NULL;
}
inline const ::ywrapper::BoolValue& Lacp_Interfaces_Interface_Members_Member_State::distributing() const {
  const ::ywrapper::BoolValue* p = distributing_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.distributing)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::BoolValue*>(
      &::ywrapper::_BoolValue_default_instance_);
}
inline ::ywrapper::BoolValue* Lacp_Interfaces_Interface_Members_Member_State::release_distributing() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.distributing)
  
  ::ywrapper::BoolValue* temp = distributing_;
  distributing_ = NULL;
  return temp;
}
inline ::ywrapper::BoolValue* Lacp_Interfaces_Interface_Members_Member_State::mutable_distributing() {
  
  if (distributing_ == NULL) {
    distributing_ = new ::ywrapper::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.distributing)
  return distributing_;
}
inline void Lacp_Interfaces_Interface_Members_Member_State::set_allocated_distributing(::ywrapper::BoolValue* distributing) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(distributing_);
  }
  if (distributing) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      distributing = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, distributing, submessage_arena);
    }
    
  } else {
    
  }
  distributing_ = distributing;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.distributing)
}

// .ywrapper.StringValue interface = 140807600 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state/interface"];
inline bool Lacp_Interfaces_Interface_Members_Member_State::has_interface() const {
  return this != internal_default_instance() && interface_ != NULL;
}
inline const ::ywrapper::StringValue& Lacp_Interfaces_Interface_Members_Member_State::interface() const {
  const ::ywrapper::StringValue* p = interface_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.interface)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Lacp_Interfaces_Interface_Members_Member_State::release_interface() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.interface)
  
  ::ywrapper::StringValue* temp = interface_;
  interface_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Lacp_Interfaces_Interface_Members_Member_State::mutable_interface() {
  
  if (interface_ == NULL) {
    interface_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.interface)
  return interface_;
}
inline void Lacp_Interfaces_Interface_Members_Member_State::set_allocated_interface(::ywrapper::StringValue* interface) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(interface_);
  }
  if (interface) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      interface = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, interface, submessage_arena);
    }
    
  } else {
    
  }
  interface_ = interface;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.interface)
}

// .ywrapper.UintValue oper_key = 503255861 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state/oper-key"];
inline bool Lacp_Interfaces_Interface_Members_Member_State::has_oper_key() const {
  return this != internal_default_instance() && oper_key_ != NULL;
}
inline const ::ywrapper::UintValue& Lacp_Interfaces_Interface_Members_Member_State::oper_key() const {
  const ::ywrapper::UintValue* p = oper_key_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.oper_key)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Lacp_Interfaces_Interface_Members_Member_State::release_oper_key() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.oper_key)
  
  ::ywrapper::UintValue* temp = oper_key_;
  oper_key_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Lacp_Interfaces_Interface_Members_Member_State::mutable_oper_key() {
  
  if (oper_key_ == NULL) {
    oper_key_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.oper_key)
  return oper_key_;
}
inline void Lacp_Interfaces_Interface_Members_Member_State::set_allocated_oper_key(::ywrapper::UintValue* oper_key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(oper_key_);
  }
  if (oper_key) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      oper_key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, oper_key, submessage_arena);
    }
    
  } else {
    
  }
  oper_key_ = oper_key;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.oper_key)
}

// .ywrapper.StringValue partner_id = 342233611 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state/partner-id"];
inline bool Lacp_Interfaces_Interface_Members_Member_State::has_partner_id() const {
  return this != internal_default_instance() && partner_id_ != NULL;
}
inline const ::ywrapper::StringValue& Lacp_Interfaces_Interface_Members_Member_State::partner_id() const {
  const ::ywrapper::StringValue* p = partner_id_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.partner_id)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Lacp_Interfaces_Interface_Members_Member_State::release_partner_id() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.partner_id)
  
  ::ywrapper::StringValue* temp = partner_id_;
  partner_id_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Lacp_Interfaces_Interface_Members_Member_State::mutable_partner_id() {
  
  if (partner_id_ == NULL) {
    partner_id_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.partner_id)
  return partner_id_;
}
inline void Lacp_Interfaces_Interface_Members_Member_State::set_allocated_partner_id(::ywrapper::StringValue* partner_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(partner_id_);
  }
  if (partner_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      partner_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, partner_id, submessage_arena);
    }
    
  } else {
    
  }
  partner_id_ = partner_id;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.partner_id)
}

// .ywrapper.UintValue partner_key = 313821353 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state/partner-key"];
inline bool Lacp_Interfaces_Interface_Members_Member_State::has_partner_key() const {
  return this != internal_default_instance() && partner_key_ != NULL;
}
inline const ::ywrapper::UintValue& Lacp_Interfaces_Interface_Members_Member_State::partner_key() const {
  const ::ywrapper::UintValue* p = partner_key_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.partner_key)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Lacp_Interfaces_Interface_Members_Member_State::release_partner_key() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.partner_key)
  
  ::ywrapper::UintValue* temp = partner_key_;
  partner_key_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Lacp_Interfaces_Interface_Members_Member_State::mutable_partner_key() {
  
  if (partner_key_ == NULL) {
    partner_key_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.partner_key)
  return partner_key_;
}
inline void Lacp_Interfaces_Interface_Members_Member_State::set_allocated_partner_key(::ywrapper::UintValue* partner_key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(partner_key_);
  }
  if (partner_key) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      partner_key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, partner_key, submessage_arena);
    }
    
  } else {
    
  }
  partner_key_ = partner_key;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.partner_key)
}

// .ywrapper.UintValue partner_port_num = 11089282 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state/partner-port-num"];
inline bool Lacp_Interfaces_Interface_Members_Member_State::has_partner_port_num() const {
  return this != internal_default_instance() && partner_port_num_ != NULL;
}
inline const ::ywrapper::UintValue& Lacp_Interfaces_Interface_Members_Member_State::partner_port_num() const {
  const ::ywrapper::UintValue* p = partner_port_num_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.partner_port_num)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Lacp_Interfaces_Interface_Members_Member_State::release_partner_port_num() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.partner_port_num)
  
  ::ywrapper::UintValue* temp = partner_port_num_;
  partner_port_num_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Lacp_Interfaces_Interface_Members_Member_State::mutable_partner_port_num() {
  
  if (partner_port_num_ == NULL) {
    partner_port_num_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.partner_port_num)
  return partner_port_num_;
}
inline void Lacp_Interfaces_Interface_Members_Member_State::set_allocated_partner_port_num(::ywrapper::UintValue* partner_port_num) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(partner_port_num_);
  }
  if (partner_port_num) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      partner_port_num = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, partner_port_num, submessage_arena);
    }
    
  } else {
    
  }
  partner_port_num_ = partner_port_num;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.partner_port_num)
}

// .ywrapper.UintValue port_num = 55409541 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state/port-num"];
inline bool Lacp_Interfaces_Interface_Members_Member_State::has_port_num() const {
  return this != internal_default_instance() && port_num_ != NULL;
}
inline const ::ywrapper::UintValue& Lacp_Interfaces_Interface_Members_Member_State::port_num() const {
  const ::ywrapper::UintValue* p = port_num_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.port_num)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Lacp_Interfaces_Interface_Members_Member_State::release_port_num() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.port_num)
  
  ::ywrapper::UintValue* temp = port_num_;
  port_num_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Lacp_Interfaces_Interface_Members_Member_State::mutable_port_num() {
  
  if (port_num_ == NULL) {
    port_num_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.port_num)
  return port_num_;
}
inline void Lacp_Interfaces_Interface_Members_Member_State::set_allocated_port_num(::ywrapper::UintValue* port_num) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(port_num_);
  }
  if (port_num) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      port_num = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, port_num, submessage_arena);
    }
    
  } else {
    
  }
  port_num_ = port_num;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.port_num)
}

// .openconfig.enums.OpenconfigLacpLacpSynchronizationType synchronization = 179070617 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state/synchronization"];
inline void Lacp_Interfaces_Interface_Members_Member_State::clear_synchronization() {
  synchronization_ = 0;
}
inline ::openconfig::enums::OpenconfigLacpLacpSynchronizationType Lacp_Interfaces_Interface_Members_Member_State::synchronization() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.synchronization)
  return static_cast< ::openconfig::enums::OpenconfigLacpLacpSynchronizationType >(synchronization_);
}
inline void Lacp_Interfaces_Interface_Members_Member_State::set_synchronization(::openconfig::enums::OpenconfigLacpLacpSynchronizationType value) {
  
  synchronization_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.synchronization)
}

// .ywrapper.StringValue system_id = 207537082 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state/system-id"];
inline bool Lacp_Interfaces_Interface_Members_Member_State::has_system_id() const {
  return this != internal_default_instance() && system_id_ != NULL;
}
inline const ::ywrapper::StringValue& Lacp_Interfaces_Interface_Members_Member_State::system_id() const {
  const ::ywrapper::StringValue* p = system_id_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.system_id)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Lacp_Interfaces_Interface_Members_Member_State::release_system_id() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.system_id)
  
  ::ywrapper::StringValue* temp = system_id_;
  system_id_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Lacp_Interfaces_Interface_Members_Member_State::mutable_system_id() {
  
  if (system_id_ == NULL) {
    system_id_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.system_id)
  return system_id_;
}
inline void Lacp_Interfaces_Interface_Members_Member_State::set_allocated_system_id(::ywrapper::StringValue* system_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(system_id_);
  }
  if (system_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      system_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, system_id, submessage_arena);
    }
    
  } else {
    
  }
  system_id_ = system_id;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.system_id)
}

// .openconfig.enums.OpenconfigLacpLacpTimeoutType timeout = 834808 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state/timeout"];
inline void Lacp_Interfaces_Interface_Members_Member_State::clear_timeout() {
  timeout_ = 0;
}
inline ::openconfig::enums::OpenconfigLacpLacpTimeoutType Lacp_Interfaces_Interface_Members_Member_State::timeout() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.timeout)
  return static_cast< ::openconfig::enums::OpenconfigLacpLacpTimeoutType >(timeout_);
}
inline void Lacp_Interfaces_Interface_Members_Member_State::set_timeout(::openconfig::enums::OpenconfigLacpLacpTimeoutType value) {
  
  timeout_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State.timeout)
}

// -------------------------------------------------------------------

// Lacp_Interfaces_Interface_Members_Member

// .openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.State state = 101613208 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/state"];
inline bool Lacp_Interfaces_Interface_Members_Member::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Lacp_Interfaces_Interface_Members_Member::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_Member_State& Lacp_Interfaces_Interface_Members_Member::state() const {
  const ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_Member_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_Member_State*>(
      &::openconfig::openconfig_lacp::_Lacp_Interfaces_Interface_Members_Member_State_default_instance_);
}
inline ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_Member_State* Lacp_Interfaces_Interface_Members_Member::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.state)
  
  ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_Member_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_Member_State* Lacp_Interfaces_Interface_Members_Member::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_Member_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.state)
  return state_;
}
inline void Lacp_Interfaces_Interface_Members_Member::set_allocated_state(::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_Member_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member.state)
}

// -------------------------------------------------------------------

// Lacp_Interfaces_Interface_Members_MemberKey

// string interface = 1 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member/interface"];
inline void Lacp_Interfaces_Interface_Members_MemberKey::clear_interface() {
  interface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Lacp_Interfaces_Interface_Members_MemberKey::interface() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.MemberKey.interface)
  return interface_.GetNoArena();
}
inline void Lacp_Interfaces_Interface_Members_MemberKey::set_interface(const ::std::string& value) {
  
  interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.MemberKey.interface)
}
#if LANG_CXX11
inline void Lacp_Interfaces_Interface_Members_MemberKey::set_interface(::std::string&& value) {
  
  interface_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.MemberKey.interface)
}
#endif
inline void Lacp_Interfaces_Interface_Members_MemberKey::set_interface(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.MemberKey.interface)
}
inline void Lacp_Interfaces_Interface_Members_MemberKey::set_interface(const char* value, size_t size) {
  
  interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.MemberKey.interface)
}
inline ::std::string* Lacp_Interfaces_Interface_Members_MemberKey::mutable_interface() {
  
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.MemberKey.interface)
  return interface_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Lacp_Interfaces_Interface_Members_MemberKey::release_interface() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.MemberKey.interface)
  
  return interface_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Lacp_Interfaces_Interface_Members_MemberKey::set_allocated_interface(::std::string* interface) {
  if (interface != NULL) {
    
  } else {
    
  }
  interface_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interface);
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.MemberKey.interface)
}

// .openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.Member member = 2;
inline bool Lacp_Interfaces_Interface_Members_MemberKey::has_member() const {
  return this != internal_default_instance() && member_ != NULL;
}
inline void Lacp_Interfaces_Interface_Members_MemberKey::clear_member() {
  if (GetArenaNoVirtual() == NULL && member_ != NULL) {
    delete member_;
  }
  member_ = NULL;
}
inline const ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_Member& Lacp_Interfaces_Interface_Members_MemberKey::member() const {
  const ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_Member* p = member_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.MemberKey.member)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_Member*>(
      &::openconfig::openconfig_lacp::_Lacp_Interfaces_Interface_Members_Member_default_instance_);
}
inline ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_Member* Lacp_Interfaces_Interface_Members_MemberKey::release_member() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.MemberKey.member)
  
  ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_Member* temp = member_;
  member_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_Member* Lacp_Interfaces_Interface_Members_MemberKey::mutable_member() {
  
  if (member_ == NULL) {
    member_ = new ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_Member;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.MemberKey.member)
  return member_;
}
inline void Lacp_Interfaces_Interface_Members_MemberKey::set_allocated_member(::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_Member* member) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete member_;
  }
  if (member) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      member = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, member, submessage_arena);
    }
    
  } else {
    
  }
  member_ = member;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.MemberKey.member)
}

// -------------------------------------------------------------------

// Lacp_Interfaces_Interface_Members

// repeated .openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.MemberKey member = 107372070 [(.yext.schemapath) = "/lacp/interfaces/interface/members/member"];
inline int Lacp_Interfaces_Interface_Members::member_size() const {
  return member_.size();
}
inline void Lacp_Interfaces_Interface_Members::clear_member() {
  member_.Clear();
}
inline const ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_MemberKey& Lacp_Interfaces_Interface_Members::member(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.member)
  return member_.Get(index);
}
inline ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_MemberKey* Lacp_Interfaces_Interface_Members::mutable_member(int index) {
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.member)
  return member_.Mutable(index);
}
inline ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_MemberKey* Lacp_Interfaces_Interface_Members::add_member() {
  // @@protoc_insertion_point(field_add:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.member)
  return member_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_MemberKey >*
Lacp_Interfaces_Interface_Members::mutable_member() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.member)
  return &member_;
}
inline const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members_MemberKey >&
Lacp_Interfaces_Interface_Members::member() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members.member)
  return member_;
}

// -------------------------------------------------------------------

// Lacp_Interfaces_Interface_State

// .openconfig.enums.OpenconfigLacpLacpPeriodType interval = 156781677 [(.yext.schemapath) = "/lacp/interfaces/interface/state/interval"];
inline void Lacp_Interfaces_Interface_State::clear_interval() {
  interval_ = 0;
}
inline ::openconfig::enums::OpenconfigLacpLacpPeriodType Lacp_Interfaces_Interface_State::interval() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.State.interval)
  return static_cast< ::openconfig::enums::OpenconfigLacpLacpPeriodType >(interval_);
}
inline void Lacp_Interfaces_Interface_State::set_interval(::openconfig::enums::OpenconfigLacpLacpPeriodType value) {
  
  interval_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.State.interval)
}

// .openconfig.enums.OpenconfigLacpLacpActivityType lacp_mode = 285910318 [(.yext.schemapath) = "/lacp/interfaces/interface/state/lacp-mode"];
inline void Lacp_Interfaces_Interface_State::clear_lacp_mode() {
  lacp_mode_ = 0;
}
inline ::openconfig::enums::OpenconfigLacpLacpActivityType Lacp_Interfaces_Interface_State::lacp_mode() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.State.lacp_mode)
  return static_cast< ::openconfig::enums::OpenconfigLacpLacpActivityType >(lacp_mode_);
}
inline void Lacp_Interfaces_Interface_State::set_lacp_mode(::openconfig::enums::OpenconfigLacpLacpActivityType value) {
  
  lacp_mode_ = value;
  // @@protoc_insertion_point(field_set:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.State.lacp_mode)
}

// .ywrapper.StringValue name = 53396163 [(.yext.schemapath) = "/lacp/interfaces/interface/state/name"];
inline bool Lacp_Interfaces_Interface_State::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::ywrapper::StringValue& Lacp_Interfaces_Interface_State::name() const {
  const ::ywrapper::StringValue* p = name_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.State.name)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Lacp_Interfaces_Interface_State::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.State.name)
  
  ::ywrapper::StringValue* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Lacp_Interfaces_Interface_State::mutable_name() {
  
  if (name_ == NULL) {
    name_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.State.name)
  return name_;
}
inline void Lacp_Interfaces_Interface_State::set_allocated_name(::ywrapper::StringValue* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.State.name)
}

// .ywrapper.StringValue system_id_mac = 308184979 [(.yext.schemapath) = "/lacp/interfaces/interface/state/system-id-mac"];
inline bool Lacp_Interfaces_Interface_State::has_system_id_mac() const {
  return this != internal_default_instance() && system_id_mac_ != NULL;
}
inline const ::ywrapper::StringValue& Lacp_Interfaces_Interface_State::system_id_mac() const {
  const ::ywrapper::StringValue* p = system_id_mac_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.State.system_id_mac)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::StringValue*>(
      &::ywrapper::_StringValue_default_instance_);
}
inline ::ywrapper::StringValue* Lacp_Interfaces_Interface_State::release_system_id_mac() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.State.system_id_mac)
  
  ::ywrapper::StringValue* temp = system_id_mac_;
  system_id_mac_ = NULL;
  return temp;
}
inline ::ywrapper::StringValue* Lacp_Interfaces_Interface_State::mutable_system_id_mac() {
  
  if (system_id_mac_ == NULL) {
    system_id_mac_ = new ::ywrapper::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.State.system_id_mac)
  return system_id_mac_;
}
inline void Lacp_Interfaces_Interface_State::set_allocated_system_id_mac(::ywrapper::StringValue* system_id_mac) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(system_id_mac_);
  }
  if (system_id_mac) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      system_id_mac = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, system_id_mac, submessage_arena);
    }
    
  } else {
    
  }
  system_id_mac_ = system_id_mac;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.State.system_id_mac)
}

// .ywrapper.UintValue system_priority = 386600370 [(.yext.schemapath) = "/lacp/interfaces/interface/state/system-priority"];
inline bool Lacp_Interfaces_Interface_State::has_system_priority() const {
  return this != internal_default_instance() && system_priority_ != NULL;
}
inline const ::ywrapper::UintValue& Lacp_Interfaces_Interface_State::system_priority() const {
  const ::ywrapper::UintValue* p = system_priority_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.State.system_priority)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Lacp_Interfaces_Interface_State::release_system_priority() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.State.system_priority)
  
  ::ywrapper::UintValue* temp = system_priority_;
  system_priority_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Lacp_Interfaces_Interface_State::mutable_system_priority() {
  
  if (system_priority_ == NULL) {
    system_priority_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.State.system_priority)
  return system_priority_;
}
inline void Lacp_Interfaces_Interface_State::set_allocated_system_priority(::ywrapper::UintValue* system_priority) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(system_priority_);
  }
  if (system_priority) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      system_priority = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, system_priority, submessage_arena);
    }
    
  } else {
    
  }
  system_priority_ = system_priority;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.State.system_priority)
}

// -------------------------------------------------------------------

// Lacp_Interfaces_Interface

// .openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Config config = 267814 [(.yext.schemapath) = "/lacp/interfaces/interface/config"];
inline bool Lacp_Interfaces_Interface::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Lacp_Interfaces_Interface::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Config& Lacp_Interfaces_Interface::config() const {
  const ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Config*>(
      &::openconfig::openconfig_lacp::_Lacp_Interfaces_Interface_Config_default_instance_);
}
inline ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Config* Lacp_Interfaces_Interface::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.config)
  
  ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Config* Lacp_Interfaces_Interface::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.config)
  return config_;
}
inline void Lacp_Interfaces_Interface::set_allocated_config(::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.config)
}

// .openconfig.openconfig_lacp.Lacp.Interfaces.Interface.Members members = 448219541 [(.yext.schemapath) = "/lacp/interfaces/interface/members"];
inline bool Lacp_Interfaces_Interface::has_members() const {
  return this != internal_default_instance() && members_ != NULL;
}
inline void Lacp_Interfaces_Interface::clear_members() {
  if (GetArenaNoVirtual() == NULL && members_ != NULL) {
    delete members_;
  }
  members_ = NULL;
}
inline const ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members& Lacp_Interfaces_Interface::members() const {
  const ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members* p = members_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.members)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members*>(
      &::openconfig::openconfig_lacp::_Lacp_Interfaces_Interface_Members_default_instance_);
}
inline ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members* Lacp_Interfaces_Interface::release_members() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.members)
  
  ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members* temp = members_;
  members_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members* Lacp_Interfaces_Interface::mutable_members() {
  
  if (members_ == NULL) {
    members_ = new ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.members)
  return members_;
}
inline void Lacp_Interfaces_Interface::set_allocated_members(::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_Members* members) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete members_;
  }
  if (members) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      members = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, members, submessage_arena);
    }
    
  } else {
    
  }
  members_ = members;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.members)
}

// .openconfig.openconfig_lacp.Lacp.Interfaces.Interface.State state = 409381779 [(.yext.schemapath) = "/lacp/interfaces/interface/state"];
inline bool Lacp_Interfaces_Interface::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Lacp_Interfaces_Interface::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_State& Lacp_Interfaces_Interface::state() const {
  const ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_State*>(
      &::openconfig::openconfig_lacp::_Lacp_Interfaces_Interface_State_default_instance_);
}
inline ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_State* Lacp_Interfaces_Interface::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.state)
  
  ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_State* Lacp_Interfaces_Interface::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.state)
  return state_;
}
inline void Lacp_Interfaces_Interface::set_allocated_state(::openconfig::openconfig_lacp::Lacp_Interfaces_Interface_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_lacp.Lacp.Interfaces.Interface.state)
}

// -------------------------------------------------------------------

// Lacp_Interfaces_InterfaceKey

// string name = 1 [(.yext.schemapath) = "/lacp/interfaces/interface/name"];
inline void Lacp_Interfaces_InterfaceKey::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Lacp_Interfaces_InterfaceKey::name() const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Interfaces.InterfaceKey.name)
  return name_.GetNoArena();
}
inline void Lacp_Interfaces_InterfaceKey::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openconfig.openconfig_lacp.Lacp.Interfaces.InterfaceKey.name)
}
#if LANG_CXX11
inline void Lacp_Interfaces_InterfaceKey::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openconfig.openconfig_lacp.Lacp.Interfaces.InterfaceKey.name)
}
#endif
inline void Lacp_Interfaces_InterfaceKey::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openconfig.openconfig_lacp.Lacp.Interfaces.InterfaceKey.name)
}
inline void Lacp_Interfaces_InterfaceKey::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openconfig.openconfig_lacp.Lacp.Interfaces.InterfaceKey.name)
}
inline ::std::string* Lacp_Interfaces_InterfaceKey::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_lacp.Lacp.Interfaces.InterfaceKey.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Lacp_Interfaces_InterfaceKey::release_name() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_lacp.Lacp.Interfaces.InterfaceKey.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Lacp_Interfaces_InterfaceKey::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_lacp.Lacp.Interfaces.InterfaceKey.name)
}

// .openconfig.openconfig_lacp.Lacp.Interfaces.Interface interface = 2;
inline bool Lacp_Interfaces_InterfaceKey::has_interface() const {
  return this != internal_default_instance() && interface_ != NULL;
}
inline void Lacp_Interfaces_InterfaceKey::clear_interface() {
  if (GetArenaNoVirtual() == NULL && interface_ != NULL) {
    delete interface_;
  }
  interface_ = NULL;
}
inline const ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface& Lacp_Interfaces_InterfaceKey::interface() const {
  const ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface* p = interface_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Interfaces.InterfaceKey.interface)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface*>(
      &::openconfig::openconfig_lacp::_Lacp_Interfaces_Interface_default_instance_);
}
inline ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface* Lacp_Interfaces_InterfaceKey::release_interface() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_lacp.Lacp.Interfaces.InterfaceKey.interface)
  
  ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface* temp = interface_;
  interface_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface* Lacp_Interfaces_InterfaceKey::mutable_interface() {
  
  if (interface_ == NULL) {
    interface_ = new ::openconfig::openconfig_lacp::Lacp_Interfaces_Interface;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_lacp.Lacp.Interfaces.InterfaceKey.interface)
  return interface_;
}
inline void Lacp_Interfaces_InterfaceKey::set_allocated_interface(::openconfig::openconfig_lacp::Lacp_Interfaces_Interface* interface) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete interface_;
  }
  if (interface) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      interface = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, interface, submessage_arena);
    }
    
  } else {
    
  }
  interface_ = interface;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_lacp.Lacp.Interfaces.InterfaceKey.interface)
}

// -------------------------------------------------------------------

// Lacp_Interfaces

// repeated .openconfig.openconfig_lacp.Lacp.Interfaces.InterfaceKey interface = 212110241 [(.yext.schemapath) = "/lacp/interfaces/interface"];
inline int Lacp_Interfaces::interface_size() const {
  return interface_.size();
}
inline void Lacp_Interfaces::clear_interface() {
  interface_.Clear();
}
inline const ::openconfig::openconfig_lacp::Lacp_Interfaces_InterfaceKey& Lacp_Interfaces::interface(int index) const {
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.Interfaces.interface)
  return interface_.Get(index);
}
inline ::openconfig::openconfig_lacp::Lacp_Interfaces_InterfaceKey* Lacp_Interfaces::mutable_interface(int index) {
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_lacp.Lacp.Interfaces.interface)
  return interface_.Mutable(index);
}
inline ::openconfig::openconfig_lacp::Lacp_Interfaces_InterfaceKey* Lacp_Interfaces::add_interface() {
  // @@protoc_insertion_point(field_add:openconfig.openconfig_lacp.Lacp.Interfaces.interface)
  return interface_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_lacp::Lacp_Interfaces_InterfaceKey >*
Lacp_Interfaces::mutable_interface() {
  // @@protoc_insertion_point(field_mutable_list:openconfig.openconfig_lacp.Lacp.Interfaces.interface)
  return &interface_;
}
inline const ::google::protobuf::RepeatedPtrField< ::openconfig::openconfig_lacp::Lacp_Interfaces_InterfaceKey >&
Lacp_Interfaces::interface() const {
  // @@protoc_insertion_point(field_list:openconfig.openconfig_lacp.Lacp.Interfaces.interface)
  return interface_;
}

// -------------------------------------------------------------------

// Lacp_State

// .ywrapper.UintValue system_priority = 509622121 [(.yext.schemapath) = "/lacp/state/system-priority"];
inline bool Lacp_State::has_system_priority() const {
  return this != internal_default_instance() && system_priority_ != NULL;
}
inline const ::ywrapper::UintValue& Lacp_State::system_priority() const {
  const ::ywrapper::UintValue* p = system_priority_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.State.system_priority)
  return p != NULL ? *p : *reinterpret_cast<const ::ywrapper::UintValue*>(
      &::ywrapper::_UintValue_default_instance_);
}
inline ::ywrapper::UintValue* Lacp_State::release_system_priority() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_lacp.Lacp.State.system_priority)
  
  ::ywrapper::UintValue* temp = system_priority_;
  system_priority_ = NULL;
  return temp;
}
inline ::ywrapper::UintValue* Lacp_State::mutable_system_priority() {
  
  if (system_priority_ == NULL) {
    system_priority_ = new ::ywrapper::UintValue;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_lacp.Lacp.State.system_priority)
  return system_priority_;
}
inline void Lacp_State::set_allocated_system_priority(::ywrapper::UintValue* system_priority) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(system_priority_);
  }
  if (system_priority) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      system_priority = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, system_priority, submessage_arena);
    }
    
  } else {
    
  }
  system_priority_ = system_priority;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_lacp.Lacp.State.system_priority)
}

// -------------------------------------------------------------------

// Lacp

// .openconfig.openconfig_lacp.Lacp.Config config = 416417031 [(.yext.schemapath) = "/lacp/config"];
inline bool Lacp::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Lacp::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::openconfig::openconfig_lacp::Lacp_Config& Lacp::config() const {
  const ::openconfig::openconfig_lacp::Lacp_Config* p = config_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.config)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_lacp::Lacp_Config*>(
      &::openconfig::openconfig_lacp::_Lacp_Config_default_instance_);
}
inline ::openconfig::openconfig_lacp::Lacp_Config* Lacp::release_config() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_lacp.Lacp.config)
  
  ::openconfig::openconfig_lacp::Lacp_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_lacp::Lacp_Config* Lacp::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::openconfig::openconfig_lacp::Lacp_Config;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_lacp.Lacp.config)
  return config_;
}
inline void Lacp::set_allocated_config(::openconfig::openconfig_lacp::Lacp_Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_lacp.Lacp.config)
}

// .openconfig.openconfig_lacp.Lacp.Interfaces interfaces = 278182533 [(.yext.schemapath) = "/lacp/interfaces"];
inline bool Lacp::has_interfaces() const {
  return this != internal_default_instance() && interfaces_ != NULL;
}
inline void Lacp::clear_interfaces() {
  if (GetArenaNoVirtual() == NULL && interfaces_ != NULL) {
    delete interfaces_;
  }
  interfaces_ = NULL;
}
inline const ::openconfig::openconfig_lacp::Lacp_Interfaces& Lacp::interfaces() const {
  const ::openconfig::openconfig_lacp::Lacp_Interfaces* p = interfaces_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.interfaces)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_lacp::Lacp_Interfaces*>(
      &::openconfig::openconfig_lacp::_Lacp_Interfaces_default_instance_);
}
inline ::openconfig::openconfig_lacp::Lacp_Interfaces* Lacp::release_interfaces() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_lacp.Lacp.interfaces)
  
  ::openconfig::openconfig_lacp::Lacp_Interfaces* temp = interfaces_;
  interfaces_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_lacp::Lacp_Interfaces* Lacp::mutable_interfaces() {
  
  if (interfaces_ == NULL) {
    interfaces_ = new ::openconfig::openconfig_lacp::Lacp_Interfaces;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_lacp.Lacp.interfaces)
  return interfaces_;
}
inline void Lacp::set_allocated_interfaces(::openconfig::openconfig_lacp::Lacp_Interfaces* interfaces) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete interfaces_;
  }
  if (interfaces) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      interfaces = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, interfaces, submessage_arena);
    }
    
  } else {
    
  }
  interfaces_ = interfaces;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_lacp.Lacp.interfaces)
}

// .openconfig.openconfig_lacp.Lacp.State state = 340469368 [(.yext.schemapath) = "/lacp/state"];
inline bool Lacp::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Lacp::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::openconfig::openconfig_lacp::Lacp_State& Lacp::state() const {
  const ::openconfig::openconfig_lacp::Lacp_State* p = state_;
  // @@protoc_insertion_point(field_get:openconfig.openconfig_lacp.Lacp.state)
  return p != NULL ? *p : *reinterpret_cast<const ::openconfig::openconfig_lacp::Lacp_State*>(
      &::openconfig::openconfig_lacp::_Lacp_State_default_instance_);
}
inline ::openconfig::openconfig_lacp::Lacp_State* Lacp::release_state() {
  // @@protoc_insertion_point(field_release:openconfig.openconfig_lacp.Lacp.state)
  
  ::openconfig::openconfig_lacp::Lacp_State* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::openconfig::openconfig_lacp::Lacp_State* Lacp::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::openconfig::openconfig_lacp::Lacp_State;
  }
  // @@protoc_insertion_point(field_mutable:openconfig.openconfig_lacp.Lacp.state)
  return state_;
}
inline void Lacp::set_allocated_state(::openconfig::openconfig_lacp::Lacp_State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:openconfig.openconfig_lacp.Lacp.state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace openconfig_lacp
}  // namespace openconfig

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_openconfig_2fopenconfig_5flacp_2fopenconfig_5flacp_2eproto__INCLUDED
